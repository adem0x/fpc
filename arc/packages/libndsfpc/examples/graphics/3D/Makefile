#
# Don't edit, this file is generated by FPCMake Version 2.0.0 [2014/06/14]
#
default: all
MAKEFILETARGETS=arm-nds
BSDs = freebsd netbsd openbsd darwin
UNIXs = linux $(BSDs) solaris qnx haiku
LIMIT83fs = go32v2 os2 emx watcom
OSNeedsComspecToRunBatch = go32v2 watcom
FORCE:
.PHONY: FORCE
override PATH:=$(patsubst %/,%,$(subst \,/,$(PATH)))
ifneq ($(findstring darwin,$(OSTYPE)),)
inUnix=1 #darwin
SEARCHPATH:=$(filter-out .,$(subst :, ,$(PATH)))
else
ifeq ($(findstring ;,$(PATH)),)
inUnix=1
SEARCHPATH:=$(filter-out .,$(subst :, ,$(PATH)))
else
SEARCHPATH:=$(subst ;, ,$(PATH))
endif
endif
SEARCHPATH+=$(patsubst %/,%,$(subst \,/,$(dir $(MAKE))))
PWD:=$(strip $(wildcard $(addsuffix /pwd.exe,$(SEARCHPATH))))
ifeq ($(PWD),)
PWD:=$(strip $(wildcard $(addsuffix /pwd,$(SEARCHPATH))))
ifeq ($(PWD),)
$(error You need the GNU utils package to use this Makefile)
else
PWD:=$(firstword $(PWD))
SRCEXEEXT=
endif
else
PWD:=$(firstword $(PWD))
SRCEXEEXT=.exe
endif
ifndef inUnix
ifeq ($(OS),Windows_NT)
inWinNT=1
else
ifdef OS2_SHELL
inOS2=1
endif
endif
else
ifneq ($(findstring cygdrive,$(PATH)),)
inCygWin=1
endif
endif
ifdef inUnix
SRCBATCHEXT=.sh
else
ifdef inOS2
SRCBATCHEXT=.cmd
else
SRCBATCHEXT=.bat
endif
endif
ifdef COMSPEC
ifneq ($(findstring $(OS_SOURCE),$(OSNeedsComspecToRunBatch)),)
ifndef RUNBATCH
RUNBATCH=$(COMSPEC) /C
endif
endif
endif
ifdef inUnix
PATHSEP=/
else
PATHSEP:=$(subst /,\,/)
ifdef inCygWin
PATHSEP=/
endif
endif
ifdef PWD
BASEDIR:=$(subst \,/,$(shell $(PWD)))
ifdef inCygWin
ifneq ($(findstring /cygdrive/,$(BASEDIR)),)
BASENODIR:=$(patsubst /cygdrive%,%,$(BASEDIR))
BASEDRIVE:=$(firstword $(subst /, ,$(BASENODIR)))
BASEDIR:=$(subst /cygdrive/$(BASEDRIVE)/,$(BASEDRIVE):/,$(BASEDIR))
endif
endif
else
BASEDIR=.
endif
ifdef inOS2
ifndef ECHO
ECHO:=$(strip $(wildcard $(addsuffix /gecho$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(ECHO),)
ECHO:=$(strip $(wildcard $(addsuffix /echo$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(ECHO),)
ECHO=echo
else
ECHO:=$(firstword $(ECHO))
endif
else
ECHO:=$(firstword $(ECHO))
endif
endif
export ECHO
endif
override DEFAULT_FPCDIR=../../../../..
ifndef FPC
ifdef PP
FPC=$(PP)
endif
endif
ifndef FPC
FPCPROG:=$(strip $(wildcard $(addsuffix /fpc$(SRCEXEEXT),$(SEARCHPATH))))
ifneq ($(FPCPROG),)
FPCPROG:=$(firstword $(FPCPROG))
ifneq ($(CPU_TARGET),)
FPC:=$(shell $(FPCPROG) -P$(CPU_TARGET) -PB)
else
FPC:=$(shell $(FPCPROG) -PB)
endif
ifneq ($(findstring Error,$(FPC)),)
override FPC=$(firstword $(strip $(wildcard $(addsuffix /ppc386$(SRCEXEEXT),$(SEARCHPATH)))))
else
ifeq ($(strip $(wildcard $(FPC))),)
FPC:=$(firstword $(FPCPROG))
endif
endif
else
override FPC=$(firstword $(strip $(wildcard $(addsuffix /ppc386$(SRCEXEEXT),$(SEARCHPATH)))))
endif
endif
override FPC:=$(subst $(SRCEXEEXT),,$(FPC))
override FPC:=$(subst \,/,$(FPC))$(SRCEXEEXT)
FOUNDFPC:=$(strip $(wildcard $(FPC)))
ifeq ($(FOUNDFPC),)
FOUNDFPC=$(strip $(wildcard $(addsuffix /$(FPC),$(SEARCHPATH))))
ifeq ($(FOUNDFPC),)
$(error Compiler $(FPC) not found)
endif
endif
ifndef FPC_COMPILERINFO
FPC_COMPILERINFO:=$(shell $(FPC) -iVSPTPSOTO)
endif
ifndef FPC_VERSION
FPC_VERSION:=$(word 1,$(FPC_COMPILERINFO))
endif
export FPC FPC_VERSION FPC_COMPILERINFO
unexport CHECKDEPEND ALLDEPENDENCIES
ifndef CPU_TARGET
ifdef CPU_TARGET_DEFAULT
CPU_TARGET=$(CPU_TARGET_DEFAULT)
endif
endif
ifndef OS_TARGET
ifdef OS_TARGET_DEFAULT
OS_TARGET=$(OS_TARGET_DEFAULT)
endif
endif
ifndef CPU_SOURCE
CPU_SOURCE:=$(word 2,$(FPC_COMPILERINFO))
endif
ifndef CPU_TARGET
CPU_TARGET:=$(word 3,$(FPC_COMPILERINFO))
endif
ifndef OS_SOURCE
OS_SOURCE:=$(word 4,$(FPC_COMPILERINFO))
endif
ifndef OS_TARGET
OS_TARGET:=$(word 5,$(FPC_COMPILERINFO))
endif
FULL_TARGET=$(CPU_TARGET)-$(OS_TARGET)
FULL_SOURCE=$(CPU_SOURCE)-$(OS_SOURCE)
ifeq ($(CPU_TARGET),armeb)
ARCH=arm
override FPCOPT+=-Cb
else
ifeq ($(CPU_TARGET),armel)
ARCH=arm
override FPCOPT+=-CaEABI
else
ARCH=$(CPU_TARGET)
endif
endif
ifneq ($(findstring $(OS_SOURCE),$(LIMIT83fs)),)
TARGETSUFFIX=$(OS_TARGET)
SOURCESUFFIX=$(OS_SOURCE)
else
ifneq ($(findstring $(OS_TARGET),$(LIMIT83fs)),)
TARGETSUFFIX=$(OS_TARGET)
else
TARGETSUFFIX=$(FULL_TARGET)
endif
SOURCESUFFIX=$(FULL_SOURCE)
endif
ifneq ($(FULL_TARGET),$(FULL_SOURCE))
CROSSCOMPILE=1
endif
ifeq ($(findstring makefile,$(MAKECMDGOALS)),)
ifeq ($(findstring $(FULL_TARGET),$(MAKEFILETARGETS)),)
$(error The Makefile doesn't support target $(FULL_TARGET), please run fpcmake first)
endif
endif
ifneq ($(findstring $(OS_TARGET),$(BSDs)),)
BSDhier=1
endif
ifeq ($(OS_TARGET),linux)
linuxHier=1
endif
export OS_TARGET OS_SOURCE ARCH CPU_TARGET CPU_SOURCE FULL_TARGET FULL_SOURCE TARGETSUFFIX SOURCESUFFIX CROSSCOMPILE
ifdef FPCDIR
override FPCDIR:=$(subst \,/,$(FPCDIR))
ifeq ($(wildcard $(addprefix $(FPCDIR)/,rtl units)),)
override FPCDIR=wrong
endif
else
override FPCDIR=wrong
endif
ifdef DEFAULT_FPCDIR
ifeq ($(FPCDIR),wrong)
override FPCDIR:=$(subst \,/,$(DEFAULT_FPCDIR))
ifeq ($(wildcard $(addprefix $(FPCDIR)/,rtl units)),)
override FPCDIR=wrong
endif
endif
endif
ifeq ($(FPCDIR),wrong)
ifdef inUnix
override FPCDIR=/usr/local/lib/fpc/$(FPC_VERSION)
ifeq ($(wildcard $(FPCDIR)/units),)
override FPCDIR=/usr/lib/fpc/$(FPC_VERSION)
endif
else
override FPCDIR:=$(subst /$(FPC),,$(firstword $(strip $(wildcard $(addsuffix /$(FPC),$(SEARCHPATH))))))
override FPCDIR:=$(FPCDIR)/..
ifeq ($(wildcard $(addprefix $(FPCDIR)/,rtl units)),)
override FPCDIR:=$(FPCDIR)/..
ifeq ($(wildcard $(addprefix $(FPCDIR)/,rtl units)),)
override FPCDIR:=$(BASEDIR)
ifeq ($(wildcard $(addprefix $(FPCDIR)/,rtl units)),)
override FPCDIR=c:/pp
endif
endif
endif
endif
endif
ifndef CROSSBINDIR
CROSSBINDIR:=$(wildcard $(FPCDIR)/bin/$(TARGETSUFFIX))
endif
ifneq ($(findstring $(OS_TARGET),darwin iphonesim),)
ifeq ($(OS_SOURCE),darwin)
DARWIN2DARWIN=1
endif
endif
ifndef BINUTILSPREFIX
ifndef CROSSBINDIR
ifdef CROSSCOMPILE
ifndef DARWIN2DARWIN
BINUTILSPREFIX=$(CPU_TARGET)-$(OS_TARGET)-
endif
endif
endif
endif
UNITSDIR:=$(wildcard $(FPCDIR)/units/$(TARGETSUFFIX))
ifeq ($(UNITSDIR),)
UNITSDIR:=$(wildcard $(FPCDIR)/units/$(OS_TARGET))
endif
PACKAGESDIR:=$(wildcard $(FPCDIR) $(FPCDIR)/packages $(FPCDIR)/packages/base $(FPCDIR)/packages/extra)
ifndef FPCFPMAKE
ifdef CROSSCOMPILE
ifeq ($(strip $(wildcard $(addsuffix /compiler/ppc$(SRCEXEEXT),$(FPCDIR)))),)
FPCPROG:=$(strip $(wildcard $(addsuffix /fpc$(SRCEXEEXT),$(SEARCHPATH))))
ifneq ($(FPCPROG),)
FPCPROG:=$(firstword $(FPCPROG))
FPCFPMAKE:=$(shell $(FPCPROG) -PB)
ifeq ($(strip $(wildcard $(FPCFPMAKE))),)
FPCFPMAKE:=$(firstword $(FPCPROG))
endif
else
override FPCFPMAKE=$(firstword $(strip $(wildcard $(addsuffix /ppc386$(SRCEXEEXT),$(SEARCHPATH)))))
endif
else
FPCFPMAKE=$(strip $(wildcard $(addsuffix /compiler/ppc$(SRCEXEEXT),$(FPCDIR))))
FPMAKE_SKIP_CONFIG=-n
export FPCFPMAKE
export FPMAKE_SKIP_CONFIG
endif
else
FPMAKE_SKIP_CONFIG=-n
FPCFPMAKE=$(FPC)
endif
endif
ifeq ($(FULL_TARGET),arm-nds)
override TARGET_DIRS+=3D_Both_Screens BoxTest Display_List Display_List_2 Env_Mapping Mixed_Text_3D Ortho Paletted_Cube Picking Simple_Quad Simple_Tri Textured_Cube Textured_Quad Toon_Shading nehe
endif
override INSTALL_FPCPACKAGE=y
ifdef REQUIRE_UNITSDIR
override UNITSDIR+=$(REQUIRE_UNITSDIR)
endif
ifdef REQUIRE_PACKAGESDIR
override PACKAGESDIR+=$(REQUIRE_PACKAGESDIR)
endif
ifdef ZIPINSTALL
ifneq ($(findstring $(OS_TARGET),$(UNIXs)),)
UNIXHier=1
endif
else
ifneq ($(findstring $(OS_SOURCE),$(UNIXs)),)
UNIXHier=1
endif
endif
ifndef INSTALL_PREFIX
ifdef PREFIX
INSTALL_PREFIX=$(PREFIX)
endif
endif
ifndef INSTALL_PREFIX
ifdef UNIXHier
INSTALL_PREFIX=/usr/local
else
ifdef INSTALL_FPCPACKAGE
INSTALL_BASEDIR:=/pp
else
INSTALL_BASEDIR:=/$(PACKAGE_NAME)
endif
endif
endif
export INSTALL_PREFIX
ifdef INSTALL_FPCSUBDIR
export INSTALL_FPCSUBDIR
endif
ifndef DIST_DESTDIR
DIST_DESTDIR:=$(BASEDIR)
endif
export DIST_DESTDIR
ifndef COMPILER_UNITTARGETDIR
ifdef PACKAGEDIR_MAIN
COMPILER_UNITTARGETDIR=$(PACKAGEDIR_MAIN)/units/$(TARGETSUFFIX)
else
COMPILER_UNITTARGETDIR=units/$(TARGETSUFFIX)
endif
endif
ifndef COMPILER_TARGETDIR
COMPILER_TARGETDIR=.
endif
ifndef INSTALL_BASEDIR
ifdef UNIXHier
ifdef INSTALL_FPCPACKAGE
INSTALL_BASEDIR:=$(INSTALL_PREFIX)/lib/fpc/$(FPC_VERSION)
else
INSTALL_BASEDIR:=$(INSTALL_PREFIX)/lib/$(PACKAGE_NAME)
endif
else
INSTALL_BASEDIR:=$(INSTALL_PREFIX)
endif
endif
ifndef INSTALL_BINDIR
ifdef UNIXHier
INSTALL_BINDIR:=$(INSTALL_PREFIX)/bin
else
INSTALL_BINDIR:=$(INSTALL_BASEDIR)/bin
ifdef INSTALL_FPCPACKAGE
ifdef CROSSCOMPILE
ifdef CROSSINSTALL
INSTALL_BINDIR:=$(INSTALL_BINDIR)/$(SOURCESUFFIX)
else
INSTALL_BINDIR:=$(INSTALL_BINDIR)/$(TARGETSUFFIX)
endif
else
INSTALL_BINDIR:=$(INSTALL_BINDIR)/$(TARGETSUFFIX)
endif
endif
endif
endif
ifndef INSTALL_UNITDIR
INSTALL_UNITDIR:=$(INSTALL_BASEDIR)/units/$(TARGETSUFFIX)
ifdef INSTALL_FPCPACKAGE
ifdef PACKAGE_NAME
INSTALL_UNITDIR:=$(INSTALL_UNITDIR)/$(PACKAGE_NAME)
endif
endif
endif
ifndef INSTALL_LIBDIR
ifdef UNIXHier
INSTALL_LIBDIR:=$(INSTALL_PREFIX)/lib
else
INSTALL_LIBDIR:=$(INSTALL_UNITDIR)
endif
endif
ifndef INSTALL_SOURCEDIR
ifdef UNIXHier
ifdef BSDhier
SRCPREFIXDIR=share/src
else
ifdef linuxHier
SRCPREFIXDIR=share/src
else
SRCPREFIXDIR=src
endif
endif
ifdef INSTALL_FPCPACKAGE
ifdef INSTALL_FPCSUBDIR
INSTALL_SOURCEDIR:=$(INSTALL_PREFIX)/$(SRCPREFIXDIR)/fpc-$(FPC_VERSION)/$(INSTALL_FPCSUBDIR)/$(PACKAGE_NAME)
else
INSTALL_SOURCEDIR:=$(INSTALL_PREFIX)/$(SRCPREFIXDIR)/fpc-$(FPC_VERSION)/$(PACKAGE_NAME)
endif
else
INSTALL_SOURCEDIR:=$(INSTALL_PREFIX)/$(SRCPREFIXDIR)/$(PACKAGE_NAME)-$(PACKAGE_VERSION)
endif
else
ifdef INSTALL_FPCPACKAGE
ifdef INSTALL_FPCSUBDIR
INSTALL_SOURCEDIR:=$(INSTALL_BASEDIR)/source/$(INSTALL_FPCSUBDIR)/$(PACKAGE_NAME)
else
INSTALL_SOURCEDIR:=$(INSTALL_BASEDIR)/source/$(PACKAGE_NAME)
endif
else
INSTALL_SOURCEDIR:=$(INSTALL_BASEDIR)/source
endif
endif
endif
ifndef INSTALL_DOCDIR
ifdef UNIXHier
ifdef BSDhier
DOCPREFIXDIR=share/doc
else
ifdef linuxHier
DOCPREFIXDIR=share/doc
else
DOCPREFIXDIR=doc
endif
endif
ifdef INSTALL_FPCPACKAGE
INSTALL_DOCDIR:=$(INSTALL_PREFIX)/$(DOCPREFIXDIR)/fpc-$(FPC_VERSION)/$(PACKAGE_NAME)
else
INSTALL_DOCDIR:=$(INSTALL_PREFIX)/$(DOCPREFIXDIR)/$(PACKAGE_NAME)-$(PACKAGE_VERSION)
endif
else
ifdef INSTALL_FPCPACKAGE
INSTALL_DOCDIR:=$(INSTALL_BASEDIR)/doc/$(PACKAGE_NAME)
else
INSTALL_DOCDIR:=$(INSTALL_BASEDIR)/doc
endif
endif
endif
ifndef INSTALL_EXAMPLEDIR
ifdef UNIXHier
ifdef INSTALL_FPCPACKAGE
ifdef BSDhier
INSTALL_EXAMPLEDIR:=$(INSTALL_PREFIX)/share/examples/fpc-$(FPC_VERSION)/$(PACKAGE_NAME)
else
ifdef linuxHier
INSTALL_EXAMPLEDIR:=$(INSTALL_DOCDIR)/examples
else
INSTALL_EXAMPLEDIR:=$(INSTALL_PREFIX)/doc/fpc-$(FPC_VERSION)/examples/$(PACKAGE_NAME)
endif
endif
else
ifdef BSDhier
INSTALL_EXAMPLEDIR:=$(INSTALL_PREFIX)/share/examples/$(PACKAGE_NAME)-$(PACKAGE_VERSION)
else
ifdef linuxHier
INSTALL_EXAMPLEDIR:=$(INSTALL_DOCDIR)/examples/$(PACKAGE_NAME)-$(PACKAGE_VERSION)
else
INSTALL_EXAMPLEDIR:=$(INSTALL_PREFIX)/doc/$(PACKAGE_NAME)-$(PACKAGE_VERSION)
endif
endif
endif
else
ifdef INSTALL_FPCPACKAGE
INSTALL_EXAMPLEDIR:=$(INSTALL_BASEDIR)/examples/$(PACKAGE_NAME)
else
INSTALL_EXAMPLEDIR:=$(INSTALL_BASEDIR)/examples
endif
endif
endif
ifndef INSTALL_DATADIR
INSTALL_DATADIR=$(INSTALL_BASEDIR)
endif
ifndef INSTALL_SHAREDDIR
INSTALL_SHAREDDIR=$(INSTALL_PREFIX)/lib
endif
ifdef CROSSCOMPILE
ifndef CROSSBINDIR
CROSSBINDIR:=$(wildcard $(CROSSTARGETDIR)/bin/$(SOURCESUFFIX))
ifeq ($(CROSSBINDIR),)
CROSSBINDIR:=$(wildcard $(INSTALL_BASEDIR)/cross/$(TARGETSUFFIX)/bin/$(FULL_SOURCE))
endif
endif
else
CROSSBINDIR=
endif
BATCHEXT=.bat
LOADEREXT=.as
EXEEXT=.exe
PPLEXT=.ppl
PPUEXT=.ppu
OEXT=.o
ASMEXT=.s
SMARTEXT=.sl
STATICLIBEXT=.a
SHAREDLIBEXT=.so
SHAREDLIBPREFIX=libfp
STATICLIBPREFIX=libp
IMPORTLIBPREFIX=libimp
RSTEXT=.rst
EXEDBGEXT=.dbg
ifeq ($(OS_TARGET),go32v1)
STATICLIBPREFIX=
SHORTSUFFIX=v1
endif
ifeq ($(OS_TARGET),go32v2)
STATICLIBPREFIX=
SHORTSUFFIX=dos
IMPORTLIBPREFIX=
endif
ifeq ($(OS_TARGET),watcom)
STATICLIBPREFIX=
OEXT=.obj
ASMEXT=.asm
SHAREDLIBEXT=.dll
SHORTSUFFIX=wat
IMPORTLIBPREFIX=
endif
ifeq ($(OS_TARGET),linux)
BATCHEXT=.sh
EXEEXT=
HASSHAREDLIB=1
SHORTSUFFIX=lnx
endif
ifeq ($(OS_TARGET),freebsd)
BATCHEXT=.sh
EXEEXT=
HASSHAREDLIB=1
SHORTSUFFIX=fbs
endif
ifeq ($(OS_TARGET),netbsd)
BATCHEXT=.sh
EXEEXT=
HASSHAREDLIB=1
SHORTSUFFIX=nbs
endif
ifeq ($(OS_TARGET),openbsd)
BATCHEXT=.sh
EXEEXT=
HASSHAREDLIB=1
SHORTSUFFIX=obs
endif
ifeq ($(OS_TARGET),win32)
SHAREDLIBEXT=.dll
SHORTSUFFIX=w32
endif
ifeq ($(OS_TARGET),os2)
BATCHEXT=.cmd
AOUTEXT=.out
STATICLIBPREFIX=
SHAREDLIBEXT=.dll
SHORTSUFFIX=os2
ECHO=echo
IMPORTLIBPREFIX=
endif
ifeq ($(OS_TARGET),emx)
BATCHEXT=.cmd
AOUTEXT=.out
STATICLIBPREFIX=
SHAREDLIBEXT=.dll
SHORTSUFFIX=emx
ECHO=echo
IMPORTLIBPREFIX=
endif
ifeq ($(OS_TARGET),amiga)
EXEEXT=
SHAREDLIBEXT=.library
SHORTSUFFIX=amg
endif
ifeq ($(OS_TARGET),morphos)
EXEEXT=
SHAREDLIBEXT=.library
SHORTSUFFIX=mos
endif
ifeq ($(OS_TARGET),atari)
EXEEXT=.ttp
SHORTSUFFIX=ata
endif
ifeq ($(OS_TARGET),beos)
BATCHEXT=.sh
EXEEXT=
SHORTSUFFIX=be
endif
ifeq ($(OS_TARGET),haiku)
BATCHEXT=.sh
EXEEXT=
SHORTSUFFIX=hai
endif
ifeq ($(OS_TARGET),solaris)
BATCHEXT=.sh
EXEEXT=
SHORTSUFFIX=sun
endif
ifeq ($(OS_TARGET),qnx)
BATCHEXT=.sh
EXEEXT=
SHORTSUFFIX=qnx
endif
ifeq ($(OS_TARGET),netware)
EXEEXT=.nlm
STATICLIBPREFIX=
SHORTSUFFIX=nw
IMPORTLIBPREFIX=imp
endif
ifeq ($(OS_TARGET),netwlibc)
EXEEXT=.nlm
STATICLIBPREFIX=
SHORTSUFFIX=nwl
IMPORTLIBPREFIX=imp
endif
ifeq ($(OS_TARGET),macos)
BATCHEXT=
EXEEXT=
DEBUGSYMEXT=.xcoff
SHORTSUFFIX=mac
IMPORTLIBPREFIX=imp
endif
ifneq ($(findstring $(OS_TARGET),darwin iphonesim),)
BATCHEXT=.sh
EXEEXT=
HASSHAREDLIB=1
SHORTSUFFIX=dwn
EXEDBGEXT=.dSYM
endif
ifeq ($(OS_TARGET),gba)
EXEEXT=.gba
SHAREDLIBEXT=.so
SHORTSUFFIX=gba
endif
ifeq ($(OS_TARGET),symbian)
SHAREDLIBEXT=.dll
SHORTSUFFIX=symbian
endif
ifeq ($(OS_TARGET),NativeNT)
SHAREDLIBEXT=.dll
SHORTSUFFIX=nativent
endif
ifeq ($(OS_TARGET),wii)
EXEEXT=.dol
SHAREDLIBEXT=.so
SHORTSUFFIX=wii
endif
ifneq ($(findstring $(OS_SOURCE),$(LIMIT83fs)),)
FPCMADE=fpcmade.$(SHORTSUFFIX)
ZIPSUFFIX=$(SHORTSUFFIX)
ZIPCROSSPREFIX=
ZIPSOURCESUFFIX=src
ZIPEXAMPLESUFFIX=exm
else
FPCMADE=fpcmade.$(TARGETSUFFIX)
ZIPSOURCESUFFIX=.source
ZIPEXAMPLESUFFIX=.examples
ifdef CROSSCOMPILE
ZIPSUFFIX=.$(SOURCESUFFIX)
ZIPCROSSPREFIX=$(TARGETSUFFIX)-
else
ZIPSUFFIX=.$(TARGETSUFFIX)
ZIPCROSSPREFIX=
endif
endif
ifndef ECHO
ECHO:=$(strip $(wildcard $(addsuffix /gecho$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(ECHO),)
ECHO:=$(strip $(wildcard $(addsuffix /echo$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(ECHO),)
ECHO= __missing_command_ECHO
else
ECHO:=$(firstword $(ECHO))
endif
else
ECHO:=$(firstword $(ECHO))
endif
endif
export ECHO
ifndef DATE
DATE:=$(strip $(wildcard $(addsuffix /gdate$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(DATE),)
DATE:=$(strip $(wildcard $(addsuffix /date$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(DATE),)
DATE= __missing_command_DATE
else
DATE:=$(firstword $(DATE))
endif
else
DATE:=$(firstword $(DATE))
endif
endif
export DATE
ifndef GINSTALL
GINSTALL:=$(strip $(wildcard $(addsuffix /ginstall$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(GINSTALL),)
GINSTALL:=$(strip $(wildcard $(addsuffix /install$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(GINSTALL),)
GINSTALL= __missing_command_GINSTALL
else
GINSTALL:=$(firstword $(GINSTALL))
endif
else
GINSTALL:=$(firstword $(GINSTALL))
endif
endif
export GINSTALL
ifndef CPPROG
CPPROG:=$(strip $(wildcard $(addsuffix /cp$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(CPPROG),)
CPPROG= __missing_command_CPPROG
else
CPPROG:=$(firstword $(CPPROG))
endif
endif
export CPPROG
ifndef RMPROG
RMPROG:=$(strip $(wildcard $(addsuffix /rm$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(RMPROG),)
RMPROG= __missing_command_RMPROG
else
RMPROG:=$(firstword $(RMPROG))
endif
endif
export RMPROG
ifndef MVPROG
MVPROG:=$(strip $(wildcard $(addsuffix /mv$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(MVPROG),)
MVPROG= __missing_command_MVPROG
else
MVPROG:=$(firstword $(MVPROG))
endif
endif
export MVPROG
ifndef MKDIRPROG
MKDIRPROG:=$(strip $(wildcard $(addsuffix /gmkdir$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(MKDIRPROG),)
MKDIRPROG:=$(strip $(wildcard $(addsuffix /mkdir$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(MKDIRPROG),)
MKDIRPROG= __missing_command_MKDIRPROG
else
MKDIRPROG:=$(firstword $(MKDIRPROG))
endif
else
MKDIRPROG:=$(firstword $(MKDIRPROG))
endif
endif
export MKDIRPROG
ifndef ECHOREDIR
ifndef inUnix
ECHOREDIR=echo
else
ECHOREDIR=$(ECHO)
endif
endif
ifndef COPY
COPY:=$(CPPROG) -fp
endif
ifndef COPYTREE
COPYTREE:=$(CPPROG) -Rfp
endif
ifndef MKDIRTREE
MKDIRTREE:=$(MKDIRPROG) -p
endif
ifndef MOVE
MOVE:=$(MVPROG) -f
endif
ifndef DEL
DEL:=$(RMPROG) -f
endif
ifndef DELTREE
DELTREE:=$(RMPROG) -rf
endif
ifndef INSTALL
ifdef inUnix
INSTALL:=$(GINSTALL) -c -m 644
else
INSTALL:=$(COPY)
endif
endif
ifndef INSTALLEXE
ifdef inUnix
INSTALLEXE:=$(GINSTALL) -c -m 755
else
INSTALLEXE:=$(COPY)
endif
endif
ifndef MKDIR
MKDIR:=$(GINSTALL) -m 755 -d
endif
export ECHOREDIR COPY COPYTREE MOVE DEL DELTREE INSTALL INSTALLEXE MKDIR
ifndef PPUMOVE
PPUMOVE:=$(strip $(wildcard $(addsuffix /ppumove$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(PPUMOVE),)
PPUMOVE= __missing_command_PPUMOVE
else
PPUMOVE:=$(firstword $(PPUMOVE))
endif
endif
export PPUMOVE
ifndef FPCMAKE
FPCMAKE:=$(strip $(wildcard $(addsuffix /fpcmake$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(FPCMAKE),)
FPCMAKE= __missing_command_FPCMAKE
else
FPCMAKE:=$(firstword $(FPCMAKE))
endif
endif
export FPCMAKE
ifndef ZIPPROG
ZIPPROG:=$(strip $(wildcard $(addsuffix /zip$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(ZIPPROG),)
ZIPPROG= __missing_command_ZIPPROG
else
ZIPPROG:=$(firstword $(ZIPPROG))
endif
endif
export ZIPPROG
ifndef TARPROG
TARPROG:=$(strip $(wildcard $(addsuffix /gtar$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(TARPROG),)
TARPROG:=$(strip $(wildcard $(addsuffix /tar$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(TARPROG),)
TARPROG= __missing_command_TARPROG
else
TARPROG:=$(firstword $(TARPROG))
endif
else
TARPROG:=$(firstword $(TARPROG))
endif
endif
export TARPROG
ASNAME=$(BINUTILSPREFIX)as
LDNAME=$(BINUTILSPREFIX)ld
ARNAME=$(BINUTILSPREFIX)ar
RCNAME=$(BINUTILSPREFIX)rc
ifndef ASPROG
ifdef CROSSBINDIR
ASPROG=$(CROSSBINDIR)/$(ASNAME)$(SRCEXEEXT)
else
ASPROG=$(ASNAME)
endif
endif
ifndef LDPROG
ifdef CROSSBINDIR
LDPROG=$(CROSSBINDIR)/$(LDNAME)$(SRCEXEEXT)
else
LDPROG=$(LDNAME)
endif
endif
ifndef RCPROG
ifdef CROSSBINDIR
RCPROG=$(CROSSBINDIR)/$(RCNAME)$(SRCEXEEXT)
else
RCPROG=$(RCNAME)
endif
endif
ifndef ARPROG
ifdef CROSSBINDIR
ARPROG=$(CROSSBINDIR)/$(ARNAME)$(SRCEXEEXT)
else
ARPROG=$(ARNAME)
endif
endif
AS=$(ASPROG)
LD=$(LDPROG)
RC=$(RCPROG)
AR=$(ARPROG)
PPAS=ppas$(SRCBATCHEXT)
ifdef inUnix
LDCONFIG=ldconfig
else
LDCONFIG=
endif
ifdef DATE
DATESTR:=$(shell $(DATE) +%Y%m%d)
else
DATESTR=
endif
ZIPOPT=-9
ZIPEXT=.zip
ifeq ($(USETAR),bz2)
TAROPT=vj
TAREXT=.tar.bz2
else
TAROPT=vz
TAREXT=.tar.gz
endif
override REQUIRE_PACKAGES=libndsfpc
ifeq ($(FULL_TARGET),arm-nds)
REQUIRE_PACKAGES_LIBNDSFPC=1
endif
ifdef REQUIRE_PACKAGES_LIBNDSFPC
PACKAGEDIR_LIBNDSFPC:=$(firstword $(subst /Makefile.fpc,,$(strip $(wildcard $(addsuffix /libndsfpc/Makefile.fpc,$(PACKAGESDIR))))))
ifneq ($(PACKAGEDIR_LIBNDSFPC),)
ifneq ($(wildcard $(PACKAGEDIR_LIBNDSFPC)/units/$(TARGETSUFFIX)),)
UNITDIR_LIBNDSFPC=$(PACKAGEDIR_LIBNDSFPC)/units/$(TARGETSUFFIX)
else
UNITDIR_LIBNDSFPC=$(PACKAGEDIR_LIBNDSFPC)
endif
ifneq ($(wildcard $(PACKAGEDIR_LIBNDSFPC)/units/$(SOURCESUFFIX)),)
UNITDIR_FPMAKE_LIBNDSFPC=$(PACKAGEDIR_LIBNDSFPC)/units/$(SOURCESUFFIX)
else
ifneq ($(wildcard $(PACKAGEDIR_LIBNDSFPC)/units_bs/$(SOURCESUFFIX)),)
UNITDIR_FPMAKE_LIBNDSFPC=$(PACKAGEDIR_LIBNDSFPC)/units_bs/$(SOURCESUFFIX)
else
UNITDIR_FPMAKE_LIBNDSFPC=$(PACKAGEDIR_LIBNDSFPC)
endif
endif
ifdef CHECKDEPEND
$(PACKAGEDIR_LIBNDSFPC)/$(FPCMADE):
	$(MAKE) -C $(PACKAGEDIR_LIBNDSFPC) $(FPCMADE)
override ALLDEPENDENCIES+=$(PACKAGEDIR_LIBNDSFPC)/$(FPCMADE)
endif
else
PACKAGEDIR_LIBNDSFPC=
UNITDIR_LIBNDSFPC:=$(subst /Package.fpc,,$(strip $(wildcard $(addsuffix /libndsfpc/Package.fpc,$(UNITSDIR)))))
ifneq ($(UNITDIR_LIBNDSFPC),)
UNITDIR_LIBNDSFPC:=$(firstword $(UNITDIR_LIBNDSFPC))
else
UNITDIR_LIBNDSFPC=
endif
endif
ifdef UNITDIR_LIBNDSFPC
override COMPILER_UNITDIR+=$(UNITDIR_LIBNDSFPC)
endif
ifdef UNITDIR_FPMAKE_LIBNDSFPC
override COMPILER_FPMAKE_UNITDIR+=$(UNITDIR_FPMAKE_LIBNDSFPC)
endif
endif
ifndef NOCPUDEF
override FPCOPTDEF=$(ARCH)
endif
ifneq ($(OS_TARGET),$(OS_SOURCE))
override FPCOPT+=-T$(OS_TARGET)
endif
ifneq ($(CPU_TARGET),$(CPU_SOURCE))
override FPCOPT+=-P$(ARCH)
endif
ifeq ($(OS_SOURCE),openbsd)
override FPCOPT+=-FD$(NEW_BINUTILS_PATH)
override FPCMAKEOPT+=-FD$(NEW_BINUTILS_PATH)
endif
ifndef CROSSBOOTSTRAP
ifneq ($(BINUTILSPREFIX),)
override FPCOPT+=-XP$(BINUTILSPREFIX)
endif
ifneq ($(BINUTILSPREFIX),)
override FPCOPT+=-Xr$(RLINKPATH)
endif
endif
ifndef CROSSCOMPILE
ifneq ($(BINUTILSPREFIX),)
override FPCMAKEOPT+=-XP$(BINUTILSPREFIX)
endif
endif
ifdef UNITDIR
override FPCOPT+=$(addprefix -Fu,$(UNITDIR))
endif
ifdef LIBDIR
override FPCOPT+=$(addprefix -Fl,$(LIBDIR))
endif
ifdef OBJDIR
override FPCOPT+=$(addprefix -Fo,$(OBJDIR))
endif
ifdef INCDIR
override FPCOPT+=$(addprefix -Fi,$(INCDIR))
endif
ifdef LINKSMART
override FPCOPT+=-XX
endif
ifdef CREATESMART
override FPCOPT+=-CX
endif
ifdef DEBUG
override FPCOPT+=-gl
override FPCOPTDEF+=DEBUG
endif
ifdef RELEASE
ifneq ($(findstring 2.0.,$(FPC_VERSION)),)
ifeq ($(CPU_TARGET),i386)
FPCCPUOPT:=-OG2p3
endif
ifeq ($(CPU_TARGET),powerpc)
FPCCPUOPT:=-O1r
endif
else
FPCCPUOPT:=-O2
endif
override FPCOPT+=-Ur -Xs $(FPCCPUOPT) -n
override FPCOPTDEF+=RELEASE
endif
ifdef STRIP
override FPCOPT+=-Xs
endif
ifdef OPTIMIZE
override FPCOPT+=-O2
endif
ifdef VERBOSE
override FPCOPT+=-vwni
endif
ifdef COMPILER_OPTIONS
override FPCOPT+=$(COMPILER_OPTIONS)
endif
ifdef COMPILER_UNITDIR
override FPCOPT+=$(addprefix -Fu,$(COMPILER_UNITDIR))
endif
ifdef COMPILER_LIBRARYDIR
override FPCOPT+=$(addprefix -Fl,$(COMPILER_LIBRARYDIR))
endif
ifdef COMPILER_OBJECTDIR
override FPCOPT+=$(addprefix -Fo,$(COMPILER_OBJECTDIR))
endif
ifdef COMPILER_INCLUDEDIR
override FPCOPT+=$(addprefix -Fi,$(COMPILER_INCLUDEDIR))
endif
ifdef CROSSBINDIR
override FPCOPT+=-FD$(CROSSBINDIR)
endif
ifdef COMPILER_TARGETDIR
override FPCOPT+=-FE$(COMPILER_TARGETDIR)
ifeq ($(COMPILER_TARGETDIR),.)
override TARGETDIRPREFIX=
else
override TARGETDIRPREFIX=$(COMPILER_TARGETDIR)/
endif
endif
ifdef COMPILER_UNITTARGETDIR
override FPCOPT+=-FU$(COMPILER_UNITTARGETDIR)
ifeq ($(COMPILER_UNITTARGETDIR),.)
override UNITTARGETDIRPREFIX=
else
override UNITTARGETDIRPREFIX=$(COMPILER_UNITTARGETDIR)/
endif
else
ifdef COMPILER_TARGETDIR
override COMPILER_UNITTARGETDIR=$(COMPILER_TARGETDIR)
override UNITTARGETDIRPREFIX=$(TARGETDIRPREFIX)
endif
endif
ifdef CREATESHARED
override FPCOPT+=-Cg
ifeq ($(CPU_TARGET),i386)
override FPCOPT+=-Aas
endif
endif
ifeq ($(findstring 2.0.,$(FPC_VERSION)),)
ifneq ($(findstring $(OS_TARGET),freebsd openbsd netbsd linux solaris),)
ifeq ($(CPU_TARGET),x86_64)
override FPCOPT+=-Cg
endif
endif
endif
ifdef LINKSHARED
endif
ifdef OPT
override FPCOPT+=$(OPT)
endif
ifdef FPCOPTDEF
override FPCOPT+=$(addprefix -d,$(FPCOPTDEF))
endif
ifdef CFGFILE
override FPCOPT+=@$(CFGFILE)
endif
ifdef USEENV
override FPCEXTCMD:=$(FPCOPT)
override FPCOPT:=!FPCEXTCMD
export FPCEXTCMD
endif
override AFULL_TARGET=$(CPU_TARGET)-$(OS_TARGET)
override AFULL_SOURCE=$(CPU_SOURCE)-$(OS_SOURCE)
ifneq ($(AFULL_TARGET),$(AFULL_SOURCE))
override ACROSSCOMPILE=1
endif
ifdef ACROSSCOMPILE
override FPCOPT+=$(CROSSOPT)
endif
override COMPILER:=$(FPC) $(FPCOPT)
ifeq (,$(findstring -s ,$(COMPILER)))
EXECPPAS=
else
ifeq ($(FULL_SOURCE),$(FULL_TARGET))
ifdef RUNBATCH
EXECPPAS:=@$(RUNBATCH) $(PPAS)
else
EXECPPAS:=@$(PPAS)
endif
endif
endif
ifdef TARGET_RSTS
override RSTFILES=$(addsuffix $(RSTEXT),$(TARGET_RSTS))
override CLEANRSTFILES+=$(RSTFILES)
endif
.PHONY: fpc_clean fpc_cleanall fpc_distclean
ifdef EXEFILES
override CLEANEXEFILES:=$(addprefix $(TARGETDIRPREFIX),$(CLEANEXEFILES))
override CLEANEXEDBGFILES:=$(addprefix $(TARGETDIRPREFIX),$(CLEANEXEDBGFILES))
endif
ifdef CLEAN_PROGRAMS
override CLEANEXEFILES+=$(addprefix $(TARGETDIRPREFIX),$(addsuffix $(EXEEXT), $(CLEAN_PROGRAMS)))
override CLEANEXEDBGFILES+=$(addprefix $(TARGETDIRPREFIX),$(addsuffix $(EXEDBGEXT), $(CLEAN_PROGRAMS)))
endif
ifdef CLEAN_UNITS
override CLEANPPUFILES+=$(addsuffix $(PPUEXT),$(CLEAN_UNITS))
endif
ifdef CLEANPPUFILES
override CLEANPPULINKFILES:=$(subst $(PPUEXT),$(OEXT),$(CLEANPPUFILES)) $(addprefix $(STATICLIBPREFIX),$(subst $(PPUEXT),$(STATICLIBEXT),$(CLEANPPUFILES))) $(addprefix $(IMPORTLIBPREFIX),$(subst $(PPUEXT),$(STATICLIBEXT),$(CLEANPPUFILES)))
ifdef DEBUGSYMEXT
override CLEANPPULINKFILES+=$(subst $(PPUEXT),$(DEBUGSYMEXT),$(CLEANPPUFILES))
endif
override CLEANPPUFILES:=$(addprefix $(UNITTARGETDIRPREFIX),$(CLEANPPUFILES))
override CLEANPPULINKFILES:=$(wildcard $(addprefix $(UNITTARGETDIRPREFIX),$(CLEANPPULINKFILES)))
endif
fpc_clean: $(CLEANTARGET)
ifdef CLEANEXEFILES
	-$(DEL) $(CLEANEXEFILES)
endif
ifdef CLEANEXEDBGFILES
	-$(DELTREE) $(CLEANEXEDBGFILES)
endif
ifdef CLEANPPUFILES
	-$(DEL) $(CLEANPPUFILES)
endif
ifneq ($(CLEANPPULINKFILES),)
	-$(DEL) $(CLEANPPULINKFILES)
endif
ifdef CLEANRSTFILES
	-$(DEL) $(addprefix $(UNITTARGETDIRPREFIX),$(CLEANRSTFILES))
endif
ifdef CLEAN_FILES
	-$(DEL) $(CLEAN_FILES)
endif
ifdef LIB_NAME
	-$(DEL) $(LIB_NAME) $(LIB_FULLNAME)
endif
	-$(DEL) $(FPCMADE) Package.fpc $(PPAS) script.res link.res $(FPCEXTFILE) $(REDIRFILE)
	-$(DEL) *$(ASMEXT) *_ppas$(BATCHEXT)
fpc_cleanall: $(CLEANTARGET)
ifdef CLEANEXEFILES
	-$(DEL) $(CLEANEXEFILES)
endif
ifdef COMPILER_UNITTARGETDIR
ifdef CLEANPPUFILES
	-$(DEL) $(CLEANPPUFILES)
endif
ifneq ($(CLEANPPULINKFILES),)
	-$(DEL) $(CLEANPPULINKFILES)
endif
ifdef CLEANRSTFILES
	-$(DEL) $(addprefix $(UNITTARGETDIRPREFIX),$(CLEANRSTFILES))
endif
endif
ifdef CLEAN_FILES
	-$(DEL) $(CLEAN_FILES)
endif
	-$(DELTREE) units
	-$(DEL) *$(OEXT) *$(PPUEXT) *$(RSTEXT) *$(ASMEXT) *$(STATICLIBEXT) *$(SHAREDLIBEXT) *$(PPLEXT)
ifneq ($(PPUEXT),.ppu)
	-$(DEL) *.o *.ppu *.a
endif
	-$(DELTREE) *$(SMARTEXT)
	-$(DEL) fpcmade.* Package.fpc $(PPAS) script.res link.res $(FPCEXTFILE) $(REDIRFILE)
	-$(DEL) *_ppas$(BATCHEXT)
ifdef AOUTEXT
	-$(DEL) *$(AOUTEXT)
endif
ifdef DEBUGSYMEXT
	-$(DEL) *$(DEBUGSYMEXT)
endif
fpc_distclean: cleanall
.PHONY: fpc_baseinfo
override INFORULES+=fpc_baseinfo
fpc_baseinfo:
	@$(ECHO)
	@$(ECHO)  == Package info ==
	@$(ECHO)  Package Name..... $(PACKAGE_NAME)
	@$(ECHO)  Package Version.. $(PACKAGE_VERSION)
	@$(ECHO)
	@$(ECHO)  == Configuration info ==
	@$(ECHO)
	@$(ECHO)  FPC.......... $(FPC)
	@$(ECHO)  FPC Version.. $(FPC_VERSION)
	@$(ECHO)  Source CPU... $(CPU_SOURCE)
	@$(ECHO)  Target CPU... $(CPU_TARGET)
	@$(ECHO)  Source OS.... $(OS_SOURCE)
	@$(ECHO)  Target OS.... $(OS_TARGET)
	@$(ECHO)  Full Source.. $(FULL_SOURCE)
	@$(ECHO)  Full Target.. $(FULL_TARGET)
	@$(ECHO)  SourceSuffix. $(SOURCESUFFIX)
	@$(ECHO)  TargetSuffix. $(TARGETSUFFIX)
	@$(ECHO)  FPC fpmake... $(FPCFPMAKE)
	@$(ECHO)
	@$(ECHO)  == Directory info ==
	@$(ECHO)
	@$(ECHO)  Required pkgs... $(REQUIRE_PACKAGES)
	@$(ECHO)
	@$(ECHO)  Basedir......... $(BASEDIR)
	@$(ECHO)  FPCDir.......... $(FPCDIR)
	@$(ECHO)  CrossBinDir..... $(CROSSBINDIR)
	@$(ECHO)  UnitsDir........ $(UNITSDIR)
	@$(ECHO)  PackagesDir..... $(PACKAGESDIR)
	@$(ECHO)
	@$(ECHO)  GCC library..... $(GCCLIBDIR)
	@$(ECHO)  Other library... $(OTHERLIBDIR)
	@$(ECHO)
	@$(ECHO)  == Tools info ==
	@$(ECHO)
	@$(ECHO)  As........ $(AS)
	@$(ECHO)  Ld........ $(LD)
	@$(ECHO)  Ar........ $(AR)
	@$(ECHO)  Rc........ $(RC)
	@$(ECHO)
	@$(ECHO)  Mv........ $(MVPROG)
	@$(ECHO)  Cp........ $(CPPROG)
	@$(ECHO)  Rm........ $(RMPROG)
	@$(ECHO)  GInstall.. $(GINSTALL)
	@$(ECHO)  Echo...... $(ECHO)
	@$(ECHO)  Shell..... $(SHELL)
	@$(ECHO)  Date...... $(DATE)
	@$(ECHO)  FPCMake... $(FPCMAKE)
	@$(ECHO)  PPUMove... $(PPUMOVE)
	@$(ECHO)  Zip....... $(ZIPPROG)
	@$(ECHO)
	@$(ECHO)  == Object info ==
	@$(ECHO)
	@$(ECHO)  Target Loaders........ $(TARGET_LOADERS)
	@$(ECHO)  Target Units.......... $(TARGET_UNITS)
	@$(ECHO)  Target Implicit Units. $(TARGET_IMPLICITUNITS)
	@$(ECHO)  Target Programs....... $(TARGET_PROGRAMS)
	@$(ECHO)  Target Dirs........... $(TARGET_DIRS)
	@$(ECHO)  Target Examples....... $(TARGET_EXAMPLES)
	@$(ECHO)  Target ExampleDirs.... $(TARGET_EXAMPLEDIRS)
	@$(ECHO)
	@$(ECHO)  Clean Units......... $(CLEAN_UNITS)
	@$(ECHO)  Clean Files......... $(CLEAN_FILES)
	@$(ECHO)
	@$(ECHO)  Install Units....... $(INSTALL_UNITS)
	@$(ECHO)  Install Files....... $(INSTALL_FILES)
	@$(ECHO)
	@$(ECHO)  == Install info ==
	@$(ECHO)
	@$(ECHO)  DateStr.............. $(DATESTR)
	@$(ECHO)  ZipName.............. $(ZIPNAME)
	@$(ECHO)  ZipPrefix............ $(ZIPPREFIX)
	@$(ECHO)  ZipCrossPrefix....... $(ZIPCROSSPREFIX)
	@$(ECHO)  ZipSuffix............ $(ZIPSUFFIX)
	@$(ECHO)  FullZipName.......... $(FULLZIPNAME)
	@$(ECHO)  Install FPC Package.. $(INSTALL_FPCPACKAGE)
	@$(ECHO)
	@$(ECHO)  Install base dir..... $(INSTALL_BASEDIR)
	@$(ECHO)  Install binary dir... $(INSTALL_BINDIR)
	@$(ECHO)  Install library dir.. $(INSTALL_LIBDIR)
	@$(ECHO)  Install units dir.... $(INSTALL_UNITDIR)
	@$(ECHO)  Install source dir... $(INSTALL_SOURCEDIR)
	@$(ECHO)  Install doc dir...... $(INSTALL_DOCDIR)
	@$(ECHO)  Install example dir.. $(INSTALL_EXAMPLEDIR)
	@$(ECHO)  Install data dir..... $(INSTALL_DATADIR)
	@$(ECHO)
	@$(ECHO)  Dist destination dir. $(DIST_DESTDIR)
	@$(ECHO)  Dist zip name........ $(DIST_ZIPNAME)
	@$(ECHO)
.PHONY: fpc_info
fpc_info: $(INFORULES)
.PHONY: fpc_makefile fpc_makefiles fpc_makefile_sub1 fpc_makefile_sub2 \
	fpc_makefile_dirs
fpc_makefile:
	$(FPCMAKE) -w -T$(OS_TARGET) Makefile.fpc
fpc_makefile_sub1:
ifdef TARGET_DIRS
	$(FPCMAKE) -w -T$(OS_TARGET) $(addsuffix /Makefile.fpc,$(TARGET_DIRS))
endif
ifdef TARGET_EXAMPLEDIRS
	$(FPCMAKE) -w -T$(OS_TARGET) $(addsuffix /Makefile.fpc,$(TARGET_EXAMPLEDIRS))
endif
fpc_makefile_sub2: $(addsuffix _makefile_dirs,$(TARGET_DIRS) $(TARGET_EXAMPLEDIRS))
fpc_makefile_dirs: fpc_makefile_sub1 fpc_makefile_sub2
fpc_makefiles: fpc_makefile fpc_makefile_dirs
ifeq ($(FULL_TARGET),arm-nds)
TARGET_DIRS_3D_BOTH_SCREENS=1
TARGET_DIRS_BOXTEST=1
TARGET_DIRS_DISPLAY_LIST=1
TARGET_DIRS_DISPLAY_LIST_2=1
TARGET_DIRS_ENV_MAPPING=1
TARGET_DIRS_MIXED_TEXT_3D=1
TARGET_DIRS_ORTHO=1
TARGET_DIRS_PALETTED_CUBE=1
TARGET_DIRS_PICKING=1
TARGET_DIRS_SIMPLE_QUAD=1
TARGET_DIRS_SIMPLE_TRI=1
TARGET_DIRS_TEXTURED_CUBE=1
TARGET_DIRS_TEXTURED_QUAD=1
TARGET_DIRS_TOON_SHADING=1
TARGET_DIRS_NEHE=1
endif
ifdef TARGET_DIRS_3D_BOTH_SCREENS
3D_Both_Screens_all:
	$(MAKE) -C 3D_Both_Screens all
3D_Both_Screens_debug:
	$(MAKE) -C 3D_Both_Screens debug
3D_Both_Screens_smart:
	$(MAKE) -C 3D_Both_Screens smart
3D_Both_Screens_release:
	$(MAKE) -C 3D_Both_Screens release
3D_Both_Screens_units:
	$(MAKE) -C 3D_Both_Screens units
3D_Both_Screens_examples:
	$(MAKE) -C 3D_Both_Screens examples
3D_Both_Screens_shared:
	$(MAKE) -C 3D_Both_Screens shared
3D_Both_Screens_install:
	$(MAKE) -C 3D_Both_Screens install
3D_Both_Screens_sourceinstall:
	$(MAKE) -C 3D_Both_Screens sourceinstall
3D_Both_Screens_exampleinstall:
	$(MAKE) -C 3D_Both_Screens exampleinstall
3D_Both_Screens_distinstall:
	$(MAKE) -C 3D_Both_Screens distinstall
3D_Both_Screens_zipinstall:
	$(MAKE) -C 3D_Both_Screens zipinstall
3D_Both_Screens_zipsourceinstall:
	$(MAKE) -C 3D_Both_Screens zipsourceinstall
3D_Both_Screens_zipexampleinstall:
	$(MAKE) -C 3D_Both_Screens zipexampleinstall
3D_Both_Screens_zipdistinstall:
	$(MAKE) -C 3D_Both_Screens zipdistinstall
3D_Both_Screens_clean:
	$(MAKE) -C 3D_Both_Screens clean
3D_Both_Screens_distclean:
	$(MAKE) -C 3D_Both_Screens distclean
3D_Both_Screens_cleanall:
	$(MAKE) -C 3D_Both_Screens cleanall
3D_Both_Screens_info:
	$(MAKE) -C 3D_Both_Screens info
3D_Both_Screens_makefiles:
	$(MAKE) -C 3D_Both_Screens makefiles
3D_Both_Screens:
	$(MAKE) -C 3D_Both_Screens all
.PHONY: 3D_Both_Screens_all 3D_Both_Screens_debug 3D_Both_Screens_smart 3D_Both_Screens_release 3D_Both_Screens_units 3D_Both_Screens_examples 3D_Both_Screens_shared 3D_Both_Screens_install 3D_Both_Screens_sourceinstall 3D_Both_Screens_exampleinstall 3D_Both_Screens_distinstall 3D_Both_Screens_zipinstall 3D_Both_Screens_zipsourceinstall 3D_Both_Screens_zipexampleinstall 3D_Both_Screens_zipdistinstall 3D_Both_Screens_clean 3D_Both_Screens_distclean 3D_Both_Screens_cleanall 3D_Both_Screens_info 3D_Both_Screens_makefiles 3D_Both_Screens
endif
ifdef TARGET_DIRS_BOXTEST
BoxTest_all:
	$(MAKE) -C BoxTest all
BoxTest_debug:
	$(MAKE) -C BoxTest debug
BoxTest_smart:
	$(MAKE) -C BoxTest smart
BoxTest_release:
	$(MAKE) -C BoxTest release
BoxTest_units:
	$(MAKE) -C BoxTest units
BoxTest_examples:
	$(MAKE) -C BoxTest examples
BoxTest_shared:
	$(MAKE) -C BoxTest shared
BoxTest_install:
	$(MAKE) -C BoxTest install
BoxTest_sourceinstall:
	$(MAKE) -C BoxTest sourceinstall
BoxTest_exampleinstall:
	$(MAKE) -C BoxTest exampleinstall
BoxTest_distinstall:
	$(MAKE) -C BoxTest distinstall
BoxTest_zipinstall:
	$(MAKE) -C BoxTest zipinstall
BoxTest_zipsourceinstall:
	$(MAKE) -C BoxTest zipsourceinstall
BoxTest_zipexampleinstall:
	$(MAKE) -C BoxTest zipexampleinstall
BoxTest_zipdistinstall:
	$(MAKE) -C BoxTest zipdistinstall
BoxTest_clean:
	$(MAKE) -C BoxTest clean
BoxTest_distclean:
	$(MAKE) -C BoxTest distclean
BoxTest_cleanall:
	$(MAKE) -C BoxTest cleanall
BoxTest_info:
	$(MAKE) -C BoxTest info
BoxTest_makefiles:
	$(MAKE) -C BoxTest makefiles
BoxTest:
	$(MAKE) -C BoxTest all
.PHONY: BoxTest_all BoxTest_debug BoxTest_smart BoxTest_release BoxTest_units BoxTest_examples BoxTest_shared BoxTest_install BoxTest_sourceinstall BoxTest_exampleinstall BoxTest_distinstall BoxTest_zipinstall BoxTest_zipsourceinstall BoxTest_zipexampleinstall BoxTest_zipdistinstall BoxTest_clean BoxTest_distclean BoxTest_cleanall BoxTest_info BoxTest_makefiles BoxTest
endif
ifdef TARGET_DIRS_DISPLAY_LIST
Display_List_all:
	$(MAKE) -C Display_List all
Display_List_debug:
	$(MAKE) -C Display_List debug
Display_List_smart:
	$(MAKE) -C Display_List smart
Display_List_release:
	$(MAKE) -C Display_List release
Display_List_units:
	$(MAKE) -C Display_List units
Display_List_examples:
	$(MAKE) -C Display_List examples
Display_List_shared:
	$(MAKE) -C Display_List shared
Display_List_install:
	$(MAKE) -C Display_List install
Display_List_sourceinstall:
	$(MAKE) -C Display_List sourceinstall
Display_List_exampleinstall:
	$(MAKE) -C Display_List exampleinstall
Display_List_distinstall:
	$(MAKE) -C Display_List distinstall
Display_List_zipinstall:
	$(MAKE) -C Display_List zipinstall
Display_List_zipsourceinstall:
	$(MAKE) -C Display_List zipsourceinstall
Display_List_zipexampleinstall:
	$(MAKE) -C Display_List zipexampleinstall
Display_List_zipdistinstall:
	$(MAKE) -C Display_List zipdistinstall
Display_List_clean:
	$(MAKE) -C Display_List clean
Display_List_distclean:
	$(MAKE) -C Display_List distclean
Display_List_cleanall:
	$(MAKE) -C Display_List cleanall
Display_List_info:
	$(MAKE) -C Display_List info
Display_List_makefiles:
	$(MAKE) -C Display_List makefiles
Display_List:
	$(MAKE) -C Display_List all
.PHONY: Display_List_all Display_List_debug Display_List_smart Display_List_release Display_List_units Display_List_examples Display_List_shared Display_List_install Display_List_sourceinstall Display_List_exampleinstall Display_List_distinstall Display_List_zipinstall Display_List_zipsourceinstall Display_List_zipexampleinstall Display_List_zipdistinstall Display_List_clean Display_List_distclean Display_List_cleanall Display_List_info Display_List_makefiles Display_List
endif
ifdef TARGET_DIRS_DISPLAY_LIST_2
Display_List_2_all:
	$(MAKE) -C Display_List_2 all
Display_List_2_debug:
	$(MAKE) -C Display_List_2 debug
Display_List_2_smart:
	$(MAKE) -C Display_List_2 smart
Display_List_2_release:
	$(MAKE) -C Display_List_2 release
Display_List_2_units:
	$(MAKE) -C Display_List_2 units
Display_List_2_examples:
	$(MAKE) -C Display_List_2 examples
Display_List_2_shared:
	$(MAKE) -C Display_List_2 shared
Display_List_2_install:
	$(MAKE) -C Display_List_2 install
Display_List_2_sourceinstall:
	$(MAKE) -C Display_List_2 sourceinstall
Display_List_2_exampleinstall:
	$(MAKE) -C Display_List_2 exampleinstall
Display_List_2_distinstall:
	$(MAKE) -C Display_List_2 distinstall
Display_List_2_zipinstall:
	$(MAKE) -C Display_List_2 zipinstall
Display_List_2_zipsourceinstall:
	$(MAKE) -C Display_List_2 zipsourceinstall
Display_List_2_zipexampleinstall:
	$(MAKE) -C Display_List_2 zipexampleinstall
Display_List_2_zipdistinstall:
	$(MAKE) -C Display_List_2 zipdistinstall
Display_List_2_clean:
	$(MAKE) -C Display_List_2 clean
Display_List_2_distclean:
	$(MAKE) -C Display_List_2 distclean
Display_List_2_cleanall:
	$(MAKE) -C Display_List_2 cleanall
Display_List_2_info:
	$(MAKE) -C Display_List_2 info
Display_List_2_makefiles:
	$(MAKE) -C Display_List_2 makefiles
Display_List_2:
	$(MAKE) -C Display_List_2 all
.PHONY: Display_List_2_all Display_List_2_debug Display_List_2_smart Display_List_2_release Display_List_2_units Display_List_2_examples Display_List_2_shared Display_List_2_install Display_List_2_sourceinstall Display_List_2_exampleinstall Display_List_2_distinstall Display_List_2_zipinstall Display_List_2_zipsourceinstall Display_List_2_zipexampleinstall Display_List_2_zipdistinstall Display_List_2_clean Display_List_2_distclean Display_List_2_cleanall Display_List_2_info Display_List_2_makefiles Display_List_2
endif
ifdef TARGET_DIRS_ENV_MAPPING
Env_Mapping_all:
	$(MAKE) -C Env_Mapping all
Env_Mapping_debug:
	$(MAKE) -C Env_Mapping debug
Env_Mapping_smart:
	$(MAKE) -C Env_Mapping smart
Env_Mapping_release:
	$(MAKE) -C Env_Mapping release
Env_Mapping_units:
	$(MAKE) -C Env_Mapping units
Env_Mapping_examples:
	$(MAKE) -C Env_Mapping examples
Env_Mapping_shared:
	$(MAKE) -C Env_Mapping shared
Env_Mapping_install:
	$(MAKE) -C Env_Mapping install
Env_Mapping_sourceinstall:
	$(MAKE) -C Env_Mapping sourceinstall
Env_Mapping_exampleinstall:
	$(MAKE) -C Env_Mapping exampleinstall
Env_Mapping_distinstall:
	$(MAKE) -C Env_Mapping distinstall
Env_Mapping_zipinstall:
	$(MAKE) -C Env_Mapping zipinstall
Env_Mapping_zipsourceinstall:
	$(MAKE) -C Env_Mapping zipsourceinstall
Env_Mapping_zipexampleinstall:
	$(MAKE) -C Env_Mapping zipexampleinstall
Env_Mapping_zipdistinstall:
	$(MAKE) -C Env_Mapping zipdistinstall
Env_Mapping_clean:
	$(MAKE) -C Env_Mapping clean
Env_Mapping_distclean:
	$(MAKE) -C Env_Mapping distclean
Env_Mapping_cleanall:
	$(MAKE) -C Env_Mapping cleanall
Env_Mapping_info:
	$(MAKE) -C Env_Mapping info
Env_Mapping_makefiles:
	$(MAKE) -C Env_Mapping makefiles
Env_Mapping:
	$(MAKE) -C Env_Mapping all
.PHONY: Env_Mapping_all Env_Mapping_debug Env_Mapping_smart Env_Mapping_release Env_Mapping_units Env_Mapping_examples Env_Mapping_shared Env_Mapping_install Env_Mapping_sourceinstall Env_Mapping_exampleinstall Env_Mapping_distinstall Env_Mapping_zipinstall Env_Mapping_zipsourceinstall Env_Mapping_zipexampleinstall Env_Mapping_zipdistinstall Env_Mapping_clean Env_Mapping_distclean Env_Mapping_cleanall Env_Mapping_info Env_Mapping_makefiles Env_Mapping
endif
ifdef TARGET_DIRS_MIXED_TEXT_3D
Mixed_Text_3D_all:
	$(MAKE) -C Mixed_Text_3D all
Mixed_Text_3D_debug:
	$(MAKE) -C Mixed_Text_3D debug
Mixed_Text_3D_smart:
	$(MAKE) -C Mixed_Text_3D smart
Mixed_Text_3D_release:
	$(MAKE) -C Mixed_Text_3D release
Mixed_Text_3D_units:
	$(MAKE) -C Mixed_Text_3D units
Mixed_Text_3D_examples:
	$(MAKE) -C Mixed_Text_3D examples
Mixed_Text_3D_shared:
	$(MAKE) -C Mixed_Text_3D shared
Mixed_Text_3D_install:
	$(MAKE) -C Mixed_Text_3D install
Mixed_Text_3D_sourceinstall:
	$(MAKE) -C Mixed_Text_3D sourceinstall
Mixed_Text_3D_exampleinstall:
	$(MAKE) -C Mixed_Text_3D exampleinstall
Mixed_Text_3D_distinstall:
	$(MAKE) -C Mixed_Text_3D distinstall
Mixed_Text_3D_zipinstall:
	$(MAKE) -C Mixed_Text_3D zipinstall
Mixed_Text_3D_zipsourceinstall:
	$(MAKE) -C Mixed_Text_3D zipsourceinstall
Mixed_Text_3D_zipexampleinstall:
	$(MAKE) -C Mixed_Text_3D zipexampleinstall
Mixed_Text_3D_zipdistinstall:
	$(MAKE) -C Mixed_Text_3D zipdistinstall
Mixed_Text_3D_clean:
	$(MAKE) -C Mixed_Text_3D clean
Mixed_Text_3D_distclean:
	$(MAKE) -C Mixed_Text_3D distclean
Mixed_Text_3D_cleanall:
	$(MAKE) -C Mixed_Text_3D cleanall
Mixed_Text_3D_info:
	$(MAKE) -C Mixed_Text_3D info
Mixed_Text_3D_makefiles:
	$(MAKE) -C Mixed_Text_3D makefiles
Mixed_Text_3D:
	$(MAKE) -C Mixed_Text_3D all
.PHONY: Mixed_Text_3D_all Mixed_Text_3D_debug Mixed_Text_3D_smart Mixed_Text_3D_release Mixed_Text_3D_units Mixed_Text_3D_examples Mixed_Text_3D_shared Mixed_Text_3D_install Mixed_Text_3D_sourceinstall Mixed_Text_3D_exampleinstall Mixed_Text_3D_distinstall Mixed_Text_3D_zipinstall Mixed_Text_3D_zipsourceinstall Mixed_Text_3D_zipexampleinstall Mixed_Text_3D_zipdistinstall Mixed_Text_3D_clean Mixed_Text_3D_distclean Mixed_Text_3D_cleanall Mixed_Text_3D_info Mixed_Text_3D_makefiles Mixed_Text_3D
endif
ifdef TARGET_DIRS_ORTHO
Ortho_all:
	$(MAKE) -C Ortho all
Ortho_debug:
	$(MAKE) -C Ortho debug
Ortho_smart:
	$(MAKE) -C Ortho smart
Ortho_release:
	$(MAKE) -C Ortho release
Ortho_units:
	$(MAKE) -C Ortho units
Ortho_examples:
	$(MAKE) -C Ortho examples
Ortho_shared:
	$(MAKE) -C Ortho shared
Ortho_install:
	$(MAKE) -C Ortho install
Ortho_sourceinstall:
	$(MAKE) -C Ortho sourceinstall
Ortho_exampleinstall:
	$(MAKE) -C Ortho exampleinstall
Ortho_distinstall:
	$(MAKE) -C Ortho distinstall
Ortho_zipinstall:
	$(MAKE) -C Ortho zipinstall
Ortho_zipsourceinstall:
	$(MAKE) -C Ortho zipsourceinstall
Ortho_zipexampleinstall:
	$(MAKE) -C Ortho zipexampleinstall
Ortho_zipdistinstall:
	$(MAKE) -C Ortho zipdistinstall
Ortho_clean:
	$(MAKE) -C Ortho clean
Ortho_distclean:
	$(MAKE) -C Ortho distclean
Ortho_cleanall:
	$(MAKE) -C Ortho cleanall
Ortho_info:
	$(MAKE) -C Ortho info
Ortho_makefiles:
	$(MAKE) -C Ortho makefiles
Ortho:
	$(MAKE) -C Ortho all
.PHONY: Ortho_all Ortho_debug Ortho_smart Ortho_release Ortho_units Ortho_examples Ortho_shared Ortho_install Ortho_sourceinstall Ortho_exampleinstall Ortho_distinstall Ortho_zipinstall Ortho_zipsourceinstall Ortho_zipexampleinstall Ortho_zipdistinstall Ortho_clean Ortho_distclean Ortho_cleanall Ortho_info Ortho_makefiles Ortho
endif
ifdef TARGET_DIRS_PALETTED_CUBE
Paletted_Cube_all:
	$(MAKE) -C Paletted_Cube all
Paletted_Cube_debug:
	$(MAKE) -C Paletted_Cube debug
Paletted_Cube_smart:
	$(MAKE) -C Paletted_Cube smart
Paletted_Cube_release:
	$(MAKE) -C Paletted_Cube release
Paletted_Cube_units:
	$(MAKE) -C Paletted_Cube units
Paletted_Cube_examples:
	$(MAKE) -C Paletted_Cube examples
Paletted_Cube_shared:
	$(MAKE) -C Paletted_Cube shared
Paletted_Cube_install:
	$(MAKE) -C Paletted_Cube install
Paletted_Cube_sourceinstall:
	$(MAKE) -C Paletted_Cube sourceinstall
Paletted_Cube_exampleinstall:
	$(MAKE) -C Paletted_Cube exampleinstall
Paletted_Cube_distinstall:
	$(MAKE) -C Paletted_Cube distinstall
Paletted_Cube_zipinstall:
	$(MAKE) -C Paletted_Cube zipinstall
Paletted_Cube_zipsourceinstall:
	$(MAKE) -C Paletted_Cube zipsourceinstall
Paletted_Cube_zipexampleinstall:
	$(MAKE) -C Paletted_Cube zipexampleinstall
Paletted_Cube_zipdistinstall:
	$(MAKE) -C Paletted_Cube zipdistinstall
Paletted_Cube_clean:
	$(MAKE) -C Paletted_Cube clean
Paletted_Cube_distclean:
	$(MAKE) -C Paletted_Cube distclean
Paletted_Cube_cleanall:
	$(MAKE) -C Paletted_Cube cleanall
Paletted_Cube_info:
	$(MAKE) -C Paletted_Cube info
Paletted_Cube_makefiles:
	$(MAKE) -C Paletted_Cube makefiles
Paletted_Cube:
	$(MAKE) -C Paletted_Cube all
.PHONY: Paletted_Cube_all Paletted_Cube_debug Paletted_Cube_smart Paletted_Cube_release Paletted_Cube_units Paletted_Cube_examples Paletted_Cube_shared Paletted_Cube_install Paletted_Cube_sourceinstall Paletted_Cube_exampleinstall Paletted_Cube_distinstall Paletted_Cube_zipinstall Paletted_Cube_zipsourceinstall Paletted_Cube_zipexampleinstall Paletted_Cube_zipdistinstall Paletted_Cube_clean Paletted_Cube_distclean Paletted_Cube_cleanall Paletted_Cube_info Paletted_Cube_makefiles Paletted_Cube
endif
ifdef TARGET_DIRS_PICKING
Picking_all:
	$(MAKE) -C Picking all
Picking_debug:
	$(MAKE) -C Picking debug
Picking_smart:
	$(MAKE) -C Picking smart
Picking_release:
	$(MAKE) -C Picking release
Picking_units:
	$(MAKE) -C Picking units
Picking_examples:
	$(MAKE) -C Picking examples
Picking_shared:
	$(MAKE) -C Picking shared
Picking_install:
	$(MAKE) -C Picking install
Picking_sourceinstall:
	$(MAKE) -C Picking sourceinstall
Picking_exampleinstall:
	$(MAKE) -C Picking exampleinstall
Picking_distinstall:
	$(MAKE) -C Picking distinstall
Picking_zipinstall:
	$(MAKE) -C Picking zipinstall
Picking_zipsourceinstall:
	$(MAKE) -C Picking zipsourceinstall
Picking_zipexampleinstall:
	$(MAKE) -C Picking zipexampleinstall
Picking_zipdistinstall:
	$(MAKE) -C Picking zipdistinstall
Picking_clean:
	$(MAKE) -C Picking clean
Picking_distclean:
	$(MAKE) -C Picking distclean
Picking_cleanall:
	$(MAKE) -C Picking cleanall
Picking_info:
	$(MAKE) -C Picking info
Picking_makefiles:
	$(MAKE) -C Picking makefiles
Picking:
	$(MAKE) -C Picking all
.PHONY: Picking_all Picking_debug Picking_smart Picking_release Picking_units Picking_examples Picking_shared Picking_install Picking_sourceinstall Picking_exampleinstall Picking_distinstall Picking_zipinstall Picking_zipsourceinstall Picking_zipexampleinstall Picking_zipdistinstall Picking_clean Picking_distclean Picking_cleanall Picking_info Picking_makefiles Picking
endif
ifdef TARGET_DIRS_SIMPLE_QUAD
Simple_Quad_all:
	$(MAKE) -C Simple_Quad all
Simple_Quad_debug:
	$(MAKE) -C Simple_Quad debug
Simple_Quad_smart:
	$(MAKE) -C Simple_Quad smart
Simple_Quad_release:
	$(MAKE) -C Simple_Quad release
Simple_Quad_units:
	$(MAKE) -C Simple_Quad units
Simple_Quad_examples:
	$(MAKE) -C Simple_Quad examples
Simple_Quad_shared:
	$(MAKE) -C Simple_Quad shared
Simple_Quad_install:
	$(MAKE) -C Simple_Quad install
Simple_Quad_sourceinstall:
	$(MAKE) -C Simple_Quad sourceinstall
Simple_Quad_exampleinstall:
	$(MAKE) -C Simple_Quad exampleinstall
Simple_Quad_distinstall:
	$(MAKE) -C Simple_Quad distinstall
Simple_Quad_zipinstall:
	$(MAKE) -C Simple_Quad zipinstall
Simple_Quad_zipsourceinstall:
	$(MAKE) -C Simple_Quad zipsourceinstall
Simple_Quad_zipexampleinstall:
	$(MAKE) -C Simple_Quad zipexampleinstall
Simple_Quad_zipdistinstall:
	$(MAKE) -C Simple_Quad zipdistinstall
Simple_Quad_clean:
	$(MAKE) -C Simple_Quad clean
Simple_Quad_distclean:
	$(MAKE) -C Simple_Quad distclean
Simple_Quad_cleanall:
	$(MAKE) -C Simple_Quad cleanall
Simple_Quad_info:
	$(MAKE) -C Simple_Quad info
Simple_Quad_makefiles:
	$(MAKE) -C Simple_Quad makefiles
Simple_Quad:
	$(MAKE) -C Simple_Quad all
.PHONY: Simple_Quad_all Simple_Quad_debug Simple_Quad_smart Simple_Quad_release Simple_Quad_units Simple_Quad_examples Simple_Quad_shared Simple_Quad_install Simple_Quad_sourceinstall Simple_Quad_exampleinstall Simple_Quad_distinstall Simple_Quad_zipinstall Simple_Quad_zipsourceinstall Simple_Quad_zipexampleinstall Simple_Quad_zipdistinstall Simple_Quad_clean Simple_Quad_distclean Simple_Quad_cleanall Simple_Quad_info Simple_Quad_makefiles Simple_Quad
endif
ifdef TARGET_DIRS_SIMPLE_TRI
Simple_Tri_all:
	$(MAKE) -C Simple_Tri all
Simple_Tri_debug:
	$(MAKE) -C Simple_Tri debug
Simple_Tri_smart:
	$(MAKE) -C Simple_Tri smart
Simple_Tri_release:
	$(MAKE) -C Simple_Tri release
Simple_Tri_units:
	$(MAKE) -C Simple_Tri units
Simple_Tri_examples:
	$(MAKE) -C Simple_Tri examples
Simple_Tri_shared:
	$(MAKE) -C Simple_Tri shared
Simple_Tri_install:
	$(MAKE) -C Simple_Tri install
Simple_Tri_sourceinstall:
	$(MAKE) -C Simple_Tri sourceinstall
Simple_Tri_exampleinstall:
	$(MAKE) -C Simple_Tri exampleinstall
Simple_Tri_distinstall:
	$(MAKE) -C Simple_Tri distinstall
Simple_Tri_zipinstall:
	$(MAKE) -C Simple_Tri zipinstall
Simple_Tri_zipsourceinstall:
	$(MAKE) -C Simple_Tri zipsourceinstall
Simple_Tri_zipexampleinstall:
	$(MAKE) -C Simple_Tri zipexampleinstall
Simple_Tri_zipdistinstall:
	$(MAKE) -C Simple_Tri zipdistinstall
Simple_Tri_clean:
	$(MAKE) -C Simple_Tri clean
Simple_Tri_distclean:
	$(MAKE) -C Simple_Tri distclean
Simple_Tri_cleanall:
	$(MAKE) -C Simple_Tri cleanall
Simple_Tri_info:
	$(MAKE) -C Simple_Tri info
Simple_Tri_makefiles:
	$(MAKE) -C Simple_Tri makefiles
Simple_Tri:
	$(MAKE) -C Simple_Tri all
.PHONY: Simple_Tri_all Simple_Tri_debug Simple_Tri_smart Simple_Tri_release Simple_Tri_units Simple_Tri_examples Simple_Tri_shared Simple_Tri_install Simple_Tri_sourceinstall Simple_Tri_exampleinstall Simple_Tri_distinstall Simple_Tri_zipinstall Simple_Tri_zipsourceinstall Simple_Tri_zipexampleinstall Simple_Tri_zipdistinstall Simple_Tri_clean Simple_Tri_distclean Simple_Tri_cleanall Simple_Tri_info Simple_Tri_makefiles Simple_Tri
endif
ifdef TARGET_DIRS_TEXTURED_CUBE
Textured_Cube_all:
	$(MAKE) -C Textured_Cube all
Textured_Cube_debug:
	$(MAKE) -C Textured_Cube debug
Textured_Cube_smart:
	$(MAKE) -C Textured_Cube smart
Textured_Cube_release:
	$(MAKE) -C Textured_Cube release
Textured_Cube_units:
	$(MAKE) -C Textured_Cube units
Textured_Cube_examples:
	$(MAKE) -C Textured_Cube examples
Textured_Cube_shared:
	$(MAKE) -C Textured_Cube shared
Textured_Cube_install:
	$(MAKE) -C Textured_Cube install
Textured_Cube_sourceinstall:
	$(MAKE) -C Textured_Cube sourceinstall
Textured_Cube_exampleinstall:
	$(MAKE) -C Textured_Cube exampleinstall
Textured_Cube_distinstall:
	$(MAKE) -C Textured_Cube distinstall
Textured_Cube_zipinstall:
	$(MAKE) -C Textured_Cube zipinstall
Textured_Cube_zipsourceinstall:
	$(MAKE) -C Textured_Cube zipsourceinstall
Textured_Cube_zipexampleinstall:
	$(MAKE) -C Textured_Cube zipexampleinstall
Textured_Cube_zipdistinstall:
	$(MAKE) -C Textured_Cube zipdistinstall
Textured_Cube_clean:
	$(MAKE) -C Textured_Cube clean
Textured_Cube_distclean:
	$(MAKE) -C Textured_Cube distclean
Textured_Cube_cleanall:
	$(MAKE) -C Textured_Cube cleanall
Textured_Cube_info:
	$(MAKE) -C Textured_Cube info
Textured_Cube_makefiles:
	$(MAKE) -C Textured_Cube makefiles
Textured_Cube:
	$(MAKE) -C Textured_Cube all
.PHONY: Textured_Cube_all Textured_Cube_debug Textured_Cube_smart Textured_Cube_release Textured_Cube_units Textured_Cube_examples Textured_Cube_shared Textured_Cube_install Textured_Cube_sourceinstall Textured_Cube_exampleinstall Textured_Cube_distinstall Textured_Cube_zipinstall Textured_Cube_zipsourceinstall Textured_Cube_zipexampleinstall Textured_Cube_zipdistinstall Textured_Cube_clean Textured_Cube_distclean Textured_Cube_cleanall Textured_Cube_info Textured_Cube_makefiles Textured_Cube
endif
ifdef TARGET_DIRS_TEXTURED_QUAD
Textured_Quad_all:
	$(MAKE) -C Textured_Quad all
Textured_Quad_debug:
	$(MAKE) -C Textured_Quad debug
Textured_Quad_smart:
	$(MAKE) -C Textured_Quad smart
Textured_Quad_release:
	$(MAKE) -C Textured_Quad release
Textured_Quad_units:
	$(MAKE) -C Textured_Quad units
Textured_Quad_examples:
	$(MAKE) -C Textured_Quad examples
Textured_Quad_shared:
	$(MAKE) -C Textured_Quad shared
Textured_Quad_install:
	$(MAKE) -C Textured_Quad install
Textured_Quad_sourceinstall:
	$(MAKE) -C Textured_Quad sourceinstall
Textured_Quad_exampleinstall:
	$(MAKE) -C Textured_Quad exampleinstall
Textured_Quad_distinstall:
	$(MAKE) -C Textured_Quad distinstall
Textured_Quad_zipinstall:
	$(MAKE) -C Textured_Quad zipinstall
Textured_Quad_zipsourceinstall:
	$(MAKE) -C Textured_Quad zipsourceinstall
Textured_Quad_zipexampleinstall:
	$(MAKE) -C Textured_Quad zipexampleinstall
Textured_Quad_zipdistinstall:
	$(MAKE) -C Textured_Quad zipdistinstall
Textured_Quad_clean:
	$(MAKE) -C Textured_Quad clean
Textured_Quad_distclean:
	$(MAKE) -C Textured_Quad distclean
Textured_Quad_cleanall:
	$(MAKE) -C Textured_Quad cleanall
Textured_Quad_info:
	$(MAKE) -C Textured_Quad info
Textured_Quad_makefiles:
	$(MAKE) -C Textured_Quad makefiles
Textured_Quad:
	$(MAKE) -C Textured_Quad all
.PHONY: Textured_Quad_all Textured_Quad_debug Textured_Quad_smart Textured_Quad_release Textured_Quad_units Textured_Quad_examples Textured_Quad_shared Textured_Quad_install Textured_Quad_sourceinstall Textured_Quad_exampleinstall Textured_Quad_distinstall Textured_Quad_zipinstall Textured_Quad_zipsourceinstall Textured_Quad_zipexampleinstall Textured_Quad_zipdistinstall Textured_Quad_clean Textured_Quad_distclean Textured_Quad_cleanall Textured_Quad_info Textured_Quad_makefiles Textured_Quad
endif
ifdef TARGET_DIRS_TOON_SHADING
Toon_Shading_all:
	$(MAKE) -C Toon_Shading all
Toon_Shading_debug:
	$(MAKE) -C Toon_Shading debug
Toon_Shading_smart:
	$(MAKE) -C Toon_Shading smart
Toon_Shading_release:
	$(MAKE) -C Toon_Shading release
Toon_Shading_units:
	$(MAKE) -C Toon_Shading units
Toon_Shading_examples:
	$(MAKE) -C Toon_Shading examples
Toon_Shading_shared:
	$(MAKE) -C Toon_Shading shared
Toon_Shading_install:
	$(MAKE) -C Toon_Shading install
Toon_Shading_sourceinstall:
	$(MAKE) -C Toon_Shading sourceinstall
Toon_Shading_exampleinstall:
	$(MAKE) -C Toon_Shading exampleinstall
Toon_Shading_distinstall:
	$(MAKE) -C Toon_Shading distinstall
Toon_Shading_zipinstall:
	$(MAKE) -C Toon_Shading zipinstall
Toon_Shading_zipsourceinstall:
	$(MAKE) -C Toon_Shading zipsourceinstall
Toon_Shading_zipexampleinstall:
	$(MAKE) -C Toon_Shading zipexampleinstall
Toon_Shading_zipdistinstall:
	$(MAKE) -C Toon_Shading zipdistinstall
Toon_Shading_clean:
	$(MAKE) -C Toon_Shading clean
Toon_Shading_distclean:
	$(MAKE) -C Toon_Shading distclean
Toon_Shading_cleanall:
	$(MAKE) -C Toon_Shading cleanall
Toon_Shading_info:
	$(MAKE) -C Toon_Shading info
Toon_Shading_makefiles:
	$(MAKE) -C Toon_Shading makefiles
Toon_Shading:
	$(MAKE) -C Toon_Shading all
.PHONY: Toon_Shading_all Toon_Shading_debug Toon_Shading_smart Toon_Shading_release Toon_Shading_units Toon_Shading_examples Toon_Shading_shared Toon_Shading_install Toon_Shading_sourceinstall Toon_Shading_exampleinstall Toon_Shading_distinstall Toon_Shading_zipinstall Toon_Shading_zipsourceinstall Toon_Shading_zipexampleinstall Toon_Shading_zipdistinstall Toon_Shading_clean Toon_Shading_distclean Toon_Shading_cleanall Toon_Shading_info Toon_Shading_makefiles Toon_Shading
endif
ifdef TARGET_DIRS_NEHE
nehe_all:
	$(MAKE) -C nehe all
nehe_debug:
	$(MAKE) -C nehe debug
nehe_smart:
	$(MAKE) -C nehe smart
nehe_release:
	$(MAKE) -C nehe release
nehe_units:
	$(MAKE) -C nehe units
nehe_examples:
	$(MAKE) -C nehe examples
nehe_shared:
	$(MAKE) -C nehe shared
nehe_install:
	$(MAKE) -C nehe install
nehe_sourceinstall:
	$(MAKE) -C nehe sourceinstall
nehe_exampleinstall:
	$(MAKE) -C nehe exampleinstall
nehe_distinstall:
	$(MAKE) -C nehe distinstall
nehe_zipinstall:
	$(MAKE) -C nehe zipinstall
nehe_zipsourceinstall:
	$(MAKE) -C nehe zipsourceinstall
nehe_zipexampleinstall:
	$(MAKE) -C nehe zipexampleinstall
nehe_zipdistinstall:
	$(MAKE) -C nehe zipdistinstall
nehe_clean:
	$(MAKE) -C nehe clean
nehe_distclean:
	$(MAKE) -C nehe distclean
nehe_cleanall:
	$(MAKE) -C nehe cleanall
nehe_info:
	$(MAKE) -C nehe info
nehe_makefiles:
	$(MAKE) -C nehe makefiles
nehe:
	$(MAKE) -C nehe all
.PHONY: nehe_all nehe_debug nehe_smart nehe_release nehe_units nehe_examples nehe_shared nehe_install nehe_sourceinstall nehe_exampleinstall nehe_distinstall nehe_zipinstall nehe_zipsourceinstall nehe_zipexampleinstall nehe_zipdistinstall nehe_clean nehe_distclean nehe_cleanall nehe_info nehe_makefiles nehe
endif
all: $(addsuffix _all,$(TARGET_DIRS))
debug: $(addsuffix _debug,$(TARGET_DIRS))
smart: $(addsuffix _smart,$(TARGET_DIRS))
release: $(addsuffix _release,$(TARGET_DIRS))
units: $(addsuffix _units,$(TARGET_DIRS))
examples: $(addsuffix _examples,$(TARGET_DIRS))
shared: $(addsuffix _shared,$(TARGET_DIRS))
install: $(addsuffix _install,$(TARGET_DIRS))
sourceinstall: $(addsuffix _sourceinstall,$(TARGET_DIRS))
exampleinstall: $(addsuffix _exampleinstall,$(TARGET_DIRS))
distinstall: $(addsuffix _distinstall,$(TARGET_DIRS))
zipinstall: $(addsuffix _zipinstall,$(TARGET_DIRS))
zipsourceinstall: $(addsuffix _zipsourceinstall,$(TARGET_DIRS))
zipexampleinstall: $(addsuffix _zipexampleinstall,$(TARGET_DIRS))
zipdistinstall: $(addsuffix _zipdistinstall,$(TARGET_DIRS))
clean: $(addsuffix _clean,$(TARGET_DIRS))
distclean: $(addsuffix _distclean,$(TARGET_DIRS))
cleanall: $(addsuffix _cleanall,$(TARGET_DIRS))
info: fpc_info
makefiles: fpc_makefiles $(addsuffix _makefiles,$(TARGET_DIRS))
.PHONY: all debug smart release units examples shared install sourceinstall exampleinstall distinstall zipinstall zipsourceinstall zipexampleinstall zipdistinstall clean distclean cleanall info makefiles
ifneq ($(wildcard fpcmake.loc),)
include fpcmake.loc
endif
.NOTPARALLEL:
