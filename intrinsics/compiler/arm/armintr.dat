nop()
yield()
wfi()
wfe()
sev()
;rfe()
clrex()
setend(endian: i32)                                       (endian in [0..1])

ldrex(out rt: r32; ref: ptr32)
ldrexb(out rt: r32; ref: ptr32)
ldrexh(out rt: r32; ref: ptr32)

strex(out rd: r32; rt: r32; ref: ptr32)
strexb(out rd: r32; rt: r32; ref: ptr32)
strexh(out rd: r32; rt: r32; ref: ptr32)

bfi(var rd: r32; rn: r32; lsb, msb: i32)                  (lsb in [0..31]) and (msb in [0..31]) and (msb >= lsb)
bfc(var rd: r32; lsb, msb: i32)                           (lsb in [0..31]) and (msb in [0..31]) and (msb >= lsb)

smmul(out rd: r32; rn, rm: r32)
smuad(out rd: r32; rn, rm: r32)
smuad{x}(out rd: r32; rn, rm: r32)
smulbb(out rd: r32; rn, rm: r32)
smulbt(out rd: r32; rn, rm: r32)
smultb(out rd: r32; rn, rm: r32)
smultt(out rd: r32; rn, rm: r32)
smulwb(out rd: r32; rn, rm: r32)
smulwt(out rd: r32; rn, rm: r32)
smusd(out rd: r32; rn, rm: r32)
smusd{x}(out rd: r32; rn, rm: r32)

mla(out rd: r32; rn, rm, ra: r32)
mls(out rd: r32; rn, rm, ra: r32)
smlabb(out rd: r32; rn, rm, ra: r32)
smlabt(out rd: r32; rn, rm, ra: r32)
smlatb(out rd: r32; rn, rm, ra: r32)
smlatt(out rd: r32; rn, rm, ra: r32)
smlad(out rd: r32; rn, rm, ra: r32)
smlad{x}(out rd: r32; rn, rm, ra: r32)
smlawb(out rd: r32; rn, rm, ra: r32)
smlawt(out rd: r32; rn, rm, ra: r32)
smlsd(out rd: r32; rn, rm, ra: r32)
smlsd{x}(out rd: r32; rn, rm, ra: r32)
smmla(out rd: r32; rn, rm, ra: r32)
smmla{r}(out rd: r32; rn, rm, ra: r32)
smmls(out rd: r32; rn, rm, ra: r32)
smmls{r}(out rd: r32; rn, rm, ra: r32)
usada8(out rd: r32; rn, rm, ra: r32)

smull(out ro: rs64; rn,rm: r32)
umull(out ro: r64; rn,rm: r32)

smlal(var rd: r64; rn,rm: r32)
smlalbb(var rd: r64; rn,rm: r32)
smlalbt(var rd: r64; rn,rm: r32)
smlaltb(var rd: r64; rn,rm: r32)
smlaltt(var rd: r64; rn,rm: r32)
smlald(var rd: r64; rn,rm: r32)
smlald{x}(var rd: r64; rn,rm: r32)
smlsld{x}(var rd: r64; rn,rm: r32)
umlal(var rd: r64; rn,rm: r32)

umaal(out [rl,rh]: r64; rl, rh, rn,rm: r32)

pkhbt(out rd: r32; rn,rm: r32)
pkhtb(out rd: r32; rn,rm: r32)
pkhbt[shift](out rd: r32; rn,rm: r32; ls: i32)                     (ls in [0..31])
pkhtb[shift](out rd: r32; rn,rm: r32; rs: i32)                     (ls in [0..31])

qadd(out rd: r32; rm,rn: r32)
qadd16(out rd: r32; rm,rn: r32)
qadd8(out rd: r32; rm,rn: r32)
qasx(out rd: r32; rm,rn: r32)
qdadd(out rd: r32; rm,rn: r32)
qdsub(out rd: r32; rm,rn: r32)
qsax(out rd: r32; rm,rn: r32)
qsub(out rd: r32; rm,rn: r32)
qsub16(out rd: r32; rm,rn: r32)
qsub8(out rd: r32; rm,rn: r32)
sadd16(out rd: r32; rm,rn: r32)
sadd8(out rd: r32; rm,rn: r32)
sasx(out rd: r32; rm,rn: r32)
shadd16(out rd: r32; rm,rn: r32)
shadd8(out rd: r32; rm,rn: r32)
shasx(out rd: r32; rm,rn: r32)
shsax(out rd: r32; rm,rn: r32)
shsub16(out rd: r32; rm,rn: r32)
shsub8(out rd: r32; rm,rn: r32)
ssax(out rd: r32; rm,rn: r32)
ssub16(out rd: r32; rm,rn: r32)
ssub8(out rd: r32; rm,rn: r32)
uadd16(out rd: r32; rm,rn: r32)
uadd8(out rd: r32; rm,rn: r32)
uasx(out rd: r32; rm,rn: r32)
uhadd16(out rd: r32; rm,rn: r32)
uhadd8(out rd: r32; rm,rn: r32)
uhasx(out rd: r32; rm,rn: r32)
uhsax(out rd: r32; rm,rn: r32)
uhsub16(out rd: r32; rm,rn: r32)
uhsub8(out rd: r32; rm,rn: r32)
uqadd16(out rd: r32; rm,rn: r32)
uqadd8(out rd: r32; rm,rn: r32)
uqasx(out rd: r32; rm,rn: r32)
uqsax(out rd: r32; rm,rn: r32)
uqsub16(out rd: r32; rm,rn: r32)
uqsub8(out rd: r32; rm,rn: r32)
usax(out rd: r32; rm,rn: r32)
usub16(out rd: r32; rm,rn: r32)
usub8(out rd: r32; rm,rn: r32)
usad8(out rd: r32; rm,rn: r32)

sxtab(out rd: r32; rm,rn: r32)
sxtab16(out rd: r32; rm,rn: r32)
sxtah(out rd: r32; rm,rn: r32)
uxtab(out rd: r32; rm,rn: r32)
uxtab16(out rd: r32; rm,rn: r32)
uxtah(out rd: r32; rm,rn: r32)

sxtab[ror](out rd: r32; rm,rn: r32; ror: i32)                    (ls in [0,8,16,24])
sxtab16[ror](out rd: r32; rm,rn: r32; ror: i32)                  (ls in [0,8,16,24])
sxtah[ror](out rd: r32; rm,rn: r32; ror: i32)                    (ls in [0,8,16,24])
uxtab[ror](out rd: r32; rm,rn: r32; ror: i32)                    (ls in [0,8,16,24])
uxtab16[ror](out rd: r32; rm,rn: r32; ror: i32)                  (ls in [0,8,16,24])
uxtah[ror](out rd: r32; rm,rn: r32; ror: i32)                    (ls in [0,8,16,24])

sxtb(out rd: r32; rm: r32)
sxtb16(out rd: r32; rm: r32)
sxth(out rd: r32; rm: r32)
uxtb(out rd: r32; rm: r32)
uxtb16(out rd: r32; rm: r32)
uxth(out rd: r32; rm: r32)

sxtb[ror](out rd: r32; rm: r32; ror: i32)                        (ls in [0,8,16,24])
sxtb16[ror](out rd: r32; rm: r32; ror: i32)                      (ls in [0,8,16,24])
sxth[ror](out rd: r32; rm: r32; ror: i32)                        (ls in [0,8,16,24])
uxtb[ror](out rd: r32; rm: r32; ror: i32)                        (ls in [0,8,16,24])
uxtb16[ror](out rd: r32; rm: r32; ror: i32)                      (ls in [0,8,16,24])
uxth[ror](out rd: r32; rm: r32; ror: i32)                        (ls in [0,8,16,24])

clz(out rd: r32; rm: r32)
rbit(out rd: r32; rm: r32)
rev(out rd: r32; rm: r32)
rev16(out rd: r32; rm: r32)
revsh(out rd: r32; rm: r32)

sbfx(out rd: r32; rn: r32; lsb, width: i32)                 (lsb in [0..31]) and ((width+lsb-1) <= 31)
ubfx(out rd: r32; rn: r32; lsb, width: i32)                 (lsb in [0..31]) and ((width+lsb-1) <= 31)

ssat(out rd: r32; sat: i32; rn: r32)                        (sat in [1..32])
usat(out rd: r32; sat: i32; rn: r32)                        (sat in [1..32])

ssat16(out rd: r32; sat: i32; rn: r32)                      (sat in [1..32])
usat16(out rd: r32; sat: i32; rn: r32)                      (sat in [1..32])          
