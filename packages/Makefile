#
# Don't edit, this file is generated by FPCMake Version 2.0.0 [2014/08/02]
#
default: all
MAKEFILETARGETS=i386-aros
BSDs = freebsd netbsd openbsd darwin
UNIXs = linux $(BSDs) solaris qnx haiku
LIMIT83fs = go32v2 os2 emx watcom
OSNeedsComspecToRunBatch = go32v2 watcom
FORCE:
.PHONY: FORCE
override PATH:=$(patsubst %/,%,$(subst \,/,$(PATH)))
ifneq ($(findstring darwin,$(OSTYPE)),)
inUnix=1 #darwin
SEARCHPATH:=$(filter-out .,$(subst :, ,$(PATH)))
else
ifeq ($(findstring ;,$(PATH)),)
inUnix=1
SEARCHPATH:=$(filter-out .,$(subst :, ,$(PATH)))
else
SEARCHPATH:=$(subst ;, ,$(PATH))
endif
endif
SEARCHPATH+=$(patsubst %/,%,$(subst \,/,$(dir $(MAKE))))
PWD:=$(strip $(wildcard $(addsuffix /pwd.exe,$(SEARCHPATH))))
ifeq ($(PWD),)
PWD:=$(strip $(wildcard $(addsuffix /pwd,$(SEARCHPATH))))
ifeq ($(PWD),)
$(error You need the GNU utils package to use this Makefile)
else
PWD:=$(firstword $(PWD))
SRCEXEEXT=
endif
else
PWD:=$(firstword $(PWD))
SRCEXEEXT=.exe
endif
ifndef inUnix
ifeq ($(OS),Windows_NT)
inWinNT=1
else
ifdef OS2_SHELL
inOS2=1
endif
endif
else
ifneq ($(findstring cygdrive,$(PATH)),)
inCygWin=1
endif
endif
ifdef inUnix
SRCBATCHEXT=.sh
else
ifdef inOS2
SRCBATCHEXT=.cmd
else
SRCBATCHEXT=.bat
endif
endif
ifdef COMSPEC
ifneq ($(findstring $(OS_SOURCE),$(OSNeedsComspecToRunBatch)),)
ifndef RUNBATCH
RUNBATCH=$(COMSPEC) /C
endif
endif
endif
ifdef inUnix
PATHSEP=/
else
PATHSEP:=$(subst /,\,/)
ifdef inCygWin
PATHSEP=/
endif
endif
ifdef PWD
BASEDIR:=$(subst \,/,$(shell $(PWD)))
ifdef inCygWin
ifneq ($(findstring /cygdrive/,$(BASEDIR)),)
BASENODIR:=$(patsubst /cygdrive%,%,$(BASEDIR))
BASEDRIVE:=$(firstword $(subst /, ,$(BASENODIR)))
BASEDIR:=$(subst /cygdrive/$(BASEDRIVE)/,$(BASEDRIVE):/,$(BASEDIR))
endif
endif
else
BASEDIR=.
endif
ifdef inOS2
ifndef ECHO
ECHO:=$(strip $(wildcard $(addsuffix /gecho$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(ECHO),)
ECHO:=$(strip $(wildcard $(addsuffix /echo$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(ECHO),)
ECHO=echo
else
ECHO:=$(firstword $(ECHO))
endif
else
ECHO:=$(firstword $(ECHO))
endif
endif
export ECHO
endif
override DEFAULT_FPCDIR=..
ifndef FPC
ifdef PP
FPC=$(PP)
endif
endif
ifndef FPC
FPCPROG:=$(strip $(wildcard $(addsuffix /fpc$(SRCEXEEXT),$(SEARCHPATH))))
ifneq ($(FPCPROG),)
FPCPROG:=$(firstword $(FPCPROG))
ifneq ($(CPU_TARGET),)
FPC:=$(shell $(FPCPROG) -P$(CPU_TARGET) -PB)
else
FPC:=$(shell $(FPCPROG) -PB)
endif
ifneq ($(findstring Error,$(FPC)),)
override FPC=$(firstword $(strip $(wildcard $(addsuffix /ppc386$(SRCEXEEXT),$(SEARCHPATH)))))
else
ifeq ($(strip $(wildcard $(FPC))),)
FPC:=$(firstword $(FPCPROG))
endif
endif
else
override FPC=$(firstword $(strip $(wildcard $(addsuffix /ppc386$(SRCEXEEXT),$(SEARCHPATH)))))
endif
endif
override FPC:=$(subst $(SRCEXEEXT),,$(FPC))
override FPC:=$(subst \,/,$(FPC))$(SRCEXEEXT)
FOUNDFPC:=$(strip $(wildcard $(FPC)))
ifeq ($(FOUNDFPC),)
FOUNDFPC=$(strip $(wildcard $(addsuffix /$(FPC),$(SEARCHPATH))))
ifeq ($(FOUNDFPC),)
$(error Compiler $(FPC) not found)
endif
endif
ifndef FPC_COMPILERINFO
FPC_COMPILERINFO:=$(shell $(FPC) -iVSPTPSOTO)
endif
ifndef FPC_VERSION
FPC_VERSION:=$(word 1,$(FPC_COMPILERINFO))
endif
export FPC FPC_VERSION FPC_COMPILERINFO
unexport CHECKDEPEND ALLDEPENDENCIES
ifndef CPU_TARGET
ifdef CPU_TARGET_DEFAULT
CPU_TARGET=$(CPU_TARGET_DEFAULT)
endif
endif
ifndef OS_TARGET
ifdef OS_TARGET_DEFAULT
OS_TARGET=$(OS_TARGET_DEFAULT)
endif
endif
ifneq ($(words $(FPC_COMPILERINFO)),5)
FPC_COMPILERINFO+=$(shell $(FPC) -iSP)
FPC_COMPILERINFO+=$(shell $(FPC) -iTP)
FPC_COMPILERINFO+=$(shell $(FPC) -iSO)
FPC_COMPILERINFO+=$(shell $(FPC) -iTO)
endif
ifndef CPU_SOURCE
CPU_SOURCE:=$(word 2,$(FPC_COMPILERINFO))
endif
ifndef CPU_TARGET
CPU_TARGET:=$(word 3,$(FPC_COMPILERINFO))
endif
ifndef OS_SOURCE
OS_SOURCE:=$(word 4,$(FPC_COMPILERINFO))
endif
ifndef OS_TARGET
OS_TARGET:=$(word 5,$(FPC_COMPILERINFO))
endif
FULL_TARGET=$(CPU_TARGET)-$(OS_TARGET)
FULL_SOURCE=$(CPU_SOURCE)-$(OS_SOURCE)
ifeq ($(CPU_TARGET),armeb)
ARCH=arm
override FPCOPT+=-Cb
else
ifeq ($(CPU_TARGET),armel)
ARCH=arm
override FPCOPT+=-CaEABI
else
ARCH=$(CPU_TARGET)
endif
endif
ifneq ($(findstring $(OS_SOURCE),$(LIMIT83fs)),)
TARGETSUFFIX=$(OS_TARGET)
SOURCESUFFIX=$(OS_SOURCE)
else
TARGETSUFFIX=$(FULL_TARGET)
SOURCESUFFIX=$(FULL_SOURCE)
endif
ifneq ($(FULL_TARGET),$(FULL_SOURCE))
CROSSCOMPILE=1
endif
ifeq ($(findstring makefile,$(MAKECMDGOALS)),)
ifeq ($(findstring $(FULL_TARGET),$(MAKEFILETARGETS)),)
$(error The Makefile doesn't support target $(FULL_TARGET), please run fpcmake first)
endif
endif
ifneq ($(findstring $(OS_TARGET),$(BSDs)),)
BSDhier=1
endif
ifeq ($(OS_TARGET),linux)
linuxHier=1
endif
export OS_TARGET OS_SOURCE ARCH CPU_TARGET CPU_SOURCE FULL_TARGET FULL_SOURCE TARGETSUFFIX SOURCESUFFIX CROSSCOMPILE
ifdef FPCDIR
override FPCDIR:=$(subst \,/,$(FPCDIR))
ifeq ($(wildcard $(addprefix $(FPCDIR)/,rtl units)),)
override FPCDIR=wrong
endif
else
override FPCDIR=wrong
endif
ifdef DEFAULT_FPCDIR
ifeq ($(FPCDIR),wrong)
override FPCDIR:=$(subst \,/,$(DEFAULT_FPCDIR))
ifeq ($(wildcard $(addprefix $(FPCDIR)/,rtl units)),)
override FPCDIR=wrong
endif
endif
endif
ifeq ($(FPCDIR),wrong)
ifdef inUnix
override FPCDIR=/usr/local/lib/fpc/$(FPC_VERSION)
ifeq ($(wildcard $(FPCDIR)/units),)
override FPCDIR=/usr/lib/fpc/$(FPC_VERSION)
endif
else
override FPCDIR:=$(subst /$(FPC),,$(firstword $(strip $(wildcard $(addsuffix /$(FPC),$(SEARCHPATH))))))
override FPCDIR:=$(FPCDIR)/..
ifeq ($(wildcard $(addprefix $(FPCDIR)/,rtl units)),)
override FPCDIR:=$(FPCDIR)/..
ifeq ($(wildcard $(addprefix $(FPCDIR)/,rtl units)),)
override FPCDIR:=$(BASEDIR)
ifeq ($(wildcard $(addprefix $(FPCDIR)/,rtl units)),)
override FPCDIR=c:/pp
endif
endif
endif
endif
endif
ifndef CROSSBINDIR
CROSSBINDIR:=$(wildcard $(FPCDIR)/bin/$(TARGETSUFFIX))
endif
ifneq ($(findstring $(OS_TARGET),darwin iphonesim),)
ifeq ($(OS_SOURCE),darwin)
DARWIN2DARWIN=1
endif
endif
ifndef BINUTILSPREFIX
ifndef CROSSBINDIR
ifdef CROSSCOMPILE
ifndef DARWIN2DARWIN
BINUTILSPREFIX=$(CPU_TARGET)-$(OS_TARGET)-
endif
endif
endif
endif
UNITSDIR:=$(wildcard $(FPCDIR)/units/$(TARGETSUFFIX))
ifeq ($(UNITSDIR),)
UNITSDIR:=$(wildcard $(FPCDIR)/units/$(OS_TARGET))
endif
PACKAGESDIR:=$(wildcard $(FPCDIR) $(FPCDIR)/packages $(FPCDIR)/packages/base $(FPCDIR)/packages/extra)
ifndef FPCFPMAKE
ifdef CROSSCOMPILE
ifeq ($(strip $(wildcard $(addsuffix /compiler/ppc$(SRCEXEEXT),$(FPCDIR)))),)
FPCPROG:=$(strip $(wildcard $(addsuffix /fpc$(SRCEXEEXT),$(SEARCHPATH))))
ifneq ($(FPCPROG),)
FPCPROG:=$(firstword $(FPCPROG))
FPCFPMAKE:=$(shell $(FPCPROG) -PB)
ifeq ($(strip $(wildcard $(FPCFPMAKE))),)
FPCFPMAKE:=$(firstword $(FPCPROG))
endif
else
override FPCFPMAKE=$(firstword $(strip $(wildcard $(addsuffix /ppc386$(SRCEXEEXT),$(SEARCHPATH)))))
endif
else
FPCFPMAKE=$(strip $(wildcard $(addsuffix /compiler/ppc$(SRCEXEEXT),$(FPCDIR))))
FPMAKE_SKIP_CONFIG=-n
export FPCFPMAKE
export FPMAKE_SKIP_CONFIG
endif
else
FPMAKE_SKIP_CONFIG=-n
FPCFPMAKE=$(FPC)
endif
endif
ifeq ($(FULL_TARGET),i386-aros)
override TARGET_DIRS+=hash pasjpeg paszlib fpmkunit fcl-xml fcl-base fcl-db fcl-image fcl-net fcl-passrc fcl-registry fcl-fpcunit fcl-json fcl-js fcl-process unzip regexpr chm fcl-res libgd symbolic bzip2 hermes fppkg fpvectorial  arosunits fv fcl-net fcl-db fcl-fpcunit fcl-passrc fcl-process fcl-stl symbolic unzip fastcgi
endif
override INSTALL_FPCPACKAGE=y
override INSTALL_FPCSUBDIR=packages
ifdef REQUIRE_UNITSDIR
override UNITSDIR+=$(REQUIRE_UNITSDIR)
endif
ifdef REQUIRE_PACKAGESDIR
override PACKAGESDIR+=$(REQUIRE_PACKAGESDIR)
endif
ifdef ZIPINSTALL
ifneq ($(findstring $(OS_TARGET),$(UNIXs)),)
UNIXHier=1
endif
else
ifneq ($(findstring $(OS_SOURCE),$(UNIXs)),)
UNIXHier=1
endif
endif
ifndef INSTALL_PREFIX
ifdef PREFIX
INSTALL_PREFIX=$(PREFIX)
endif
endif
ifndef INSTALL_PREFIX
ifdef UNIXHier
INSTALL_PREFIX=/usr/local
else
ifneq ($(findstring $(OS_TARGET),aros),)
INSTALL_PREFIX=PP:
else
ifdef INSTALL_FPCPACKAGE
INSTALL_BASEDIR:=/pp
else
INSTALL_BASEDIR:=/$(PACKAGE_NAME)
endif
endif
endif
endif
export INSTALL_PREFIX
ifdef INSTALL_FPCSUBDIR
export INSTALL_FPCSUBDIR
endif
ifndef DIST_DESTDIR
DIST_DESTDIR:=$(BASEDIR)
endif
export DIST_DESTDIR
ifndef COMPILER_UNITTARGETDIR
ifdef PACKAGEDIR_MAIN
COMPILER_UNITTARGETDIR=$(PACKAGEDIR_MAIN)/units/$(TARGETSUFFIX)
else
COMPILER_UNITTARGETDIR=units/$(TARGETSUFFIX)
endif
endif
ifndef COMPILER_TARGETDIR
COMPILER_TARGETDIR=.
endif
ifndef INSTALL_BASEDIR
ifdef UNIXHier
ifdef INSTALL_FPCPACKAGE
INSTALL_BASEDIR:=$(INSTALL_PREFIX)/lib/fpc/$(FPC_VERSION)
else
INSTALL_BASEDIR:=$(INSTALL_PREFIX)/lib/$(PACKAGE_NAME)
endif
else
INSTALL_BASEDIR:=$(INSTALL_PREFIX)
endif
endif
ifndef INSTALL_BINDIR
ifdef UNIXHier
INSTALL_BINDIR:=$(INSTALL_PREFIX)/bin
else
INSTALL_BINDIR:=$(INSTALL_BASEDIR)/bin
ifdef INSTALL_FPCPACKAGE
ifdef CROSSCOMPILE
ifdef CROSSINSTALL
INSTALL_BINDIR:=$(INSTALL_BINDIR)/$(SOURCESUFFIX)
else
INSTALL_BINDIR:=$(INSTALL_BINDIR)/$(TARGETSUFFIX)
endif
else
INSTALL_BINDIR:=$(INSTALL_BINDIR)/$(TARGETSUFFIX)
endif
endif
endif
endif
ifndef INSTALL_UNITDIR
INSTALL_UNITDIR:=$(INSTALL_BASEDIR)/units/$(TARGETSUFFIX)
ifdef INSTALL_FPCPACKAGE
ifdef PACKAGE_NAME
INSTALL_UNITDIR:=$(INSTALL_UNITDIR)/$(PACKAGE_NAME)
endif
endif
endif
ifndef INSTALL_LIBDIR
ifdef UNIXHier
INSTALL_LIBDIR:=$(INSTALL_PREFIX)/lib
else
INSTALL_LIBDIR:=$(INSTALL_UNITDIR)
endif
endif
ifndef INSTALL_SOURCEDIR
ifdef UNIXHier
ifdef BSDhier
SRCPREFIXDIR=share/src
else
ifdef linuxHier
SRCPREFIXDIR=share/src
else
SRCPREFIXDIR=src
endif
endif
ifdef INSTALL_FPCPACKAGE
ifdef INSTALL_FPCSUBDIR
INSTALL_SOURCEDIR:=$(INSTALL_PREFIX)/$(SRCPREFIXDIR)/fpc-$(FPC_VERSION)/$(INSTALL_FPCSUBDIR)/$(PACKAGE_NAME)
else
INSTALL_SOURCEDIR:=$(INSTALL_PREFIX)/$(SRCPREFIXDIR)/fpc-$(FPC_VERSION)/$(PACKAGE_NAME)
endif
else
INSTALL_SOURCEDIR:=$(INSTALL_PREFIX)/$(SRCPREFIXDIR)/$(PACKAGE_NAME)-$(PACKAGE_VERSION)
endif
else
ifdef INSTALL_FPCPACKAGE
ifdef INSTALL_FPCSUBDIR
INSTALL_SOURCEDIR:=$(INSTALL_BASEDIR)/source/$(INSTALL_FPCSUBDIR)/$(PACKAGE_NAME)
else
INSTALL_SOURCEDIR:=$(INSTALL_BASEDIR)/source/$(PACKAGE_NAME)
endif
else
INSTALL_SOURCEDIR:=$(INSTALL_BASEDIR)/source
endif
endif
endif
ifndef INSTALL_DOCDIR
ifdef UNIXHier
ifdef BSDhier
DOCPREFIXDIR=share/doc
else
ifdef linuxHier
DOCPREFIXDIR=share/doc
else
DOCPREFIXDIR=doc
endif
endif
ifdef INSTALL_FPCPACKAGE
INSTALL_DOCDIR:=$(INSTALL_PREFIX)/$(DOCPREFIXDIR)/fpc-$(FPC_VERSION)/$(PACKAGE_NAME)
else
INSTALL_DOCDIR:=$(INSTALL_PREFIX)/$(DOCPREFIXDIR)/$(PACKAGE_NAME)-$(PACKAGE_VERSION)
endif
else
ifdef INSTALL_FPCPACKAGE
INSTALL_DOCDIR:=$(INSTALL_BASEDIR)/doc/$(PACKAGE_NAME)
else
INSTALL_DOCDIR:=$(INSTALL_BASEDIR)/doc
endif
endif
endif
ifndef INSTALL_EXAMPLEDIR
ifdef UNIXHier
ifdef INSTALL_FPCPACKAGE
ifdef BSDhier
INSTALL_EXAMPLEDIR:=$(INSTALL_PREFIX)/share/examples/fpc-$(FPC_VERSION)/$(PACKAGE_NAME)
else
ifdef linuxHier
INSTALL_EXAMPLEDIR:=$(INSTALL_DOCDIR)/examples
else
INSTALL_EXAMPLEDIR:=$(INSTALL_PREFIX)/doc/fpc-$(FPC_VERSION)/examples/$(PACKAGE_NAME)
endif
endif
else
ifdef BSDhier
INSTALL_EXAMPLEDIR:=$(INSTALL_PREFIX)/share/examples/$(PACKAGE_NAME)-$(PACKAGE_VERSION)
else
ifdef linuxHier
INSTALL_EXAMPLEDIR:=$(INSTALL_DOCDIR)/examples/$(PACKAGE_NAME)-$(PACKAGE_VERSION)
else
INSTALL_EXAMPLEDIR:=$(INSTALL_PREFIX)/doc/$(PACKAGE_NAME)-$(PACKAGE_VERSION)
endif
endif
endif
else
ifdef INSTALL_FPCPACKAGE
INSTALL_EXAMPLEDIR:=$(INSTALL_BASEDIR)/examples/$(PACKAGE_NAME)
else
INSTALL_EXAMPLEDIR:=$(INSTALL_BASEDIR)/examples
endif
endif
endif
ifndef INSTALL_DATADIR
INSTALL_DATADIR=$(INSTALL_BASEDIR)
endif
ifndef INSTALL_SHAREDDIR
INSTALL_SHAREDDIR=$(INSTALL_PREFIX)/lib
endif
ifdef CROSSCOMPILE
ifndef CROSSBINDIR
CROSSBINDIR:=$(wildcard $(CROSSTARGETDIR)/bin/$(SOURCESUFFIX))
ifeq ($(CROSSBINDIR),)
CROSSBINDIR:=$(wildcard $(INSTALL_BASEDIR)/cross/$(TARGETSUFFIX)/bin/$(FULL_SOURCE))
endif
endif
else
CROSSBINDIR=
endif
BATCHEXT=.bat
LOADEREXT=.as
EXEEXT=.exe
PPLEXT=.ppl
PPUEXT=.ppu
OEXT=.o
ASMEXT=.s
SMARTEXT=.sl
STATICLIBEXT=.a
SHAREDLIBEXT=.so
SHAREDLIBPREFIX=libfp
STATICLIBPREFIX=libp
IMPORTLIBPREFIX=libimp
RSTEXT=.rst
ifeq ($(findstring 1.0.,$(FPC_VERSION)),)
ifeq ($(OS_TARGET),go32v1)
STATICLIBPREFIX=
SHORTSUFFIX=v1
endif
ifeq ($(OS_TARGET),go32v2)
STATICLIBPREFIX=
SHORTSUFFIX=dos
IMPORTLIBPREFIX=
endif
ifeq ($(OS_TARGET),watcom)
STATICLIBPREFIX=
OEXT=.obj
ASMEXT=.asm
SHAREDLIBEXT=.dll
SHORTSUFFIX=wat
IMPORTLIBPREFIX=
endif
ifeq ($(OS_TARGET),linux)
BATCHEXT=.sh
EXEEXT=
HASSHAREDLIB=1
SHORTSUFFIX=lnx
endif
ifeq ($(OS_TARGET),freebsd)
BATCHEXT=.sh
EXEEXT=
HASSHAREDLIB=1
SHORTSUFFIX=fbs
endif
ifeq ($(OS_TARGET),netbsd)
BATCHEXT=.sh
EXEEXT=
HASSHAREDLIB=1
SHORTSUFFIX=nbs
endif
ifeq ($(OS_TARGET),openbsd)
BATCHEXT=.sh
EXEEXT=
HASSHAREDLIB=1
SHORTSUFFIX=obs
endif
ifeq ($(OS_TARGET),win32)
SHAREDLIBEXT=.dll
SHORTSUFFIX=w32
endif
ifeq ($(OS_TARGET),os2)
BATCHEXT=.cmd
AOUTEXT=.out
STATICLIBPREFIX=
SHAREDLIBEXT=.dll
SHORTSUFFIX=os2
ECHO=echo
IMPORTLIBPREFIX=
endif
ifeq ($(OS_TARGET),emx)
BATCHEXT=.cmd
AOUTEXT=.out
STATICLIBPREFIX=
SHAREDLIBEXT=.dll
SHORTSUFFIX=emx
ECHO=echo
IMPORTLIBPREFIX=
endif
ifeq ($(OS_TARGET),amiga)
EXEEXT=
SHAREDLIBEXT=.library
SHORTSUFFIX=amg
endif
ifeq ($(OS_TARGET),morphos)
EXEEXT=
SHAREDLIBEXT=.library
SHORTSUFFIX=mos
endif
ifeq ($(OS_TARGET),atari)
EXEEXT=.ttp
SHORTSUFFIX=ata
endif
ifeq ($(OS_TARGET),beos)
BATCHEXT=.sh
EXEEXT=
SHORTSUFFIX=be
endif
ifeq ($(OS_TARGET),haiku)
BATCHEXT=.sh
EXEEXT=
SHORTSUFFIX=hai
endif
ifeq ($(OS_TARGET),solaris)
BATCHEXT=.sh
EXEEXT=
SHORTSUFFIX=sun
endif
ifeq ($(OS_TARGET),qnx)
BATCHEXT=.sh
EXEEXT=
SHORTSUFFIX=qnx
endif
ifeq ($(OS_TARGET),netware)
EXEEXT=.nlm
STATICLIBPREFIX=
SHORTSUFFIX=nw
IMPORTLIBPREFIX=imp
endif
ifeq ($(OS_TARGET),netwlibc)
EXEEXT=.nlm
STATICLIBPREFIX=
SHORTSUFFIX=nwl
IMPORTLIBPREFIX=imp
endif
ifeq ($(OS_TARGET),macos)
BATCHEXT=
EXEEXT=
DEBUGSYMEXT=.xcoff
SHORTSUFFIX=mac
IMPORTLIBPREFIX=imp
endif
ifneq ($(findstring $(OS_TARGET),darwin iphonesim),)
BATCHEXT=.sh
EXEEXT=
HASSHAREDLIB=1
SHORTSUFFIX=dwn
endif
ifeq ($(OS_TARGET),gba)
EXEEXT=.gba
SHAREDLIBEXT=.so
SHORTSUFFIX=gba
endif
ifeq ($(OS_TARGET),symbian)
SHAREDLIBEXT=.dll
SHORTSUFFIX=symbian
endif
ifeq ($(OS_TARGET),NativeNT)
SHAREDLIBEXT=.dll
SHORTSUFFIX=nativent
endif
ifeq ($(OS_TARGET),wii)
EXEEXT=.dol
SHAREDLIBEXT=.so
SHORTSUFFIX=wii
endif
ifeq ($(OS_TARGET),aros)
EXEEXT=
SHAREDLIBEXT=.library
SHORTSUFFIX=aros
endif
else
ifeq ($(OS_TARGET),go32v1)
PPUEXT=.pp1
OEXT=.o1
ASMEXT=.s1
SMARTEXT=.sl1
STATICLIBEXT=.a1
SHAREDLIBEXT=.so1
STATICLIBPREFIX=
SHORTSUFFIX=v1
IMPORTLIBPREFIX=
endif
ifeq ($(OS_TARGET),go32v2)
STATICLIBPREFIX=
SHORTSUFFIX=dos
IMPORTLIBPREFIX=
endif
ifeq ($(OS_TARGET),watcom)
STATICLIBPREFIX=
SHORTSUFFIX=wat
IMPORTLIBPREFIX=
endif
ifeq ($(OS_TARGET),linux)
BATCHEXT=.sh
EXEEXT=
HASSHAREDLIB=1
SHORTSUFFIX=lnx
endif
ifeq ($(OS_TARGET),freebsd)
BATCHEXT=.sh
EXEEXT=
HASSHAREDLIB=1
SHORTSUFFIX=fbs
endif
ifeq ($(OS_TARGET),netbsd)
BATCHEXT=.sh
EXEEXT=
HASSHAREDLIB=1
SHORTSUFFIX=nbs
endif
ifeq ($(OS_TARGET),openbsd)
BATCHEXT=.sh
EXEEXT=
HASSHAREDLIB=1
SHORTSUFFIX=obs
endif
ifeq ($(OS_TARGET),win32)
PPUEXT=.ppw
OEXT=.ow
ASMEXT=.sw
SMARTEXT=.slw
STATICLIBEXT=.aw
SHAREDLIBEXT=.dll
SHORTSUFFIX=w32
endif
ifeq ($(OS_TARGET),os2)
BATCHEXT=.cmd
PPUEXT=.ppo
ASMEXT=.so2
OEXT=.oo2
AOUTEXT=.out
SMARTEXT=.sl2
STATICLIBPREFIX=
STATICLIBEXT=.ao2
SHAREDLIBEXT=.dll
SHORTSUFFIX=os2
ECHO=echo
IMPORTLIBPREFIX=
endif
ifeq ($(OS_TARGET),amiga)
EXEEXT=
PPUEXT=.ppu
ASMEXT=.s
OEXT=.o
SMARTEXT=.sl
STATICLIBEXT=.a
SHAREDLIBEXT=.library
SHORTSUFFIX=amg
endif
ifeq ($(OS_TARGET),atari)
PPUEXT=.ppu
ASMEXT=.s
OEXT=.o
SMARTEXT=.sl
STATICLIBEXT=.a
EXEEXT=.ttp
SHORTSUFFIX=ata
endif
ifeq ($(OS_TARGET),beos)
BATCHEXT=.sh
PPUEXT=.ppu
ASMEXT=.s
OEXT=.o
SMARTEXT=.sl
STATICLIBEXT=.a
EXEEXT=
SHORTSUFFIX=be
endif
ifeq ($(OS_TARGET),solaris)
BATCHEXT=.sh
PPUEXT=.ppu
ASMEXT=.s
OEXT=.o
SMARTEXT=.sl
STATICLIBEXT=.a
EXEEXT=
SHORTSUFFIX=sun
endif
ifeq ($(OS_TARGET),qnx)
BATCHEXT=.sh
PPUEXT=.ppu
ASMEXT=.s
OEXT=.o
SMARTEXT=.sl
STATICLIBEXT=.a
EXEEXT=
SHORTSUFFIX=qnx
endif
ifeq ($(OS_TARGET),netware)
STATICLIBPREFIX=
PPUEXT=.ppu
OEXT=.o
ASMEXT=.s
SMARTEXT=.sl
STATICLIBEXT=.a
SHAREDLIBEXT=.nlm
EXEEXT=.nlm
SHORTSUFFIX=nw
IMPORTLIBPREFIX=imp
endif
ifeq ($(OS_TARGET),netwlibc)
STATICLIBPREFIX=
PPUEXT=.ppu
OEXT=.o
ASMEXT=.s
SMARTEXT=.sl
STATICLIBEXT=.a
SHAREDLIBEXT=.nlm
EXEEXT=.nlm
SHORTSUFFIX=nwl
IMPORTLIBPREFIX=imp
endif
ifeq ($(OS_TARGET),macos)
BATCHEXT=
PPUEXT=.ppu
ASMEXT=.s
OEXT=.o
SMARTEXT=.sl
STATICLIBEXT=.a
EXEEXT=
DEBUGSYMEXT=.xcoff
SHORTSUFFIX=mac
IMPORTLIBPREFIX=imp
endif
endif
ifneq ($(findstring $(OS_SOURCE),$(LIMIT83fs)),)
FPCMADE=fpcmade.$(SHORTSUFFIX)
ZIPSUFFIX=$(SHORTSUFFIX)
ZIPCROSSPREFIX=
ZIPSOURCESUFFIX=src
ZIPEXAMPLESUFFIX=exm
else
FPCMADE=fpcmade.$(TARGETSUFFIX)
ZIPSOURCESUFFIX=.source
ZIPEXAMPLESUFFIX=.examples
ifdef CROSSCOMPILE
ZIPSUFFIX=.$(SOURCESUFFIX)
ZIPCROSSPREFIX=$(TARGETSUFFIX)-
else
ZIPSUFFIX=.$(TARGETSUFFIX)
ZIPCROSSPREFIX=
endif
endif
ifndef ECHO
ECHO:=$(strip $(wildcard $(addsuffix /gecho$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(ECHO),)
ECHO:=$(strip $(wildcard $(addsuffix /echo$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(ECHO),)
ECHO= __missing_command_ECHO
else
ECHO:=$(firstword $(ECHO))
endif
else
ECHO:=$(firstword $(ECHO))
endif
endif
export ECHO
ifndef DATE
DATE:=$(strip $(wildcard $(addsuffix /gdate$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(DATE),)
DATE:=$(strip $(wildcard $(addsuffix /date$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(DATE),)
DATE= __missing_command_DATE
else
DATE:=$(firstword $(DATE))
endif
else
DATE:=$(firstword $(DATE))
endif
endif
export DATE
ifndef GINSTALL
GINSTALL:=$(strip $(wildcard $(addsuffix /ginstall$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(GINSTALL),)
GINSTALL:=$(strip $(wildcard $(addsuffix /install$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(GINSTALL),)
GINSTALL= __missing_command_GINSTALL
else
GINSTALL:=$(firstword $(GINSTALL))
endif
else
GINSTALL:=$(firstword $(GINSTALL))
endif
endif
export GINSTALL
ifndef CPPROG
CPPROG:=$(strip $(wildcard $(addsuffix /cp$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(CPPROG),)
CPPROG= __missing_command_CPPROG
else
CPPROG:=$(firstword $(CPPROG))
endif
endif
export CPPROG
ifndef RMPROG
RMPROG:=$(strip $(wildcard $(addsuffix /rm$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(RMPROG),)
RMPROG= __missing_command_RMPROG
else
RMPROG:=$(firstword $(RMPROG))
endif
endif
export RMPROG
ifndef MVPROG
MVPROG:=$(strip $(wildcard $(addsuffix /mv$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(MVPROG),)
MVPROG= __missing_command_MVPROG
else
MVPROG:=$(firstword $(MVPROG))
endif
endif
export MVPROG
ifndef MKDIRPROG
MKDIRPROG:=$(strip $(wildcard $(addsuffix /gmkdir$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(MKDIRPROG),)
MKDIRPROG:=$(strip $(wildcard $(addsuffix /mkdir$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(MKDIRPROG),)
MKDIRPROG= __missing_command_MKDIRPROG
else
MKDIRPROG:=$(firstword $(MKDIRPROG))
endif
else
MKDIRPROG:=$(firstword $(MKDIRPROG))
endif
endif
export MKDIRPROG
ifndef ECHOREDIR
ifndef inUnix
ECHOREDIR=echo
else
ECHOREDIR=$(ECHO)
endif
endif
ifndef COPY
COPY:=$(CPPROG) -fp
endif
ifndef COPYTREE
COPYTREE:=$(CPPROG) -Rfp
endif
ifndef MKDIRTREE
MKDIRTREE:=$(MKDIRPROG) -p
endif
ifndef MOVE
MOVE:=$(MVPROG) -f
endif
ifndef DEL
DEL:=$(RMPROG) -f
endif
ifndef DELTREE
DELTREE:=$(RMPROG) -rf
endif
ifndef INSTALL
ifdef inUnix
INSTALL:=$(GINSTALL) -c -m 644
else
INSTALL:=$(COPY)
endif
endif
ifndef INSTALLEXE
ifdef inUnix
INSTALLEXE:=$(GINSTALL) -c -m 755
else
INSTALLEXE:=$(COPY)
endif
endif
ifndef MKDIR
MKDIR:=$(GINSTALL) -m 755 -d
endif
export ECHOREDIR COPY COPYTREE MOVE DEL DELTREE INSTALL INSTALLEXE MKDIR
ifndef PPUMOVE
PPUMOVE:=$(strip $(wildcard $(addsuffix /ppumove$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(PPUMOVE),)
PPUMOVE= __missing_command_PPUMOVE
else
PPUMOVE:=$(firstword $(PPUMOVE))
endif
endif
export PPUMOVE
ifndef FPCMAKE
FPCMAKE:=$(strip $(wildcard $(addsuffix /fpcmake$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(FPCMAKE),)
FPCMAKE= __missing_command_FPCMAKE
else
FPCMAKE:=$(firstword $(FPCMAKE))
endif
endif
export FPCMAKE
ifndef ZIPPROG
ZIPPROG:=$(strip $(wildcard $(addsuffix /zip$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(ZIPPROG),)
ZIPPROG= __missing_command_ZIPPROG
else
ZIPPROG:=$(firstword $(ZIPPROG))
endif
endif
export ZIPPROG
ifndef TARPROG
TARPROG:=$(strip $(wildcard $(addsuffix /gtar$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(TARPROG),)
TARPROG:=$(strip $(wildcard $(addsuffix /tar$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(TARPROG),)
TARPROG= __missing_command_TARPROG
else
TARPROG:=$(firstword $(TARPROG))
endif
else
TARPROG:=$(firstword $(TARPROG))
endif
endif
export TARPROG
ASNAME=$(BINUTILSPREFIX)as
LDNAME=$(BINUTILSPREFIX)ld
ARNAME=$(BINUTILSPREFIX)ar
RCNAME=$(BINUTILSPREFIX)rc
ifneq ($(findstring 1.0.,$(FPC_VERSION)),)
ifeq ($(OS_TARGET),win32)
ifeq ($(CROSSBINDIR),)
ASNAME=asw
LDNAME=ldw
ARNAME=arw
endif
endif
endif
ifndef ASPROG
ifdef CROSSBINDIR
ASPROG=$(CROSSBINDIR)/$(ASNAME)$(SRCEXEEXT)
else
ASPROG=$(ASNAME)
endif
endif
ifndef LDPROG
ifdef CROSSBINDIR
LDPROG=$(CROSSBINDIR)/$(LDNAME)$(SRCEXEEXT)
else
LDPROG=$(LDNAME)
endif
endif
ifndef RCPROG
ifdef CROSSBINDIR
RCPROG=$(CROSSBINDIR)/$(RCNAME)$(SRCEXEEXT)
else
RCPROG=$(RCNAME)
endif
endif
ifndef ARPROG
ifdef CROSSBINDIR
ARPROG=$(CROSSBINDIR)/$(ARNAME)$(SRCEXEEXT)
else
ARPROG=$(ARNAME)
endif
endif
AS=$(ASPROG)
LD=$(LDPROG)
RC=$(RCPROG)
AR=$(ARPROG)
PPAS=ppas$(SRCBATCHEXT)
ifdef inUnix
LDCONFIG=ldconfig
else
LDCONFIG=
endif
ifdef DATE
DATESTR:=$(shell $(DATE) +%Y%m%d)
else
DATESTR=
endif
ifndef UPXPROG
ifeq ($(OS_TARGET),go32v2)
UPXPROG:=1
endif
ifeq ($(OS_TARGET),win32)
UPXPROG:=1
endif
ifdef UPXPROG
UPXPROG:=$(strip $(wildcard $(addsuffix /upx$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(UPXPROG),)
UPXPROG=
else
UPXPROG:=$(firstword $(UPXPROG))
endif
else
UPXPROG=
endif
endif
export UPXPROG
ZIPOPT=-9
ZIPEXT=.zip
ifeq ($(USETAR),bz2)
TAROPT=vj
TAREXT=.tar.bz2
else
TAROPT=vz
TAREXT=.tar.gz
endif
ifndef NOCPUDEF
override FPCOPTDEF=$(ARCH)
endif
ifneq ($(OS_TARGET),$(OS_SOURCE))
override FPCOPT+=-T$(OS_TARGET)
endif
ifneq ($(CPU_TARGET),$(CPU_SOURCE))
override FPCOPT+=-P$(ARCH)
endif
ifeq ($(OS_SOURCE),openbsd)
override FPCOPT+=-FD$(NEW_BINUTILS_PATH)
endif
ifndef CROSSBOOTSTRAP
ifneq ($(BINUTILSPREFIX),)
override FPCOPT+=-XP$(BINUTILSPREFIX)
endif
ifneq ($(BINUTILSPREFIX),)
override FPCOPT+=-Xr$(RLINKPATH)
endif
endif
ifdef UNITDIR
override FPCOPT+=$(addprefix -Fu,$(UNITDIR))
endif
ifdef LIBDIR
override FPCOPT+=$(addprefix -Fl,$(LIBDIR))
endif
ifdef OBJDIR
override FPCOPT+=$(addprefix -Fo,$(OBJDIR))
endif
ifdef INCDIR
override FPCOPT+=$(addprefix -Fi,$(INCDIR))
endif
ifdef LINKSMART
override FPCOPT+=-XX
endif
ifdef CREATESMART
override FPCOPT+=-CX
endif
ifdef DEBUG
override FPCOPT+=-gl
override FPCOPTDEF+=DEBUG
endif
ifdef RELEASE
ifneq ($(findstring 2.0.,$(FPC_VERSION)),)
ifeq ($(CPU_TARGET),i386)
FPCCPUOPT:=-OG2p3
endif
ifeq ($(CPU_TARGET),powerpc)
FPCCPUOPT:=-O1r
endif
else
FPCCPUOPT:=-O2
endif
override FPCOPT+=-Ur -Xs $(FPCCPUOPT) -n
override FPCOPTDEF+=RELEASE
endif
ifdef STRIP
override FPCOPT+=-Xs
endif
ifdef OPTIMIZE
override FPCOPT+=-O2
endif
ifdef VERBOSE
override FPCOPT+=-vwni
endif
ifdef COMPILER_OPTIONS
override FPCOPT+=$(COMPILER_OPTIONS)
endif
ifdef COMPILER_UNITDIR
override FPCOPT+=$(addprefix -Fu,$(COMPILER_UNITDIR))
endif
ifdef COMPILER_LIBRARYDIR
override FPCOPT+=$(addprefix -Fl,$(COMPILER_LIBRARYDIR))
endif
ifdef COMPILER_OBJECTDIR
override FPCOPT+=$(addprefix -Fo,$(COMPILER_OBJECTDIR))
endif
ifdef COMPILER_INCLUDEDIR
override FPCOPT+=$(addprefix -Fi,$(COMPILER_INCLUDEDIR))
endif
ifdef CROSSBINDIR
override FPCOPT+=-FD$(CROSSBINDIR)
endif
ifdef COMPILER_TARGETDIR
override FPCOPT+=-FE$(COMPILER_TARGETDIR)
ifeq ($(COMPILER_TARGETDIR),.)
override TARGETDIRPREFIX=
else
override TARGETDIRPREFIX=$(COMPILER_TARGETDIR)/
endif
endif
ifdef COMPILER_UNITTARGETDIR
override FPCOPT+=-FU$(COMPILER_UNITTARGETDIR)
ifeq ($(COMPILER_UNITTARGETDIR),.)
override UNITTARGETDIRPREFIX=
else
override UNITTARGETDIRPREFIX=$(COMPILER_UNITTARGETDIR)/
endif
else
ifdef COMPILER_TARGETDIR
override COMPILER_UNITTARGETDIR=$(COMPILER_TARGETDIR)
override UNITTARGETDIRPREFIX=$(TARGETDIRPREFIX)
endif
endif
ifdef CREATESHARED
override FPCOPT+=-Cg
ifeq ($(CPU_TARGET),i386)
override FPCOPT+=-Aas
endif
endif
ifeq ($(findstring 2.0.,$(FPC_VERSION)),)
ifneq ($(findstring $(OS_TARGET),linux solaris),)
ifeq ($(CPU_TARGET),x86_64)
override FPCOPT+=-Cg
endif
endif
endif
ifdef LINKSHARED
endif
ifdef OPT
override FPCOPT+=$(OPT)
endif
ifdef FPCOPTDEF
override FPCOPT+=$(addprefix -d,$(FPCOPTDEF))
endif
ifdef CFGFILE
override FPCOPT+=@$(CFGFILE)
endif
ifdef USEENV
override FPCEXTCMD:=$(FPCOPT)
override FPCOPT:=!FPCEXTCMD
export FPCEXTCMD
endif
override AFULL_TARGET=$(CPU_TARGET)-$(OS_TARGET)
override AFULL_SOURCE=$(CPU_SOURCE)-$(OS_SOURCE)
ifneq ($(AFULL_TARGET),$(AFULL_SOURCE))
override ACROSSCOMPILE=1
endif
ifdef ACROSSCOMPILE
override FPCOPT+=$(CROSSOPT)
endif
override COMPILER:=$(FPC) $(FPCOPT)
ifeq (,$(findstring -s ,$(COMPILER)))
EXECPPAS=
else
ifeq ($(FULL_SOURCE),$(FULL_TARGET))
ifdef RUNBATCH
EXECPPAS:=@$(RUNBATCH) $(PPAS)
else
EXECPPAS:=@$(PPAS)
endif
endif
endif
ifdef TARGET_RSTS
override RSTFILES=$(addsuffix $(RSTEXT),$(TARGET_RSTS))
override CLEANRSTFILES+=$(RSTFILES)
endif
.PHONY: fpc_clean fpc_cleanall fpc_distclean
ifdef EXEFILES
override CLEANEXEFILES:=$(addprefix $(TARGETDIRPREFIX),$(CLEANEXEFILES))
endif
ifdef CLEAN_PROGRAMS
override CLEANEXEFILES+=$(addprefix $(TARGETDIRPREFIX),$(addsuffix $(EXEEXT), $(CLEAN_PROGRAMS)))
endif
ifdef CLEAN_UNITS
override CLEANPPUFILES+=$(addsuffix $(PPUEXT),$(CLEAN_UNITS))
endif
ifdef CLEANPPUFILES
override CLEANPPULINKFILES:=$(subst $(PPUEXT),$(OEXT),$(CLEANPPUFILES)) $(addprefix $(STATICLIBPREFIX),$(subst $(PPUEXT),$(STATICLIBEXT),$(CLEANPPUFILES))) $(addprefix $(IMPORTLIBPREFIX),$(subst $(PPUEXT),$(STATICLIBEXT),$(CLEANPPUFILES)))
ifdef DEBUGSYMEXT
override CLEANPPULINKFILES+=$(subst $(PPUEXT),$(DEBUGSYMEXT),$(CLEANPPUFILES))
endif
override CLEANPPUFILES:=$(addprefix $(UNITTARGETDIRPREFIX),$(CLEANPPUFILES))
override CLEANPPULINKFILES:=$(wildcard $(addprefix $(UNITTARGETDIRPREFIX),$(CLEANPPULINKFILES)))
endif
fpc_clean: $(CLEANTARGET)
ifdef CLEANEXEFILES
	-$(DEL) $(CLEANEXEFILES)
endif
ifdef CLEANPPUFILES
	-$(DEL) $(CLEANPPUFILES)
endif
ifneq ($(CLEANPPULINKFILES),)
	-$(DEL) $(CLEANPPULINKFILES)
endif
ifdef CLEANRSTFILES
	-$(DEL) $(addprefix $(UNITTARGETDIRPREFIX),$(CLEANRSTFILES))
endif
ifdef CLEAN_FILES
	-$(DEL) $(CLEAN_FILES)
endif
ifdef LIB_NAME
	-$(DEL) $(LIB_NAME) $(LIB_FULLNAME)
endif
	-$(DEL) $(FPCMADE) Package.fpc $(PPAS) script.res link.res $(FPCEXTFILE) $(REDIRFILE)
	-$(DEL) *$(ASMEXT) *_ppas$(BATCHEXT)
fpc_cleanall: $(CLEANTARGET)
ifdef CLEANEXEFILES
	-$(DEL) $(CLEANEXEFILES)
endif
ifdef COMPILER_UNITTARGETDIR
ifdef CLEANPPUFILES
	-$(DEL) $(CLEANPPUFILES)
endif
ifneq ($(CLEANPPULINKFILES),)
	-$(DEL) $(CLEANPPULINKFILES)
endif
ifdef CLEANRSTFILES
	-$(DEL) $(addprefix $(UNITTARGETDIRPREFIX),$(CLEANRSTFILES))
endif
endif
ifdef CLEAN_FILES
	-$(DEL) $(CLEAN_FILES)
endif
	-$(DELTREE) units
	-$(DEL) *$(OEXT) *$(PPUEXT) *$(RSTEXT) *$(ASMEXT) *$(STATICLIBEXT) *$(SHAREDLIBEXT) *$(PPLEXT)
ifneq ($(PPUEXT),.ppu)
	-$(DEL) *.o *.ppu *.a
endif
	-$(DELTREE) *$(SMARTEXT)
	-$(DEL) fpcmade.* Package.fpc $(PPAS) script.res link.res $(FPCEXTFILE) $(REDIRFILE)
	-$(DEL) *_ppas$(BATCHEXT)
ifdef AOUTEXT
	-$(DEL) *$(AOUTEXT)
endif
ifdef DEBUGSYMEXT
	-$(DEL) *$(DEBUGSYMEXT)
endif
fpc_distclean: cleanall
.PHONY: fpc_baseinfo
override INFORULES+=fpc_baseinfo
fpc_baseinfo:
	@$(ECHO)
	@$(ECHO)  == Package info ==
	@$(ECHO)  Package Name..... $(PACKAGE_NAME)
	@$(ECHO)  Package Version.. $(PACKAGE_VERSION)
	@$(ECHO)
	@$(ECHO)  == Configuration info ==
	@$(ECHO)
	@$(ECHO)  FPC.......... $(FPC)
	@$(ECHO)  FPC Version.. $(FPC_VERSION)
	@$(ECHO)  Source CPU... $(CPU_SOURCE)
	@$(ECHO)  Target CPU... $(CPU_TARGET)
	@$(ECHO)  Source OS.... $(OS_SOURCE)
	@$(ECHO)  Target OS.... $(OS_TARGET)
	@$(ECHO)  Full Source.. $(FULL_SOURCE)
	@$(ECHO)  Full Target.. $(FULL_TARGET)
	@$(ECHO)  SourceSuffix. $(SOURCESUFFIX)
	@$(ECHO)  TargetSuffix. $(TARGETSUFFIX)
	@$(ECHO)  FPC fpmake... $(FPCFPMAKE)
	@$(ECHO)
	@$(ECHO)  == Directory info ==
	@$(ECHO)
	@$(ECHO)  Required pkgs... $(REQUIRE_PACKAGES)
	@$(ECHO)
	@$(ECHO)  Basedir......... $(BASEDIR)
	@$(ECHO)  FPCDir.......... $(FPCDIR)
	@$(ECHO)  CrossBinDir..... $(CROSSBINDIR)
	@$(ECHO)  UnitsDir........ $(UNITSDIR)
	@$(ECHO)  PackagesDir..... $(PACKAGESDIR)
	@$(ECHO)
	@$(ECHO)  GCC library..... $(GCCLIBDIR)
	@$(ECHO)  Other library... $(OTHERLIBDIR)
	@$(ECHO)
	@$(ECHO)  == Tools info ==
	@$(ECHO)
	@$(ECHO)  As........ $(AS)
	@$(ECHO)  Ld........ $(LD)
	@$(ECHO)  Ar........ $(AR)
	@$(ECHO)  Rc........ $(RC)
	@$(ECHO)
	@$(ECHO)  Mv........ $(MVPROG)
	@$(ECHO)  Cp........ $(CPPROG)
	@$(ECHO)  Rm........ $(RMPROG)
	@$(ECHO)  GInstall.. $(GINSTALL)
	@$(ECHO)  Echo...... $(ECHO)
	@$(ECHO)  Shell..... $(SHELL)
	@$(ECHO)  Date...... $(DATE)
	@$(ECHO)  FPCMake... $(FPCMAKE)
	@$(ECHO)  PPUMove... $(PPUMOVE)
	@$(ECHO)  Upx....... $(UPXPROG)
	@$(ECHO)  Zip....... $(ZIPPROG)
	@$(ECHO)
	@$(ECHO)  == Object info ==
	@$(ECHO)
	@$(ECHO)  Target Loaders........ $(TARGET_LOADERS)
	@$(ECHO)  Target Units.......... $(TARGET_UNITS)
	@$(ECHO)  Target Implicit Units. $(TARGET_IMPLICITUNITS)
	@$(ECHO)  Target Programs....... $(TARGET_PROGRAMS)
	@$(ECHO)  Target Dirs........... $(TARGET_DIRS)
	@$(ECHO)  Target Examples....... $(TARGET_EXAMPLES)
	@$(ECHO)  Target ExampleDirs.... $(TARGET_EXAMPLEDIRS)
	@$(ECHO)
	@$(ECHO)  Clean Units......... $(CLEAN_UNITS)
	@$(ECHO)  Clean Files......... $(CLEAN_FILES)
	@$(ECHO)
	@$(ECHO)  Install Units....... $(INSTALL_UNITS)
	@$(ECHO)  Install Files....... $(INSTALL_FILES)
	@$(ECHO)
	@$(ECHO)  == Install info ==
	@$(ECHO)
	@$(ECHO)  DateStr.............. $(DATESTR)
	@$(ECHO)  ZipName.............. $(ZIPNAME)
	@$(ECHO)  ZipPrefix............ $(ZIPPREFIX)
	@$(ECHO)  ZipCrossPrefix....... $(ZIPCROSSPREFIX)
	@$(ECHO)  ZipSuffix............ $(ZIPSUFFIX)
	@$(ECHO)  FullZipName.......... $(FULLZIPNAME)
	@$(ECHO)  Install FPC Package.. $(INSTALL_FPCPACKAGE)
	@$(ECHO)
	@$(ECHO)  Install base dir..... $(INSTALL_BASEDIR)
	@$(ECHO)  Install binary dir... $(INSTALL_BINDIR)
	@$(ECHO)  Install library dir.. $(INSTALL_LIBDIR)
	@$(ECHO)  Install units dir.... $(INSTALL_UNITDIR)
	@$(ECHO)  Install source dir... $(INSTALL_SOURCEDIR)
	@$(ECHO)  Install doc dir...... $(INSTALL_DOCDIR)
	@$(ECHO)  Install example dir.. $(INSTALL_EXAMPLEDIR)
	@$(ECHO)  Install data dir..... $(INSTALL_DATADIR)
	@$(ECHO)
	@$(ECHO)  Dist destination dir. $(DIST_DESTDIR)
	@$(ECHO)  Dist zip name........ $(DIST_ZIPNAME)
	@$(ECHO)
.PHONY: fpc_info
fpc_info: $(INFORULES)
.PHONY: fpc_makefile fpc_makefiles fpc_makefile_sub1 fpc_makefile_sub2 \
	fpc_makefile_dirs
fpc_makefile:
	$(FPCMAKE) -w -T$(OS_TARGET) Makefile.fpc
fpc_makefile_sub1:
ifdef TARGET_DIRS
	$(FPCMAKE) -w -T$(OS_TARGET) $(addsuffix /Makefile.fpc,$(TARGET_DIRS))
endif
ifdef TARGET_EXAMPLEDIRS
	$(FPCMAKE) -w -T$(OS_TARGET) $(addsuffix /Makefile.fpc,$(TARGET_EXAMPLEDIRS))
endif
fpc_makefile_sub2: $(addsuffix _makefile_dirs,$(TARGET_DIRS) $(TARGET_EXAMPLEDIRS))
fpc_makefile_dirs: fpc_makefile_sub1 fpc_makefile_sub2
fpc_makefiles: fpc_makefile fpc_makefile_dirs
ifeq ($(FULL_TARGET),i386-aros)
TARGET_DIRS_HASH=1
TARGET_DIRS_PASJPEG=1
TARGET_DIRS_PASZLIB=1
TARGET_DIRS_FPMKUNIT=1
TARGET_DIRS_FCL-XML=1
TARGET_DIRS_FCL-BASE=1
TARGET_DIRS_FCL-DB=1
TARGET_DIRS_FCL-IMAGE=1
TARGET_DIRS_FCL-NET=1
TARGET_DIRS_FCL-PASSRC=1
TARGET_DIRS_FCL-REGISTRY=1
TARGET_DIRS_FCL-FPCUNIT=1
TARGET_DIRS_FCL-JSON=1
TARGET_DIRS_FCL-JS=1
TARGET_DIRS_FCL-PROCESS=1
TARGET_DIRS_UNZIP=1
TARGET_DIRS_REGEXPR=1
TARGET_DIRS_CHM=1
TARGET_DIRS_FCL-RES=1
TARGET_DIRS_LIBGD=1
TARGET_DIRS_SYMBOLIC=1
TARGET_DIRS_BZIP2=1
TARGET_DIRS_HERMES=1
TARGET_DIRS_FPPKG=1
TARGET_DIRS_FPVECTORIAL=1
TARGET_DIRS_AROSUNITS=1
TARGET_DIRS_FV=1
TARGET_DIRS_FCL-NET=1
TARGET_DIRS_FCL-DB=1
TARGET_DIRS_FCL-FPCUNIT=1
TARGET_DIRS_FCL-PASSRC=1
TARGET_DIRS_FCL-PROCESS=1
TARGET_DIRS_FCL-STL=1
TARGET_DIRS_SYMBOLIC=1
TARGET_DIRS_UNZIP=1
TARGET_DIRS_FASTCGI=1
endif
ifdef TARGET_DIRS_HASH
hash_all:
	$(MAKE) -C hash all
hash_debug:
	$(MAKE) -C hash debug
hash_smart:
	$(MAKE) -C hash smart
hash_release:
	$(MAKE) -C hash release
hash_units:
	$(MAKE) -C hash units
hash_examples:
	$(MAKE) -C hash examples
hash_shared:
	$(MAKE) -C hash shared
hash_install:
	$(MAKE) -C hash install
hash_sourceinstall:
	$(MAKE) -C hash sourceinstall
hash_exampleinstall:
	$(MAKE) -C hash exampleinstall
hash_distinstall:
	$(MAKE) -C hash distinstall
hash_zipinstall:
	$(MAKE) -C hash zipinstall
hash_zipsourceinstall:
	$(MAKE) -C hash zipsourceinstall
hash_zipexampleinstall:
	$(MAKE) -C hash zipexampleinstall
hash_zipdistinstall:
	$(MAKE) -C hash zipdistinstall
hash_clean:
	$(MAKE) -C hash clean
hash_distclean:
	$(MAKE) -C hash distclean
hash_cleanall:
	$(MAKE) -C hash cleanall
hash_info:
	$(MAKE) -C hash info
hash_makefiles:
	$(MAKE) -C hash makefiles
hash:
	$(MAKE) -C hash all
.PHONY: hash_all hash_debug hash_smart hash_release hash_units hash_examples hash_shared hash_install hash_sourceinstall hash_exampleinstall hash_distinstall hash_zipinstall hash_zipsourceinstall hash_zipexampleinstall hash_zipdistinstall hash_clean hash_distclean hash_cleanall hash_info hash_makefiles hash
endif
ifdef TARGET_DIRS_PASJPEG
pasjpeg_all:
	$(MAKE) -C pasjpeg all
pasjpeg_debug:
	$(MAKE) -C pasjpeg debug
pasjpeg_smart:
	$(MAKE) -C pasjpeg smart
pasjpeg_release:
	$(MAKE) -C pasjpeg release
pasjpeg_units:
	$(MAKE) -C pasjpeg units
pasjpeg_examples:
	$(MAKE) -C pasjpeg examples
pasjpeg_shared:
	$(MAKE) -C pasjpeg shared
pasjpeg_install:
	$(MAKE) -C pasjpeg install
pasjpeg_sourceinstall:
	$(MAKE) -C pasjpeg sourceinstall
pasjpeg_exampleinstall:
	$(MAKE) -C pasjpeg exampleinstall
pasjpeg_distinstall:
	$(MAKE) -C pasjpeg distinstall
pasjpeg_zipinstall:
	$(MAKE) -C pasjpeg zipinstall
pasjpeg_zipsourceinstall:
	$(MAKE) -C pasjpeg zipsourceinstall
pasjpeg_zipexampleinstall:
	$(MAKE) -C pasjpeg zipexampleinstall
pasjpeg_zipdistinstall:
	$(MAKE) -C pasjpeg zipdistinstall
pasjpeg_clean:
	$(MAKE) -C pasjpeg clean
pasjpeg_distclean:
	$(MAKE) -C pasjpeg distclean
pasjpeg_cleanall:
	$(MAKE) -C pasjpeg cleanall
pasjpeg_info:
	$(MAKE) -C pasjpeg info
pasjpeg_makefiles:
	$(MAKE) -C pasjpeg makefiles
pasjpeg:
	$(MAKE) -C pasjpeg all
.PHONY: pasjpeg_all pasjpeg_debug pasjpeg_smart pasjpeg_release pasjpeg_units pasjpeg_examples pasjpeg_shared pasjpeg_install pasjpeg_sourceinstall pasjpeg_exampleinstall pasjpeg_distinstall pasjpeg_zipinstall pasjpeg_zipsourceinstall pasjpeg_zipexampleinstall pasjpeg_zipdistinstall pasjpeg_clean pasjpeg_distclean pasjpeg_cleanall pasjpeg_info pasjpeg_makefiles pasjpeg
endif
ifdef TARGET_DIRS_PASZLIB
paszlib_all:
	$(MAKE) -C paszlib all
paszlib_debug:
	$(MAKE) -C paszlib debug
paszlib_smart:
	$(MAKE) -C paszlib smart
paszlib_release:
	$(MAKE) -C paszlib release
paszlib_units:
	$(MAKE) -C paszlib units
paszlib_examples:
	$(MAKE) -C paszlib examples
paszlib_shared:
	$(MAKE) -C paszlib shared
paszlib_install:
	$(MAKE) -C paszlib install
paszlib_sourceinstall:
	$(MAKE) -C paszlib sourceinstall
paszlib_exampleinstall:
	$(MAKE) -C paszlib exampleinstall
paszlib_distinstall:
	$(MAKE) -C paszlib distinstall
paszlib_zipinstall:
	$(MAKE) -C paszlib zipinstall
paszlib_zipsourceinstall:
	$(MAKE) -C paszlib zipsourceinstall
paszlib_zipexampleinstall:
	$(MAKE) -C paszlib zipexampleinstall
paszlib_zipdistinstall:
	$(MAKE) -C paszlib zipdistinstall
paszlib_clean:
	$(MAKE) -C paszlib clean
paszlib_distclean:
	$(MAKE) -C paszlib distclean
paszlib_cleanall:
	$(MAKE) -C paszlib cleanall
paszlib_info:
	$(MAKE) -C paszlib info
paszlib_makefiles:
	$(MAKE) -C paszlib makefiles
paszlib:
	$(MAKE) -C paszlib all
.PHONY: paszlib_all paszlib_debug paszlib_smart paszlib_release paszlib_units paszlib_examples paszlib_shared paszlib_install paszlib_sourceinstall paszlib_exampleinstall paszlib_distinstall paszlib_zipinstall paszlib_zipsourceinstall paszlib_zipexampleinstall paszlib_zipdistinstall paszlib_clean paszlib_distclean paszlib_cleanall paszlib_info paszlib_makefiles paszlib
endif
ifdef TARGET_DIRS_FPMKUNIT
fpmkunit_all:
	$(MAKE) -C fpmkunit all
fpmkunit_debug:
	$(MAKE) -C fpmkunit debug
fpmkunit_smart:
	$(MAKE) -C fpmkunit smart
fpmkunit_release:
	$(MAKE) -C fpmkunit release
fpmkunit_units:
	$(MAKE) -C fpmkunit units
fpmkunit_examples:
	$(MAKE) -C fpmkunit examples
fpmkunit_shared:
	$(MAKE) -C fpmkunit shared
fpmkunit_install:
	$(MAKE) -C fpmkunit install
fpmkunit_sourceinstall:
	$(MAKE) -C fpmkunit sourceinstall
fpmkunit_exampleinstall:
	$(MAKE) -C fpmkunit exampleinstall
fpmkunit_distinstall:
	$(MAKE) -C fpmkunit distinstall
fpmkunit_zipinstall:
	$(MAKE) -C fpmkunit zipinstall
fpmkunit_zipsourceinstall:
	$(MAKE) -C fpmkunit zipsourceinstall
fpmkunit_zipexampleinstall:
	$(MAKE) -C fpmkunit zipexampleinstall
fpmkunit_zipdistinstall:
	$(MAKE) -C fpmkunit zipdistinstall
fpmkunit_clean:
	$(MAKE) -C fpmkunit clean
fpmkunit_distclean:
	$(MAKE) -C fpmkunit distclean
fpmkunit_cleanall:
	$(MAKE) -C fpmkunit cleanall
fpmkunit_info:
	$(MAKE) -C fpmkunit info
fpmkunit_makefiles:
	$(MAKE) -C fpmkunit makefiles
fpmkunit:
	$(MAKE) -C fpmkunit all
.PHONY: fpmkunit_all fpmkunit_debug fpmkunit_smart fpmkunit_release fpmkunit_units fpmkunit_examples fpmkunit_shared fpmkunit_install fpmkunit_sourceinstall fpmkunit_exampleinstall fpmkunit_distinstall fpmkunit_zipinstall fpmkunit_zipsourceinstall fpmkunit_zipexampleinstall fpmkunit_zipdistinstall fpmkunit_clean fpmkunit_distclean fpmkunit_cleanall fpmkunit_info fpmkunit_makefiles fpmkunit
endif
ifdef TARGET_DIRS_FCL-XML
fcl-xml_all:
	$(MAKE) -C fcl-xml all
fcl-xml_debug:
	$(MAKE) -C fcl-xml debug
fcl-xml_smart:
	$(MAKE) -C fcl-xml smart
fcl-xml_release:
	$(MAKE) -C fcl-xml release
fcl-xml_units:
	$(MAKE) -C fcl-xml units
fcl-xml_examples:
	$(MAKE) -C fcl-xml examples
fcl-xml_shared:
	$(MAKE) -C fcl-xml shared
fcl-xml_install:
	$(MAKE) -C fcl-xml install
fcl-xml_sourceinstall:
	$(MAKE) -C fcl-xml sourceinstall
fcl-xml_exampleinstall:
	$(MAKE) -C fcl-xml exampleinstall
fcl-xml_distinstall:
	$(MAKE) -C fcl-xml distinstall
fcl-xml_zipinstall:
	$(MAKE) -C fcl-xml zipinstall
fcl-xml_zipsourceinstall:
	$(MAKE) -C fcl-xml zipsourceinstall
fcl-xml_zipexampleinstall:
	$(MAKE) -C fcl-xml zipexampleinstall
fcl-xml_zipdistinstall:
	$(MAKE) -C fcl-xml zipdistinstall
fcl-xml_clean:
	$(MAKE) -C fcl-xml clean
fcl-xml_distclean:
	$(MAKE) -C fcl-xml distclean
fcl-xml_cleanall:
	$(MAKE) -C fcl-xml cleanall
fcl-xml_info:
	$(MAKE) -C fcl-xml info
fcl-xml_makefiles:
	$(MAKE) -C fcl-xml makefiles
fcl-xml:
	$(MAKE) -C fcl-xml all
.PHONY: fcl-xml_all fcl-xml_debug fcl-xml_smart fcl-xml_release fcl-xml_units fcl-xml_examples fcl-xml_shared fcl-xml_install fcl-xml_sourceinstall fcl-xml_exampleinstall fcl-xml_distinstall fcl-xml_zipinstall fcl-xml_zipsourceinstall fcl-xml_zipexampleinstall fcl-xml_zipdistinstall fcl-xml_clean fcl-xml_distclean fcl-xml_cleanall fcl-xml_info fcl-xml_makefiles fcl-xml
endif
ifdef TARGET_DIRS_FCL-BASE
fcl-base_all:
	$(MAKE) -C fcl-base all
fcl-base_debug:
	$(MAKE) -C fcl-base debug
fcl-base_smart:
	$(MAKE) -C fcl-base smart
fcl-base_release:
	$(MAKE) -C fcl-base release
fcl-base_units:
	$(MAKE) -C fcl-base units
fcl-base_examples:
	$(MAKE) -C fcl-base examples
fcl-base_shared:
	$(MAKE) -C fcl-base shared
fcl-base_install:
	$(MAKE) -C fcl-base install
fcl-base_sourceinstall:
	$(MAKE) -C fcl-base sourceinstall
fcl-base_exampleinstall:
	$(MAKE) -C fcl-base exampleinstall
fcl-base_distinstall:
	$(MAKE) -C fcl-base distinstall
fcl-base_zipinstall:
	$(MAKE) -C fcl-base zipinstall
fcl-base_zipsourceinstall:
	$(MAKE) -C fcl-base zipsourceinstall
fcl-base_zipexampleinstall:
	$(MAKE) -C fcl-base zipexampleinstall
fcl-base_zipdistinstall:
	$(MAKE) -C fcl-base zipdistinstall
fcl-base_clean:
	$(MAKE) -C fcl-base clean
fcl-base_distclean:
	$(MAKE) -C fcl-base distclean
fcl-base_cleanall:
	$(MAKE) -C fcl-base cleanall
fcl-base_info:
	$(MAKE) -C fcl-base info
fcl-base_makefiles:
	$(MAKE) -C fcl-base makefiles
fcl-base:
	$(MAKE) -C fcl-base all
.PHONY: fcl-base_all fcl-base_debug fcl-base_smart fcl-base_release fcl-base_units fcl-base_examples fcl-base_shared fcl-base_install fcl-base_sourceinstall fcl-base_exampleinstall fcl-base_distinstall fcl-base_zipinstall fcl-base_zipsourceinstall fcl-base_zipexampleinstall fcl-base_zipdistinstall fcl-base_clean fcl-base_distclean fcl-base_cleanall fcl-base_info fcl-base_makefiles fcl-base
endif
ifdef TARGET_DIRS_FCL-DB
fcl-db_all:
	$(MAKE) -C fcl-db all
fcl-db_debug:
	$(MAKE) -C fcl-db debug
fcl-db_smart:
	$(MAKE) -C fcl-db smart
fcl-db_release:
	$(MAKE) -C fcl-db release
fcl-db_units:
	$(MAKE) -C fcl-db units
fcl-db_examples:
	$(MAKE) -C fcl-db examples
fcl-db_shared:
	$(MAKE) -C fcl-db shared
fcl-db_install:
	$(MAKE) -C fcl-db install
fcl-db_sourceinstall:
	$(MAKE) -C fcl-db sourceinstall
fcl-db_exampleinstall:
	$(MAKE) -C fcl-db exampleinstall
fcl-db_distinstall:
	$(MAKE) -C fcl-db distinstall
fcl-db_zipinstall:
	$(MAKE) -C fcl-db zipinstall
fcl-db_zipsourceinstall:
	$(MAKE) -C fcl-db zipsourceinstall
fcl-db_zipexampleinstall:
	$(MAKE) -C fcl-db zipexampleinstall
fcl-db_zipdistinstall:
	$(MAKE) -C fcl-db zipdistinstall
fcl-db_clean:
	$(MAKE) -C fcl-db clean
fcl-db_distclean:
	$(MAKE) -C fcl-db distclean
fcl-db_cleanall:
	$(MAKE) -C fcl-db cleanall
fcl-db_info:
	$(MAKE) -C fcl-db info
fcl-db_makefiles:
	$(MAKE) -C fcl-db makefiles
fcl-db:
	$(MAKE) -C fcl-db all
.PHONY: fcl-db_all fcl-db_debug fcl-db_smart fcl-db_release fcl-db_units fcl-db_examples fcl-db_shared fcl-db_install fcl-db_sourceinstall fcl-db_exampleinstall fcl-db_distinstall fcl-db_zipinstall fcl-db_zipsourceinstall fcl-db_zipexampleinstall fcl-db_zipdistinstall fcl-db_clean fcl-db_distclean fcl-db_cleanall fcl-db_info fcl-db_makefiles fcl-db
endif
ifdef TARGET_DIRS_FCL-IMAGE
fcl-image_all:
	$(MAKE) -C fcl-image all
fcl-image_debug:
	$(MAKE) -C fcl-image debug
fcl-image_smart:
	$(MAKE) -C fcl-image smart
fcl-image_release:
	$(MAKE) -C fcl-image release
fcl-image_units:
	$(MAKE) -C fcl-image units
fcl-image_examples:
	$(MAKE) -C fcl-image examples
fcl-image_shared:
	$(MAKE) -C fcl-image shared
fcl-image_install:
	$(MAKE) -C fcl-image install
fcl-image_sourceinstall:
	$(MAKE) -C fcl-image sourceinstall
fcl-image_exampleinstall:
	$(MAKE) -C fcl-image exampleinstall
fcl-image_distinstall:
	$(MAKE) -C fcl-image distinstall
fcl-image_zipinstall:
	$(MAKE) -C fcl-image zipinstall
fcl-image_zipsourceinstall:
	$(MAKE) -C fcl-image zipsourceinstall
fcl-image_zipexampleinstall:
	$(MAKE) -C fcl-image zipexampleinstall
fcl-image_zipdistinstall:
	$(MAKE) -C fcl-image zipdistinstall
fcl-image_clean:
	$(MAKE) -C fcl-image clean
fcl-image_distclean:
	$(MAKE) -C fcl-image distclean
fcl-image_cleanall:
	$(MAKE) -C fcl-image cleanall
fcl-image_info:
	$(MAKE) -C fcl-image info
fcl-image_makefiles:
	$(MAKE) -C fcl-image makefiles
fcl-image:
	$(MAKE) -C fcl-image all
.PHONY: fcl-image_all fcl-image_debug fcl-image_smart fcl-image_release fcl-image_units fcl-image_examples fcl-image_shared fcl-image_install fcl-image_sourceinstall fcl-image_exampleinstall fcl-image_distinstall fcl-image_zipinstall fcl-image_zipsourceinstall fcl-image_zipexampleinstall fcl-image_zipdistinstall fcl-image_clean fcl-image_distclean fcl-image_cleanall fcl-image_info fcl-image_makefiles fcl-image
endif
ifdef TARGET_DIRS_FCL-NET
fcl-net_all:
	$(MAKE) -C fcl-net all
fcl-net_debug:
	$(MAKE) -C fcl-net debug
fcl-net_smart:
	$(MAKE) -C fcl-net smart
fcl-net_release:
	$(MAKE) -C fcl-net release
fcl-net_units:
	$(MAKE) -C fcl-net units
fcl-net_examples:
	$(MAKE) -C fcl-net examples
fcl-net_shared:
	$(MAKE) -C fcl-net shared
fcl-net_install:
	$(MAKE) -C fcl-net install
fcl-net_sourceinstall:
	$(MAKE) -C fcl-net sourceinstall
fcl-net_exampleinstall:
	$(MAKE) -C fcl-net exampleinstall
fcl-net_distinstall:
	$(MAKE) -C fcl-net distinstall
fcl-net_zipinstall:
	$(MAKE) -C fcl-net zipinstall
fcl-net_zipsourceinstall:
	$(MAKE) -C fcl-net zipsourceinstall
fcl-net_zipexampleinstall:
	$(MAKE) -C fcl-net zipexampleinstall
fcl-net_zipdistinstall:
	$(MAKE) -C fcl-net zipdistinstall
fcl-net_clean:
	$(MAKE) -C fcl-net clean
fcl-net_distclean:
	$(MAKE) -C fcl-net distclean
fcl-net_cleanall:
	$(MAKE) -C fcl-net cleanall
fcl-net_info:
	$(MAKE) -C fcl-net info
fcl-net_makefiles:
	$(MAKE) -C fcl-net makefiles
fcl-net:
	$(MAKE) -C fcl-net all
.PHONY: fcl-net_all fcl-net_debug fcl-net_smart fcl-net_release fcl-net_units fcl-net_examples fcl-net_shared fcl-net_install fcl-net_sourceinstall fcl-net_exampleinstall fcl-net_distinstall fcl-net_zipinstall fcl-net_zipsourceinstall fcl-net_zipexampleinstall fcl-net_zipdistinstall fcl-net_clean fcl-net_distclean fcl-net_cleanall fcl-net_info fcl-net_makefiles fcl-net
endif
ifdef TARGET_DIRS_FCL-PASSRC
fcl-passrc_all:
	$(MAKE) -C fcl-passrc all
fcl-passrc_debug:
	$(MAKE) -C fcl-passrc debug
fcl-passrc_smart:
	$(MAKE) -C fcl-passrc smart
fcl-passrc_release:
	$(MAKE) -C fcl-passrc release
fcl-passrc_units:
	$(MAKE) -C fcl-passrc units
fcl-passrc_examples:
	$(MAKE) -C fcl-passrc examples
fcl-passrc_shared:
	$(MAKE) -C fcl-passrc shared
fcl-passrc_install:
	$(MAKE) -C fcl-passrc install
fcl-passrc_sourceinstall:
	$(MAKE) -C fcl-passrc sourceinstall
fcl-passrc_exampleinstall:
	$(MAKE) -C fcl-passrc exampleinstall
fcl-passrc_distinstall:
	$(MAKE) -C fcl-passrc distinstall
fcl-passrc_zipinstall:
	$(MAKE) -C fcl-passrc zipinstall
fcl-passrc_zipsourceinstall:
	$(MAKE) -C fcl-passrc zipsourceinstall
fcl-passrc_zipexampleinstall:
	$(MAKE) -C fcl-passrc zipexampleinstall
fcl-passrc_zipdistinstall:
	$(MAKE) -C fcl-passrc zipdistinstall
fcl-passrc_clean:
	$(MAKE) -C fcl-passrc clean
fcl-passrc_distclean:
	$(MAKE) -C fcl-passrc distclean
fcl-passrc_cleanall:
	$(MAKE) -C fcl-passrc cleanall
fcl-passrc_info:
	$(MAKE) -C fcl-passrc info
fcl-passrc_makefiles:
	$(MAKE) -C fcl-passrc makefiles
fcl-passrc:
	$(MAKE) -C fcl-passrc all
.PHONY: fcl-passrc_all fcl-passrc_debug fcl-passrc_smart fcl-passrc_release fcl-passrc_units fcl-passrc_examples fcl-passrc_shared fcl-passrc_install fcl-passrc_sourceinstall fcl-passrc_exampleinstall fcl-passrc_distinstall fcl-passrc_zipinstall fcl-passrc_zipsourceinstall fcl-passrc_zipexampleinstall fcl-passrc_zipdistinstall fcl-passrc_clean fcl-passrc_distclean fcl-passrc_cleanall fcl-passrc_info fcl-passrc_makefiles fcl-passrc
endif
ifdef TARGET_DIRS_FCL-REGISTRY
fcl-registry_all:
	$(MAKE) -C fcl-registry all
fcl-registry_debug:
	$(MAKE) -C fcl-registry debug
fcl-registry_smart:
	$(MAKE) -C fcl-registry smart
fcl-registry_release:
	$(MAKE) -C fcl-registry release
fcl-registry_units:
	$(MAKE) -C fcl-registry units
fcl-registry_examples:
	$(MAKE) -C fcl-registry examples
fcl-registry_shared:
	$(MAKE) -C fcl-registry shared
fcl-registry_install:
	$(MAKE) -C fcl-registry install
fcl-registry_sourceinstall:
	$(MAKE) -C fcl-registry sourceinstall
fcl-registry_exampleinstall:
	$(MAKE) -C fcl-registry exampleinstall
fcl-registry_distinstall:
	$(MAKE) -C fcl-registry distinstall
fcl-registry_zipinstall:
	$(MAKE) -C fcl-registry zipinstall
fcl-registry_zipsourceinstall:
	$(MAKE) -C fcl-registry zipsourceinstall
fcl-registry_zipexampleinstall:
	$(MAKE) -C fcl-registry zipexampleinstall
fcl-registry_zipdistinstall:
	$(MAKE) -C fcl-registry zipdistinstall
fcl-registry_clean:
	$(MAKE) -C fcl-registry clean
fcl-registry_distclean:
	$(MAKE) -C fcl-registry distclean
fcl-registry_cleanall:
	$(MAKE) -C fcl-registry cleanall
fcl-registry_info:
	$(MAKE) -C fcl-registry info
fcl-registry_makefiles:
	$(MAKE) -C fcl-registry makefiles
fcl-registry:
	$(MAKE) -C fcl-registry all
.PHONY: fcl-registry_all fcl-registry_debug fcl-registry_smart fcl-registry_release fcl-registry_units fcl-registry_examples fcl-registry_shared fcl-registry_install fcl-registry_sourceinstall fcl-registry_exampleinstall fcl-registry_distinstall fcl-registry_zipinstall fcl-registry_zipsourceinstall fcl-registry_zipexampleinstall fcl-registry_zipdistinstall fcl-registry_clean fcl-registry_distclean fcl-registry_cleanall fcl-registry_info fcl-registry_makefiles fcl-registry
endif
ifdef TARGET_DIRS_FCL-FPCUNIT
fcl-fpcunit_all:
	$(MAKE) -C fcl-fpcunit all
fcl-fpcunit_debug:
	$(MAKE) -C fcl-fpcunit debug
fcl-fpcunit_smart:
	$(MAKE) -C fcl-fpcunit smart
fcl-fpcunit_release:
	$(MAKE) -C fcl-fpcunit release
fcl-fpcunit_units:
	$(MAKE) -C fcl-fpcunit units
fcl-fpcunit_examples:
	$(MAKE) -C fcl-fpcunit examples
fcl-fpcunit_shared:
	$(MAKE) -C fcl-fpcunit shared
fcl-fpcunit_install:
	$(MAKE) -C fcl-fpcunit install
fcl-fpcunit_sourceinstall:
	$(MAKE) -C fcl-fpcunit sourceinstall
fcl-fpcunit_exampleinstall:
	$(MAKE) -C fcl-fpcunit exampleinstall
fcl-fpcunit_distinstall:
	$(MAKE) -C fcl-fpcunit distinstall
fcl-fpcunit_zipinstall:
	$(MAKE) -C fcl-fpcunit zipinstall
fcl-fpcunit_zipsourceinstall:
	$(MAKE) -C fcl-fpcunit zipsourceinstall
fcl-fpcunit_zipexampleinstall:
	$(MAKE) -C fcl-fpcunit zipexampleinstall
fcl-fpcunit_zipdistinstall:
	$(MAKE) -C fcl-fpcunit zipdistinstall
fcl-fpcunit_clean:
	$(MAKE) -C fcl-fpcunit clean
fcl-fpcunit_distclean:
	$(MAKE) -C fcl-fpcunit distclean
fcl-fpcunit_cleanall:
	$(MAKE) -C fcl-fpcunit cleanall
fcl-fpcunit_info:
	$(MAKE) -C fcl-fpcunit info
fcl-fpcunit_makefiles:
	$(MAKE) -C fcl-fpcunit makefiles
fcl-fpcunit:
	$(MAKE) -C fcl-fpcunit all
.PHONY: fcl-fpcunit_all fcl-fpcunit_debug fcl-fpcunit_smart fcl-fpcunit_release fcl-fpcunit_units fcl-fpcunit_examples fcl-fpcunit_shared fcl-fpcunit_install fcl-fpcunit_sourceinstall fcl-fpcunit_exampleinstall fcl-fpcunit_distinstall fcl-fpcunit_zipinstall fcl-fpcunit_zipsourceinstall fcl-fpcunit_zipexampleinstall fcl-fpcunit_zipdistinstall fcl-fpcunit_clean fcl-fpcunit_distclean fcl-fpcunit_cleanall fcl-fpcunit_info fcl-fpcunit_makefiles fcl-fpcunit
endif
ifdef TARGET_DIRS_FCL-JSON
fcl-json_all:
	$(MAKE) -C fcl-json all
fcl-json_debug:
	$(MAKE) -C fcl-json debug
fcl-json_smart:
	$(MAKE) -C fcl-json smart
fcl-json_release:
	$(MAKE) -C fcl-json release
fcl-json_units:
	$(MAKE) -C fcl-json units
fcl-json_examples:
	$(MAKE) -C fcl-json examples
fcl-json_shared:
	$(MAKE) -C fcl-json shared
fcl-json_install:
	$(MAKE) -C fcl-json install
fcl-json_sourceinstall:
	$(MAKE) -C fcl-json sourceinstall
fcl-json_exampleinstall:
	$(MAKE) -C fcl-json exampleinstall
fcl-json_distinstall:
	$(MAKE) -C fcl-json distinstall
fcl-json_zipinstall:
	$(MAKE) -C fcl-json zipinstall
fcl-json_zipsourceinstall:
	$(MAKE) -C fcl-json zipsourceinstall
fcl-json_zipexampleinstall:
	$(MAKE) -C fcl-json zipexampleinstall
fcl-json_zipdistinstall:
	$(MAKE) -C fcl-json zipdistinstall
fcl-json_clean:
	$(MAKE) -C fcl-json clean
fcl-json_distclean:
	$(MAKE) -C fcl-json distclean
fcl-json_cleanall:
	$(MAKE) -C fcl-json cleanall
fcl-json_info:
	$(MAKE) -C fcl-json info
fcl-json_makefiles:
	$(MAKE) -C fcl-json makefiles
fcl-json:
	$(MAKE) -C fcl-json all
.PHONY: fcl-json_all fcl-json_debug fcl-json_smart fcl-json_release fcl-json_units fcl-json_examples fcl-json_shared fcl-json_install fcl-json_sourceinstall fcl-json_exampleinstall fcl-json_distinstall fcl-json_zipinstall fcl-json_zipsourceinstall fcl-json_zipexampleinstall fcl-json_zipdistinstall fcl-json_clean fcl-json_distclean fcl-json_cleanall fcl-json_info fcl-json_makefiles fcl-json
endif
ifdef TARGET_DIRS_FCL-JS
fcl-js_all:
	$(MAKE) -C fcl-js all
fcl-js_debug:
	$(MAKE) -C fcl-js debug
fcl-js_smart:
	$(MAKE) -C fcl-js smart
fcl-js_release:
	$(MAKE) -C fcl-js release
fcl-js_units:
	$(MAKE) -C fcl-js units
fcl-js_examples:
	$(MAKE) -C fcl-js examples
fcl-js_shared:
	$(MAKE) -C fcl-js shared
fcl-js_install:
	$(MAKE) -C fcl-js install
fcl-js_sourceinstall:
	$(MAKE) -C fcl-js sourceinstall
fcl-js_exampleinstall:
	$(MAKE) -C fcl-js exampleinstall
fcl-js_distinstall:
	$(MAKE) -C fcl-js distinstall
fcl-js_zipinstall:
	$(MAKE) -C fcl-js zipinstall
fcl-js_zipsourceinstall:
	$(MAKE) -C fcl-js zipsourceinstall
fcl-js_zipexampleinstall:
	$(MAKE) -C fcl-js zipexampleinstall
fcl-js_zipdistinstall:
	$(MAKE) -C fcl-js zipdistinstall
fcl-js_clean:
	$(MAKE) -C fcl-js clean
fcl-js_distclean:
	$(MAKE) -C fcl-js distclean
fcl-js_cleanall:
	$(MAKE) -C fcl-js cleanall
fcl-js_info:
	$(MAKE) -C fcl-js info
fcl-js_makefiles:
	$(MAKE) -C fcl-js makefiles
fcl-js:
	$(MAKE) -C fcl-js all
.PHONY: fcl-js_all fcl-js_debug fcl-js_smart fcl-js_release fcl-js_units fcl-js_examples fcl-js_shared fcl-js_install fcl-js_sourceinstall fcl-js_exampleinstall fcl-js_distinstall fcl-js_zipinstall fcl-js_zipsourceinstall fcl-js_zipexampleinstall fcl-js_zipdistinstall fcl-js_clean fcl-js_distclean fcl-js_cleanall fcl-js_info fcl-js_makefiles fcl-js
endif
ifdef TARGET_DIRS_FCL-PROCESS
fcl-process_all:
	$(MAKE) -C fcl-process all
fcl-process_debug:
	$(MAKE) -C fcl-process debug
fcl-process_smart:
	$(MAKE) -C fcl-process smart
fcl-process_release:
	$(MAKE) -C fcl-process release
fcl-process_units:
	$(MAKE) -C fcl-process units
fcl-process_examples:
	$(MAKE) -C fcl-process examples
fcl-process_shared:
	$(MAKE) -C fcl-process shared
fcl-process_install:
	$(MAKE) -C fcl-process install
fcl-process_sourceinstall:
	$(MAKE) -C fcl-process sourceinstall
fcl-process_exampleinstall:
	$(MAKE) -C fcl-process exampleinstall
fcl-process_distinstall:
	$(MAKE) -C fcl-process distinstall
fcl-process_zipinstall:
	$(MAKE) -C fcl-process zipinstall
fcl-process_zipsourceinstall:
	$(MAKE) -C fcl-process zipsourceinstall
fcl-process_zipexampleinstall:
	$(MAKE) -C fcl-process zipexampleinstall
fcl-process_zipdistinstall:
	$(MAKE) -C fcl-process zipdistinstall
fcl-process_clean:
	$(MAKE) -C fcl-process clean
fcl-process_distclean:
	$(MAKE) -C fcl-process distclean
fcl-process_cleanall:
	$(MAKE) -C fcl-process cleanall
fcl-process_info:
	$(MAKE) -C fcl-process info
fcl-process_makefiles:
	$(MAKE) -C fcl-process makefiles
fcl-process:
	$(MAKE) -C fcl-process all
.PHONY: fcl-process_all fcl-process_debug fcl-process_smart fcl-process_release fcl-process_units fcl-process_examples fcl-process_shared fcl-process_install fcl-process_sourceinstall fcl-process_exampleinstall fcl-process_distinstall fcl-process_zipinstall fcl-process_zipsourceinstall fcl-process_zipexampleinstall fcl-process_zipdistinstall fcl-process_clean fcl-process_distclean fcl-process_cleanall fcl-process_info fcl-process_makefiles fcl-process
endif
ifdef TARGET_DIRS_UNZIP
unzip_all:
	$(MAKE) -C unzip all
unzip_debug:
	$(MAKE) -C unzip debug
unzip_smart:
	$(MAKE) -C unzip smart
unzip_release:
	$(MAKE) -C unzip release
unzip_units:
	$(MAKE) -C unzip units
unzip_examples:
	$(MAKE) -C unzip examples
unzip_shared:
	$(MAKE) -C unzip shared
unzip_install:
	$(MAKE) -C unzip install
unzip_sourceinstall:
	$(MAKE) -C unzip sourceinstall
unzip_exampleinstall:
	$(MAKE) -C unzip exampleinstall
unzip_distinstall:
	$(MAKE) -C unzip distinstall
unzip_zipinstall:
	$(MAKE) -C unzip zipinstall
unzip_zipsourceinstall:
	$(MAKE) -C unzip zipsourceinstall
unzip_zipexampleinstall:
	$(MAKE) -C unzip zipexampleinstall
unzip_zipdistinstall:
	$(MAKE) -C unzip zipdistinstall
unzip_clean:
	$(MAKE) -C unzip clean
unzip_distclean:
	$(MAKE) -C unzip distclean
unzip_cleanall:
	$(MAKE) -C unzip cleanall
unzip_info:
	$(MAKE) -C unzip info
unzip_makefiles:
	$(MAKE) -C unzip makefiles
unzip:
	$(MAKE) -C unzip all
.PHONY: unzip_all unzip_debug unzip_smart unzip_release unzip_units unzip_examples unzip_shared unzip_install unzip_sourceinstall unzip_exampleinstall unzip_distinstall unzip_zipinstall unzip_zipsourceinstall unzip_zipexampleinstall unzip_zipdistinstall unzip_clean unzip_distclean unzip_cleanall unzip_info unzip_makefiles unzip
endif
ifdef TARGET_DIRS_REGEXPR
regexpr_all:
	$(MAKE) -C regexpr all
regexpr_debug:
	$(MAKE) -C regexpr debug
regexpr_smart:
	$(MAKE) -C regexpr smart
regexpr_release:
	$(MAKE) -C regexpr release
regexpr_units:
	$(MAKE) -C regexpr units
regexpr_examples:
	$(MAKE) -C regexpr examples
regexpr_shared:
	$(MAKE) -C regexpr shared
regexpr_install:
	$(MAKE) -C regexpr install
regexpr_sourceinstall:
	$(MAKE) -C regexpr sourceinstall
regexpr_exampleinstall:
	$(MAKE) -C regexpr exampleinstall
regexpr_distinstall:
	$(MAKE) -C regexpr distinstall
regexpr_zipinstall:
	$(MAKE) -C regexpr zipinstall
regexpr_zipsourceinstall:
	$(MAKE) -C regexpr zipsourceinstall
regexpr_zipexampleinstall:
	$(MAKE) -C regexpr zipexampleinstall
regexpr_zipdistinstall:
	$(MAKE) -C regexpr zipdistinstall
regexpr_clean:
	$(MAKE) -C regexpr clean
regexpr_distclean:
	$(MAKE) -C regexpr distclean
regexpr_cleanall:
	$(MAKE) -C regexpr cleanall
regexpr_info:
	$(MAKE) -C regexpr info
regexpr_makefiles:
	$(MAKE) -C regexpr makefiles
regexpr:
	$(MAKE) -C regexpr all
.PHONY: regexpr_all regexpr_debug regexpr_smart regexpr_release regexpr_units regexpr_examples regexpr_shared regexpr_install regexpr_sourceinstall regexpr_exampleinstall regexpr_distinstall regexpr_zipinstall regexpr_zipsourceinstall regexpr_zipexampleinstall regexpr_zipdistinstall regexpr_clean regexpr_distclean regexpr_cleanall regexpr_info regexpr_makefiles regexpr
endif
ifdef TARGET_DIRS_CHM
chm_all:
	$(MAKE) -C chm all
chm_debug:
	$(MAKE) -C chm debug
chm_smart:
	$(MAKE) -C chm smart
chm_release:
	$(MAKE) -C chm release
chm_units:
	$(MAKE) -C chm units
chm_examples:
	$(MAKE) -C chm examples
chm_shared:
	$(MAKE) -C chm shared
chm_install:
	$(MAKE) -C chm install
chm_sourceinstall:
	$(MAKE) -C chm sourceinstall
chm_exampleinstall:
	$(MAKE) -C chm exampleinstall
chm_distinstall:
	$(MAKE) -C chm distinstall
chm_zipinstall:
	$(MAKE) -C chm zipinstall
chm_zipsourceinstall:
	$(MAKE) -C chm zipsourceinstall
chm_zipexampleinstall:
	$(MAKE) -C chm zipexampleinstall
chm_zipdistinstall:
	$(MAKE) -C chm zipdistinstall
chm_clean:
	$(MAKE) -C chm clean
chm_distclean:
	$(MAKE) -C chm distclean
chm_cleanall:
	$(MAKE) -C chm cleanall
chm_info:
	$(MAKE) -C chm info
chm_makefiles:
	$(MAKE) -C chm makefiles
chm:
	$(MAKE) -C chm all
.PHONY: chm_all chm_debug chm_smart chm_release chm_units chm_examples chm_shared chm_install chm_sourceinstall chm_exampleinstall chm_distinstall chm_zipinstall chm_zipsourceinstall chm_zipexampleinstall chm_zipdistinstall chm_clean chm_distclean chm_cleanall chm_info chm_makefiles chm
endif
ifdef TARGET_DIRS_FCL-RES
fcl-res_all:
	$(MAKE) -C fcl-res all
fcl-res_debug:
	$(MAKE) -C fcl-res debug
fcl-res_smart:
	$(MAKE) -C fcl-res smart
fcl-res_release:
	$(MAKE) -C fcl-res release
fcl-res_units:
	$(MAKE) -C fcl-res units
fcl-res_examples:
	$(MAKE) -C fcl-res examples
fcl-res_shared:
	$(MAKE) -C fcl-res shared
fcl-res_install:
	$(MAKE) -C fcl-res install
fcl-res_sourceinstall:
	$(MAKE) -C fcl-res sourceinstall
fcl-res_exampleinstall:
	$(MAKE) -C fcl-res exampleinstall
fcl-res_distinstall:
	$(MAKE) -C fcl-res distinstall
fcl-res_zipinstall:
	$(MAKE) -C fcl-res zipinstall
fcl-res_zipsourceinstall:
	$(MAKE) -C fcl-res zipsourceinstall
fcl-res_zipexampleinstall:
	$(MAKE) -C fcl-res zipexampleinstall
fcl-res_zipdistinstall:
	$(MAKE) -C fcl-res zipdistinstall
fcl-res_clean:
	$(MAKE) -C fcl-res clean
fcl-res_distclean:
	$(MAKE) -C fcl-res distclean
fcl-res_cleanall:
	$(MAKE) -C fcl-res cleanall
fcl-res_info:
	$(MAKE) -C fcl-res info
fcl-res_makefiles:
	$(MAKE) -C fcl-res makefiles
fcl-res:
	$(MAKE) -C fcl-res all
.PHONY: fcl-res_all fcl-res_debug fcl-res_smart fcl-res_release fcl-res_units fcl-res_examples fcl-res_shared fcl-res_install fcl-res_sourceinstall fcl-res_exampleinstall fcl-res_distinstall fcl-res_zipinstall fcl-res_zipsourceinstall fcl-res_zipexampleinstall fcl-res_zipdistinstall fcl-res_clean fcl-res_distclean fcl-res_cleanall fcl-res_info fcl-res_makefiles fcl-res
endif
ifdef TARGET_DIRS_LIBGD
libgd_all:
	$(MAKE) -C libgd all
libgd_debug:
	$(MAKE) -C libgd debug
libgd_smart:
	$(MAKE) -C libgd smart
libgd_release:
	$(MAKE) -C libgd release
libgd_units:
	$(MAKE) -C libgd units
libgd_examples:
	$(MAKE) -C libgd examples
libgd_shared:
	$(MAKE) -C libgd shared
libgd_install:
	$(MAKE) -C libgd install
libgd_sourceinstall:
	$(MAKE) -C libgd sourceinstall
libgd_exampleinstall:
	$(MAKE) -C libgd exampleinstall
libgd_distinstall:
	$(MAKE) -C libgd distinstall
libgd_zipinstall:
	$(MAKE) -C libgd zipinstall
libgd_zipsourceinstall:
	$(MAKE) -C libgd zipsourceinstall
libgd_zipexampleinstall:
	$(MAKE) -C libgd zipexampleinstall
libgd_zipdistinstall:
	$(MAKE) -C libgd zipdistinstall
libgd_clean:
	$(MAKE) -C libgd clean
libgd_distclean:
	$(MAKE) -C libgd distclean
libgd_cleanall:
	$(MAKE) -C libgd cleanall
libgd_info:
	$(MAKE) -C libgd info
libgd_makefiles:
	$(MAKE) -C libgd makefiles
libgd:
	$(MAKE) -C libgd all
.PHONY: libgd_all libgd_debug libgd_smart libgd_release libgd_units libgd_examples libgd_shared libgd_install libgd_sourceinstall libgd_exampleinstall libgd_distinstall libgd_zipinstall libgd_zipsourceinstall libgd_zipexampleinstall libgd_zipdistinstall libgd_clean libgd_distclean libgd_cleanall libgd_info libgd_makefiles libgd
endif
ifdef TARGET_DIRS_SYMBOLIC
symbolic_all:
	$(MAKE) -C symbolic all
symbolic_debug:
	$(MAKE) -C symbolic debug
symbolic_smart:
	$(MAKE) -C symbolic smart
symbolic_release:
	$(MAKE) -C symbolic release
symbolic_units:
	$(MAKE) -C symbolic units
symbolic_examples:
	$(MAKE) -C symbolic examples
symbolic_shared:
	$(MAKE) -C symbolic shared
symbolic_install:
	$(MAKE) -C symbolic install
symbolic_sourceinstall:
	$(MAKE) -C symbolic sourceinstall
symbolic_exampleinstall:
	$(MAKE) -C symbolic exampleinstall
symbolic_distinstall:
	$(MAKE) -C symbolic distinstall
symbolic_zipinstall:
	$(MAKE) -C symbolic zipinstall
symbolic_zipsourceinstall:
	$(MAKE) -C symbolic zipsourceinstall
symbolic_zipexampleinstall:
	$(MAKE) -C symbolic zipexampleinstall
symbolic_zipdistinstall:
	$(MAKE) -C symbolic zipdistinstall
symbolic_clean:
	$(MAKE) -C symbolic clean
symbolic_distclean:
	$(MAKE) -C symbolic distclean
symbolic_cleanall:
	$(MAKE) -C symbolic cleanall
symbolic_info:
	$(MAKE) -C symbolic info
symbolic_makefiles:
	$(MAKE) -C symbolic makefiles
symbolic:
	$(MAKE) -C symbolic all
.PHONY: symbolic_all symbolic_debug symbolic_smart symbolic_release symbolic_units symbolic_examples symbolic_shared symbolic_install symbolic_sourceinstall symbolic_exampleinstall symbolic_distinstall symbolic_zipinstall symbolic_zipsourceinstall symbolic_zipexampleinstall symbolic_zipdistinstall symbolic_clean symbolic_distclean symbolic_cleanall symbolic_info symbolic_makefiles symbolic
endif
ifdef TARGET_DIRS_BZIP2
bzip2_all:
	$(MAKE) -C bzip2 all
bzip2_debug:
	$(MAKE) -C bzip2 debug
bzip2_smart:
	$(MAKE) -C bzip2 smart
bzip2_release:
	$(MAKE) -C bzip2 release
bzip2_units:
	$(MAKE) -C bzip2 units
bzip2_examples:
	$(MAKE) -C bzip2 examples
bzip2_shared:
	$(MAKE) -C bzip2 shared
bzip2_install:
	$(MAKE) -C bzip2 install
bzip2_sourceinstall:
	$(MAKE) -C bzip2 sourceinstall
bzip2_exampleinstall:
	$(MAKE) -C bzip2 exampleinstall
bzip2_distinstall:
	$(MAKE) -C bzip2 distinstall
bzip2_zipinstall:
	$(MAKE) -C bzip2 zipinstall
bzip2_zipsourceinstall:
	$(MAKE) -C bzip2 zipsourceinstall
bzip2_zipexampleinstall:
	$(MAKE) -C bzip2 zipexampleinstall
bzip2_zipdistinstall:
	$(MAKE) -C bzip2 zipdistinstall
bzip2_clean:
	$(MAKE) -C bzip2 clean
bzip2_distclean:
	$(MAKE) -C bzip2 distclean
bzip2_cleanall:
	$(MAKE) -C bzip2 cleanall
bzip2_info:
	$(MAKE) -C bzip2 info
bzip2_makefiles:
	$(MAKE) -C bzip2 makefiles
bzip2:
	$(MAKE) -C bzip2 all
.PHONY: bzip2_all bzip2_debug bzip2_smart bzip2_release bzip2_units bzip2_examples bzip2_shared bzip2_install bzip2_sourceinstall bzip2_exampleinstall bzip2_distinstall bzip2_zipinstall bzip2_zipsourceinstall bzip2_zipexampleinstall bzip2_zipdistinstall bzip2_clean bzip2_distclean bzip2_cleanall bzip2_info bzip2_makefiles bzip2
endif
ifdef TARGET_DIRS_HERMES
hermes_all:
	$(MAKE) -C hermes all
hermes_debug:
	$(MAKE) -C hermes debug
hermes_smart:
	$(MAKE) -C hermes smart
hermes_release:
	$(MAKE) -C hermes release
hermes_units:
	$(MAKE) -C hermes units
hermes_examples:
	$(MAKE) -C hermes examples
hermes_shared:
	$(MAKE) -C hermes shared
hermes_install:
	$(MAKE) -C hermes install
hermes_sourceinstall:
	$(MAKE) -C hermes sourceinstall
hermes_exampleinstall:
	$(MAKE) -C hermes exampleinstall
hermes_distinstall:
	$(MAKE) -C hermes distinstall
hermes_zipinstall:
	$(MAKE) -C hermes zipinstall
hermes_zipsourceinstall:
	$(MAKE) -C hermes zipsourceinstall
hermes_zipexampleinstall:
	$(MAKE) -C hermes zipexampleinstall
hermes_zipdistinstall:
	$(MAKE) -C hermes zipdistinstall
hermes_clean:
	$(MAKE) -C hermes clean
hermes_distclean:
	$(MAKE) -C hermes distclean
hermes_cleanall:
	$(MAKE) -C hermes cleanall
hermes_info:
	$(MAKE) -C hermes info
hermes_makefiles:
	$(MAKE) -C hermes makefiles
hermes:
	$(MAKE) -C hermes all
.PHONY: hermes_all hermes_debug hermes_smart hermes_release hermes_units hermes_examples hermes_shared hermes_install hermes_sourceinstall hermes_exampleinstall hermes_distinstall hermes_zipinstall hermes_zipsourceinstall hermes_zipexampleinstall hermes_zipdistinstall hermes_clean hermes_distclean hermes_cleanall hermes_info hermes_makefiles hermes
endif
ifdef TARGET_DIRS_FPPKG
fppkg_all:
	$(MAKE) -C fppkg all
fppkg_debug:
	$(MAKE) -C fppkg debug
fppkg_smart:
	$(MAKE) -C fppkg smart
fppkg_release:
	$(MAKE) -C fppkg release
fppkg_units:
	$(MAKE) -C fppkg units
fppkg_examples:
	$(MAKE) -C fppkg examples
fppkg_shared:
	$(MAKE) -C fppkg shared
fppkg_install:
	$(MAKE) -C fppkg install
fppkg_sourceinstall:
	$(MAKE) -C fppkg sourceinstall
fppkg_exampleinstall:
	$(MAKE) -C fppkg exampleinstall
fppkg_distinstall:
	$(MAKE) -C fppkg distinstall
fppkg_zipinstall:
	$(MAKE) -C fppkg zipinstall
fppkg_zipsourceinstall:
	$(MAKE) -C fppkg zipsourceinstall
fppkg_zipexampleinstall:
	$(MAKE) -C fppkg zipexampleinstall
fppkg_zipdistinstall:
	$(MAKE) -C fppkg zipdistinstall
fppkg_clean:
	$(MAKE) -C fppkg clean
fppkg_distclean:
	$(MAKE) -C fppkg distclean
fppkg_cleanall:
	$(MAKE) -C fppkg cleanall
fppkg_info:
	$(MAKE) -C fppkg info
fppkg_makefiles:
	$(MAKE) -C fppkg makefiles
fppkg:
	$(MAKE) -C fppkg all
.PHONY: fppkg_all fppkg_debug fppkg_smart fppkg_release fppkg_units fppkg_examples fppkg_shared fppkg_install fppkg_sourceinstall fppkg_exampleinstall fppkg_distinstall fppkg_zipinstall fppkg_zipsourceinstall fppkg_zipexampleinstall fppkg_zipdistinstall fppkg_clean fppkg_distclean fppkg_cleanall fppkg_info fppkg_makefiles fppkg
endif
ifdef TARGET_DIRS_FPVECTORIAL
fpvectorial_all:
	$(MAKE) -C fpvectorial all
fpvectorial_debug:
	$(MAKE) -C fpvectorial debug
fpvectorial_smart:
	$(MAKE) -C fpvectorial smart
fpvectorial_release:
	$(MAKE) -C fpvectorial release
fpvectorial_units:
	$(MAKE) -C fpvectorial units
fpvectorial_examples:
	$(MAKE) -C fpvectorial examples
fpvectorial_shared:
	$(MAKE) -C fpvectorial shared
fpvectorial_install:
	$(MAKE) -C fpvectorial install
fpvectorial_sourceinstall:
	$(MAKE) -C fpvectorial sourceinstall
fpvectorial_exampleinstall:
	$(MAKE) -C fpvectorial exampleinstall
fpvectorial_distinstall:
	$(MAKE) -C fpvectorial distinstall
fpvectorial_zipinstall:
	$(MAKE) -C fpvectorial zipinstall
fpvectorial_zipsourceinstall:
	$(MAKE) -C fpvectorial zipsourceinstall
fpvectorial_zipexampleinstall:
	$(MAKE) -C fpvectorial zipexampleinstall
fpvectorial_zipdistinstall:
	$(MAKE) -C fpvectorial zipdistinstall
fpvectorial_clean:
	$(MAKE) -C fpvectorial clean
fpvectorial_distclean:
	$(MAKE) -C fpvectorial distclean
fpvectorial_cleanall:
	$(MAKE) -C fpvectorial cleanall
fpvectorial_info:
	$(MAKE) -C fpvectorial info
fpvectorial_makefiles:
	$(MAKE) -C fpvectorial makefiles
fpvectorial:
	$(MAKE) -C fpvectorial all
.PHONY: fpvectorial_all fpvectorial_debug fpvectorial_smart fpvectorial_release fpvectorial_units fpvectorial_examples fpvectorial_shared fpvectorial_install fpvectorial_sourceinstall fpvectorial_exampleinstall fpvectorial_distinstall fpvectorial_zipinstall fpvectorial_zipsourceinstall fpvectorial_zipexampleinstall fpvectorial_zipdistinstall fpvectorial_clean fpvectorial_distclean fpvectorial_cleanall fpvectorial_info fpvectorial_makefiles fpvectorial
endif
ifdef TARGET_DIRS_AROSUNITS
arosunits_all:
	$(MAKE) -C arosunits all
arosunits_debug:
	$(MAKE) -C arosunits debug
arosunits_smart:
	$(MAKE) -C arosunits smart
arosunits_release:
	$(MAKE) -C arosunits release
arosunits_units:
	$(MAKE) -C arosunits units
arosunits_examples:
	$(MAKE) -C arosunits examples
arosunits_shared:
	$(MAKE) -C arosunits shared
arosunits_install:
	$(MAKE) -C arosunits install
arosunits_sourceinstall:
	$(MAKE) -C arosunits sourceinstall
arosunits_exampleinstall:
	$(MAKE) -C arosunits exampleinstall
arosunits_distinstall:
	$(MAKE) -C arosunits distinstall
arosunits_zipinstall:
	$(MAKE) -C arosunits zipinstall
arosunits_zipsourceinstall:
	$(MAKE) -C arosunits zipsourceinstall
arosunits_zipexampleinstall:
	$(MAKE) -C arosunits zipexampleinstall
arosunits_zipdistinstall:
	$(MAKE) -C arosunits zipdistinstall
arosunits_clean:
	$(MAKE) -C arosunits clean
arosunits_distclean:
	$(MAKE) -C arosunits distclean
arosunits_cleanall:
	$(MAKE) -C arosunits cleanall
arosunits_info:
	$(MAKE) -C arosunits info
arosunits_makefiles:
	$(MAKE) -C arosunits makefiles
arosunits:
	$(MAKE) -C arosunits all
.PHONY: arosunits_all arosunits_debug arosunits_smart arosunits_release arosunits_units arosunits_examples arosunits_shared arosunits_install arosunits_sourceinstall arosunits_exampleinstall arosunits_distinstall arosunits_zipinstall arosunits_zipsourceinstall arosunits_zipexampleinstall arosunits_zipdistinstall arosunits_clean arosunits_distclean arosunits_cleanall arosunits_info arosunits_makefiles arosunits
endif
ifdef TARGET_DIRS_FV
fv_all:
	$(MAKE) -C fv all
fv_debug:
	$(MAKE) -C fv debug
fv_smart:
	$(MAKE) -C fv smart
fv_release:
	$(MAKE) -C fv release
fv_units:
	$(MAKE) -C fv units
fv_examples:
	$(MAKE) -C fv examples
fv_shared:
	$(MAKE) -C fv shared
fv_install:
	$(MAKE) -C fv install
fv_sourceinstall:
	$(MAKE) -C fv sourceinstall
fv_exampleinstall:
	$(MAKE) -C fv exampleinstall
fv_distinstall:
	$(MAKE) -C fv distinstall
fv_zipinstall:
	$(MAKE) -C fv zipinstall
fv_zipsourceinstall:
	$(MAKE) -C fv zipsourceinstall
fv_zipexampleinstall:
	$(MAKE) -C fv zipexampleinstall
fv_zipdistinstall:
	$(MAKE) -C fv zipdistinstall
fv_clean:
	$(MAKE) -C fv clean
fv_distclean:
	$(MAKE) -C fv distclean
fv_cleanall:
	$(MAKE) -C fv cleanall
fv_info:
	$(MAKE) -C fv info
fv_makefiles:
	$(MAKE) -C fv makefiles
fv:
	$(MAKE) -C fv all
.PHONY: fv_all fv_debug fv_smart fv_release fv_units fv_examples fv_shared fv_install fv_sourceinstall fv_exampleinstall fv_distinstall fv_zipinstall fv_zipsourceinstall fv_zipexampleinstall fv_zipdistinstall fv_clean fv_distclean fv_cleanall fv_info fv_makefiles fv
endif
ifdef TARGET_DIRS_FCL-STL
fcl-stl_all:
	$(MAKE) -C fcl-stl all
fcl-stl_debug:
	$(MAKE) -C fcl-stl debug
fcl-stl_smart:
	$(MAKE) -C fcl-stl smart
fcl-stl_release:
	$(MAKE) -C fcl-stl release
fcl-stl_units:
	$(MAKE) -C fcl-stl units
fcl-stl_examples:
	$(MAKE) -C fcl-stl examples
fcl-stl_shared:
	$(MAKE) -C fcl-stl shared
fcl-stl_install:
	$(MAKE) -C fcl-stl install
fcl-stl_sourceinstall:
	$(MAKE) -C fcl-stl sourceinstall
fcl-stl_exampleinstall:
	$(MAKE) -C fcl-stl exampleinstall
fcl-stl_distinstall:
	$(MAKE) -C fcl-stl distinstall
fcl-stl_zipinstall:
	$(MAKE) -C fcl-stl zipinstall
fcl-stl_zipsourceinstall:
	$(MAKE) -C fcl-stl zipsourceinstall
fcl-stl_zipexampleinstall:
	$(MAKE) -C fcl-stl zipexampleinstall
fcl-stl_zipdistinstall:
	$(MAKE) -C fcl-stl zipdistinstall
fcl-stl_clean:
	$(MAKE) -C fcl-stl clean
fcl-stl_distclean:
	$(MAKE) -C fcl-stl distclean
fcl-stl_cleanall:
	$(MAKE) -C fcl-stl cleanall
fcl-stl_info:
	$(MAKE) -C fcl-stl info
fcl-stl_makefiles:
	$(MAKE) -C fcl-stl makefiles
fcl-stl:
	$(MAKE) -C fcl-stl all
.PHONY: fcl-stl_all fcl-stl_debug fcl-stl_smart fcl-stl_release fcl-stl_units fcl-stl_examples fcl-stl_shared fcl-stl_install fcl-stl_sourceinstall fcl-stl_exampleinstall fcl-stl_distinstall fcl-stl_zipinstall fcl-stl_zipsourceinstall fcl-stl_zipexampleinstall fcl-stl_zipdistinstall fcl-stl_clean fcl-stl_distclean fcl-stl_cleanall fcl-stl_info fcl-stl_makefiles fcl-stl
endif
ifdef TARGET_DIRS_FASTCGI
fastcgi_all:
	$(MAKE) -C fastcgi all
fastcgi_debug:
	$(MAKE) -C fastcgi debug
fastcgi_smart:
	$(MAKE) -C fastcgi smart
fastcgi_release:
	$(MAKE) -C fastcgi release
fastcgi_units:
	$(MAKE) -C fastcgi units
fastcgi_examples:
	$(MAKE) -C fastcgi examples
fastcgi_shared:
	$(MAKE) -C fastcgi shared
fastcgi_install:
	$(MAKE) -C fastcgi install
fastcgi_sourceinstall:
	$(MAKE) -C fastcgi sourceinstall
fastcgi_exampleinstall:
	$(MAKE) -C fastcgi exampleinstall
fastcgi_distinstall:
	$(MAKE) -C fastcgi distinstall
fastcgi_zipinstall:
	$(MAKE) -C fastcgi zipinstall
fastcgi_zipsourceinstall:
	$(MAKE) -C fastcgi zipsourceinstall
fastcgi_zipexampleinstall:
	$(MAKE) -C fastcgi zipexampleinstall
fastcgi_zipdistinstall:
	$(MAKE) -C fastcgi zipdistinstall
fastcgi_clean:
	$(MAKE) -C fastcgi clean
fastcgi_distclean:
	$(MAKE) -C fastcgi distclean
fastcgi_cleanall:
	$(MAKE) -C fastcgi cleanall
fastcgi_info:
	$(MAKE) -C fastcgi info
fastcgi_makefiles:
	$(MAKE) -C fastcgi makefiles
fastcgi:
	$(MAKE) -C fastcgi all
.PHONY: fastcgi_all fastcgi_debug fastcgi_smart fastcgi_release fastcgi_units fastcgi_examples fastcgi_shared fastcgi_install fastcgi_sourceinstall fastcgi_exampleinstall fastcgi_distinstall fastcgi_zipinstall fastcgi_zipsourceinstall fastcgi_zipexampleinstall fastcgi_zipdistinstall fastcgi_clean fastcgi_distclean fastcgi_cleanall fastcgi_info fastcgi_makefiles fastcgi
endif
all: $(addsuffix _all,$(TARGET_DIRS))
debug: $(addsuffix _debug,$(TARGET_DIRS))
smart: $(addsuffix _smart,$(TARGET_DIRS))
release: $(addsuffix _release,$(TARGET_DIRS))
units: $(addsuffix _units,$(TARGET_DIRS))
examples: $(addsuffix _examples,$(TARGET_DIRS))
shared: $(addsuffix _shared,$(TARGET_DIRS))
install: $(addsuffix _install,$(TARGET_DIRS))
sourceinstall: $(addsuffix _sourceinstall,$(TARGET_DIRS))
exampleinstall: $(addsuffix _exampleinstall,$(TARGET_DIRS))
distinstall: $(addsuffix _distinstall,$(TARGET_DIRS))
zipinstall: $(addsuffix _zipinstall,$(TARGET_DIRS))
zipsourceinstall: $(addsuffix _zipsourceinstall,$(TARGET_DIRS))
zipexampleinstall: $(addsuffix _zipexampleinstall,$(TARGET_DIRS))
zipdistinstall: $(addsuffix _zipdistinstall,$(TARGET_DIRS))
clean: $(addsuffix _clean,$(TARGET_DIRS))
distclean: $(addsuffix _distclean,$(TARGET_DIRS))
cleanall: $(addsuffix _cleanall,$(TARGET_DIRS))
info: fpc_info
makefiles: fpc_makefiles $(addsuffix _makefiles,$(TARGET_DIRS))
.PHONY: all debug smart release units examples shared install sourceinstall exampleinstall distinstall zipinstall zipsourceinstall zipexampleinstall zipdistinstall clean distclean cleanall info makefiles
ifneq ($(wildcard fpcmake.loc),)
include fpcmake.loc
endif
fpmkunit_bootstrap:
ifdef CROSSCOMPILE
	$(MAKE) -C fpmkunit bootstrap
endif
fpmkunit_all: fpmkunit_bootstrap fcl-base_all fcl-process_all paszlib_all
fpmkunit_debug: fpmkunit_bootstrap fcl-base_debug fcl-process_debug paszlib_debug
fpmkunit_smart: fpmkunit_bootstrap fcl-base_smart fcl-process_smart paszlib_smart
fpmkunit_release: fpmkunit_bootstrap fcl-base_release fcl-process_release paszlib_release
fpmkunit_shared: fpmkunit_bootstrap fcl-base_shared fcl-process_shared paszlib_shared
ifneq ($(findstring $(OS_TARGET),darwin iphonesim),)
fcl-base_all: univint_all paszlib_all
fcl-base_debug: univint_debug paszlib_debug
fcl-base_smart: univint_smart paszlib_smart
fcl-base_release: univint_release paszlib_release
fcl-base_shared: univint_shared paszlib_shared
else
fcl-base_all: paszlib_all
fcl-base_debug: paszlib_debug
fcl-base_smart: paszlib_smart
fcl-base_release: paszlib_release
fcl-base_shared: paszlib_shared
endif
ifneq ($(findstring $(OS_TARGET),win32 win64),)
fcl-extra_all: fcl-base winunits-base_all winunits-jedi_all
fcl-extra_debug: fcl-base_debug winunits-base_debug winunits-jedi_debug
fcl-extra_smart: fcl-base_smart winunits-base_smart winunits-jedi_smart
fcl-extra_release: fcl-base_release winunits-base_release winunits-jedi_release
fcl-extra_shared: fcl-base_shared winunits-base_shared winunits-jedi_shared
else
ifneq ($(findstring $(OS_TARGET),darwin iphonesim),)
fcl-extra_all: univint_all fcl-base_all
fcl-extra_debug: univint_debug fcl-base_debug
fcl-extra_smart: univint_smart fcl-base_smart
fcl-extra_release: univint_release fcl-base_release
fcl-extra_shared: univint_shared fcl-base_shared
else
fcl-extra_all: fcl-base_all
fcl-extra_debug: fcl-base_debug
fcl-extra_smart: fcl-base_smart
fcl-extra_release: fcl-base_release
fcl-extra_shared: fcl-base_shared
endif
endif
ifneq ($(findstring $(FULL_TARGET),i386-darwin powerpc-darwin x86_64-darwin powerpc64-darwin),)
cocoaint_all: univint_all
cocoaint_debug: univint_debug
cocoaint_smart: univint_smart
cocoaint_release: univint_release
cocoaint_shared: univint_shared
endif
ifneq ($(findstring $(OS_TARGET),beos haiku freebsd darwin iphonesim solaris netbsd openbsd linux win32 win64 wince),)
fppkg_all: fcl-base_all fcl-xml_all fcl-process_all fcl-net_all paszlib_all fcl-web_all
fppkg_debug: fcl-base_debug fcl-xml_debug fcl-process_debug fcl-net_debug paszlib_debug fcl-web_debug
fppkg_smart: fcl-base_smart fcl-xml_smart fcl-process_smart fcl-net_smart paszlib_smart fcl-web_smart
fppkg_release: fcl-base_release fcl-xml_release fcl-process_release fcl-net_release paszlib_release fcl-web_release
fppkg_shared: fcl-base_shared fcl-xml_shared fcl-process_shared fcl-net_shared paszlib_shared fcl-web_shared
else
fppkg_all: fcl-base_all fcl-xml_all fcl-process_all fcl-net_all paszlib_all
fppkg_debug: fcl-base_debug fcl-xml_debug fcl-process_debug fcl-net_debug paszlib_debug
fppkg_smart: fcl-base_smart fcl-xml_smart fcl-process_smart fcl-net_smart paszlib_smart
fppkg_release: fcl-base_release fcl-xml_release fcl-process_release fcl-net_release paszlib_release
fppkg_shared: fcl-base_shared fcl-xml_shared fcl-process_shared fcl-net_shared paszlib_shared
endif
fcl-xml_all: fcl-base_all
fcl-xml_debug: fcl-base_debug
fcl-xml_smart: fcl-base_smart
fcl-xml_release: fcl-base_release
fcl-xml_shared: fcl-base_shared
fcl-json_all: fcl-base_all
fcl-json_debug: fcl-base_debug
fcl-json_smart: fcl-base_smart
fcl-json_release: fcl-base_release
fcl-json_shared: fcl-base_shared
fcl-js_all: fcl-base_all
fcl-js_debug: fcl-base_debug
fcl-js_smart: fcl-base_smart
fcl-js_release: fcl-base_release
fcl-js_shared: fcl-base_shared
fcl-image_all: fcl-base_all paszlib_all pasjpeg_all
fcl-image_debug: fcl-base_debug paszlib_debug pasjpeg_debug
fcl-image_smart: fcl-base_smart paszlib_smart pasjpeg_smart
fcl-image_release: fcl-base_release paszlib_release pasjpeg_release
fcl-image_shared: fcl-base_shared paszlib_shared pasjpeg_shared
fpvectorial_all: fcl-image_all fcl-base_all
fpvectorial_debug: fcl-image_debug fcl-base_debug
fpvectorial_smart: fcl-image_smart fcl-base_all
fpvectorial_release: fcl-image_release fcl-base_release 
fpvectorial_shared: fcl-image_shared fcl-base_shared
fcl-fpcunit_all: fcl-xml_all paszlib_all
fcl-fpcunit_debug: fcl-xml_debug paszlib_debug
fcl-fpcunit_smart: fcl-xml_smart paszlib_smart
fcl-fpcunit_release: fcl-xml_release paszlib_release
fcl-fpcunit_shared: fcl-xml_shared paszlib_shared
fcl-registry_all: fcl-xml_all
fcl-registry_debug: fcl-xml_debug
fcl-registry_smart: fcl-xml_smart
fcl-registry_release: fcl-xml_release
fcl-registry_shared: fcl-xml_shared
ifeq ($(findstring $(OS_TARGET),linux darwin iphonesim freebsd openbsd netbsd solaris),)
fcl-net_all: fcl-passrc_all fcl-xml_all
fcl-net_debug: fcl-passrc_debug fcl-xml_debug
fcl-net_smart: fcl-passrc_smart fcl-xml_smart
fcl-net_release: fcl-passrc_release fcl-xml_release
fcl-net_shared: fcl-passrc_shared fcl-xml_shared
else
fcl-net_all: fcl-passrc_all fcl-xml_all fcl-async_all
fcl-net_debug: fcl-passrc_debug fcl-xml_debug fcl-async_debug
fcl-net_smart: fcl-passrc_smart fcl-xml_smart fcl-async_smart
fcl-net_release: fcl-passrc_release fcl-xml_release fcl-async_release
fcl-net_shared: fcl-passrc_shared fcl-xml_shared fcl-async_shared
endif
fcl-web_all: fpmkunit_all fcl-db_all fcl-xml_all fcl-process_all fastcgi_all fcl-net_all fcl-json_all
fcl-web_debug: fpmkunit_debug fcl-db_debug fcl-xml_debug fcl-process_debug httpd22_debug fastcgi_debug fcl-net_debug fcl-json_debug
fcl-web_smart: fpmkunit_smart fcl-db_smart fcl-xml_smart fcl-process_smart httpd22_smart fastcgi_smart fcl-net_smart fcl-json_smart
fcl-web_release: fpmkunit_release fcl-db_release fcl-xml_release fcl-process_release httpd22_release fastcgi_release fcl-net_release fcl-json_release
fcl-web_shared: fpmkunit_shared fcl-db_shared fcl-xml_shared fcl-process_shared httpd22_shared fastcgi_shared fcl-net_shared fcl-json_shared
fastcgi_all: fpmkunit_all
fastcgi_debug: fpmkunit_debug
fastcgi_smart: fpmkunit_smart
fastcgi_release: fpmkunit_release
fastcgi_shared: fpmkunit_shared
ifneq ($(findstring $(OS_TARGET),linux freebsd openbsd netbsd win32 beos haiku),)
fcl-db_all: fcl-xml_all mysql_all ibase_all oracle_all odbc_all postgres_all sqlite_all pxlib_all
fcl-db_debug: fcl-xml_debug mysql_debug ibase_debug oracle_debug odbc_debug postgres_debug sqlite_debug pxlib_debug
fcl-db_smart: fcl-xml_smart mysql_smart ibase_smart oracle_smart odbc_smart postgres_smart sqlite_smart pxlib_smart
fcl-db_release: fcl-xml_release mysql_release ibase_release oracle_release odbc_release postgres_release sqlite_release pxlib_release
fcl-db_shared: fcl-xml_shared mysql_shared ibase_shared oracle_shared odbc_shared postgres_shared sqlite_shared pxlib_shared
else
ifneq ($(findstring $(OS_TARGET),win64 wince solaris darwin iphonesim),)
fcl-db_all: fcl-xml_all mysql_all ibase_all oracle_all odbc_all postgres_all sqlite_all
fcl-db_debug: fcl-xml_debug mysql_debug ibase_debug oracle_debug odbc_debug postgres_debug sqlite_debug
fcl-db_smart: fcl-xml_smart mysql_smart ibase_smart oracle_smart odbc_smart postgres_smart sqlite_smart
fcl-db_release: fcl-xml_release mysql_release ibase_release oracle_release odbc_release postgres_release sqlite_release
fcl-db_shared: fcl-xml_shared mysql_shared ibase_shared oracle_shared odbc_shared postgres_shared sqlite_shared
else
fcl-db_all: fcl-xml_all
fcl-db_debug: fcl-xml_debug
fcl-db_smart: fcl-xml_smart
fcl-db_release: fcl-xml_release
fcl-db_shared: fcl-xml_shared
endif
endif
fcl_all: fcl-base_all fcl-xml_all fcl-fpcunit_all fcl-db_all fcl-web_all fcl-registry_all fcl-passrc_all fcl-image_all fcl-net_all fcl-json_all fcl-res_all
fcl_debug: fcl-base_debug fcl-xml_debug fcl-fpcunit_debug fcl-db_debug fcl-web_debug fcl-registry_debug fcl-passrc_debug fcl-image_debug fcl-net_debug fcl-json_debug fcl-res_debug
fcl_smart: fcl-base_smart fcl-xml_smart fcl-fpcunit_smart fcl-db_smart fcl-web_smart fcl-registry_smart fcl-passrc_smart fcl-image_smart fcl-net_smart fcl-json_smart fcl-res_smart
fcl_release: fcl-base_release fcl-xml_release fcl-fpcunit_release fcl-db_release fcl-web_release fcl-registry_release fcl-passrc_release fcl-image_release fcl-net_release fcl-json_release fcl-res_release
fcl_shared: fcl-base_shared fcl-xml_shared fcl-fpcunit_shared fcl-db_shared fcl-web_shared fcl-registry_shared fcl-passrc_shared fcl-image_shared fcl-net_shared fcl-json_shared fcl-res_shared
libpng_all: zlib_all
libpng_debug: zlib_debug
libpng_smart: zlib_smart
libpng_release: zlib_release
libpng_shared: zlib_shared
ifneq ($(findstring $(OS_TARGET),linux darwin iphonesim freebsd openbsd netbsd solaris),)
cairo_all: x11_all fcl-image_all
cairo_debug: x11_debug fcl-image_debug
cairo_smart: x11_smart fcl-image_smart
cairo_release: x11_release fcl-image_release
cairo_shared: x11_shared fcl-image_shared
else
cairo_all:  fcl-image_all
cairo_debug:  fcl-image_debug
cairo_smart:  fcl-image_smart
cairo_release:  fcl-image_release
cairo_shared:  fcl-image_shared
endif
chm_all:  fcl-xml_all
chm_shared:  fcl-xml_shared
chm_smart:  fcl-xml_smart
chm_debug:  fcl-xml_debug
chm_release:  fcl-xml_release
fpgtk_all: fcl-base_all gtk1_all
fpgtk_shared: fcl-base_shared gtk1_shared
fpgtk_smart: fcl-base_smart gtk1_smart
fpgtk_debug: fcl-base_debug gtk1_debug
fpgtk_release: fcl-base_release gtk1_release
ifeq ($(findstring $(OS_TARGET),go32v2),)
graph_all: sdl_all
graph_shared: sdl_shared
graph_smart: sdl_smart
graph_debug: sdl_debug
graph_release: sdl_release
endif
ifneq ($(findstring $(OS_TARGET),linux win32 win64),)
graph_all: ptc_all
graph_shared: ptc_shared
graph_smart: ptc_smart
graph_debug: ptc_debug
graph_release: ptc_release
endif
ifneq ($(findstring $(OS_TARGET),linux darwin iphonesim freebsd openbsd netbsd solaris),)
gtk1_all: x11_all opengl_all
gtk1_debug: x11_debug opengl_debug
gtk1_smart: x11_smart opengl_smart
gtk1_release: x11_release opengl_release
gtk1_shared: x11_shared opengl_shared
gtk2_all: x11_all cairo_all
gtk2_shared: x11_shared cairo_shared
gtk2_smart: x11_smart cairo_smart
gtk2_debug: x11_debug cairo_debug
gtk2_release: x11_release cairo_release
else
ifeq ($(findstring $(OS_TARGET),os2 emx),)
gtk1_all:  opengl_all
gtk1_debug:  opengl_debug
gtk1_smart:  opengl_smart
gtk1_release:  opengl_release
gtk1_shared:  opengl_shared
endif
gtk2_all: cairo_all
gtk2_shared: cairo_shared
gtk2_smart: cairo_smart
gtk2_debug: cairo_debug
gtk2_release: cairo_release
endif
imlib_all: gtk1_all x11_all
imlib_shared: gtk1_shared x11_shared
imlib_smart: gtk1_smart x11_smart
imlib_debug: gtk1_debug x11_debug
imlib_release: gtk1_release x11_release
ldap_all: hash_all
ldap_shared: hash_shared
ldap_smart: hash_smart
ldap_debug: hash_debug
ldap_release: hash_release
libpng_all: zlib_all
libpng_shared: zlib_shared
libpng_smart: zlib_smart
libpng_debug: zlib_debug
libpng_release: zlib_release
paszlib_all: hash_all
paszlib_shared: hash_shared
paszlib_smart: hash_smart
paszlib_debug: hash_debug
paszlib_release: hash_release
ifneq ($(findstring $(OS_TARGET),linux darwin iphonesim freebsd openbsd netbsd solaris),)
sdl_all: pthreads_all x11_all
sdl_shared: pthreads_shared x11_shared
sdl_smart: pthreads_smart x11_smart
sdl_debug: pthreads_debug x11_debug
sdl_release: pthreads_release x11_release
opengl_all: x11_all
opengl_shared: x11_shared
opengl_smart: x11_smart
opengl_debug: x11_debug
opengl_release: x11_release
ptc_all: x11_all
ptc_shared: x11_shared
ptc_smart: x11_smart
ptc_debug: x11_debug
ptc_release: x11_release
endif
tcl_all: fcl-base_all
tcl_shared: fcl-base_shared
tcl_smart: fcl-base_smart
tcl_debug: fcl-base_debug
tcl_release: fcl-base_release
unixutil_all: libc_all fcl-base_all
unixutil_shared: libc_shared fcl-base_shared
unixutil_smart: libc_smart fcl-base_smart
unixutil_debug: libc_debug fcl-base_debug
unixutil_release: libc_release fcl-base_release
winunits-base_all: fcl-registry_all fcl-base_all
winunits-base_shared: fcl-registry_shared fcl-base_shared
winunits-base_smart: fcl-registry_smart fcl-base_smart
winunits-base_debug: fcl-registry_debug fcl-base_debug
winunits-base_release: fcl-registry_release fcl-base_release
winunits-jedi_all: winunits-base_all fcl-registry_all fcl-base_all
winunits-jedi_shared: winunits-base_shared fcl-registry_shared fcl-base_shared
winunits-jedi_smart: winunits-base_smart fcl-registry_smart fcl-base_smart
winunits-jedi_debug: winunits-base_debug fcl-registry_debug fcl-base_debug
winunits-jedi_release: winunits-base_release fcl-registry_release fcl-base_release
xforms_all: x11_all
xforms_shared: x11_shared
xforms_smart: x11_smart
xforms_debug: x11_debug
xforms_release: x11_release
gnome1_all: gtk1_all imlib_all
gnome1_shared: gtk1_shared imlib_shared
gnome1_smart: gtk1_smart imlib_smart
gnome1_debug: gtk1_debug imlib_debug
gnome1_release: gtk1_release imlib_release
ptc_all: hermes_all fcl-base_all
ptc_shared: hermes_shared fcl-base_shared
ptc_smart: hermes_smart fcl-base_smart
ptc_debug: hermes_debug fcl-base_debug
ptc_release: hermes_release fcl-base_release
librsvg_all: gtk2_all
librsvg_shared: gtk2_shared
librsvg_smart: gtk2_smart
librsvg_debug: gtk2_debug
librsvg_release: gtk2_release
ifneq ($(findstring $(OS_TARGET),linux freebsd darwin iphonesim beos haiku),)
fcl-xml_all: iconvenc_all
fcl-xml_shared: iconvenc_shared
fcl-xml_smart: iconvenc_smart
fcl-xml_debug: iconvenc_debug
fcl-xml_release: iconvenc_release
endif
opencl_all:  opengl_all
opencl_debug:  opengl_debug
opencl_smart:  opengl_smart
opencl_release:  opengl_release
opencl_shared:  opengl_shared
ifeq ($(findstring $(OS_TARGET),go32v2 aros),)
fppkg_all: fcl-web_all
fppkg_debug:  fcl-web_debug
fppkg_smart:  fcl-web_smart
fppkg_release:  fcl-web_release
fppkg_shared:  fcl-web_shared
endif
