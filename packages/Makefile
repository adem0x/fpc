#
# Don't edit, this file is generated by FPCMake Version 2.0.0 [2007/07/29]
#
default: all
MAKEFILETARGETS=i386-linux i386-go32v2 i386-win32 i386-os2 i386-freebsd i386-beos i386-netbsd i386-solaris i386-qnx i386-netware i386-openbsd i386-wdosx i386-darwin i386-emx i386-watcom i386-netwlibc i386-wince i386-embedded i386-symbian m68k-linux m68k-freebsd m68k-netbsd m68k-amiga m68k-atari m68k-openbsd m68k-palmos m68k-embedded powerpc-linux powerpc-netbsd powerpc-amiga powerpc-macos powerpc-darwin powerpc-morphos powerpc-embedded sparc-linux sparc-netbsd sparc-solaris sparc-embedded x86_64-linux x86_64-freebsd x86_64-win64 x86_64-embedded arm-linux arm-palmos arm-wince arm-gba arm-nds arm-embedded arm-symbian powerpc64-linux powerpc64-darwin powerpc64-embedded
BSDs = freebsd netbsd openbsd darwin
UNIXs = linux $(BSDs) solaris qnx
LIMIT83fs = go32v2 os2 emx watcom
FORCE:
.PHONY: FORCE
override PATH:=$(patsubst %/,%,$(subst \,/,$(PATH)))
ifneq ($(findstring darwin,$(OSTYPE)),)
inUnix=1 #darwin
SEARCHPATH:=$(filter-out .,$(subst :, ,$(PATH)))
else
ifeq ($(findstring ;,$(PATH)),)
inUnix=1
SEARCHPATH:=$(filter-out .,$(subst :, ,$(PATH)))
else
SEARCHPATH:=$(subst ;, ,$(PATH))
endif
endif
SEARCHPATH+=$(patsubst %/,%,$(subst \,/,$(dir $(MAKE))))
PWD:=$(strip $(wildcard $(addsuffix /pwd.exe,$(SEARCHPATH))))
ifeq ($(PWD),)
PWD:=$(strip $(wildcard $(addsuffix /pwd,$(SEARCHPATH))))
ifeq ($(PWD),)
$(error You need the GNU utils package to use this Makefile)
else
PWD:=$(firstword $(PWD))
SRCEXEEXT=
endif
else
PWD:=$(firstword $(PWD))
SRCEXEEXT=.exe
endif
ifndef inUnix
ifeq ($(OS),Windows_NT)
inWinNT=1
else
ifdef OS2_SHELL
inOS2=1
endif
endif
else
ifneq ($(findstring cygdrive,$(PATH)),)
inCygWin=1
endif
endif
ifdef inUnix
SRCBATCHEXT=.sh
else
ifdef inOS2
SRCBATCHEXT=.cmd
else
SRCBATCHEXT=.bat
endif
endif
ifdef inUnix
PATHSEP=/
else
PATHSEP:=$(subst /,\,/)
ifdef inCygWin
PATHSEP=/
endif
endif
ifdef PWD
BASEDIR:=$(subst \,/,$(shell $(PWD)))
ifdef inCygWin
ifneq ($(findstring /cygdrive/,$(BASEDIR)),)
BASENODIR:=$(patsubst /cygdrive%,%,$(BASEDIR))
BASEDRIVE:=$(firstword $(subst /, ,$(BASENODIR)))
BASEDIR:=$(subst /cygdrive/$(BASEDRIVE)/,$(BASEDRIVE):/,$(BASEDIR))
endif
endif
else
BASEDIR=.
endif
ifdef inOS2
ifndef ECHO
ECHO:=$(strip $(wildcard $(addsuffix /gecho$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(ECHO),)
ECHO:=$(strip $(wildcard $(addsuffix /echo$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(ECHO),)
ECHO=echo
else
ECHO:=$(firstword $(ECHO))
endif
else
ECHO:=$(firstword $(ECHO))
endif
endif
export ECHO
endif
override DEFAULT_FPCDIR=..
ifndef FPC
ifdef PP
FPC=$(PP)
endif
endif
ifndef FPC
FPCPROG:=$(strip $(wildcard $(addsuffix /fpc$(SRCEXEEXT),$(SEARCHPATH))))
ifneq ($(FPCPROG),)
FPCPROG:=$(firstword $(FPCPROG))
FPC:=$(shell $(FPCPROG) -PB)
ifneq ($(findstring Error,$(FPC)),)
override FPC=$(firstword $(strip $(wildcard $(addsuffix /ppc386$(SRCEXEEXT),$(SEARCHPATH)))))
endif
else
override FPC=$(firstword $(strip $(wildcard $(addsuffix /ppc386$(SRCEXEEXT),$(SEARCHPATH)))))
endif
endif
override FPC:=$(subst $(SRCEXEEXT),,$(FPC))
override FPC:=$(subst \,/,$(FPC))$(SRCEXEEXT)
FOUNDFPC:=$(strip $(wildcard $(FPC)))
ifeq ($(FOUNDFPC),)
FOUNDFPC=$(strip $(wildcard $(addsuffix /$(FPC),$(SEARCHPATH))))
ifeq ($(FOUNDFPC),)
$(error Compiler $(FPC) not found)
endif
endif
ifndef FPC_COMPILERINFO
FPC_COMPILERINFO:=$(shell $(FPC) -iVSPTPSOTO)
endif
ifndef FPC_VERSION
FPC_VERSION:=$(word 1,$(FPC_COMPILERINFO))
endif
export FPC FPC_VERSION FPC_COMPILERINFO
unexport CHECKDEPEND ALLDEPENDENCIES
ifndef CPU_TARGET
ifdef CPU_TARGET_DEFAULT
CPU_TARGET=$(CPU_TARGET_DEFAULT)
endif
endif
ifndef OS_TARGET
ifdef OS_TARGET_DEFAULT
OS_TARGET=$(OS_TARGET_DEFAULT)
endif
endif
ifneq ($(words $(FPC_COMPILERINFO)),5)
FPC_COMPILERINFO+=$(shell $(FPC) -iSP)
FPC_COMPILERINFO+=$(shell $(FPC) -iTP)
FPC_COMPILERINFO+=$(shell $(FPC) -iSO)
FPC_COMPILERINFO+=$(shell $(FPC) -iTO)
endif
ifndef CPU_SOURCE
CPU_SOURCE:=$(word 2,$(FPC_COMPILERINFO))
endif
ifndef CPU_TARGET
CPU_TARGET:=$(word 3,$(FPC_COMPILERINFO))
endif
ifndef OS_SOURCE
OS_SOURCE:=$(word 4,$(FPC_COMPILERINFO))
endif
ifndef OS_TARGET
OS_TARGET:=$(word 5,$(FPC_COMPILERINFO))
endif
FULL_TARGET=$(CPU_TARGET)-$(OS_TARGET)
FULL_SOURCE=$(CPU_SOURCE)-$(OS_SOURCE)
ifneq ($(findstring $(OS_SOURCE),$(LIMIT83fs)),)
TARGETSUFFIX=$(OS_TARGET)
SOURCESUFFIX=$(OS_SOURCE)
else
TARGETSUFFIX=$(FULL_TARGET)
SOURCESUFFIX=$(FULL_SOURCE)
endif
ifneq ($(FULL_TARGET),$(FULL_SOURCE))
CROSSCOMPILE=1
endif
ifeq ($(findstring makefile,$(MAKECMDGOALS)),)
ifeq ($(findstring $(FULL_TARGET),$(MAKEFILETARGETS)),)
$(error The Makefile doesn't support target $(FULL_TARGET), please run fpcmake first)
endif
endif
ifneq ($(findstring $(OS_TARGET),$(BSDs)),)
BSDhier=1
endif
ifeq ($(OS_TARGET),linux)
linuxHier=1
endif
export OS_TARGET OS_SOURCE CPU_TARGET CPU_SOURCE FULL_TARGET FULL_SOURCE TARGETSUFFIX SOURCESUFFIX CROSSCOMPILE
ifdef FPCDIR
override FPCDIR:=$(subst \,/,$(FPCDIR))
ifeq ($(wildcard $(addprefix $(FPCDIR)/,rtl units)),)
override FPCDIR=wrong
endif
else
override FPCDIR=wrong
endif
ifdef DEFAULT_FPCDIR
ifeq ($(FPCDIR),wrong)
override FPCDIR:=$(subst \,/,$(DEFAULT_FPCDIR))
ifeq ($(wildcard $(addprefix $(FPCDIR)/,rtl units)),)
override FPCDIR=wrong
endif
endif
endif
ifeq ($(FPCDIR),wrong)
ifdef inUnix
override FPCDIR=/usr/local/lib/fpc/$(FPC_VERSION)
ifeq ($(wildcard $(FPCDIR)/units),)
override FPCDIR=/usr/lib/fpc/$(FPC_VERSION)
endif
else
override FPCDIR:=$(subst /$(FPC),,$(firstword $(strip $(wildcard $(addsuffix /$(FPC),$(SEARCHPATH))))))
override FPCDIR:=$(FPCDIR)/..
ifeq ($(wildcard $(addprefix $(FPCDIR)/,rtl units)),)
override FPCDIR:=$(FPCDIR)/..
ifeq ($(wildcard $(addprefix $(FPCDIR)/,rtl units)),)
override FPCDIR:=$(BASEDIR)
ifeq ($(wildcard $(addprefix $(FPCDIR)/,rtl units)),)
override FPCDIR=c:/pp
endif
endif
endif
endif
endif
ifndef CROSSBINDIR
CROSSBINDIR:=$(wildcard $(FPCDIR)/bin/$(TARGETSUFFIX))
endif
ifndef BINUTILSPREFIX
ifndef CROSSBINDIR
ifdef CROSSCOMPILE
BINUTILSPREFIX=$(CPU_TARGET)-$(OS_TARGET)-
endif
endif
endif
UNITSDIR:=$(wildcard $(FPCDIR)/units/$(TARGETSUFFIX))
ifeq ($(UNITSDIR),)
UNITSDIR:=$(wildcard $(FPCDIR)/units/$(OS_TARGET))
endif
PACKAGESDIR:=$(wildcard $(FPCDIR) $(FPCDIR)/packages $(FPCDIR)/packages/base $(FPCDIR)/packages/extra)
ifeq ($(FULL_TARGET),i386-linux)
override TARGET_DIRS+=base fpmkunit fcl-base fcl-db fcl-image fcl-net fcl-passrc fcl-registry fcl-xml fcl-fpcunit extra  fcl-web
endif
ifeq ($(FULL_TARGET),i386-go32v2)
override TARGET_DIRS+=base fpmkunit fcl-base fcl-db fcl-image fcl-net fcl-passrc fcl-registry fcl-xml fcl-fpcunit extra
endif
ifeq ($(FULL_TARGET),i386-win32)
override TARGET_DIRS+=base fpmkunit fcl-base fcl-db fcl-image fcl-net fcl-passrc fcl-registry fcl-xml fcl-fpcunit extra  fcl-web
endif
ifeq ($(FULL_TARGET),i386-os2)
override TARGET_DIRS+=base fpmkunit fcl-base fcl-db fcl-image fcl-net fcl-passrc fcl-registry fcl-xml fcl-fpcunit extra
endif
ifeq ($(FULL_TARGET),i386-freebsd)
override TARGET_DIRS+=base fpmkunit fcl-base fcl-db fcl-image fcl-net fcl-passrc fcl-registry fcl-xml fcl-fpcunit extra  fcl-web
endif
ifeq ($(FULL_TARGET),i386-beos)
override TARGET_DIRS+=base fpmkunit fcl-base fcl-db fcl-image fcl-net fcl-passrc fcl-registry fcl-xml fcl-fpcunit extra
endif
ifeq ($(FULL_TARGET),i386-netbsd)
override TARGET_DIRS+=base fpmkunit fcl-base fcl-db fcl-image fcl-net fcl-passrc fcl-registry fcl-xml fcl-fpcunit extra  fcl-web
endif
ifeq ($(FULL_TARGET),i386-solaris)
override TARGET_DIRS+=base fpmkunit fcl-base fcl-db fcl-image fcl-net fcl-passrc fcl-registry fcl-xml fcl-fpcunit extra  fcl-web
endif
ifeq ($(FULL_TARGET),i386-qnx)
override TARGET_DIRS+=base fpmkunit fcl-base fcl-db fcl-image fcl-net fcl-passrc fcl-registry fcl-xml fcl-fpcunit extra
endif
ifeq ($(FULL_TARGET),i386-netware)
override TARGET_DIRS+=base fpmkunit fcl-base fcl-db fcl-image fcl-net fcl-passrc fcl-registry fcl-xml fcl-fpcunit extra
endif
ifeq ($(FULL_TARGET),i386-openbsd)
override TARGET_DIRS+=base fpmkunit fcl-base fcl-db fcl-image fcl-net fcl-passrc fcl-registry fcl-xml fcl-fpcunit extra  fcl-web
endif
ifeq ($(FULL_TARGET),i386-wdosx)
override TARGET_DIRS+=base fpmkunit fcl-base fcl-db fcl-image fcl-net fcl-passrc fcl-registry fcl-xml fcl-fpcunit extra
endif
ifeq ($(FULL_TARGET),i386-darwin)
override TARGET_DIRS+=base fpmkunit fcl-base fcl-db fcl-image fcl-net fcl-passrc fcl-registry fcl-xml fcl-fpcunit extra  fcl-web
endif
ifeq ($(FULL_TARGET),i386-emx)
override TARGET_DIRS+=base fpmkunit fcl-base fcl-db fcl-image fcl-net fcl-passrc fcl-registry fcl-xml fcl-fpcunit extra
endif
ifeq ($(FULL_TARGET),i386-watcom)
override TARGET_DIRS+=base fpmkunit fcl-base fcl-db fcl-image fcl-net fcl-passrc fcl-registry fcl-xml fcl-fpcunit extra
endif
ifeq ($(FULL_TARGET),i386-netwlibc)
override TARGET_DIRS+=base fpmkunit fcl-base fcl-db fcl-image fcl-net fcl-passrc fcl-registry fcl-xml fcl-fpcunit extra
endif
ifeq ($(FULL_TARGET),i386-wince)
override TARGET_DIRS+=base fpmkunit fcl-base fcl-db fcl-image fcl-net fcl-passrc fcl-registry fcl-xml fcl-fpcunit extra  fcl-web
endif
ifeq ($(FULL_TARGET),i386-embedded)
override TARGET_DIRS+=base fpmkunit fcl-base fcl-db fcl-image fcl-net fcl-passrc fcl-registry fcl-xml fcl-fpcunit extra
endif
ifeq ($(FULL_TARGET),i386-symbian)
override TARGET_DIRS+=base fpmkunit fcl-base fcl-db fcl-image fcl-net fcl-passrc fcl-registry fcl-xml fcl-fpcunit extra
endif
ifeq ($(FULL_TARGET),m68k-linux)
override TARGET_DIRS+=base fpmkunit fcl-base fcl-db fcl-image fcl-net fcl-passrc fcl-registry fcl-xml fcl-fpcunit extra  fcl-web
endif
ifeq ($(FULL_TARGET),m68k-freebsd)
override TARGET_DIRS+=base fpmkunit fcl-base fcl-db fcl-image fcl-net fcl-passrc fcl-registry fcl-xml fcl-fpcunit extra  fcl-web
endif
ifeq ($(FULL_TARGET),m68k-netbsd)
override TARGET_DIRS+=base fpmkunit fcl-base fcl-db fcl-image fcl-net fcl-passrc fcl-registry fcl-xml fcl-fpcunit extra  fcl-web
endif
ifeq ($(FULL_TARGET),m68k-amiga)
override TARGET_DIRS+=base fpmkunit fcl-base fcl-db fcl-image fcl-net fcl-passrc fcl-registry fcl-xml fcl-fpcunit extra
endif
ifeq ($(FULL_TARGET),m68k-atari)
override TARGET_DIRS+=base fpmkunit fcl-base fcl-db fcl-image fcl-net fcl-passrc fcl-registry fcl-xml fcl-fpcunit extra
endif
ifeq ($(FULL_TARGET),m68k-openbsd)
override TARGET_DIRS+=base fpmkunit fcl-base fcl-db fcl-image fcl-net fcl-passrc fcl-registry fcl-xml fcl-fpcunit extra  fcl-web
endif
ifeq ($(FULL_TARGET),m68k-palmos)
override TARGET_DIRS+=base fpmkunit fcl-base fcl-db fcl-image fcl-net fcl-passrc fcl-registry fcl-xml fcl-fpcunit extra
endif
ifeq ($(FULL_TARGET),m68k-embedded)
override TARGET_DIRS+=base fpmkunit fcl-base fcl-db fcl-image fcl-net fcl-passrc fcl-registry fcl-xml fcl-fpcunit extra
endif
ifeq ($(FULL_TARGET),powerpc-linux)
override TARGET_DIRS+=base fpmkunit fcl-base fcl-db fcl-image fcl-net fcl-passrc fcl-registry fcl-xml fcl-fpcunit extra  fcl-web
endif
ifeq ($(FULL_TARGET),powerpc-netbsd)
override TARGET_DIRS+=base fpmkunit fcl-base fcl-db fcl-image fcl-net fcl-passrc fcl-registry fcl-xml fcl-fpcunit extra  fcl-web
endif
ifeq ($(FULL_TARGET),powerpc-amiga)
override TARGET_DIRS+=base fpmkunit fcl-base fcl-db fcl-image fcl-net fcl-passrc fcl-registry fcl-xml fcl-fpcunit extra
endif
ifeq ($(FULL_TARGET),powerpc-macos)
override TARGET_DIRS+=base fpmkunit fcl-base fcl-db fcl-image fcl-net fcl-passrc fcl-registry fcl-xml fcl-fpcunit extra
endif
ifeq ($(FULL_TARGET),powerpc-darwin)
override TARGET_DIRS+=base fpmkunit fcl-base fcl-db fcl-image fcl-net fcl-passrc fcl-registry fcl-xml fcl-fpcunit extra  fcl-web
endif
ifeq ($(FULL_TARGET),powerpc-morphos)
override TARGET_DIRS+=base fpmkunit fcl-base fcl-db fcl-image fcl-net fcl-passrc fcl-registry fcl-xml fcl-fpcunit extra
endif
ifeq ($(FULL_TARGET),powerpc-embedded)
override TARGET_DIRS+=base fpmkunit fcl-base fcl-db fcl-image fcl-net fcl-passrc fcl-registry fcl-xml fcl-fpcunit extra
endif
ifeq ($(FULL_TARGET),sparc-linux)
override TARGET_DIRS+=base fpmkunit fcl-base fcl-db fcl-image fcl-net fcl-passrc fcl-registry fcl-xml fcl-fpcunit extra  fcl-web
endif
ifeq ($(FULL_TARGET),sparc-netbsd)
override TARGET_DIRS+=base fpmkunit fcl-base fcl-db fcl-image fcl-net fcl-passrc fcl-registry fcl-xml fcl-fpcunit extra  fcl-web
endif
ifeq ($(FULL_TARGET),sparc-solaris)
override TARGET_DIRS+=base fpmkunit fcl-base fcl-db fcl-image fcl-net fcl-passrc fcl-registry fcl-xml fcl-fpcunit extra  fcl-web
endif
ifeq ($(FULL_TARGET),sparc-embedded)
override TARGET_DIRS+=base fpmkunit fcl-base fcl-db fcl-image fcl-net fcl-passrc fcl-registry fcl-xml fcl-fpcunit extra
endif
ifeq ($(FULL_TARGET),x86_64-linux)
override TARGET_DIRS+=base fpmkunit fcl-base fcl-db fcl-image fcl-net fcl-passrc fcl-registry fcl-xml fcl-fpcunit extra  fcl-web
endif
ifeq ($(FULL_TARGET),x86_64-freebsd)
override TARGET_DIRS+=base fpmkunit fcl-base fcl-db fcl-image fcl-net fcl-passrc fcl-registry fcl-xml fcl-fpcunit extra  fcl-web
endif
ifeq ($(FULL_TARGET),x86_64-win64)
override TARGET_DIRS+=base fpmkunit fcl-base fcl-db fcl-image fcl-net fcl-passrc fcl-registry fcl-xml fcl-fpcunit extra  fcl-web
endif
ifeq ($(FULL_TARGET),x86_64-embedded)
override TARGET_DIRS+=base fpmkunit fcl-base fcl-db fcl-image fcl-net fcl-passrc fcl-registry fcl-xml fcl-fpcunit extra
endif
ifeq ($(FULL_TARGET),arm-linux)
override TARGET_DIRS+=base fpmkunit fcl-base fcl-db fcl-image fcl-net fcl-passrc fcl-registry fcl-xml fcl-fpcunit extra  fcl-web
endif
ifeq ($(FULL_TARGET),arm-palmos)
override TARGET_DIRS+=base fpmkunit fcl-base fcl-db fcl-image fcl-net fcl-passrc fcl-registry fcl-xml fcl-fpcunit extra
endif
ifeq ($(FULL_TARGET),arm-wince)
override TARGET_DIRS+=base fpmkunit fcl-base fcl-db fcl-image fcl-net fcl-passrc fcl-registry fcl-xml fcl-fpcunit extra  fcl-web
endif
ifeq ($(FULL_TARGET),arm-gba)
override TARGET_DIRS+=base fpmkunit fcl-base fcl-db fcl-image fcl-net fcl-passrc fcl-registry fcl-xml fcl-fpcunit extra
endif
ifeq ($(FULL_TARGET),arm-nds)
override TARGET_DIRS+=base fpmkunit fcl-base fcl-db fcl-image fcl-net fcl-passrc fcl-registry fcl-xml fcl-fpcunit extra
endif
ifeq ($(FULL_TARGET),arm-embedded)
override TARGET_DIRS+=base fpmkunit fcl-base fcl-db fcl-image fcl-net fcl-passrc fcl-registry fcl-xml fcl-fpcunit extra
endif
ifeq ($(FULL_TARGET),arm-symbian)
override TARGET_DIRS+=base fpmkunit fcl-base fcl-db fcl-image fcl-net fcl-passrc fcl-registry fcl-xml fcl-fpcunit extra
endif
ifeq ($(FULL_TARGET),powerpc64-linux)
override TARGET_DIRS+=base fpmkunit fcl-base fcl-db fcl-image fcl-net fcl-passrc fcl-registry fcl-xml fcl-fpcunit extra  fcl-web
endif
ifeq ($(FULL_TARGET),powerpc64-darwin)
override TARGET_DIRS+=base fpmkunit fcl-base fcl-db fcl-image fcl-net fcl-passrc fcl-registry fcl-xml fcl-fpcunit extra  fcl-web
endif
ifeq ($(FULL_TARGET),powerpc64-embedded)
override TARGET_DIRS+=base fpmkunit fcl-base fcl-db fcl-image fcl-net fcl-passrc fcl-registry fcl-xml fcl-fpcunit extra
endif
override INSTALL_FPCPACKAGE=y
override INSTALL_FPCSUBDIR=packages
ifdef REQUIRE_UNITSDIR
override UNITSDIR+=$(REQUIRE_UNITSDIR)
endif
ifdef REQUIRE_PACKAGESDIR
override PACKAGESDIR+=$(REQUIRE_PACKAGESDIR)
endif
ifdef ZIPINSTALL
ifneq ($(findstring $(OS_TARGET),$(UNIXs)),)
UNIXHier=1
endif
else
ifneq ($(findstring $(OS_SOURCE),$(UNIXs)),)
UNIXHier=1
endif
endif
ifndef INSTALL_PREFIX
ifdef PREFIX
INSTALL_PREFIX=$(PREFIX)
endif
endif
ifndef INSTALL_PREFIX
ifdef UNIXHier
INSTALL_PREFIX=/usr/local
else
ifdef INSTALL_FPCPACKAGE
INSTALL_BASEDIR:=/pp
else
INSTALL_BASEDIR:=/$(PACKAGE_NAME)
endif
endif
endif
export INSTALL_PREFIX
ifdef INSTALL_FPCSUBDIR
export INSTALL_FPCSUBDIR
endif
ifndef DIST_DESTDIR
DIST_DESTDIR:=$(BASEDIR)
endif
export DIST_DESTDIR
ifndef COMPILER_UNITTARGETDIR
ifdef PACKAGEDIR_MAIN
COMPILER_UNITTARGETDIR=$(PACKAGEDIR_MAIN)/units/$(TARGETSUFFIX)
else
COMPILER_UNITTARGETDIR=units/$(TARGETSUFFIX)
endif
endif
ifndef COMPILER_TARGETDIR
COMPILER_TARGETDIR=.
endif
ifndef INSTALL_BASEDIR
ifdef UNIXHier
ifdef INSTALL_FPCPACKAGE
INSTALL_BASEDIR:=$(INSTALL_PREFIX)/lib/fpc/$(FPC_VERSION)
else
INSTALL_BASEDIR:=$(INSTALL_PREFIX)/lib/$(PACKAGE_NAME)
endif
else
INSTALL_BASEDIR:=$(INSTALL_PREFIX)
endif
endif
ifndef INSTALL_BINDIR
ifdef UNIXHier
INSTALL_BINDIR:=$(INSTALL_PREFIX)/bin
else
INSTALL_BINDIR:=$(INSTALL_BASEDIR)/bin
ifdef INSTALL_FPCPACKAGE
ifdef CROSSCOMPILE
ifdef CROSSINSTALL
INSTALL_BINDIR:=$(INSTALL_BINDIR)/$(SOURCESUFFIX)
else
INSTALL_BINDIR:=$(INSTALL_BINDIR)/$(TARGETSUFFIX)
endif
else
INSTALL_BINDIR:=$(INSTALL_BINDIR)/$(TARGETSUFFIX)
endif
endif
endif
endif
ifndef INSTALL_UNITDIR
INSTALL_UNITDIR:=$(INSTALL_BASEDIR)/units/$(TARGETSUFFIX)
ifdef INSTALL_FPCPACKAGE
ifdef PACKAGE_NAME
INSTALL_UNITDIR:=$(INSTALL_UNITDIR)/$(PACKAGE_NAME)
endif
endif
endif
ifndef INSTALL_LIBDIR
ifdef UNIXHier
INSTALL_LIBDIR:=$(INSTALL_PREFIX)/lib
else
INSTALL_LIBDIR:=$(INSTALL_UNITDIR)
endif
endif
ifndef INSTALL_SOURCEDIR
ifdef UNIXHier
ifdef BSDhier
SRCPREFIXDIR=share/src
else
ifdef linuxHier
SRCPREFIXDIR=share/src
else
SRCPREFIXDIR=src
endif
endif
ifdef INSTALL_FPCPACKAGE
ifdef INSTALL_FPCSUBDIR
INSTALL_SOURCEDIR:=$(INSTALL_PREFIX)/$(SRCPREFIXDIR)/fpc-$(FPC_VERSION)/$(INSTALL_FPCSUBDIR)/$(PACKAGE_NAME)
else
INSTALL_SOURCEDIR:=$(INSTALL_PREFIX)/$(SRCPREFIXDIR)/fpc-$(FPC_VERSION)/$(PACKAGE_NAME)
endif
else
INSTALL_SOURCEDIR:=$(INSTALL_PREFIX)/$(SRCPREFIXDIR)/$(PACKAGE_NAME)-$(PACKAGE_VERSION)
endif
else
ifdef INSTALL_FPCPACKAGE
ifdef INSTALL_FPCSUBDIR
INSTALL_SOURCEDIR:=$(INSTALL_BASEDIR)/source/$(INSTALL_FPCSUBDIR)/$(PACKAGE_NAME)
else
INSTALL_SOURCEDIR:=$(INSTALL_BASEDIR)/source/$(PACKAGE_NAME)
endif
else
INSTALL_SOURCEDIR:=$(INSTALL_BASEDIR)/source
endif
endif
endif
ifndef INSTALL_DOCDIR
ifdef UNIXHier
ifdef BSDhier
DOCPREFIXDIR=share/doc
else
ifdef linuxHier
DOCPREFIXDIR=share/doc
else
DOCPREFIXDIR=doc
endif
endif
ifdef INSTALL_FPCPACKAGE
INSTALL_DOCDIR:=$(INSTALL_PREFIX)/$(DOCPREFIXDIR)/fpc-$(FPC_VERSION)/$(PACKAGE_NAME)
else
INSTALL_DOCDIR:=$(INSTALL_PREFIX)/$(DOCPREFIXDIR)/$(PACKAGE_NAME)-$(PACKAGE_VERSION)
endif
else
ifdef INSTALL_FPCPACKAGE
INSTALL_DOCDIR:=$(INSTALL_BASEDIR)/doc/$(PACKAGE_NAME)
else
INSTALL_DOCDIR:=$(INSTALL_BASEDIR)/doc
endif
endif
endif
ifndef INSTALL_EXAMPLEDIR
ifdef UNIXHier
ifdef INSTALL_FPCPACKAGE
ifdef BSDhier
INSTALL_EXAMPLEDIR:=$(INSTALL_PREFIX)/share/examples/fpc-$(FPC_VERSION)/$(PACKAGE_NAME)
else
ifdef linuxHier
INSTALL_EXAMPLEDIR:=$(INSTALL_DOCDIR)/examples
else
INSTALL_EXAMPLEDIR:=$(INSTALL_PREFIX)/doc/fpc-$(FPC_VERSION)/examples/$(PACKAGE_NAME)
endif
endif
else
ifdef BSDhier
INSTALL_EXAMPLEDIR:=$(INSTALL_PREFIX)/share/examples/$(PACKAGE_NAME)-$(PACKAGE_VERSION)
else
ifdef linuxHier
INSTALL_EXAMPLEDIR:=$(INSTALL_DOCDIR)/examples/$(PACKAGE_NAME)-$(PACKAGE_VERSION)
else
INSTALL_EXAMPLEDIR:=$(INSTALL_PREFIX)/doc/$(PACKAGE_NAME)-$(PACKAGE_VERSION)
endif
endif
endif
else
ifdef INSTALL_FPCPACKAGE
INSTALL_EXAMPLEDIR:=$(INSTALL_BASEDIR)/examples/$(PACKAGE_NAME)
else
INSTALL_EXAMPLEDIR:=$(INSTALL_BASEDIR)/examples
endif
endif
endif
ifndef INSTALL_DATADIR
INSTALL_DATADIR=$(INSTALL_BASEDIR)
endif
ifndef INSTALL_SHAREDDIR
INSTALL_SHAREDDIR=$(INSTALL_PREFIX)/lib
endif
ifdef CROSSCOMPILE
ifndef CROSSBINDIR
CROSSBINDIR:=$(wildcard $(CROSSTARGETDIR)/bin/$(SOURCESUFFIX))
ifeq ($(CROSSBINDIR),)
CROSSBINDIR:=$(wildcard $(INSTALL_BASEDIR)/cross/$(TARGETSUFFIX)/bin/$(FULL_SOURCE))
endif
endif
else
CROSSBINDIR=
endif
BATCHEXT=.bat
LOADEREXT=.as
EXEEXT=.exe
PPLEXT=.ppl
PPUEXT=.ppu
OEXT=.o
ASMEXT=.s
SMARTEXT=.sl
STATICLIBEXT=.a
SHAREDLIBEXT=.so
SHAREDLIBPREFIX=libfp
STATICLIBPREFIX=libp
IMPORTLIBPREFIX=libimp
RSTEXT=.rst
ifeq ($(findstring 1.0.,$(FPC_VERSION)),)
ifeq ($(OS_TARGET),go32v1)
STATICLIBPREFIX=
SHORTSUFFIX=v1
endif
ifeq ($(OS_TARGET),go32v2)
STATICLIBPREFIX=
SHORTSUFFIX=dos
endif
ifeq ($(OS_TARGET),watcom)
STATICLIBPREFIX=
OEXT=.obj
ASMEXT=.asm
SHAREDLIBEXT=.dll
SHORTSUFFIX=wat
endif
ifeq ($(OS_TARGET),linux)
BATCHEXT=.sh
EXEEXT=
HASSHAREDLIB=1
SHORTSUFFIX=lnx
endif
ifeq ($(OS_TARGET),freebsd)
BATCHEXT=.sh
EXEEXT=
HASSHAREDLIB=1
SHORTSUFFIX=fbs
endif
ifeq ($(OS_TARGET),netbsd)
BATCHEXT=.sh
EXEEXT=
HASSHAREDLIB=1
SHORTSUFFIX=nbs
endif
ifeq ($(OS_TARGET),openbsd)
BATCHEXT=.sh
EXEEXT=
HASSHAREDLIB=1
SHORTSUFFIX=obs
endif
ifeq ($(OS_TARGET),win32)
SHAREDLIBEXT=.dll
SHORTSUFFIX=w32
endif
ifeq ($(OS_TARGET),os2)
BATCHEXT=.cmd
AOUTEXT=.out
STATICLIBPREFIX=
SHAREDLIBEXT=.dll
SHORTSUFFIX=os2
ECHO=echo
endif
ifeq ($(OS_TARGET),emx)
BATCHEXT=.cmd
AOUTEXT=.out
STATICLIBPREFIX=
SHAREDLIBEXT=.dll
SHORTSUFFIX=emx
ECHO=echo
endif
ifeq ($(OS_TARGET),amiga)
EXEEXT=
SHAREDLIBEXT=.library
SHORTSUFFIX=amg
endif
ifeq ($(OS_TARGET),morphos)
EXEEXT=
SHAREDLIBEXT=.library
SHORTSUFFIX=mos
endif
ifeq ($(OS_TARGET),atari)
EXEEXT=.ttp
SHORTSUFFIX=ata
endif
ifeq ($(OS_TARGET),beos)
BATCHEXT=.sh
EXEEXT=
SHORTSUFFIX=be
endif
ifeq ($(OS_TARGET),solaris)
BATCHEXT=.sh
EXEEXT=
SHORTSUFFIX=sun
endif
ifeq ($(OS_TARGET),qnx)
BATCHEXT=.sh
EXEEXT=
SHORTSUFFIX=qnx
endif
ifeq ($(OS_TARGET),netware)
EXEEXT=.nlm
STATICLIBPREFIX=
SHORTSUFFIX=nw
endif
ifeq ($(OS_TARGET),netwlibc)
EXEEXT=.nlm
STATICLIBPREFIX=
SHORTSUFFIX=nwl
endif
ifeq ($(OS_TARGET),macos)
BATCHEXT=
EXEEXT=
DEBUGSYMEXT=.xcoff
SHORTSUFFIX=mac
endif
ifeq ($(OS_TARGET),darwin)
BATCHEXT=.sh
EXEEXT=
HASSHAREDLIB=1
SHORTSUFFIX=dwn
endif
ifeq ($(OS_TARGET),gba)
EXEEXT=.gba
SHAREDLIBEXT=.so
SHORTSUFFIX=gba
endif
ifeq ($(OS_TARGET),symbian)
SHAREDLIBEXT=.dll
SHORTSUFFIX=symbian
endif
else
ifeq ($(OS_TARGET),go32v1)
PPUEXT=.pp1
OEXT=.o1
ASMEXT=.s1
SMARTEXT=.sl1
STATICLIBEXT=.a1
SHAREDLIBEXT=.so1
STATICLIBPREFIX=
SHORTSUFFIX=v1
endif
ifeq ($(OS_TARGET),go32v2)
STATICLIBPREFIX=
SHORTSUFFIX=dos
endif
ifeq ($(OS_TARGET),watcom)
STATICLIBPREFIX=
SHORTSUFFIX=wat
endif
ifeq ($(OS_TARGET),linux)
BATCHEXT=.sh
EXEEXT=
HASSHAREDLIB=1
SHORTSUFFIX=lnx
endif
ifeq ($(OS_TARGET),freebsd)
BATCHEXT=.sh
EXEEXT=
HASSHAREDLIB=1
SHORTSUFFIX=fbs
endif
ifeq ($(OS_TARGET),netbsd)
BATCHEXT=.sh
EXEEXT=
HASSHAREDLIB=1
SHORTSUFFIX=nbs
endif
ifeq ($(OS_TARGET),openbsd)
BATCHEXT=.sh
EXEEXT=
HASSHAREDLIB=1
SHORTSUFFIX=obs
endif
ifeq ($(OS_TARGET),win32)
PPUEXT=.ppw
OEXT=.ow
ASMEXT=.sw
SMARTEXT=.slw
STATICLIBEXT=.aw
SHAREDLIBEXT=.dll
SHORTSUFFIX=w32
endif
ifeq ($(OS_TARGET),os2)
BATCHEXT=.cmd
PPUEXT=.ppo
ASMEXT=.so2
OEXT=.oo2
AOUTEXT=.out
SMARTEXT=.sl2
STATICLIBPREFIX=
STATICLIBEXT=.ao2
SHAREDLIBEXT=.dll
SHORTSUFFIX=os2
ECHO=echo
endif
ifeq ($(OS_TARGET),amiga)
EXEEXT=
PPUEXT=.ppu
ASMEXT=.s
OEXT=.o
SMARTEXT=.sl
STATICLIBEXT=.a
SHAREDLIBEXT=.library
SHORTSUFFIX=amg
endif
ifeq ($(OS_TARGET),atari)
PPUEXT=.ppu
ASMEXT=.s
OEXT=.o
SMARTEXT=.sl
STATICLIBEXT=.a
EXEEXT=.ttp
SHORTSUFFIX=ata
endif
ifeq ($(OS_TARGET),beos)
BATCHEXT=.sh
PPUEXT=.ppu
ASMEXT=.s
OEXT=.o
SMARTEXT=.sl
STATICLIBEXT=.a
EXEEXT=
SHORTSUFFIX=be
endif
ifeq ($(OS_TARGET),solaris)
BATCHEXT=.sh
PPUEXT=.ppu
ASMEXT=.s
OEXT=.o
SMARTEXT=.sl
STATICLIBEXT=.a
EXEEXT=
SHORTSUFFIX=sun
endif
ifeq ($(OS_TARGET),qnx)
BATCHEXT=.sh
PPUEXT=.ppu
ASMEXT=.s
OEXT=.o
SMARTEXT=.sl
STATICLIBEXT=.a
EXEEXT=
SHORTSUFFIX=qnx
endif
ifeq ($(OS_TARGET),netware)
STATICLIBPREFIX=
PPUEXT=.ppu
OEXT=.o
ASMEXT=.s
SMARTEXT=.sl
STATICLIBEXT=.a
SHAREDLIBEXT=.nlm
EXEEXT=.nlm
SHORTSUFFIX=nw
endif
ifeq ($(OS_TARGET),netwlibc)
STATICLIBPREFIX=
PPUEXT=.ppu
OEXT=.o
ASMEXT=.s
SMARTEXT=.sl
STATICLIBEXT=.a
SHAREDLIBEXT=.nlm
EXEEXT=.nlm
SHORTSUFFIX=nwl
endif
ifeq ($(OS_TARGET),macos)
BATCHEXT=
PPUEXT=.ppu
ASMEXT=.s
OEXT=.o
SMARTEXT=.sl
STATICLIBEXT=.a
EXEEXT=
DEBUGSYMEXT=.xcoff
SHORTSUFFIX=mac
endif
endif
ifneq ($(findstring $(OS_SOURCE),$(LIMIT83fs)),)
FPCMADE=fpcmade.$(SHORTSUFFIX)
ZIPSUFFIX=$(SHORTSUFFIX)
ZIPCROSSPREFIX=
ZIPSOURCESUFFIX=src
ZIPEXAMPLESUFFIX=exm
else
FPCMADE=fpcmade.$(TARGETSUFFIX)
ZIPSOURCESUFFIX=.source
ZIPEXAMPLESUFFIX=.examples
ifdef CROSSCOMPILE
ZIPSUFFIX=.$(SOURCESUFFIX)
ZIPCROSSPREFIX=$(TARGETSUFFIX)-
else
ZIPSUFFIX=.$(TARGETSUFFIX)
ZIPCROSSPREFIX=
endif
endif
ifndef ECHO
ECHO:=$(strip $(wildcard $(addsuffix /gecho$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(ECHO),)
ECHO:=$(strip $(wildcard $(addsuffix /echo$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(ECHO),)
ECHO= __missing_command_ECHO
else
ECHO:=$(firstword $(ECHO))
endif
else
ECHO:=$(firstword $(ECHO))
endif
endif
export ECHO
ifndef DATE
DATE:=$(strip $(wildcard $(addsuffix /gdate$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(DATE),)
DATE:=$(strip $(wildcard $(addsuffix /date$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(DATE),)
DATE= __missing_command_DATE
else
DATE:=$(firstword $(DATE))
endif
else
DATE:=$(firstword $(DATE))
endif
endif
export DATE
ifndef GINSTALL
GINSTALL:=$(strip $(wildcard $(addsuffix /ginstall$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(GINSTALL),)
GINSTALL:=$(strip $(wildcard $(addsuffix /install$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(GINSTALL),)
GINSTALL= __missing_command_GINSTALL
else
GINSTALL:=$(firstword $(GINSTALL))
endif
else
GINSTALL:=$(firstword $(GINSTALL))
endif
endif
export GINSTALL
ifndef CPPROG
CPPROG:=$(strip $(wildcard $(addsuffix /cp$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(CPPROG),)
CPPROG= __missing_command_CPPROG
else
CPPROG:=$(firstword $(CPPROG))
endif
endif
export CPPROG
ifndef RMPROG
RMPROG:=$(strip $(wildcard $(addsuffix /rm$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(RMPROG),)
RMPROG= __missing_command_RMPROG
else
RMPROG:=$(firstword $(RMPROG))
endif
endif
export RMPROG
ifndef MVPROG
MVPROG:=$(strip $(wildcard $(addsuffix /mv$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(MVPROG),)
MVPROG= __missing_command_MVPROG
else
MVPROG:=$(firstword $(MVPROG))
endif
endif
export MVPROG
ifndef MKDIRPROG
MKDIRPROG:=$(strip $(wildcard $(addsuffix /gmkdir$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(MKDIRPROG),)
MKDIRPROG:=$(strip $(wildcard $(addsuffix /mkdir$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(MKDIRPROG),)
MKDIRPROG= __missing_command_MKDIRPROG
else
MKDIRPROG:=$(firstword $(MKDIRPROG))
endif
else
MKDIRPROG:=$(firstword $(MKDIRPROG))
endif
endif
export MKDIRPROG
ifndef ECHOREDIR
ifndef inUnix
ECHOREDIR=echo
else
ECHOREDIR=$(ECHO)
endif
endif
ifndef COPY
COPY:=$(CPPROG) -fp
endif
ifndef COPYTREE
COPYTREE:=$(CPPROG) -Rfp
endif
ifndef MKDIRTREE
MKDIRTREE:=$(MKDIRPROG) -p
endif
ifndef MOVE
MOVE:=$(MVPROG) -f
endif
ifndef DEL
DEL:=$(RMPROG) -f
endif
ifndef DELTREE
DELTREE:=$(RMPROG) -rf
endif
ifndef INSTALL
ifdef inUnix
INSTALL:=$(GINSTALL) -c -m 644
else
INSTALL:=$(COPY)
endif
endif
ifndef INSTALLEXE
ifdef inUnix
INSTALLEXE:=$(GINSTALL) -c -m 755
else
INSTALLEXE:=$(COPY)
endif
endif
ifndef MKDIR
MKDIR:=$(GINSTALL) -m 755 -d
endif
export ECHOREDIR COPY COPYTREE MOVE DEL DELTREE INSTALL INSTALLEXE MKDIR
ifndef PPUMOVE
PPUMOVE:=$(strip $(wildcard $(addsuffix /ppumove$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(PPUMOVE),)
PPUMOVE= __missing_command_PPUMOVE
else
PPUMOVE:=$(firstword $(PPUMOVE))
endif
endif
export PPUMOVE
ifndef FPCMAKE
FPCMAKE:=$(strip $(wildcard $(addsuffix /fpcmake$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(FPCMAKE),)
FPCMAKE= __missing_command_FPCMAKE
else
FPCMAKE:=$(firstword $(FPCMAKE))
endif
endif
export FPCMAKE
ifndef ZIPPROG
ZIPPROG:=$(strip $(wildcard $(addsuffix /zip$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(ZIPPROG),)
ZIPPROG= __missing_command_ZIPPROG
else
ZIPPROG:=$(firstword $(ZIPPROG))
endif
endif
export ZIPPROG
ifndef TARPROG
TARPROG:=$(strip $(wildcard $(addsuffix /gtar$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(TARPROG),)
TARPROG:=$(strip $(wildcard $(addsuffix /tar$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(TARPROG),)
TARPROG= __missing_command_TARPROG
else
TARPROG:=$(firstword $(TARPROG))
endif
else
TARPROG:=$(firstword $(TARPROG))
endif
endif
export TARPROG
ASNAME=$(BINUTILSPREFIX)as
LDNAME=$(BINUTILSPREFIX)ld
ARNAME=$(BINUTILSPREFIX)ar
RCNAME=$(BINUTILSPREFIX)rc
ifneq ($(findstring 1.0.,$(FPC_VERSION)),)
ifeq ($(OS_TARGET),win32)
ifeq ($(CROSSBINDIR),)
ASNAME=asw
LDNAME=ldw
ARNAME=arw
endif
endif
endif
ifndef ASPROG
ifdef CROSSBINDIR
ASPROG=$(CROSSBINDIR)/$(ASNAME)$(SRCEXEEXT)
else
ASPROG=$(ASNAME)
endif
endif
ifndef LDPROG
ifdef CROSSBINDIR
LDPROG=$(CROSSBINDIR)/$(LDNAME)$(SRCEXEEXT)
else
LDPROG=$(LDNAME)
endif
endif
ifndef RCPROG
ifdef CROSSBINDIR
RCPROG=$(CROSSBINDIR)/$(RCNAME)$(SRCEXEEXT)
else
RCPROG=$(RCNAME)
endif
endif
ifndef ARPROG
ifdef CROSSBINDIR
ARPROG=$(CROSSBINDIR)/$(ARNAME)$(SRCEXEEXT)
else
ARPROG=$(ARNAME)
endif
endif
AS=$(ASPROG)
LD=$(LDPROG)
RC=$(RCPROG)
AR=$(ARPROG)
PPAS=ppas$(SRCBATCHEXT)
ifdef inUnix
LDCONFIG=ldconfig
else
LDCONFIG=
endif
ifdef DATE
DATESTR:=$(shell $(DATE) +%Y%m%d)
else
DATESTR=
endif
ifndef UPXPROG
ifeq ($(OS_TARGET),go32v2)
UPXPROG:=1
endif
ifeq ($(OS_TARGET),win32)
UPXPROG:=1
endif
ifdef UPXPROG
UPXPROG:=$(strip $(wildcard $(addsuffix /upx$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(UPXPROG),)
UPXPROG=
else
UPXPROG:=$(firstword $(UPXPROG))
endif
else
UPXPROG=
endif
endif
export UPXPROG
ZIPOPT=-9
ZIPEXT=.zip
ifeq ($(USETAR),bz2)
TAROPT=vj
TAREXT=.tar.bz2
else
TAROPT=vz
TAREXT=.tar.gz
endif
ifndef NOCPUDEF
override FPCOPTDEF=$(CPU_TARGET)
endif
ifneq ($(OS_TARGET),$(OS_SOURCE))
override FPCOPT+=-T$(OS_TARGET)
endif
ifneq ($(CPU_TARGET),$(CPU_SOURCE))
override FPCOPT+=-P$(CPU_TARGET)
endif
ifeq ($(OS_SOURCE),openbsd)
override FPCOPT+=-FD$(NEW_BINUTILS_PATH)
endif
ifndef CROSSBOOTSTRAP
ifneq ($(BINUTILSPREFIX),)
override FPCOPT+=-XP$(BINUTILSPREFIX) 
endif
ifneq ($(BINUTILSPREFIX),)
override FPCOPT+=-Xr$(RLINKPATH)
endif
endif
ifdef UNITDIR
override FPCOPT+=$(addprefix -Fu,$(UNITDIR))
endif
ifdef LIBDIR
override FPCOPT+=$(addprefix -Fl,$(LIBDIR))
endif
ifdef OBJDIR
override FPCOPT+=$(addprefix -Fo,$(OBJDIR))
endif
ifdef INCDIR
override FPCOPT+=$(addprefix -Fi,$(INCDIR))
endif
ifdef LINKSMART
override FPCOPT+=-XX
endif
ifdef CREATESMART
override FPCOPT+=-CX
endif
ifdef DEBUG
override FPCOPT+=-gl
override FPCOPTDEF+=DEBUG
endif
ifdef RELEASE
ifneq ($(findstring 2.0.,$(FPC_VERSION)),)
ifeq ($(CPU_TARGET),i386)
FPCCPUOPT:=-OG2p3
endif
ifeq ($(CPU_TARGET),powerpc)
FPCCPUOPT:=-O1r
endif
else
FPCCPUOPT:=-O2
endif
override FPCOPT+=-Ur -Xs $(FPCCPUOPT) -n
override FPCOPTDEF+=RELEASE
endif
ifdef STRIP
override FPCOPT+=-Xs
endif
ifdef OPTIMIZE
override FPCOPT+=-O2
endif
ifdef VERBOSE
override FPCOPT+=-vwni
endif
ifdef COMPILER_OPTIONS
override FPCOPT+=$(COMPILER_OPTIONS)
endif
ifdef COMPILER_UNITDIR
override FPCOPT+=$(addprefix -Fu,$(COMPILER_UNITDIR))
endif
ifdef COMPILER_LIBRARYDIR
override FPCOPT+=$(addprefix -Fl,$(COMPILER_LIBRARYDIR))
endif
ifdef COMPILER_OBJECTDIR
override FPCOPT+=$(addprefix -Fo,$(COMPILER_OBJECTDIR))
endif
ifdef COMPILER_INCLUDEDIR
override FPCOPT+=$(addprefix -Fi,$(COMPILER_INCLUDEDIR))
endif
ifdef CROSSBINDIR
override FPCOPT+=-FD$(CROSSBINDIR)
endif
ifdef COMPILER_TARGETDIR
override FPCOPT+=-FE$(COMPILER_TARGETDIR)
ifeq ($(COMPILER_TARGETDIR),.)
override TARGETDIRPREFIX=
else
override TARGETDIRPREFIX=$(COMPILER_TARGETDIR)/
endif
endif
ifdef COMPILER_UNITTARGETDIR
override FPCOPT+=-FU$(COMPILER_UNITTARGETDIR)
ifeq ($(COMPILER_UNITTARGETDIR),.)
override UNITTARGETDIRPREFIX=
else
override UNITTARGETDIRPREFIX=$(COMPILER_UNITTARGETDIR)/
endif
else
ifdef COMPILER_TARGETDIR
override COMPILER_UNITTARGETDIR=$(COMPILER_TARGETDIR)
override UNITTARGETDIRPREFIX=$(TARGETDIRPREFIX)
endif
endif
ifdef CREATESHARED
override FPCOPT+=-Cg
ifeq ($(CPU_TARGET),i386)
override FPCOPT+=-Aas
endif
endif
ifeq ($(findstring 2.0.,$(FPC_VERSION)),)
ifeq ($(OS_TARGET),linux)
ifeq ($(CPU_TARGET),x86_64)
override FPCOPT+=-Cg
endif
endif
endif
ifdef LINKSHARED
endif
ifdef OPT
override FPCOPT+=$(OPT)
endif
ifdef FPCOPTDEF
override FPCOPT+=$(addprefix -d,$(FPCOPTDEF))
endif
ifdef CFGFILE
override FPCOPT+=@$(CFGFILE)
endif
ifdef USEENV
override FPCEXTCMD:=$(FPCOPT)
override FPCOPT:=!FPCEXTCMD
export FPCEXTCMD
endif
override AFULL_TARGET=$(CPU_TARGET)-$(OS_TARGET)
override AFULL_SOURCE=$(CPU_SOURCE)-$(OS_SOURCE)
ifneq ($(AFULL_TARGET),$(AFULL_SOURCE))
override ACROSSCOMPILE=1
endif
ifdef ACROSSCOMPILE
override FPCOPT+=$(CROSSOPT)
endif
override COMPILER:=$(FPC) $(FPCOPT)
ifeq (,$(findstring -s ,$(COMPILER)))
EXECPPAS=
else
ifeq ($(FULL_SOURCE),$(FULL_TARGET))
EXECPPAS:=@$(PPAS)
endif
endif
ifdef TARGET_RSTS
override RSTFILES=$(addsuffix $(RSTEXT),$(TARGET_RSTS))
override CLEANRSTFILES+=$(RSTFILES)
endif
.PHONY: fpc_clean fpc_cleanall fpc_distclean
ifdef EXEFILES
override CLEANEXEFILES:=$(addprefix $(TARGETDIRPREFIX),$(CLEANEXEFILES))
endif
ifdef CLEAN_UNITS
override CLEANPPUFILES+=$(addsuffix $(PPUEXT),$(CLEAN_UNITS))
endif
ifdef CLEANPPUFILES
override CLEANPPULINKFILES:=$(subst $(PPUEXT),$(OEXT),$(CLEANPPUFILES)) $(addprefix $(STATICLIBPREFIX),$(subst $(PPUEXT),$(STATICLIBEXT),$(CLEANPPUFILES))) $(addprefix $(IMPORTLIBPREFIX),$(subst $(PPUEXT),$(STATICLIBEXT),$(CLEANPPUFILES)))
ifdef DEBUGSYMEXT
override CLEANPPULINKFILES+=$(subst $(PPUEXT),$(DEBUGSYMEXT),$(CLEANPPUFILES))
endif
override CLEANPPUFILES:=$(addprefix $(UNITTARGETDIRPREFIX),$(CLEANPPUFILES))
override CLEANPPULINKFILES:=$(wildcard $(addprefix $(UNITTARGETDIRPREFIX),$(CLEANPPULINKFILES)))
endif
fpc_clean: $(CLEANTARGET)
ifdef CLEANEXEFILES
	-$(DEL) $(CLEANEXEFILES)
endif
ifdef CLEANPPUFILES
	-$(DEL) $(CLEANPPUFILES)
endif
ifneq ($(CLEANPPULINKFILES),)
	-$(DEL) $(CLEANPPULINKFILES)
endif
ifdef CLEANRSTFILES
	-$(DEL) $(addprefix $(UNITTARGETDIRPREFIX),$(CLEANRSTFILES))
endif
ifdef CLEAN_FILES
	-$(DEL) $(CLEAN_FILES)
endif
ifdef LIB_NAME
	-$(DEL) $(LIB_NAME) $(LIB_FULLNAME)
endif
	-$(DEL) $(FPCMADE) Package.fpc $(PPAS) script.res link.res $(FPCEXTFILE) $(REDIRFILE)
	-$(DEL) *$(ASMEXT) *_ppas$(BATCHEXT)
fpc_cleanall: $(CLEANTARGET)
ifdef CLEANEXEFILES
	-$(DEL) $(CLEANEXEFILES)
endif
ifdef COMPILER_UNITTARGETDIR
ifdef CLEANPPUFILES
	-$(DEL) $(CLEANPPUFILES)
endif
ifneq ($(CLEANPPULINKFILES),)
	-$(DEL) $(CLEANPPULINKFILES)
endif
ifdef CLEANRSTFILES
	-$(DEL) $(addprefix $(UNITTARGETDIRPREFIX),$(CLEANRSTFILES))
endif
endif
	-$(DELTREE) units
	-$(DEL) *$(OEXT) *$(PPUEXT) *$(RSTEXT) *$(ASMEXT) *$(STATICLIBEXT) *$(SHAREDLIBEXT) *$(PPLEXT)
ifneq ($(PPUEXT),.ppu)
	-$(DEL) *.o *.ppu *.a
endif
	-$(DELTREE) *$(SMARTEXT)
	-$(DEL) fpcmade.* Package.fpc $(PPAS) script.res link.res $(FPCEXTFILE) $(REDIRFILE)
	-$(DEL) *_ppas$(BATCHEXT)
ifdef AOUTEXT
	-$(DEL) *$(AOUTEXT)
endif
ifdef DEBUGSYMEXT
	-$(DEL) *$(DEBUGSYMEXT)
endif
fpc_distclean: cleanall
.PHONY: fpc_baseinfo
override INFORULES+=fpc_baseinfo
fpc_baseinfo:
	@$(ECHO)
	@$(ECHO)  == Package info ==
	@$(ECHO)  Package Name..... $(PACKAGE_NAME)
	@$(ECHO)  Package Version.. $(PACKAGE_VERSION)
	@$(ECHO)
	@$(ECHO)  == Configuration info ==
	@$(ECHO)
	@$(ECHO)  FPC.......... $(FPC)
	@$(ECHO)  FPC Version.. $(FPC_VERSION)
	@$(ECHO)  Source CPU... $(CPU_SOURCE)
	@$(ECHO)  Target CPU... $(CPU_TARGET)
	@$(ECHO)  Source OS.... $(OS_SOURCE)
	@$(ECHO)  Target OS.... $(OS_TARGET)
	@$(ECHO)  Full Source.. $(FULL_SOURCE)
	@$(ECHO)  Full Target.. $(FULL_TARGET)
	@$(ECHO)  SourceSuffix. $(SOURCESUFFIX)
	@$(ECHO)  TargetSuffix. $(TARGETSUFFIX)
	@$(ECHO)
	@$(ECHO)  == Directory info ==
	@$(ECHO)
	@$(ECHO)  Required pkgs... $(REQUIRE_PACKAGES)
	@$(ECHO)
	@$(ECHO)  Basedir......... $(BASEDIR)
	@$(ECHO)  FPCDir.......... $(FPCDIR)
	@$(ECHO)  CrossBinDir..... $(CROSSBINDIR)
	@$(ECHO)  UnitsDir........ $(UNITSDIR)
	@$(ECHO)  PackagesDir..... $(PACKAGESDIR)
	@$(ECHO)
	@$(ECHO)  GCC library..... $(GCCLIBDIR)
	@$(ECHO)  Other library... $(OTHERLIBDIR)
	@$(ECHO)
	@$(ECHO)  == Tools info ==
	@$(ECHO)
	@$(ECHO)  As........ $(AS)
	@$(ECHO)  Ld........ $(LD)
	@$(ECHO)  Ar........ $(AR)
	@$(ECHO)  Rc........ $(RC)
	@$(ECHO)
	@$(ECHO)  Mv........ $(MVPROG)
	@$(ECHO)  Cp........ $(CPPROG)
	@$(ECHO)  Rm........ $(RMPROG)
	@$(ECHO)  GInstall.. $(GINSTALL)
	@$(ECHO)  Echo...... $(ECHO)
	@$(ECHO)  Shell..... $(SHELL)
	@$(ECHO)  Date...... $(DATE)
	@$(ECHO)  FPCMake... $(FPCMAKE)
	@$(ECHO)  PPUMove... $(PPUMOVE)
	@$(ECHO)  Upx....... $(UPXPROG)
	@$(ECHO)  Zip....... $(ZIPPROG)
	@$(ECHO)
	@$(ECHO)  == Object info ==
	@$(ECHO)
	@$(ECHO)  Target Loaders........ $(TARGET_LOADERS)
	@$(ECHO)  Target Units.......... $(TARGET_UNITS)
	@$(ECHO)  Target Implicit Units. $(TARGET_IMPLICITUNITS)
	@$(ECHO)  Target Programs....... $(TARGET_PROGRAMS)
	@$(ECHO)  Target Dirs........... $(TARGET_DIRS)
	@$(ECHO)  Target Examples....... $(TARGET_EXAMPLES)
	@$(ECHO)  Target ExampleDirs.... $(TARGET_EXAMPLEDIRS)
	@$(ECHO)
	@$(ECHO)  Clean Units......... $(CLEAN_UNITS)
	@$(ECHO)  Clean Files......... $(CLEAN_FILES)
	@$(ECHO)
	@$(ECHO)  Install Units....... $(INSTALL_UNITS)
	@$(ECHO)  Install Files....... $(INSTALL_FILES)
	@$(ECHO)
	@$(ECHO)  == Install info ==
	@$(ECHO)
	@$(ECHO)  DateStr.............. $(DATESTR)
	@$(ECHO)  ZipName.............. $(ZIPNAME)
	@$(ECHO)  ZipPrefix............ $(ZIPPREFIX)
	@$(ECHO)  ZipCrossPrefix....... $(ZIPCROSSPREFIX)
	@$(ECHO)  ZipSuffix............ $(ZIPSUFFIX)
	@$(ECHO)  FullZipName.......... $(FULLZIPNAME)
	@$(ECHO)  Install FPC Package.. $(INSTALL_FPCPACKAGE)
	@$(ECHO)
	@$(ECHO)  Install base dir..... $(INSTALL_BASEDIR)
	@$(ECHO)  Install binary dir... $(INSTALL_BINDIR)
	@$(ECHO)  Install library dir.. $(INSTALL_LIBDIR)
	@$(ECHO)  Install units dir.... $(INSTALL_UNITDIR)
	@$(ECHO)  Install source dir... $(INSTALL_SOURCEDIR)
	@$(ECHO)  Install doc dir...... $(INSTALL_DOCDIR)
	@$(ECHO)  Install example dir.. $(INSTALL_EXAMPLEDIR)
	@$(ECHO)  Install data dir..... $(INSTALL_DATADIR)
	@$(ECHO)
	@$(ECHO)  Dist destination dir. $(DIST_DESTDIR)
	@$(ECHO)  Dist zip name........ $(DIST_ZIPNAME)
	@$(ECHO)
.PHONY: fpc_info
fpc_info: $(INFORULES)
.PHONY: fpc_makefile fpc_makefiles fpc_makefile_sub1 fpc_makefile_sub2 \
	fpc_makefile_dirs
fpc_makefile:
	$(FPCMAKE) -w -T$(OS_TARGET) Makefile.fpc
fpc_makefile_sub1:
ifdef TARGET_DIRS
	$(FPCMAKE) -w -T$(OS_TARGET) $(addsuffix /Makefile.fpc,$(TARGET_DIRS))
endif
ifdef TARGET_EXAMPLEDIRS
	$(FPCMAKE) -w -T$(OS_TARGET) $(addsuffix /Makefile.fpc,$(TARGET_EXAMPLEDIRS))
endif
fpc_makefile_sub2: $(addsuffix _makefile_dirs,$(TARGET_DIRS) $(TARGET_EXAMPLEDIRS))
fpc_makefile_dirs: fpc_makefile_sub1 fpc_makefile_sub2
fpc_makefiles: fpc_makefile fpc_makefile_dirs
ifeq ($(FULL_TARGET),i386-linux)
TARGET_DIRS_BASE=1
TARGET_DIRS_FPMKUNIT=1
TARGET_DIRS_FCL-BASE=1
TARGET_DIRS_FCL-DB=1
TARGET_DIRS_FCL-IMAGE=1
TARGET_DIRS_FCL-NET=1
TARGET_DIRS_FCL-PASSRC=1
TARGET_DIRS_FCL-REGISTRY=1
TARGET_DIRS_FCL-XML=1
TARGET_DIRS_FCL-FPCUNIT=1
TARGET_DIRS_EXTRA=1
TARGET_DIRS_FCL-WEB=1
endif
ifeq ($(FULL_TARGET),i386-go32v2)
TARGET_DIRS_BASE=1
TARGET_DIRS_FPMKUNIT=1
TARGET_DIRS_FCL-BASE=1
TARGET_DIRS_FCL-DB=1
TARGET_DIRS_FCL-IMAGE=1
TARGET_DIRS_FCL-NET=1
TARGET_DIRS_FCL-PASSRC=1
TARGET_DIRS_FCL-REGISTRY=1
TARGET_DIRS_FCL-XML=1
TARGET_DIRS_FCL-FPCUNIT=1
TARGET_DIRS_EXTRA=1
endif
ifeq ($(FULL_TARGET),i386-win32)
TARGET_DIRS_BASE=1
TARGET_DIRS_FPMKUNIT=1
TARGET_DIRS_FCL-BASE=1
TARGET_DIRS_FCL-DB=1
TARGET_DIRS_FCL-IMAGE=1
TARGET_DIRS_FCL-NET=1
TARGET_DIRS_FCL-PASSRC=1
TARGET_DIRS_FCL-REGISTRY=1
TARGET_DIRS_FCL-XML=1
TARGET_DIRS_FCL-FPCUNIT=1
TARGET_DIRS_EXTRA=1
TARGET_DIRS_FCL-WEB=1
endif
ifeq ($(FULL_TARGET),i386-os2)
TARGET_DIRS_BASE=1
TARGET_DIRS_FPMKUNIT=1
TARGET_DIRS_FCL-BASE=1
TARGET_DIRS_FCL-DB=1
TARGET_DIRS_FCL-IMAGE=1
TARGET_DIRS_FCL-NET=1
TARGET_DIRS_FCL-PASSRC=1
TARGET_DIRS_FCL-REGISTRY=1
TARGET_DIRS_FCL-XML=1
TARGET_DIRS_FCL-FPCUNIT=1
TARGET_DIRS_EXTRA=1
endif
ifeq ($(FULL_TARGET),i386-freebsd)
TARGET_DIRS_BASE=1
TARGET_DIRS_FPMKUNIT=1
TARGET_DIRS_FCL-BASE=1
TARGET_DIRS_FCL-DB=1
TARGET_DIRS_FCL-IMAGE=1
TARGET_DIRS_FCL-NET=1
TARGET_DIRS_FCL-PASSRC=1
TARGET_DIRS_FCL-REGISTRY=1
TARGET_DIRS_FCL-XML=1
TARGET_DIRS_FCL-FPCUNIT=1
TARGET_DIRS_EXTRA=1
TARGET_DIRS_FCL-WEB=1
endif
ifeq ($(FULL_TARGET),i386-beos)
TARGET_DIRS_BASE=1
TARGET_DIRS_FPMKUNIT=1
TARGET_DIRS_FCL-BASE=1
TARGET_DIRS_FCL-DB=1
TARGET_DIRS_FCL-IMAGE=1
TARGET_DIRS_FCL-NET=1
TARGET_DIRS_FCL-PASSRC=1
TARGET_DIRS_FCL-REGISTRY=1
TARGET_DIRS_FCL-XML=1
TARGET_DIRS_FCL-FPCUNIT=1
TARGET_DIRS_EXTRA=1
endif
ifeq ($(FULL_TARGET),i386-netbsd)
TARGET_DIRS_BASE=1
TARGET_DIRS_FPMKUNIT=1
TARGET_DIRS_FCL-BASE=1
TARGET_DIRS_FCL-DB=1
TARGET_DIRS_FCL-IMAGE=1
TARGET_DIRS_FCL-NET=1
TARGET_DIRS_FCL-PASSRC=1
TARGET_DIRS_FCL-REGISTRY=1
TARGET_DIRS_FCL-XML=1
TARGET_DIRS_FCL-FPCUNIT=1
TARGET_DIRS_EXTRA=1
TARGET_DIRS_FCL-WEB=1
endif
ifeq ($(FULL_TARGET),i386-solaris)
TARGET_DIRS_BASE=1
TARGET_DIRS_FPMKUNIT=1
TARGET_DIRS_FCL-BASE=1
TARGET_DIRS_FCL-DB=1
TARGET_DIRS_FCL-IMAGE=1
TARGET_DIRS_FCL-NET=1
TARGET_DIRS_FCL-PASSRC=1
TARGET_DIRS_FCL-REGISTRY=1
TARGET_DIRS_FCL-XML=1
TARGET_DIRS_FCL-FPCUNIT=1
TARGET_DIRS_EXTRA=1
TARGET_DIRS_FCL-WEB=1
endif
ifeq ($(FULL_TARGET),i386-qnx)
TARGET_DIRS_BASE=1
TARGET_DIRS_FPMKUNIT=1
TARGET_DIRS_FCL-BASE=1
TARGET_DIRS_FCL-DB=1
TARGET_DIRS_FCL-IMAGE=1
TARGET_DIRS_FCL-NET=1
TARGET_DIRS_FCL-PASSRC=1
TARGET_DIRS_FCL-REGISTRY=1
TARGET_DIRS_FCL-XML=1
TARGET_DIRS_FCL-FPCUNIT=1
TARGET_DIRS_EXTRA=1
endif
ifeq ($(FULL_TARGET),i386-netware)
TARGET_DIRS_BASE=1
TARGET_DIRS_FPMKUNIT=1
TARGET_DIRS_FCL-BASE=1
TARGET_DIRS_FCL-DB=1
TARGET_DIRS_FCL-IMAGE=1
TARGET_DIRS_FCL-NET=1
TARGET_DIRS_FCL-PASSRC=1
TARGET_DIRS_FCL-REGISTRY=1
TARGET_DIRS_FCL-XML=1
TARGET_DIRS_FCL-FPCUNIT=1
TARGET_DIRS_EXTRA=1
endif
ifeq ($(FULL_TARGET),i386-openbsd)
TARGET_DIRS_BASE=1
TARGET_DIRS_FPMKUNIT=1
TARGET_DIRS_FCL-BASE=1
TARGET_DIRS_FCL-DB=1
TARGET_DIRS_FCL-IMAGE=1
TARGET_DIRS_FCL-NET=1
TARGET_DIRS_FCL-PASSRC=1
TARGET_DIRS_FCL-REGISTRY=1
TARGET_DIRS_FCL-XML=1
TARGET_DIRS_FCL-FPCUNIT=1
TARGET_DIRS_EXTRA=1
TARGET_DIRS_FCL-WEB=1
endif
ifeq ($(FULL_TARGET),i386-wdosx)
TARGET_DIRS_BASE=1
TARGET_DIRS_FPMKUNIT=1
TARGET_DIRS_FCL-BASE=1
TARGET_DIRS_FCL-DB=1
TARGET_DIRS_FCL-IMAGE=1
TARGET_DIRS_FCL-NET=1
TARGET_DIRS_FCL-PASSRC=1
TARGET_DIRS_FCL-REGISTRY=1
TARGET_DIRS_FCL-XML=1
TARGET_DIRS_FCL-FPCUNIT=1
TARGET_DIRS_EXTRA=1
endif
ifeq ($(FULL_TARGET),i386-darwin)
TARGET_DIRS_BASE=1
TARGET_DIRS_FPMKUNIT=1
TARGET_DIRS_FCL-BASE=1
TARGET_DIRS_FCL-DB=1
TARGET_DIRS_FCL-IMAGE=1
TARGET_DIRS_FCL-NET=1
TARGET_DIRS_FCL-PASSRC=1
TARGET_DIRS_FCL-REGISTRY=1
TARGET_DIRS_FCL-XML=1
TARGET_DIRS_FCL-FPCUNIT=1
TARGET_DIRS_EXTRA=1
TARGET_DIRS_FCL-WEB=1
endif
ifeq ($(FULL_TARGET),i386-emx)
TARGET_DIRS_BASE=1
TARGET_DIRS_FPMKUNIT=1
TARGET_DIRS_FCL-BASE=1
TARGET_DIRS_FCL-DB=1
TARGET_DIRS_FCL-IMAGE=1
TARGET_DIRS_FCL-NET=1
TARGET_DIRS_FCL-PASSRC=1
TARGET_DIRS_FCL-REGISTRY=1
TARGET_DIRS_FCL-XML=1
TARGET_DIRS_FCL-FPCUNIT=1
TARGET_DIRS_EXTRA=1
endif
ifeq ($(FULL_TARGET),i386-watcom)
TARGET_DIRS_BASE=1
TARGET_DIRS_FPMKUNIT=1
TARGET_DIRS_FCL-BASE=1
TARGET_DIRS_FCL-DB=1
TARGET_DIRS_FCL-IMAGE=1
TARGET_DIRS_FCL-NET=1
TARGET_DIRS_FCL-PASSRC=1
TARGET_DIRS_FCL-REGISTRY=1
TARGET_DIRS_FCL-XML=1
TARGET_DIRS_FCL-FPCUNIT=1
TARGET_DIRS_EXTRA=1
endif
ifeq ($(FULL_TARGET),i386-netwlibc)
TARGET_DIRS_BASE=1
TARGET_DIRS_FPMKUNIT=1
TARGET_DIRS_FCL-BASE=1
TARGET_DIRS_FCL-DB=1
TARGET_DIRS_FCL-IMAGE=1
TARGET_DIRS_FCL-NET=1
TARGET_DIRS_FCL-PASSRC=1
TARGET_DIRS_FCL-REGISTRY=1
TARGET_DIRS_FCL-XML=1
TARGET_DIRS_FCL-FPCUNIT=1
TARGET_DIRS_EXTRA=1
endif
ifeq ($(FULL_TARGET),i386-wince)
TARGET_DIRS_BASE=1
TARGET_DIRS_FPMKUNIT=1
TARGET_DIRS_FCL-BASE=1
TARGET_DIRS_FCL-DB=1
TARGET_DIRS_FCL-IMAGE=1
TARGET_DIRS_FCL-NET=1
TARGET_DIRS_FCL-PASSRC=1
TARGET_DIRS_FCL-REGISTRY=1
TARGET_DIRS_FCL-XML=1
TARGET_DIRS_FCL-FPCUNIT=1
TARGET_DIRS_EXTRA=1
TARGET_DIRS_FCL-WEB=1
endif
ifeq ($(FULL_TARGET),i386-embedded)
TARGET_DIRS_BASE=1
TARGET_DIRS_FPMKUNIT=1
TARGET_DIRS_FCL-BASE=1
TARGET_DIRS_FCL-DB=1
TARGET_DIRS_FCL-IMAGE=1
TARGET_DIRS_FCL-NET=1
TARGET_DIRS_FCL-PASSRC=1
TARGET_DIRS_FCL-REGISTRY=1
TARGET_DIRS_FCL-XML=1
TARGET_DIRS_FCL-FPCUNIT=1
TARGET_DIRS_EXTRA=1
endif
ifeq ($(FULL_TARGET),i386-symbian)
TARGET_DIRS_BASE=1
TARGET_DIRS_FPMKUNIT=1
TARGET_DIRS_FCL-BASE=1
TARGET_DIRS_FCL-DB=1
TARGET_DIRS_FCL-IMAGE=1
TARGET_DIRS_FCL-NET=1
TARGET_DIRS_FCL-PASSRC=1
TARGET_DIRS_FCL-REGISTRY=1
TARGET_DIRS_FCL-XML=1
TARGET_DIRS_FCL-FPCUNIT=1
TARGET_DIRS_EXTRA=1
endif
ifeq ($(FULL_TARGET),m68k-linux)
TARGET_DIRS_BASE=1
TARGET_DIRS_FPMKUNIT=1
TARGET_DIRS_FCL-BASE=1
TARGET_DIRS_FCL-DB=1
TARGET_DIRS_FCL-IMAGE=1
TARGET_DIRS_FCL-NET=1
TARGET_DIRS_FCL-PASSRC=1
TARGET_DIRS_FCL-REGISTRY=1
TARGET_DIRS_FCL-XML=1
TARGET_DIRS_FCL-FPCUNIT=1
TARGET_DIRS_EXTRA=1
TARGET_DIRS_FCL-WEB=1
endif
ifeq ($(FULL_TARGET),m68k-freebsd)
TARGET_DIRS_BASE=1
TARGET_DIRS_FPMKUNIT=1
TARGET_DIRS_FCL-BASE=1
TARGET_DIRS_FCL-DB=1
TARGET_DIRS_FCL-IMAGE=1
TARGET_DIRS_FCL-NET=1
TARGET_DIRS_FCL-PASSRC=1
TARGET_DIRS_FCL-REGISTRY=1
TARGET_DIRS_FCL-XML=1
TARGET_DIRS_FCL-FPCUNIT=1
TARGET_DIRS_EXTRA=1
TARGET_DIRS_FCL-WEB=1
endif
ifeq ($(FULL_TARGET),m68k-netbsd)
TARGET_DIRS_BASE=1
TARGET_DIRS_FPMKUNIT=1
TARGET_DIRS_FCL-BASE=1
TARGET_DIRS_FCL-DB=1
TARGET_DIRS_FCL-IMAGE=1
TARGET_DIRS_FCL-NET=1
TARGET_DIRS_FCL-PASSRC=1
TARGET_DIRS_FCL-REGISTRY=1
TARGET_DIRS_FCL-XML=1
TARGET_DIRS_FCL-FPCUNIT=1
TARGET_DIRS_EXTRA=1
TARGET_DIRS_FCL-WEB=1
endif
ifeq ($(FULL_TARGET),m68k-amiga)
TARGET_DIRS_BASE=1
TARGET_DIRS_FPMKUNIT=1
TARGET_DIRS_FCL-BASE=1
TARGET_DIRS_FCL-DB=1
TARGET_DIRS_FCL-IMAGE=1
TARGET_DIRS_FCL-NET=1
TARGET_DIRS_FCL-PASSRC=1
TARGET_DIRS_FCL-REGISTRY=1
TARGET_DIRS_FCL-XML=1
TARGET_DIRS_FCL-FPCUNIT=1
TARGET_DIRS_EXTRA=1
endif
ifeq ($(FULL_TARGET),m68k-atari)
TARGET_DIRS_BASE=1
TARGET_DIRS_FPMKUNIT=1
TARGET_DIRS_FCL-BASE=1
TARGET_DIRS_FCL-DB=1
TARGET_DIRS_FCL-IMAGE=1
TARGET_DIRS_FCL-NET=1
TARGET_DIRS_FCL-PASSRC=1
TARGET_DIRS_FCL-REGISTRY=1
TARGET_DIRS_FCL-XML=1
TARGET_DIRS_FCL-FPCUNIT=1
TARGET_DIRS_EXTRA=1
endif
ifeq ($(FULL_TARGET),m68k-openbsd)
TARGET_DIRS_BASE=1
TARGET_DIRS_FPMKUNIT=1
TARGET_DIRS_FCL-BASE=1
TARGET_DIRS_FCL-DB=1
TARGET_DIRS_FCL-IMAGE=1
TARGET_DIRS_FCL-NET=1
TARGET_DIRS_FCL-PASSRC=1
TARGET_DIRS_FCL-REGISTRY=1
TARGET_DIRS_FCL-XML=1
TARGET_DIRS_FCL-FPCUNIT=1
TARGET_DIRS_EXTRA=1
TARGET_DIRS_FCL-WEB=1
endif
ifeq ($(FULL_TARGET),m68k-palmos)
TARGET_DIRS_BASE=1
TARGET_DIRS_FPMKUNIT=1
TARGET_DIRS_FCL-BASE=1
TARGET_DIRS_FCL-DB=1
TARGET_DIRS_FCL-IMAGE=1
TARGET_DIRS_FCL-NET=1
TARGET_DIRS_FCL-PASSRC=1
TARGET_DIRS_FCL-REGISTRY=1
TARGET_DIRS_FCL-XML=1
TARGET_DIRS_FCL-FPCUNIT=1
TARGET_DIRS_EXTRA=1
endif
ifeq ($(FULL_TARGET),m68k-embedded)
TARGET_DIRS_BASE=1
TARGET_DIRS_FPMKUNIT=1
TARGET_DIRS_FCL-BASE=1
TARGET_DIRS_FCL-DB=1
TARGET_DIRS_FCL-IMAGE=1
TARGET_DIRS_FCL-NET=1
TARGET_DIRS_FCL-PASSRC=1
TARGET_DIRS_FCL-REGISTRY=1
TARGET_DIRS_FCL-XML=1
TARGET_DIRS_FCL-FPCUNIT=1
TARGET_DIRS_EXTRA=1
endif
ifeq ($(FULL_TARGET),powerpc-linux)
TARGET_DIRS_BASE=1
TARGET_DIRS_FPMKUNIT=1
TARGET_DIRS_FCL-BASE=1
TARGET_DIRS_FCL-DB=1
TARGET_DIRS_FCL-IMAGE=1
TARGET_DIRS_FCL-NET=1
TARGET_DIRS_FCL-PASSRC=1
TARGET_DIRS_FCL-REGISTRY=1
TARGET_DIRS_FCL-XML=1
TARGET_DIRS_FCL-FPCUNIT=1
TARGET_DIRS_EXTRA=1
TARGET_DIRS_FCL-WEB=1
endif
ifeq ($(FULL_TARGET),powerpc-netbsd)
TARGET_DIRS_BASE=1
TARGET_DIRS_FPMKUNIT=1
TARGET_DIRS_FCL-BASE=1
TARGET_DIRS_FCL-DB=1
TARGET_DIRS_FCL-IMAGE=1
TARGET_DIRS_FCL-NET=1
TARGET_DIRS_FCL-PASSRC=1
TARGET_DIRS_FCL-REGISTRY=1
TARGET_DIRS_FCL-XML=1
TARGET_DIRS_FCL-FPCUNIT=1
TARGET_DIRS_EXTRA=1
TARGET_DIRS_FCL-WEB=1
endif
ifeq ($(FULL_TARGET),powerpc-amiga)
TARGET_DIRS_BASE=1
TARGET_DIRS_FPMKUNIT=1
TARGET_DIRS_FCL-BASE=1
TARGET_DIRS_FCL-DB=1
TARGET_DIRS_FCL-IMAGE=1
TARGET_DIRS_FCL-NET=1
TARGET_DIRS_FCL-PASSRC=1
TARGET_DIRS_FCL-REGISTRY=1
TARGET_DIRS_FCL-XML=1
TARGET_DIRS_FCL-FPCUNIT=1
TARGET_DIRS_EXTRA=1
endif
ifeq ($(FULL_TARGET),powerpc-macos)
TARGET_DIRS_BASE=1
TARGET_DIRS_FPMKUNIT=1
TARGET_DIRS_FCL-BASE=1
TARGET_DIRS_FCL-DB=1
TARGET_DIRS_FCL-IMAGE=1
TARGET_DIRS_FCL-NET=1
TARGET_DIRS_FCL-PASSRC=1
TARGET_DIRS_FCL-REGISTRY=1
TARGET_DIRS_FCL-XML=1
TARGET_DIRS_FCL-FPCUNIT=1
TARGET_DIRS_EXTRA=1
endif
ifeq ($(FULL_TARGET),powerpc-darwin)
TARGET_DIRS_BASE=1
TARGET_DIRS_FPMKUNIT=1
TARGET_DIRS_FCL-BASE=1
TARGET_DIRS_FCL-DB=1
TARGET_DIRS_FCL-IMAGE=1
TARGET_DIRS_FCL-NET=1
TARGET_DIRS_FCL-PASSRC=1
TARGET_DIRS_FCL-REGISTRY=1
TARGET_DIRS_FCL-XML=1
TARGET_DIRS_FCL-FPCUNIT=1
TARGET_DIRS_EXTRA=1
TARGET_DIRS_FCL-WEB=1
endif
ifeq ($(FULL_TARGET),powerpc-morphos)
TARGET_DIRS_BASE=1
TARGET_DIRS_FPMKUNIT=1
TARGET_DIRS_FCL-BASE=1
TARGET_DIRS_FCL-DB=1
TARGET_DIRS_FCL-IMAGE=1
TARGET_DIRS_FCL-NET=1
TARGET_DIRS_FCL-PASSRC=1
TARGET_DIRS_FCL-REGISTRY=1
TARGET_DIRS_FCL-XML=1
TARGET_DIRS_FCL-FPCUNIT=1
TARGET_DIRS_EXTRA=1
endif
ifeq ($(FULL_TARGET),powerpc-embedded)
TARGET_DIRS_BASE=1
TARGET_DIRS_FPMKUNIT=1
TARGET_DIRS_FCL-BASE=1
TARGET_DIRS_FCL-DB=1
TARGET_DIRS_FCL-IMAGE=1
TARGET_DIRS_FCL-NET=1
TARGET_DIRS_FCL-PASSRC=1
TARGET_DIRS_FCL-REGISTRY=1
TARGET_DIRS_FCL-XML=1
TARGET_DIRS_FCL-FPCUNIT=1
TARGET_DIRS_EXTRA=1
endif
ifeq ($(FULL_TARGET),sparc-linux)
TARGET_DIRS_BASE=1
TARGET_DIRS_FPMKUNIT=1
TARGET_DIRS_FCL-BASE=1
TARGET_DIRS_FCL-DB=1
TARGET_DIRS_FCL-IMAGE=1
TARGET_DIRS_FCL-NET=1
TARGET_DIRS_FCL-PASSRC=1
TARGET_DIRS_FCL-REGISTRY=1
TARGET_DIRS_FCL-XML=1
TARGET_DIRS_FCL-FPCUNIT=1
TARGET_DIRS_EXTRA=1
TARGET_DIRS_FCL-WEB=1
endif
ifeq ($(FULL_TARGET),sparc-netbsd)
TARGET_DIRS_BASE=1
TARGET_DIRS_FPMKUNIT=1
TARGET_DIRS_FCL-BASE=1
TARGET_DIRS_FCL-DB=1
TARGET_DIRS_FCL-IMAGE=1
TARGET_DIRS_FCL-NET=1
TARGET_DIRS_FCL-PASSRC=1
TARGET_DIRS_FCL-REGISTRY=1
TARGET_DIRS_FCL-XML=1
TARGET_DIRS_FCL-FPCUNIT=1
TARGET_DIRS_EXTRA=1
TARGET_DIRS_FCL-WEB=1
endif
ifeq ($(FULL_TARGET),sparc-solaris)
TARGET_DIRS_BASE=1
TARGET_DIRS_FPMKUNIT=1
TARGET_DIRS_FCL-BASE=1
TARGET_DIRS_FCL-DB=1
TARGET_DIRS_FCL-IMAGE=1
TARGET_DIRS_FCL-NET=1
TARGET_DIRS_FCL-PASSRC=1
TARGET_DIRS_FCL-REGISTRY=1
TARGET_DIRS_FCL-XML=1
TARGET_DIRS_FCL-FPCUNIT=1
TARGET_DIRS_EXTRA=1
TARGET_DIRS_FCL-WEB=1
endif
ifeq ($(FULL_TARGET),sparc-embedded)
TARGET_DIRS_BASE=1
TARGET_DIRS_FPMKUNIT=1
TARGET_DIRS_FCL-BASE=1
TARGET_DIRS_FCL-DB=1
TARGET_DIRS_FCL-IMAGE=1
TARGET_DIRS_FCL-NET=1
TARGET_DIRS_FCL-PASSRC=1
TARGET_DIRS_FCL-REGISTRY=1
TARGET_DIRS_FCL-XML=1
TARGET_DIRS_FCL-FPCUNIT=1
TARGET_DIRS_EXTRA=1
endif
ifeq ($(FULL_TARGET),x86_64-linux)
TARGET_DIRS_BASE=1
TARGET_DIRS_FPMKUNIT=1
TARGET_DIRS_FCL-BASE=1
TARGET_DIRS_FCL-DB=1
TARGET_DIRS_FCL-IMAGE=1
TARGET_DIRS_FCL-NET=1
TARGET_DIRS_FCL-PASSRC=1
TARGET_DIRS_FCL-REGISTRY=1
TARGET_DIRS_FCL-XML=1
TARGET_DIRS_FCL-FPCUNIT=1
TARGET_DIRS_EXTRA=1
TARGET_DIRS_FCL-WEB=1
endif
ifeq ($(FULL_TARGET),x86_64-freebsd)
TARGET_DIRS_BASE=1
TARGET_DIRS_FPMKUNIT=1
TARGET_DIRS_FCL-BASE=1
TARGET_DIRS_FCL-DB=1
TARGET_DIRS_FCL-IMAGE=1
TARGET_DIRS_FCL-NET=1
TARGET_DIRS_FCL-PASSRC=1
TARGET_DIRS_FCL-REGISTRY=1
TARGET_DIRS_FCL-XML=1
TARGET_DIRS_FCL-FPCUNIT=1
TARGET_DIRS_EXTRA=1
TARGET_DIRS_FCL-WEB=1
endif
ifeq ($(FULL_TARGET),x86_64-win64)
TARGET_DIRS_BASE=1
TARGET_DIRS_FPMKUNIT=1
TARGET_DIRS_FCL-BASE=1
TARGET_DIRS_FCL-DB=1
TARGET_DIRS_FCL-IMAGE=1
TARGET_DIRS_FCL-NET=1
TARGET_DIRS_FCL-PASSRC=1
TARGET_DIRS_FCL-REGISTRY=1
TARGET_DIRS_FCL-XML=1
TARGET_DIRS_FCL-FPCUNIT=1
TARGET_DIRS_EXTRA=1
TARGET_DIRS_FCL-WEB=1
endif
ifeq ($(FULL_TARGET),x86_64-embedded)
TARGET_DIRS_BASE=1
TARGET_DIRS_FPMKUNIT=1
TARGET_DIRS_FCL-BASE=1
TARGET_DIRS_FCL-DB=1
TARGET_DIRS_FCL-IMAGE=1
TARGET_DIRS_FCL-NET=1
TARGET_DIRS_FCL-PASSRC=1
TARGET_DIRS_FCL-REGISTRY=1
TARGET_DIRS_FCL-XML=1
TARGET_DIRS_FCL-FPCUNIT=1
TARGET_DIRS_EXTRA=1
endif
ifeq ($(FULL_TARGET),arm-linux)
TARGET_DIRS_BASE=1
TARGET_DIRS_FPMKUNIT=1
TARGET_DIRS_FCL-BASE=1
TARGET_DIRS_FCL-DB=1
TARGET_DIRS_FCL-IMAGE=1
TARGET_DIRS_FCL-NET=1
TARGET_DIRS_FCL-PASSRC=1
TARGET_DIRS_FCL-REGISTRY=1
TARGET_DIRS_FCL-XML=1
TARGET_DIRS_FCL-FPCUNIT=1
TARGET_DIRS_EXTRA=1
TARGET_DIRS_FCL-WEB=1
endif
ifeq ($(FULL_TARGET),arm-palmos)
TARGET_DIRS_BASE=1
TARGET_DIRS_FPMKUNIT=1
TARGET_DIRS_FCL-BASE=1
TARGET_DIRS_FCL-DB=1
TARGET_DIRS_FCL-IMAGE=1
TARGET_DIRS_FCL-NET=1
TARGET_DIRS_FCL-PASSRC=1
TARGET_DIRS_FCL-REGISTRY=1
TARGET_DIRS_FCL-XML=1
TARGET_DIRS_FCL-FPCUNIT=1
TARGET_DIRS_EXTRA=1
endif
ifeq ($(FULL_TARGET),arm-wince)
TARGET_DIRS_BASE=1
TARGET_DIRS_FPMKUNIT=1
TARGET_DIRS_FCL-BASE=1
TARGET_DIRS_FCL-DB=1
TARGET_DIRS_FCL-IMAGE=1
TARGET_DIRS_FCL-NET=1
TARGET_DIRS_FCL-PASSRC=1
TARGET_DIRS_FCL-REGISTRY=1
TARGET_DIRS_FCL-XML=1
TARGET_DIRS_FCL-FPCUNIT=1
TARGET_DIRS_EXTRA=1
TARGET_DIRS_FCL-WEB=1
endif
ifeq ($(FULL_TARGET),arm-gba)
TARGET_DIRS_BASE=1
TARGET_DIRS_FPMKUNIT=1
TARGET_DIRS_FCL-BASE=1
TARGET_DIRS_FCL-DB=1
TARGET_DIRS_FCL-IMAGE=1
TARGET_DIRS_FCL-NET=1
TARGET_DIRS_FCL-PASSRC=1
TARGET_DIRS_FCL-REGISTRY=1
TARGET_DIRS_FCL-XML=1
TARGET_DIRS_FCL-FPCUNIT=1
TARGET_DIRS_EXTRA=1
endif
ifeq ($(FULL_TARGET),arm-nds)
TARGET_DIRS_BASE=1
TARGET_DIRS_FPMKUNIT=1
TARGET_DIRS_FCL-BASE=1
TARGET_DIRS_FCL-DB=1
TARGET_DIRS_FCL-IMAGE=1
TARGET_DIRS_FCL-NET=1
TARGET_DIRS_FCL-PASSRC=1
TARGET_DIRS_FCL-REGISTRY=1
TARGET_DIRS_FCL-XML=1
TARGET_DIRS_FCL-FPCUNIT=1
TARGET_DIRS_EXTRA=1
endif
ifeq ($(FULL_TARGET),arm-embedded)
TARGET_DIRS_BASE=1
TARGET_DIRS_FPMKUNIT=1
TARGET_DIRS_FCL-BASE=1
TARGET_DIRS_FCL-DB=1
TARGET_DIRS_FCL-IMAGE=1
TARGET_DIRS_FCL-NET=1
TARGET_DIRS_FCL-PASSRC=1
TARGET_DIRS_FCL-REGISTRY=1
TARGET_DIRS_FCL-XML=1
TARGET_DIRS_FCL-FPCUNIT=1
TARGET_DIRS_EXTRA=1
endif
ifeq ($(FULL_TARGET),arm-symbian)
TARGET_DIRS_BASE=1
TARGET_DIRS_FPMKUNIT=1
TARGET_DIRS_FCL-BASE=1
TARGET_DIRS_FCL-DB=1
TARGET_DIRS_FCL-IMAGE=1
TARGET_DIRS_FCL-NET=1
TARGET_DIRS_FCL-PASSRC=1
TARGET_DIRS_FCL-REGISTRY=1
TARGET_DIRS_FCL-XML=1
TARGET_DIRS_FCL-FPCUNIT=1
TARGET_DIRS_EXTRA=1
endif
ifeq ($(FULL_TARGET),powerpc64-linux)
TARGET_DIRS_BASE=1
TARGET_DIRS_FPMKUNIT=1
TARGET_DIRS_FCL-BASE=1
TARGET_DIRS_FCL-DB=1
TARGET_DIRS_FCL-IMAGE=1
TARGET_DIRS_FCL-NET=1
TARGET_DIRS_FCL-PASSRC=1
TARGET_DIRS_FCL-REGISTRY=1
TARGET_DIRS_FCL-XML=1
TARGET_DIRS_FCL-FPCUNIT=1
TARGET_DIRS_EXTRA=1
TARGET_DIRS_FCL-WEB=1
endif
ifeq ($(FULL_TARGET),powerpc64-darwin)
TARGET_DIRS_BASE=1
TARGET_DIRS_FPMKUNIT=1
TARGET_DIRS_FCL-BASE=1
TARGET_DIRS_FCL-DB=1
TARGET_DIRS_FCL-IMAGE=1
TARGET_DIRS_FCL-NET=1
TARGET_DIRS_FCL-PASSRC=1
TARGET_DIRS_FCL-REGISTRY=1
TARGET_DIRS_FCL-XML=1
TARGET_DIRS_FCL-FPCUNIT=1
TARGET_DIRS_EXTRA=1
TARGET_DIRS_FCL-WEB=1
endif
ifeq ($(FULL_TARGET),powerpc64-embedded)
TARGET_DIRS_BASE=1
TARGET_DIRS_FPMKUNIT=1
TARGET_DIRS_FCL-BASE=1
TARGET_DIRS_FCL-DB=1
TARGET_DIRS_FCL-IMAGE=1
TARGET_DIRS_FCL-NET=1
TARGET_DIRS_FCL-PASSRC=1
TARGET_DIRS_FCL-REGISTRY=1
TARGET_DIRS_FCL-XML=1
TARGET_DIRS_FCL-FPCUNIT=1
TARGET_DIRS_EXTRA=1
endif
ifdef TARGET_DIRS_BASE
base_all:
	$(MAKE) -C base all
base_debug:
	$(MAKE) -C base debug
base_smart:
	$(MAKE) -C base smart
base_release:
	$(MAKE) -C base release
base_units:
	$(MAKE) -C base units
base_examples:
	$(MAKE) -C base examples
base_shared:
	$(MAKE) -C base shared
base_install:
	$(MAKE) -C base install
base_sourceinstall:
	$(MAKE) -C base sourceinstall
base_exampleinstall:
	$(MAKE) -C base exampleinstall
base_distinstall:
	$(MAKE) -C base distinstall
base_zipinstall:
	$(MAKE) -C base zipinstall
base_zipsourceinstall:
	$(MAKE) -C base zipsourceinstall
base_zipexampleinstall:
	$(MAKE) -C base zipexampleinstall
base_zipdistinstall:
	$(MAKE) -C base zipdistinstall
base_clean:
	$(MAKE) -C base clean
base_distclean:
	$(MAKE) -C base distclean
base_cleanall:
	$(MAKE) -C base cleanall
base_info:
	$(MAKE) -C base info
base_makefiles:
	$(MAKE) -C base makefiles
base:
	$(MAKE) -C base all
.PHONY: base_all base_debug base_smart base_release base_units base_examples base_shared base_install base_sourceinstall base_exampleinstall base_distinstall base_zipinstall base_zipsourceinstall base_zipexampleinstall base_zipdistinstall base_clean base_distclean base_cleanall base_info base_makefiles base
endif
ifdef TARGET_DIRS_FPMKUNIT
fpmkunit_all:
	$(MAKE) -C fpmkunit all
fpmkunit_debug:
	$(MAKE) -C fpmkunit debug
fpmkunit_smart:
	$(MAKE) -C fpmkunit smart
fpmkunit_release:
	$(MAKE) -C fpmkunit release
fpmkunit_units:
	$(MAKE) -C fpmkunit units
fpmkunit_examples:
	$(MAKE) -C fpmkunit examples
fpmkunit_shared:
	$(MAKE) -C fpmkunit shared
fpmkunit_install:
	$(MAKE) -C fpmkunit install
fpmkunit_sourceinstall:
	$(MAKE) -C fpmkunit sourceinstall
fpmkunit_exampleinstall:
	$(MAKE) -C fpmkunit exampleinstall
fpmkunit_distinstall:
	$(MAKE) -C fpmkunit distinstall
fpmkunit_zipinstall:
	$(MAKE) -C fpmkunit zipinstall
fpmkunit_zipsourceinstall:
	$(MAKE) -C fpmkunit zipsourceinstall
fpmkunit_zipexampleinstall:
	$(MAKE) -C fpmkunit zipexampleinstall
fpmkunit_zipdistinstall:
	$(MAKE) -C fpmkunit zipdistinstall
fpmkunit_clean:
	$(MAKE) -C fpmkunit clean
fpmkunit_distclean:
	$(MAKE) -C fpmkunit distclean
fpmkunit_cleanall:
	$(MAKE) -C fpmkunit cleanall
fpmkunit_info:
	$(MAKE) -C fpmkunit info
fpmkunit_makefiles:
	$(MAKE) -C fpmkunit makefiles
fpmkunit:
	$(MAKE) -C fpmkunit all
.PHONY: fpmkunit_all fpmkunit_debug fpmkunit_smart fpmkunit_release fpmkunit_units fpmkunit_examples fpmkunit_shared fpmkunit_install fpmkunit_sourceinstall fpmkunit_exampleinstall fpmkunit_distinstall fpmkunit_zipinstall fpmkunit_zipsourceinstall fpmkunit_zipexampleinstall fpmkunit_zipdistinstall fpmkunit_clean fpmkunit_distclean fpmkunit_cleanall fpmkunit_info fpmkunit_makefiles fpmkunit
endif
ifdef TARGET_DIRS_FCL-BASE
fcl-base_all:
	$(MAKE) -C fcl-base all
fcl-base_debug:
	$(MAKE) -C fcl-base debug
fcl-base_smart:
	$(MAKE) -C fcl-base smart
fcl-base_release:
	$(MAKE) -C fcl-base release
fcl-base_units:
	$(MAKE) -C fcl-base units
fcl-base_examples:
	$(MAKE) -C fcl-base examples
fcl-base_shared:
	$(MAKE) -C fcl-base shared
fcl-base_install:
	$(MAKE) -C fcl-base install
fcl-base_sourceinstall:
	$(MAKE) -C fcl-base sourceinstall
fcl-base_exampleinstall:
	$(MAKE) -C fcl-base exampleinstall
fcl-base_distinstall:
	$(MAKE) -C fcl-base distinstall
fcl-base_zipinstall:
	$(MAKE) -C fcl-base zipinstall
fcl-base_zipsourceinstall:
	$(MAKE) -C fcl-base zipsourceinstall
fcl-base_zipexampleinstall:
	$(MAKE) -C fcl-base zipexampleinstall
fcl-base_zipdistinstall:
	$(MAKE) -C fcl-base zipdistinstall
fcl-base_clean:
	$(MAKE) -C fcl-base clean
fcl-base_distclean:
	$(MAKE) -C fcl-base distclean
fcl-base_cleanall:
	$(MAKE) -C fcl-base cleanall
fcl-base_info:
	$(MAKE) -C fcl-base info
fcl-base_makefiles:
	$(MAKE) -C fcl-base makefiles
fcl-base:
	$(MAKE) -C fcl-base all
.PHONY: fcl-base_all fcl-base_debug fcl-base_smart fcl-base_release fcl-base_units fcl-base_examples fcl-base_shared fcl-base_install fcl-base_sourceinstall fcl-base_exampleinstall fcl-base_distinstall fcl-base_zipinstall fcl-base_zipsourceinstall fcl-base_zipexampleinstall fcl-base_zipdistinstall fcl-base_clean fcl-base_distclean fcl-base_cleanall fcl-base_info fcl-base_makefiles fcl-base
endif
ifdef TARGET_DIRS_FCL-DB
fcl-db_all:
	$(MAKE) -C fcl-db all
fcl-db_debug:
	$(MAKE) -C fcl-db debug
fcl-db_smart:
	$(MAKE) -C fcl-db smart
fcl-db_release:
	$(MAKE) -C fcl-db release
fcl-db_units:
	$(MAKE) -C fcl-db units
fcl-db_examples:
	$(MAKE) -C fcl-db examples
fcl-db_shared:
	$(MAKE) -C fcl-db shared
fcl-db_install:
	$(MAKE) -C fcl-db install
fcl-db_sourceinstall:
	$(MAKE) -C fcl-db sourceinstall
fcl-db_exampleinstall:
	$(MAKE) -C fcl-db exampleinstall
fcl-db_distinstall:
	$(MAKE) -C fcl-db distinstall
fcl-db_zipinstall:
	$(MAKE) -C fcl-db zipinstall
fcl-db_zipsourceinstall:
	$(MAKE) -C fcl-db zipsourceinstall
fcl-db_zipexampleinstall:
	$(MAKE) -C fcl-db zipexampleinstall
fcl-db_zipdistinstall:
	$(MAKE) -C fcl-db zipdistinstall
fcl-db_clean:
	$(MAKE) -C fcl-db clean
fcl-db_distclean:
	$(MAKE) -C fcl-db distclean
fcl-db_cleanall:
	$(MAKE) -C fcl-db cleanall
fcl-db_info:
	$(MAKE) -C fcl-db info
fcl-db_makefiles:
	$(MAKE) -C fcl-db makefiles
fcl-db:
	$(MAKE) -C fcl-db all
.PHONY: fcl-db_all fcl-db_debug fcl-db_smart fcl-db_release fcl-db_units fcl-db_examples fcl-db_shared fcl-db_install fcl-db_sourceinstall fcl-db_exampleinstall fcl-db_distinstall fcl-db_zipinstall fcl-db_zipsourceinstall fcl-db_zipexampleinstall fcl-db_zipdistinstall fcl-db_clean fcl-db_distclean fcl-db_cleanall fcl-db_info fcl-db_makefiles fcl-db
endif
ifdef TARGET_DIRS_FCL-IMAGE
fcl-image_all:
	$(MAKE) -C fcl-image all
fcl-image_debug:
	$(MAKE) -C fcl-image debug
fcl-image_smart:
	$(MAKE) -C fcl-image smart
fcl-image_release:
	$(MAKE) -C fcl-image release
fcl-image_units:
	$(MAKE) -C fcl-image units
fcl-image_examples:
	$(MAKE) -C fcl-image examples
fcl-image_shared:
	$(MAKE) -C fcl-image shared
fcl-image_install:
	$(MAKE) -C fcl-image install
fcl-image_sourceinstall:
	$(MAKE) -C fcl-image sourceinstall
fcl-image_exampleinstall:
	$(MAKE) -C fcl-image exampleinstall
fcl-image_distinstall:
	$(MAKE) -C fcl-image distinstall
fcl-image_zipinstall:
	$(MAKE) -C fcl-image zipinstall
fcl-image_zipsourceinstall:
	$(MAKE) -C fcl-image zipsourceinstall
fcl-image_zipexampleinstall:
	$(MAKE) -C fcl-image zipexampleinstall
fcl-image_zipdistinstall:
	$(MAKE) -C fcl-image zipdistinstall
fcl-image_clean:
	$(MAKE) -C fcl-image clean
fcl-image_distclean:
	$(MAKE) -C fcl-image distclean
fcl-image_cleanall:
	$(MAKE) -C fcl-image cleanall
fcl-image_info:
	$(MAKE) -C fcl-image info
fcl-image_makefiles:
	$(MAKE) -C fcl-image makefiles
fcl-image:
	$(MAKE) -C fcl-image all
.PHONY: fcl-image_all fcl-image_debug fcl-image_smart fcl-image_release fcl-image_units fcl-image_examples fcl-image_shared fcl-image_install fcl-image_sourceinstall fcl-image_exampleinstall fcl-image_distinstall fcl-image_zipinstall fcl-image_zipsourceinstall fcl-image_zipexampleinstall fcl-image_zipdistinstall fcl-image_clean fcl-image_distclean fcl-image_cleanall fcl-image_info fcl-image_makefiles fcl-image
endif
ifdef TARGET_DIRS_FCL-NET
fcl-net_all:
	$(MAKE) -C fcl-net all
fcl-net_debug:
	$(MAKE) -C fcl-net debug
fcl-net_smart:
	$(MAKE) -C fcl-net smart
fcl-net_release:
	$(MAKE) -C fcl-net release
fcl-net_units:
	$(MAKE) -C fcl-net units
fcl-net_examples:
	$(MAKE) -C fcl-net examples
fcl-net_shared:
	$(MAKE) -C fcl-net shared
fcl-net_install:
	$(MAKE) -C fcl-net install
fcl-net_sourceinstall:
	$(MAKE) -C fcl-net sourceinstall
fcl-net_exampleinstall:
	$(MAKE) -C fcl-net exampleinstall
fcl-net_distinstall:
	$(MAKE) -C fcl-net distinstall
fcl-net_zipinstall:
	$(MAKE) -C fcl-net zipinstall
fcl-net_zipsourceinstall:
	$(MAKE) -C fcl-net zipsourceinstall
fcl-net_zipexampleinstall:
	$(MAKE) -C fcl-net zipexampleinstall
fcl-net_zipdistinstall:
	$(MAKE) -C fcl-net zipdistinstall
fcl-net_clean:
	$(MAKE) -C fcl-net clean
fcl-net_distclean:
	$(MAKE) -C fcl-net distclean
fcl-net_cleanall:
	$(MAKE) -C fcl-net cleanall
fcl-net_info:
	$(MAKE) -C fcl-net info
fcl-net_makefiles:
	$(MAKE) -C fcl-net makefiles
fcl-net:
	$(MAKE) -C fcl-net all
.PHONY: fcl-net_all fcl-net_debug fcl-net_smart fcl-net_release fcl-net_units fcl-net_examples fcl-net_shared fcl-net_install fcl-net_sourceinstall fcl-net_exampleinstall fcl-net_distinstall fcl-net_zipinstall fcl-net_zipsourceinstall fcl-net_zipexampleinstall fcl-net_zipdistinstall fcl-net_clean fcl-net_distclean fcl-net_cleanall fcl-net_info fcl-net_makefiles fcl-net
endif
ifdef TARGET_DIRS_FCL-PASSRC
fcl-passrc_all:
	$(MAKE) -C fcl-passrc all
fcl-passrc_debug:
	$(MAKE) -C fcl-passrc debug
fcl-passrc_smart:
	$(MAKE) -C fcl-passrc smart
fcl-passrc_release:
	$(MAKE) -C fcl-passrc release
fcl-passrc_units:
	$(MAKE) -C fcl-passrc units
fcl-passrc_examples:
	$(MAKE) -C fcl-passrc examples
fcl-passrc_shared:
	$(MAKE) -C fcl-passrc shared
fcl-passrc_install:
	$(MAKE) -C fcl-passrc install
fcl-passrc_sourceinstall:
	$(MAKE) -C fcl-passrc sourceinstall
fcl-passrc_exampleinstall:
	$(MAKE) -C fcl-passrc exampleinstall
fcl-passrc_distinstall:
	$(MAKE) -C fcl-passrc distinstall
fcl-passrc_zipinstall:
	$(MAKE) -C fcl-passrc zipinstall
fcl-passrc_zipsourceinstall:
	$(MAKE) -C fcl-passrc zipsourceinstall
fcl-passrc_zipexampleinstall:
	$(MAKE) -C fcl-passrc zipexampleinstall
fcl-passrc_zipdistinstall:
	$(MAKE) -C fcl-passrc zipdistinstall
fcl-passrc_clean:
	$(MAKE) -C fcl-passrc clean
fcl-passrc_distclean:
	$(MAKE) -C fcl-passrc distclean
fcl-passrc_cleanall:
	$(MAKE) -C fcl-passrc cleanall
fcl-passrc_info:
	$(MAKE) -C fcl-passrc info
fcl-passrc_makefiles:
	$(MAKE) -C fcl-passrc makefiles
fcl-passrc:
	$(MAKE) -C fcl-passrc all
.PHONY: fcl-passrc_all fcl-passrc_debug fcl-passrc_smart fcl-passrc_release fcl-passrc_units fcl-passrc_examples fcl-passrc_shared fcl-passrc_install fcl-passrc_sourceinstall fcl-passrc_exampleinstall fcl-passrc_distinstall fcl-passrc_zipinstall fcl-passrc_zipsourceinstall fcl-passrc_zipexampleinstall fcl-passrc_zipdistinstall fcl-passrc_clean fcl-passrc_distclean fcl-passrc_cleanall fcl-passrc_info fcl-passrc_makefiles fcl-passrc
endif
ifdef TARGET_DIRS_FCL-REGISTRY
fcl-registry_all:
	$(MAKE) -C fcl-registry all
fcl-registry_debug:
	$(MAKE) -C fcl-registry debug
fcl-registry_smart:
	$(MAKE) -C fcl-registry smart
fcl-registry_release:
	$(MAKE) -C fcl-registry release
fcl-registry_units:
	$(MAKE) -C fcl-registry units
fcl-registry_examples:
	$(MAKE) -C fcl-registry examples
fcl-registry_shared:
	$(MAKE) -C fcl-registry shared
fcl-registry_install:
	$(MAKE) -C fcl-registry install
fcl-registry_sourceinstall:
	$(MAKE) -C fcl-registry sourceinstall
fcl-registry_exampleinstall:
	$(MAKE) -C fcl-registry exampleinstall
fcl-registry_distinstall:
	$(MAKE) -C fcl-registry distinstall
fcl-registry_zipinstall:
	$(MAKE) -C fcl-registry zipinstall
fcl-registry_zipsourceinstall:
	$(MAKE) -C fcl-registry zipsourceinstall
fcl-registry_zipexampleinstall:
	$(MAKE) -C fcl-registry zipexampleinstall
fcl-registry_zipdistinstall:
	$(MAKE) -C fcl-registry zipdistinstall
fcl-registry_clean:
	$(MAKE) -C fcl-registry clean
fcl-registry_distclean:
	$(MAKE) -C fcl-registry distclean
fcl-registry_cleanall:
	$(MAKE) -C fcl-registry cleanall
fcl-registry_info:
	$(MAKE) -C fcl-registry info
fcl-registry_makefiles:
	$(MAKE) -C fcl-registry makefiles
fcl-registry:
	$(MAKE) -C fcl-registry all
.PHONY: fcl-registry_all fcl-registry_debug fcl-registry_smart fcl-registry_release fcl-registry_units fcl-registry_examples fcl-registry_shared fcl-registry_install fcl-registry_sourceinstall fcl-registry_exampleinstall fcl-registry_distinstall fcl-registry_zipinstall fcl-registry_zipsourceinstall fcl-registry_zipexampleinstall fcl-registry_zipdistinstall fcl-registry_clean fcl-registry_distclean fcl-registry_cleanall fcl-registry_info fcl-registry_makefiles fcl-registry
endif
ifdef TARGET_DIRS_FCL-XML
fcl-xml_all:
	$(MAKE) -C fcl-xml all
fcl-xml_debug:
	$(MAKE) -C fcl-xml debug
fcl-xml_smart:
	$(MAKE) -C fcl-xml smart
fcl-xml_release:
	$(MAKE) -C fcl-xml release
fcl-xml_units:
	$(MAKE) -C fcl-xml units
fcl-xml_examples:
	$(MAKE) -C fcl-xml examples
fcl-xml_shared:
	$(MAKE) -C fcl-xml shared
fcl-xml_install:
	$(MAKE) -C fcl-xml install
fcl-xml_sourceinstall:
	$(MAKE) -C fcl-xml sourceinstall
fcl-xml_exampleinstall:
	$(MAKE) -C fcl-xml exampleinstall
fcl-xml_distinstall:
	$(MAKE) -C fcl-xml distinstall
fcl-xml_zipinstall:
	$(MAKE) -C fcl-xml zipinstall
fcl-xml_zipsourceinstall:
	$(MAKE) -C fcl-xml zipsourceinstall
fcl-xml_zipexampleinstall:
	$(MAKE) -C fcl-xml zipexampleinstall
fcl-xml_zipdistinstall:
	$(MAKE) -C fcl-xml zipdistinstall
fcl-xml_clean:
	$(MAKE) -C fcl-xml clean
fcl-xml_distclean:
	$(MAKE) -C fcl-xml distclean
fcl-xml_cleanall:
	$(MAKE) -C fcl-xml cleanall
fcl-xml_info:
	$(MAKE) -C fcl-xml info
fcl-xml_makefiles:
	$(MAKE) -C fcl-xml makefiles
fcl-xml:
	$(MAKE) -C fcl-xml all
.PHONY: fcl-xml_all fcl-xml_debug fcl-xml_smart fcl-xml_release fcl-xml_units fcl-xml_examples fcl-xml_shared fcl-xml_install fcl-xml_sourceinstall fcl-xml_exampleinstall fcl-xml_distinstall fcl-xml_zipinstall fcl-xml_zipsourceinstall fcl-xml_zipexampleinstall fcl-xml_zipdistinstall fcl-xml_clean fcl-xml_distclean fcl-xml_cleanall fcl-xml_info fcl-xml_makefiles fcl-xml
endif
ifdef TARGET_DIRS_FCL-FPCUNIT
fcl-fpcunit_all:
	$(MAKE) -C fcl-fpcunit all
fcl-fpcunit_debug:
	$(MAKE) -C fcl-fpcunit debug
fcl-fpcunit_smart:
	$(MAKE) -C fcl-fpcunit smart
fcl-fpcunit_release:
	$(MAKE) -C fcl-fpcunit release
fcl-fpcunit_units:
	$(MAKE) -C fcl-fpcunit units
fcl-fpcunit_examples:
	$(MAKE) -C fcl-fpcunit examples
fcl-fpcunit_shared:
	$(MAKE) -C fcl-fpcunit shared
fcl-fpcunit_install:
	$(MAKE) -C fcl-fpcunit install
fcl-fpcunit_sourceinstall:
	$(MAKE) -C fcl-fpcunit sourceinstall
fcl-fpcunit_exampleinstall:
	$(MAKE) -C fcl-fpcunit exampleinstall
fcl-fpcunit_distinstall:
	$(MAKE) -C fcl-fpcunit distinstall
fcl-fpcunit_zipinstall:
	$(MAKE) -C fcl-fpcunit zipinstall
fcl-fpcunit_zipsourceinstall:
	$(MAKE) -C fcl-fpcunit zipsourceinstall
fcl-fpcunit_zipexampleinstall:
	$(MAKE) -C fcl-fpcunit zipexampleinstall
fcl-fpcunit_zipdistinstall:
	$(MAKE) -C fcl-fpcunit zipdistinstall
fcl-fpcunit_clean:
	$(MAKE) -C fcl-fpcunit clean
fcl-fpcunit_distclean:
	$(MAKE) -C fcl-fpcunit distclean
fcl-fpcunit_cleanall:
	$(MAKE) -C fcl-fpcunit cleanall
fcl-fpcunit_info:
	$(MAKE) -C fcl-fpcunit info
fcl-fpcunit_makefiles:
	$(MAKE) -C fcl-fpcunit makefiles
fcl-fpcunit:
	$(MAKE) -C fcl-fpcunit all
.PHONY: fcl-fpcunit_all fcl-fpcunit_debug fcl-fpcunit_smart fcl-fpcunit_release fcl-fpcunit_units fcl-fpcunit_examples fcl-fpcunit_shared fcl-fpcunit_install fcl-fpcunit_sourceinstall fcl-fpcunit_exampleinstall fcl-fpcunit_distinstall fcl-fpcunit_zipinstall fcl-fpcunit_zipsourceinstall fcl-fpcunit_zipexampleinstall fcl-fpcunit_zipdistinstall fcl-fpcunit_clean fcl-fpcunit_distclean fcl-fpcunit_cleanall fcl-fpcunit_info fcl-fpcunit_makefiles fcl-fpcunit
endif
ifdef TARGET_DIRS_EXTRA
extra_all:
	$(MAKE) -C extra all
extra_debug:
	$(MAKE) -C extra debug
extra_smart:
	$(MAKE) -C extra smart
extra_release:
	$(MAKE) -C extra release
extra_units:
	$(MAKE) -C extra units
extra_examples:
	$(MAKE) -C extra examples
extra_shared:
	$(MAKE) -C extra shared
extra_install:
	$(MAKE) -C extra install
extra_sourceinstall:
	$(MAKE) -C extra sourceinstall
extra_exampleinstall:
	$(MAKE) -C extra exampleinstall
extra_distinstall:
	$(MAKE) -C extra distinstall
extra_zipinstall:
	$(MAKE) -C extra zipinstall
extra_zipsourceinstall:
	$(MAKE) -C extra zipsourceinstall
extra_zipexampleinstall:
	$(MAKE) -C extra zipexampleinstall
extra_zipdistinstall:
	$(MAKE) -C extra zipdistinstall
extra_clean:
	$(MAKE) -C extra clean
extra_distclean:
	$(MAKE) -C extra distclean
extra_cleanall:
	$(MAKE) -C extra cleanall
extra_info:
	$(MAKE) -C extra info
extra_makefiles:
	$(MAKE) -C extra makefiles
extra:
	$(MAKE) -C extra all
.PHONY: extra_all extra_debug extra_smart extra_release extra_units extra_examples extra_shared extra_install extra_sourceinstall extra_exampleinstall extra_distinstall extra_zipinstall extra_zipsourceinstall extra_zipexampleinstall extra_zipdistinstall extra_clean extra_distclean extra_cleanall extra_info extra_makefiles extra
endif
ifdef TARGET_DIRS_FCL-WEB
fcl-web_all:
	$(MAKE) -C fcl-web all
fcl-web_debug:
	$(MAKE) -C fcl-web debug
fcl-web_smart:
	$(MAKE) -C fcl-web smart
fcl-web_release:
	$(MAKE) -C fcl-web release
fcl-web_units:
	$(MAKE) -C fcl-web units
fcl-web_examples:
	$(MAKE) -C fcl-web examples
fcl-web_shared:
	$(MAKE) -C fcl-web shared
fcl-web_install:
	$(MAKE) -C fcl-web install
fcl-web_sourceinstall:
	$(MAKE) -C fcl-web sourceinstall
fcl-web_exampleinstall:
	$(MAKE) -C fcl-web exampleinstall
fcl-web_distinstall:
	$(MAKE) -C fcl-web distinstall
fcl-web_zipinstall:
	$(MAKE) -C fcl-web zipinstall
fcl-web_zipsourceinstall:
	$(MAKE) -C fcl-web zipsourceinstall
fcl-web_zipexampleinstall:
	$(MAKE) -C fcl-web zipexampleinstall
fcl-web_zipdistinstall:
	$(MAKE) -C fcl-web zipdistinstall
fcl-web_clean:
	$(MAKE) -C fcl-web clean
fcl-web_distclean:
	$(MAKE) -C fcl-web distclean
fcl-web_cleanall:
	$(MAKE) -C fcl-web cleanall
fcl-web_info:
	$(MAKE) -C fcl-web info
fcl-web_makefiles:
	$(MAKE) -C fcl-web makefiles
fcl-web:
	$(MAKE) -C fcl-web all
.PHONY: fcl-web_all fcl-web_debug fcl-web_smart fcl-web_release fcl-web_units fcl-web_examples fcl-web_shared fcl-web_install fcl-web_sourceinstall fcl-web_exampleinstall fcl-web_distinstall fcl-web_zipinstall fcl-web_zipsourceinstall fcl-web_zipexampleinstall fcl-web_zipdistinstall fcl-web_clean fcl-web_distclean fcl-web_cleanall fcl-web_info fcl-web_makefiles fcl-web
endif
all: $(addsuffix _all,$(TARGET_DIRS))
debug: $(addsuffix _debug,$(TARGET_DIRS))
smart: $(addsuffix _smart,$(TARGET_DIRS))
release: $(addsuffix _release,$(TARGET_DIRS))
units: $(addsuffix _units,$(TARGET_DIRS))
examples: $(addsuffix _examples,$(TARGET_DIRS))
shared: $(addsuffix _shared,$(TARGET_DIRS))
install: $(addsuffix _install,$(TARGET_DIRS))
sourceinstall: $(addsuffix _sourceinstall,$(TARGET_DIRS))
exampleinstall: $(addsuffix _exampleinstall,$(TARGET_DIRS))
distinstall: $(addsuffix _distinstall,$(TARGET_DIRS))
zipinstall: $(addsuffix _zipinstall,$(TARGET_DIRS))
zipsourceinstall: $(addsuffix _zipsourceinstall,$(TARGET_DIRS))
zipexampleinstall: $(addsuffix _zipexampleinstall,$(TARGET_DIRS))
zipdistinstall: $(addsuffix _zipdistinstall,$(TARGET_DIRS))
clean: $(addsuffix _clean,$(TARGET_DIRS))
distclean: $(addsuffix _distclean,$(TARGET_DIRS))
cleanall: $(addsuffix _cleanall,$(TARGET_DIRS))
info: fpc_info
makefiles: fpc_makefiles $(addsuffix _makefiles,$(TARGET_DIRS))
.PHONY: all debug smart release units examples shared install sourceinstall exampleinstall distinstall zipinstall zipsourceinstall zipexampleinstall zipdistinstall clean distclean cleanall info makefiles
ifneq ($(wildcard fpcmake.loc),)
include fpcmake.loc
endif
fpmkunit_all: fcl-base_all
fpmkunit_debug: fcl-base_debug
fpmkunit_smart: fcl-base_smart
fpmkunit_release: fcl-base_release
fpmkunit_shared: fcl-base_shared
extra_all: base_all fcl-xml_all
extra_debug: base_debug fcl-xml_debug
extra_smart: base_smart fcl-xml_smart
extra_release: base_release fcl-xml_release
extra_shared: base_shared fcl-xml_shared
fcl-base_all: base_all
fcl-base_debug: base_debug
fcl-base_smart: base_smart
fcl-base_release: base_release
fcl-base_shared: base_shared
fcl-xml_all: fcl-base_all
fcl-xml_debug: fcl-base_debug
fcl-xml_smart: fcl-base_smart
fcl-xml_release: fcl-base_release
fcl-xml_shared: fcl-base_shared
fcl-image_all: fcl-base_all
fcl-image_debug: fcl-base_debug
fcl-image_smart: fcl-base_smart
fcl-image_release: fcl-base_release
fcl-image_shared: fcl-base_shared
fcl-fpcunit_all: fcl-xml_all
fcl-fpcunit_debug: fcl-xml_debug
fcl-fpcunit_smart: fcl-xml_smart
fcl-fpcunit_release: fcl-xml_release
fcl-fpcunit_shared: fcl-xml_shared
fcl-registry_all: fcl-xml_all
fcl-registry_debug: fcl-xml_debug
fcl-registry_smart: fcl-xml_smart
fcl-registry_release: fcl-xml_release
fcl-registry_shared: fcl-xml_shared
fcl-net_all: fcl-passrc_all fcl-xml_all
fcl-net_debug: fcl-passrc_debug fcl-xml_debug
fcl-net_smart: fcl-passrc_smart fcl-xml_smart
fcl-net_release: fcl-passrc_release fcl-xml_release
fcl-net_shared: fcl-passrc_shared fcl-xml_shared
fcl-web_all: fcl-db_all fcl-xml_all
fcl-web_debug: fcl-db_debug fcl-xml_debug
fcl-web_smart: fcl-db_smart fcl-xml_smart
fcl-web_release: fcl-db_release fcl-xml_release
fcl-web_shared: fcl-db_shared fcl-xml_shared
fcl-db_all: fcl-base_all
fcl-db_debug: fcl-base_debug
fcl-db_smart: fcl-base_smart
fcl-db_release: fcl-base_release
fcl-db_shared: fcl-base_shared
fcl_all: fcl-base_all fcl-xml_all fcl-fpcunit_all fcl-db_all fcl-web_all fcl-registry_all fcl-passrc_all fcl-image_all fcl-net_all
fcl_debug: fcl-base_debug fcl-xml_debug fcl-fpcunit_debug fcl-db_debug fcl-web_debug fcl-registry_debug fcl-passrc_debug fcl-image_debug fcl-net_debug
fcl_smart: fcl-base_smart fcl-xml_smart fcl-fpcunit_smart fcl-db_smart fcl-web_smart fcl-registry_smart fcl-passrc_smart fcl-image_smart fcl-net_smart
fcl_release: fcl-base_release fcl-xml_release fcl-fpcunit_release fcl-db_release fcl-web_release fcl-registry_release fcl-passrc_release fcl-image_release fcl-net_release
fcl_shared: fcl-base_shared fcl-xml_shared fcl-fpcunit_shared fcl-db_shared fcl-web_shared fcl-registry_shared fcl-passrc_shared fcl-image_shared fcl-net_shared
