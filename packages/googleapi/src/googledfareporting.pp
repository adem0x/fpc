unit googledfareporting;
{
  This is the file COPYING.FPC, it applies to the Free Pascal Run-Time Library 
  (RTL) and packages (packages) distributed by members of the Free Pascal 
  Development Team.
  
  The source code of the Free Pascal Runtime Libraries and packages are 
  distributed under the Library GNU General Public License 
  (see the file COPYING) with the following modification:
  
  As a special exception, the copyright holders of this library give you
  permission to link this library with independent modules to produce an
  executable, regardless of the license terms of these independent modules,
  and to copy and distribute the resulting executable under terms of your choice,
  provided that you also meet, for each linked independent module, the terms
  and conditions of the license of that module. An independent module is a module
  which is not derived from or based on this library. If you modify this
  library, you may extend this exception to your version of the library, but you are
  not obligated to do so. If you do not wish to do so, delete this exception
  statement from your version.
  
  If you didn't receive a copy of the file COPYING, contact:
        Free Software Foundation
        675 Mass Ave
        Cambridge, MA  02139
        USA
  
}
{$MODE objfpc}
{$H+}

interface

uses sysutils, classes, googleservice, restbase, googlebase;

type
  //
  TAccount = class;
  TAccountArray = Array of TAccount;
  TAccountaccountPermissionIds = class;
  TAccountaccountPermissionIdsArray = Array of TAccountaccountPermissionIds;
  TAccountavailablePermissionIds = class;
  TAccountavailablePermissionIdsArray = Array of TAccountavailablePermissionIds;
  TAccountActiveAdSummary = class;
  TAccountActiveAdSummaryArray = Array of TAccountActiveAdSummary;
  TAccountPermission = class;
  TAccountPermissionArray = Array of TAccountPermission;
  TAccountPermissionaccountProfiles = class;
  TAccountPermissionaccountProfilesArray = Array of TAccountPermissionaccountProfiles;
  TAccountPermissionGroup = class;
  TAccountPermissionGroupArray = Array of TAccountPermissionGroup;
  TAccountPermissionGroupsListResponse = class;
  TAccountPermissionGroupsListResponseArray = Array of TAccountPermissionGroupsListResponse;
  TAccountPermissionGroupsListResponseaccountPermissionGroups = class;
  TAccountPermissionGroupsListResponseaccountPermissionGroupsArray = Array of TAccountPermissionGroupsListResponseaccountPermissionGroups;
  TAccountPermissionsListResponse = class;
  TAccountPermissionsListResponseArray = Array of TAccountPermissionsListResponse;
  TAccountPermissionsListResponseaccountPermissions = class;
  TAccountPermissionsListResponseaccountPermissionsArray = Array of TAccountPermissionsListResponseaccountPermissions;
  TAccountUserProfile = class;
  TAccountUserProfileArray = Array of TAccountUserProfile;
  TAccountUserProfilesListResponse = class;
  TAccountUserProfilesListResponseArray = Array of TAccountUserProfilesListResponse;
  TAccountUserProfilesListResponseaccountUserProfiles = class;
  TAccountUserProfilesListResponseaccountUserProfilesArray = Array of TAccountUserProfilesListResponseaccountUserProfiles;
  TAccountsListResponse = class;
  TAccountsListResponseArray = Array of TAccountsListResponse;
  TAccountsListResponseaccounts = class;
  TAccountsListResponseaccountsArray = Array of TAccountsListResponseaccounts;
  TActivities = class;
  TActivitiesArray = Array of TActivities;
  TActivitiesfilters = class;
  TActivitiesfiltersArray = Array of TActivitiesfilters;
  TActivitiesmetricNames = class;
  TActivitiesmetricNamesArray = Array of TActivitiesmetricNames;
  TAd = class;
  TAdArray = Array of TAd;
  TAdcreativeGroupAssignments = class;
  TAdcreativeGroupAssignmentsArray = Array of TAdcreativeGroupAssignments;
  TAdeventTagOverrides = class;
  TAdeventTagOverridesArray = Array of TAdeventTagOverrides;
  TAdplacementAssignments = class;
  TAdplacementAssignmentsArray = Array of TAdplacementAssignments;
  TAdSlot = class;
  TAdSlotArray = Array of TAdSlot;
  TAdsListResponse = class;
  TAdsListResponseArray = Array of TAdsListResponse;
  TAdsListResponseads = class;
  TAdsListResponseadsArray = Array of TAdsListResponseads;
  TAdvertiser = class;
  TAdvertiserArray = Array of TAdvertiser;
  TAdvertiserGroup = class;
  TAdvertiserGroupArray = Array of TAdvertiserGroup;
  TAdvertiserGroupsListResponse = class;
  TAdvertiserGroupsListResponseArray = Array of TAdvertiserGroupsListResponse;
  TAdvertiserGroupsListResponseadvertiserGroups = class;
  TAdvertiserGroupsListResponseadvertiserGroupsArray = Array of TAdvertiserGroupsListResponseadvertiserGroups;
  TAdvertisersListResponse = class;
  TAdvertisersListResponseArray = Array of TAdvertisersListResponse;
  TAdvertisersListResponseadvertisers = class;
  TAdvertisersListResponseadvertisersArray = Array of TAdvertisersListResponseadvertisers;
  TAudienceSegment = class;
  TAudienceSegmentArray = Array of TAudienceSegment;
  TAudienceSegmentGroup = class;
  TAudienceSegmentGroupArray = Array of TAudienceSegmentGroup;
  TAudienceSegmentGroupaudienceSegments = class;
  TAudienceSegmentGroupaudienceSegmentsArray = Array of TAudienceSegmentGroupaudienceSegments;
  TBrowser = class;
  TBrowserArray = Array of TBrowser;
  TBrowsersListResponse = class;
  TBrowsersListResponseArray = Array of TBrowsersListResponse;
  TBrowsersListResponsebrowsers = class;
  TBrowsersListResponsebrowsersArray = Array of TBrowsersListResponsebrowsers;
  TCampaign = class;
  TCampaignArray = Array of TCampaign;
  TCampaignadditionalCreativeOptimizationConfigurations = class;
  TCampaignadditionalCreativeOptimizationConfigurationsArray = Array of TCampaignadditionalCreativeOptimizationConfigurations;
  TCampaignaudienceSegmentGroups = class;
  TCampaignaudienceSegmentGroupsArray = Array of TCampaignaudienceSegmentGroups;
  TCampaigncreativeGroupIds = class;
  TCampaigncreativeGroupIdsArray = Array of TCampaigncreativeGroupIds;
  TCampaigneventTagOverrides = class;
  TCampaigneventTagOverridesArray = Array of TCampaigneventTagOverrides;
  TCampaigntraffickerEmails = class;
  TCampaigntraffickerEmailsArray = Array of TCampaigntraffickerEmails;
  TCampaignCreativeAssociation = class;
  TCampaignCreativeAssociationArray = Array of TCampaignCreativeAssociation;
  TCampaignCreativeAssociationsListResponse = class;
  TCampaignCreativeAssociationsListResponseArray = Array of TCampaignCreativeAssociationsListResponse;
  TCampaignCreativeAssociationsListResponsecampaignCreativeAssociations = class;
  TCampaignCreativeAssociationsListResponsecampaignCreativeAssociationsArray = Array of TCampaignCreativeAssociationsListResponsecampaignCreativeAssociations;
  TCampaignsListResponse = class;
  TCampaignsListResponseArray = Array of TCampaignsListResponse;
  TCampaignsListResponsecampaigns = class;
  TCampaignsListResponsecampaignsArray = Array of TCampaignsListResponsecampaigns;
  TChangeLog = class;
  TChangeLogArray = Array of TChangeLog;
  TChangeLogsListResponse = class;
  TChangeLogsListResponseArray = Array of TChangeLogsListResponse;
  TChangeLogsListResponsechangeLogs = class;
  TChangeLogsListResponsechangeLogsArray = Array of TChangeLogsListResponsechangeLogs;
  TCitiesListResponse = class;
  TCitiesListResponseArray = Array of TCitiesListResponse;
  TCitiesListResponsecities = class;
  TCitiesListResponsecitiesArray = Array of TCitiesListResponsecities;
  TCity = class;
  TCityArray = Array of TCity;
  TClickTag = class;
  TClickTagArray = Array of TClickTag;
  TClickThroughUrl = class;
  TClickThroughUrlArray = Array of TClickThroughUrl;
  TClickThroughUrlSuffixProperties = class;
  TClickThroughUrlSuffixPropertiesArray = Array of TClickThroughUrlSuffixProperties;
  TCompanionClickThroughOverride = class;
  TCompanionClickThroughOverrideArray = Array of TCompanionClickThroughOverride;
  TCompatibleFields = class;
  TCompatibleFieldsArray = Array of TCompatibleFields;
  TConnectionType = class;
  TConnectionTypeArray = Array of TConnectionType;
  TConnectionTypesListResponse = class;
  TConnectionTypesListResponseArray = Array of TConnectionTypesListResponse;
  TConnectionTypesListResponseconnectionTypes = class;
  TConnectionTypesListResponseconnectionTypesArray = Array of TConnectionTypesListResponseconnectionTypes;
  TContentCategoriesListResponse = class;
  TContentCategoriesListResponseArray = Array of TContentCategoriesListResponse;
  TContentCategoriesListResponsecontentCategories = class;
  TContentCategoriesListResponsecontentCategoriesArray = Array of TContentCategoriesListResponsecontentCategories;
  TContentCategory = class;
  TContentCategoryArray = Array of TContentCategory;
  TCountriesListResponse = class;
  TCountriesListResponseArray = Array of TCountriesListResponse;
  TCountriesListResponsecountries = class;
  TCountriesListResponsecountriesArray = Array of TCountriesListResponsecountries;
  TCountry = class;
  TCountryArray = Array of TCountry;
  TCreative = class;
  TCreativeArray = Array of TCreative;
  TCreativeadTagKeys = class;
  TCreativeadTagKeysArray = Array of TCreativeadTagKeys;
  TCreativebackupImageFeatures = class;
  TCreativebackupImageFeaturesArray = Array of TCreativebackupImageFeatures;
  TCreativeclickTags = class;
  TCreativeclickTagsArray = Array of TCreativeclickTags;
  TCreativecompanionCreatives = class;
  TCreativecompanionCreativesArray = Array of TCreativecompanionCreatives;
  TCreativecompatibility = class;
  TCreativecompatibilityArray = Array of TCreativecompatibility;
  TCreativecounterCustomEvents = class;
  TCreativecounterCustomEventsArray = Array of TCreativecounterCustomEvents;
  TCreativecreativeAssets = class;
  TCreativecreativeAssetsArray = Array of TCreativecreativeAssets;
  TCreativecreativeFieldAssignments = class;
  TCreativecreativeFieldAssignmentsArray = Array of TCreativecreativeFieldAssignments;
  TCreativecustomKeyValues = class;
  TCreativecustomKeyValuesArray = Array of TCreativecustomKeyValues;
  TCreativeexitCustomEvents = class;
  TCreativeexitCustomEventsArray = Array of TCreativeexitCustomEvents;
  TCreativethirdPartyUrls = class;
  TCreativethirdPartyUrlsArray = Array of TCreativethirdPartyUrls;
  TCreativetimerCustomEvents = class;
  TCreativetimerCustomEventsArray = Array of TCreativetimerCustomEvents;
  TCreativeAsset = class;
  TCreativeAssetArray = Array of TCreativeAsset;
  TCreativeAssetdetectedFeatures = class;
  TCreativeAssetdetectedFeaturesArray = Array of TCreativeAssetdetectedFeatures;
  TCreativeAssetId = class;
  TCreativeAssetIdArray = Array of TCreativeAssetId;
  TCreativeAssetMetadata = class;
  TCreativeAssetMetadataArray = Array of TCreativeAssetMetadata;
  TCreativeAssetMetadataclickTags = class;
  TCreativeAssetMetadataclickTagsArray = Array of TCreativeAssetMetadataclickTags;
  TCreativeAssetMetadatadetectedFeatures = class;
  TCreativeAssetMetadatadetectedFeaturesArray = Array of TCreativeAssetMetadatadetectedFeatures;
  TCreativeAssetMetadatawarnedValidationRules = class;
  TCreativeAssetMetadatawarnedValidationRulesArray = Array of TCreativeAssetMetadatawarnedValidationRules;
  TCreativeAssignment = class;
  TCreativeAssignmentArray = Array of TCreativeAssignment;
  TCreativeAssignmentcompanionCreativeOverrides = class;
  TCreativeAssignmentcompanionCreativeOverridesArray = Array of TCreativeAssignmentcompanionCreativeOverrides;
  TCreativeAssignmentcreativeGroupAssignments = class;
  TCreativeAssignmentcreativeGroupAssignmentsArray = Array of TCreativeAssignmentcreativeGroupAssignments;
  TCreativeAssignmentrichMediaExitOverrides = class;
  TCreativeAssignmentrichMediaExitOverridesArray = Array of TCreativeAssignmentrichMediaExitOverrides;
  TCreativeCustomEvent = class;
  TCreativeCustomEventArray = Array of TCreativeCustomEvent;
  TCreativeField = class;
  TCreativeFieldArray = Array of TCreativeField;
  TCreativeFieldAssignment = class;
  TCreativeFieldAssignmentArray = Array of TCreativeFieldAssignment;
  TCreativeFieldValue = class;
  TCreativeFieldValueArray = Array of TCreativeFieldValue;
  TCreativeFieldValuesListResponse = class;
  TCreativeFieldValuesListResponseArray = Array of TCreativeFieldValuesListResponse;
  TCreativeFieldValuesListResponsecreativeFieldValues = class;
  TCreativeFieldValuesListResponsecreativeFieldValuesArray = Array of TCreativeFieldValuesListResponsecreativeFieldValues;
  TCreativeFieldsListResponse = class;
  TCreativeFieldsListResponseArray = Array of TCreativeFieldsListResponse;
  TCreativeFieldsListResponsecreativeFields = class;
  TCreativeFieldsListResponsecreativeFieldsArray = Array of TCreativeFieldsListResponsecreativeFields;
  TCreativeGroup = class;
  TCreativeGroupArray = Array of TCreativeGroup;
  TCreativeGroupAssignment = class;
  TCreativeGroupAssignmentArray = Array of TCreativeGroupAssignment;
  TCreativeGroupsListResponse = class;
  TCreativeGroupsListResponseArray = Array of TCreativeGroupsListResponse;
  TCreativeGroupsListResponsecreativeGroups = class;
  TCreativeGroupsListResponsecreativeGroupsArray = Array of TCreativeGroupsListResponsecreativeGroups;
  TCreativeOptimizationConfiguration = class;
  TCreativeOptimizationConfigurationArray = Array of TCreativeOptimizationConfiguration;
  TCreativeOptimizationConfigurationoptimizationActivitys = class;
  TCreativeOptimizationConfigurationoptimizationActivitysArray = Array of TCreativeOptimizationConfigurationoptimizationActivitys;
  TCreativeRotation = class;
  TCreativeRotationArray = Array of TCreativeRotation;
  TCreativeRotationcreativeAssignments = class;
  TCreativeRotationcreativeAssignmentsArray = Array of TCreativeRotationcreativeAssignments;
  TCreativeSettings = class;
  TCreativeSettingsArray = Array of TCreativeSettings;
  TCreativesListResponse = class;
  TCreativesListResponseArray = Array of TCreativesListResponse;
  TCreativesListResponsecreatives = class;
  TCreativesListResponsecreativesArray = Array of TCreativesListResponsecreatives;
  TCrossDimensionReachReportCompatibleFields = class;
  TCrossDimensionReachReportCompatibleFieldsArray = Array of TCrossDimensionReachReportCompatibleFields;
  TCrossDimensionReachReportCompatibleFieldsbreakdown = class;
  TCrossDimensionReachReportCompatibleFieldsbreakdownArray = Array of TCrossDimensionReachReportCompatibleFieldsbreakdown;
  TCrossDimensionReachReportCompatibleFieldsdimensionFilters = class;
  TCrossDimensionReachReportCompatibleFieldsdimensionFiltersArray = Array of TCrossDimensionReachReportCompatibleFieldsdimensionFilters;
  TCrossDimensionReachReportCompatibleFieldsmetrics = class;
  TCrossDimensionReachReportCompatibleFieldsmetricsArray = Array of TCrossDimensionReachReportCompatibleFieldsmetrics;
  TCrossDimensionReachReportCompatibleFieldsoverlapMetrics = class;
  TCrossDimensionReachReportCompatibleFieldsoverlapMetricsArray = Array of TCrossDimensionReachReportCompatibleFieldsoverlapMetrics;
  TCustomRichMediaEvents = class;
  TCustomRichMediaEventsArray = Array of TCustomRichMediaEvents;
  TCustomRichMediaEventsfilteredEventIds = class;
  TCustomRichMediaEventsfilteredEventIdsArray = Array of TCustomRichMediaEventsfilteredEventIds;
  TDateRange = class;
  TDateRangeArray = Array of TDateRange;
  TDayPartTargeting = class;
  TDayPartTargetingArray = Array of TDayPartTargeting;
  TDayPartTargetingdaysOfWeek = class;
  TDayPartTargetingdaysOfWeekArray = Array of TDayPartTargetingdaysOfWeek;
  TDayPartTargetinghoursOfDay = class;
  TDayPartTargetinghoursOfDayArray = Array of TDayPartTargetinghoursOfDay;
  TDefaultClickThroughEventTagProperties = class;
  TDefaultClickThroughEventTagPropertiesArray = Array of TDefaultClickThroughEventTagProperties;
  TDeliverySchedule = class;
  TDeliveryScheduleArray = Array of TDeliverySchedule;
  TDfpSettings = class;
  TDfpSettingsArray = Array of TDfpSettings;
  TDimension = class;
  TDimensionArray = Array of TDimension;
  TDimensionFilter = class;
  TDimensionFilterArray = Array of TDimensionFilter;
  TDimensionValue = class;
  TDimensionValueArray = Array of TDimensionValue;
  TDimensionValueList = class;
  TDimensionValueListArray = Array of TDimensionValueList;
  TDimensionValueListitems = class;
  TDimensionValueListitemsArray = Array of TDimensionValueListitems;
  TDimensionValueRequest = class;
  TDimensionValueRequestArray = Array of TDimensionValueRequest;
  TDimensionValueRequestfilters = class;
  TDimensionValueRequestfiltersArray = Array of TDimensionValueRequestfilters;
  TDirectorySite = class;
  TDirectorySiteArray = Array of TDirectorySite;
  TDirectorySitecontactAssignments = class;
  TDirectorySitecontactAssignmentsArray = Array of TDirectorySitecontactAssignments;
  TDirectorySiteinpageTagFormats = class;
  TDirectorySiteinpageTagFormatsArray = Array of TDirectorySiteinpageTagFormats;
  TDirectorySiteinterstitialTagFormats = class;
  TDirectorySiteinterstitialTagFormatsArray = Array of TDirectorySiteinterstitialTagFormats;
  TDirectorySiteContact = class;
  TDirectorySiteContactArray = Array of TDirectorySiteContact;
  TDirectorySiteContactAssignment = class;
  TDirectorySiteContactAssignmentArray = Array of TDirectorySiteContactAssignment;
  TDirectorySiteContactsListResponse = class;
  TDirectorySiteContactsListResponseArray = Array of TDirectorySiteContactsListResponse;
  TDirectorySiteContactsListResponsedirectorySiteContacts = class;
  TDirectorySiteContactsListResponsedirectorySiteContactsArray = Array of TDirectorySiteContactsListResponsedirectorySiteContacts;
  TDirectorySiteSettings = class;
  TDirectorySiteSettingsArray = Array of TDirectorySiteSettings;
  TDirectorySitesListResponse = class;
  TDirectorySitesListResponseArray = Array of TDirectorySitesListResponse;
  TDirectorySitesListResponsedirectorySites = class;
  TDirectorySitesListResponsedirectorySitesArray = Array of TDirectorySitesListResponsedirectorySites;
  TEventTag = class;
  TEventTagArray = Array of TEventTag;
  TEventTagsiteIds = class;
  TEventTagsiteIdsArray = Array of TEventTagsiteIds;
  TEventTagOverride = class;
  TEventTagOverrideArray = Array of TEventTagOverride;
  TEventTagsListResponse = class;
  TEventTagsListResponseArray = Array of TEventTagsListResponse;
  TEventTagsListResponseeventTags = class;
  TEventTagsListResponseeventTagsArray = Array of TEventTagsListResponseeventTags;
  TFile = class;
  TFileArray = Array of TFile;
  TFileurls = class;
  TFileurlsArray = Array of TFileurls;
  TFileList = class;
  TFileListArray = Array of TFileList;
  TFileListitems = class;
  TFileListitemsArray = Array of TFileListitems;
  TFlight = class;
  TFlightArray = Array of TFlight;
  TFloodlightActivitiesGenerateTagResponse = class;
  TFloodlightActivitiesGenerateTagResponseArray = Array of TFloodlightActivitiesGenerateTagResponse;
  TFloodlightActivitiesListResponse = class;
  TFloodlightActivitiesListResponseArray = Array of TFloodlightActivitiesListResponse;
  TFloodlightActivitiesListResponsefloodlightActivities = class;
  TFloodlightActivitiesListResponsefloodlightActivitiesArray = Array of TFloodlightActivitiesListResponsefloodlightActivities;
  TFloodlightActivity = class;
  TFloodlightActivityArray = Array of TFloodlightActivity;
  TFloodlightActivitydefaultTags = class;
  TFloodlightActivitydefaultTagsArray = Array of TFloodlightActivitydefaultTags;
  TFloodlightActivitypublisherTags = class;
  TFloodlightActivitypublisherTagsArray = Array of TFloodlightActivitypublisherTags;
  TFloodlightActivityuserDefinedVariableTypes = class;
  TFloodlightActivityuserDefinedVariableTypesArray = Array of TFloodlightActivityuserDefinedVariableTypes;
  TFloodlightActivityDynamicTag = class;
  TFloodlightActivityDynamicTagArray = Array of TFloodlightActivityDynamicTag;
  TFloodlightActivityGroup = class;
  TFloodlightActivityGroupArray = Array of TFloodlightActivityGroup;
  TFloodlightActivityGroupsListResponse = class;
  TFloodlightActivityGroupsListResponseArray = Array of TFloodlightActivityGroupsListResponse;
  TFloodlightActivityGroupsListResponsefloodlightActivityGroups = class;
  TFloodlightActivityGroupsListResponsefloodlightActivityGroupsArray = Array of TFloodlightActivityGroupsListResponsefloodlightActivityGroups;
  TFloodlightActivityPublisherDynamicTag = class;
  TFloodlightActivityPublisherDynamicTagArray = Array of TFloodlightActivityPublisherDynamicTag;
  TFloodlightConfiguration = class;
  TFloodlightConfigurationArray = Array of TFloodlightConfiguration;
  TFloodlightConfigurationstandardVariableTypes = class;
  TFloodlightConfigurationstandardVariableTypesArray = Array of TFloodlightConfigurationstandardVariableTypes;
  TFloodlightConfigurationuserDefinedVariableConfigurations = class;
  TFloodlightConfigurationuserDefinedVariableConfigurationsArray = Array of TFloodlightConfigurationuserDefinedVariableConfigurations;
  TFloodlightConfigurationsListResponse = class;
  TFloodlightConfigurationsListResponseArray = Array of TFloodlightConfigurationsListResponse;
  TFloodlightConfigurationsListResponsefloodlightConfigurations = class;
  TFloodlightConfigurationsListResponsefloodlightConfigurationsArray = Array of TFloodlightConfigurationsListResponsefloodlightConfigurations;
  TFloodlightReportCompatibleFields = class;
  TFloodlightReportCompatibleFieldsArray = Array of TFloodlightReportCompatibleFields;
  TFloodlightReportCompatibleFieldsdimensionFilters = class;
  TFloodlightReportCompatibleFieldsdimensionFiltersArray = Array of TFloodlightReportCompatibleFieldsdimensionFilters;
  TFloodlightReportCompatibleFieldsdimensions = class;
  TFloodlightReportCompatibleFieldsdimensionsArray = Array of TFloodlightReportCompatibleFieldsdimensions;
  TFloodlightReportCompatibleFieldsmetrics = class;
  TFloodlightReportCompatibleFieldsmetricsArray = Array of TFloodlightReportCompatibleFieldsmetrics;
  TFrequencyCap = class;
  TFrequencyCapArray = Array of TFrequencyCap;
  TFsCommand = class;
  TFsCommandArray = Array of TFsCommand;
  TGeoTargeting = class;
  TGeoTargetingArray = Array of TGeoTargeting;
  TGeoTargetingcities = class;
  TGeoTargetingcitiesArray = Array of TGeoTargetingcities;
  TGeoTargetingcountries = class;
  TGeoTargetingcountriesArray = Array of TGeoTargetingcountries;
  TGeoTargetingmetros = class;
  TGeoTargetingmetrosArray = Array of TGeoTargetingmetros;
  TGeoTargetingpostalCodes = class;
  TGeoTargetingpostalCodesArray = Array of TGeoTargetingpostalCodes;
  TGeoTargetingregions = class;
  TGeoTargetingregionsArray = Array of TGeoTargetingregions;
  TInventoryItem = class;
  TInventoryItemArray = Array of TInventoryItem;
  TInventoryItemadSlots = class;
  TInventoryItemadSlotsArray = Array of TInventoryItemadSlots;
  TInventoryItemsListResponse = class;
  TInventoryItemsListResponseArray = Array of TInventoryItemsListResponse;
  TInventoryItemsListResponseinventoryItems = class;
  TInventoryItemsListResponseinventoryItemsArray = Array of TInventoryItemsListResponseinventoryItems;
  TKeyValueTargetingExpression = class;
  TKeyValueTargetingExpressionArray = Array of TKeyValueTargetingExpression;
  TLandingPage = class;
  TLandingPageArray = Array of TLandingPage;
  TLandingPagesListResponse = class;
  TLandingPagesListResponseArray = Array of TLandingPagesListResponse;
  TLandingPagesListResponselandingPages = class;
  TLandingPagesListResponselandingPagesArray = Array of TLandingPagesListResponselandingPages;
  TLastModifiedInfo = class;
  TLastModifiedInfoArray = Array of TLastModifiedInfo;
  TListPopulationClause = class;
  TListPopulationClauseArray = Array of TListPopulationClause;
  TListPopulationClauseterms = class;
  TListPopulationClausetermsArray = Array of TListPopulationClauseterms;
  TListPopulationRule = class;
  TListPopulationRuleArray = Array of TListPopulationRule;
  TListPopulationRulelistPopulationClauses = class;
  TListPopulationRulelistPopulationClausesArray = Array of TListPopulationRulelistPopulationClauses;
  TListPopulationTerm = class;
  TListPopulationTermArray = Array of TListPopulationTerm;
  TListTargetingExpression = class;
  TListTargetingExpressionArray = Array of TListTargetingExpression;
  TLookbackConfiguration = class;
  TLookbackConfigurationArray = Array of TLookbackConfiguration;
  TMetric = class;
  TMetricArray = Array of TMetric;
  TMetro = class;
  TMetroArray = Array of TMetro;
  TMetrosListResponse = class;
  TMetrosListResponseArray = Array of TMetrosListResponse;
  TMetrosListResponsemetros = class;
  TMetrosListResponsemetrosArray = Array of TMetrosListResponsemetros;
  TMobileCarrier = class;
  TMobileCarrierArray = Array of TMobileCarrier;
  TMobileCarriersListResponse = class;
  TMobileCarriersListResponseArray = Array of TMobileCarriersListResponse;
  TMobileCarriersListResponsemobileCarriers = class;
  TMobileCarriersListResponsemobileCarriersArray = Array of TMobileCarriersListResponsemobileCarriers;
  TObjectFilter = class;
  TObjectFilterArray = Array of TObjectFilter;
  TObjectFilterobjectIds = class;
  TObjectFilterobjectIdsArray = Array of TObjectFilterobjectIds;
  TOffsetPosition = class;
  TOffsetPositionArray = Array of TOffsetPosition;
  TOmnitureSettings = class;
  TOmnitureSettingsArray = Array of TOmnitureSettings;
  TOperatingSystem = class;
  TOperatingSystemArray = Array of TOperatingSystem;
  TOperatingSystemVersion = class;
  TOperatingSystemVersionArray = Array of TOperatingSystemVersion;
  TOperatingSystemVersionsListResponse = class;
  TOperatingSystemVersionsListResponseArray = Array of TOperatingSystemVersionsListResponse;
  TOperatingSystemVersionsListResponseoperatingSystemVersions = class;
  TOperatingSystemVersionsListResponseoperatingSystemVersionsArray = Array of TOperatingSystemVersionsListResponseoperatingSystemVersions;
  TOperatingSystemsListResponse = class;
  TOperatingSystemsListResponseArray = Array of TOperatingSystemsListResponse;
  TOperatingSystemsListResponseoperatingSystems = class;
  TOperatingSystemsListResponseoperatingSystemsArray = Array of TOperatingSystemsListResponseoperatingSystems;
  TOptimizationActivity = class;
  TOptimizationActivityArray = Array of TOptimizationActivity;
  TOrder = class;
  TOrderArray = Array of TOrder;
  TOrderapproverUserProfileIds = class;
  TOrderapproverUserProfileIdsArray = Array of TOrderapproverUserProfileIds;
  TOrdercontacts = class;
  TOrdercontactsArray = Array of TOrdercontacts;
  TOrdersiteId = class;
  TOrdersiteIdArray = Array of TOrdersiteId;
  TOrdersiteNames = class;
  TOrdersiteNamesArray = Array of TOrdersiteNames;
  TOrderContact = class;
  TOrderContactArray = Array of TOrderContact;
  TOrderDocument = class;
  TOrderDocumentArray = Array of TOrderDocument;
  TOrderDocumentapprovedByUserProfileIds = class;
  TOrderDocumentapprovedByUserProfileIdsArray = Array of TOrderDocumentapprovedByUserProfileIds;
  TOrderDocumentsListResponse = class;
  TOrderDocumentsListResponseArray = Array of TOrderDocumentsListResponse;
  TOrderDocumentsListResponseorderDocuments = class;
  TOrderDocumentsListResponseorderDocumentsArray = Array of TOrderDocumentsListResponseorderDocuments;
  TOrdersListResponse = class;
  TOrdersListResponseArray = Array of TOrdersListResponse;
  TOrdersListResponseorders = class;
  TOrdersListResponseordersArray = Array of TOrdersListResponseorders;
  TPathToConversionReportCompatibleFields = class;
  TPathToConversionReportCompatibleFieldsArray = Array of TPathToConversionReportCompatibleFields;
  TPathToConversionReportCompatibleFieldsconversionDimensions = class;
  TPathToConversionReportCompatibleFieldsconversionDimensionsArray = Array of TPathToConversionReportCompatibleFieldsconversionDimensions;
  TPathToConversionReportCompatibleFieldscustomFloodlightVariables = class;
  TPathToConversionReportCompatibleFieldscustomFloodlightVariablesArray = Array of TPathToConversionReportCompatibleFieldscustomFloodlightVariables;
  TPathToConversionReportCompatibleFieldsmetrics = class;
  TPathToConversionReportCompatibleFieldsmetricsArray = Array of TPathToConversionReportCompatibleFieldsmetrics;
  TPathToConversionReportCompatibleFieldsperInteractionDimensions = class;
  TPathToConversionReportCompatibleFieldsperInteractionDimensionsArray = Array of TPathToConversionReportCompatibleFieldsperInteractionDimensions;
  TPlacement = class;
  TPlacementArray = Array of TPlacement;
  TPlacementtagFormats = class;
  TPlacementtagFormatsArray = Array of TPlacementtagFormats;
  TPlacementAssignment = class;
  TPlacementAssignmentArray = Array of TPlacementAssignment;
  TPlacementGroup = class;
  TPlacementGroupArray = Array of TPlacementGroup;
  TPlacementGroupchildPlacementIds = class;
  TPlacementGroupchildPlacementIdsArray = Array of TPlacementGroupchildPlacementIds;
  TPlacementGroupsListResponse = class;
  TPlacementGroupsListResponseArray = Array of TPlacementGroupsListResponse;
  TPlacementGroupsListResponseplacementGroups = class;
  TPlacementGroupsListResponseplacementGroupsArray = Array of TPlacementGroupsListResponseplacementGroups;
  TPlacementStrategiesListResponse = class;
  TPlacementStrategiesListResponseArray = Array of TPlacementStrategiesListResponse;
  TPlacementStrategiesListResponseplacementStrategies = class;
  TPlacementStrategiesListResponseplacementStrategiesArray = Array of TPlacementStrategiesListResponseplacementStrategies;
  TPlacementStrategy = class;
  TPlacementStrategyArray = Array of TPlacementStrategy;
  TPlacementTag = class;
  TPlacementTagArray = Array of TPlacementTag;
  TPlacementTagtagDatas = class;
  TPlacementTagtagDatasArray = Array of TPlacementTagtagDatas;
  TPlacementsGenerateTagsResponse = class;
  TPlacementsGenerateTagsResponseArray = Array of TPlacementsGenerateTagsResponse;
  TPlacementsGenerateTagsResponseplacementTags = class;
  TPlacementsGenerateTagsResponseplacementTagsArray = Array of TPlacementsGenerateTagsResponseplacementTags;
  TPlacementsListResponse = class;
  TPlacementsListResponseArray = Array of TPlacementsListResponse;
  TPlacementsListResponseplacements = class;
  TPlacementsListResponseplacementsArray = Array of TPlacementsListResponseplacements;
  TPlatformType = class;
  TPlatformTypeArray = Array of TPlatformType;
  TPlatformTypesListResponse = class;
  TPlatformTypesListResponseArray = Array of TPlatformTypesListResponse;
  TPlatformTypesListResponseplatformTypes = class;
  TPlatformTypesListResponseplatformTypesArray = Array of TPlatformTypesListResponseplatformTypes;
  TPopupWindowProperties = class;
  TPopupWindowPropertiesArray = Array of TPopupWindowProperties;
  TPostalCode = class;
  TPostalCodeArray = Array of TPostalCode;
  TPostalCodesListResponse = class;
  TPostalCodesListResponseArray = Array of TPostalCodesListResponse;
  TPostalCodesListResponsepostalCodes = class;
  TPostalCodesListResponsepostalCodesArray = Array of TPostalCodesListResponsepostalCodes;
  TPricing = class;
  TPricingArray = Array of TPricing;
  TPricingflights = class;
  TPricingflightsArray = Array of TPricingflights;
  TPricingSchedule = class;
  TPricingScheduleArray = Array of TPricingSchedule;
  TPricingSchedulepricingPeriods = class;
  TPricingSchedulepricingPeriodsArray = Array of TPricingSchedulepricingPeriods;
  TPricingSchedulePricingPeriod = class;
  TPricingSchedulePricingPeriodArray = Array of TPricingSchedulePricingPeriod;
  TProgrammaticSetting = class;
  TProgrammaticSettingArray = Array of TProgrammaticSetting;
  TProgrammaticSettingadxDealIds = class;
  TProgrammaticSettingadxDealIdsArray = Array of TProgrammaticSettingadxDealIds;
  TProgrammaticSettingtraffickerEmails = class;
  TProgrammaticSettingtraffickerEmailsArray = Array of TProgrammaticSettingtraffickerEmails;
  TProject = class;
  TProjectArray = Array of TProject;
  TProjectsListResponse = class;
  TProjectsListResponseArray = Array of TProjectsListResponse;
  TProjectsListResponseprojects = class;
  TProjectsListResponseprojectsArray = Array of TProjectsListResponseprojects;
  TReachReportCompatibleFields = class;
  TReachReportCompatibleFieldsArray = Array of TReachReportCompatibleFields;
  TReachReportCompatibleFieldsdimensionFilters = class;
  TReachReportCompatibleFieldsdimensionFiltersArray = Array of TReachReportCompatibleFieldsdimensionFilters;
  TReachReportCompatibleFieldsdimensions = class;
  TReachReportCompatibleFieldsdimensionsArray = Array of TReachReportCompatibleFieldsdimensions;
  TReachReportCompatibleFieldsmetrics = class;
  TReachReportCompatibleFieldsmetricsArray = Array of TReachReportCompatibleFieldsmetrics;
  TReachReportCompatibleFieldspivotedActivityMetrics = class;
  TReachReportCompatibleFieldspivotedActivityMetricsArray = Array of TReachReportCompatibleFieldspivotedActivityMetrics;
  TReachReportCompatibleFieldsreachByFrequencyMetrics = class;
  TReachReportCompatibleFieldsreachByFrequencyMetricsArray = Array of TReachReportCompatibleFieldsreachByFrequencyMetrics;
  TRecipient = class;
  TRecipientArray = Array of TRecipient;
  TRegion = class;
  TRegionArray = Array of TRegion;
  TRegionsListResponse = class;
  TRegionsListResponseArray = Array of TRegionsListResponse;
  TRegionsListResponseregions = class;
  TRegionsListResponseregionsArray = Array of TRegionsListResponseregions;
  TRemarketingList = class;
  TRemarketingListArray = Array of TRemarketingList;
  TRemarketingListShare = class;
  TRemarketingListShareArray = Array of TRemarketingListShare;
  TRemarketingListSharesharedAccountIds = class;
  TRemarketingListSharesharedAccountIdsArray = Array of TRemarketingListSharesharedAccountIds;
  TRemarketingListSharesharedAdvertiserIds = class;
  TRemarketingListSharesharedAdvertiserIdsArray = Array of TRemarketingListSharesharedAdvertiserIds;
  TRemarketingListsListResponse = class;
  TRemarketingListsListResponseArray = Array of TRemarketingListsListResponse;
  TRemarketingListsListResponseremarketingLists = class;
  TRemarketingListsListResponseremarketingListsArray = Array of TRemarketingListsListResponseremarketingLists;
  TReport = class;
  TReportArray = Array of TReport;
  TReportcriteria = class;
  TReportcriteriaArray = Array of TReportcriteria;
  TReportcriteriadimensionFilters = class;
  TReportcriteriadimensionFiltersArray = Array of TReportcriteriadimensionFilters;
  TReportcriteriadimensions = class;
  TReportcriteriadimensionsArray = Array of TReportcriteriadimensions;
  TReportcriteriametricNames = class;
  TReportcriteriametricNamesArray = Array of TReportcriteriametricNames;
  TReportcrossDimensionReachCriteria = class;
  TReportcrossDimensionReachCriteriaArray = Array of TReportcrossDimensionReachCriteria;
  TReportcrossDimensionReachCriteriabreakdown = class;
  TReportcrossDimensionReachCriteriabreakdownArray = Array of TReportcrossDimensionReachCriteriabreakdown;
  TReportcrossDimensionReachCriteriadimensionFilters = class;
  TReportcrossDimensionReachCriteriadimensionFiltersArray = Array of TReportcrossDimensionReachCriteriadimensionFilters;
  TReportcrossDimensionReachCriteriametricNames = class;
  TReportcrossDimensionReachCriteriametricNamesArray = Array of TReportcrossDimensionReachCriteriametricNames;
  TReportcrossDimensionReachCriteriaoverlapMetricNames = class;
  TReportcrossDimensionReachCriteriaoverlapMetricNamesArray = Array of TReportcrossDimensionReachCriteriaoverlapMetricNames;
  TReportdelivery = class;
  TReportdeliveryArray = Array of TReportdelivery;
  TReportdeliveryrecipients = class;
  TReportdeliveryrecipientsArray = Array of TReportdeliveryrecipients;
  TReportfloodlightCriteria = class;
  TReportfloodlightCriteriaArray = Array of TReportfloodlightCriteria;
  TReportfloodlightCriteriacustomRichMediaEvents = class;
  TReportfloodlightCriteriacustomRichMediaEventsArray = Array of TReportfloodlightCriteriacustomRichMediaEvents;
  TReportfloodlightCriteriadimensionFilters = class;
  TReportfloodlightCriteriadimensionFiltersArray = Array of TReportfloodlightCriteriadimensionFilters;
  TReportfloodlightCriteriadimensions = class;
  TReportfloodlightCriteriadimensionsArray = Array of TReportfloodlightCriteriadimensions;
  TReportfloodlightCriteriametricNames = class;
  TReportfloodlightCriteriametricNamesArray = Array of TReportfloodlightCriteriametricNames;
  TReportfloodlightCriteriareportProperties = class;
  TReportfloodlightCriteriareportPropertiesArray = Array of TReportfloodlightCriteriareportProperties;
  TReportpathToConversionCriteria = class;
  TReportpathToConversionCriteriaArray = Array of TReportpathToConversionCriteria;
  TReportpathToConversionCriteriaactivityFilters = class;
  TReportpathToConversionCriteriaactivityFiltersArray = Array of TReportpathToConversionCriteriaactivityFilters;
  TReportpathToConversionCriteriaconversionDimensions = class;
  TReportpathToConversionCriteriaconversionDimensionsArray = Array of TReportpathToConversionCriteriaconversionDimensions;
  TReportpathToConversionCriteriacustomFloodlightVariables = class;
  TReportpathToConversionCriteriacustomFloodlightVariablesArray = Array of TReportpathToConversionCriteriacustomFloodlightVariables;
  TReportpathToConversionCriteriacustomRichMediaEvents = class;
  TReportpathToConversionCriteriacustomRichMediaEventsArray = Array of TReportpathToConversionCriteriacustomRichMediaEvents;
  TReportpathToConversionCriteriametricNames = class;
  TReportpathToConversionCriteriametricNamesArray = Array of TReportpathToConversionCriteriametricNames;
  TReportpathToConversionCriteriaperInteractionDimensions = class;
  TReportpathToConversionCriteriaperInteractionDimensionsArray = Array of TReportpathToConversionCriteriaperInteractionDimensions;
  TReportpathToConversionCriteriareportProperties = class;
  TReportpathToConversionCriteriareportPropertiesArray = Array of TReportpathToConversionCriteriareportProperties;
  TReportreachCriteria = class;
  TReportreachCriteriaArray = Array of TReportreachCriteria;
  TReportreachCriteriadimensionFilters = class;
  TReportreachCriteriadimensionFiltersArray = Array of TReportreachCriteriadimensionFilters;
  TReportreachCriteriadimensions = class;
  TReportreachCriteriadimensionsArray = Array of TReportreachCriteriadimensions;
  TReportreachCriteriametricNames = class;
  TReportreachCriteriametricNamesArray = Array of TReportreachCriteriametricNames;
  TReportreachCriteriareachByFrequencyMetricNames = class;
  TReportreachCriteriareachByFrequencyMetricNamesArray = Array of TReportreachCriteriareachByFrequencyMetricNames;
  TReportschedule = class;
  TReportscheduleArray = Array of TReportschedule;
  TReportschedulerepeatsOnWeekDays = class;
  TReportschedulerepeatsOnWeekDaysArray = Array of TReportschedulerepeatsOnWeekDays;
  TReportCompatibleFields = class;
  TReportCompatibleFieldsArray = Array of TReportCompatibleFields;
  TReportCompatibleFieldsdimensionFilters = class;
  TReportCompatibleFieldsdimensionFiltersArray = Array of TReportCompatibleFieldsdimensionFilters;
  TReportCompatibleFieldsdimensions = class;
  TReportCompatibleFieldsdimensionsArray = Array of TReportCompatibleFieldsdimensions;
  TReportCompatibleFieldsmetrics = class;
  TReportCompatibleFieldsmetricsArray = Array of TReportCompatibleFieldsmetrics;
  TReportCompatibleFieldspivotedActivityMetrics = class;
  TReportCompatibleFieldspivotedActivityMetricsArray = Array of TReportCompatibleFieldspivotedActivityMetrics;
  TReportList = class;
  TReportListArray = Array of TReportList;
  TReportListitems = class;
  TReportListitemsArray = Array of TReportListitems;
  TReportsConfiguration = class;
  TReportsConfigurationArray = Array of TReportsConfiguration;
  TRichMediaExitOverride = class;
  TRichMediaExitOverrideArray = Array of TRichMediaExitOverride;
  TSite = class;
  TSiteArray = Array of TSite;
  TSitesiteContacts = class;
  TSitesiteContactsArray = Array of TSitesiteContacts;
  TSiteContact = class;
  TSiteContactArray = Array of TSiteContact;
  TSiteSettings = class;
  TSiteSettingsArray = Array of TSiteSettings;
  TSitesListResponse = class;
  TSitesListResponseArray = Array of TSitesListResponse;
  TSitesListResponsesites = class;
  TSitesListResponsesitesArray = Array of TSitesListResponsesites;
  TSize = class;
  TSizeArray = Array of TSize;
  TSizesListResponse = class;
  TSizesListResponseArray = Array of TSizesListResponse;
  TSizesListResponsesizes = class;
  TSizesListResponsesizesArray = Array of TSizesListResponsesizes;
  TSortedDimension = class;
  TSortedDimensionArray = Array of TSortedDimension;
  TSubaccount = class;
  TSubaccountArray = Array of TSubaccount;
  TSubaccountavailablePermissionIds = class;
  TSubaccountavailablePermissionIdsArray = Array of TSubaccountavailablePermissionIds;
  TSubaccountsListResponse = class;
  TSubaccountsListResponseArray = Array of TSubaccountsListResponse;
  TSubaccountsListResponsesubaccounts = class;
  TSubaccountsListResponsesubaccountsArray = Array of TSubaccountsListResponsesubaccounts;
  TTagData = class;
  TTagDataArray = Array of TTagData;
  TTagSetting = class;
  TTagSettingArray = Array of TTagSetting;
  TTagSettings = class;
  TTagSettingsArray = Array of TTagSettings;
  TTargetWindow = class;
  TTargetWindowArray = Array of TTargetWindow;
  TTargetableRemarketingList = class;
  TTargetableRemarketingListArray = Array of TTargetableRemarketingList;
  TTargetableRemarketingListsListResponse = class;
  TTargetableRemarketingListsListResponseArray = Array of TTargetableRemarketingListsListResponse;
  TTargetableRemarketingListsListResponsetargetableRemarketingLists = class;
  TTargetableRemarketingListsListResponsetargetableRemarketingListsArray = Array of TTargetableRemarketingListsListResponsetargetableRemarketingLists;
  TTechnologyTargeting = class;
  TTechnologyTargetingArray = Array of TTechnologyTargeting;
  TTechnologyTargetingbrowsers = class;
  TTechnologyTargetingbrowsersArray = Array of TTechnologyTargetingbrowsers;
  TTechnologyTargetingconnectionTypes = class;
  TTechnologyTargetingconnectionTypesArray = Array of TTechnologyTargetingconnectionTypes;
  TTechnologyTargetingmobileCarriers = class;
  TTechnologyTargetingmobileCarriersArray = Array of TTechnologyTargetingmobileCarriers;
  TTechnologyTargetingoperatingSystemVersions = class;
  TTechnologyTargetingoperatingSystemVersionsArray = Array of TTechnologyTargetingoperatingSystemVersions;
  TTechnologyTargetingoperatingSystems = class;
  TTechnologyTargetingoperatingSystemsArray = Array of TTechnologyTargetingoperatingSystems;
  TTechnologyTargetingplatformTypes = class;
  TTechnologyTargetingplatformTypesArray = Array of TTechnologyTargetingplatformTypes;
  TThirdPartyTrackingUrl = class;
  TThirdPartyTrackingUrlArray = Array of TThirdPartyTrackingUrl;
  TUserDefinedVariableConfiguration = class;
  TUserDefinedVariableConfigurationArray = Array of TUserDefinedVariableConfiguration;
  TUserProfile = class;
  TUserProfileArray = Array of TUserProfile;
  TUserProfileList = class;
  TUserProfileListArray = Array of TUserProfileList;
  TUserProfileListitems = class;
  TUserProfileListitemsArray = Array of TUserProfileListitems;
  TUserRole = class;
  TUserRoleArray = Array of TUserRole;
  TUserRolepermissions = class;
  TUserRolepermissionsArray = Array of TUserRolepermissions;
  TUserRolePermission = class;
  TUserRolePermissionArray = Array of TUserRolePermission;
  TUserRolePermissionGroup = class;
  TUserRolePermissionGroupArray = Array of TUserRolePermissionGroup;
  TUserRolePermissionGroupsListResponse = class;
  TUserRolePermissionGroupsListResponseArray = Array of TUserRolePermissionGroupsListResponse;
  TUserRolePermissionGroupsListResponseuserRolePermissionGroups = class;
  TUserRolePermissionGroupsListResponseuserRolePermissionGroupsArray = Array of TUserRolePermissionGroupsListResponseuserRolePermissionGroups;
  TUserRolePermissionsListResponse = class;
  TUserRolePermissionsListResponseArray = Array of TUserRolePermissionsListResponse;
  TUserRolePermissionsListResponseuserRolePermissions = class;
  TUserRolePermissionsListResponseuserRolePermissionsArray = Array of TUserRolePermissionsListResponseuserRolePermissions;
  TUserRolesListResponse = class;
  TUserRolesListResponseArray = Array of TUserRolesListResponse;
  TUserRolesListResponseuserRoles = class;
  TUserRolesListResponseuserRolesArray = Array of TUserRolesListResponseuserRoles;
  
  { --------------------------------------------------------------------
    TAccount
    --------------------------------------------------------------------}
  
  TAccount = Class(TGoogleBaseObject)
  Private
    FaccountPermissionIds : TAccountaccountPermissionIds;
    FaccountProfile : string;
    Factive : boolean;
    FactiveAdsLimitTier : string;
    FactiveViewOptOut : boolean;
    FavailablePermissionIds : TAccountavailablePermissionIds;
    FcomscoreVceEnabled : boolean;
    FcountryId : string;
    FcurrencyId : string;
    FdefaultCreativeSizeId : string;
    Fdescription : string;
    Fid : string;
    Fkind : string;
    Flocale : string;
    FmaximumImageSize : string;
    Fname : string;
    FnielsenOcrEnabled : boolean;
    FreportsConfiguration : TReportsConfiguration;
    FteaserSizeLimit : string;
  Protected
    //Property setters
    Procedure SetaccountPermissionIds(AIndex : Integer; AValue : TAccountaccountPermissionIds); virtual;
    Procedure SetaccountProfile(AIndex : Integer; AValue : string); virtual;
    Procedure Setactive(AIndex : Integer; AValue : boolean); virtual;
    Procedure SetactiveAdsLimitTier(AIndex : Integer; AValue : string); virtual;
    Procedure SetactiveViewOptOut(AIndex : Integer; AValue : boolean); virtual;
    Procedure SetavailablePermissionIds(AIndex : Integer; AValue : TAccountavailablePermissionIds); virtual;
    Procedure SetcomscoreVceEnabled(AIndex : Integer; AValue : boolean); virtual;
    Procedure SetcountryId(AIndex : Integer; AValue : string); virtual;
    Procedure SetcurrencyId(AIndex : Integer; AValue : string); virtual;
    Procedure SetdefaultCreativeSizeId(AIndex : Integer; AValue : string); virtual;
    Procedure Setdescription(AIndex : Integer; AValue : string); virtual;
    Procedure Setid(AIndex : Integer; AValue : string); virtual;
    Procedure Setkind(AIndex : Integer; AValue : string); virtual;
    Procedure Setlocale(AIndex : Integer; AValue : string); virtual;
    Procedure SetmaximumImageSize(AIndex : Integer; AValue : string); virtual;
    Procedure Setname(AIndex : Integer; AValue : string); virtual;
    Procedure SetnielsenOcrEnabled(AIndex : Integer; AValue : boolean); virtual;
    Procedure SetreportsConfiguration(AIndex : Integer; AValue : TReportsConfiguration); virtual;
    Procedure SetteaserSizeLimit(AIndex : Integer; AValue : string); virtual;
  Public
  Published
    Property accountPermissionIds : TAccountaccountPermissionIds Index 0 Read FaccountPermissionIds Write SetaccountPermissionIds;
    Property accountProfile : string Index 8 Read FaccountProfile Write SetaccountProfile;
    Property active : boolean Index 16 Read Factive Write Setactive;
    Property activeAdsLimitTier : string Index 24 Read FactiveAdsLimitTier Write SetactiveAdsLimitTier;
    Property activeViewOptOut : boolean Index 32 Read FactiveViewOptOut Write SetactiveViewOptOut;
    Property availablePermissionIds : TAccountavailablePermissionIds Index 40 Read FavailablePermissionIds Write SetavailablePermissionIds;
    Property comscoreVceEnabled : boolean Index 48 Read FcomscoreVceEnabled Write SetcomscoreVceEnabled;
    Property countryId : string Index 56 Read FcountryId Write SetcountryId;
    Property currencyId : string Index 64 Read FcurrencyId Write SetcurrencyId;
    Property defaultCreativeSizeId : string Index 72 Read FdefaultCreativeSizeId Write SetdefaultCreativeSizeId;
    Property description : string Index 80 Read Fdescription Write Setdescription;
    Property id : string Index 88 Read Fid Write Setid;
    Property kind : string Index 96 Read Fkind Write Setkind;
    Property locale : string Index 104 Read Flocale Write Setlocale;
    Property maximumImageSize : string Index 112 Read FmaximumImageSize Write SetmaximumImageSize;
    Property name : string Index 120 Read Fname Write Setname;
    Property nielsenOcrEnabled : boolean Index 128 Read FnielsenOcrEnabled Write SetnielsenOcrEnabled;
    Property reportsConfiguration : TReportsConfiguration Index 136 Read FreportsConfiguration Write SetreportsConfiguration;
    Property teaserSizeLimit : string Index 144 Read FteaserSizeLimit Write SetteaserSizeLimit;
  end;
  TAccountClass = Class of TAccount;
  
  { --------------------------------------------------------------------
    TAccountaccountPermissionIds
    --------------------------------------------------------------------}
  
  TAccountaccountPermissionIds = Class(TGoogleBaseObject)
  Private
  Protected
    //Property setters
  Public
  Published
  end;
  TAccountaccountPermissionIdsClass = Class of TAccountaccountPermissionIds;
  
  { --------------------------------------------------------------------
    TAccountavailablePermissionIds
    --------------------------------------------------------------------}
  
  TAccountavailablePermissionIds = Class(TGoogleBaseObject)
  Private
  Protected
    //Property setters
  Public
  Published
  end;
  TAccountavailablePermissionIdsClass = Class of TAccountavailablePermissionIds;
  
  { --------------------------------------------------------------------
    TAccountActiveAdSummary
    --------------------------------------------------------------------}
  
  TAccountActiveAdSummary = Class(TGoogleBaseObject)
  Private
    FaccountId : string;
    FactiveAds : string;
    FactiveAdsLimitTier : string;
    FavailableAds : string;
    Fkind : string;
  Protected
    //Property setters
    Procedure SetaccountId(AIndex : Integer; AValue : string); virtual;
    Procedure SetactiveAds(AIndex : Integer; AValue : string); virtual;
    Procedure SetactiveAdsLimitTier(AIndex : Integer; AValue : string); virtual;
    Procedure SetavailableAds(AIndex : Integer; AValue : string); virtual;
    Procedure Setkind(AIndex : Integer; AValue : string); virtual;
  Public
  Published
    Property accountId : string Index 0 Read FaccountId Write SetaccountId;
    Property activeAds : string Index 8 Read FactiveAds Write SetactiveAds;
    Property activeAdsLimitTier : string Index 16 Read FactiveAdsLimitTier Write SetactiveAdsLimitTier;
    Property availableAds : string Index 24 Read FavailableAds Write SetavailableAds;
    Property kind : string Index 32 Read Fkind Write Setkind;
  end;
  TAccountActiveAdSummaryClass = Class of TAccountActiveAdSummary;
  
  { --------------------------------------------------------------------
    TAccountPermission
    --------------------------------------------------------------------}
  
  TAccountPermission = Class(TGoogleBaseObject)
  Private
    FaccountProfiles : TAccountPermissionaccountProfiles;
    Fid : string;
    Fkind : string;
    Flevel : string;
    Fname : string;
    FpermissionGroupId : string;
  Protected
    //Property setters
    Procedure SetaccountProfiles(AIndex : Integer; AValue : TAccountPermissionaccountProfiles); virtual;
    Procedure Setid(AIndex : Integer; AValue : string); virtual;
    Procedure Setkind(AIndex : Integer; AValue : string); virtual;
    Procedure Setlevel(AIndex : Integer; AValue : string); virtual;
    Procedure Setname(AIndex : Integer; AValue : string); virtual;
    Procedure SetpermissionGroupId(AIndex : Integer; AValue : string); virtual;
  Public
  Published
    Property accountProfiles : TAccountPermissionaccountProfiles Index 0 Read FaccountProfiles Write SetaccountProfiles;
    Property id : string Index 8 Read Fid Write Setid;
    Property kind : string Index 16 Read Fkind Write Setkind;
    Property level : string Index 24 Read Flevel Write Setlevel;
    Property name : string Index 32 Read Fname Write Setname;
    Property permissionGroupId : string Index 40 Read FpermissionGroupId Write SetpermissionGroupId;
  end;
  TAccountPermissionClass = Class of TAccountPermission;
  
  { --------------------------------------------------------------------
    TAccountPermissionaccountProfiles
    --------------------------------------------------------------------}
  
  TAccountPermissionaccountProfiles = Class(TGoogleBaseObject)
  Private
  Protected
    //Property setters
  Public
  Published
  end;
  TAccountPermissionaccountProfilesClass = Class of TAccountPermissionaccountProfiles;
  
  { --------------------------------------------------------------------
    TAccountPermissionGroup
    --------------------------------------------------------------------}
  
  TAccountPermissionGroup = Class(TGoogleBaseObject)
  Private
    Fid : string;
    Fkind : string;
    Fname : string;
  Protected
    //Property setters
    Procedure Setid(AIndex : Integer; AValue : string); virtual;
    Procedure Setkind(AIndex : Integer; AValue : string); virtual;
    Procedure Setname(AIndex : Integer; AValue : string); virtual;
  Public
  Published
    Property id : string Index 0 Read Fid Write Setid;
    Property kind : string Index 8 Read Fkind Write Setkind;
    Property name : string Index 16 Read Fname Write Setname;
  end;
  TAccountPermissionGroupClass = Class of TAccountPermissionGroup;
  
  { --------------------------------------------------------------------
    TAccountPermissionGroupsListResponse
    --------------------------------------------------------------------}
  
  TAccountPermissionGroupsListResponse = Class(TGoogleBaseObject)
  Private
    FaccountPermissionGroups : TAccountPermissionGroupsListResponseaccountPermissionGroups;
    Fkind : string;
  Protected
    //Property setters
    Procedure SetaccountPermissionGroups(AIndex : Integer; AValue : TAccountPermissionGroupsListResponseaccountPermissionGroups); virtual;
    Procedure Setkind(AIndex : Integer; AValue : string); virtual;
  Public
  Published
    Property accountPermissionGroups : TAccountPermissionGroupsListResponseaccountPermissionGroups Index 0 Read FaccountPermissionGroups Write SetaccountPermissionGroups;
    Property kind : string Index 8 Read Fkind Write Setkind;
  end;
  TAccountPermissionGroupsListResponseClass = Class of TAccountPermissionGroupsListResponse;
  
  { --------------------------------------------------------------------
    TAccountPermissionGroupsListResponseaccountPermissionGroups
    --------------------------------------------------------------------}
  
  TAccountPermissionGroupsListResponseaccountPermissionGroups = Class(TGoogleBaseObject)
  Private
  Protected
    //Property setters
  Public
  Published
  end;
  TAccountPermissionGroupsListResponseaccountPermissionGroupsClass = Class of TAccountPermissionGroupsListResponseaccountPermissionGroups;
  
  { --------------------------------------------------------------------
    TAccountPermissionsListResponse
    --------------------------------------------------------------------}
  
  TAccountPermissionsListResponse = Class(TGoogleBaseObject)
  Private
    FaccountPermissions : TAccountPermissionsListResponseaccountPermissions;
    Fkind : string;
  Protected
    //Property setters
    Procedure SetaccountPermissions(AIndex : Integer; AValue : TAccountPermissionsListResponseaccountPermissions); virtual;
    Procedure Setkind(AIndex : Integer; AValue : string); virtual;
  Public
  Published
    Property accountPermissions : TAccountPermissionsListResponseaccountPermissions Index 0 Read FaccountPermissions Write SetaccountPermissions;
    Property kind : string Index 8 Read Fkind Write Setkind;
  end;
  TAccountPermissionsListResponseClass = Class of TAccountPermissionsListResponse;
  
  { --------------------------------------------------------------------
    TAccountPermissionsListResponseaccountPermissions
    --------------------------------------------------------------------}
  
  TAccountPermissionsListResponseaccountPermissions = Class(TGoogleBaseObject)
  Private
  Protected
    //Property setters
  Public
  Published
  end;
  TAccountPermissionsListResponseaccountPermissionsClass = Class of TAccountPermissionsListResponseaccountPermissions;
  
  { --------------------------------------------------------------------
    TAccountUserProfile
    --------------------------------------------------------------------}
  
  TAccountUserProfile = Class(TGoogleBaseObject)
  Private
    FaccountId : string;
    Factive : boolean;
    FadvertiserFilter : TObjectFilter;
    FcampaignFilter : TObjectFilter;
    Fcomments : string;
    Femail : string;
    Fid : string;
    Fkind : string;
    Flocale : string;
    Fname : string;
    FsiteFilter : TObjectFilter;
    FsubaccountId : string;
    FtraffickerType : string;
    FuserAccessType : string;
    FuserRoleFilter : TObjectFilter;
    FuserRoleId : string;
  Protected
    //Property setters
    Procedure SetaccountId(AIndex : Integer; AValue : string); virtual;
    Procedure Setactive(AIndex : Integer; AValue : boolean); virtual;
    Procedure SetadvertiserFilter(AIndex : Integer; AValue : TObjectFilter); virtual;
    Procedure SetcampaignFilter(AIndex : Integer; AValue : TObjectFilter); virtual;
    Procedure Setcomments(AIndex : Integer; AValue : string); virtual;
    Procedure Setemail(AIndex : Integer; AValue : string); virtual;
    Procedure Setid(AIndex : Integer; AValue : string); virtual;
    Procedure Setkind(AIndex : Integer; AValue : string); virtual;
    Procedure Setlocale(AIndex : Integer; AValue : string); virtual;
    Procedure Setname(AIndex : Integer; AValue : string); virtual;
    Procedure SetsiteFilter(AIndex : Integer; AValue : TObjectFilter); virtual;
    Procedure SetsubaccountId(AIndex : Integer; AValue : string); virtual;
    Procedure SettraffickerType(AIndex : Integer; AValue : string); virtual;
    Procedure SetuserAccessType(AIndex : Integer; AValue : string); virtual;
    Procedure SetuserRoleFilter(AIndex : Integer; AValue : TObjectFilter); virtual;
    Procedure SetuserRoleId(AIndex : Integer; AValue : string); virtual;
  Public
  Published
    Property accountId : string Index 0 Read FaccountId Write SetaccountId;
    Property active : boolean Index 8 Read Factive Write Setactive;
    Property advertiserFilter : TObjectFilter Index 16 Read FadvertiserFilter Write SetadvertiserFilter;
    Property campaignFilter : TObjectFilter Index 24 Read FcampaignFilter Write SetcampaignFilter;
    Property comments : string Index 32 Read Fcomments Write Setcomments;
    Property email : string Index 40 Read Femail Write Setemail;
    Property id : string Index 48 Read Fid Write Setid;
    Property kind : string Index 56 Read Fkind Write Setkind;
    Property locale : string Index 64 Read Flocale Write Setlocale;
    Property name : string Index 72 Read Fname Write Setname;
    Property siteFilter : TObjectFilter Index 80 Read FsiteFilter Write SetsiteFilter;
    Property subaccountId : string Index 88 Read FsubaccountId Write SetsubaccountId;
    Property traffickerType : string Index 96 Read FtraffickerType Write SettraffickerType;
    Property userAccessType : string Index 104 Read FuserAccessType Write SetuserAccessType;
    Property userRoleFilter : TObjectFilter Index 112 Read FuserRoleFilter Write SetuserRoleFilter;
    Property userRoleId : string Index 120 Read FuserRoleId Write SetuserRoleId;
  end;
  TAccountUserProfileClass = Class of TAccountUserProfile;
  
  { --------------------------------------------------------------------
    TAccountUserProfilesListResponse
    --------------------------------------------------------------------}
  
  TAccountUserProfilesListResponse = Class(TGoogleBaseObject)
  Private
    FaccountUserProfiles : TAccountUserProfilesListResponseaccountUserProfiles;
    Fkind : string;
    FnextPageToken : string;
  Protected
    //Property setters
    Procedure SetaccountUserProfiles(AIndex : Integer; AValue : TAccountUserProfilesListResponseaccountUserProfiles); virtual;
    Procedure Setkind(AIndex : Integer; AValue : string); virtual;
    Procedure SetnextPageToken(AIndex : Integer; AValue : string); virtual;
  Public
  Published
    Property accountUserProfiles : TAccountUserProfilesListResponseaccountUserProfiles Index 0 Read FaccountUserProfiles Write SetaccountUserProfiles;
    Property kind : string Index 8 Read Fkind Write Setkind;
    Property nextPageToken : string Index 16 Read FnextPageToken Write SetnextPageToken;
  end;
  TAccountUserProfilesListResponseClass = Class of TAccountUserProfilesListResponse;
  
  { --------------------------------------------------------------------
    TAccountUserProfilesListResponseaccountUserProfiles
    --------------------------------------------------------------------}
  
  TAccountUserProfilesListResponseaccountUserProfiles = Class(TGoogleBaseObject)
  Private
  Protected
    //Property setters
  Public
  Published
  end;
  TAccountUserProfilesListResponseaccountUserProfilesClass = Class of TAccountUserProfilesListResponseaccountUserProfiles;
  
  { --------------------------------------------------------------------
    TAccountsListResponse
    --------------------------------------------------------------------}
  
  TAccountsListResponse = Class(TGoogleBaseObject)
  Private
    Faccounts : TAccountsListResponseaccounts;
    Fkind : string;
    FnextPageToken : string;
  Protected
    //Property setters
    Procedure Setaccounts(AIndex : Integer; AValue : TAccountsListResponseaccounts); virtual;
    Procedure Setkind(AIndex : Integer; AValue : string); virtual;
    Procedure SetnextPageToken(AIndex : Integer; AValue : string); virtual;
  Public
  Published
    Property accounts : TAccountsListResponseaccounts Index 0 Read Faccounts Write Setaccounts;
    Property kind : string Index 8 Read Fkind Write Setkind;
    Property nextPageToken : string Index 16 Read FnextPageToken Write SetnextPageToken;
  end;
  TAccountsListResponseClass = Class of TAccountsListResponse;
  
  { --------------------------------------------------------------------
    TAccountsListResponseaccounts
    --------------------------------------------------------------------}
  
  TAccountsListResponseaccounts = Class(TGoogleBaseObject)
  Private
  Protected
    //Property setters
  Public
  Published
  end;
  TAccountsListResponseaccountsClass = Class of TAccountsListResponseaccounts;
  
  { --------------------------------------------------------------------
    TActivities
    --------------------------------------------------------------------}
  
  TActivities = Class(TGoogleBaseObject)
  Private
    Ffilters : TActivitiesfilters;
    Fkind : string;
    FmetricNames : TActivitiesmetricNames;
  Protected
    //Property setters
    Procedure Setfilters(AIndex : Integer; AValue : TActivitiesfilters); virtual;
    Procedure Setkind(AIndex : Integer; AValue : string); virtual;
    Procedure SetmetricNames(AIndex : Integer; AValue : TActivitiesmetricNames); virtual;
  Public
  Published
    Property filters : TActivitiesfilters Index 0 Read Ffilters Write Setfilters;
    Property kind : string Index 8 Read Fkind Write Setkind;
    Property metricNames : TActivitiesmetricNames Index 16 Read FmetricNames Write SetmetricNames;
  end;
  TActivitiesClass = Class of TActivities;
  
  { --------------------------------------------------------------------
    TActivitiesfilters
    --------------------------------------------------------------------}
  
  TActivitiesfilters = Class(TGoogleBaseObject)
  Private
  Protected
    //Property setters
  Public
  Published
  end;
  TActivitiesfiltersClass = Class of TActivitiesfilters;
  
  { --------------------------------------------------------------------
    TActivitiesmetricNames
    --------------------------------------------------------------------}
  
  TActivitiesmetricNames = Class(TGoogleBaseObject)
  Private
  Protected
    //Property setters
  Public
  Published
  end;
  TActivitiesmetricNamesClass = Class of TActivitiesmetricNames;
  
  { --------------------------------------------------------------------
    TAd
    --------------------------------------------------------------------}
  
  TAd = Class(TGoogleBaseObject)
  Private
    FaccountId : string;
    Factive : boolean;
    FadvertiserId : string;
    FadvertiserIdDimensionValue : TDimensionValue;
    Farchived : boolean;
    FaudienceSegmentId : string;
    FcampaignId : string;
    FcampaignIdDimensionValue : TDimensionValue;
    FclickThroughUrl : TClickThroughUrl;
    FclickThroughUrlSuffixProperties : TClickThroughUrlSuffixProperties;
    Fcomments : string;
    Fcompatibility : string;
    FcreateInfo : TLastModifiedInfo;
    FcreativeGroupAssignments : TAdcreativeGroupAssignments;
    FcreativeRotation : TCreativeRotation;
    FdayPartTargeting : TDayPartTargeting;
    FdefaultClickThroughEventTagProperties : TDefaultClickThroughEventTagProperties;
    FdeliverySchedule : TDeliverySchedule;
    FdynamicClickTracker : boolean;
    FendTime : TDatetime;
    FeventTagOverrides : TAdeventTagOverrides;
    FgeoTargeting : TGeoTargeting;
    Fid : string;
    FidDimensionValue : TDimensionValue;
    FkeyValueTargetingExpression : TKeyValueTargetingExpression;
    Fkind : string;
    FlastModifiedInfo : TLastModifiedInfo;
    Fname : string;
    FplacementAssignments : TAdplacementAssignments;
    Fremarketing_list_expression : TListTargetingExpression;
    Fsize : TSize;
    FsslCompliant : boolean;
    FsslRequired : boolean;
    FstartTime : TDatetime;
    FsubaccountId : string;
    FtechnologyTargeting : TTechnologyTargeting;
    F_type : string;
  Protected
    Class Function ExportPropertyName(Const AName : String) : string; override;
    //Property setters
    Procedure SetaccountId(AIndex : Integer; AValue : string); virtual;
    Procedure Setactive(AIndex : Integer; AValue : boolean); virtual;
    Procedure SetadvertiserId(AIndex : Integer; AValue : string); virtual;
    Procedure SetadvertiserIdDimensionValue(AIndex : Integer; AValue : TDimensionValue); virtual;
    Procedure Setarchived(AIndex : Integer; AValue : boolean); virtual;
    Procedure SetaudienceSegmentId(AIndex : Integer; AValue : string); virtual;
    Procedure SetcampaignId(AIndex : Integer; AValue : string); virtual;
    Procedure SetcampaignIdDimensionValue(AIndex : Integer; AValue : TDimensionValue); virtual;
    Procedure SetclickThroughUrl(AIndex : Integer; AValue : TClickThroughUrl); virtual;
    Procedure SetclickThroughUrlSuffixProperties(AIndex : Integer; AValue : TClickThroughUrlSuffixProperties); virtual;
    Procedure Setcomments(AIndex : Integer; AValue : string); virtual;
    Procedure Setcompatibility(AIndex : Integer; AValue : string); virtual;
    Procedure SetcreateInfo(AIndex : Integer; AValue : TLastModifiedInfo); virtual;
    Procedure SetcreativeGroupAssignments(AIndex : Integer; AValue : TAdcreativeGroupAssignments); virtual;
    Procedure SetcreativeRotation(AIndex : Integer; AValue : TCreativeRotation); virtual;
    Procedure SetdayPartTargeting(AIndex : Integer; AValue : TDayPartTargeting); virtual;
    Procedure SetdefaultClickThroughEventTagProperties(AIndex : Integer; AValue : TDefaultClickThroughEventTagProperties); virtual;
    Procedure SetdeliverySchedule(AIndex : Integer; AValue : TDeliverySchedule); virtual;
    Procedure SetdynamicClickTracker(AIndex : Integer; AValue : boolean); virtual;
    Procedure SetendTime(AIndex : Integer; AValue : TDatetime); virtual;
    Procedure SeteventTagOverrides(AIndex : Integer; AValue : TAdeventTagOverrides); virtual;
    Procedure SetgeoTargeting(AIndex : Integer; AValue : TGeoTargeting); virtual;
    Procedure Setid(AIndex : Integer; AValue : string); virtual;
    Procedure SetidDimensionValue(AIndex : Integer; AValue : TDimensionValue); virtual;
    Procedure SetkeyValueTargetingExpression(AIndex : Integer; AValue : TKeyValueTargetingExpression); virtual;
    Procedure Setkind(AIndex : Integer; AValue : string); virtual;
    Procedure SetlastModifiedInfo(AIndex : Integer; AValue : TLastModifiedInfo); virtual;
    Procedure Setname(AIndex : Integer; AValue : string); virtual;
    Procedure SetplacementAssignments(AIndex : Integer; AValue : TAdplacementAssignments); virtual;
    Procedure Setremarketing_list_expression(AIndex : Integer; AValue : TListTargetingExpression); virtual;
    Procedure Setsize(AIndex : Integer; AValue : TSize); virtual;
    Procedure SetsslCompliant(AIndex : Integer; AValue : boolean); virtual;
    Procedure SetsslRequired(AIndex : Integer; AValue : boolean); virtual;
    Procedure SetstartTime(AIndex : Integer; AValue : TDatetime); virtual;
    Procedure SetsubaccountId(AIndex : Integer; AValue : string); virtual;
    Procedure SettechnologyTargeting(AIndex : Integer; AValue : TTechnologyTargeting); virtual;
    Procedure Set_type(AIndex : Integer; AValue : string); virtual;
  Public
  Published
    Property accountId : string Index 0 Read FaccountId Write SetaccountId;
    Property active : boolean Index 8 Read Factive Write Setactive;
    Property advertiserId : string Index 16 Read FadvertiserId Write SetadvertiserId;
    Property advertiserIdDimensionValue : TDimensionValue Index 24 Read FadvertiserIdDimensionValue Write SetadvertiserIdDimensionValue;
    Property archived : boolean Index 32 Read Farchived Write Setarchived;
    Property audienceSegmentId : string Index 40 Read FaudienceSegmentId Write SetaudienceSegmentId;
    Property campaignId : string Index 48 Read FcampaignId Write SetcampaignId;
    Property campaignIdDimensionValue : TDimensionValue Index 56 Read FcampaignIdDimensionValue Write SetcampaignIdDimensionValue;
    Property clickThroughUrl : TClickThroughUrl Index 64 Read FclickThroughUrl Write SetclickThroughUrl;
    Property clickThroughUrlSuffixProperties : TClickThroughUrlSuffixProperties Index 72 Read FclickThroughUrlSuffixProperties Write SetclickThroughUrlSuffixProperties;
    Property comments : string Index 80 Read Fcomments Write Setcomments;
    Property compatibility : string Index 88 Read Fcompatibility Write Setcompatibility;
    Property createInfo : TLastModifiedInfo Index 96 Read FcreateInfo Write SetcreateInfo;
    Property creativeGroupAssignments : TAdcreativeGroupAssignments Index 104 Read FcreativeGroupAssignments Write SetcreativeGroupAssignments;
    Property creativeRotation : TCreativeRotation Index 112 Read FcreativeRotation Write SetcreativeRotation;
    Property dayPartTargeting : TDayPartTargeting Index 120 Read FdayPartTargeting Write SetdayPartTargeting;
    Property defaultClickThroughEventTagProperties : TDefaultClickThroughEventTagProperties Index 128 Read FdefaultClickThroughEventTagProperties Write SetdefaultClickThroughEventTagProperties;
    Property deliverySchedule : TDeliverySchedule Index 136 Read FdeliverySchedule Write SetdeliverySchedule;
    Property dynamicClickTracker : boolean Index 144 Read FdynamicClickTracker Write SetdynamicClickTracker;
    Property endTime : TDatetime Index 152 Read FendTime Write SetendTime;
    Property eventTagOverrides : TAdeventTagOverrides Index 160 Read FeventTagOverrides Write SeteventTagOverrides;
    Property geoTargeting : TGeoTargeting Index 168 Read FgeoTargeting Write SetgeoTargeting;
    Property id : string Index 176 Read Fid Write Setid;
    Property idDimensionValue : TDimensionValue Index 184 Read FidDimensionValue Write SetidDimensionValue;
    Property keyValueTargetingExpression : TKeyValueTargetingExpression Index 192 Read FkeyValueTargetingExpression Write SetkeyValueTargetingExpression;
    Property kind : string Index 200 Read Fkind Write Setkind;
    Property lastModifiedInfo : TLastModifiedInfo Index 208 Read FlastModifiedInfo Write SetlastModifiedInfo;
    Property name : string Index 216 Read Fname Write Setname;
    Property placementAssignments : TAdplacementAssignments Index 224 Read FplacementAssignments Write SetplacementAssignments;
    Property remarketing_list_expression : TListTargetingExpression Index 232 Read Fremarketing_list_expression Write Setremarketing_list_expression;
    Property size : TSize Index 240 Read Fsize Write Setsize;
    Property sslCompliant : boolean Index 248 Read FsslCompliant Write SetsslCompliant;
    Property sslRequired : boolean Index 256 Read FsslRequired Write SetsslRequired;
    Property startTime : TDatetime Index 264 Read FstartTime Write SetstartTime;
    Property subaccountId : string Index 272 Read FsubaccountId Write SetsubaccountId;
    Property technologyTargeting : TTechnologyTargeting Index 280 Read FtechnologyTargeting Write SettechnologyTargeting;
    Property _type : string Index 288 Read F_type Write Set_type;
  end;
  TAdClass = Class of TAd;
  
  { --------------------------------------------------------------------
    TAdcreativeGroupAssignments
    --------------------------------------------------------------------}
  
  TAdcreativeGroupAssignments = Class(TGoogleBaseObject)
  Private
  Protected
    //Property setters
  Public
  Published
  end;
  TAdcreativeGroupAssignmentsClass = Class of TAdcreativeGroupAssignments;
  
  { --------------------------------------------------------------------
    TAdeventTagOverrides
    --------------------------------------------------------------------}
  
  TAdeventTagOverrides = Class(TGoogleBaseObject)
  Private
  Protected
    //Property setters
  Public
  Published
  end;
  TAdeventTagOverridesClass = Class of TAdeventTagOverrides;
  
  { --------------------------------------------------------------------
    TAdplacementAssignments
    --------------------------------------------------------------------}
  
  TAdplacementAssignments = Class(TGoogleBaseObject)
  Private
  Protected
    //Property setters
  Public
  Published
  end;
  TAdplacementAssignmentsClass = Class of TAdplacementAssignments;
  
  { --------------------------------------------------------------------
    TAdSlot
    --------------------------------------------------------------------}
  
  TAdSlot = Class(TGoogleBaseObject)
  Private
    Fcomment : string;
    Fcompatibility : string;
    Fheight : string;
    FlinkedPlacementId : string;
    Fname : string;
    FpaymentSourceType : string;
    Fprimary : boolean;
    Fwidth : string;
  Protected
    //Property setters
    Procedure Setcomment(AIndex : Integer; AValue : string); virtual;
    Procedure Setcompatibility(AIndex : Integer; AValue : string); virtual;
    Procedure Setheight(AIndex : Integer; AValue : string); virtual;
    Procedure SetlinkedPlacementId(AIndex : Integer; AValue : string); virtual;
    Procedure Setname(AIndex : Integer; AValue : string); virtual;
    Procedure SetpaymentSourceType(AIndex : Integer; AValue : string); virtual;
    Procedure Setprimary(AIndex : Integer; AValue : boolean); virtual;
    Procedure Setwidth(AIndex : Integer; AValue : string); virtual;
  Public
  Published
    Property comment : string Index 0 Read Fcomment Write Setcomment;
    Property compatibility : string Index 8 Read Fcompatibility Write Setcompatibility;
    Property height : string Index 16 Read Fheight Write Setheight;
    Property linkedPlacementId : string Index 24 Read FlinkedPlacementId Write SetlinkedPlacementId;
    Property name : string Index 32 Read Fname Write Setname;
    Property paymentSourceType : string Index 40 Read FpaymentSourceType Write SetpaymentSourceType;
    Property primary : boolean Index 48 Read Fprimary Write Setprimary;
    Property width : string Index 56 Read Fwidth Write Setwidth;
  end;
  TAdSlotClass = Class of TAdSlot;
  
  { --------------------------------------------------------------------
    TAdsListResponse
    --------------------------------------------------------------------}
  
  TAdsListResponse = Class(TGoogleBaseObject)
  Private
    Fads : TAdsListResponseads;
    Fkind : string;
    FnextPageToken : string;
  Protected
    //Property setters
    Procedure Setads(AIndex : Integer; AValue : TAdsListResponseads); virtual;
    Procedure Setkind(AIndex : Integer; AValue : string); virtual;
    Procedure SetnextPageToken(AIndex : Integer; AValue : string); virtual;
  Public
  Published
    Property ads : TAdsListResponseads Index 0 Read Fads Write Setads;
    Property kind : string Index 8 Read Fkind Write Setkind;
    Property nextPageToken : string Index 16 Read FnextPageToken Write SetnextPageToken;
  end;
  TAdsListResponseClass = Class of TAdsListResponse;
  
  { --------------------------------------------------------------------
    TAdsListResponseads
    --------------------------------------------------------------------}
  
  TAdsListResponseads = Class(TGoogleBaseObject)
  Private
  Protected
    //Property setters
  Public
  Published
  end;
  TAdsListResponseadsClass = Class of TAdsListResponseads;
  
  { --------------------------------------------------------------------
    TAdvertiser
    --------------------------------------------------------------------}
  
  TAdvertiser = Class(TGoogleBaseObject)
  Private
    FaccountId : string;
    FadvertiserGroupId : string;
    FclickThroughUrlSuffix : string;
    FdefaultClickThroughEventTagId : string;
    FdefaultEmail : string;
    FfloodlightConfigurationId : string;
    FfloodlightConfigurationIdDimensionValue : TDimensionValue;
    Fid : string;
    FidDimensionValue : TDimensionValue;
    Fkind : string;
    Fname : string;
    ForiginalFloodlightConfigurationId : string;
    Fstatus : string;
    FsubaccountId : string;
  Protected
    //Property setters
    Procedure SetaccountId(AIndex : Integer; AValue : string); virtual;
    Procedure SetadvertiserGroupId(AIndex : Integer; AValue : string); virtual;
    Procedure SetclickThroughUrlSuffix(AIndex : Integer; AValue : string); virtual;
    Procedure SetdefaultClickThroughEventTagId(AIndex : Integer; AValue : string); virtual;
    Procedure SetdefaultEmail(AIndex : Integer; AValue : string); virtual;
    Procedure SetfloodlightConfigurationId(AIndex : Integer; AValue : string); virtual;
    Procedure SetfloodlightConfigurationIdDimensionValue(AIndex : Integer; AValue : TDimensionValue); virtual;
    Procedure Setid(AIndex : Integer; AValue : string); virtual;
    Procedure SetidDimensionValue(AIndex : Integer; AValue : TDimensionValue); virtual;
    Procedure Setkind(AIndex : Integer; AValue : string); virtual;
    Procedure Setname(AIndex : Integer; AValue : string); virtual;
    Procedure SetoriginalFloodlightConfigurationId(AIndex : Integer; AValue : string); virtual;
    Procedure Setstatus(AIndex : Integer; AValue : string); virtual;
    Procedure SetsubaccountId(AIndex : Integer; AValue : string); virtual;
  Public
  Published
    Property accountId : string Index 0 Read FaccountId Write SetaccountId;
    Property advertiserGroupId : string Index 8 Read FadvertiserGroupId Write SetadvertiserGroupId;
    Property clickThroughUrlSuffix : string Index 16 Read FclickThroughUrlSuffix Write SetclickThroughUrlSuffix;
    Property defaultClickThroughEventTagId : string Index 24 Read FdefaultClickThroughEventTagId Write SetdefaultClickThroughEventTagId;
    Property defaultEmail : string Index 32 Read FdefaultEmail Write SetdefaultEmail;
    Property floodlightConfigurationId : string Index 40 Read FfloodlightConfigurationId Write SetfloodlightConfigurationId;
    Property floodlightConfigurationIdDimensionValue : TDimensionValue Index 48 Read FfloodlightConfigurationIdDimensionValue Write SetfloodlightConfigurationIdDimensionValue;
    Property id : string Index 56 Read Fid Write Setid;
    Property idDimensionValue : TDimensionValue Index 64 Read FidDimensionValue Write SetidDimensionValue;
    Property kind : string Index 72 Read Fkind Write Setkind;
    Property name : string Index 80 Read Fname Write Setname;
    Property originalFloodlightConfigurationId : string Index 88 Read ForiginalFloodlightConfigurationId Write SetoriginalFloodlightConfigurationId;
    Property status : string Index 96 Read Fstatus Write Setstatus;
    Property subaccountId : string Index 104 Read FsubaccountId Write SetsubaccountId;
  end;
  TAdvertiserClass = Class of TAdvertiser;
  
  { --------------------------------------------------------------------
    TAdvertiserGroup
    --------------------------------------------------------------------}
  
  TAdvertiserGroup = Class(TGoogleBaseObject)
  Private
    FaccountId : string;
    Fid : string;
    Fkind : string;
    Fname : string;
  Protected
    //Property setters
    Procedure SetaccountId(AIndex : Integer; AValue : string); virtual;
    Procedure Setid(AIndex : Integer; AValue : string); virtual;
    Procedure Setkind(AIndex : Integer; AValue : string); virtual;
    Procedure Setname(AIndex : Integer; AValue : string); virtual;
  Public
  Published
    Property accountId : string Index 0 Read FaccountId Write SetaccountId;
    Property id : string Index 8 Read Fid Write Setid;
    Property kind : string Index 16 Read Fkind Write Setkind;
    Property name : string Index 24 Read Fname Write Setname;
  end;
  TAdvertiserGroupClass = Class of TAdvertiserGroup;
  
  { --------------------------------------------------------------------
    TAdvertiserGroupsListResponse
    --------------------------------------------------------------------}
  
  TAdvertiserGroupsListResponse = Class(TGoogleBaseObject)
  Private
    FadvertiserGroups : TAdvertiserGroupsListResponseadvertiserGroups;
    Fkind : string;
    FnextPageToken : string;
  Protected
    //Property setters
    Procedure SetadvertiserGroups(AIndex : Integer; AValue : TAdvertiserGroupsListResponseadvertiserGroups); virtual;
    Procedure Setkind(AIndex : Integer; AValue : string); virtual;
    Procedure SetnextPageToken(AIndex : Integer; AValue : string); virtual;
  Public
  Published
    Property advertiserGroups : TAdvertiserGroupsListResponseadvertiserGroups Index 0 Read FadvertiserGroups Write SetadvertiserGroups;
    Property kind : string Index 8 Read Fkind Write Setkind;
    Property nextPageToken : string Index 16 Read FnextPageToken Write SetnextPageToken;
  end;
  TAdvertiserGroupsListResponseClass = Class of TAdvertiserGroupsListResponse;
  
  { --------------------------------------------------------------------
    TAdvertiserGroupsListResponseadvertiserGroups
    --------------------------------------------------------------------}
  
  TAdvertiserGroupsListResponseadvertiserGroups = Class(TGoogleBaseObject)
  Private
  Protected
    //Property setters
  Public
  Published
  end;
  TAdvertiserGroupsListResponseadvertiserGroupsClass = Class of TAdvertiserGroupsListResponseadvertiserGroups;
  
  { --------------------------------------------------------------------
    TAdvertisersListResponse
    --------------------------------------------------------------------}
  
  TAdvertisersListResponse = Class(TGoogleBaseObject)
  Private
    Fadvertisers : TAdvertisersListResponseadvertisers;
    Fkind : string;
    FnextPageToken : string;
  Protected
    //Property setters
    Procedure Setadvertisers(AIndex : Integer; AValue : TAdvertisersListResponseadvertisers); virtual;
    Procedure Setkind(AIndex : Integer; AValue : string); virtual;
    Procedure SetnextPageToken(AIndex : Integer; AValue : string); virtual;
  Public
  Published
    Property advertisers : TAdvertisersListResponseadvertisers Index 0 Read Fadvertisers Write Setadvertisers;
    Property kind : string Index 8 Read Fkind Write Setkind;
    Property nextPageToken : string Index 16 Read FnextPageToken Write SetnextPageToken;
  end;
  TAdvertisersListResponseClass = Class of TAdvertisersListResponse;
  
  { --------------------------------------------------------------------
    TAdvertisersListResponseadvertisers
    --------------------------------------------------------------------}
  
  TAdvertisersListResponseadvertisers = Class(TGoogleBaseObject)
  Private
  Protected
    //Property setters
  Public
  Published
  end;
  TAdvertisersListResponseadvertisersClass = Class of TAdvertisersListResponseadvertisers;
  
  { --------------------------------------------------------------------
    TAudienceSegment
    --------------------------------------------------------------------}
  
  TAudienceSegment = Class(TGoogleBaseObject)
  Private
    Fallocation : integer;
    Fid : string;
    Fname : string;
  Protected
    //Property setters
    Procedure Setallocation(AIndex : Integer; AValue : integer); virtual;
    Procedure Setid(AIndex : Integer; AValue : string); virtual;
    Procedure Setname(AIndex : Integer; AValue : string); virtual;
  Public
  Published
    Property allocation : integer Index 0 Read Fallocation Write Setallocation;
    Property id : string Index 8 Read Fid Write Setid;
    Property name : string Index 16 Read Fname Write Setname;
  end;
  TAudienceSegmentClass = Class of TAudienceSegment;
  
  { --------------------------------------------------------------------
    TAudienceSegmentGroup
    --------------------------------------------------------------------}
  
  TAudienceSegmentGroup = Class(TGoogleBaseObject)
  Private
    FaudienceSegments : TAudienceSegmentGroupaudienceSegments;
    Fid : string;
    Fname : string;
  Protected
    //Property setters
    Procedure SetaudienceSegments(AIndex : Integer; AValue : TAudienceSegmentGroupaudienceSegments); virtual;
    Procedure Setid(AIndex : Integer; AValue : string); virtual;
    Procedure Setname(AIndex : Integer; AValue : string); virtual;
  Public
  Published
    Property audienceSegments : TAudienceSegmentGroupaudienceSegments Index 0 Read FaudienceSegments Write SetaudienceSegments;
    Property id : string Index 8 Read Fid Write Setid;
    Property name : string Index 16 Read Fname Write Setname;
  end;
  TAudienceSegmentGroupClass = Class of TAudienceSegmentGroup;
  
  { --------------------------------------------------------------------
    TAudienceSegmentGroupaudienceSegments
    --------------------------------------------------------------------}
  
  TAudienceSegmentGroupaudienceSegments = Class(TGoogleBaseObject)
  Private
  Protected
    //Property setters
  Public
  Published
  end;
  TAudienceSegmentGroupaudienceSegmentsClass = Class of TAudienceSegmentGroupaudienceSegments;
  
  { --------------------------------------------------------------------
    TBrowser
    --------------------------------------------------------------------}
  
  TBrowser = Class(TGoogleBaseObject)
  Private
    FbrowserVersionId : string;
    FdartId : string;
    Fkind : string;
    FmajorVersion : string;
    FminorVersion : string;
    Fname : string;
  Protected
    //Property setters
    Procedure SetbrowserVersionId(AIndex : Integer; AValue : string); virtual;
    Procedure SetdartId(AIndex : Integer; AValue : string); virtual;
    Procedure Setkind(AIndex : Integer; AValue : string); virtual;
    Procedure SetmajorVersion(AIndex : Integer; AValue : string); virtual;
    Procedure SetminorVersion(AIndex : Integer; AValue : string); virtual;
    Procedure Setname(AIndex : Integer; AValue : string); virtual;
  Public
  Published
    Property browserVersionId : string Index 0 Read FbrowserVersionId Write SetbrowserVersionId;
    Property dartId : string Index 8 Read FdartId Write SetdartId;
    Property kind : string Index 16 Read Fkind Write Setkind;
    Property majorVersion : string Index 24 Read FmajorVersion Write SetmajorVersion;
    Property minorVersion : string Index 32 Read FminorVersion Write SetminorVersion;
    Property name : string Index 40 Read Fname Write Setname;
  end;
  TBrowserClass = Class of TBrowser;
  
  { --------------------------------------------------------------------
    TBrowsersListResponse
    --------------------------------------------------------------------}
  
  TBrowsersListResponse = Class(TGoogleBaseObject)
  Private
    Fbrowsers : TBrowsersListResponsebrowsers;
    Fkind : string;
  Protected
    //Property setters
    Procedure Setbrowsers(AIndex : Integer; AValue : TBrowsersListResponsebrowsers); virtual;
    Procedure Setkind(AIndex : Integer; AValue : string); virtual;
  Public
  Published
    Property browsers : TBrowsersListResponsebrowsers Index 0 Read Fbrowsers Write Setbrowsers;
    Property kind : string Index 8 Read Fkind Write Setkind;
  end;
  TBrowsersListResponseClass = Class of TBrowsersListResponse;
  
  { --------------------------------------------------------------------
    TBrowsersListResponsebrowsers
    --------------------------------------------------------------------}
  
  TBrowsersListResponsebrowsers = Class(TGoogleBaseObject)
  Private
  Protected
    //Property setters
  Public
  Published
  end;
  TBrowsersListResponsebrowsersClass = Class of TBrowsersListResponsebrowsers;
  
  { --------------------------------------------------------------------
    TCampaign
    --------------------------------------------------------------------}
  
  TCampaign = Class(TGoogleBaseObject)
  Private
    FaccountId : string;
    FadditionalCreativeOptimizationConfigurations : TCampaignadditionalCreativeOptimizationConfigurations;
    FadvertiserGroupId : string;
    FadvertiserId : string;
    FadvertiserIdDimensionValue : TDimensionValue;
    Farchived : boolean;
    FaudienceSegmentGroups : TCampaignaudienceSegmentGroups;
    FbillingInvoiceCode : string;
    FclickThroughUrlSuffixProperties : TClickThroughUrlSuffixProperties;
    Fcomment : string;
    FcomscoreVceEnabled : boolean;
    FcreateInfo : TLastModifiedInfo;
    FcreativeGroupIds : TCampaigncreativeGroupIds;
    FcreativeOptimizationConfiguration : TCreativeOptimizationConfiguration;
    FdefaultClickThroughEventTagProperties : TDefaultClickThroughEventTagProperties;
    FendDate : TDate;
    FeventTagOverrides : TCampaigneventTagOverrides;
    FexternalId : string;
    Fid : string;
    FidDimensionValue : TDimensionValue;
    Fkind : string;
    FlastModifiedInfo : TLastModifiedInfo;
    FlookbackConfiguration : TLookbackConfiguration;
    Fname : string;
    FnielsenOcrEnabled : boolean;
    FstartDate : TDate;
    FsubaccountId : string;
    FtraffickerEmails : TCampaigntraffickerEmails;
  Protected
    //Property setters
    Procedure SetaccountId(AIndex : Integer; AValue : string); virtual;
    Procedure SetadditionalCreativeOptimizationConfigurations(AIndex : Integer; AValue : TCampaignadditionalCreativeOptimizationConfigurations); virtual;
    Procedure SetadvertiserGroupId(AIndex : Integer; AValue : string); virtual;
    Procedure SetadvertiserId(AIndex : Integer; AValue : string); virtual;
    Procedure SetadvertiserIdDimensionValue(AIndex : Integer; AValue : TDimensionValue); virtual;
    Procedure Setarchived(AIndex : Integer; AValue : boolean); virtual;
    Procedure SetaudienceSegmentGroups(AIndex : Integer; AValue : TCampaignaudienceSegmentGroups); virtual;
    Procedure SetbillingInvoiceCode(AIndex : Integer; AValue : string); virtual;
    Procedure SetclickThroughUrlSuffixProperties(AIndex : Integer; AValue : TClickThroughUrlSuffixProperties); virtual;
    Procedure Setcomment(AIndex : Integer; AValue : string); virtual;
    Procedure SetcomscoreVceEnabled(AIndex : Integer; AValue : boolean); virtual;
    Procedure SetcreateInfo(AIndex : Integer; AValue : TLastModifiedInfo); virtual;
    Procedure SetcreativeGroupIds(AIndex : Integer; AValue : TCampaigncreativeGroupIds); virtual;
    Procedure SetcreativeOptimizationConfiguration(AIndex : Integer; AValue : TCreativeOptimizationConfiguration); virtual;
    Procedure SetdefaultClickThroughEventTagProperties(AIndex : Integer; AValue : TDefaultClickThroughEventTagProperties); virtual;
    Procedure SetendDate(AIndex : Integer; AValue : TDate); virtual;
    Procedure SeteventTagOverrides(AIndex : Integer; AValue : TCampaigneventTagOverrides); virtual;
    Procedure SetexternalId(AIndex : Integer; AValue : string); virtual;
    Procedure Setid(AIndex : Integer; AValue : string); virtual;
    Procedure SetidDimensionValue(AIndex : Integer; AValue : TDimensionValue); virtual;
    Procedure Setkind(AIndex : Integer; AValue : string); virtual;
    Procedure SetlastModifiedInfo(AIndex : Integer; AValue : TLastModifiedInfo); virtual;
    Procedure SetlookbackConfiguration(AIndex : Integer; AValue : TLookbackConfiguration); virtual;
    Procedure Setname(AIndex : Integer; AValue : string); virtual;
    Procedure SetnielsenOcrEnabled(AIndex : Integer; AValue : boolean); virtual;
    Procedure SetstartDate(AIndex : Integer; AValue : TDate); virtual;
    Procedure SetsubaccountId(AIndex : Integer; AValue : string); virtual;
    Procedure SettraffickerEmails(AIndex : Integer; AValue : TCampaigntraffickerEmails); virtual;
  Public
  Published
    Property accountId : string Index 0 Read FaccountId Write SetaccountId;
    Property additionalCreativeOptimizationConfigurations : TCampaignadditionalCreativeOptimizationConfigurations Index 8 Read FadditionalCreativeOptimizationConfigurations Write SetadditionalCreativeOptimizationConfigurations;
    Property advertiserGroupId : string Index 16 Read FadvertiserGroupId Write SetadvertiserGroupId;
    Property advertiserId : string Index 24 Read FadvertiserId Write SetadvertiserId;
    Property advertiserIdDimensionValue : TDimensionValue Index 32 Read FadvertiserIdDimensionValue Write SetadvertiserIdDimensionValue;
    Property archived : boolean Index 40 Read Farchived Write Setarchived;
    Property audienceSegmentGroups : TCampaignaudienceSegmentGroups Index 48 Read FaudienceSegmentGroups Write SetaudienceSegmentGroups;
    Property billingInvoiceCode : string Index 56 Read FbillingInvoiceCode Write SetbillingInvoiceCode;
    Property clickThroughUrlSuffixProperties : TClickThroughUrlSuffixProperties Index 64 Read FclickThroughUrlSuffixProperties Write SetclickThroughUrlSuffixProperties;
    Property comment : string Index 72 Read Fcomment Write Setcomment;
    Property comscoreVceEnabled : boolean Index 80 Read FcomscoreVceEnabled Write SetcomscoreVceEnabled;
    Property createInfo : TLastModifiedInfo Index 88 Read FcreateInfo Write SetcreateInfo;
    Property creativeGroupIds : TCampaigncreativeGroupIds Index 96 Read FcreativeGroupIds Write SetcreativeGroupIds;
    Property creativeOptimizationConfiguration : TCreativeOptimizationConfiguration Index 104 Read FcreativeOptimizationConfiguration Write SetcreativeOptimizationConfiguration;
    Property defaultClickThroughEventTagProperties : TDefaultClickThroughEventTagProperties Index 112 Read FdefaultClickThroughEventTagProperties Write SetdefaultClickThroughEventTagProperties;
    Property endDate : TDate Index 120 Read FendDate Write SetendDate;
    Property eventTagOverrides : TCampaigneventTagOverrides Index 128 Read FeventTagOverrides Write SeteventTagOverrides;
    Property externalId : string Index 136 Read FexternalId Write SetexternalId;
    Property id : string Index 144 Read Fid Write Setid;
    Property idDimensionValue : TDimensionValue Index 152 Read FidDimensionValue Write SetidDimensionValue;
    Property kind : string Index 160 Read Fkind Write Setkind;
    Property lastModifiedInfo : TLastModifiedInfo Index 168 Read FlastModifiedInfo Write SetlastModifiedInfo;
    Property lookbackConfiguration : TLookbackConfiguration Index 176 Read FlookbackConfiguration Write SetlookbackConfiguration;
    Property name : string Index 184 Read Fname Write Setname;
    Property nielsenOcrEnabled : boolean Index 192 Read FnielsenOcrEnabled Write SetnielsenOcrEnabled;
    Property startDate : TDate Index 200 Read FstartDate Write SetstartDate;
    Property subaccountId : string Index 208 Read FsubaccountId Write SetsubaccountId;
    Property traffickerEmails : TCampaigntraffickerEmails Index 216 Read FtraffickerEmails Write SettraffickerEmails;
  end;
  TCampaignClass = Class of TCampaign;
  
  { --------------------------------------------------------------------
    TCampaignadditionalCreativeOptimizationConfigurations
    --------------------------------------------------------------------}
  
  TCampaignadditionalCreativeOptimizationConfigurations = Class(TGoogleBaseObject)
  Private
  Protected
    //Property setters
  Public
  Published
  end;
  TCampaignadditionalCreativeOptimizationConfigurationsClass = Class of TCampaignadditionalCreativeOptimizationConfigurations;
  
  { --------------------------------------------------------------------
    TCampaignaudienceSegmentGroups
    --------------------------------------------------------------------}
  
  TCampaignaudienceSegmentGroups = Class(TGoogleBaseObject)
  Private
  Protected
    //Property setters
  Public
  Published
  end;
  TCampaignaudienceSegmentGroupsClass = Class of TCampaignaudienceSegmentGroups;
  
  { --------------------------------------------------------------------
    TCampaigncreativeGroupIds
    --------------------------------------------------------------------}
  
  TCampaigncreativeGroupIds = Class(TGoogleBaseObject)
  Private
  Protected
    //Property setters
  Public
  Published
  end;
  TCampaigncreativeGroupIdsClass = Class of TCampaigncreativeGroupIds;
  
  { --------------------------------------------------------------------
    TCampaigneventTagOverrides
    --------------------------------------------------------------------}
  
  TCampaigneventTagOverrides = Class(TGoogleBaseObject)
  Private
  Protected
    //Property setters
  Public
  Published
  end;
  TCampaigneventTagOverridesClass = Class of TCampaigneventTagOverrides;
  
  { --------------------------------------------------------------------
    TCampaigntraffickerEmails
    --------------------------------------------------------------------}
  
  TCampaigntraffickerEmails = Class(TGoogleBaseObject)
  Private
  Protected
    //Property setters
  Public
  Published
  end;
  TCampaigntraffickerEmailsClass = Class of TCampaigntraffickerEmails;
  
  { --------------------------------------------------------------------
    TCampaignCreativeAssociation
    --------------------------------------------------------------------}
  
  TCampaignCreativeAssociation = Class(TGoogleBaseObject)
  Private
    FcreativeId : string;
    Fkind : string;
  Protected
    //Property setters
    Procedure SetcreativeId(AIndex : Integer; AValue : string); virtual;
    Procedure Setkind(AIndex : Integer; AValue : string); virtual;
  Public
  Published
    Property creativeId : string Index 0 Read FcreativeId Write SetcreativeId;
    Property kind : string Index 8 Read Fkind Write Setkind;
  end;
  TCampaignCreativeAssociationClass = Class of TCampaignCreativeAssociation;
  
  { --------------------------------------------------------------------
    TCampaignCreativeAssociationsListResponse
    --------------------------------------------------------------------}
  
  TCampaignCreativeAssociationsListResponse = Class(TGoogleBaseObject)
  Private
    FcampaignCreativeAssociations : TCampaignCreativeAssociationsListResponsecampaignCreativeAssociations;
    Fkind : string;
    FnextPageToken : string;
  Protected
    //Property setters
    Procedure SetcampaignCreativeAssociations(AIndex : Integer; AValue : TCampaignCreativeAssociationsListResponsecampaignCreativeAssociations); virtual;
    Procedure Setkind(AIndex : Integer; AValue : string); virtual;
    Procedure SetnextPageToken(AIndex : Integer; AValue : string); virtual;
  Public
  Published
    Property campaignCreativeAssociations : TCampaignCreativeAssociationsListResponsecampaignCreativeAssociations Index 0 Read FcampaignCreativeAssociations Write SetcampaignCreativeAssociations;
    Property kind : string Index 8 Read Fkind Write Setkind;
    Property nextPageToken : string Index 16 Read FnextPageToken Write SetnextPageToken;
  end;
  TCampaignCreativeAssociationsListResponseClass = Class of TCampaignCreativeAssociationsListResponse;
  
  { --------------------------------------------------------------------
    TCampaignCreativeAssociationsListResponsecampaignCreativeAssociations
    --------------------------------------------------------------------}
  
  TCampaignCreativeAssociationsListResponsecampaignCreativeAssociations = Class(TGoogleBaseObject)
  Private
  Protected
    //Property setters
  Public
  Published
  end;
  TCampaignCreativeAssociationsListResponsecampaignCreativeAssociationsClass = Class of TCampaignCreativeAssociationsListResponsecampaignCreativeAssociations;
  
  { --------------------------------------------------------------------
    TCampaignsListResponse
    --------------------------------------------------------------------}
  
  TCampaignsListResponse = Class(TGoogleBaseObject)
  Private
    Fcampaigns : TCampaignsListResponsecampaigns;
    Fkind : string;
    FnextPageToken : string;
  Protected
    //Property setters
    Procedure Setcampaigns(AIndex : Integer; AValue : TCampaignsListResponsecampaigns); virtual;
    Procedure Setkind(AIndex : Integer; AValue : string); virtual;
    Procedure SetnextPageToken(AIndex : Integer; AValue : string); virtual;
  Public
  Published
    Property campaigns : TCampaignsListResponsecampaigns Index 0 Read Fcampaigns Write Setcampaigns;
    Property kind : string Index 8 Read Fkind Write Setkind;
    Property nextPageToken : string Index 16 Read FnextPageToken Write SetnextPageToken;
  end;
  TCampaignsListResponseClass = Class of TCampaignsListResponse;
  
  { --------------------------------------------------------------------
    TCampaignsListResponsecampaigns
    --------------------------------------------------------------------}
  
  TCampaignsListResponsecampaigns = Class(TGoogleBaseObject)
  Private
  Protected
    //Property setters
  Public
  Published
  end;
  TCampaignsListResponsecampaignsClass = Class of TCampaignsListResponsecampaigns;
  
  { --------------------------------------------------------------------
    TChangeLog
    --------------------------------------------------------------------}
  
  TChangeLog = Class(TGoogleBaseObject)
  Private
    FaccountId : string;
    Faction : string;
    FchangeTime : TDatetime;
    FfieldName : string;
    Fid : string;
    Fkind : string;
    FnewValue : string;
    FobjectId : string;
    FobjectType : string;
    FoldValue : string;
    FsubaccountId : string;
    FtransactionId : string;
    FuserProfileId : string;
    FuserProfileName : string;
  Protected
    //Property setters
    Procedure SetaccountId(AIndex : Integer; AValue : string); virtual;
    Procedure Setaction(AIndex : Integer; AValue : string); virtual;
    Procedure SetchangeTime(AIndex : Integer; AValue : TDatetime); virtual;
    Procedure SetfieldName(AIndex : Integer; AValue : string); virtual;
    Procedure Setid(AIndex : Integer; AValue : string); virtual;
    Procedure Setkind(AIndex : Integer; AValue : string); virtual;
    Procedure SetnewValue(AIndex : Integer; AValue : string); virtual;
    Procedure SetobjectId(AIndex : Integer; AValue : string); virtual;
    Procedure SetobjectType(AIndex : Integer; AValue : string); virtual;
    Procedure SetoldValue(AIndex : Integer; AValue : string); virtual;
    Procedure SetsubaccountId(AIndex : Integer; AValue : string); virtual;
    Procedure SettransactionId(AIndex : Integer; AValue : string); virtual;
    Procedure SetuserProfileId(AIndex : Integer; AValue : string); virtual;
    Procedure SetuserProfileName(AIndex : Integer; AValue : string); virtual;
  Public
  Published
    Property accountId : string Index 0 Read FaccountId Write SetaccountId;
    Property action : string Index 8 Read Faction Write Setaction;
    Property changeTime : TDatetime Index 16 Read FchangeTime Write SetchangeTime;
    Property fieldName : string Index 24 Read FfieldName Write SetfieldName;
    Property id : string Index 32 Read Fid Write Setid;
    Property kind : string Index 40 Read Fkind Write Setkind;
    Property newValue : string Index 48 Read FnewValue Write SetnewValue;
    Property objectId : string Index 56 Read FobjectId Write SetobjectId;
    Property objectType : string Index 64 Read FobjectType Write SetobjectType;
    Property oldValue : string Index 72 Read FoldValue Write SetoldValue;
    Property subaccountId : string Index 80 Read FsubaccountId Write SetsubaccountId;
    Property transactionId : string Index 88 Read FtransactionId Write SettransactionId;
    Property userProfileId : string Index 96 Read FuserProfileId Write SetuserProfileId;
    Property userProfileName : string Index 104 Read FuserProfileName Write SetuserProfileName;
  end;
  TChangeLogClass = Class of TChangeLog;
  
  { --------------------------------------------------------------------
    TChangeLogsListResponse
    --------------------------------------------------------------------}
  
  TChangeLogsListResponse = Class(TGoogleBaseObject)
  Private
    FchangeLogs : TChangeLogsListResponsechangeLogs;
    Fkind : string;
    FnextPageToken : string;
  Protected
    //Property setters
    Procedure SetchangeLogs(AIndex : Integer; AValue : TChangeLogsListResponsechangeLogs); virtual;
    Procedure Setkind(AIndex : Integer; AValue : string); virtual;
    Procedure SetnextPageToken(AIndex : Integer; AValue : string); virtual;
  Public
  Published
    Property changeLogs : TChangeLogsListResponsechangeLogs Index 0 Read FchangeLogs Write SetchangeLogs;
    Property kind : string Index 8 Read Fkind Write Setkind;
    Property nextPageToken : string Index 16 Read FnextPageToken Write SetnextPageToken;
  end;
  TChangeLogsListResponseClass = Class of TChangeLogsListResponse;
  
  { --------------------------------------------------------------------
    TChangeLogsListResponsechangeLogs
    --------------------------------------------------------------------}
  
  TChangeLogsListResponsechangeLogs = Class(TGoogleBaseObject)
  Private
  Protected
    //Property setters
  Public
  Published
  end;
  TChangeLogsListResponsechangeLogsClass = Class of TChangeLogsListResponsechangeLogs;
  
  { --------------------------------------------------------------------
    TCitiesListResponse
    --------------------------------------------------------------------}
  
  TCitiesListResponse = Class(TGoogleBaseObject)
  Private
    Fcities : TCitiesListResponsecities;
    Fkind : string;
  Protected
    //Property setters
    Procedure Setcities(AIndex : Integer; AValue : TCitiesListResponsecities); virtual;
    Procedure Setkind(AIndex : Integer; AValue : string); virtual;
  Public
  Published
    Property cities : TCitiesListResponsecities Index 0 Read Fcities Write Setcities;
    Property kind : string Index 8 Read Fkind Write Setkind;
  end;
  TCitiesListResponseClass = Class of TCitiesListResponse;
  
  { --------------------------------------------------------------------
    TCitiesListResponsecities
    --------------------------------------------------------------------}
  
  TCitiesListResponsecities = Class(TGoogleBaseObject)
  Private
  Protected
    //Property setters
  Public
  Published
  end;
  TCitiesListResponsecitiesClass = Class of TCitiesListResponsecities;
  
  { --------------------------------------------------------------------
    TCity
    --------------------------------------------------------------------}
  
  TCity = Class(TGoogleBaseObject)
  Private
    FcountryCode : string;
    FcountryDartId : string;
    FdartId : string;
    Fkind : string;
    FmetroCode : string;
    FmetroDmaId : string;
    Fname : string;
    FregionCode : string;
    FregionDartId : string;
  Protected
    //Property setters
    Procedure SetcountryCode(AIndex : Integer; AValue : string); virtual;
    Procedure SetcountryDartId(AIndex : Integer; AValue : string); virtual;
    Procedure SetdartId(AIndex : Integer; AValue : string); virtual;
    Procedure Setkind(AIndex : Integer; AValue : string); virtual;
    Procedure SetmetroCode(AIndex : Integer; AValue : string); virtual;
    Procedure SetmetroDmaId(AIndex : Integer; AValue : string); virtual;
    Procedure Setname(AIndex : Integer; AValue : string); virtual;
    Procedure SetregionCode(AIndex : Integer; AValue : string); virtual;
    Procedure SetregionDartId(AIndex : Integer; AValue : string); virtual;
  Public
  Published
    Property countryCode : string Index 0 Read FcountryCode Write SetcountryCode;
    Property countryDartId : string Index 8 Read FcountryDartId Write SetcountryDartId;
    Property dartId : string Index 16 Read FdartId Write SetdartId;
    Property kind : string Index 24 Read Fkind Write Setkind;
    Property metroCode : string Index 32 Read FmetroCode Write SetmetroCode;
    Property metroDmaId : string Index 40 Read FmetroDmaId Write SetmetroDmaId;
    Property name : string Index 48 Read Fname Write Setname;
    Property regionCode : string Index 56 Read FregionCode Write SetregionCode;
    Property regionDartId : string Index 64 Read FregionDartId Write SetregionDartId;
  end;
  TCityClass = Class of TCity;
  
  { --------------------------------------------------------------------
    TClickTag
    --------------------------------------------------------------------}
  
  TClickTag = Class(TGoogleBaseObject)
  Private
    FeventName : string;
    Fname : string;
    Fvalue : string;
  Protected
    //Property setters
    Procedure SeteventName(AIndex : Integer; AValue : string); virtual;
    Procedure Setname(AIndex : Integer; AValue : string); virtual;
    Procedure Setvalue(AIndex : Integer; AValue : string); virtual;
  Public
  Published
    Property eventName : string Index 0 Read FeventName Write SeteventName;
    Property name : string Index 8 Read Fname Write Setname;
    Property value : string Index 16 Read Fvalue Write Setvalue;
  end;
  TClickTagClass = Class of TClickTag;
  
  { --------------------------------------------------------------------
    TClickThroughUrl
    --------------------------------------------------------------------}
  
  TClickThroughUrl = Class(TGoogleBaseObject)
  Private
    FcustomClickThroughUrl : string;
    FdefaultLandingPage : boolean;
    FlandingPageId : string;
  Protected
    //Property setters
    Procedure SetcustomClickThroughUrl(AIndex : Integer; AValue : string); virtual;
    Procedure SetdefaultLandingPage(AIndex : Integer; AValue : boolean); virtual;
    Procedure SetlandingPageId(AIndex : Integer; AValue : string); virtual;
  Public
  Published
    Property customClickThroughUrl : string Index 0 Read FcustomClickThroughUrl Write SetcustomClickThroughUrl;
    Property defaultLandingPage : boolean Index 8 Read FdefaultLandingPage Write SetdefaultLandingPage;
    Property landingPageId : string Index 16 Read FlandingPageId Write SetlandingPageId;
  end;
  TClickThroughUrlClass = Class of TClickThroughUrl;
  
  { --------------------------------------------------------------------
    TClickThroughUrlSuffixProperties
    --------------------------------------------------------------------}
  
  TClickThroughUrlSuffixProperties = Class(TGoogleBaseObject)
  Private
    FclickThroughUrlSuffix : string;
    FoverrideInheritedSuffix : boolean;
  Protected
    //Property setters
    Procedure SetclickThroughUrlSuffix(AIndex : Integer; AValue : string); virtual;
    Procedure SetoverrideInheritedSuffix(AIndex : Integer; AValue : boolean); virtual;
  Public
  Published
    Property clickThroughUrlSuffix : string Index 0 Read FclickThroughUrlSuffix Write SetclickThroughUrlSuffix;
    Property overrideInheritedSuffix : boolean Index 8 Read FoverrideInheritedSuffix Write SetoverrideInheritedSuffix;
  end;
  TClickThroughUrlSuffixPropertiesClass = Class of TClickThroughUrlSuffixProperties;
  
  { --------------------------------------------------------------------
    TCompanionClickThroughOverride
    --------------------------------------------------------------------}
  
  TCompanionClickThroughOverride = Class(TGoogleBaseObject)
  Private
    FclickThroughUrl : TClickThroughUrl;
    FcreativeId : string;
  Protected
    //Property setters
    Procedure SetclickThroughUrl(AIndex : Integer; AValue : TClickThroughUrl); virtual;
    Procedure SetcreativeId(AIndex : Integer; AValue : string); virtual;
  Public
  Published
    Property clickThroughUrl : TClickThroughUrl Index 0 Read FclickThroughUrl Write SetclickThroughUrl;
    Property creativeId : string Index 8 Read FcreativeId Write SetcreativeId;
  end;
  TCompanionClickThroughOverrideClass = Class of TCompanionClickThroughOverride;
  
  { --------------------------------------------------------------------
    TCompatibleFields
    --------------------------------------------------------------------}
  
  TCompatibleFields = Class(TGoogleBaseObject)
  Private
    FcrossDimensionReachReportCompatibleFields : TCrossDimensionReachReportCompatibleFields;
    FfloodlightReportCompatibleFields : TFloodlightReportCompatibleFields;
    Fkind : string;
    FpathToConversionReportCompatibleFields : TPathToConversionReportCompatibleFields;
    FreachReportCompatibleFields : TReachReportCompatibleFields;
    FreportCompatibleFields : TReportCompatibleFields;
  Protected
    //Property setters
    Procedure SetcrossDimensionReachReportCompatibleFields(AIndex : Integer; AValue : TCrossDimensionReachReportCompatibleFields); virtual;
    Procedure SetfloodlightReportCompatibleFields(AIndex : Integer; AValue : TFloodlightReportCompatibleFields); virtual;
    Procedure Setkind(AIndex : Integer; AValue : string); virtual;
    Procedure SetpathToConversionReportCompatibleFields(AIndex : Integer; AValue : TPathToConversionReportCompatibleFields); virtual;
    Procedure SetreachReportCompatibleFields(AIndex : Integer; AValue : TReachReportCompatibleFields); virtual;
    Procedure SetreportCompatibleFields(AIndex : Integer; AValue : TReportCompatibleFields); virtual;
  Public
  Published
    Property crossDimensionReachReportCompatibleFields : TCrossDimensionReachReportCompatibleFields Index 0 Read FcrossDimensionReachReportCompatibleFields Write SetcrossDimensionReachReportCompatibleFields;
    Property floodlightReportCompatibleFields : TFloodlightReportCompatibleFields Index 8 Read FfloodlightReportCompatibleFields Write SetfloodlightReportCompatibleFields;
    Property kind : string Index 16 Read Fkind Write Setkind;
    Property pathToConversionReportCompatibleFields : TPathToConversionReportCompatibleFields Index 24 Read FpathToConversionReportCompatibleFields Write SetpathToConversionReportCompatibleFields;
    Property reachReportCompatibleFields : TReachReportCompatibleFields Index 32 Read FreachReportCompatibleFields Write SetreachReportCompatibleFields;
    Property reportCompatibleFields : TReportCompatibleFields Index 40 Read FreportCompatibleFields Write SetreportCompatibleFields;
  end;
  TCompatibleFieldsClass = Class of TCompatibleFields;
  
  { --------------------------------------------------------------------
    TConnectionType
    --------------------------------------------------------------------}
  
  TConnectionType = Class(TGoogleBaseObject)
  Private
    Fid : string;
    Fkind : string;
    Fname : string;
  Protected
    //Property setters
    Procedure Setid(AIndex : Integer; AValue : string); virtual;
    Procedure Setkind(AIndex : Integer; AValue : string); virtual;
    Procedure Setname(AIndex : Integer; AValue : string); virtual;
  Public
  Published
    Property id : string Index 0 Read Fid Write Setid;
    Property kind : string Index 8 Read Fkind Write Setkind;
    Property name : string Index 16 Read Fname Write Setname;
  end;
  TConnectionTypeClass = Class of TConnectionType;
  
  { --------------------------------------------------------------------
    TConnectionTypesListResponse
    --------------------------------------------------------------------}
  
  TConnectionTypesListResponse = Class(TGoogleBaseObject)
  Private
    FconnectionTypes : TConnectionTypesListResponseconnectionTypes;
    Fkind : string;
  Protected
    //Property setters
    Procedure SetconnectionTypes(AIndex : Integer; AValue : TConnectionTypesListResponseconnectionTypes); virtual;
    Procedure Setkind(AIndex : Integer; AValue : string); virtual;
  Public
  Published
    Property connectionTypes : TConnectionTypesListResponseconnectionTypes Index 0 Read FconnectionTypes Write SetconnectionTypes;
    Property kind : string Index 8 Read Fkind Write Setkind;
  end;
  TConnectionTypesListResponseClass = Class of TConnectionTypesListResponse;
  
  { --------------------------------------------------------------------
    TConnectionTypesListResponseconnectionTypes
    --------------------------------------------------------------------}
  
  TConnectionTypesListResponseconnectionTypes = Class(TGoogleBaseObject)
  Private
  Protected
    //Property setters
  Public
  Published
  end;
  TConnectionTypesListResponseconnectionTypesClass = Class of TConnectionTypesListResponseconnectionTypes;
  
  { --------------------------------------------------------------------
    TContentCategoriesListResponse
    --------------------------------------------------------------------}
  
  TContentCategoriesListResponse = Class(TGoogleBaseObject)
  Private
    FcontentCategories : TContentCategoriesListResponsecontentCategories;
    Fkind : string;
    FnextPageToken : string;
  Protected
    //Property setters
    Procedure SetcontentCategories(AIndex : Integer; AValue : TContentCategoriesListResponsecontentCategories); virtual;
    Procedure Setkind(AIndex : Integer; AValue : string); virtual;
    Procedure SetnextPageToken(AIndex : Integer; AValue : string); virtual;
  Public
  Published
    Property contentCategories : TContentCategoriesListResponsecontentCategories Index 0 Read FcontentCategories Write SetcontentCategories;
    Property kind : string Index 8 Read Fkind Write Setkind;
    Property nextPageToken : string Index 16 Read FnextPageToken Write SetnextPageToken;
  end;
  TContentCategoriesListResponseClass = Class of TContentCategoriesListResponse;
  
  { --------------------------------------------------------------------
    TContentCategoriesListResponsecontentCategories
    --------------------------------------------------------------------}
  
  TContentCategoriesListResponsecontentCategories = Class(TGoogleBaseObject)
  Private
  Protected
    //Property setters
  Public
  Published
  end;
  TContentCategoriesListResponsecontentCategoriesClass = Class of TContentCategoriesListResponsecontentCategories;
  
  { --------------------------------------------------------------------
    TContentCategory
    --------------------------------------------------------------------}
  
  TContentCategory = Class(TGoogleBaseObject)
  Private
    FaccountId : string;
    Fid : string;
    Fkind : string;
    Fname : string;
  Protected
    //Property setters
    Procedure SetaccountId(AIndex : Integer; AValue : string); virtual;
    Procedure Setid(AIndex : Integer; AValue : string); virtual;
    Procedure Setkind(AIndex : Integer; AValue : string); virtual;
    Procedure Setname(AIndex : Integer; AValue : string); virtual;
  Public
  Published
    Property accountId : string Index 0 Read FaccountId Write SetaccountId;
    Property id : string Index 8 Read Fid Write Setid;
    Property kind : string Index 16 Read Fkind Write Setkind;
    Property name : string Index 24 Read Fname Write Setname;
  end;
  TContentCategoryClass = Class of TContentCategory;
  
  { --------------------------------------------------------------------
    TCountriesListResponse
    --------------------------------------------------------------------}
  
  TCountriesListResponse = Class(TGoogleBaseObject)
  Private
    Fcountries : TCountriesListResponsecountries;
    Fkind : string;
  Protected
    //Property setters
    Procedure Setcountries(AIndex : Integer; AValue : TCountriesListResponsecountries); virtual;
    Procedure Setkind(AIndex : Integer; AValue : string); virtual;
  Public
  Published
    Property countries : TCountriesListResponsecountries Index 0 Read Fcountries Write Setcountries;
    Property kind : string Index 8 Read Fkind Write Setkind;
  end;
  TCountriesListResponseClass = Class of TCountriesListResponse;
  
  { --------------------------------------------------------------------
    TCountriesListResponsecountries
    --------------------------------------------------------------------}
  
  TCountriesListResponsecountries = Class(TGoogleBaseObject)
  Private
  Protected
    //Property setters
  Public
  Published
  end;
  TCountriesListResponsecountriesClass = Class of TCountriesListResponsecountries;
  
  { --------------------------------------------------------------------
    TCountry
    --------------------------------------------------------------------}
  
  TCountry = Class(TGoogleBaseObject)
  Private
    FcountryCode : string;
    FdartId : string;
    Fkind : string;
    Fname : string;
    FsslEnabled : boolean;
  Protected
    //Property setters
    Procedure SetcountryCode(AIndex : Integer; AValue : string); virtual;
    Procedure SetdartId(AIndex : Integer; AValue : string); virtual;
    Procedure Setkind(AIndex : Integer; AValue : string); virtual;
    Procedure Setname(AIndex : Integer; AValue : string); virtual;
    Procedure SetsslEnabled(AIndex : Integer; AValue : boolean); virtual;
  Public
  Published
    Property countryCode : string Index 0 Read FcountryCode Write SetcountryCode;
    Property dartId : string Index 8 Read FdartId Write SetdartId;
    Property kind : string Index 16 Read Fkind Write Setkind;
    Property name : string Index 24 Read Fname Write Setname;
    Property sslEnabled : boolean Index 32 Read FsslEnabled Write SetsslEnabled;
  end;
  TCountryClass = Class of TCountry;
  
  { --------------------------------------------------------------------
    TCreative
    --------------------------------------------------------------------}
  
  TCreative = Class(TGoogleBaseObject)
  Private
    FaccountId : string;
    Factive : boolean;
    FadParameters : string;
    FadTagKeys : TCreativeadTagKeys;
    FadvertiserId : string;
    FallowScriptAccess : boolean;
    Farchived : boolean;
    FartworkType : string;
    FauthoringTool : string;
    Fauto_advance_images : boolean;
    FbackgroundColor : string;
    FbackupImageClickThroughUrl : string;
    FbackupImageFeatures : TCreativebackupImageFeatures;
    FbackupImageReportingLabel : string;
    FbackupImageTargetWindow : TTargetWindow;
    FclickTags : TCreativeclickTags;
    FcommercialId : string;
    FcompanionCreatives : TCreativecompanionCreatives;
    Fcompatibility : TCreativecompatibility;
    FconvertFlashToHtml5 : boolean;
    FcounterCustomEvents : TCreativecounterCustomEvents;
    FcreativeAssets : TCreativecreativeAssets;
    FcreativeFieldAssignments : TCreativecreativeFieldAssignments;
    FcustomKeyValues : TCreativecustomKeyValues;
    FexitCustomEvents : TCreativeexitCustomEvents;
    FfsCommand : TFsCommand;
    FhtmlCode : string;
    FhtmlCodeLocked : boolean;
    Fid : string;
    FidDimensionValue : TDimensionValue;
    Fkind : string;
    FlastModifiedInfo : TLastModifiedInfo;
    FlatestTraffickedCreativeId : string;
    Fname : string;
    FoverrideCss : string;
    FredirectUrl : string;
    FrenderingId : string;
    FrenderingIdDimensionValue : TDimensionValue;
    FrequiredFlashPluginVersion : string;
    FrequiredFlashVersion : integer;
    Fsize : TSize;
    Fskippable : boolean;
    FsslCompliant : boolean;
    FstudioAdvertiserId : string;
    FstudioCreativeId : string;
    FstudioTraffickedCreativeId : string;
    FsubaccountId : string;
    FthirdPartyBackupImageImpressionsUrl : string;
    FthirdPartyRichMediaImpressionsUrl : string;
    FthirdPartyUrls : TCreativethirdPartyUrls;
    FtimerCustomEvents : TCreativetimerCustomEvents;
    FtotalFileSize : string;
    F_type : string;
    Fversion : integer;
    FvideoDescription : string;
    FvideoDuration : integer;
  Protected
    Class Function ExportPropertyName(Const AName : String) : string; override;
    //Property setters
    Procedure SetaccountId(AIndex : Integer; AValue : string); virtual;
    Procedure Setactive(AIndex : Integer; AValue : boolean); virtual;
    Procedure SetadParameters(AIndex : Integer; AValue : string); virtual;
    Procedure SetadTagKeys(AIndex : Integer; AValue : TCreativeadTagKeys); virtual;
    Procedure SetadvertiserId(AIndex : Integer; AValue : string); virtual;
    Procedure SetallowScriptAccess(AIndex : Integer; AValue : boolean); virtual;
    Procedure Setarchived(AIndex : Integer; AValue : boolean); virtual;
    Procedure SetartworkType(AIndex : Integer; AValue : string); virtual;
    Procedure SetauthoringTool(AIndex : Integer; AValue : string); virtual;
    Procedure Setauto_advance_images(AIndex : Integer; AValue : boolean); virtual;
    Procedure SetbackgroundColor(AIndex : Integer; AValue : string); virtual;
    Procedure SetbackupImageClickThroughUrl(AIndex : Integer; AValue : string); virtual;
    Procedure SetbackupImageFeatures(AIndex : Integer; AValue : TCreativebackupImageFeatures); virtual;
    Procedure SetbackupImageReportingLabel(AIndex : Integer; AValue : string); virtual;
    Procedure SetbackupImageTargetWindow(AIndex : Integer; AValue : TTargetWindow); virtual;
    Procedure SetclickTags(AIndex : Integer; AValue : TCreativeclickTags); virtual;
    Procedure SetcommercialId(AIndex : Integer; AValue : string); virtual;
    Procedure SetcompanionCreatives(AIndex : Integer; AValue : TCreativecompanionCreatives); virtual;
    Procedure Setcompatibility(AIndex : Integer; AValue : TCreativecompatibility); virtual;
    Procedure SetconvertFlashToHtml5(AIndex : Integer; AValue : boolean); virtual;
    Procedure SetcounterCustomEvents(AIndex : Integer; AValue : TCreativecounterCustomEvents); virtual;
    Procedure SetcreativeAssets(AIndex : Integer; AValue : TCreativecreativeAssets); virtual;
    Procedure SetcreativeFieldAssignments(AIndex : Integer; AValue : TCreativecreativeFieldAssignments); virtual;
    Procedure SetcustomKeyValues(AIndex : Integer; AValue : TCreativecustomKeyValues); virtual;
    Procedure SetexitCustomEvents(AIndex : Integer; AValue : TCreativeexitCustomEvents); virtual;
    Procedure SetfsCommand(AIndex : Integer; AValue : TFsCommand); virtual;
    Procedure SethtmlCode(AIndex : Integer; AValue : string); virtual;
    Procedure SethtmlCodeLocked(AIndex : Integer; AValue : boolean); virtual;
    Procedure Setid(AIndex : Integer; AValue : string); virtual;
    Procedure SetidDimensionValue(AIndex : Integer; AValue : TDimensionValue); virtual;
    Procedure Setkind(AIndex : Integer; AValue : string); virtual;
    Procedure SetlastModifiedInfo(AIndex : Integer; AValue : TLastModifiedInfo); virtual;
    Procedure SetlatestTraffickedCreativeId(AIndex : Integer; AValue : string); virtual;
    Procedure Setname(AIndex : Integer; AValue : string); virtual;
    Procedure SetoverrideCss(AIndex : Integer; AValue : string); virtual;
    Procedure SetredirectUrl(AIndex : Integer; AValue : string); virtual;
    Procedure SetrenderingId(AIndex : Integer; AValue : string); virtual;
    Procedure SetrenderingIdDimensionValue(AIndex : Integer; AValue : TDimensionValue); virtual;
    Procedure SetrequiredFlashPluginVersion(AIndex : Integer; AValue : string); virtual;
    Procedure SetrequiredFlashVersion(AIndex : Integer; AValue : integer); virtual;
    Procedure Setsize(AIndex : Integer; AValue : TSize); virtual;
    Procedure Setskippable(AIndex : Integer; AValue : boolean); virtual;
    Procedure SetsslCompliant(AIndex : Integer; AValue : boolean); virtual;
    Procedure SetstudioAdvertiserId(AIndex : Integer; AValue : string); virtual;
    Procedure SetstudioCreativeId(AIndex : Integer; AValue : string); virtual;
    Procedure SetstudioTraffickedCreativeId(AIndex : Integer; AValue : string); virtual;
    Procedure SetsubaccountId(AIndex : Integer; AValue : string); virtual;
    Procedure SetthirdPartyBackupImageImpressionsUrl(AIndex : Integer; AValue : string); virtual;
    Procedure SetthirdPartyRichMediaImpressionsUrl(AIndex : Integer; AValue : string); virtual;
    Procedure SetthirdPartyUrls(AIndex : Integer; AValue : TCreativethirdPartyUrls); virtual;
    Procedure SettimerCustomEvents(AIndex : Integer; AValue : TCreativetimerCustomEvents); virtual;
    Procedure SettotalFileSize(AIndex : Integer; AValue : string); virtual;
    Procedure Set_type(AIndex : Integer; AValue : string); virtual;
    Procedure Setversion(AIndex : Integer; AValue : integer); virtual;
    Procedure SetvideoDescription(AIndex : Integer; AValue : string); virtual;
    Procedure SetvideoDuration(AIndex : Integer; AValue : integer); virtual;
  Public
  Published
    Property accountId : string Index 0 Read FaccountId Write SetaccountId;
    Property active : boolean Index 8 Read Factive Write Setactive;
    Property adParameters : string Index 16 Read FadParameters Write SetadParameters;
    Property adTagKeys : TCreativeadTagKeys Index 24 Read FadTagKeys Write SetadTagKeys;
    Property advertiserId : string Index 32 Read FadvertiserId Write SetadvertiserId;
    Property allowScriptAccess : boolean Index 40 Read FallowScriptAccess Write SetallowScriptAccess;
    Property archived : boolean Index 48 Read Farchived Write Setarchived;
    Property artworkType : string Index 56 Read FartworkType Write SetartworkType;
    Property authoringTool : string Index 64 Read FauthoringTool Write SetauthoringTool;
    Property auto_advance_images : boolean Index 72 Read Fauto_advance_images Write Setauto_advance_images;
    Property backgroundColor : string Index 80 Read FbackgroundColor Write SetbackgroundColor;
    Property backupImageClickThroughUrl : string Index 88 Read FbackupImageClickThroughUrl Write SetbackupImageClickThroughUrl;
    Property backupImageFeatures : TCreativebackupImageFeatures Index 96 Read FbackupImageFeatures Write SetbackupImageFeatures;
    Property backupImageReportingLabel : string Index 104 Read FbackupImageReportingLabel Write SetbackupImageReportingLabel;
    Property backupImageTargetWindow : TTargetWindow Index 112 Read FbackupImageTargetWindow Write SetbackupImageTargetWindow;
    Property clickTags : TCreativeclickTags Index 120 Read FclickTags Write SetclickTags;
    Property commercialId : string Index 128 Read FcommercialId Write SetcommercialId;
    Property companionCreatives : TCreativecompanionCreatives Index 136 Read FcompanionCreatives Write SetcompanionCreatives;
    Property compatibility : TCreativecompatibility Index 144 Read Fcompatibility Write Setcompatibility;
    Property convertFlashToHtml5 : boolean Index 152 Read FconvertFlashToHtml5 Write SetconvertFlashToHtml5;
    Property counterCustomEvents : TCreativecounterCustomEvents Index 160 Read FcounterCustomEvents Write SetcounterCustomEvents;
    Property creativeAssets : TCreativecreativeAssets Index 168 Read FcreativeAssets Write SetcreativeAssets;
    Property creativeFieldAssignments : TCreativecreativeFieldAssignments Index 176 Read FcreativeFieldAssignments Write SetcreativeFieldAssignments;
    Property customKeyValues : TCreativecustomKeyValues Index 184 Read FcustomKeyValues Write SetcustomKeyValues;
    Property exitCustomEvents : TCreativeexitCustomEvents Index 192 Read FexitCustomEvents Write SetexitCustomEvents;
    Property fsCommand : TFsCommand Index 200 Read FfsCommand Write SetfsCommand;
    Property htmlCode : string Index 208 Read FhtmlCode Write SethtmlCode;
    Property htmlCodeLocked : boolean Index 216 Read FhtmlCodeLocked Write SethtmlCodeLocked;
    Property id : string Index 224 Read Fid Write Setid;
    Property idDimensionValue : TDimensionValue Index 232 Read FidDimensionValue Write SetidDimensionValue;
    Property kind : string Index 240 Read Fkind Write Setkind;
    Property lastModifiedInfo : TLastModifiedInfo Index 248 Read FlastModifiedInfo Write SetlastModifiedInfo;
    Property latestTraffickedCreativeId : string Index 256 Read FlatestTraffickedCreativeId Write SetlatestTraffickedCreativeId;
    Property name : string Index 264 Read Fname Write Setname;
    Property overrideCss : string Index 272 Read FoverrideCss Write SetoverrideCss;
    Property redirectUrl : string Index 280 Read FredirectUrl Write SetredirectUrl;
    Property renderingId : string Index 288 Read FrenderingId Write SetrenderingId;
    Property renderingIdDimensionValue : TDimensionValue Index 296 Read FrenderingIdDimensionValue Write SetrenderingIdDimensionValue;
    Property requiredFlashPluginVersion : string Index 304 Read FrequiredFlashPluginVersion Write SetrequiredFlashPluginVersion;
    Property requiredFlashVersion : integer Index 312 Read FrequiredFlashVersion Write SetrequiredFlashVersion;
    Property size : TSize Index 320 Read Fsize Write Setsize;
    Property skippable : boolean Index 328 Read Fskippable Write Setskippable;
    Property sslCompliant : boolean Index 336 Read FsslCompliant Write SetsslCompliant;
    Property studioAdvertiserId : string Index 344 Read FstudioAdvertiserId Write SetstudioAdvertiserId;
    Property studioCreativeId : string Index 352 Read FstudioCreativeId Write SetstudioCreativeId;
    Property studioTraffickedCreativeId : string Index 360 Read FstudioTraffickedCreativeId Write SetstudioTraffickedCreativeId;
    Property subaccountId : string Index 368 Read FsubaccountId Write SetsubaccountId;
    Property thirdPartyBackupImageImpressionsUrl : string Index 376 Read FthirdPartyBackupImageImpressionsUrl Write SetthirdPartyBackupImageImpressionsUrl;
    Property thirdPartyRichMediaImpressionsUrl : string Index 384 Read FthirdPartyRichMediaImpressionsUrl Write SetthirdPartyRichMediaImpressionsUrl;
    Property thirdPartyUrls : TCreativethirdPartyUrls Index 392 Read FthirdPartyUrls Write SetthirdPartyUrls;
    Property timerCustomEvents : TCreativetimerCustomEvents Index 400 Read FtimerCustomEvents Write SettimerCustomEvents;
    Property totalFileSize : string Index 408 Read FtotalFileSize Write SettotalFileSize;
    Property _type : string Index 416 Read F_type Write Set_type;
    Property version : integer Index 424 Read Fversion Write Setversion;
    Property videoDescription : string Index 432 Read FvideoDescription Write SetvideoDescription;
    Property videoDuration : integer Index 440 Read FvideoDuration Write SetvideoDuration;
  end;
  TCreativeClass = Class of TCreative;
  
  { --------------------------------------------------------------------
    TCreativeadTagKeys
    --------------------------------------------------------------------}
  
  TCreativeadTagKeys = Class(TGoogleBaseObject)
  Private
  Protected
    //Property setters
  Public
  Published
  end;
  TCreativeadTagKeysClass = Class of TCreativeadTagKeys;
  
  { --------------------------------------------------------------------
    TCreativebackupImageFeatures
    --------------------------------------------------------------------}
  
  TCreativebackupImageFeatures = Class(TGoogleBaseObject)
  Private
  Protected
    //Property setters
  Public
  Published
  end;
  TCreativebackupImageFeaturesClass = Class of TCreativebackupImageFeatures;
  
  { --------------------------------------------------------------------
    TCreativeclickTags
    --------------------------------------------------------------------}
  
  TCreativeclickTags = Class(TGoogleBaseObject)
  Private
  Protected
    //Property setters
  Public
  Published
  end;
  TCreativeclickTagsClass = Class of TCreativeclickTags;
  
  { --------------------------------------------------------------------
    TCreativecompanionCreatives
    --------------------------------------------------------------------}
  
  TCreativecompanionCreatives = Class(TGoogleBaseObject)
  Private
  Protected
    //Property setters
  Public
  Published
  end;
  TCreativecompanionCreativesClass = Class of TCreativecompanionCreatives;
  
  { --------------------------------------------------------------------
    TCreativecompatibility
    --------------------------------------------------------------------}
  
  TCreativecompatibility = Class(TGoogleBaseObject)
  Private
  Protected
    //Property setters
  Public
  Published
  end;
  TCreativecompatibilityClass = Class of TCreativecompatibility;
  
  { --------------------------------------------------------------------
    TCreativecounterCustomEvents
    --------------------------------------------------------------------}
  
  TCreativecounterCustomEvents = Class(TGoogleBaseObject)
  Private
  Protected
    //Property setters
  Public
  Published
  end;
  TCreativecounterCustomEventsClass = Class of TCreativecounterCustomEvents;
  
  { --------------------------------------------------------------------
    TCreativecreativeAssets
    --------------------------------------------------------------------}
  
  TCreativecreativeAssets = Class(TGoogleBaseObject)
  Private
  Protected
    //Property setters
  Public
  Published
  end;
  TCreativecreativeAssetsClass = Class of TCreativecreativeAssets;
  
  { --------------------------------------------------------------------
    TCreativecreativeFieldAssignments
    --------------------------------------------------------------------}
  
  TCreativecreativeFieldAssignments = Class(TGoogleBaseObject)
  Private
  Protected
    //Property setters
  Public
  Published
  end;
  TCreativecreativeFieldAssignmentsClass = Class of TCreativecreativeFieldAssignments;
  
  { --------------------------------------------------------------------
    TCreativecustomKeyValues
    --------------------------------------------------------------------}
  
  TCreativecustomKeyValues = Class(TGoogleBaseObject)
  Private
  Protected
    //Property setters
  Public
  Published
  end;
  TCreativecustomKeyValuesClass = Class of TCreativecustomKeyValues;
  
  { --------------------------------------------------------------------
    TCreativeexitCustomEvents
    --------------------------------------------------------------------}
  
  TCreativeexitCustomEvents = Class(TGoogleBaseObject)
  Private
  Protected
    //Property setters
  Public
  Published
  end;
  TCreativeexitCustomEventsClass = Class of TCreativeexitCustomEvents;
  
  { --------------------------------------------------------------------
    TCreativethirdPartyUrls
    --------------------------------------------------------------------}
  
  TCreativethirdPartyUrls = Class(TGoogleBaseObject)
  Private
  Protected
    //Property setters
  Public
  Published
  end;
  TCreativethirdPartyUrlsClass = Class of TCreativethirdPartyUrls;
  
  { --------------------------------------------------------------------
    TCreativetimerCustomEvents
    --------------------------------------------------------------------}
  
  TCreativetimerCustomEvents = Class(TGoogleBaseObject)
  Private
  Protected
    //Property setters
  Public
  Published
  end;
  TCreativetimerCustomEventsClass = Class of TCreativetimerCustomEvents;
  
  { --------------------------------------------------------------------
    TCreativeAsset
    --------------------------------------------------------------------}
  
  TCreativeAsset = Class(TGoogleBaseObject)
  Private
    FactionScript3 : boolean;
    Factive : boolean;
    Falignment : string;
    FartworkType : string;
    FassetIdentifier : TCreativeAssetId;
    FbackupImageExit : TCreativeCustomEvent;
    FbitRate : integer;
    FchildAssetType : string;
    FcollapsedSize : TSize;
    FcustomStartTimeValue : integer;
    FdetectedFeatures : TCreativeAssetdetectedFeatures;
    FdisplayType : string;
    Fduration : integer;
    FdurationType : string;
    FexpandedDimension : TSize;
    FfileSize : string;
    FflashVersion : integer;
    FhideFlashObjects : boolean;
    FhideSelectionBoxes : boolean;
    FhorizontallyLocked : boolean;
    Fid : string;
    FmimeType : string;
    Foffset : TOffsetPosition;
    ForiginalBackup : boolean;
    Fposition : TOffsetPosition;
    FpositionLeftUnit : string;
    FpositionTopUnit : string;
    FprogressiveServingUrl : string;
    Fpushdown : boolean;
    FpushdownDuration : integer;
    Frole : string;
    Fsize : TSize;
    FsslCompliant : boolean;
    FstartTimeType : string;
    FstreamingServingUrl : string;
    Ftransparency : boolean;
    FverticallyLocked : boolean;
    FvideoDuration : integer;
    FwindowMode : string;
    FzIndex : integer;
    FzipFilename : string;
    FzipFilesize : string;
  Protected
    //Property setters
    Procedure SetactionScript3(AIndex : Integer; AValue : boolean); virtual;
    Procedure Setactive(AIndex : Integer; AValue : boolean); virtual;
    Procedure Setalignment(AIndex : Integer; AValue : string); virtual;
    Procedure SetartworkType(AIndex : Integer; AValue : string); virtual;
    Procedure SetassetIdentifier(AIndex : Integer; AValue : TCreativeAssetId); virtual;
    Procedure SetbackupImageExit(AIndex : Integer; AValue : TCreativeCustomEvent); virtual;
    Procedure SetbitRate(AIndex : Integer; AValue : integer); virtual;
    Procedure SetchildAssetType(AIndex : Integer; AValue : string); virtual;
    Procedure SetcollapsedSize(AIndex : Integer; AValue : TSize); virtual;
    Procedure SetcustomStartTimeValue(AIndex : Integer; AValue : integer); virtual;
    Procedure SetdetectedFeatures(AIndex : Integer; AValue : TCreativeAssetdetectedFeatures); virtual;
    Procedure SetdisplayType(AIndex : Integer; AValue : string); virtual;
    Procedure Setduration(AIndex : Integer; AValue : integer); virtual;
    Procedure SetdurationType(AIndex : Integer; AValue : string); virtual;
    Procedure SetexpandedDimension(AIndex : Integer; AValue : TSize); virtual;
    Procedure SetfileSize(AIndex : Integer; AValue : string); virtual;
    Procedure SetflashVersion(AIndex : Integer; AValue : integer); virtual;
    Procedure SethideFlashObjects(AIndex : Integer; AValue : boolean); virtual;
    Procedure SethideSelectionBoxes(AIndex : Integer; AValue : boolean); virtual;
    Procedure SethorizontallyLocked(AIndex : Integer; AValue : boolean); virtual;
    Procedure Setid(AIndex : Integer; AValue : string); virtual;
    Procedure SetmimeType(AIndex : Integer; AValue : string); virtual;
    Procedure Setoffset(AIndex : Integer; AValue : TOffsetPosition); virtual;
    Procedure SetoriginalBackup(AIndex : Integer; AValue : boolean); virtual;
    Procedure Setposition(AIndex : Integer; AValue : TOffsetPosition); virtual;
    Procedure SetpositionLeftUnit(AIndex : Integer; AValue : string); virtual;
    Procedure SetpositionTopUnit(AIndex : Integer; AValue : string); virtual;
    Procedure SetprogressiveServingUrl(AIndex : Integer; AValue : string); virtual;
    Procedure Setpushdown(AIndex : Integer; AValue : boolean); virtual;
    Procedure SetpushdownDuration(AIndex : Integer; AValue : integer); virtual;
    Procedure Setrole(AIndex : Integer; AValue : string); virtual;
    Procedure Setsize(AIndex : Integer; AValue : TSize); virtual;
    Procedure SetsslCompliant(AIndex : Integer; AValue : boolean); virtual;
    Procedure SetstartTimeType(AIndex : Integer; AValue : string); virtual;
    Procedure SetstreamingServingUrl(AIndex : Integer; AValue : string); virtual;
    Procedure Settransparency(AIndex : Integer; AValue : boolean); virtual;
    Procedure SetverticallyLocked(AIndex : Integer; AValue : boolean); virtual;
    Procedure SetvideoDuration(AIndex : Integer; AValue : integer); virtual;
    Procedure SetwindowMode(AIndex : Integer; AValue : string); virtual;
    Procedure SetzIndex(AIndex : Integer; AValue : integer); virtual;
    Procedure SetzipFilename(AIndex : Integer; AValue : string); virtual;
    Procedure SetzipFilesize(AIndex : Integer; AValue : string); virtual;
  Public
  Published
    Property actionScript3 : boolean Index 0 Read FactionScript3 Write SetactionScript3;
    Property active : boolean Index 8 Read Factive Write Setactive;
    Property alignment : string Index 16 Read Falignment Write Setalignment;
    Property artworkType : string Index 24 Read FartworkType Write SetartworkType;
    Property assetIdentifier : TCreativeAssetId Index 32 Read FassetIdentifier Write SetassetIdentifier;
    Property backupImageExit : TCreativeCustomEvent Index 40 Read FbackupImageExit Write SetbackupImageExit;
    Property bitRate : integer Index 48 Read FbitRate Write SetbitRate;
    Property childAssetType : string Index 56 Read FchildAssetType Write SetchildAssetType;
    Property collapsedSize : TSize Index 64 Read FcollapsedSize Write SetcollapsedSize;
    Property customStartTimeValue : integer Index 72 Read FcustomStartTimeValue Write SetcustomStartTimeValue;
    Property detectedFeatures : TCreativeAssetdetectedFeatures Index 80 Read FdetectedFeatures Write SetdetectedFeatures;
    Property displayType : string Index 88 Read FdisplayType Write SetdisplayType;
    Property duration : integer Index 96 Read Fduration Write Setduration;
    Property durationType : string Index 104 Read FdurationType Write SetdurationType;
    Property expandedDimension : TSize Index 112 Read FexpandedDimension Write SetexpandedDimension;
    Property fileSize : string Index 120 Read FfileSize Write SetfileSize;
    Property flashVersion : integer Index 128 Read FflashVersion Write SetflashVersion;
    Property hideFlashObjects : boolean Index 136 Read FhideFlashObjects Write SethideFlashObjects;
    Property hideSelectionBoxes : boolean Index 144 Read FhideSelectionBoxes Write SethideSelectionBoxes;
    Property horizontallyLocked : boolean Index 152 Read FhorizontallyLocked Write SethorizontallyLocked;
    Property id : string Index 160 Read Fid Write Setid;
    Property mimeType : string Index 168 Read FmimeType Write SetmimeType;
    Property offset : TOffsetPosition Index 176 Read Foffset Write Setoffset;
    Property originalBackup : boolean Index 184 Read ForiginalBackup Write SetoriginalBackup;
    Property position : TOffsetPosition Index 192 Read Fposition Write Setposition;
    Property positionLeftUnit : string Index 200 Read FpositionLeftUnit Write SetpositionLeftUnit;
    Property positionTopUnit : string Index 208 Read FpositionTopUnit Write SetpositionTopUnit;
    Property progressiveServingUrl : string Index 216 Read FprogressiveServingUrl Write SetprogressiveServingUrl;
    Property pushdown : boolean Index 224 Read Fpushdown Write Setpushdown;
    Property pushdownDuration : integer Index 232 Read FpushdownDuration Write SetpushdownDuration;
    Property role : string Index 240 Read Frole Write Setrole;
    Property size : TSize Index 248 Read Fsize Write Setsize;
    Property sslCompliant : boolean Index 256 Read FsslCompliant Write SetsslCompliant;
    Property startTimeType : string Index 264 Read FstartTimeType Write SetstartTimeType;
    Property streamingServingUrl : string Index 272 Read FstreamingServingUrl Write SetstreamingServingUrl;
    Property transparency : boolean Index 280 Read Ftransparency Write Settransparency;
    Property verticallyLocked : boolean Index 288 Read FverticallyLocked Write SetverticallyLocked;
    Property videoDuration : integer Index 296 Read FvideoDuration Write SetvideoDuration;
    Property windowMode : string Index 304 Read FwindowMode Write SetwindowMode;
    Property zIndex : integer Index 312 Read FzIndex Write SetzIndex;
    Property zipFilename : string Index 320 Read FzipFilename Write SetzipFilename;
    Property zipFilesize : string Index 328 Read FzipFilesize Write SetzipFilesize;
  end;
  TCreativeAssetClass = Class of TCreativeAsset;
  
  { --------------------------------------------------------------------
    TCreativeAssetdetectedFeatures
    --------------------------------------------------------------------}
  
  TCreativeAssetdetectedFeatures = Class(TGoogleBaseObject)
  Private
  Protected
    //Property setters
  Public
  Published
  end;
  TCreativeAssetdetectedFeaturesClass = Class of TCreativeAssetdetectedFeatures;
  
  { --------------------------------------------------------------------
    TCreativeAssetId
    --------------------------------------------------------------------}
  
  TCreativeAssetId = Class(TGoogleBaseObject)
  Private
    Fname : string;
    F_type : string;
  Protected
    Class Function ExportPropertyName(Const AName : String) : string; override;
    //Property setters
    Procedure Setname(AIndex : Integer; AValue : string); virtual;
    Procedure Set_type(AIndex : Integer; AValue : string); virtual;
  Public
  Published
    Property name : string Index 0 Read Fname Write Setname;
    Property _type : string Index 8 Read F_type Write Set_type;
  end;
  TCreativeAssetIdClass = Class of TCreativeAssetId;
  
  { --------------------------------------------------------------------
    TCreativeAssetMetadata
    --------------------------------------------------------------------}
  
  TCreativeAssetMetadata = Class(TGoogleBaseObject)
  Private
    FassetIdentifier : TCreativeAssetId;
    FclickTags : TCreativeAssetMetadataclickTags;
    FdetectedFeatures : TCreativeAssetMetadatadetectedFeatures;
    Fkind : string;
    FwarnedValidationRules : TCreativeAssetMetadatawarnedValidationRules;
  Protected
    //Property setters
    Procedure SetassetIdentifier(AIndex : Integer; AValue : TCreativeAssetId); virtual;
    Procedure SetclickTags(AIndex : Integer; AValue : TCreativeAssetMetadataclickTags); virtual;
    Procedure SetdetectedFeatures(AIndex : Integer; AValue : TCreativeAssetMetadatadetectedFeatures); virtual;
    Procedure Setkind(AIndex : Integer; AValue : string); virtual;
    Procedure SetwarnedValidationRules(AIndex : Integer; AValue : TCreativeAssetMetadatawarnedValidationRules); virtual;
  Public
  Published
    Property assetIdentifier : TCreativeAssetId Index 0 Read FassetIdentifier Write SetassetIdentifier;
    Property clickTags : TCreativeAssetMetadataclickTags Index 8 Read FclickTags Write SetclickTags;
    Property detectedFeatures : TCreativeAssetMetadatadetectedFeatures Index 16 Read FdetectedFeatures Write SetdetectedFeatures;
    Property kind : string Index 24 Read Fkind Write Setkind;
    Property warnedValidationRules : TCreativeAssetMetadatawarnedValidationRules Index 32 Read FwarnedValidationRules Write SetwarnedValidationRules;
  end;
  TCreativeAssetMetadataClass = Class of TCreativeAssetMetadata;
  
  { --------------------------------------------------------------------
    TCreativeAssetMetadataclickTags
    --------------------------------------------------------------------}
  
  TCreativeAssetMetadataclickTags = Class(TGoogleBaseObject)
  Private
  Protected
    //Property setters
  Public
  Published
  end;
  TCreativeAssetMetadataclickTagsClass = Class of TCreativeAssetMetadataclickTags;
  
  { --------------------------------------------------------------------
    TCreativeAssetMetadatadetectedFeatures
    --------------------------------------------------------------------}
  
  TCreativeAssetMetadatadetectedFeatures = Class(TGoogleBaseObject)
  Private
  Protected
    //Property setters
  Public
  Published
  end;
  TCreativeAssetMetadatadetectedFeaturesClass = Class of TCreativeAssetMetadatadetectedFeatures;
  
  { --------------------------------------------------------------------
    TCreativeAssetMetadatawarnedValidationRules
    --------------------------------------------------------------------}
  
  TCreativeAssetMetadatawarnedValidationRules = Class(TGoogleBaseObject)
  Private
  Protected
    //Property setters
  Public
  Published
  end;
  TCreativeAssetMetadatawarnedValidationRulesClass = Class of TCreativeAssetMetadatawarnedValidationRules;
  
  { --------------------------------------------------------------------
    TCreativeAssignment
    --------------------------------------------------------------------}
  
  TCreativeAssignment = Class(TGoogleBaseObject)
  Private
    Factive : boolean;
    FapplyEventTags : boolean;
    FclickThroughUrl : TClickThroughUrl;
    FcompanionCreativeOverrides : TCreativeAssignmentcompanionCreativeOverrides;
    FcreativeGroupAssignments : TCreativeAssignmentcreativeGroupAssignments;
    FcreativeId : string;
    FcreativeIdDimensionValue : TDimensionValue;
    FendTime : TDatetime;
    FrichMediaExitOverrides : TCreativeAssignmentrichMediaExitOverrides;
    Fsequence : integer;
    FsslCompliant : boolean;
    FstartTime : TDatetime;
    Fweight : integer;
  Protected
    //Property setters
    Procedure Setactive(AIndex : Integer; AValue : boolean); virtual;
    Procedure SetapplyEventTags(AIndex : Integer; AValue : boolean); virtual;
    Procedure SetclickThroughUrl(AIndex : Integer; AValue : TClickThroughUrl); virtual;
    Procedure SetcompanionCreativeOverrides(AIndex : Integer; AValue : TCreativeAssignmentcompanionCreativeOverrides); virtual;
    Procedure SetcreativeGroupAssignments(AIndex : Integer; AValue : TCreativeAssignmentcreativeGroupAssignments); virtual;
    Procedure SetcreativeId(AIndex : Integer; AValue : string); virtual;
    Procedure SetcreativeIdDimensionValue(AIndex : Integer; AValue : TDimensionValue); virtual;
    Procedure SetendTime(AIndex : Integer; AValue : TDatetime); virtual;
    Procedure SetrichMediaExitOverrides(AIndex : Integer; AValue : TCreativeAssignmentrichMediaExitOverrides); virtual;
    Procedure Setsequence(AIndex : Integer; AValue : integer); virtual;
    Procedure SetsslCompliant(AIndex : Integer; AValue : boolean); virtual;
    Procedure SetstartTime(AIndex : Integer; AValue : TDatetime); virtual;
    Procedure Setweight(AIndex : Integer; AValue : integer); virtual;
  Public
  Published
    Property active : boolean Index 0 Read Factive Write Setactive;
    Property applyEventTags : boolean Index 8 Read FapplyEventTags Write SetapplyEventTags;
    Property clickThroughUrl : TClickThroughUrl Index 16 Read FclickThroughUrl Write SetclickThroughUrl;
    Property companionCreativeOverrides : TCreativeAssignmentcompanionCreativeOverrides Index 24 Read FcompanionCreativeOverrides Write SetcompanionCreativeOverrides;
    Property creativeGroupAssignments : TCreativeAssignmentcreativeGroupAssignments Index 32 Read FcreativeGroupAssignments Write SetcreativeGroupAssignments;
    Property creativeId : string Index 40 Read FcreativeId Write SetcreativeId;
    Property creativeIdDimensionValue : TDimensionValue Index 48 Read FcreativeIdDimensionValue Write SetcreativeIdDimensionValue;
    Property endTime : TDatetime Index 56 Read FendTime Write SetendTime;
    Property richMediaExitOverrides : TCreativeAssignmentrichMediaExitOverrides Index 64 Read FrichMediaExitOverrides Write SetrichMediaExitOverrides;
    Property sequence : integer Index 72 Read Fsequence Write Setsequence;
    Property sslCompliant : boolean Index 80 Read FsslCompliant Write SetsslCompliant;
    Property startTime : TDatetime Index 88 Read FstartTime Write SetstartTime;
    Property weight : integer Index 96 Read Fweight Write Setweight;
  end;
  TCreativeAssignmentClass = Class of TCreativeAssignment;
  
  { --------------------------------------------------------------------
    TCreativeAssignmentcompanionCreativeOverrides
    --------------------------------------------------------------------}
  
  TCreativeAssignmentcompanionCreativeOverrides = Class(TGoogleBaseObject)
  Private
  Protected
    //Property setters
  Public
  Published
  end;
  TCreativeAssignmentcompanionCreativeOverridesClass = Class of TCreativeAssignmentcompanionCreativeOverrides;
  
  { --------------------------------------------------------------------
    TCreativeAssignmentcreativeGroupAssignments
    --------------------------------------------------------------------}
  
  TCreativeAssignmentcreativeGroupAssignments = Class(TGoogleBaseObject)
  Private
  Protected
    //Property setters
  Public
  Published
  end;
  TCreativeAssignmentcreativeGroupAssignmentsClass = Class of TCreativeAssignmentcreativeGroupAssignments;
  
  { --------------------------------------------------------------------
    TCreativeAssignmentrichMediaExitOverrides
    --------------------------------------------------------------------}
  
  TCreativeAssignmentrichMediaExitOverrides = Class(TGoogleBaseObject)
  Private
  Protected
    //Property setters
  Public
  Published
  end;
  TCreativeAssignmentrichMediaExitOverridesClass = Class of TCreativeAssignmentrichMediaExitOverrides;
  
  { --------------------------------------------------------------------
    TCreativeCustomEvent
    --------------------------------------------------------------------}
  
  TCreativeCustomEvent = Class(TGoogleBaseObject)
  Private
    Factive : boolean;
    FadvertiserCustomEventName : string;
    FadvertiserCustomEventType : string;
    FartworkLabel : string;
    FartworkType : string;
    FexitUrl : string;
    Fid : string;
    FpopupWindowProperties : TPopupWindowProperties;
    FtargetType : string;
    FvideoReportingId : string;
  Protected
    //Property setters
    Procedure Setactive(AIndex : Integer; AValue : boolean); virtual;
    Procedure SetadvertiserCustomEventName(AIndex : Integer; AValue : string); virtual;
    Procedure SetadvertiserCustomEventType(AIndex : Integer; AValue : string); virtual;
    Procedure SetartworkLabel(AIndex : Integer; AValue : string); virtual;
    Procedure SetartworkType(AIndex : Integer; AValue : string); virtual;
    Procedure SetexitUrl(AIndex : Integer; AValue : string); virtual;
    Procedure Setid(AIndex : Integer; AValue : string); virtual;
    Procedure SetpopupWindowProperties(AIndex : Integer; AValue : TPopupWindowProperties); virtual;
    Procedure SettargetType(AIndex : Integer; AValue : string); virtual;
    Procedure SetvideoReportingId(AIndex : Integer; AValue : string); virtual;
  Public
  Published
    Property active : boolean Index 0 Read Factive Write Setactive;
    Property advertiserCustomEventName : string Index 8 Read FadvertiserCustomEventName Write SetadvertiserCustomEventName;
    Property advertiserCustomEventType : string Index 16 Read FadvertiserCustomEventType Write SetadvertiserCustomEventType;
    Property artworkLabel : string Index 24 Read FartworkLabel Write SetartworkLabel;
    Property artworkType : string Index 32 Read FartworkType Write SetartworkType;
    Property exitUrl : string Index 40 Read FexitUrl Write SetexitUrl;
    Property id : string Index 48 Read Fid Write Setid;
    Property popupWindowProperties : TPopupWindowProperties Index 56 Read FpopupWindowProperties Write SetpopupWindowProperties;
    Property targetType : string Index 64 Read FtargetType Write SettargetType;
    Property videoReportingId : string Index 72 Read FvideoReportingId Write SetvideoReportingId;
  end;
  TCreativeCustomEventClass = Class of TCreativeCustomEvent;
  
  { --------------------------------------------------------------------
    TCreativeField
    --------------------------------------------------------------------}
  
  TCreativeField = Class(TGoogleBaseObject)
  Private
    FaccountId : string;
    FadvertiserId : string;
    FadvertiserIdDimensionValue : TDimensionValue;
    Fid : string;
    Fkind : string;
    Fname : string;
    FsubaccountId : string;
  Protected
    //Property setters
    Procedure SetaccountId(AIndex : Integer; AValue : string); virtual;
    Procedure SetadvertiserId(AIndex : Integer; AValue : string); virtual;
    Procedure SetadvertiserIdDimensionValue(AIndex : Integer; AValue : TDimensionValue); virtual;
    Procedure Setid(AIndex : Integer; AValue : string); virtual;
    Procedure Setkind(AIndex : Integer; AValue : string); virtual;
    Procedure Setname(AIndex : Integer; AValue : string); virtual;
    Procedure SetsubaccountId(AIndex : Integer; AValue : string); virtual;
  Public
  Published
    Property accountId : string Index 0 Read FaccountId Write SetaccountId;
    Property advertiserId : string Index 8 Read FadvertiserId Write SetadvertiserId;
    Property advertiserIdDimensionValue : TDimensionValue Index 16 Read FadvertiserIdDimensionValue Write SetadvertiserIdDimensionValue;
    Property id : string Index 24 Read Fid Write Setid;
    Property kind : string Index 32 Read Fkind Write Setkind;
    Property name : string Index 40 Read Fname Write Setname;
    Property subaccountId : string Index 48 Read FsubaccountId Write SetsubaccountId;
  end;
  TCreativeFieldClass = Class of TCreativeField;
  
  { --------------------------------------------------------------------
    TCreativeFieldAssignment
    --------------------------------------------------------------------}
  
  TCreativeFieldAssignment = Class(TGoogleBaseObject)
  Private
    FcreativeFieldId : string;
    FcreativeFieldValueId : string;
  Protected
    //Property setters
    Procedure SetcreativeFieldId(AIndex : Integer; AValue : string); virtual;
    Procedure SetcreativeFieldValueId(AIndex : Integer; AValue : string); virtual;
  Public
  Published
    Property creativeFieldId : string Index 0 Read FcreativeFieldId Write SetcreativeFieldId;
    Property creativeFieldValueId : string Index 8 Read FcreativeFieldValueId Write SetcreativeFieldValueId;
  end;
  TCreativeFieldAssignmentClass = Class of TCreativeFieldAssignment;
  
  { --------------------------------------------------------------------
    TCreativeFieldValue
    --------------------------------------------------------------------}
  
  TCreativeFieldValue = Class(TGoogleBaseObject)
  Private
    Fid : string;
    Fkind : string;
    Fvalue : string;
  Protected
    //Property setters
    Procedure Setid(AIndex : Integer; AValue : string); virtual;
    Procedure Setkind(AIndex : Integer; AValue : string); virtual;
    Procedure Setvalue(AIndex : Integer; AValue : string); virtual;
  Public
  Published
    Property id : string Index 0 Read Fid Write Setid;
    Property kind : string Index 8 Read Fkind Write Setkind;
    Property value : string Index 16 Read Fvalue Write Setvalue;
  end;
  TCreativeFieldValueClass = Class of TCreativeFieldValue;
  
  { --------------------------------------------------------------------
    TCreativeFieldValuesListResponse
    --------------------------------------------------------------------}
  
  TCreativeFieldValuesListResponse = Class(TGoogleBaseObject)
  Private
    FcreativeFieldValues : TCreativeFieldValuesListResponsecreativeFieldValues;
    Fkind : string;
    FnextPageToken : string;
  Protected
    //Property setters
    Procedure SetcreativeFieldValues(AIndex : Integer; AValue : TCreativeFieldValuesListResponsecreativeFieldValues); virtual;
    Procedure Setkind(AIndex : Integer; AValue : string); virtual;
    Procedure SetnextPageToken(AIndex : Integer; AValue : string); virtual;
  Public
  Published
    Property creativeFieldValues : TCreativeFieldValuesListResponsecreativeFieldValues Index 0 Read FcreativeFieldValues Write SetcreativeFieldValues;
    Property kind : string Index 8 Read Fkind Write Setkind;
    Property nextPageToken : string Index 16 Read FnextPageToken Write SetnextPageToken;
  end;
  TCreativeFieldValuesListResponseClass = Class of TCreativeFieldValuesListResponse;
  
  { --------------------------------------------------------------------
    TCreativeFieldValuesListResponsecreativeFieldValues
    --------------------------------------------------------------------}
  
  TCreativeFieldValuesListResponsecreativeFieldValues = Class(TGoogleBaseObject)
  Private
  Protected
    //Property setters
  Public
  Published
  end;
  TCreativeFieldValuesListResponsecreativeFieldValuesClass = Class of TCreativeFieldValuesListResponsecreativeFieldValues;
  
  { --------------------------------------------------------------------
    TCreativeFieldsListResponse
    --------------------------------------------------------------------}
  
  TCreativeFieldsListResponse = Class(TGoogleBaseObject)
  Private
    FcreativeFields : TCreativeFieldsListResponsecreativeFields;
    Fkind : string;
    FnextPageToken : string;
  Protected
    //Property setters
    Procedure SetcreativeFields(AIndex : Integer; AValue : TCreativeFieldsListResponsecreativeFields); virtual;
    Procedure Setkind(AIndex : Integer; AValue : string); virtual;
    Procedure SetnextPageToken(AIndex : Integer; AValue : string); virtual;
  Public
  Published
    Property creativeFields : TCreativeFieldsListResponsecreativeFields Index 0 Read FcreativeFields Write SetcreativeFields;
    Property kind : string Index 8 Read Fkind Write Setkind;
    Property nextPageToken : string Index 16 Read FnextPageToken Write SetnextPageToken;
  end;
  TCreativeFieldsListResponseClass = Class of TCreativeFieldsListResponse;
  
  { --------------------------------------------------------------------
    TCreativeFieldsListResponsecreativeFields
    --------------------------------------------------------------------}
  
  TCreativeFieldsListResponsecreativeFields = Class(TGoogleBaseObject)
  Private
  Protected
    //Property setters
  Public
  Published
  end;
  TCreativeFieldsListResponsecreativeFieldsClass = Class of TCreativeFieldsListResponsecreativeFields;
  
  { --------------------------------------------------------------------
    TCreativeGroup
    --------------------------------------------------------------------}
  
  TCreativeGroup = Class(TGoogleBaseObject)
  Private
    FaccountId : string;
    FadvertiserId : string;
    FadvertiserIdDimensionValue : TDimensionValue;
    FgroupNumber : integer;
    Fid : string;
    Fkind : string;
    Fname : string;
    FsubaccountId : string;
  Protected
    //Property setters
    Procedure SetaccountId(AIndex : Integer; AValue : string); virtual;
    Procedure SetadvertiserId(AIndex : Integer; AValue : string); virtual;
    Procedure SetadvertiserIdDimensionValue(AIndex : Integer; AValue : TDimensionValue); virtual;
    Procedure SetgroupNumber(AIndex : Integer; AValue : integer); virtual;
    Procedure Setid(AIndex : Integer; AValue : string); virtual;
    Procedure Setkind(AIndex : Integer; AValue : string); virtual;
    Procedure Setname(AIndex : Integer; AValue : string); virtual;
    Procedure SetsubaccountId(AIndex : Integer; AValue : string); virtual;
  Public
  Published
    Property accountId : string Index 0 Read FaccountId Write SetaccountId;
    Property advertiserId : string Index 8 Read FadvertiserId Write SetadvertiserId;
    Property advertiserIdDimensionValue : TDimensionValue Index 16 Read FadvertiserIdDimensionValue Write SetadvertiserIdDimensionValue;
    Property groupNumber : integer Index 24 Read FgroupNumber Write SetgroupNumber;
    Property id : string Index 32 Read Fid Write Setid;
    Property kind : string Index 40 Read Fkind Write Setkind;
    Property name : string Index 48 Read Fname Write Setname;
    Property subaccountId : string Index 56 Read FsubaccountId Write SetsubaccountId;
  end;
  TCreativeGroupClass = Class of TCreativeGroup;
  
  { --------------------------------------------------------------------
    TCreativeGroupAssignment
    --------------------------------------------------------------------}
  
  TCreativeGroupAssignment = Class(TGoogleBaseObject)
  Private
    FcreativeGroupId : string;
    FcreativeGroupNumber : string;
  Protected
    //Property setters
    Procedure SetcreativeGroupId(AIndex : Integer; AValue : string); virtual;
    Procedure SetcreativeGroupNumber(AIndex : Integer; AValue : string); virtual;
  Public
  Published
    Property creativeGroupId : string Index 0 Read FcreativeGroupId Write SetcreativeGroupId;
    Property creativeGroupNumber : string Index 8 Read FcreativeGroupNumber Write SetcreativeGroupNumber;
  end;
  TCreativeGroupAssignmentClass = Class of TCreativeGroupAssignment;
  
  { --------------------------------------------------------------------
    TCreativeGroupsListResponse
    --------------------------------------------------------------------}
  
  TCreativeGroupsListResponse = Class(TGoogleBaseObject)
  Private
    FcreativeGroups : TCreativeGroupsListResponsecreativeGroups;
    Fkind : string;
    FnextPageToken : string;
  Protected
    //Property setters
    Procedure SetcreativeGroups(AIndex : Integer; AValue : TCreativeGroupsListResponsecreativeGroups); virtual;
    Procedure Setkind(AIndex : Integer; AValue : string); virtual;
    Procedure SetnextPageToken(AIndex : Integer; AValue : string); virtual;
  Public
  Published
    Property creativeGroups : TCreativeGroupsListResponsecreativeGroups Index 0 Read FcreativeGroups Write SetcreativeGroups;
    Property kind : string Index 8 Read Fkind Write Setkind;
    Property nextPageToken : string Index 16 Read FnextPageToken Write SetnextPageToken;
  end;
  TCreativeGroupsListResponseClass = Class of TCreativeGroupsListResponse;
  
  { --------------------------------------------------------------------
    TCreativeGroupsListResponsecreativeGroups
    --------------------------------------------------------------------}
  
  TCreativeGroupsListResponsecreativeGroups = Class(TGoogleBaseObject)
  Private
  Protected
    //Property setters
  Public
  Published
  end;
  TCreativeGroupsListResponsecreativeGroupsClass = Class of TCreativeGroupsListResponsecreativeGroups;
  
  { --------------------------------------------------------------------
    TCreativeOptimizationConfiguration
    --------------------------------------------------------------------}
  
  TCreativeOptimizationConfiguration = Class(TGoogleBaseObject)
  Private
    Fid : string;
    Fname : string;
    FoptimizationActivitys : TCreativeOptimizationConfigurationoptimizationActivitys;
    FoptimizationModel : string;
  Protected
    //Property setters
    Procedure Setid(AIndex : Integer; AValue : string); virtual;
    Procedure Setname(AIndex : Integer; AValue : string); virtual;
    Procedure SetoptimizationActivitys(AIndex : Integer; AValue : TCreativeOptimizationConfigurationoptimizationActivitys); virtual;
    Procedure SetoptimizationModel(AIndex : Integer; AValue : string); virtual;
  Public
  Published
    Property id : string Index 0 Read Fid Write Setid;
    Property name : string Index 8 Read Fname Write Setname;
    Property optimizationActivitys : TCreativeOptimizationConfigurationoptimizationActivitys Index 16 Read FoptimizationActivitys Write SetoptimizationActivitys;
    Property optimizationModel : string Index 24 Read FoptimizationModel Write SetoptimizationModel;
  end;
  TCreativeOptimizationConfigurationClass = Class of TCreativeOptimizationConfiguration;
  
  { --------------------------------------------------------------------
    TCreativeOptimizationConfigurationoptimizationActivitys
    --------------------------------------------------------------------}
  
  TCreativeOptimizationConfigurationoptimizationActivitys = Class(TGoogleBaseObject)
  Private
  Protected
    //Property setters
  Public
  Published
  end;
  TCreativeOptimizationConfigurationoptimizationActivitysClass = Class of TCreativeOptimizationConfigurationoptimizationActivitys;
  
  { --------------------------------------------------------------------
    TCreativeRotation
    --------------------------------------------------------------------}
  
  TCreativeRotation = Class(TGoogleBaseObject)
  Private
    FcreativeAssignments : TCreativeRotationcreativeAssignments;
    FcreativeOptimizationConfigurationId : string;
    F_type : string;
    FweightCalculationStrategy : string;
  Protected
    Class Function ExportPropertyName(Const AName : String) : string; override;
    //Property setters
    Procedure SetcreativeAssignments(AIndex : Integer; AValue : TCreativeRotationcreativeAssignments); virtual;
    Procedure SetcreativeOptimizationConfigurationId(AIndex : Integer; AValue : string); virtual;
    Procedure Set_type(AIndex : Integer; AValue : string); virtual;
    Procedure SetweightCalculationStrategy(AIndex : Integer; AValue : string); virtual;
  Public
  Published
    Property creativeAssignments : TCreativeRotationcreativeAssignments Index 0 Read FcreativeAssignments Write SetcreativeAssignments;
    Property creativeOptimizationConfigurationId : string Index 8 Read FcreativeOptimizationConfigurationId Write SetcreativeOptimizationConfigurationId;
    Property _type : string Index 16 Read F_type Write Set_type;
    Property weightCalculationStrategy : string Index 24 Read FweightCalculationStrategy Write SetweightCalculationStrategy;
  end;
  TCreativeRotationClass = Class of TCreativeRotation;
  
  { --------------------------------------------------------------------
    TCreativeRotationcreativeAssignments
    --------------------------------------------------------------------}
  
  TCreativeRotationcreativeAssignments = Class(TGoogleBaseObject)
  Private
  Protected
    //Property setters
  Public
  Published
  end;
  TCreativeRotationcreativeAssignmentsClass = Class of TCreativeRotationcreativeAssignments;
  
  { --------------------------------------------------------------------
    TCreativeSettings
    --------------------------------------------------------------------}
  
  TCreativeSettings = Class(TGoogleBaseObject)
  Private
    FiFrameFooter : string;
    FiFrameHeader : string;
  Protected
    //Property setters
    Procedure SetiFrameFooter(AIndex : Integer; AValue : string); virtual;
    Procedure SetiFrameHeader(AIndex : Integer; AValue : string); virtual;
  Public
  Published
    Property iFrameFooter : string Index 0 Read FiFrameFooter Write SetiFrameFooter;
    Property iFrameHeader : string Index 8 Read FiFrameHeader Write SetiFrameHeader;
  end;
  TCreativeSettingsClass = Class of TCreativeSettings;
  
  { --------------------------------------------------------------------
    TCreativesListResponse
    --------------------------------------------------------------------}
  
  TCreativesListResponse = Class(TGoogleBaseObject)
  Private
    Fcreatives : TCreativesListResponsecreatives;
    Fkind : string;
    FnextPageToken : string;
  Protected
    //Property setters
    Procedure Setcreatives(AIndex : Integer; AValue : TCreativesListResponsecreatives); virtual;
    Procedure Setkind(AIndex : Integer; AValue : string); virtual;
    Procedure SetnextPageToken(AIndex : Integer; AValue : string); virtual;
  Public
  Published
    Property creatives : TCreativesListResponsecreatives Index 0 Read Fcreatives Write Setcreatives;
    Property kind : string Index 8 Read Fkind Write Setkind;
    Property nextPageToken : string Index 16 Read FnextPageToken Write SetnextPageToken;
  end;
  TCreativesListResponseClass = Class of TCreativesListResponse;
  
  { --------------------------------------------------------------------
    TCreativesListResponsecreatives
    --------------------------------------------------------------------}
  
  TCreativesListResponsecreatives = Class(TGoogleBaseObject)
  Private
  Protected
    //Property setters
  Public
  Published
  end;
  TCreativesListResponsecreativesClass = Class of TCreativesListResponsecreatives;
  
  { --------------------------------------------------------------------
    TCrossDimensionReachReportCompatibleFields
    --------------------------------------------------------------------}
  
  TCrossDimensionReachReportCompatibleFields = Class(TGoogleBaseObject)
  Private
    Fbreakdown : TCrossDimensionReachReportCompatibleFieldsbreakdown;
    FdimensionFilters : TCrossDimensionReachReportCompatibleFieldsdimensionFilters;
    Fkind : string;
    Fmetrics : TCrossDimensionReachReportCompatibleFieldsmetrics;
    FoverlapMetrics : TCrossDimensionReachReportCompatibleFieldsoverlapMetrics;
  Protected
    //Property setters
    Procedure Setbreakdown(AIndex : Integer; AValue : TCrossDimensionReachReportCompatibleFieldsbreakdown); virtual;
    Procedure SetdimensionFilters(AIndex : Integer; AValue : TCrossDimensionReachReportCompatibleFieldsdimensionFilters); virtual;
    Procedure Setkind(AIndex : Integer; AValue : string); virtual;
    Procedure Setmetrics(AIndex : Integer; AValue : TCrossDimensionReachReportCompatibleFieldsmetrics); virtual;
    Procedure SetoverlapMetrics(AIndex : Integer; AValue : TCrossDimensionReachReportCompatibleFieldsoverlapMetrics); virtual;
  Public
  Published
    Property breakdown : TCrossDimensionReachReportCompatibleFieldsbreakdown Index 0 Read Fbreakdown Write Setbreakdown;
    Property dimensionFilters : TCrossDimensionReachReportCompatibleFieldsdimensionFilters Index 8 Read FdimensionFilters Write SetdimensionFilters;
    Property kind : string Index 16 Read Fkind Write Setkind;
    Property metrics : TCrossDimensionReachReportCompatibleFieldsmetrics Index 24 Read Fmetrics Write Setmetrics;
    Property overlapMetrics : TCrossDimensionReachReportCompatibleFieldsoverlapMetrics Index 32 Read FoverlapMetrics Write SetoverlapMetrics;
  end;
  TCrossDimensionReachReportCompatibleFieldsClass = Class of TCrossDimensionReachReportCompatibleFields;
  
  { --------------------------------------------------------------------
    TCrossDimensionReachReportCompatibleFieldsbreakdown
    --------------------------------------------------------------------}
  
  TCrossDimensionReachReportCompatibleFieldsbreakdown = Class(TGoogleBaseObject)
  Private
  Protected
    //Property setters
  Public
  Published
  end;
  TCrossDimensionReachReportCompatibleFieldsbreakdownClass = Class of TCrossDimensionReachReportCompatibleFieldsbreakdown;
  
  { --------------------------------------------------------------------
    TCrossDimensionReachReportCompatibleFieldsdimensionFilters
    --------------------------------------------------------------------}
  
  TCrossDimensionReachReportCompatibleFieldsdimensionFilters = Class(TGoogleBaseObject)
  Private
  Protected
    //Property setters
  Public
  Published
  end;
  TCrossDimensionReachReportCompatibleFieldsdimensionFiltersClass = Class of TCrossDimensionReachReportCompatibleFieldsdimensionFilters;
  
  { --------------------------------------------------------------------
    TCrossDimensionReachReportCompatibleFieldsmetrics
    --------------------------------------------------------------------}
  
  TCrossDimensionReachReportCompatibleFieldsmetrics = Class(TGoogleBaseObject)
  Private
  Protected
    //Property setters
  Public
  Published
  end;
  TCrossDimensionReachReportCompatibleFieldsmetricsClass = Class of TCrossDimensionReachReportCompatibleFieldsmetrics;
  
  { --------------------------------------------------------------------
    TCrossDimensionReachReportCompatibleFieldsoverlapMetrics
    --------------------------------------------------------------------}
  
  TCrossDimensionReachReportCompatibleFieldsoverlapMetrics = Class(TGoogleBaseObject)
  Private
  Protected
    //Property setters
  Public
  Published
  end;
  TCrossDimensionReachReportCompatibleFieldsoverlapMetricsClass = Class of TCrossDimensionReachReportCompatibleFieldsoverlapMetrics;
  
  { --------------------------------------------------------------------
    TCustomRichMediaEvents
    --------------------------------------------------------------------}
  
  TCustomRichMediaEvents = Class(TGoogleBaseObject)
  Private
    FfilteredEventIds : TCustomRichMediaEventsfilteredEventIds;
    Fkind : string;
  Protected
    //Property setters
    Procedure SetfilteredEventIds(AIndex : Integer; AValue : TCustomRichMediaEventsfilteredEventIds); virtual;
    Procedure Setkind(AIndex : Integer; AValue : string); virtual;
  Public
  Published
    Property filteredEventIds : TCustomRichMediaEventsfilteredEventIds Index 0 Read FfilteredEventIds Write SetfilteredEventIds;
    Property kind : string Index 8 Read Fkind Write Setkind;
  end;
  TCustomRichMediaEventsClass = Class of TCustomRichMediaEvents;
  
  { --------------------------------------------------------------------
    TCustomRichMediaEventsfilteredEventIds
    --------------------------------------------------------------------}
  
  TCustomRichMediaEventsfilteredEventIds = Class(TGoogleBaseObject)
  Private
  Protected
    //Property setters
  Public
  Published
  end;
  TCustomRichMediaEventsfilteredEventIdsClass = Class of TCustomRichMediaEventsfilteredEventIds;
  
  { --------------------------------------------------------------------
    TDateRange
    --------------------------------------------------------------------}
  
  TDateRange = Class(TGoogleBaseObject)
  Private
    FendDate : TDate;
    Fkind : string;
    FrelativeDateRange : string;
    FstartDate : TDate;
  Protected
    //Property setters
    Procedure SetendDate(AIndex : Integer; AValue : TDate); virtual;
    Procedure Setkind(AIndex : Integer; AValue : string); virtual;
    Procedure SetrelativeDateRange(AIndex : Integer; AValue : string); virtual;
    Procedure SetstartDate(AIndex : Integer; AValue : TDate); virtual;
  Public
  Published
    Property endDate : TDate Index 0 Read FendDate Write SetendDate;
    Property kind : string Index 8 Read Fkind Write Setkind;
    Property relativeDateRange : string Index 16 Read FrelativeDateRange Write SetrelativeDateRange;
    Property startDate : TDate Index 24 Read FstartDate Write SetstartDate;
  end;
  TDateRangeClass = Class of TDateRange;
  
  { --------------------------------------------------------------------
    TDayPartTargeting
    --------------------------------------------------------------------}
  
  TDayPartTargeting = Class(TGoogleBaseObject)
  Private
    FdaysOfWeek : TDayPartTargetingdaysOfWeek;
    FhoursOfDay : TDayPartTargetinghoursOfDay;
    FuserLocalTime : boolean;
  Protected
    //Property setters
    Procedure SetdaysOfWeek(AIndex : Integer; AValue : TDayPartTargetingdaysOfWeek); virtual;
    Procedure SethoursOfDay(AIndex : Integer; AValue : TDayPartTargetinghoursOfDay); virtual;
    Procedure SetuserLocalTime(AIndex : Integer; AValue : boolean); virtual;
  Public
  Published
    Property daysOfWeek : TDayPartTargetingdaysOfWeek Index 0 Read FdaysOfWeek Write SetdaysOfWeek;
    Property hoursOfDay : TDayPartTargetinghoursOfDay Index 8 Read FhoursOfDay Write SethoursOfDay;
    Property userLocalTime : boolean Index 16 Read FuserLocalTime Write SetuserLocalTime;
  end;
  TDayPartTargetingClass = Class of TDayPartTargeting;
  
  { --------------------------------------------------------------------
    TDayPartTargetingdaysOfWeek
    --------------------------------------------------------------------}
  
  TDayPartTargetingdaysOfWeek = Class(TGoogleBaseObject)
  Private
  Protected
    //Property setters
  Public
  Published
  end;
  TDayPartTargetingdaysOfWeekClass = Class of TDayPartTargetingdaysOfWeek;
  
  { --------------------------------------------------------------------
    TDayPartTargetinghoursOfDay
    --------------------------------------------------------------------}
  
  TDayPartTargetinghoursOfDay = Class(TGoogleBaseObject)
  Private
  Protected
    //Property setters
  Public
  Published
  end;
  TDayPartTargetinghoursOfDayClass = Class of TDayPartTargetinghoursOfDay;
  
  { --------------------------------------------------------------------
    TDefaultClickThroughEventTagProperties
    --------------------------------------------------------------------}
  
  TDefaultClickThroughEventTagProperties = Class(TGoogleBaseObject)
  Private
    FdefaultClickThroughEventTagId : string;
    FoverrideInheritedEventTag : boolean;
  Protected
    //Property setters
    Procedure SetdefaultClickThroughEventTagId(AIndex : Integer; AValue : string); virtual;
    Procedure SetoverrideInheritedEventTag(AIndex : Integer; AValue : boolean); virtual;
  Public
  Published
    Property defaultClickThroughEventTagId : string Index 0 Read FdefaultClickThroughEventTagId Write SetdefaultClickThroughEventTagId;
    Property overrideInheritedEventTag : boolean Index 8 Read FoverrideInheritedEventTag Write SetoverrideInheritedEventTag;
  end;
  TDefaultClickThroughEventTagPropertiesClass = Class of TDefaultClickThroughEventTagProperties;
  
  { --------------------------------------------------------------------
    TDeliverySchedule
    --------------------------------------------------------------------}
  
  TDeliverySchedule = Class(TGoogleBaseObject)
  Private
    FfrequencyCap : TFrequencyCap;
    FhardCutoff : boolean;
    FimpressionRatio : string;
    Fpriority : string;
  Protected
    //Property setters
    Procedure SetfrequencyCap(AIndex : Integer; AValue : TFrequencyCap); virtual;
    Procedure SethardCutoff(AIndex : Integer; AValue : boolean); virtual;
    Procedure SetimpressionRatio(AIndex : Integer; AValue : string); virtual;
    Procedure Setpriority(AIndex : Integer; AValue : string); virtual;
  Public
  Published
    Property frequencyCap : TFrequencyCap Index 0 Read FfrequencyCap Write SetfrequencyCap;
    Property hardCutoff : boolean Index 8 Read FhardCutoff Write SethardCutoff;
    Property impressionRatio : string Index 16 Read FimpressionRatio Write SetimpressionRatio;
    Property priority : string Index 24 Read Fpriority Write Setpriority;
  end;
  TDeliveryScheduleClass = Class of TDeliverySchedule;
  
  { --------------------------------------------------------------------
    TDfpSettings
    --------------------------------------------------------------------}
  
  TDfpSettings = Class(TGoogleBaseObject)
  Private
    Fdfp_network_code : string;
    Fdfp_network_name : string;
    FprogrammaticPlacementAccepted : boolean;
    FpubPaidPlacementAccepted : boolean;
    FpublisherPortalOnly : boolean;
  Protected
    //Property setters
    Procedure Setdfp_network_code(AIndex : Integer; AValue : string); virtual;
    Procedure Setdfp_network_name(AIndex : Integer; AValue : string); virtual;
    Procedure SetprogrammaticPlacementAccepted(AIndex : Integer; AValue : boolean); virtual;
    Procedure SetpubPaidPlacementAccepted(AIndex : Integer; AValue : boolean); virtual;
    Procedure SetpublisherPortalOnly(AIndex : Integer; AValue : boolean); virtual;
  Public
  Published
    Property dfp_network_code : string Index 0 Read Fdfp_network_code Write Setdfp_network_code;
    Property dfp_network_name : string Index 8 Read Fdfp_network_name Write Setdfp_network_name;
    Property programmaticPlacementAccepted : boolean Index 16 Read FprogrammaticPlacementAccepted Write SetprogrammaticPlacementAccepted;
    Property pubPaidPlacementAccepted : boolean Index 24 Read FpubPaidPlacementAccepted Write SetpubPaidPlacementAccepted;
    Property publisherPortalOnly : boolean Index 32 Read FpublisherPortalOnly Write SetpublisherPortalOnly;
  end;
  TDfpSettingsClass = Class of TDfpSettings;
  
  { --------------------------------------------------------------------
    TDimension
    --------------------------------------------------------------------}
  
  TDimension = Class(TGoogleBaseObject)
  Private
    Fkind : string;
    Fname : string;
  Protected
    //Property setters
    Procedure Setkind(AIndex : Integer; AValue : string); virtual;
    Procedure Setname(AIndex : Integer; AValue : string); virtual;
  Public
  Published
    Property kind : string Index 0 Read Fkind Write Setkind;
    Property name : string Index 8 Read Fname Write Setname;
  end;
  TDimensionClass = Class of TDimension;
  
  { --------------------------------------------------------------------
    TDimensionFilter
    --------------------------------------------------------------------}
  
  TDimensionFilter = Class(TGoogleBaseObject)
  Private
    FdimensionName : string;
    Fkind : string;
    Fvalue : string;
  Protected
    //Property setters
    Procedure SetdimensionName(AIndex : Integer; AValue : string); virtual;
    Procedure Setkind(AIndex : Integer; AValue : string); virtual;
    Procedure Setvalue(AIndex : Integer; AValue : string); virtual;
  Public
  Published
    Property dimensionName : string Index 0 Read FdimensionName Write SetdimensionName;
    Property kind : string Index 8 Read Fkind Write Setkind;
    Property value : string Index 16 Read Fvalue Write Setvalue;
  end;
  TDimensionFilterClass = Class of TDimensionFilter;
  
  { --------------------------------------------------------------------
    TDimensionValue
    --------------------------------------------------------------------}
  
  TDimensionValue = Class(TGoogleBaseObject)
  Private
    FdimensionName : string;
    Fetag : string;
    Fid : string;
    Fkind : string;
    FmatchType : string;
    Fvalue : string;
  Protected
    //Property setters
    Procedure SetdimensionName(AIndex : Integer; AValue : string); virtual;
    Procedure Setetag(AIndex : Integer; AValue : string); virtual;
    Procedure Setid(AIndex : Integer; AValue : string); virtual;
    Procedure Setkind(AIndex : Integer; AValue : string); virtual;
    Procedure SetmatchType(AIndex : Integer; AValue : string); virtual;
    Procedure Setvalue(AIndex : Integer; AValue : string); virtual;
  Public
  Published
    Property dimensionName : string Index 0 Read FdimensionName Write SetdimensionName;
    Property etag : string Index 8 Read Fetag Write Setetag;
    Property id : string Index 16 Read Fid Write Setid;
    Property kind : string Index 24 Read Fkind Write Setkind;
    Property matchType : string Index 32 Read FmatchType Write SetmatchType;
    Property value : string Index 40 Read Fvalue Write Setvalue;
  end;
  TDimensionValueClass = Class of TDimensionValue;
  
  { --------------------------------------------------------------------
    TDimensionValueList
    --------------------------------------------------------------------}
  
  TDimensionValueList = Class(TGoogleBaseObject)
  Private
    Fetag : string;
    Fitems : TDimensionValueListitems;
    Fkind : string;
    FnextPageToken : string;
  Protected
    //Property setters
    Procedure Setetag(AIndex : Integer; AValue : string); virtual;
    Procedure Setitems(AIndex : Integer; AValue : TDimensionValueListitems); virtual;
    Procedure Setkind(AIndex : Integer; AValue : string); virtual;
    Procedure SetnextPageToken(AIndex : Integer; AValue : string); virtual;
  Public
  Published
    Property etag : string Index 0 Read Fetag Write Setetag;
    Property items : TDimensionValueListitems Index 8 Read Fitems Write Setitems;
    Property kind : string Index 16 Read Fkind Write Setkind;
    Property nextPageToken : string Index 24 Read FnextPageToken Write SetnextPageToken;
  end;
  TDimensionValueListClass = Class of TDimensionValueList;
  
  { --------------------------------------------------------------------
    TDimensionValueListitems
    --------------------------------------------------------------------}
  
  TDimensionValueListitems = Class(TGoogleBaseObject)
  Private
  Protected
    //Property setters
  Public
  Published
  end;
  TDimensionValueListitemsClass = Class of TDimensionValueListitems;
  
  { --------------------------------------------------------------------
    TDimensionValueRequest
    --------------------------------------------------------------------}
  
  TDimensionValueRequest = Class(TGoogleBaseObject)
  Private
    FdimensionName : string;
    FendDate : TDate;
    Ffilters : TDimensionValueRequestfilters;
    Fkind : string;
    FstartDate : TDate;
  Protected
    //Property setters
    Procedure SetdimensionName(AIndex : Integer; AValue : string); virtual;
    Procedure SetendDate(AIndex : Integer; AValue : TDate); virtual;
    Procedure Setfilters(AIndex : Integer; AValue : TDimensionValueRequestfilters); virtual;
    Procedure Setkind(AIndex : Integer; AValue : string); virtual;
    Procedure SetstartDate(AIndex : Integer; AValue : TDate); virtual;
  Public
  Published
    Property dimensionName : string Index 0 Read FdimensionName Write SetdimensionName;
    Property endDate : TDate Index 8 Read FendDate Write SetendDate;
    Property filters : TDimensionValueRequestfilters Index 16 Read Ffilters Write Setfilters;
    Property kind : string Index 24 Read Fkind Write Setkind;
    Property startDate : TDate Index 32 Read FstartDate Write SetstartDate;
  end;
  TDimensionValueRequestClass = Class of TDimensionValueRequest;
  
  { --------------------------------------------------------------------
    TDimensionValueRequestfilters
    --------------------------------------------------------------------}
  
  TDimensionValueRequestfilters = Class(TGoogleBaseObject)
  Private
  Protected
    //Property setters
  Public
  Published
  end;
  TDimensionValueRequestfiltersClass = Class of TDimensionValueRequestfilters;
  
  { --------------------------------------------------------------------
    TDirectorySite
    --------------------------------------------------------------------}
  
  TDirectorySite = Class(TGoogleBaseObject)
  Private
    Factive : boolean;
    FcontactAssignments : TDirectorySitecontactAssignments;
    FcountryId : string;
    FcurrencyId : string;
    Fdescription : string;
    Fid : string;
    FidDimensionValue : TDimensionValue;
    FinpageTagFormats : TDirectorySiteinpageTagFormats;
    FinterstitialTagFormats : TDirectorySiteinterstitialTagFormats;
    Fkind : string;
    Fname : string;
    FparentId : string;
    Fsettings : TDirectorySiteSettings;
    Furl : string;
  Protected
    //Property setters
    Procedure Setactive(AIndex : Integer; AValue : boolean); virtual;
    Procedure SetcontactAssignments(AIndex : Integer; AValue : TDirectorySitecontactAssignments); virtual;
    Procedure SetcountryId(AIndex : Integer; AValue : string); virtual;
    Procedure SetcurrencyId(AIndex : Integer; AValue : string); virtual;
    Procedure Setdescription(AIndex : Integer; AValue : string); virtual;
    Procedure Setid(AIndex : Integer; AValue : string); virtual;
    Procedure SetidDimensionValue(AIndex : Integer; AValue : TDimensionValue); virtual;
    Procedure SetinpageTagFormats(AIndex : Integer; AValue : TDirectorySiteinpageTagFormats); virtual;
    Procedure SetinterstitialTagFormats(AIndex : Integer; AValue : TDirectorySiteinterstitialTagFormats); virtual;
    Procedure Setkind(AIndex : Integer; AValue : string); virtual;
    Procedure Setname(AIndex : Integer; AValue : string); virtual;
    Procedure SetparentId(AIndex : Integer; AValue : string); virtual;
    Procedure Setsettings(AIndex : Integer; AValue : TDirectorySiteSettings); virtual;
    Procedure Seturl(AIndex : Integer; AValue : string); virtual;
  Public
  Published
    Property active : boolean Index 0 Read Factive Write Setactive;
    Property contactAssignments : TDirectorySitecontactAssignments Index 8 Read FcontactAssignments Write SetcontactAssignments;
    Property countryId : string Index 16 Read FcountryId Write SetcountryId;
    Property currencyId : string Index 24 Read FcurrencyId Write SetcurrencyId;
    Property description : string Index 32 Read Fdescription Write Setdescription;
    Property id : string Index 40 Read Fid Write Setid;
    Property idDimensionValue : TDimensionValue Index 48 Read FidDimensionValue Write SetidDimensionValue;
    Property inpageTagFormats : TDirectorySiteinpageTagFormats Index 56 Read FinpageTagFormats Write SetinpageTagFormats;
    Property interstitialTagFormats : TDirectorySiteinterstitialTagFormats Index 64 Read FinterstitialTagFormats Write SetinterstitialTagFormats;
    Property kind : string Index 72 Read Fkind Write Setkind;
    Property name : string Index 80 Read Fname Write Setname;
    Property parentId : string Index 88 Read FparentId Write SetparentId;
    Property settings : TDirectorySiteSettings Index 96 Read Fsettings Write Setsettings;
    Property url : string Index 104 Read Furl Write Seturl;
  end;
  TDirectorySiteClass = Class of TDirectorySite;
  
  { --------------------------------------------------------------------
    TDirectorySitecontactAssignments
    --------------------------------------------------------------------}
  
  TDirectorySitecontactAssignments = Class(TGoogleBaseObject)
  Private
  Protected
    //Property setters
  Public
  Published
  end;
  TDirectorySitecontactAssignmentsClass = Class of TDirectorySitecontactAssignments;
  
  { --------------------------------------------------------------------
    TDirectorySiteinpageTagFormats
    --------------------------------------------------------------------}
  
  TDirectorySiteinpageTagFormats = Class(TGoogleBaseObject)
  Private
  Protected
    //Property setters
  Public
  Published
  end;
  TDirectorySiteinpageTagFormatsClass = Class of TDirectorySiteinpageTagFormats;
  
  { --------------------------------------------------------------------
    TDirectorySiteinterstitialTagFormats
    --------------------------------------------------------------------}
  
  TDirectorySiteinterstitialTagFormats = Class(TGoogleBaseObject)
  Private
  Protected
    //Property setters
  Public
  Published
  end;
  TDirectorySiteinterstitialTagFormatsClass = Class of TDirectorySiteinterstitialTagFormats;
  
  { --------------------------------------------------------------------
    TDirectorySiteContact
    --------------------------------------------------------------------}
  
  TDirectorySiteContact = Class(TGoogleBaseObject)
  Private
    Faddress : string;
    Femail : string;
    FfirstName : string;
    Fid : string;
    Fkind : string;
    FlastName : string;
    Fphone : string;
    Frole : string;
    Ftitle : string;
    F_type : string;
  Protected
    Class Function ExportPropertyName(Const AName : String) : string; override;
    //Property setters
    Procedure Setaddress(AIndex : Integer; AValue : string); virtual;
    Procedure Setemail(AIndex : Integer; AValue : string); virtual;
    Procedure SetfirstName(AIndex : Integer; AValue : string); virtual;
    Procedure Setid(AIndex : Integer; AValue : string); virtual;
    Procedure Setkind(AIndex : Integer; AValue : string); virtual;
    Procedure SetlastName(AIndex : Integer; AValue : string); virtual;
    Procedure Setphone(AIndex : Integer; AValue : string); virtual;
    Procedure Setrole(AIndex : Integer; AValue : string); virtual;
    Procedure Settitle(AIndex : Integer; AValue : string); virtual;
    Procedure Set_type(AIndex : Integer; AValue : string); virtual;
  Public
  Published
    Property address : string Index 0 Read Faddress Write Setaddress;
    Property email : string Index 8 Read Femail Write Setemail;
    Property firstName : string Index 16 Read FfirstName Write SetfirstName;
    Property id : string Index 24 Read Fid Write Setid;
    Property kind : string Index 32 Read Fkind Write Setkind;
    Property lastName : string Index 40 Read FlastName Write SetlastName;
    Property phone : string Index 48 Read Fphone Write Setphone;
    Property role : string Index 56 Read Frole Write Setrole;
    Property title : string Index 64 Read Ftitle Write Settitle;
    Property _type : string Index 72 Read F_type Write Set_type;
  end;
  TDirectorySiteContactClass = Class of TDirectorySiteContact;
  
  { --------------------------------------------------------------------
    TDirectorySiteContactAssignment
    --------------------------------------------------------------------}
  
  TDirectorySiteContactAssignment = Class(TGoogleBaseObject)
  Private
    FcontactId : string;
    Fvisibility : string;
  Protected
    //Property setters
    Procedure SetcontactId(AIndex : Integer; AValue : string); virtual;
    Procedure Setvisibility(AIndex : Integer; AValue : string); virtual;
  Public
  Published
    Property contactId : string Index 0 Read FcontactId Write SetcontactId;
    Property visibility : string Index 8 Read Fvisibility Write Setvisibility;
  end;
  TDirectorySiteContactAssignmentClass = Class of TDirectorySiteContactAssignment;
  
  { --------------------------------------------------------------------
    TDirectorySiteContactsListResponse
    --------------------------------------------------------------------}
  
  TDirectorySiteContactsListResponse = Class(TGoogleBaseObject)
  Private
    FdirectorySiteContacts : TDirectorySiteContactsListResponsedirectorySiteContacts;
    Fkind : string;
    FnextPageToken : string;
  Protected
    //Property setters
    Procedure SetdirectorySiteContacts(AIndex : Integer; AValue : TDirectorySiteContactsListResponsedirectorySiteContacts); virtual;
    Procedure Setkind(AIndex : Integer; AValue : string); virtual;
    Procedure SetnextPageToken(AIndex : Integer; AValue : string); virtual;
  Public
  Published
    Property directorySiteContacts : TDirectorySiteContactsListResponsedirectorySiteContacts Index 0 Read FdirectorySiteContacts Write SetdirectorySiteContacts;
    Property kind : string Index 8 Read Fkind Write Setkind;
    Property nextPageToken : string Index 16 Read FnextPageToken Write SetnextPageToken;
  end;
  TDirectorySiteContactsListResponseClass = Class of TDirectorySiteContactsListResponse;
  
  { --------------------------------------------------------------------
    TDirectorySiteContactsListResponsedirectorySiteContacts
    --------------------------------------------------------------------}
  
  TDirectorySiteContactsListResponsedirectorySiteContacts = Class(TGoogleBaseObject)
  Private
  Protected
    //Property setters
  Public
  Published
  end;
  TDirectorySiteContactsListResponsedirectorySiteContactsClass = Class of TDirectorySiteContactsListResponsedirectorySiteContacts;
  
  { --------------------------------------------------------------------
    TDirectorySiteSettings
    --------------------------------------------------------------------}
  
  TDirectorySiteSettings = Class(TGoogleBaseObject)
  Private
    FactiveViewOptOut : boolean;
    Fdfp_settings : TDfpSettings;
    Finstream_video_placement_accepted : boolean;
    FinterstitialPlacementAccepted : boolean;
    FnielsenOcrOptOut : boolean;
    FverificationTagOptOut : boolean;
    FvideoActiveViewOptOut : boolean;
  Protected
    //Property setters
    Procedure SetactiveViewOptOut(AIndex : Integer; AValue : boolean); virtual;
    Procedure Setdfp_settings(AIndex : Integer; AValue : TDfpSettings); virtual;
    Procedure Setinstream_video_placement_accepted(AIndex : Integer; AValue : boolean); virtual;
    Procedure SetinterstitialPlacementAccepted(AIndex : Integer; AValue : boolean); virtual;
    Procedure SetnielsenOcrOptOut(AIndex : Integer; AValue : boolean); virtual;
    Procedure SetverificationTagOptOut(AIndex : Integer; AValue : boolean); virtual;
    Procedure SetvideoActiveViewOptOut(AIndex : Integer; AValue : boolean); virtual;
  Public
  Published
    Property activeViewOptOut : boolean Index 0 Read FactiveViewOptOut Write SetactiveViewOptOut;
    Property dfp_settings : TDfpSettings Index 8 Read Fdfp_settings Write Setdfp_settings;
    Property instream_video_placement_accepted : boolean Index 16 Read Finstream_video_placement_accepted Write Setinstream_video_placement_accepted;
    Property interstitialPlacementAccepted : boolean Index 24 Read FinterstitialPlacementAccepted Write SetinterstitialPlacementAccepted;
    Property nielsenOcrOptOut : boolean Index 32 Read FnielsenOcrOptOut Write SetnielsenOcrOptOut;
    Property verificationTagOptOut : boolean Index 40 Read FverificationTagOptOut Write SetverificationTagOptOut;
    Property videoActiveViewOptOut : boolean Index 48 Read FvideoActiveViewOptOut Write SetvideoActiveViewOptOut;
  end;
  TDirectorySiteSettingsClass = Class of TDirectorySiteSettings;
  
  { --------------------------------------------------------------------
    TDirectorySitesListResponse
    --------------------------------------------------------------------}
  
  TDirectorySitesListResponse = Class(TGoogleBaseObject)
  Private
    FdirectorySites : TDirectorySitesListResponsedirectorySites;
    Fkind : string;
    FnextPageToken : string;
  Protected
    //Property setters
    Procedure SetdirectorySites(AIndex : Integer; AValue : TDirectorySitesListResponsedirectorySites); virtual;
    Procedure Setkind(AIndex : Integer; AValue : string); virtual;
    Procedure SetnextPageToken(AIndex : Integer; AValue : string); virtual;
  Public
  Published
    Property directorySites : TDirectorySitesListResponsedirectorySites Index 0 Read FdirectorySites Write SetdirectorySites;
    Property kind : string Index 8 Read Fkind Write Setkind;
    Property nextPageToken : string Index 16 Read FnextPageToken Write SetnextPageToken;
  end;
  TDirectorySitesListResponseClass = Class of TDirectorySitesListResponse;
  
  { --------------------------------------------------------------------
    TDirectorySitesListResponsedirectorySites
    --------------------------------------------------------------------}
  
  TDirectorySitesListResponsedirectorySites = Class(TGoogleBaseObject)
  Private
  Protected
    //Property setters
  Public
  Published
  end;
  TDirectorySitesListResponsedirectorySitesClass = Class of TDirectorySitesListResponsedirectorySites;
  
  { --------------------------------------------------------------------
    TEventTag
    --------------------------------------------------------------------}
  
  TEventTag = Class(TGoogleBaseObject)
  Private
    FaccountId : string;
    FadvertiserId : string;
    FadvertiserIdDimensionValue : TDimensionValue;
    FcampaignId : string;
    FcampaignIdDimensionValue : TDimensionValue;
    FenabledByDefault : boolean;
    Fid : string;
    Fkind : string;
    Fname : string;
    FsiteFilterType : string;
    FsiteIds : TEventTagsiteIds;
    FsslCompliant : boolean;
    Fstatus : string;
    FsubaccountId : string;
    F_type : string;
    Furl : string;
    FurlEscapeLevels : integer;
  Protected
    Class Function ExportPropertyName(Const AName : String) : string; override;
    //Property setters
    Procedure SetaccountId(AIndex : Integer; AValue : string); virtual;
    Procedure SetadvertiserId(AIndex : Integer; AValue : string); virtual;
    Procedure SetadvertiserIdDimensionValue(AIndex : Integer; AValue : TDimensionValue); virtual;
    Procedure SetcampaignId(AIndex : Integer; AValue : string); virtual;
    Procedure SetcampaignIdDimensionValue(AIndex : Integer; AValue : TDimensionValue); virtual;
    Procedure SetenabledByDefault(AIndex : Integer; AValue : boolean); virtual;
    Procedure Setid(AIndex : Integer; AValue : string); virtual;
    Procedure Setkind(AIndex : Integer; AValue : string); virtual;
    Procedure Setname(AIndex : Integer; AValue : string); virtual;
    Procedure SetsiteFilterType(AIndex : Integer; AValue : string); virtual;
    Procedure SetsiteIds(AIndex : Integer; AValue : TEventTagsiteIds); virtual;
    Procedure SetsslCompliant(AIndex : Integer; AValue : boolean); virtual;
    Procedure Setstatus(AIndex : Integer; AValue : string); virtual;
    Procedure SetsubaccountId(AIndex : Integer; AValue : string); virtual;
    Procedure Set_type(AIndex : Integer; AValue : string); virtual;
    Procedure Seturl(AIndex : Integer; AValue : string); virtual;
    Procedure SeturlEscapeLevels(AIndex : Integer; AValue : integer); virtual;
  Public
  Published
    Property accountId : string Index 0 Read FaccountId Write SetaccountId;
    Property advertiserId : string Index 8 Read FadvertiserId Write SetadvertiserId;
    Property advertiserIdDimensionValue : TDimensionValue Index 16 Read FadvertiserIdDimensionValue Write SetadvertiserIdDimensionValue;
    Property campaignId : string Index 24 Read FcampaignId Write SetcampaignId;
    Property campaignIdDimensionValue : TDimensionValue Index 32 Read FcampaignIdDimensionValue Write SetcampaignIdDimensionValue;
    Property enabledByDefault : boolean Index 40 Read FenabledByDefault Write SetenabledByDefault;
    Property id : string Index 48 Read Fid Write Setid;
    Property kind : string Index 56 Read Fkind Write Setkind;
    Property name : string Index 64 Read Fname Write Setname;
    Property siteFilterType : string Index 72 Read FsiteFilterType Write SetsiteFilterType;
    Property siteIds : TEventTagsiteIds Index 80 Read FsiteIds Write SetsiteIds;
    Property sslCompliant : boolean Index 88 Read FsslCompliant Write SetsslCompliant;
    Property status : string Index 96 Read Fstatus Write Setstatus;
    Property subaccountId : string Index 104 Read FsubaccountId Write SetsubaccountId;
    Property _type : string Index 112 Read F_type Write Set_type;
    Property url : string Index 120 Read Furl Write Seturl;
    Property urlEscapeLevels : integer Index 128 Read FurlEscapeLevels Write SeturlEscapeLevels;
  end;
  TEventTagClass = Class of TEventTag;
  
  { --------------------------------------------------------------------
    TEventTagsiteIds
    --------------------------------------------------------------------}
  
  TEventTagsiteIds = Class(TGoogleBaseObject)
  Private
  Protected
    //Property setters
  Public
  Published
  end;
  TEventTagsiteIdsClass = Class of TEventTagsiteIds;
  
  { --------------------------------------------------------------------
    TEventTagOverride
    --------------------------------------------------------------------}
  
  TEventTagOverride = Class(TGoogleBaseObject)
  Private
    Fenabled : boolean;
    Fid : string;
  Protected
    //Property setters
    Procedure Setenabled(AIndex : Integer; AValue : boolean); virtual;
    Procedure Setid(AIndex : Integer; AValue : string); virtual;
  Public
  Published
    Property enabled : boolean Index 0 Read Fenabled Write Setenabled;
    Property id : string Index 8 Read Fid Write Setid;
  end;
  TEventTagOverrideClass = Class of TEventTagOverride;
  
  { --------------------------------------------------------------------
    TEventTagsListResponse
    --------------------------------------------------------------------}
  
  TEventTagsListResponse = Class(TGoogleBaseObject)
  Private
    FeventTags : TEventTagsListResponseeventTags;
    Fkind : string;
  Protected
    //Property setters
    Procedure SeteventTags(AIndex : Integer; AValue : TEventTagsListResponseeventTags); virtual;
    Procedure Setkind(AIndex : Integer; AValue : string); virtual;
  Public
  Published
    Property eventTags : TEventTagsListResponseeventTags Index 0 Read FeventTags Write SeteventTags;
    Property kind : string Index 8 Read Fkind Write Setkind;
  end;
  TEventTagsListResponseClass = Class of TEventTagsListResponse;
  
  { --------------------------------------------------------------------
    TEventTagsListResponseeventTags
    --------------------------------------------------------------------}
  
  TEventTagsListResponseeventTags = Class(TGoogleBaseObject)
  Private
  Protected
    //Property setters
  Public
  Published
  end;
  TEventTagsListResponseeventTagsClass = Class of TEventTagsListResponseeventTags;
  
  { --------------------------------------------------------------------
    TFile
    --------------------------------------------------------------------}
  
  TFile = Class(TGoogleBaseObject)
  Private
    FdateRange : TDateRange;
    Fetag : string;
    FfileName : string;
    Fformat : string;
    Fid : string;
    Fkind : string;
    FlastModifiedTime : string;
    FreportId : string;
    Fstatus : string;
    Furls : TFileurls;
  Protected
    //Property setters
    Procedure SetdateRange(AIndex : Integer; AValue : TDateRange); virtual;
    Procedure Setetag(AIndex : Integer; AValue : string); virtual;
    Procedure SetfileName(AIndex : Integer; AValue : string); virtual;
    Procedure Setformat(AIndex : Integer; AValue : string); virtual;
    Procedure Setid(AIndex : Integer; AValue : string); virtual;
    Procedure Setkind(AIndex : Integer; AValue : string); virtual;
    Procedure SetlastModifiedTime(AIndex : Integer; AValue : string); virtual;
    Procedure SetreportId(AIndex : Integer; AValue : string); virtual;
    Procedure Setstatus(AIndex : Integer; AValue : string); virtual;
    Procedure Seturls(AIndex : Integer; AValue : TFileurls); virtual;
  Public
  Published
    Property dateRange : TDateRange Index 0 Read FdateRange Write SetdateRange;
    Property etag : string Index 8 Read Fetag Write Setetag;
    Property fileName : string Index 16 Read FfileName Write SetfileName;
    Property format : string Index 24 Read Fformat Write Setformat;
    Property id : string Index 32 Read Fid Write Setid;
    Property kind : string Index 40 Read Fkind Write Setkind;
    Property lastModifiedTime : string Index 48 Read FlastModifiedTime Write SetlastModifiedTime;
    Property reportId : string Index 56 Read FreportId Write SetreportId;
    Property status : string Index 64 Read Fstatus Write Setstatus;
    Property urls : TFileurls Index 72 Read Furls Write Seturls;
  end;
  TFileClass = Class of TFile;
  
  { --------------------------------------------------------------------
    TFileurls
    --------------------------------------------------------------------}
  
  TFileurls = Class(TGoogleBaseObject)
  Private
    FapiUrl : string;
    FbrowserUrl : string;
  Protected
    //Property setters
    Procedure SetapiUrl(AIndex : Integer; AValue : string); virtual;
    Procedure SetbrowserUrl(AIndex : Integer; AValue : string); virtual;
  Public
  Published
    Property apiUrl : string Index 0 Read FapiUrl Write SetapiUrl;
    Property browserUrl : string Index 8 Read FbrowserUrl Write SetbrowserUrl;
  end;
  TFileurlsClass = Class of TFileurls;
  
  { --------------------------------------------------------------------
    TFileList
    --------------------------------------------------------------------}
  
  TFileList = Class(TGoogleBaseObject)
  Private
    Fetag : string;
    Fitems : TFileListitems;
    Fkind : string;
    FnextPageToken : string;
  Protected
    //Property setters
    Procedure Setetag(AIndex : Integer; AValue : string); virtual;
    Procedure Setitems(AIndex : Integer; AValue : TFileListitems); virtual;
    Procedure Setkind(AIndex : Integer; AValue : string); virtual;
    Procedure SetnextPageToken(AIndex : Integer; AValue : string); virtual;
  Public
  Published
    Property etag : string Index 0 Read Fetag Write Setetag;
    Property items : TFileListitems Index 8 Read Fitems Write Setitems;
    Property kind : string Index 16 Read Fkind Write Setkind;
    Property nextPageToken : string Index 24 Read FnextPageToken Write SetnextPageToken;
  end;
  TFileListClass = Class of TFileList;
  
  { --------------------------------------------------------------------
    TFileListitems
    --------------------------------------------------------------------}
  
  TFileListitems = Class(TGoogleBaseObject)
  Private
  Protected
    //Property setters
  Public
  Published
  end;
  TFileListitemsClass = Class of TFileListitems;
  
  { --------------------------------------------------------------------
    TFlight
    --------------------------------------------------------------------}
  
  TFlight = Class(TGoogleBaseObject)
  Private
    FendDate : TDate;
    FrateOrCost : string;
    FstartDate : TDate;
    Funits : string;
  Protected
    //Property setters
    Procedure SetendDate(AIndex : Integer; AValue : TDate); virtual;
    Procedure SetrateOrCost(AIndex : Integer; AValue : string); virtual;
    Procedure SetstartDate(AIndex : Integer; AValue : TDate); virtual;
    Procedure Setunits(AIndex : Integer; AValue : string); virtual;
  Public
  Published
    Property endDate : TDate Index 0 Read FendDate Write SetendDate;
    Property rateOrCost : string Index 8 Read FrateOrCost Write SetrateOrCost;
    Property startDate : TDate Index 16 Read FstartDate Write SetstartDate;
    Property units : string Index 24 Read Funits Write Setunits;
  end;
  TFlightClass = Class of TFlight;
  
  { --------------------------------------------------------------------
    TFloodlightActivitiesGenerateTagResponse
    --------------------------------------------------------------------}
  
  TFloodlightActivitiesGenerateTagResponse = Class(TGoogleBaseObject)
  Private
    FfloodlightActivityTag : string;
    Fkind : string;
  Protected
    //Property setters
    Procedure SetfloodlightActivityTag(AIndex : Integer; AValue : string); virtual;
    Procedure Setkind(AIndex : Integer; AValue : string); virtual;
  Public
  Published
    Property floodlightActivityTag : string Index 0 Read FfloodlightActivityTag Write SetfloodlightActivityTag;
    Property kind : string Index 8 Read Fkind Write Setkind;
  end;
  TFloodlightActivitiesGenerateTagResponseClass = Class of TFloodlightActivitiesGenerateTagResponse;
  
  { --------------------------------------------------------------------
    TFloodlightActivitiesListResponse
    --------------------------------------------------------------------}
  
  TFloodlightActivitiesListResponse = Class(TGoogleBaseObject)
  Private
    FfloodlightActivities : TFloodlightActivitiesListResponsefloodlightActivities;
    Fkind : string;
    FnextPageToken : string;
  Protected
    //Property setters
    Procedure SetfloodlightActivities(AIndex : Integer; AValue : TFloodlightActivitiesListResponsefloodlightActivities); virtual;
    Procedure Setkind(AIndex : Integer; AValue : string); virtual;
    Procedure SetnextPageToken(AIndex : Integer; AValue : string); virtual;
  Public
  Published
    Property floodlightActivities : TFloodlightActivitiesListResponsefloodlightActivities Index 0 Read FfloodlightActivities Write SetfloodlightActivities;
    Property kind : string Index 8 Read Fkind Write Setkind;
    Property nextPageToken : string Index 16 Read FnextPageToken Write SetnextPageToken;
  end;
  TFloodlightActivitiesListResponseClass = Class of TFloodlightActivitiesListResponse;
  
  { --------------------------------------------------------------------
    TFloodlightActivitiesListResponsefloodlightActivities
    --------------------------------------------------------------------}
  
  TFloodlightActivitiesListResponsefloodlightActivities = Class(TGoogleBaseObject)
  Private
  Protected
    //Property setters
  Public
  Published
  end;
  TFloodlightActivitiesListResponsefloodlightActivitiesClass = Class of TFloodlightActivitiesListResponsefloodlightActivities;
  
  { --------------------------------------------------------------------
    TFloodlightActivity
    --------------------------------------------------------------------}
  
  TFloodlightActivity = Class(TGoogleBaseObject)
  Private
    FaccountId : string;
    FadvertiserId : string;
    FadvertiserIdDimensionValue : TDimensionValue;
    FcacheBustingType : string;
    FcountingMethod : string;
    FdefaultTags : TFloodlightActivitydefaultTags;
    FexpectedUrl : string;
    FfloodlightActivityGroupId : string;
    FfloodlightActivityGroupName : string;
    FfloodlightActivityGroupTagString : string;
    FfloodlightActivityGroupType : string;
    FfloodlightConfigurationId : string;
    FfloodlightConfigurationIdDimensionValue : TDimensionValue;
    Fhidden : boolean;
    Fid : string;
    FidDimensionValue : TDimensionValue;
    FimageTagEnabled : boolean;
    Fkind : string;
    Fname : string;
    Fnotes : string;
    FpublisherTags : TFloodlightActivitypublisherTags;
    Fsecure : boolean;
    FsslCompliant : boolean;
    FsslRequired : boolean;
    FsubaccountId : string;
    FtagFormat : string;
    FtagString : string;
    FuserDefinedVariableTypes : TFloodlightActivityuserDefinedVariableTypes;
  Protected
    //Property setters
    Procedure SetaccountId(AIndex : Integer; AValue : string); virtual;
    Procedure SetadvertiserId(AIndex : Integer; AValue : string); virtual;
    Procedure SetadvertiserIdDimensionValue(AIndex : Integer; AValue : TDimensionValue); virtual;
    Procedure SetcacheBustingType(AIndex : Integer; AValue : string); virtual;
    Procedure SetcountingMethod(AIndex : Integer; AValue : string); virtual;
    Procedure SetdefaultTags(AIndex : Integer; AValue : TFloodlightActivitydefaultTags); virtual;
    Procedure SetexpectedUrl(AIndex : Integer; AValue : string); virtual;
    Procedure SetfloodlightActivityGroupId(AIndex : Integer; AValue : string); virtual;
    Procedure SetfloodlightActivityGroupName(AIndex : Integer; AValue : string); virtual;
    Procedure SetfloodlightActivityGroupTagString(AIndex : Integer; AValue : string); virtual;
    Procedure SetfloodlightActivityGroupType(AIndex : Integer; AValue : string); virtual;
    Procedure SetfloodlightConfigurationId(AIndex : Integer; AValue : string); virtual;
    Procedure SetfloodlightConfigurationIdDimensionValue(AIndex : Integer; AValue : TDimensionValue); virtual;
    Procedure Sethidden(AIndex : Integer; AValue : boolean); virtual;
    Procedure Setid(AIndex : Integer; AValue : string); virtual;
    Procedure SetidDimensionValue(AIndex : Integer; AValue : TDimensionValue); virtual;
    Procedure SetimageTagEnabled(AIndex : Integer; AValue : boolean); virtual;
    Procedure Setkind(AIndex : Integer; AValue : string); virtual;
    Procedure Setname(AIndex : Integer; AValue : string); virtual;
    Procedure Setnotes(AIndex : Integer; AValue : string); virtual;
    Procedure SetpublisherTags(AIndex : Integer; AValue : TFloodlightActivitypublisherTags); virtual;
    Procedure Setsecure(AIndex : Integer; AValue : boolean); virtual;
    Procedure SetsslCompliant(AIndex : Integer; AValue : boolean); virtual;
    Procedure SetsslRequired(AIndex : Integer; AValue : boolean); virtual;
    Procedure SetsubaccountId(AIndex : Integer; AValue : string); virtual;
    Procedure SettagFormat(AIndex : Integer; AValue : string); virtual;
    Procedure SettagString(AIndex : Integer; AValue : string); virtual;
    Procedure SetuserDefinedVariableTypes(AIndex : Integer; AValue : TFloodlightActivityuserDefinedVariableTypes); virtual;
  Public
  Published
    Property accountId : string Index 0 Read FaccountId Write SetaccountId;
    Property advertiserId : string Index 8 Read FadvertiserId Write SetadvertiserId;
    Property advertiserIdDimensionValue : TDimensionValue Index 16 Read FadvertiserIdDimensionValue Write SetadvertiserIdDimensionValue;
    Property cacheBustingType : string Index 24 Read FcacheBustingType Write SetcacheBustingType;
    Property countingMethod : string Index 32 Read FcountingMethod Write SetcountingMethod;
    Property defaultTags : TFloodlightActivitydefaultTags Index 40 Read FdefaultTags Write SetdefaultTags;
    Property expectedUrl : string Index 48 Read FexpectedUrl Write SetexpectedUrl;
    Property floodlightActivityGroupId : string Index 56 Read FfloodlightActivityGroupId Write SetfloodlightActivityGroupId;
    Property floodlightActivityGroupName : string Index 64 Read FfloodlightActivityGroupName Write SetfloodlightActivityGroupName;
    Property floodlightActivityGroupTagString : string Index 72 Read FfloodlightActivityGroupTagString Write SetfloodlightActivityGroupTagString;
    Property floodlightActivityGroupType : string Index 80 Read FfloodlightActivityGroupType Write SetfloodlightActivityGroupType;
    Property floodlightConfigurationId : string Index 88 Read FfloodlightConfigurationId Write SetfloodlightConfigurationId;
    Property floodlightConfigurationIdDimensionValue : TDimensionValue Index 96 Read FfloodlightConfigurationIdDimensionValue Write SetfloodlightConfigurationIdDimensionValue;
    Property hidden : boolean Index 104 Read Fhidden Write Sethidden;
    Property id : string Index 112 Read Fid Write Setid;
    Property idDimensionValue : TDimensionValue Index 120 Read FidDimensionValue Write SetidDimensionValue;
    Property imageTagEnabled : boolean Index 128 Read FimageTagEnabled Write SetimageTagEnabled;
    Property kind : string Index 136 Read Fkind Write Setkind;
    Property name : string Index 144 Read Fname Write Setname;
    Property notes : string Index 152 Read Fnotes Write Setnotes;
    Property publisherTags : TFloodlightActivitypublisherTags Index 160 Read FpublisherTags Write SetpublisherTags;
    Property secure : boolean Index 168 Read Fsecure Write Setsecure;
    Property sslCompliant : boolean Index 176 Read FsslCompliant Write SetsslCompliant;
    Property sslRequired : boolean Index 184 Read FsslRequired Write SetsslRequired;
    Property subaccountId : string Index 192 Read FsubaccountId Write SetsubaccountId;
    Property tagFormat : string Index 200 Read FtagFormat Write SettagFormat;
    Property tagString : string Index 208 Read FtagString Write SettagString;
    Property userDefinedVariableTypes : TFloodlightActivityuserDefinedVariableTypes Index 216 Read FuserDefinedVariableTypes Write SetuserDefinedVariableTypes;
  end;
  TFloodlightActivityClass = Class of TFloodlightActivity;
  
  { --------------------------------------------------------------------
    TFloodlightActivitydefaultTags
    --------------------------------------------------------------------}
  
  TFloodlightActivitydefaultTags = Class(TGoogleBaseObject)
  Private
  Protected
    //Property setters
  Public
  Published
  end;
  TFloodlightActivitydefaultTagsClass = Class of TFloodlightActivitydefaultTags;
  
  { --------------------------------------------------------------------
    TFloodlightActivitypublisherTags
    --------------------------------------------------------------------}
  
  TFloodlightActivitypublisherTags = Class(TGoogleBaseObject)
  Private
  Protected
    //Property setters
  Public
  Published
  end;
  TFloodlightActivitypublisherTagsClass = Class of TFloodlightActivitypublisherTags;
  
  { --------------------------------------------------------------------
    TFloodlightActivityuserDefinedVariableTypes
    --------------------------------------------------------------------}
  
  TFloodlightActivityuserDefinedVariableTypes = Class(TGoogleBaseObject)
  Private
  Protected
    //Property setters
  Public
  Published
  end;
  TFloodlightActivityuserDefinedVariableTypesClass = Class of TFloodlightActivityuserDefinedVariableTypes;
  
  { --------------------------------------------------------------------
    TFloodlightActivityDynamicTag
    --------------------------------------------------------------------}
  
  TFloodlightActivityDynamicTag = Class(TGoogleBaseObject)
  Private
    Fid : string;
    Fname : string;
    Ftag : string;
  Protected
    //Property setters
    Procedure Setid(AIndex : Integer; AValue : string); virtual;
    Procedure Setname(AIndex : Integer; AValue : string); virtual;
    Procedure Settag(AIndex : Integer; AValue : string); virtual;
  Public
  Published
    Property id : string Index 0 Read Fid Write Setid;
    Property name : string Index 8 Read Fname Write Setname;
    Property tag : string Index 16 Read Ftag Write Settag;
  end;
  TFloodlightActivityDynamicTagClass = Class of TFloodlightActivityDynamicTag;
  
  { --------------------------------------------------------------------
    TFloodlightActivityGroup
    --------------------------------------------------------------------}
  
  TFloodlightActivityGroup = Class(TGoogleBaseObject)
  Private
    FaccountId : string;
    FadvertiserId : string;
    FadvertiserIdDimensionValue : TDimensionValue;
    FfloodlightConfigurationId : string;
    FfloodlightConfigurationIdDimensionValue : TDimensionValue;
    Fid : string;
    FidDimensionValue : TDimensionValue;
    Fkind : string;
    Fname : string;
    FsubaccountId : string;
    FtagString : string;
    F_type : string;
  Protected
    Class Function ExportPropertyName(Const AName : String) : string; override;
    //Property setters
    Procedure SetaccountId(AIndex : Integer; AValue : string); virtual;
    Procedure SetadvertiserId(AIndex : Integer; AValue : string); virtual;
    Procedure SetadvertiserIdDimensionValue(AIndex : Integer; AValue : TDimensionValue); virtual;
    Procedure SetfloodlightConfigurationId(AIndex : Integer; AValue : string); virtual;
    Procedure SetfloodlightConfigurationIdDimensionValue(AIndex : Integer; AValue : TDimensionValue); virtual;
    Procedure Setid(AIndex : Integer; AValue : string); virtual;
    Procedure SetidDimensionValue(AIndex : Integer; AValue : TDimensionValue); virtual;
    Procedure Setkind(AIndex : Integer; AValue : string); virtual;
    Procedure Setname(AIndex : Integer; AValue : string); virtual;
    Procedure SetsubaccountId(AIndex : Integer; AValue : string); virtual;
    Procedure SettagString(AIndex : Integer; AValue : string); virtual;
    Procedure Set_type(AIndex : Integer; AValue : string); virtual;
  Public
  Published
    Property accountId : string Index 0 Read FaccountId Write SetaccountId;
    Property advertiserId : string Index 8 Read FadvertiserId Write SetadvertiserId;
    Property advertiserIdDimensionValue : TDimensionValue Index 16 Read FadvertiserIdDimensionValue Write SetadvertiserIdDimensionValue;
    Property floodlightConfigurationId : string Index 24 Read FfloodlightConfigurationId Write SetfloodlightConfigurationId;
    Property floodlightConfigurationIdDimensionValue : TDimensionValue Index 32 Read FfloodlightConfigurationIdDimensionValue Write SetfloodlightConfigurationIdDimensionValue;
    Property id : string Index 40 Read Fid Write Setid;
    Property idDimensionValue : TDimensionValue Index 48 Read FidDimensionValue Write SetidDimensionValue;
    Property kind : string Index 56 Read Fkind Write Setkind;
    Property name : string Index 64 Read Fname Write Setname;
    Property subaccountId : string Index 72 Read FsubaccountId Write SetsubaccountId;
    Property tagString : string Index 80 Read FtagString Write SettagString;
    Property _type : string Index 88 Read F_type Write Set_type;
  end;
  TFloodlightActivityGroupClass = Class of TFloodlightActivityGroup;
  
  { --------------------------------------------------------------------
    TFloodlightActivityGroupsListResponse
    --------------------------------------------------------------------}
  
  TFloodlightActivityGroupsListResponse = Class(TGoogleBaseObject)
  Private
    FfloodlightActivityGroups : TFloodlightActivityGroupsListResponsefloodlightActivityGroups;
    Fkind : string;
    FnextPageToken : string;
  Protected
    //Property setters
    Procedure SetfloodlightActivityGroups(AIndex : Integer; AValue : TFloodlightActivityGroupsListResponsefloodlightActivityGroups); virtual;
    Procedure Setkind(AIndex : Integer; AValue : string); virtual;
    Procedure SetnextPageToken(AIndex : Integer; AValue : string); virtual;
  Public
  Published
    Property floodlightActivityGroups : TFloodlightActivityGroupsListResponsefloodlightActivityGroups Index 0 Read FfloodlightActivityGroups Write SetfloodlightActivityGroups;
    Property kind : string Index 8 Read Fkind Write Setkind;
    Property nextPageToken : string Index 16 Read FnextPageToken Write SetnextPageToken;
  end;
  TFloodlightActivityGroupsListResponseClass = Class of TFloodlightActivityGroupsListResponse;
  
  { --------------------------------------------------------------------
    TFloodlightActivityGroupsListResponsefloodlightActivityGroups
    --------------------------------------------------------------------}
  
  TFloodlightActivityGroupsListResponsefloodlightActivityGroups = Class(TGoogleBaseObject)
  Private
  Protected
    //Property setters
  Public
  Published
  end;
  TFloodlightActivityGroupsListResponsefloodlightActivityGroupsClass = Class of TFloodlightActivityGroupsListResponsefloodlightActivityGroups;
  
  { --------------------------------------------------------------------
    TFloodlightActivityPublisherDynamicTag
    --------------------------------------------------------------------}
  
  TFloodlightActivityPublisherDynamicTag = Class(TGoogleBaseObject)
  Private
    FclickThrough : boolean;
    FdirectorySiteId : string;
    FdynamicTag : TFloodlightActivityDynamicTag;
    FsiteId : string;
    FsiteIdDimensionValue : TDimensionValue;
    FviewThrough : boolean;
  Protected
    //Property setters
    Procedure SetclickThrough(AIndex : Integer; AValue : boolean); virtual;
    Procedure SetdirectorySiteId(AIndex : Integer; AValue : string); virtual;
    Procedure SetdynamicTag(AIndex : Integer; AValue : TFloodlightActivityDynamicTag); virtual;
    Procedure SetsiteId(AIndex : Integer; AValue : string); virtual;
    Procedure SetsiteIdDimensionValue(AIndex : Integer; AValue : TDimensionValue); virtual;
    Procedure SetviewThrough(AIndex : Integer; AValue : boolean); virtual;
  Public
  Published
    Property clickThrough : boolean Index 0 Read FclickThrough Write SetclickThrough;
    Property directorySiteId : string Index 8 Read FdirectorySiteId Write SetdirectorySiteId;
    Property dynamicTag : TFloodlightActivityDynamicTag Index 16 Read FdynamicTag Write SetdynamicTag;
    Property siteId : string Index 24 Read FsiteId Write SetsiteId;
    Property siteIdDimensionValue : TDimensionValue Index 32 Read FsiteIdDimensionValue Write SetsiteIdDimensionValue;
    Property viewThrough : boolean Index 40 Read FviewThrough Write SetviewThrough;
  end;
  TFloodlightActivityPublisherDynamicTagClass = Class of TFloodlightActivityPublisherDynamicTag;
  
  { --------------------------------------------------------------------
    TFloodlightConfiguration
    --------------------------------------------------------------------}
  
  TFloodlightConfiguration = Class(TGoogleBaseObject)
  Private
    FaccountId : string;
    FadvertiserId : string;
    FadvertiserIdDimensionValue : TDimensionValue;
    FanalyticsDataSharingEnabled : boolean;
    FexposureToConversionEnabled : boolean;
    FfirstDayOfWeek : string;
    Fid : string;
    FidDimensionValue : TDimensionValue;
    Fkind : string;
    FlookbackConfiguration : TLookbackConfiguration;
    FnaturalSearchConversionAttributionOption : string;
    FomnitureSettings : TOmnitureSettings;
    FsslRequired : boolean;
    FstandardVariableTypes : TFloodlightConfigurationstandardVariableTypes;
    FsubaccountId : string;
    FtagSettings : TTagSettings;
    FuserDefinedVariableConfigurations : TFloodlightConfigurationuserDefinedVariableConfigurations;
  Protected
    //Property setters
    Procedure SetaccountId(AIndex : Integer; AValue : string); virtual;
    Procedure SetadvertiserId(AIndex : Integer; AValue : string); virtual;
    Procedure SetadvertiserIdDimensionValue(AIndex : Integer; AValue : TDimensionValue); virtual;
    Procedure SetanalyticsDataSharingEnabled(AIndex : Integer; AValue : boolean); virtual;
    Procedure SetexposureToConversionEnabled(AIndex : Integer; AValue : boolean); virtual;
    Procedure SetfirstDayOfWeek(AIndex : Integer; AValue : string); virtual;
    Procedure Setid(AIndex : Integer; AValue : string); virtual;
    Procedure SetidDimensionValue(AIndex : Integer; AValue : TDimensionValue); virtual;
    Procedure Setkind(AIndex : Integer; AValue : string); virtual;
    Procedure SetlookbackConfiguration(AIndex : Integer; AValue : TLookbackConfiguration); virtual;
    Procedure SetnaturalSearchConversionAttributionOption(AIndex : Integer; AValue : string); virtual;
    Procedure SetomnitureSettings(AIndex : Integer; AValue : TOmnitureSettings); virtual;
    Procedure SetsslRequired(AIndex : Integer; AValue : boolean); virtual;
    Procedure SetstandardVariableTypes(AIndex : Integer; AValue : TFloodlightConfigurationstandardVariableTypes); virtual;
    Procedure SetsubaccountId(AIndex : Integer; AValue : string); virtual;
    Procedure SettagSettings(AIndex : Integer; AValue : TTagSettings); virtual;
    Procedure SetuserDefinedVariableConfigurations(AIndex : Integer; AValue : TFloodlightConfigurationuserDefinedVariableConfigurations); virtual;
  Public
  Published
    Property accountId : string Index 0 Read FaccountId Write SetaccountId;
    Property advertiserId : string Index 8 Read FadvertiserId Write SetadvertiserId;
    Property advertiserIdDimensionValue : TDimensionValue Index 16 Read FadvertiserIdDimensionValue Write SetadvertiserIdDimensionValue;
    Property analyticsDataSharingEnabled : boolean Index 24 Read FanalyticsDataSharingEnabled Write SetanalyticsDataSharingEnabled;
    Property exposureToConversionEnabled : boolean Index 32 Read FexposureToConversionEnabled Write SetexposureToConversionEnabled;
    Property firstDayOfWeek : string Index 40 Read FfirstDayOfWeek Write SetfirstDayOfWeek;
    Property id : string Index 48 Read Fid Write Setid;
    Property idDimensionValue : TDimensionValue Index 56 Read FidDimensionValue Write SetidDimensionValue;
    Property kind : string Index 64 Read Fkind Write Setkind;
    Property lookbackConfiguration : TLookbackConfiguration Index 72 Read FlookbackConfiguration Write SetlookbackConfiguration;
    Property naturalSearchConversionAttributionOption : string Index 80 Read FnaturalSearchConversionAttributionOption Write SetnaturalSearchConversionAttributionOption;
    Property omnitureSettings : TOmnitureSettings Index 88 Read FomnitureSettings Write SetomnitureSettings;
    Property sslRequired : boolean Index 96 Read FsslRequired Write SetsslRequired;
    Property standardVariableTypes : TFloodlightConfigurationstandardVariableTypes Index 104 Read FstandardVariableTypes Write SetstandardVariableTypes;
    Property subaccountId : string Index 112 Read FsubaccountId Write SetsubaccountId;
    Property tagSettings : TTagSettings Index 120 Read FtagSettings Write SettagSettings;
    Property userDefinedVariableConfigurations : TFloodlightConfigurationuserDefinedVariableConfigurations Index 128 Read FuserDefinedVariableConfigurations Write SetuserDefinedVariableConfigurations;
  end;
  TFloodlightConfigurationClass = Class of TFloodlightConfiguration;
  
  { --------------------------------------------------------------------
    TFloodlightConfigurationstandardVariableTypes
    --------------------------------------------------------------------}
  
  TFloodlightConfigurationstandardVariableTypes = Class(TGoogleBaseObject)
  Private
  Protected
    //Property setters
  Public
  Published
  end;
  TFloodlightConfigurationstandardVariableTypesClass = Class of TFloodlightConfigurationstandardVariableTypes;
  
  { --------------------------------------------------------------------
    TFloodlightConfigurationuserDefinedVariableConfigurations
    --------------------------------------------------------------------}
  
  TFloodlightConfigurationuserDefinedVariableConfigurations = Class(TGoogleBaseObject)
  Private
  Protected
    //Property setters
  Public
  Published
  end;
  TFloodlightConfigurationuserDefinedVariableConfigurationsClass = Class of TFloodlightConfigurationuserDefinedVariableConfigurations;
  
  { --------------------------------------------------------------------
    TFloodlightConfigurationsListResponse
    --------------------------------------------------------------------}
  
  TFloodlightConfigurationsListResponse = Class(TGoogleBaseObject)
  Private
    FfloodlightConfigurations : TFloodlightConfigurationsListResponsefloodlightConfigurations;
    Fkind : string;
  Protected
    //Property setters
    Procedure SetfloodlightConfigurations(AIndex : Integer; AValue : TFloodlightConfigurationsListResponsefloodlightConfigurations); virtual;
    Procedure Setkind(AIndex : Integer; AValue : string); virtual;
  Public
  Published
    Property floodlightConfigurations : TFloodlightConfigurationsListResponsefloodlightConfigurations Index 0 Read FfloodlightConfigurations Write SetfloodlightConfigurations;
    Property kind : string Index 8 Read Fkind Write Setkind;
  end;
  TFloodlightConfigurationsListResponseClass = Class of TFloodlightConfigurationsListResponse;
  
  { --------------------------------------------------------------------
    TFloodlightConfigurationsListResponsefloodlightConfigurations
    --------------------------------------------------------------------}
  
  TFloodlightConfigurationsListResponsefloodlightConfigurations = Class(TGoogleBaseObject)
  Private
  Protected
    //Property setters
  Public
  Published
  end;
  TFloodlightConfigurationsListResponsefloodlightConfigurationsClass = Class of TFloodlightConfigurationsListResponsefloodlightConfigurations;
  
  { --------------------------------------------------------------------
    TFloodlightReportCompatibleFields
    --------------------------------------------------------------------}
  
  TFloodlightReportCompatibleFields = Class(TGoogleBaseObject)
  Private
    FdimensionFilters : TFloodlightReportCompatibleFieldsdimensionFilters;
    Fdimensions : TFloodlightReportCompatibleFieldsdimensions;
    Fkind : string;
    Fmetrics : TFloodlightReportCompatibleFieldsmetrics;
  Protected
    //Property setters
    Procedure SetdimensionFilters(AIndex : Integer; AValue : TFloodlightReportCompatibleFieldsdimensionFilters); virtual;
    Procedure Setdimensions(AIndex : Integer; AValue : TFloodlightReportCompatibleFieldsdimensions); virtual;
    Procedure Setkind(AIndex : Integer; AValue : string); virtual;
    Procedure Setmetrics(AIndex : Integer; AValue : TFloodlightReportCompatibleFieldsmetrics); virtual;
  Public
  Published
    Property dimensionFilters : TFloodlightReportCompatibleFieldsdimensionFilters Index 0 Read FdimensionFilters Write SetdimensionFilters;
    Property dimensions : TFloodlightReportCompatibleFieldsdimensions Index 8 Read Fdimensions Write Setdimensions;
    Property kind : string Index 16 Read Fkind Write Setkind;
    Property metrics : TFloodlightReportCompatibleFieldsmetrics Index 24 Read Fmetrics Write Setmetrics;
  end;
  TFloodlightReportCompatibleFieldsClass = Class of TFloodlightReportCompatibleFields;
  
  { --------------------------------------------------------------------
    TFloodlightReportCompatibleFieldsdimensionFilters
    --------------------------------------------------------------------}
  
  TFloodlightReportCompatibleFieldsdimensionFilters = Class(TGoogleBaseObject)
  Private
  Protected
    //Property setters
  Public
  Published
  end;
  TFloodlightReportCompatibleFieldsdimensionFiltersClass = Class of TFloodlightReportCompatibleFieldsdimensionFilters;
  
  { --------------------------------------------------------------------
    TFloodlightReportCompatibleFieldsdimensions
    --------------------------------------------------------------------}
  
  TFloodlightReportCompatibleFieldsdimensions = Class(TGoogleBaseObject)
  Private
  Protected
    //Property setters
  Public
  Published
  end;
  TFloodlightReportCompatibleFieldsdimensionsClass = Class of TFloodlightReportCompatibleFieldsdimensions;
  
  { --------------------------------------------------------------------
    TFloodlightReportCompatibleFieldsmetrics
    --------------------------------------------------------------------}
  
  TFloodlightReportCompatibleFieldsmetrics = Class(TGoogleBaseObject)
  Private
  Protected
    //Property setters
  Public
  Published
  end;
  TFloodlightReportCompatibleFieldsmetricsClass = Class of TFloodlightReportCompatibleFieldsmetrics;
  
  { --------------------------------------------------------------------
    TFrequencyCap
    --------------------------------------------------------------------}
  
  TFrequencyCap = Class(TGoogleBaseObject)
  Private
    Fduration : string;
    Fimpressions : string;
  Protected
    //Property setters
    Procedure Setduration(AIndex : Integer; AValue : string); virtual;
    Procedure Setimpressions(AIndex : Integer; AValue : string); virtual;
  Public
  Published
    Property duration : string Index 0 Read Fduration Write Setduration;
    Property impressions : string Index 8 Read Fimpressions Write Setimpressions;
  end;
  TFrequencyCapClass = Class of TFrequencyCap;
  
  { --------------------------------------------------------------------
    TFsCommand
    --------------------------------------------------------------------}
  
  TFsCommand = Class(TGoogleBaseObject)
  Private
    Fleft : integer;
    FpositionOption : string;
    Ftop : integer;
    FwindowHeight : integer;
    FwindowWidth : integer;
  Protected
    //Property setters
    Procedure Setleft(AIndex : Integer; AValue : integer); virtual;
    Procedure SetpositionOption(AIndex : Integer; AValue : string); virtual;
    Procedure Settop(AIndex : Integer; AValue : integer); virtual;
    Procedure SetwindowHeight(AIndex : Integer; AValue : integer); virtual;
    Procedure SetwindowWidth(AIndex : Integer; AValue : integer); virtual;
  Public
  Published
    Property left : integer Index 0 Read Fleft Write Setleft;
    Property positionOption : string Index 8 Read FpositionOption Write SetpositionOption;
    Property top : integer Index 16 Read Ftop Write Settop;
    Property windowHeight : integer Index 24 Read FwindowHeight Write SetwindowHeight;
    Property windowWidth : integer Index 32 Read FwindowWidth Write SetwindowWidth;
  end;
  TFsCommandClass = Class of TFsCommand;
  
  { --------------------------------------------------------------------
    TGeoTargeting
    --------------------------------------------------------------------}
  
  TGeoTargeting = Class(TGoogleBaseObject)
  Private
    Fcities : TGeoTargetingcities;
    Fcountries : TGeoTargetingcountries;
    FexcludeCountries : boolean;
    Fmetros : TGeoTargetingmetros;
    FpostalCodes : TGeoTargetingpostalCodes;
    Fregions : TGeoTargetingregions;
  Protected
    //Property setters
    Procedure Setcities(AIndex : Integer; AValue : TGeoTargetingcities); virtual;
    Procedure Setcountries(AIndex : Integer; AValue : TGeoTargetingcountries); virtual;
    Procedure SetexcludeCountries(AIndex : Integer; AValue : boolean); virtual;
    Procedure Setmetros(AIndex : Integer; AValue : TGeoTargetingmetros); virtual;
    Procedure SetpostalCodes(AIndex : Integer; AValue : TGeoTargetingpostalCodes); virtual;
    Procedure Setregions(AIndex : Integer; AValue : TGeoTargetingregions); virtual;
  Public
  Published
    Property cities : TGeoTargetingcities Index 0 Read Fcities Write Setcities;
    Property countries : TGeoTargetingcountries Index 8 Read Fcountries Write Setcountries;
    Property excludeCountries : boolean Index 16 Read FexcludeCountries Write SetexcludeCountries;
    Property metros : TGeoTargetingmetros Index 24 Read Fmetros Write Setmetros;
    Property postalCodes : TGeoTargetingpostalCodes Index 32 Read FpostalCodes Write SetpostalCodes;
    Property regions : TGeoTargetingregions Index 40 Read Fregions Write Setregions;
  end;
  TGeoTargetingClass = Class of TGeoTargeting;
  
  { --------------------------------------------------------------------
    TGeoTargetingcities
    --------------------------------------------------------------------}
  
  TGeoTargetingcities = Class(TGoogleBaseObject)
  Private
  Protected
    //Property setters
  Public
  Published
  end;
  TGeoTargetingcitiesClass = Class of TGeoTargetingcities;
  
  { --------------------------------------------------------------------
    TGeoTargetingcountries
    --------------------------------------------------------------------}
  
  TGeoTargetingcountries = Class(TGoogleBaseObject)
  Private
  Protected
    //Property setters
  Public
  Published
  end;
  TGeoTargetingcountriesClass = Class of TGeoTargetingcountries;
  
  { --------------------------------------------------------------------
    TGeoTargetingmetros
    --------------------------------------------------------------------}
  
  TGeoTargetingmetros = Class(TGoogleBaseObject)
  Private
  Protected
    //Property setters
  Public
  Published
  end;
  TGeoTargetingmetrosClass = Class of TGeoTargetingmetros;
  
  { --------------------------------------------------------------------
    TGeoTargetingpostalCodes
    --------------------------------------------------------------------}
  
  TGeoTargetingpostalCodes = Class(TGoogleBaseObject)
  Private
  Protected
    //Property setters
  Public
  Published
  end;
  TGeoTargetingpostalCodesClass = Class of TGeoTargetingpostalCodes;
  
  { --------------------------------------------------------------------
    TGeoTargetingregions
    --------------------------------------------------------------------}
  
  TGeoTargetingregions = Class(TGoogleBaseObject)
  Private
  Protected
    //Property setters
  Public
  Published
  end;
  TGeoTargetingregionsClass = Class of TGeoTargetingregions;
  
  { --------------------------------------------------------------------
    TInventoryItem
    --------------------------------------------------------------------}
  
  TInventoryItem = Class(TGoogleBaseObject)
  Private
    FaccountId : string;
    FadSlots : TInventoryItemadSlots;
    FadvertiserId : string;
    FcontentCategoryId : string;
    FestimatedClickThroughRate : string;
    FestimatedConversionRate : string;
    Fid : string;
    FinPlan : boolean;
    Fkind : string;
    FlastModifiedInfo : TLastModifiedInfo;
    Fname : string;
    FnegotiationChannelId : string;
    ForderId : string;
    FplacementStrategyId : string;
    Fpricing : TPricing;
    FprojectId : string;
    FrfpId : string;
    FsiteId : string;
    FsubaccountId : string;
  Protected
    //Property setters
    Procedure SetaccountId(AIndex : Integer; AValue : string); virtual;
    Procedure SetadSlots(AIndex : Integer; AValue : TInventoryItemadSlots); virtual;
    Procedure SetadvertiserId(AIndex : Integer; AValue : string); virtual;
    Procedure SetcontentCategoryId(AIndex : Integer; AValue : string); virtual;
    Procedure SetestimatedClickThroughRate(AIndex : Integer; AValue : string); virtual;
    Procedure SetestimatedConversionRate(AIndex : Integer; AValue : string); virtual;
    Procedure Setid(AIndex : Integer; AValue : string); virtual;
    Procedure SetinPlan(AIndex : Integer; AValue : boolean); virtual;
    Procedure Setkind(AIndex : Integer; AValue : string); virtual;
    Procedure SetlastModifiedInfo(AIndex : Integer; AValue : TLastModifiedInfo); virtual;
    Procedure Setname(AIndex : Integer; AValue : string); virtual;
    Procedure SetnegotiationChannelId(AIndex : Integer; AValue : string); virtual;
    Procedure SetorderId(AIndex : Integer; AValue : string); virtual;
    Procedure SetplacementStrategyId(AIndex : Integer; AValue : string); virtual;
    Procedure Setpricing(AIndex : Integer; AValue : TPricing); virtual;
    Procedure SetprojectId(AIndex : Integer; AValue : string); virtual;
    Procedure SetrfpId(AIndex : Integer; AValue : string); virtual;
    Procedure SetsiteId(AIndex : Integer; AValue : string); virtual;
    Procedure SetsubaccountId(AIndex : Integer; AValue : string); virtual;
  Public
  Published
    Property accountId : string Index 0 Read FaccountId Write SetaccountId;
    Property adSlots : TInventoryItemadSlots Index 8 Read FadSlots Write SetadSlots;
    Property advertiserId : string Index 16 Read FadvertiserId Write SetadvertiserId;
    Property contentCategoryId : string Index 24 Read FcontentCategoryId Write SetcontentCategoryId;
    Property estimatedClickThroughRate : string Index 32 Read FestimatedClickThroughRate Write SetestimatedClickThroughRate;
    Property estimatedConversionRate : string Index 40 Read FestimatedConversionRate Write SetestimatedConversionRate;
    Property id : string Index 48 Read Fid Write Setid;
    Property inPlan : boolean Index 56 Read FinPlan Write SetinPlan;
    Property kind : string Index 64 Read Fkind Write Setkind;
    Property lastModifiedInfo : TLastModifiedInfo Index 72 Read FlastModifiedInfo Write SetlastModifiedInfo;
    Property name : string Index 80 Read Fname Write Setname;
    Property negotiationChannelId : string Index 88 Read FnegotiationChannelId Write SetnegotiationChannelId;
    Property orderId : string Index 96 Read ForderId Write SetorderId;
    Property placementStrategyId : string Index 104 Read FplacementStrategyId Write SetplacementStrategyId;
    Property pricing : TPricing Index 112 Read Fpricing Write Setpricing;
    Property projectId : string Index 120 Read FprojectId Write SetprojectId;
    Property rfpId : string Index 128 Read FrfpId Write SetrfpId;
    Property siteId : string Index 136 Read FsiteId Write SetsiteId;
    Property subaccountId : string Index 144 Read FsubaccountId Write SetsubaccountId;
  end;
  TInventoryItemClass = Class of TInventoryItem;
  
  { --------------------------------------------------------------------
    TInventoryItemadSlots
    --------------------------------------------------------------------}
  
  TInventoryItemadSlots = Class(TGoogleBaseObject)
  Private
  Protected
    //Property setters
  Public
  Published
  end;
  TInventoryItemadSlotsClass = Class of TInventoryItemadSlots;
  
  { --------------------------------------------------------------------
    TInventoryItemsListResponse
    --------------------------------------------------------------------}
  
  TInventoryItemsListResponse = Class(TGoogleBaseObject)
  Private
    FinventoryItems : TInventoryItemsListResponseinventoryItems;
    Fkind : string;
    FnextPageToken : string;
  Protected
    //Property setters
    Procedure SetinventoryItems(AIndex : Integer; AValue : TInventoryItemsListResponseinventoryItems); virtual;
    Procedure Setkind(AIndex : Integer; AValue : string); virtual;
    Procedure SetnextPageToken(AIndex : Integer; AValue : string); virtual;
  Public
  Published
    Property inventoryItems : TInventoryItemsListResponseinventoryItems Index 0 Read FinventoryItems Write SetinventoryItems;
    Property kind : string Index 8 Read Fkind Write Setkind;
    Property nextPageToken : string Index 16 Read FnextPageToken Write SetnextPageToken;
  end;
  TInventoryItemsListResponseClass = Class of TInventoryItemsListResponse;
  
  { --------------------------------------------------------------------
    TInventoryItemsListResponseinventoryItems
    --------------------------------------------------------------------}
  
  TInventoryItemsListResponseinventoryItems = Class(TGoogleBaseObject)
  Private
  Protected
    //Property setters
  Public
  Published
  end;
  TInventoryItemsListResponseinventoryItemsClass = Class of TInventoryItemsListResponseinventoryItems;
  
  { --------------------------------------------------------------------
    TKeyValueTargetingExpression
    --------------------------------------------------------------------}
  
  TKeyValueTargetingExpression = Class(TGoogleBaseObject)
  Private
    Fexpression : string;
  Protected
    //Property setters
    Procedure Setexpression(AIndex : Integer; AValue : string); virtual;
  Public
  Published
    Property expression : string Index 0 Read Fexpression Write Setexpression;
  end;
  TKeyValueTargetingExpressionClass = Class of TKeyValueTargetingExpression;
  
  { --------------------------------------------------------------------
    TLandingPage
    --------------------------------------------------------------------}
  
  TLandingPage = Class(TGoogleBaseObject)
  Private
    Fdefault : boolean;
    Fid : string;
    Fkind : string;
    Fname : string;
    Furl : string;
  Protected
    //Property setters
    Procedure Setdefault(AIndex : Integer; AValue : boolean); virtual;
    Procedure Setid(AIndex : Integer; AValue : string); virtual;
    Procedure Setkind(AIndex : Integer; AValue : string); virtual;
    Procedure Setname(AIndex : Integer; AValue : string); virtual;
    Procedure Seturl(AIndex : Integer; AValue : string); virtual;
  Public
  Published
    Property default : boolean Index 0 Read Fdefault Write Setdefault;
    Property id : string Index 8 Read Fid Write Setid;
    Property kind : string Index 16 Read Fkind Write Setkind;
    Property name : string Index 24 Read Fname Write Setname;
    Property url : string Index 32 Read Furl Write Seturl;
  end;
  TLandingPageClass = Class of TLandingPage;
  
  { --------------------------------------------------------------------
    TLandingPagesListResponse
    --------------------------------------------------------------------}
  
  TLandingPagesListResponse = Class(TGoogleBaseObject)
  Private
    Fkind : string;
    FlandingPages : TLandingPagesListResponselandingPages;
  Protected
    //Property setters
    Procedure Setkind(AIndex : Integer; AValue : string); virtual;
    Procedure SetlandingPages(AIndex : Integer; AValue : TLandingPagesListResponselandingPages); virtual;
  Public
  Published
    Property kind : string Index 0 Read Fkind Write Setkind;
    Property landingPages : TLandingPagesListResponselandingPages Index 8 Read FlandingPages Write SetlandingPages;
  end;
  TLandingPagesListResponseClass = Class of TLandingPagesListResponse;
  
  { --------------------------------------------------------------------
    TLandingPagesListResponselandingPages
    --------------------------------------------------------------------}
  
  TLandingPagesListResponselandingPages = Class(TGoogleBaseObject)
  Private
  Protected
    //Property setters
  Public
  Published
  end;
  TLandingPagesListResponselandingPagesClass = Class of TLandingPagesListResponselandingPages;
  
  { --------------------------------------------------------------------
    TLastModifiedInfo
    --------------------------------------------------------------------}
  
  TLastModifiedInfo = Class(TGoogleBaseObject)
  Private
    Ftime : string;
  Protected
    //Property setters
    Procedure Settime(AIndex : Integer; AValue : string); virtual;
  Public
  Published
    Property time : string Index 0 Read Ftime Write Settime;
  end;
  TLastModifiedInfoClass = Class of TLastModifiedInfo;
  
  { --------------------------------------------------------------------
    TListPopulationClause
    --------------------------------------------------------------------}
  
  TListPopulationClause = Class(TGoogleBaseObject)
  Private
    Fterms : TListPopulationClauseterms;
  Protected
    //Property setters
    Procedure Setterms(AIndex : Integer; AValue : TListPopulationClauseterms); virtual;
  Public
  Published
    Property terms : TListPopulationClauseterms Index 0 Read Fterms Write Setterms;
  end;
  TListPopulationClauseClass = Class of TListPopulationClause;
  
  { --------------------------------------------------------------------
    TListPopulationClauseterms
    --------------------------------------------------------------------}
  
  TListPopulationClauseterms = Class(TGoogleBaseObject)
  Private
  Protected
    //Property setters
  Public
  Published
  end;
  TListPopulationClausetermsClass = Class of TListPopulationClauseterms;
  
  { --------------------------------------------------------------------
    TListPopulationRule
    --------------------------------------------------------------------}
  
  TListPopulationRule = Class(TGoogleBaseObject)
  Private
    FfloodlightActivityId : string;
    FfloodlightActivityName : string;
    FlistPopulationClauses : TListPopulationRulelistPopulationClauses;
  Protected
    //Property setters
    Procedure SetfloodlightActivityId(AIndex : Integer; AValue : string); virtual;
    Procedure SetfloodlightActivityName(AIndex : Integer; AValue : string); virtual;
    Procedure SetlistPopulationClauses(AIndex : Integer; AValue : TListPopulationRulelistPopulationClauses); virtual;
  Public
  Published
    Property floodlightActivityId : string Index 0 Read FfloodlightActivityId Write SetfloodlightActivityId;
    Property floodlightActivityName : string Index 8 Read FfloodlightActivityName Write SetfloodlightActivityName;
    Property listPopulationClauses : TListPopulationRulelistPopulationClauses Index 16 Read FlistPopulationClauses Write SetlistPopulationClauses;
  end;
  TListPopulationRuleClass = Class of TListPopulationRule;
  
  { --------------------------------------------------------------------
    TListPopulationRulelistPopulationClauses
    --------------------------------------------------------------------}
  
  TListPopulationRulelistPopulationClauses = Class(TGoogleBaseObject)
  Private
  Protected
    //Property setters
  Public
  Published
  end;
  TListPopulationRulelistPopulationClausesClass = Class of TListPopulationRulelistPopulationClauses;
  
  { --------------------------------------------------------------------
    TListPopulationTerm
    --------------------------------------------------------------------}
  
  TListPopulationTerm = Class(TGoogleBaseObject)
  Private
    Fcontains : boolean;
    Fnegation : boolean;
    F_operator : string;
    FremarketingListId : string;
    F_type : string;
    Fvalue : string;
    FvariableFriendlyName : string;
    FvariableName : string;
  Protected
    Class Function ExportPropertyName(Const AName : String) : string; override;
    //Property setters
    Procedure Setcontains(AIndex : Integer; AValue : boolean); virtual;
    Procedure Setnegation(AIndex : Integer; AValue : boolean); virtual;
    Procedure Set_operator(AIndex : Integer; AValue : string); virtual;
    Procedure SetremarketingListId(AIndex : Integer; AValue : string); virtual;
    Procedure Set_type(AIndex : Integer; AValue : string); virtual;
    Procedure Setvalue(AIndex : Integer; AValue : string); virtual;
    Procedure SetvariableFriendlyName(AIndex : Integer; AValue : string); virtual;
    Procedure SetvariableName(AIndex : Integer; AValue : string); virtual;
  Public
  Published
    Property contains : boolean Index 0 Read Fcontains Write Setcontains;
    Property negation : boolean Index 8 Read Fnegation Write Setnegation;
    Property _operator : string Index 16 Read F_operator Write Set_operator;
    Property remarketingListId : string Index 24 Read FremarketingListId Write SetremarketingListId;
    Property _type : string Index 32 Read F_type Write Set_type;
    Property value : string Index 40 Read Fvalue Write Setvalue;
    Property variableFriendlyName : string Index 48 Read FvariableFriendlyName Write SetvariableFriendlyName;
    Property variableName : string Index 56 Read FvariableName Write SetvariableName;
  end;
  TListPopulationTermClass = Class of TListPopulationTerm;
  
  { --------------------------------------------------------------------
    TListTargetingExpression
    --------------------------------------------------------------------}
  
  TListTargetingExpression = Class(TGoogleBaseObject)
  Private
    Fexpression : string;
  Protected
    //Property setters
    Procedure Setexpression(AIndex : Integer; AValue : string); virtual;
  Public
  Published
    Property expression : string Index 0 Read Fexpression Write Setexpression;
  end;
  TListTargetingExpressionClass = Class of TListTargetingExpression;
  
  { --------------------------------------------------------------------
    TLookbackConfiguration
    --------------------------------------------------------------------}
  
  TLookbackConfiguration = Class(TGoogleBaseObject)
  Private
    FclickDuration : integer;
    FpostImpressionActivitiesDuration : integer;
  Protected
    //Property setters
    Procedure SetclickDuration(AIndex : Integer; AValue : integer); virtual;
    Procedure SetpostImpressionActivitiesDuration(AIndex : Integer; AValue : integer); virtual;
  Public
  Published
    Property clickDuration : integer Index 0 Read FclickDuration Write SetclickDuration;
    Property postImpressionActivitiesDuration : integer Index 8 Read FpostImpressionActivitiesDuration Write SetpostImpressionActivitiesDuration;
  end;
  TLookbackConfigurationClass = Class of TLookbackConfiguration;
  
  { --------------------------------------------------------------------
    TMetric
    --------------------------------------------------------------------}
  
  TMetric = Class(TGoogleBaseObject)
  Private
    Fkind : string;
    Fname : string;
  Protected
    //Property setters
    Procedure Setkind(AIndex : Integer; AValue : string); virtual;
    Procedure Setname(AIndex : Integer; AValue : string); virtual;
  Public
  Published
    Property kind : string Index 0 Read Fkind Write Setkind;
    Property name : string Index 8 Read Fname Write Setname;
  end;
  TMetricClass = Class of TMetric;
  
  { --------------------------------------------------------------------
    TMetro
    --------------------------------------------------------------------}
  
  TMetro = Class(TGoogleBaseObject)
  Private
    FcountryCode : string;
    FcountryDartId : string;
    FdartId : string;
    FdmaId : string;
    Fkind : string;
    FmetroCode : string;
    Fname : string;
  Protected
    //Property setters
    Procedure SetcountryCode(AIndex : Integer; AValue : string); virtual;
    Procedure SetcountryDartId(AIndex : Integer; AValue : string); virtual;
    Procedure SetdartId(AIndex : Integer; AValue : string); virtual;
    Procedure SetdmaId(AIndex : Integer; AValue : string); virtual;
    Procedure Setkind(AIndex : Integer; AValue : string); virtual;
    Procedure SetmetroCode(AIndex : Integer; AValue : string); virtual;
    Procedure Setname(AIndex : Integer; AValue : string); virtual;
  Public
  Published
    Property countryCode : string Index 0 Read FcountryCode Write SetcountryCode;
    Property countryDartId : string Index 8 Read FcountryDartId Write SetcountryDartId;
    Property dartId : string Index 16 Read FdartId Write SetdartId;
    Property dmaId : string Index 24 Read FdmaId Write SetdmaId;
    Property kind : string Index 32 Read Fkind Write Setkind;
    Property metroCode : string Index 40 Read FmetroCode Write SetmetroCode;
    Property name : string Index 48 Read Fname Write Setname;
  end;
  TMetroClass = Class of TMetro;
  
  { --------------------------------------------------------------------
    TMetrosListResponse
    --------------------------------------------------------------------}
  
  TMetrosListResponse = Class(TGoogleBaseObject)
  Private
    Fkind : string;
    Fmetros : TMetrosListResponsemetros;
  Protected
    //Property setters
    Procedure Setkind(AIndex : Integer; AValue : string); virtual;
    Procedure Setmetros(AIndex : Integer; AValue : TMetrosListResponsemetros); virtual;
  Public
  Published
    Property kind : string Index 0 Read Fkind Write Setkind;
    Property metros : TMetrosListResponsemetros Index 8 Read Fmetros Write Setmetros;
  end;
  TMetrosListResponseClass = Class of TMetrosListResponse;
  
  { --------------------------------------------------------------------
    TMetrosListResponsemetros
    --------------------------------------------------------------------}
  
  TMetrosListResponsemetros = Class(TGoogleBaseObject)
  Private
  Protected
    //Property setters
  Public
  Published
  end;
  TMetrosListResponsemetrosClass = Class of TMetrosListResponsemetros;
  
  { --------------------------------------------------------------------
    TMobileCarrier
    --------------------------------------------------------------------}
  
  TMobileCarrier = Class(TGoogleBaseObject)
  Private
    FcountryCode : string;
    FcountryDartId : string;
    Fid : string;
    Fkind : string;
    Fname : string;
  Protected
    //Property setters
    Procedure SetcountryCode(AIndex : Integer; AValue : string); virtual;
    Procedure SetcountryDartId(AIndex : Integer; AValue : string); virtual;
    Procedure Setid(AIndex : Integer; AValue : string); virtual;
    Procedure Setkind(AIndex : Integer; AValue : string); virtual;
    Procedure Setname(AIndex : Integer; AValue : string); virtual;
  Public
  Published
    Property countryCode : string Index 0 Read FcountryCode Write SetcountryCode;
    Property countryDartId : string Index 8 Read FcountryDartId Write SetcountryDartId;
    Property id : string Index 16 Read Fid Write Setid;
    Property kind : string Index 24 Read Fkind Write Setkind;
    Property name : string Index 32 Read Fname Write Setname;
  end;
  TMobileCarrierClass = Class of TMobileCarrier;
  
  { --------------------------------------------------------------------
    TMobileCarriersListResponse
    --------------------------------------------------------------------}
  
  TMobileCarriersListResponse = Class(TGoogleBaseObject)
  Private
    Fkind : string;
    FmobileCarriers : TMobileCarriersListResponsemobileCarriers;
  Protected
    //Property setters
    Procedure Setkind(AIndex : Integer; AValue : string); virtual;
    Procedure SetmobileCarriers(AIndex : Integer; AValue : TMobileCarriersListResponsemobileCarriers); virtual;
  Public
  Published
    Property kind : string Index 0 Read Fkind Write Setkind;
    Property mobileCarriers : TMobileCarriersListResponsemobileCarriers Index 8 Read FmobileCarriers Write SetmobileCarriers;
  end;
  TMobileCarriersListResponseClass = Class of TMobileCarriersListResponse;
  
  { --------------------------------------------------------------------
    TMobileCarriersListResponsemobileCarriers
    --------------------------------------------------------------------}
  
  TMobileCarriersListResponsemobileCarriers = Class(TGoogleBaseObject)
  Private
  Protected
    //Property setters
  Public
  Published
  end;
  TMobileCarriersListResponsemobileCarriersClass = Class of TMobileCarriersListResponsemobileCarriers;
  
  { --------------------------------------------------------------------
    TObjectFilter
    --------------------------------------------------------------------}
  
  TObjectFilter = Class(TGoogleBaseObject)
  Private
    Fkind : string;
    FobjectIds : TObjectFilterobjectIds;
    Fstatus : string;
  Protected
    //Property setters
    Procedure Setkind(AIndex : Integer; AValue : string); virtual;
    Procedure SetobjectIds(AIndex : Integer; AValue : TObjectFilterobjectIds); virtual;
    Procedure Setstatus(AIndex : Integer; AValue : string); virtual;
  Public
  Published
    Property kind : string Index 0 Read Fkind Write Setkind;
    Property objectIds : TObjectFilterobjectIds Index 8 Read FobjectIds Write SetobjectIds;
    Property status : string Index 16 Read Fstatus Write Setstatus;
  end;
  TObjectFilterClass = Class of TObjectFilter;
  
  { --------------------------------------------------------------------
    TObjectFilterobjectIds
    --------------------------------------------------------------------}
  
  TObjectFilterobjectIds = Class(TGoogleBaseObject)
  Private
  Protected
    //Property setters
  Public
  Published
  end;
  TObjectFilterobjectIdsClass = Class of TObjectFilterobjectIds;
  
  { --------------------------------------------------------------------
    TOffsetPosition
    --------------------------------------------------------------------}
  
  TOffsetPosition = Class(TGoogleBaseObject)
  Private
    Fleft : integer;
    Ftop : integer;
  Protected
    //Property setters
    Procedure Setleft(AIndex : Integer; AValue : integer); virtual;
    Procedure Settop(AIndex : Integer; AValue : integer); virtual;
  Public
  Published
    Property left : integer Index 0 Read Fleft Write Setleft;
    Property top : integer Index 8 Read Ftop Write Settop;
  end;
  TOffsetPositionClass = Class of TOffsetPosition;
  
  { --------------------------------------------------------------------
    TOmnitureSettings
    --------------------------------------------------------------------}
  
  TOmnitureSettings = Class(TGoogleBaseObject)
  Private
    FomnitureCostDataEnabled : boolean;
    FomnitureIntegrationEnabled : boolean;
  Protected
    //Property setters
    Procedure SetomnitureCostDataEnabled(AIndex : Integer; AValue : boolean); virtual;
    Procedure SetomnitureIntegrationEnabled(AIndex : Integer; AValue : boolean); virtual;
  Public
  Published
    Property omnitureCostDataEnabled : boolean Index 0 Read FomnitureCostDataEnabled Write SetomnitureCostDataEnabled;
    Property omnitureIntegrationEnabled : boolean Index 8 Read FomnitureIntegrationEnabled Write SetomnitureIntegrationEnabled;
  end;
  TOmnitureSettingsClass = Class of TOmnitureSettings;
  
  { --------------------------------------------------------------------
    TOperatingSystem
    --------------------------------------------------------------------}
  
  TOperatingSystem = Class(TGoogleBaseObject)
  Private
    FdartId : string;
    Fdesktop : boolean;
    Fkind : string;
    Fmobile : boolean;
    Fname : string;
  Protected
    //Property setters
    Procedure SetdartId(AIndex : Integer; AValue : string); virtual;
    Procedure Setdesktop(AIndex : Integer; AValue : boolean); virtual;
    Procedure Setkind(AIndex : Integer; AValue : string); virtual;
    Procedure Setmobile(AIndex : Integer; AValue : boolean); virtual;
    Procedure Setname(AIndex : Integer; AValue : string); virtual;
  Public
  Published
    Property dartId : string Index 0 Read FdartId Write SetdartId;
    Property desktop : boolean Index 8 Read Fdesktop Write Setdesktop;
    Property kind : string Index 16 Read Fkind Write Setkind;
    Property mobile : boolean Index 24 Read Fmobile Write Setmobile;
    Property name : string Index 32 Read Fname Write Setname;
  end;
  TOperatingSystemClass = Class of TOperatingSystem;
  
  { --------------------------------------------------------------------
    TOperatingSystemVersion
    --------------------------------------------------------------------}
  
  TOperatingSystemVersion = Class(TGoogleBaseObject)
  Private
    Fid : string;
    Fkind : string;
    FmajorVersion : string;
    FminorVersion : string;
    Fname : string;
    FoperatingSystem : TOperatingSystem;
  Protected
    //Property setters
    Procedure Setid(AIndex : Integer; AValue : string); virtual;
    Procedure Setkind(AIndex : Integer; AValue : string); virtual;
    Procedure SetmajorVersion(AIndex : Integer; AValue : string); virtual;
    Procedure SetminorVersion(AIndex : Integer; AValue : string); virtual;
    Procedure Setname(AIndex : Integer; AValue : string); virtual;
    Procedure SetoperatingSystem(AIndex : Integer; AValue : TOperatingSystem); virtual;
  Public
  Published
    Property id : string Index 0 Read Fid Write Setid;
    Property kind : string Index 8 Read Fkind Write Setkind;
    Property majorVersion : string Index 16 Read FmajorVersion Write SetmajorVersion;
    Property minorVersion : string Index 24 Read FminorVersion Write SetminorVersion;
    Property name : string Index 32 Read Fname Write Setname;
    Property operatingSystem : TOperatingSystem Index 40 Read FoperatingSystem Write SetoperatingSystem;
  end;
  TOperatingSystemVersionClass = Class of TOperatingSystemVersion;
  
  { --------------------------------------------------------------------
    TOperatingSystemVersionsListResponse
    --------------------------------------------------------------------}
  
  TOperatingSystemVersionsListResponse = Class(TGoogleBaseObject)
  Private
    Fkind : string;
    FoperatingSystemVersions : TOperatingSystemVersionsListResponseoperatingSystemVersions;
  Protected
    //Property setters
    Procedure Setkind(AIndex : Integer; AValue : string); virtual;
    Procedure SetoperatingSystemVersions(AIndex : Integer; AValue : TOperatingSystemVersionsListResponseoperatingSystemVersions); virtual;
  Public
  Published
    Property kind : string Index 0 Read Fkind Write Setkind;
    Property operatingSystemVersions : TOperatingSystemVersionsListResponseoperatingSystemVersions Index 8 Read FoperatingSystemVersions Write SetoperatingSystemVersions;
  end;
  TOperatingSystemVersionsListResponseClass = Class of TOperatingSystemVersionsListResponse;
  
  { --------------------------------------------------------------------
    TOperatingSystemVersionsListResponseoperatingSystemVersions
    --------------------------------------------------------------------}
  
  TOperatingSystemVersionsListResponseoperatingSystemVersions = Class(TGoogleBaseObject)
  Private
  Protected
    //Property setters
  Public
  Published
  end;
  TOperatingSystemVersionsListResponseoperatingSystemVersionsClass = Class of TOperatingSystemVersionsListResponseoperatingSystemVersions;
  
  { --------------------------------------------------------------------
    TOperatingSystemsListResponse
    --------------------------------------------------------------------}
  
  TOperatingSystemsListResponse = Class(TGoogleBaseObject)
  Private
    Fkind : string;
    FoperatingSystems : TOperatingSystemsListResponseoperatingSystems;
  Protected
    //Property setters
    Procedure Setkind(AIndex : Integer; AValue : string); virtual;
    Procedure SetoperatingSystems(AIndex : Integer; AValue : TOperatingSystemsListResponseoperatingSystems); virtual;
  Public
  Published
    Property kind : string Index 0 Read Fkind Write Setkind;
    Property operatingSystems : TOperatingSystemsListResponseoperatingSystems Index 8 Read FoperatingSystems Write SetoperatingSystems;
  end;
  TOperatingSystemsListResponseClass = Class of TOperatingSystemsListResponse;
  
  { --------------------------------------------------------------------
    TOperatingSystemsListResponseoperatingSystems
    --------------------------------------------------------------------}
  
  TOperatingSystemsListResponseoperatingSystems = Class(TGoogleBaseObject)
  Private
  Protected
    //Property setters
  Public
  Published
  end;
  TOperatingSystemsListResponseoperatingSystemsClass = Class of TOperatingSystemsListResponseoperatingSystems;
  
  { --------------------------------------------------------------------
    TOptimizationActivity
    --------------------------------------------------------------------}
  
  TOptimizationActivity = Class(TGoogleBaseObject)
  Private
    FfloodlightActivityId : string;
    FfloodlightActivityIdDimensionValue : TDimensionValue;
    Fweight : integer;
  Protected
    //Property setters
    Procedure SetfloodlightActivityId(AIndex : Integer; AValue : string); virtual;
    Procedure SetfloodlightActivityIdDimensionValue(AIndex : Integer; AValue : TDimensionValue); virtual;
    Procedure Setweight(AIndex : Integer; AValue : integer); virtual;
  Public
  Published
    Property floodlightActivityId : string Index 0 Read FfloodlightActivityId Write SetfloodlightActivityId;
    Property floodlightActivityIdDimensionValue : TDimensionValue Index 8 Read FfloodlightActivityIdDimensionValue Write SetfloodlightActivityIdDimensionValue;
    Property weight : integer Index 16 Read Fweight Write Setweight;
  end;
  TOptimizationActivityClass = Class of TOptimizationActivity;
  
  { --------------------------------------------------------------------
    TOrder
    --------------------------------------------------------------------}
  
  TOrder = Class(TGoogleBaseObject)
  Private
    FaccountId : string;
    FadvertiserId : string;
    FapproverUserProfileIds : TOrderapproverUserProfileIds;
    FbuyerInvoiceId : string;
    FbuyerOrganizationName : string;
    Fcomments : string;
    Fcontacts : TOrdercontacts;
    Fid : string;
    Fkind : string;
    FlastModifiedInfo : TLastModifiedInfo;
    Fname : string;
    Fnotes : string;
    FplanningTermId : string;
    FprojectId : string;
    FsellerOrderId : string;
    FsellerOrganizationName : string;
    FsiteId : TOrdersiteId;
    FsiteNames : TOrdersiteNames;
    FsubaccountId : string;
    FtermsAndConditions : string;
  Protected
    //Property setters
    Procedure SetaccountId(AIndex : Integer; AValue : string); virtual;
    Procedure SetadvertiserId(AIndex : Integer; AValue : string); virtual;
    Procedure SetapproverUserProfileIds(AIndex : Integer; AValue : TOrderapproverUserProfileIds); virtual;
    Procedure SetbuyerInvoiceId(AIndex : Integer; AValue : string); virtual;
    Procedure SetbuyerOrganizationName(AIndex : Integer; AValue : string); virtual;
    Procedure Setcomments(AIndex : Integer; AValue : string); virtual;
    Procedure Setcontacts(AIndex : Integer; AValue : TOrdercontacts); virtual;
    Procedure Setid(AIndex : Integer; AValue : string); virtual;
    Procedure Setkind(AIndex : Integer; AValue : string); virtual;
    Procedure SetlastModifiedInfo(AIndex : Integer; AValue : TLastModifiedInfo); virtual;
    Procedure Setname(AIndex : Integer; AValue : string); virtual;
    Procedure Setnotes(AIndex : Integer; AValue : string); virtual;
    Procedure SetplanningTermId(AIndex : Integer; AValue : string); virtual;
    Procedure SetprojectId(AIndex : Integer; AValue : string); virtual;
    Procedure SetsellerOrderId(AIndex : Integer; AValue : string); virtual;
    Procedure SetsellerOrganizationName(AIndex : Integer; AValue : string); virtual;
    Procedure SetsiteId(AIndex : Integer; AValue : TOrdersiteId); virtual;
    Procedure SetsiteNames(AIndex : Integer; AValue : TOrdersiteNames); virtual;
    Procedure SetsubaccountId(AIndex : Integer; AValue : string); virtual;
    Procedure SettermsAndConditions(AIndex : Integer; AValue : string); virtual;
  Public
  Published
    Property accountId : string Index 0 Read FaccountId Write SetaccountId;
    Property advertiserId : string Index 8 Read FadvertiserId Write SetadvertiserId;
    Property approverUserProfileIds : TOrderapproverUserProfileIds Index 16 Read FapproverUserProfileIds Write SetapproverUserProfileIds;
    Property buyerInvoiceId : string Index 24 Read FbuyerInvoiceId Write SetbuyerInvoiceId;
    Property buyerOrganizationName : string Index 32 Read FbuyerOrganizationName Write SetbuyerOrganizationName;
    Property comments : string Index 40 Read Fcomments Write Setcomments;
    Property contacts : TOrdercontacts Index 48 Read Fcontacts Write Setcontacts;
    Property id : string Index 56 Read Fid Write Setid;
    Property kind : string Index 64 Read Fkind Write Setkind;
    Property lastModifiedInfo : TLastModifiedInfo Index 72 Read FlastModifiedInfo Write SetlastModifiedInfo;
    Property name : string Index 80 Read Fname Write Setname;
    Property notes : string Index 88 Read Fnotes Write Setnotes;
    Property planningTermId : string Index 96 Read FplanningTermId Write SetplanningTermId;
    Property projectId : string Index 104 Read FprojectId Write SetprojectId;
    Property sellerOrderId : string Index 112 Read FsellerOrderId Write SetsellerOrderId;
    Property sellerOrganizationName : string Index 120 Read FsellerOrganizationName Write SetsellerOrganizationName;
    Property siteId : TOrdersiteId Index 128 Read FsiteId Write SetsiteId;
    Property siteNames : TOrdersiteNames Index 136 Read FsiteNames Write SetsiteNames;
    Property subaccountId : string Index 144 Read FsubaccountId Write SetsubaccountId;
    Property termsAndConditions : string Index 152 Read FtermsAndConditions Write SettermsAndConditions;
  end;
  TOrderClass = Class of TOrder;
  
  { --------------------------------------------------------------------
    TOrderapproverUserProfileIds
    --------------------------------------------------------------------}
  
  TOrderapproverUserProfileIds = Class(TGoogleBaseObject)
  Private
  Protected
    //Property setters
  Public
  Published
  end;
  TOrderapproverUserProfileIdsClass = Class of TOrderapproverUserProfileIds;
  
  { --------------------------------------------------------------------
    TOrdercontacts
    --------------------------------------------------------------------}
  
  TOrdercontacts = Class(TGoogleBaseObject)
  Private
  Protected
    //Property setters
  Public
  Published
  end;
  TOrdercontactsClass = Class of TOrdercontacts;
  
  { --------------------------------------------------------------------
    TOrdersiteId
    --------------------------------------------------------------------}
  
  TOrdersiteId = Class(TGoogleBaseObject)
  Private
  Protected
    //Property setters
  Public
  Published
  end;
  TOrdersiteIdClass = Class of TOrdersiteId;
  
  { --------------------------------------------------------------------
    TOrdersiteNames
    --------------------------------------------------------------------}
  
  TOrdersiteNames = Class(TGoogleBaseObject)
  Private
  Protected
    //Property setters
  Public
  Published
  end;
  TOrdersiteNamesClass = Class of TOrdersiteNames;
  
  { --------------------------------------------------------------------
    TOrderContact
    --------------------------------------------------------------------}
  
  TOrderContact = Class(TGoogleBaseObject)
  Private
    FcontactInfo : string;
    FcontactName : string;
    FcontactTitle : string;
    FcontactType : string;
    FsignatureUserProfileId : string;
  Protected
    //Property setters
    Procedure SetcontactInfo(AIndex : Integer; AValue : string); virtual;
    Procedure SetcontactName(AIndex : Integer; AValue : string); virtual;
    Procedure SetcontactTitle(AIndex : Integer; AValue : string); virtual;
    Procedure SetcontactType(AIndex : Integer; AValue : string); virtual;
    Procedure SetsignatureUserProfileId(AIndex : Integer; AValue : string); virtual;
  Public
  Published
    Property contactInfo : string Index 0 Read FcontactInfo Write SetcontactInfo;
    Property contactName : string Index 8 Read FcontactName Write SetcontactName;
    Property contactTitle : string Index 16 Read FcontactTitle Write SetcontactTitle;
    Property contactType : string Index 24 Read FcontactType Write SetcontactType;
    Property signatureUserProfileId : string Index 32 Read FsignatureUserProfileId Write SetsignatureUserProfileId;
  end;
  TOrderContactClass = Class of TOrderContact;
  
  { --------------------------------------------------------------------
    TOrderDocument
    --------------------------------------------------------------------}
  
  TOrderDocument = Class(TGoogleBaseObject)
  Private
    FaccountId : string;
    FadvertiserId : string;
    FamendedOrderDocumentId : string;
    FapprovedByUserProfileIds : TOrderDocumentapprovedByUserProfileIds;
    Fcancelled : boolean;
    FcreatedInfo : TLastModifiedInfo;
    FeffectiveDate : TDate;
    Fid : string;
    Fkind : string;
    ForderId : string;
    FprojectId : string;
    Fsigned : boolean;
    FsubaccountId : string;
    Ftitle : string;
    F_type : string;
  Protected
    Class Function ExportPropertyName(Const AName : String) : string; override;
    //Property setters
    Procedure SetaccountId(AIndex : Integer; AValue : string); virtual;
    Procedure SetadvertiserId(AIndex : Integer; AValue : string); virtual;
    Procedure SetamendedOrderDocumentId(AIndex : Integer; AValue : string); virtual;
    Procedure SetapprovedByUserProfileIds(AIndex : Integer; AValue : TOrderDocumentapprovedByUserProfileIds); virtual;
    Procedure Setcancelled(AIndex : Integer; AValue : boolean); virtual;
    Procedure SetcreatedInfo(AIndex : Integer; AValue : TLastModifiedInfo); virtual;
    Procedure SeteffectiveDate(AIndex : Integer; AValue : TDate); virtual;
    Procedure Setid(AIndex : Integer; AValue : string); virtual;
    Procedure Setkind(AIndex : Integer; AValue : string); virtual;
    Procedure SetorderId(AIndex : Integer; AValue : string); virtual;
    Procedure SetprojectId(AIndex : Integer; AValue : string); virtual;
    Procedure Setsigned(AIndex : Integer; AValue : boolean); virtual;
    Procedure SetsubaccountId(AIndex : Integer; AValue : string); virtual;
    Procedure Settitle(AIndex : Integer; AValue : string); virtual;
    Procedure Set_type(AIndex : Integer; AValue : string); virtual;
  Public
  Published
    Property accountId : string Index 0 Read FaccountId Write SetaccountId;
    Property advertiserId : string Index 8 Read FadvertiserId Write SetadvertiserId;
    Property amendedOrderDocumentId : string Index 16 Read FamendedOrderDocumentId Write SetamendedOrderDocumentId;
    Property approvedByUserProfileIds : TOrderDocumentapprovedByUserProfileIds Index 24 Read FapprovedByUserProfileIds Write SetapprovedByUserProfileIds;
    Property cancelled : boolean Index 32 Read Fcancelled Write Setcancelled;
    Property createdInfo : TLastModifiedInfo Index 40 Read FcreatedInfo Write SetcreatedInfo;
    Property effectiveDate : TDate Index 48 Read FeffectiveDate Write SeteffectiveDate;
    Property id : string Index 56 Read Fid Write Setid;
    Property kind : string Index 64 Read Fkind Write Setkind;
    Property orderId : string Index 72 Read ForderId Write SetorderId;
    Property projectId : string Index 80 Read FprojectId Write SetprojectId;
    Property signed : boolean Index 88 Read Fsigned Write Setsigned;
    Property subaccountId : string Index 96 Read FsubaccountId Write SetsubaccountId;
    Property title : string Index 104 Read Ftitle Write Settitle;
    Property _type : string Index 112 Read F_type Write Set_type;
  end;
  TOrderDocumentClass = Class of TOrderDocument;
  
  { --------------------------------------------------------------------
    TOrderDocumentapprovedByUserProfileIds
    --------------------------------------------------------------------}
  
  TOrderDocumentapprovedByUserProfileIds = Class(TGoogleBaseObject)
  Private
  Protected
    //Property setters
  Public
  Published
  end;
  TOrderDocumentapprovedByUserProfileIdsClass = Class of TOrderDocumentapprovedByUserProfileIds;
  
  { --------------------------------------------------------------------
    TOrderDocumentsListResponse
    --------------------------------------------------------------------}
  
  TOrderDocumentsListResponse = Class(TGoogleBaseObject)
  Private
    Fkind : string;
    FnextPageToken : string;
    ForderDocuments : TOrderDocumentsListResponseorderDocuments;
  Protected
    //Property setters
    Procedure Setkind(AIndex : Integer; AValue : string); virtual;
    Procedure SetnextPageToken(AIndex : Integer; AValue : string); virtual;
    Procedure SetorderDocuments(AIndex : Integer; AValue : TOrderDocumentsListResponseorderDocuments); virtual;
  Public
  Published
    Property kind : string Index 0 Read Fkind Write Setkind;
    Property nextPageToken : string Index 8 Read FnextPageToken Write SetnextPageToken;
    Property orderDocuments : TOrderDocumentsListResponseorderDocuments Index 16 Read ForderDocuments Write SetorderDocuments;
  end;
  TOrderDocumentsListResponseClass = Class of TOrderDocumentsListResponse;
  
  { --------------------------------------------------------------------
    TOrderDocumentsListResponseorderDocuments
    --------------------------------------------------------------------}
  
  TOrderDocumentsListResponseorderDocuments = Class(TGoogleBaseObject)
  Private
  Protected
    //Property setters
  Public
  Published
  end;
  TOrderDocumentsListResponseorderDocumentsClass = Class of TOrderDocumentsListResponseorderDocuments;
  
  { --------------------------------------------------------------------
    TOrdersListResponse
    --------------------------------------------------------------------}
  
  TOrdersListResponse = Class(TGoogleBaseObject)
  Private
    Fkind : string;
    FnextPageToken : string;
    Forders : TOrdersListResponseorders;
  Protected
    //Property setters
    Procedure Setkind(AIndex : Integer; AValue : string); virtual;
    Procedure SetnextPageToken(AIndex : Integer; AValue : string); virtual;
    Procedure Setorders(AIndex : Integer; AValue : TOrdersListResponseorders); virtual;
  Public
  Published
    Property kind : string Index 0 Read Fkind Write Setkind;
    Property nextPageToken : string Index 8 Read FnextPageToken Write SetnextPageToken;
    Property orders : TOrdersListResponseorders Index 16 Read Forders Write Setorders;
  end;
  TOrdersListResponseClass = Class of TOrdersListResponse;
  
  { --------------------------------------------------------------------
    TOrdersListResponseorders
    --------------------------------------------------------------------}
  
  TOrdersListResponseorders = Class(TGoogleBaseObject)
  Private
  Protected
    //Property setters
  Public
  Published
  end;
  TOrdersListResponseordersClass = Class of TOrdersListResponseorders;
  
  { --------------------------------------------------------------------
    TPathToConversionReportCompatibleFields
    --------------------------------------------------------------------}
  
  TPathToConversionReportCompatibleFields = Class(TGoogleBaseObject)
  Private
    FconversionDimensions : TPathToConversionReportCompatibleFieldsconversionDimensions;
    FcustomFloodlightVariables : TPathToConversionReportCompatibleFieldscustomFloodlightVariables;
    Fkind : string;
    Fmetrics : TPathToConversionReportCompatibleFieldsmetrics;
    FperInteractionDimensions : TPathToConversionReportCompatibleFieldsperInteractionDimensions;
  Protected
    //Property setters
    Procedure SetconversionDimensions(AIndex : Integer; AValue : TPathToConversionReportCompatibleFieldsconversionDimensions); virtual;
    Procedure SetcustomFloodlightVariables(AIndex : Integer; AValue : TPathToConversionReportCompatibleFieldscustomFloodlightVariables); virtual;
    Procedure Setkind(AIndex : Integer; AValue : string); virtual;
    Procedure Setmetrics(AIndex : Integer; AValue : TPathToConversionReportCompatibleFieldsmetrics); virtual;
    Procedure SetperInteractionDimensions(AIndex : Integer; AValue : TPathToConversionReportCompatibleFieldsperInteractionDimensions); virtual;
  Public
  Published
    Property conversionDimensions : TPathToConversionReportCompatibleFieldsconversionDimensions Index 0 Read FconversionDimensions Write SetconversionDimensions;
    Property customFloodlightVariables : TPathToConversionReportCompatibleFieldscustomFloodlightVariables Index 8 Read FcustomFloodlightVariables Write SetcustomFloodlightVariables;
    Property kind : string Index 16 Read Fkind Write Setkind;
    Property metrics : TPathToConversionReportCompatibleFieldsmetrics Index 24 Read Fmetrics Write Setmetrics;
    Property perInteractionDimensions : TPathToConversionReportCompatibleFieldsperInteractionDimensions Index 32 Read FperInteractionDimensions Write SetperInteractionDimensions;
  end;
  TPathToConversionReportCompatibleFieldsClass = Class of TPathToConversionReportCompatibleFields;
  
  { --------------------------------------------------------------------
    TPathToConversionReportCompatibleFieldsconversionDimensions
    --------------------------------------------------------------------}
  
  TPathToConversionReportCompatibleFieldsconversionDimensions = Class(TGoogleBaseObject)
  Private
  Protected
    //Property setters
  Public
  Published
  end;
  TPathToConversionReportCompatibleFieldsconversionDimensionsClass = Class of TPathToConversionReportCompatibleFieldsconversionDimensions;
  
  { --------------------------------------------------------------------
    TPathToConversionReportCompatibleFieldscustomFloodlightVariables
    --------------------------------------------------------------------}
  
  TPathToConversionReportCompatibleFieldscustomFloodlightVariables = Class(TGoogleBaseObject)
  Private
  Protected
    //Property setters
  Public
  Published
  end;
  TPathToConversionReportCompatibleFieldscustomFloodlightVariablesClass = Class of TPathToConversionReportCompatibleFieldscustomFloodlightVariables;
  
  { --------------------------------------------------------------------
    TPathToConversionReportCompatibleFieldsmetrics
    --------------------------------------------------------------------}
  
  TPathToConversionReportCompatibleFieldsmetrics = Class(TGoogleBaseObject)
  Private
  Protected
    //Property setters
  Public
  Published
  end;
  TPathToConversionReportCompatibleFieldsmetricsClass = Class of TPathToConversionReportCompatibleFieldsmetrics;
  
  { --------------------------------------------------------------------
    TPathToConversionReportCompatibleFieldsperInteractionDimensions
    --------------------------------------------------------------------}
  
  TPathToConversionReportCompatibleFieldsperInteractionDimensions = Class(TGoogleBaseObject)
  Private
  Protected
    //Property setters
  Public
  Published
  end;
  TPathToConversionReportCompatibleFieldsperInteractionDimensionsClass = Class of TPathToConversionReportCompatibleFieldsperInteractionDimensions;
  
  { --------------------------------------------------------------------
    TPlacement
    --------------------------------------------------------------------}
  
  TPlacement = Class(TGoogleBaseObject)
  Private
    FaccountId : string;
    FadvertiserId : string;
    FadvertiserIdDimensionValue : TDimensionValue;
    Farchived : boolean;
    FcampaignId : string;
    FcampaignIdDimensionValue : TDimensionValue;
    Fcomment : string;
    Fcompatibility : string;
    FcontentCategoryId : string;
    FcreateInfo : TLastModifiedInfo;
    FdirectorySiteId : string;
    FdirectorySiteIdDimensionValue : TDimensionValue;
    FexternalId : string;
    Fid : string;
    FidDimensionValue : TDimensionValue;
    FkeyName : string;
    Fkind : string;
    FlastModifiedInfo : TLastModifiedInfo;
    FlookbackConfiguration : TLookbackConfiguration;
    Fname : string;
    FpaymentApproved : boolean;
    FpaymentSource : string;
    FplacementGroupId : string;
    FplacementGroupIdDimensionValue : TDimensionValue;
    FplacementStrategyId : string;
    FpricingSchedule : TPricingSchedule;
    Fprimary : boolean;
    FpublisherUpdateInfo : TLastModifiedInfo;
    FsiteId : string;
    FsiteIdDimensionValue : TDimensionValue;
    Fsize : TSize;
    FsslRequired : boolean;
    Fstatus : string;
    FsubaccountId : string;
    FtagFormats : TPlacementtagFormats;
    FtagSetting : TTagSetting;
  Protected
    //Property setters
    Procedure SetaccountId(AIndex : Integer; AValue : string); virtual;
    Procedure SetadvertiserId(AIndex : Integer; AValue : string); virtual;
    Procedure SetadvertiserIdDimensionValue(AIndex : Integer; AValue : TDimensionValue); virtual;
    Procedure Setarchived(AIndex : Integer; AValue : boolean); virtual;
    Procedure SetcampaignId(AIndex : Integer; AValue : string); virtual;
    Procedure SetcampaignIdDimensionValue(AIndex : Integer; AValue : TDimensionValue); virtual;
    Procedure Setcomment(AIndex : Integer; AValue : string); virtual;
    Procedure Setcompatibility(AIndex : Integer; AValue : string); virtual;
    Procedure SetcontentCategoryId(AIndex : Integer; AValue : string); virtual;
    Procedure SetcreateInfo(AIndex : Integer; AValue : TLastModifiedInfo); virtual;
    Procedure SetdirectorySiteId(AIndex : Integer; AValue : string); virtual;
    Procedure SetdirectorySiteIdDimensionValue(AIndex : Integer; AValue : TDimensionValue); virtual;
    Procedure SetexternalId(AIndex : Integer; AValue : string); virtual;
    Procedure Setid(AIndex : Integer; AValue : string); virtual;
    Procedure SetidDimensionValue(AIndex : Integer; AValue : TDimensionValue); virtual;
    Procedure SetkeyName(AIndex : Integer; AValue : string); virtual;
    Procedure Setkind(AIndex : Integer; AValue : string); virtual;
    Procedure SetlastModifiedInfo(AIndex : Integer; AValue : TLastModifiedInfo); virtual;
    Procedure SetlookbackConfiguration(AIndex : Integer; AValue : TLookbackConfiguration); virtual;
    Procedure Setname(AIndex : Integer; AValue : string); virtual;
    Procedure SetpaymentApproved(AIndex : Integer; AValue : boolean); virtual;
    Procedure SetpaymentSource(AIndex : Integer; AValue : string); virtual;
    Procedure SetplacementGroupId(AIndex : Integer; AValue : string); virtual;
    Procedure SetplacementGroupIdDimensionValue(AIndex : Integer; AValue : TDimensionValue); virtual;
    Procedure SetplacementStrategyId(AIndex : Integer; AValue : string); virtual;
    Procedure SetpricingSchedule(AIndex : Integer; AValue : TPricingSchedule); virtual;
    Procedure Setprimary(AIndex : Integer; AValue : boolean); virtual;
    Procedure SetpublisherUpdateInfo(AIndex : Integer; AValue : TLastModifiedInfo); virtual;
    Procedure SetsiteId(AIndex : Integer; AValue : string); virtual;
    Procedure SetsiteIdDimensionValue(AIndex : Integer; AValue : TDimensionValue); virtual;
    Procedure Setsize(AIndex : Integer; AValue : TSize); virtual;
    Procedure SetsslRequired(AIndex : Integer; AValue : boolean); virtual;
    Procedure Setstatus(AIndex : Integer; AValue : string); virtual;
    Procedure SetsubaccountId(AIndex : Integer; AValue : string); virtual;
    Procedure SettagFormats(AIndex : Integer; AValue : TPlacementtagFormats); virtual;
    Procedure SettagSetting(AIndex : Integer; AValue : TTagSetting); virtual;
  Public
  Published
    Property accountId : string Index 0 Read FaccountId Write SetaccountId;
    Property advertiserId : string Index 8 Read FadvertiserId Write SetadvertiserId;
    Property advertiserIdDimensionValue : TDimensionValue Index 16 Read FadvertiserIdDimensionValue Write SetadvertiserIdDimensionValue;
    Property archived : boolean Index 24 Read Farchived Write Setarchived;
    Property campaignId : string Index 32 Read FcampaignId Write SetcampaignId;
    Property campaignIdDimensionValue : TDimensionValue Index 40 Read FcampaignIdDimensionValue Write SetcampaignIdDimensionValue;
    Property comment : string Index 48 Read Fcomment Write Setcomment;
    Property compatibility : string Index 56 Read Fcompatibility Write Setcompatibility;
    Property contentCategoryId : string Index 64 Read FcontentCategoryId Write SetcontentCategoryId;
    Property createInfo : TLastModifiedInfo Index 72 Read FcreateInfo Write SetcreateInfo;
    Property directorySiteId : string Index 80 Read FdirectorySiteId Write SetdirectorySiteId;
    Property directorySiteIdDimensionValue : TDimensionValue Index 88 Read FdirectorySiteIdDimensionValue Write SetdirectorySiteIdDimensionValue;
    Property externalId : string Index 96 Read FexternalId Write SetexternalId;
    Property id : string Index 104 Read Fid Write Setid;
    Property idDimensionValue : TDimensionValue Index 112 Read FidDimensionValue Write SetidDimensionValue;
    Property keyName : string Index 120 Read FkeyName Write SetkeyName;
    Property kind : string Index 128 Read Fkind Write Setkind;
    Property lastModifiedInfo : TLastModifiedInfo Index 136 Read FlastModifiedInfo Write SetlastModifiedInfo;
    Property lookbackConfiguration : TLookbackConfiguration Index 144 Read FlookbackConfiguration Write SetlookbackConfiguration;
    Property name : string Index 152 Read Fname Write Setname;
    Property paymentApproved : boolean Index 160 Read FpaymentApproved Write SetpaymentApproved;
    Property paymentSource : string Index 168 Read FpaymentSource Write SetpaymentSource;
    Property placementGroupId : string Index 176 Read FplacementGroupId Write SetplacementGroupId;
    Property placementGroupIdDimensionValue : TDimensionValue Index 184 Read FplacementGroupIdDimensionValue Write SetplacementGroupIdDimensionValue;
    Property placementStrategyId : string Index 192 Read FplacementStrategyId Write SetplacementStrategyId;
    Property pricingSchedule : TPricingSchedule Index 200 Read FpricingSchedule Write SetpricingSchedule;
    Property primary : boolean Index 208 Read Fprimary Write Setprimary;
    Property publisherUpdateInfo : TLastModifiedInfo Index 216 Read FpublisherUpdateInfo Write SetpublisherUpdateInfo;
    Property siteId : string Index 224 Read FsiteId Write SetsiteId;
    Property siteIdDimensionValue : TDimensionValue Index 232 Read FsiteIdDimensionValue Write SetsiteIdDimensionValue;
    Property size : TSize Index 240 Read Fsize Write Setsize;
    Property sslRequired : boolean Index 248 Read FsslRequired Write SetsslRequired;
    Property status : string Index 256 Read Fstatus Write Setstatus;
    Property subaccountId : string Index 264 Read FsubaccountId Write SetsubaccountId;
    Property tagFormats : TPlacementtagFormats Index 272 Read FtagFormats Write SettagFormats;
    Property tagSetting : TTagSetting Index 280 Read FtagSetting Write SettagSetting;
  end;
  TPlacementClass = Class of TPlacement;
  
  { --------------------------------------------------------------------
    TPlacementtagFormats
    --------------------------------------------------------------------}
  
  TPlacementtagFormats = Class(TGoogleBaseObject)
  Private
  Protected
    //Property setters
  Public
  Published
  end;
  TPlacementtagFormatsClass = Class of TPlacementtagFormats;
  
  { --------------------------------------------------------------------
    TPlacementAssignment
    --------------------------------------------------------------------}
  
  TPlacementAssignment = Class(TGoogleBaseObject)
  Private
    Factive : boolean;
    FplacementId : string;
    FplacementIdDimensionValue : TDimensionValue;
    FsslRequired : boolean;
  Protected
    //Property setters
    Procedure Setactive(AIndex : Integer; AValue : boolean); virtual;
    Procedure SetplacementId(AIndex : Integer; AValue : string); virtual;
    Procedure SetplacementIdDimensionValue(AIndex : Integer; AValue : TDimensionValue); virtual;
    Procedure SetsslRequired(AIndex : Integer; AValue : boolean); virtual;
  Public
  Published
    Property active : boolean Index 0 Read Factive Write Setactive;
    Property placementId : string Index 8 Read FplacementId Write SetplacementId;
    Property placementIdDimensionValue : TDimensionValue Index 16 Read FplacementIdDimensionValue Write SetplacementIdDimensionValue;
    Property sslRequired : boolean Index 24 Read FsslRequired Write SetsslRequired;
  end;
  TPlacementAssignmentClass = Class of TPlacementAssignment;
  
  { --------------------------------------------------------------------
    TPlacementGroup
    --------------------------------------------------------------------}
  
  TPlacementGroup = Class(TGoogleBaseObject)
  Private
    FaccountId : string;
    FadvertiserId : string;
    FadvertiserIdDimensionValue : TDimensionValue;
    Farchived : boolean;
    FcampaignId : string;
    FcampaignIdDimensionValue : TDimensionValue;
    FchildPlacementIds : TPlacementGroupchildPlacementIds;
    Fcomment : string;
    FcontentCategoryId : string;
    FcreateInfo : TLastModifiedInfo;
    FdirectorySiteId : string;
    FdirectorySiteIdDimensionValue : TDimensionValue;
    FexternalId : string;
    Fid : string;
    FidDimensionValue : TDimensionValue;
    Fkind : string;
    FlastModifiedInfo : TLastModifiedInfo;
    Fname : string;
    FplacementGroupType : string;
    FplacementStrategyId : string;
    FpricingSchedule : TPricingSchedule;
    FprimaryPlacementId : string;
    FprimaryPlacementIdDimensionValue : TDimensionValue;
    FprogrammaticSetting : TProgrammaticSetting;
    FsiteId : string;
    FsiteIdDimensionValue : TDimensionValue;
    FsubaccountId : string;
  Protected
    //Property setters
    Procedure SetaccountId(AIndex : Integer; AValue : string); virtual;
    Procedure SetadvertiserId(AIndex : Integer; AValue : string); virtual;
    Procedure SetadvertiserIdDimensionValue(AIndex : Integer; AValue : TDimensionValue); virtual;
    Procedure Setarchived(AIndex : Integer; AValue : boolean); virtual;
    Procedure SetcampaignId(AIndex : Integer; AValue : string); virtual;
    Procedure SetcampaignIdDimensionValue(AIndex : Integer; AValue : TDimensionValue); virtual;
    Procedure SetchildPlacementIds(AIndex : Integer; AValue : TPlacementGroupchildPlacementIds); virtual;
    Procedure Setcomment(AIndex : Integer; AValue : string); virtual;
    Procedure SetcontentCategoryId(AIndex : Integer; AValue : string); virtual;
    Procedure SetcreateInfo(AIndex : Integer; AValue : TLastModifiedInfo); virtual;
    Procedure SetdirectorySiteId(AIndex : Integer; AValue : string); virtual;
    Procedure SetdirectorySiteIdDimensionValue(AIndex : Integer; AValue : TDimensionValue); virtual;
    Procedure SetexternalId(AIndex : Integer; AValue : string); virtual;
    Procedure Setid(AIndex : Integer; AValue : string); virtual;
    Procedure SetidDimensionValue(AIndex : Integer; AValue : TDimensionValue); virtual;
    Procedure Setkind(AIndex : Integer; AValue : string); virtual;
    Procedure SetlastModifiedInfo(AIndex : Integer; AValue : TLastModifiedInfo); virtual;
    Procedure Setname(AIndex : Integer; AValue : string); virtual;
    Procedure SetplacementGroupType(AIndex : Integer; AValue : string); virtual;
    Procedure SetplacementStrategyId(AIndex : Integer; AValue : string); virtual;
    Procedure SetpricingSchedule(AIndex : Integer; AValue : TPricingSchedule); virtual;
    Procedure SetprimaryPlacementId(AIndex : Integer; AValue : string); virtual;
    Procedure SetprimaryPlacementIdDimensionValue(AIndex : Integer; AValue : TDimensionValue); virtual;
    Procedure SetprogrammaticSetting(AIndex : Integer; AValue : TProgrammaticSetting); virtual;
    Procedure SetsiteId(AIndex : Integer; AValue : string); virtual;
    Procedure SetsiteIdDimensionValue(AIndex : Integer; AValue : TDimensionValue); virtual;
    Procedure SetsubaccountId(AIndex : Integer; AValue : string); virtual;
  Public
  Published
    Property accountId : string Index 0 Read FaccountId Write SetaccountId;
    Property advertiserId : string Index 8 Read FadvertiserId Write SetadvertiserId;
    Property advertiserIdDimensionValue : TDimensionValue Index 16 Read FadvertiserIdDimensionValue Write SetadvertiserIdDimensionValue;
    Property archived : boolean Index 24 Read Farchived Write Setarchived;
    Property campaignId : string Index 32 Read FcampaignId Write SetcampaignId;
    Property campaignIdDimensionValue : TDimensionValue Index 40 Read FcampaignIdDimensionValue Write SetcampaignIdDimensionValue;
    Property childPlacementIds : TPlacementGroupchildPlacementIds Index 48 Read FchildPlacementIds Write SetchildPlacementIds;
    Property comment : string Index 56 Read Fcomment Write Setcomment;
    Property contentCategoryId : string Index 64 Read FcontentCategoryId Write SetcontentCategoryId;
    Property createInfo : TLastModifiedInfo Index 72 Read FcreateInfo Write SetcreateInfo;
    Property directorySiteId : string Index 80 Read FdirectorySiteId Write SetdirectorySiteId;
    Property directorySiteIdDimensionValue : TDimensionValue Index 88 Read FdirectorySiteIdDimensionValue Write SetdirectorySiteIdDimensionValue;
    Property externalId : string Index 96 Read FexternalId Write SetexternalId;
    Property id : string Index 104 Read Fid Write Setid;
    Property idDimensionValue : TDimensionValue Index 112 Read FidDimensionValue Write SetidDimensionValue;
    Property kind : string Index 120 Read Fkind Write Setkind;
    Property lastModifiedInfo : TLastModifiedInfo Index 128 Read FlastModifiedInfo Write SetlastModifiedInfo;
    Property name : string Index 136 Read Fname Write Setname;
    Property placementGroupType : string Index 144 Read FplacementGroupType Write SetplacementGroupType;
    Property placementStrategyId : string Index 152 Read FplacementStrategyId Write SetplacementStrategyId;
    Property pricingSchedule : TPricingSchedule Index 160 Read FpricingSchedule Write SetpricingSchedule;
    Property primaryPlacementId : string Index 168 Read FprimaryPlacementId Write SetprimaryPlacementId;
    Property primaryPlacementIdDimensionValue : TDimensionValue Index 176 Read FprimaryPlacementIdDimensionValue Write SetprimaryPlacementIdDimensionValue;
    Property programmaticSetting : TProgrammaticSetting Index 184 Read FprogrammaticSetting Write SetprogrammaticSetting;
    Property siteId : string Index 192 Read FsiteId Write SetsiteId;
    Property siteIdDimensionValue : TDimensionValue Index 200 Read FsiteIdDimensionValue Write SetsiteIdDimensionValue;
    Property subaccountId : string Index 208 Read FsubaccountId Write SetsubaccountId;
  end;
  TPlacementGroupClass = Class of TPlacementGroup;
  
  { --------------------------------------------------------------------
    TPlacementGroupchildPlacementIds
    --------------------------------------------------------------------}
  
  TPlacementGroupchildPlacementIds = Class(TGoogleBaseObject)
  Private
  Protected
    //Property setters
  Public
  Published
  end;
  TPlacementGroupchildPlacementIdsClass = Class of TPlacementGroupchildPlacementIds;
  
  { --------------------------------------------------------------------
    TPlacementGroupsListResponse
    --------------------------------------------------------------------}
  
  TPlacementGroupsListResponse = Class(TGoogleBaseObject)
  Private
    Fkind : string;
    FnextPageToken : string;
    FplacementGroups : TPlacementGroupsListResponseplacementGroups;
  Protected
    //Property setters
    Procedure Setkind(AIndex : Integer; AValue : string); virtual;
    Procedure SetnextPageToken(AIndex : Integer; AValue : string); virtual;
    Procedure SetplacementGroups(AIndex : Integer; AValue : TPlacementGroupsListResponseplacementGroups); virtual;
  Public
  Published
    Property kind : string Index 0 Read Fkind Write Setkind;
    Property nextPageToken : string Index 8 Read FnextPageToken Write SetnextPageToken;
    Property placementGroups : TPlacementGroupsListResponseplacementGroups Index 16 Read FplacementGroups Write SetplacementGroups;
  end;
  TPlacementGroupsListResponseClass = Class of TPlacementGroupsListResponse;
  
  { --------------------------------------------------------------------
    TPlacementGroupsListResponseplacementGroups
    --------------------------------------------------------------------}
  
  TPlacementGroupsListResponseplacementGroups = Class(TGoogleBaseObject)
  Private
  Protected
    //Property setters
  Public
  Published
  end;
  TPlacementGroupsListResponseplacementGroupsClass = Class of TPlacementGroupsListResponseplacementGroups;
  
  { --------------------------------------------------------------------
    TPlacementStrategiesListResponse
    --------------------------------------------------------------------}
  
  TPlacementStrategiesListResponse = Class(TGoogleBaseObject)
  Private
    Fkind : string;
    FnextPageToken : string;
    FplacementStrategies : TPlacementStrategiesListResponseplacementStrategies;
  Protected
    //Property setters
    Procedure Setkind(AIndex : Integer; AValue : string); virtual;
    Procedure SetnextPageToken(AIndex : Integer; AValue : string); virtual;
    Procedure SetplacementStrategies(AIndex : Integer; AValue : TPlacementStrategiesListResponseplacementStrategies); virtual;
  Public
  Published
    Property kind : string Index 0 Read Fkind Write Setkind;
    Property nextPageToken : string Index 8 Read FnextPageToken Write SetnextPageToken;
    Property placementStrategies : TPlacementStrategiesListResponseplacementStrategies Index 16 Read FplacementStrategies Write SetplacementStrategies;
  end;
  TPlacementStrategiesListResponseClass = Class of TPlacementStrategiesListResponse;
  
  { --------------------------------------------------------------------
    TPlacementStrategiesListResponseplacementStrategies
    --------------------------------------------------------------------}
  
  TPlacementStrategiesListResponseplacementStrategies = Class(TGoogleBaseObject)
  Private
  Protected
    //Property setters
  Public
  Published
  end;
  TPlacementStrategiesListResponseplacementStrategiesClass = Class of TPlacementStrategiesListResponseplacementStrategies;
  
  { --------------------------------------------------------------------
    TPlacementStrategy
    --------------------------------------------------------------------}
  
  TPlacementStrategy = Class(TGoogleBaseObject)
  Private
    FaccountId : string;
    Fid : string;
    Fkind : string;
    Fname : string;
  Protected
    //Property setters
    Procedure SetaccountId(AIndex : Integer; AValue : string); virtual;
    Procedure Setid(AIndex : Integer; AValue : string); virtual;
    Procedure Setkind(AIndex : Integer; AValue : string); virtual;
    Procedure Setname(AIndex : Integer; AValue : string); virtual;
  Public
  Published
    Property accountId : string Index 0 Read FaccountId Write SetaccountId;
    Property id : string Index 8 Read Fid Write Setid;
    Property kind : string Index 16 Read Fkind Write Setkind;
    Property name : string Index 24 Read Fname Write Setname;
  end;
  TPlacementStrategyClass = Class of TPlacementStrategy;
  
  { --------------------------------------------------------------------
    TPlacementTag
    --------------------------------------------------------------------}
  
  TPlacementTag = Class(TGoogleBaseObject)
  Private
    FplacementId : string;
    FtagDatas : TPlacementTagtagDatas;
  Protected
    //Property setters
    Procedure SetplacementId(AIndex : Integer; AValue : string); virtual;
    Procedure SettagDatas(AIndex : Integer; AValue : TPlacementTagtagDatas); virtual;
  Public
  Published
    Property placementId : string Index 0 Read FplacementId Write SetplacementId;
    Property tagDatas : TPlacementTagtagDatas Index 8 Read FtagDatas Write SettagDatas;
  end;
  TPlacementTagClass = Class of TPlacementTag;
  
  { --------------------------------------------------------------------
    TPlacementTagtagDatas
    --------------------------------------------------------------------}
  
  TPlacementTagtagDatas = Class(TGoogleBaseObject)
  Private
  Protected
    //Property setters
  Public
  Published
  end;
  TPlacementTagtagDatasClass = Class of TPlacementTagtagDatas;
  
  { --------------------------------------------------------------------
    TPlacementsGenerateTagsResponse
    --------------------------------------------------------------------}
  
  TPlacementsGenerateTagsResponse = Class(TGoogleBaseObject)
  Private
    Fkind : string;
    FplacementTags : TPlacementsGenerateTagsResponseplacementTags;
  Protected
    //Property setters
    Procedure Setkind(AIndex : Integer; AValue : string); virtual;
    Procedure SetplacementTags(AIndex : Integer; AValue : TPlacementsGenerateTagsResponseplacementTags); virtual;
  Public
  Published
    Property kind : string Index 0 Read Fkind Write Setkind;
    Property placementTags : TPlacementsGenerateTagsResponseplacementTags Index 8 Read FplacementTags Write SetplacementTags;
  end;
  TPlacementsGenerateTagsResponseClass = Class of TPlacementsGenerateTagsResponse;
  
  { --------------------------------------------------------------------
    TPlacementsGenerateTagsResponseplacementTags
    --------------------------------------------------------------------}
  
  TPlacementsGenerateTagsResponseplacementTags = Class(TGoogleBaseObject)
  Private
  Protected
    //Property setters
  Public
  Published
  end;
  TPlacementsGenerateTagsResponseplacementTagsClass = Class of TPlacementsGenerateTagsResponseplacementTags;
  
  { --------------------------------------------------------------------
    TPlacementsListResponse
    --------------------------------------------------------------------}
  
  TPlacementsListResponse = Class(TGoogleBaseObject)
  Private
    Fkind : string;
    FnextPageToken : string;
    Fplacements : TPlacementsListResponseplacements;
  Protected
    //Property setters
    Procedure Setkind(AIndex : Integer; AValue : string); virtual;
    Procedure SetnextPageToken(AIndex : Integer; AValue : string); virtual;
    Procedure Setplacements(AIndex : Integer; AValue : TPlacementsListResponseplacements); virtual;
  Public
  Published
    Property kind : string Index 0 Read Fkind Write Setkind;
    Property nextPageToken : string Index 8 Read FnextPageToken Write SetnextPageToken;
    Property placements : TPlacementsListResponseplacements Index 16 Read Fplacements Write Setplacements;
  end;
  TPlacementsListResponseClass = Class of TPlacementsListResponse;
  
  { --------------------------------------------------------------------
    TPlacementsListResponseplacements
    --------------------------------------------------------------------}
  
  TPlacementsListResponseplacements = Class(TGoogleBaseObject)
  Private
  Protected
    //Property setters
  Public
  Published
  end;
  TPlacementsListResponseplacementsClass = Class of TPlacementsListResponseplacements;
  
  { --------------------------------------------------------------------
    TPlatformType
    --------------------------------------------------------------------}
  
  TPlatformType = Class(TGoogleBaseObject)
  Private
    Fid : string;
    Fkind : string;
    Fname : string;
  Protected
    //Property setters
    Procedure Setid(AIndex : Integer; AValue : string); virtual;
    Procedure Setkind(AIndex : Integer; AValue : string); virtual;
    Procedure Setname(AIndex : Integer; AValue : string); virtual;
  Public
  Published
    Property id : string Index 0 Read Fid Write Setid;
    Property kind : string Index 8 Read Fkind Write Setkind;
    Property name : string Index 16 Read Fname Write Setname;
  end;
  TPlatformTypeClass = Class of TPlatformType;
  
  { --------------------------------------------------------------------
    TPlatformTypesListResponse
    --------------------------------------------------------------------}
  
  TPlatformTypesListResponse = Class(TGoogleBaseObject)
  Private
    Fkind : string;
    FplatformTypes : TPlatformTypesListResponseplatformTypes;
  Protected
    //Property setters
    Procedure Setkind(AIndex : Integer; AValue : string); virtual;
    Procedure SetplatformTypes(AIndex : Integer; AValue : TPlatformTypesListResponseplatformTypes); virtual;
  Public
  Published
    Property kind : string Index 0 Read Fkind Write Setkind;
    Property platformTypes : TPlatformTypesListResponseplatformTypes Index 8 Read FplatformTypes Write SetplatformTypes;
  end;
  TPlatformTypesListResponseClass = Class of TPlatformTypesListResponse;
  
  { --------------------------------------------------------------------
    TPlatformTypesListResponseplatformTypes
    --------------------------------------------------------------------}
  
  TPlatformTypesListResponseplatformTypes = Class(TGoogleBaseObject)
  Private
  Protected
    //Property setters
  Public
  Published
  end;
  TPlatformTypesListResponseplatformTypesClass = Class of TPlatformTypesListResponseplatformTypes;
  
  { --------------------------------------------------------------------
    TPopupWindowProperties
    --------------------------------------------------------------------}
  
  TPopupWindowProperties = Class(TGoogleBaseObject)
  Private
    Fdimension : TSize;
    Foffset : TOffsetPosition;
    FpositionType : string;
    FshowAddressBar : boolean;
    FshowMenuBar : boolean;
    FshowScrollBar : boolean;
    FshowStatusBar : boolean;
    FshowToolBar : boolean;
    Ftitle : string;
  Protected
    //Property setters
    Procedure Setdimension(AIndex : Integer; AValue : TSize); virtual;
    Procedure Setoffset(AIndex : Integer; AValue : TOffsetPosition); virtual;
    Procedure SetpositionType(AIndex : Integer; AValue : string); virtual;
    Procedure SetshowAddressBar(AIndex : Integer; AValue : boolean); virtual;
    Procedure SetshowMenuBar(AIndex : Integer; AValue : boolean); virtual;
    Procedure SetshowScrollBar(AIndex : Integer; AValue : boolean); virtual;
    Procedure SetshowStatusBar(AIndex : Integer; AValue : boolean); virtual;
    Procedure SetshowToolBar(AIndex : Integer; AValue : boolean); virtual;
    Procedure Settitle(AIndex : Integer; AValue : string); virtual;
  Public
  Published
    Property dimension : TSize Index 0 Read Fdimension Write Setdimension;
    Property offset : TOffsetPosition Index 8 Read Foffset Write Setoffset;
    Property positionType : string Index 16 Read FpositionType Write SetpositionType;
    Property showAddressBar : boolean Index 24 Read FshowAddressBar Write SetshowAddressBar;
    Property showMenuBar : boolean Index 32 Read FshowMenuBar Write SetshowMenuBar;
    Property showScrollBar : boolean Index 40 Read FshowScrollBar Write SetshowScrollBar;
    Property showStatusBar : boolean Index 48 Read FshowStatusBar Write SetshowStatusBar;
    Property showToolBar : boolean Index 56 Read FshowToolBar Write SetshowToolBar;
    Property title : string Index 64 Read Ftitle Write Settitle;
  end;
  TPopupWindowPropertiesClass = Class of TPopupWindowProperties;
  
  { --------------------------------------------------------------------
    TPostalCode
    --------------------------------------------------------------------}
  
  TPostalCode = Class(TGoogleBaseObject)
  Private
    Fcode : string;
    FcountryCode : string;
    FcountryDartId : string;
    Fid : string;
    Fkind : string;
  Protected
    //Property setters
    Procedure Setcode(AIndex : Integer; AValue : string); virtual;
    Procedure SetcountryCode(AIndex : Integer; AValue : string); virtual;
    Procedure SetcountryDartId(AIndex : Integer; AValue : string); virtual;
    Procedure Setid(AIndex : Integer; AValue : string); virtual;
    Procedure Setkind(AIndex : Integer; AValue : string); virtual;
  Public
  Published
    Property code : string Index 0 Read Fcode Write Setcode;
    Property countryCode : string Index 8 Read FcountryCode Write SetcountryCode;
    Property countryDartId : string Index 16 Read FcountryDartId Write SetcountryDartId;
    Property id : string Index 24 Read Fid Write Setid;
    Property kind : string Index 32 Read Fkind Write Setkind;
  end;
  TPostalCodeClass = Class of TPostalCode;
  
  { --------------------------------------------------------------------
    TPostalCodesListResponse
    --------------------------------------------------------------------}
  
  TPostalCodesListResponse = Class(TGoogleBaseObject)
  Private
    Fkind : string;
    FpostalCodes : TPostalCodesListResponsepostalCodes;
  Protected
    //Property setters
    Procedure Setkind(AIndex : Integer; AValue : string); virtual;
    Procedure SetpostalCodes(AIndex : Integer; AValue : TPostalCodesListResponsepostalCodes); virtual;
  Public
  Published
    Property kind : string Index 0 Read Fkind Write Setkind;
    Property postalCodes : TPostalCodesListResponsepostalCodes Index 8 Read FpostalCodes Write SetpostalCodes;
  end;
  TPostalCodesListResponseClass = Class of TPostalCodesListResponse;
  
  { --------------------------------------------------------------------
    TPostalCodesListResponsepostalCodes
    --------------------------------------------------------------------}
  
  TPostalCodesListResponsepostalCodes = Class(TGoogleBaseObject)
  Private
  Protected
    //Property setters
  Public
  Published
  end;
  TPostalCodesListResponsepostalCodesClass = Class of TPostalCodesListResponsepostalCodes;
  
  { --------------------------------------------------------------------
    TPricing
    --------------------------------------------------------------------}
  
  TPricing = Class(TGoogleBaseObject)
  Private
    FcapCostType : string;
    FendDate : TDate;
    Fflights : TPricingflights;
    FgroupType : string;
    FpricingType : string;
    FstartDate : TDate;
  Protected
    //Property setters
    Procedure SetcapCostType(AIndex : Integer; AValue : string); virtual;
    Procedure SetendDate(AIndex : Integer; AValue : TDate); virtual;
    Procedure Setflights(AIndex : Integer; AValue : TPricingflights); virtual;
    Procedure SetgroupType(AIndex : Integer; AValue : string); virtual;
    Procedure SetpricingType(AIndex : Integer; AValue : string); virtual;
    Procedure SetstartDate(AIndex : Integer; AValue : TDate); virtual;
  Public
  Published
    Property capCostType : string Index 0 Read FcapCostType Write SetcapCostType;
    Property endDate : TDate Index 8 Read FendDate Write SetendDate;
    Property flights : TPricingflights Index 16 Read Fflights Write Setflights;
    Property groupType : string Index 24 Read FgroupType Write SetgroupType;
    Property pricingType : string Index 32 Read FpricingType Write SetpricingType;
    Property startDate : TDate Index 40 Read FstartDate Write SetstartDate;
  end;
  TPricingClass = Class of TPricing;
  
  { --------------------------------------------------------------------
    TPricingflights
    --------------------------------------------------------------------}
  
  TPricingflights = Class(TGoogleBaseObject)
  Private
  Protected
    //Property setters
  Public
  Published
  end;
  TPricingflightsClass = Class of TPricingflights;
  
  { --------------------------------------------------------------------
    TPricingSchedule
    --------------------------------------------------------------------}
  
  TPricingSchedule = Class(TGoogleBaseObject)
  Private
    FcapCostOption : string;
    FdisregardOverdelivery : boolean;
    FendDate : TDate;
    Fflighted : boolean;
    FfloodlightActivityId : string;
    FpricingPeriods : TPricingSchedulepricingPeriods;
    FpricingType : string;
    FstartDate : TDate;
    FtestingStartDate : TDate;
  Protected
    //Property setters
    Procedure SetcapCostOption(AIndex : Integer; AValue : string); virtual;
    Procedure SetdisregardOverdelivery(AIndex : Integer; AValue : boolean); virtual;
    Procedure SetendDate(AIndex : Integer; AValue : TDate); virtual;
    Procedure Setflighted(AIndex : Integer; AValue : boolean); virtual;
    Procedure SetfloodlightActivityId(AIndex : Integer; AValue : string); virtual;
    Procedure SetpricingPeriods(AIndex : Integer; AValue : TPricingSchedulepricingPeriods); virtual;
    Procedure SetpricingType(AIndex : Integer; AValue : string); virtual;
    Procedure SetstartDate(AIndex : Integer; AValue : TDate); virtual;
    Procedure SettestingStartDate(AIndex : Integer; AValue : TDate); virtual;
  Public
  Published
    Property capCostOption : string Index 0 Read FcapCostOption Write SetcapCostOption;
    Property disregardOverdelivery : boolean Index 8 Read FdisregardOverdelivery Write SetdisregardOverdelivery;
    Property endDate : TDate Index 16 Read FendDate Write SetendDate;
    Property flighted : boolean Index 24 Read Fflighted Write Setflighted;
    Property floodlightActivityId : string Index 32 Read FfloodlightActivityId Write SetfloodlightActivityId;
    Property pricingPeriods : TPricingSchedulepricingPeriods Index 40 Read FpricingPeriods Write SetpricingPeriods;
    Property pricingType : string Index 48 Read FpricingType Write SetpricingType;
    Property startDate : TDate Index 56 Read FstartDate Write SetstartDate;
    Property testingStartDate : TDate Index 64 Read FtestingStartDate Write SettestingStartDate;
  end;
  TPricingScheduleClass = Class of TPricingSchedule;
  
  { --------------------------------------------------------------------
    TPricingSchedulepricingPeriods
    --------------------------------------------------------------------}
  
  TPricingSchedulepricingPeriods = Class(TGoogleBaseObject)
  Private
  Protected
    //Property setters
  Public
  Published
  end;
  TPricingSchedulepricingPeriodsClass = Class of TPricingSchedulepricingPeriods;
  
  { --------------------------------------------------------------------
    TPricingSchedulePricingPeriod
    --------------------------------------------------------------------}
  
  TPricingSchedulePricingPeriod = Class(TGoogleBaseObject)
  Private
    FendDate : TDate;
    FpricingComment : string;
    FrateOrCostNanos : string;
    FstartDate : TDate;
    Funits : string;
  Protected
    //Property setters
    Procedure SetendDate(AIndex : Integer; AValue : TDate); virtual;
    Procedure SetpricingComment(AIndex : Integer; AValue : string); virtual;
    Procedure SetrateOrCostNanos(AIndex : Integer; AValue : string); virtual;
    Procedure SetstartDate(AIndex : Integer; AValue : TDate); virtual;
    Procedure Setunits(AIndex : Integer; AValue : string); virtual;
  Public
  Published
    Property endDate : TDate Index 0 Read FendDate Write SetendDate;
    Property pricingComment : string Index 8 Read FpricingComment Write SetpricingComment;
    Property rateOrCostNanos : string Index 16 Read FrateOrCostNanos Write SetrateOrCostNanos;
    Property startDate : TDate Index 24 Read FstartDate Write SetstartDate;
    Property units : string Index 32 Read Funits Write Setunits;
  end;
  TPricingSchedulePricingPeriodClass = Class of TPricingSchedulePricingPeriod;
  
  { --------------------------------------------------------------------
    TProgrammaticSetting
    --------------------------------------------------------------------}
  
  TProgrammaticSetting = Class(TGoogleBaseObject)
  Private
    FadxDealIds : TProgrammaticSettingadxDealIds;
    FinsertionOrderId : string;
    FinsertionOrderIdStatus : boolean;
    FmediaCostNanos : string;
    Fprogrammatic : boolean;
    FtraffickerEmails : TProgrammaticSettingtraffickerEmails;
  Protected
    //Property setters
    Procedure SetadxDealIds(AIndex : Integer; AValue : TProgrammaticSettingadxDealIds); virtual;
    Procedure SetinsertionOrderId(AIndex : Integer; AValue : string); virtual;
    Procedure SetinsertionOrderIdStatus(AIndex : Integer; AValue : boolean); virtual;
    Procedure SetmediaCostNanos(AIndex : Integer; AValue : string); virtual;
    Procedure Setprogrammatic(AIndex : Integer; AValue : boolean); virtual;
    Procedure SettraffickerEmails(AIndex : Integer; AValue : TProgrammaticSettingtraffickerEmails); virtual;
  Public
  Published
    Property adxDealIds : TProgrammaticSettingadxDealIds Index 0 Read FadxDealIds Write SetadxDealIds;
    Property insertionOrderId : string Index 8 Read FinsertionOrderId Write SetinsertionOrderId;
    Property insertionOrderIdStatus : boolean Index 16 Read FinsertionOrderIdStatus Write SetinsertionOrderIdStatus;
    Property mediaCostNanos : string Index 24 Read FmediaCostNanos Write SetmediaCostNanos;
    Property programmatic : boolean Index 32 Read Fprogrammatic Write Setprogrammatic;
    Property traffickerEmails : TProgrammaticSettingtraffickerEmails Index 40 Read FtraffickerEmails Write SettraffickerEmails;
  end;
  TProgrammaticSettingClass = Class of TProgrammaticSetting;
  
  { --------------------------------------------------------------------
    TProgrammaticSettingadxDealIds
    --------------------------------------------------------------------}
  
  TProgrammaticSettingadxDealIds = Class(TGoogleBaseObject)
  Private
  Protected
    //Property setters
  Public
  Published
  end;
  TProgrammaticSettingadxDealIdsClass = Class of TProgrammaticSettingadxDealIds;
  
  { --------------------------------------------------------------------
    TProgrammaticSettingtraffickerEmails
    --------------------------------------------------------------------}
  
  TProgrammaticSettingtraffickerEmails = Class(TGoogleBaseObject)
  Private
  Protected
    //Property setters
  Public
  Published
  end;
  TProgrammaticSettingtraffickerEmailsClass = Class of TProgrammaticSettingtraffickerEmails;
  
  { --------------------------------------------------------------------
    TProject
    --------------------------------------------------------------------}
  
  TProject = Class(TGoogleBaseObject)
  Private
    FaccountId : string;
    FadvertiserId : string;
    FaudienceAgeGroup : string;
    FaudienceGender : string;
    Fbudget : string;
    FclientBillingCode : string;
    FclientName : string;
    FendDate : TDate;
    Fid : string;
    Fkind : string;
    FlastModifiedInfo : TLastModifiedInfo;
    Fname : string;
    Foverview : string;
    FstartDate : TDate;
    FsubaccountId : string;
    FtargetClicks : string;
    FtargetConversions : string;
    FtargetCpaNanos : string;
    FtargetCpcNanos : string;
    FtargetCpmNanos : string;
    FtargetImpressions : string;
  Protected
    //Property setters
    Procedure SetaccountId(AIndex : Integer; AValue : string); virtual;
    Procedure SetadvertiserId(AIndex : Integer; AValue : string); virtual;
    Procedure SetaudienceAgeGroup(AIndex : Integer; AValue : string); virtual;
    Procedure SetaudienceGender(AIndex : Integer; AValue : string); virtual;
    Procedure Setbudget(AIndex : Integer; AValue : string); virtual;
    Procedure SetclientBillingCode(AIndex : Integer; AValue : string); virtual;
    Procedure SetclientName(AIndex : Integer; AValue : string); virtual;
    Procedure SetendDate(AIndex : Integer; AValue : TDate); virtual;
    Procedure Setid(AIndex : Integer; AValue : string); virtual;
    Procedure Setkind(AIndex : Integer; AValue : string); virtual;
    Procedure SetlastModifiedInfo(AIndex : Integer; AValue : TLastModifiedInfo); virtual;
    Procedure Setname(AIndex : Integer; AValue : string); virtual;
    Procedure Setoverview(AIndex : Integer; AValue : string); virtual;
    Procedure SetstartDate(AIndex : Integer; AValue : TDate); virtual;
    Procedure SetsubaccountId(AIndex : Integer; AValue : string); virtual;
    Procedure SettargetClicks(AIndex : Integer; AValue : string); virtual;
    Procedure SettargetConversions(AIndex : Integer; AValue : string); virtual;
    Procedure SettargetCpaNanos(AIndex : Integer; AValue : string); virtual;
    Procedure SettargetCpcNanos(AIndex : Integer; AValue : string); virtual;
    Procedure SettargetCpmNanos(AIndex : Integer; AValue : string); virtual;
    Procedure SettargetImpressions(AIndex : Integer; AValue : string); virtual;
  Public
  Published
    Property accountId : string Index 0 Read FaccountId Write SetaccountId;
    Property advertiserId : string Index 8 Read FadvertiserId Write SetadvertiserId;
    Property audienceAgeGroup : string Index 16 Read FaudienceAgeGroup Write SetaudienceAgeGroup;
    Property audienceGender : string Index 24 Read FaudienceGender Write SetaudienceGender;
    Property budget : string Index 32 Read Fbudget Write Setbudget;
    Property clientBillingCode : string Index 40 Read FclientBillingCode Write SetclientBillingCode;
    Property clientName : string Index 48 Read FclientName Write SetclientName;
    Property endDate : TDate Index 56 Read FendDate Write SetendDate;
    Property id : string Index 64 Read Fid Write Setid;
    Property kind : string Index 72 Read Fkind Write Setkind;
    Property lastModifiedInfo : TLastModifiedInfo Index 80 Read FlastModifiedInfo Write SetlastModifiedInfo;
    Property name : string Index 88 Read Fname Write Setname;
    Property overview : string Index 96 Read Foverview Write Setoverview;
    Property startDate : TDate Index 104 Read FstartDate Write SetstartDate;
    Property subaccountId : string Index 112 Read FsubaccountId Write SetsubaccountId;
    Property targetClicks : string Index 120 Read FtargetClicks Write SettargetClicks;
    Property targetConversions : string Index 128 Read FtargetConversions Write SettargetConversions;
    Property targetCpaNanos : string Index 136 Read FtargetCpaNanos Write SettargetCpaNanos;
    Property targetCpcNanos : string Index 144 Read FtargetCpcNanos Write SettargetCpcNanos;
    Property targetCpmNanos : string Index 152 Read FtargetCpmNanos Write SettargetCpmNanos;
    Property targetImpressions : string Index 160 Read FtargetImpressions Write SettargetImpressions;
  end;
  TProjectClass = Class of TProject;
  
  { --------------------------------------------------------------------
    TProjectsListResponse
    --------------------------------------------------------------------}
  
  TProjectsListResponse = Class(TGoogleBaseObject)
  Private
    Fkind : string;
    FnextPageToken : string;
    Fprojects : TProjectsListResponseprojects;
  Protected
    //Property setters
    Procedure Setkind(AIndex : Integer; AValue : string); virtual;
    Procedure SetnextPageToken(AIndex : Integer; AValue : string); virtual;
    Procedure Setprojects(AIndex : Integer; AValue : TProjectsListResponseprojects); virtual;
  Public
  Published
    Property kind : string Index 0 Read Fkind Write Setkind;
    Property nextPageToken : string Index 8 Read FnextPageToken Write SetnextPageToken;
    Property projects : TProjectsListResponseprojects Index 16 Read Fprojects Write Setprojects;
  end;
  TProjectsListResponseClass = Class of TProjectsListResponse;
  
  { --------------------------------------------------------------------
    TProjectsListResponseprojects
    --------------------------------------------------------------------}
  
  TProjectsListResponseprojects = Class(TGoogleBaseObject)
  Private
  Protected
    //Property setters
  Public
  Published
  end;
  TProjectsListResponseprojectsClass = Class of TProjectsListResponseprojects;
  
  { --------------------------------------------------------------------
    TReachReportCompatibleFields
    --------------------------------------------------------------------}
  
  TReachReportCompatibleFields = Class(TGoogleBaseObject)
  Private
    FdimensionFilters : TReachReportCompatibleFieldsdimensionFilters;
    Fdimensions : TReachReportCompatibleFieldsdimensions;
    Fkind : string;
    Fmetrics : TReachReportCompatibleFieldsmetrics;
    FpivotedActivityMetrics : TReachReportCompatibleFieldspivotedActivityMetrics;
    FreachByFrequencyMetrics : TReachReportCompatibleFieldsreachByFrequencyMetrics;
  Protected
    //Property setters
    Procedure SetdimensionFilters(AIndex : Integer; AValue : TReachReportCompatibleFieldsdimensionFilters); virtual;
    Procedure Setdimensions(AIndex : Integer; AValue : TReachReportCompatibleFieldsdimensions); virtual;
    Procedure Setkind(AIndex : Integer; AValue : string); virtual;
    Procedure Setmetrics(AIndex : Integer; AValue : TReachReportCompatibleFieldsmetrics); virtual;
    Procedure SetpivotedActivityMetrics(AIndex : Integer; AValue : TReachReportCompatibleFieldspivotedActivityMetrics); virtual;
    Procedure SetreachByFrequencyMetrics(AIndex : Integer; AValue : TReachReportCompatibleFieldsreachByFrequencyMetrics); virtual;
  Public
  Published
    Property dimensionFilters : TReachReportCompatibleFieldsdimensionFilters Index 0 Read FdimensionFilters Write SetdimensionFilters;
    Property dimensions : TReachReportCompatibleFieldsdimensions Index 8 Read Fdimensions Write Setdimensions;
    Property kind : string Index 16 Read Fkind Write Setkind;
    Property metrics : TReachReportCompatibleFieldsmetrics Index 24 Read Fmetrics Write Setmetrics;
    Property pivotedActivityMetrics : TReachReportCompatibleFieldspivotedActivityMetrics Index 32 Read FpivotedActivityMetrics Write SetpivotedActivityMetrics;
    Property reachByFrequencyMetrics : TReachReportCompatibleFieldsreachByFrequencyMetrics Index 40 Read FreachByFrequencyMetrics Write SetreachByFrequencyMetrics;
  end;
  TReachReportCompatibleFieldsClass = Class of TReachReportCompatibleFields;
  
  { --------------------------------------------------------------------
    TReachReportCompatibleFieldsdimensionFilters
    --------------------------------------------------------------------}
  
  TReachReportCompatibleFieldsdimensionFilters = Class(TGoogleBaseObject)
  Private
  Protected
    //Property setters
  Public
  Published
  end;
  TReachReportCompatibleFieldsdimensionFiltersClass = Class of TReachReportCompatibleFieldsdimensionFilters;
  
  { --------------------------------------------------------------------
    TReachReportCompatibleFieldsdimensions
    --------------------------------------------------------------------}
  
  TReachReportCompatibleFieldsdimensions = Class(TGoogleBaseObject)
  Private
  Protected
    //Property setters
  Public
  Published
  end;
  TReachReportCompatibleFieldsdimensionsClass = Class of TReachReportCompatibleFieldsdimensions;
  
  { --------------------------------------------------------------------
    TReachReportCompatibleFieldsmetrics
    --------------------------------------------------------------------}
  
  TReachReportCompatibleFieldsmetrics = Class(TGoogleBaseObject)
  Private
  Protected
    //Property setters
  Public
  Published
  end;
  TReachReportCompatibleFieldsmetricsClass = Class of TReachReportCompatibleFieldsmetrics;
  
  { --------------------------------------------------------------------
    TReachReportCompatibleFieldspivotedActivityMetrics
    --------------------------------------------------------------------}
  
  TReachReportCompatibleFieldspivotedActivityMetrics = Class(TGoogleBaseObject)
  Private
  Protected
    //Property setters
  Public
  Published
  end;
  TReachReportCompatibleFieldspivotedActivityMetricsClass = Class of TReachReportCompatibleFieldspivotedActivityMetrics;
  
  { --------------------------------------------------------------------
    TReachReportCompatibleFieldsreachByFrequencyMetrics
    --------------------------------------------------------------------}
  
  TReachReportCompatibleFieldsreachByFrequencyMetrics = Class(TGoogleBaseObject)
  Private
  Protected
    //Property setters
  Public
  Published
  end;
  TReachReportCompatibleFieldsreachByFrequencyMetricsClass = Class of TReachReportCompatibleFieldsreachByFrequencyMetrics;
  
  { --------------------------------------------------------------------
    TRecipient
    --------------------------------------------------------------------}
  
  TRecipient = Class(TGoogleBaseObject)
  Private
    FdeliveryType : string;
    Femail : string;
    Fkind : string;
  Protected
    //Property setters
    Procedure SetdeliveryType(AIndex : Integer; AValue : string); virtual;
    Procedure Setemail(AIndex : Integer; AValue : string); virtual;
    Procedure Setkind(AIndex : Integer; AValue : string); virtual;
  Public
  Published
    Property deliveryType : string Index 0 Read FdeliveryType Write SetdeliveryType;
    Property email : string Index 8 Read Femail Write Setemail;
    Property kind : string Index 16 Read Fkind Write Setkind;
  end;
  TRecipientClass = Class of TRecipient;
  
  { --------------------------------------------------------------------
    TRegion
    --------------------------------------------------------------------}
  
  TRegion = Class(TGoogleBaseObject)
  Private
    FcountryCode : string;
    FcountryDartId : string;
    FdartId : string;
    Fkind : string;
    Fname : string;
    FregionCode : string;
  Protected
    //Property setters
    Procedure SetcountryCode(AIndex : Integer; AValue : string); virtual;
    Procedure SetcountryDartId(AIndex : Integer; AValue : string); virtual;
    Procedure SetdartId(AIndex : Integer; AValue : string); virtual;
    Procedure Setkind(AIndex : Integer; AValue : string); virtual;
    Procedure Setname(AIndex : Integer; AValue : string); virtual;
    Procedure SetregionCode(AIndex : Integer; AValue : string); virtual;
  Public
  Published
    Property countryCode : string Index 0 Read FcountryCode Write SetcountryCode;
    Property countryDartId : string Index 8 Read FcountryDartId Write SetcountryDartId;
    Property dartId : string Index 16 Read FdartId Write SetdartId;
    Property kind : string Index 24 Read Fkind Write Setkind;
    Property name : string Index 32 Read Fname Write Setname;
    Property regionCode : string Index 40 Read FregionCode Write SetregionCode;
  end;
  TRegionClass = Class of TRegion;
  
  { --------------------------------------------------------------------
    TRegionsListResponse
    --------------------------------------------------------------------}
  
  TRegionsListResponse = Class(TGoogleBaseObject)
  Private
    Fkind : string;
    Fregions : TRegionsListResponseregions;
  Protected
    //Property setters
    Procedure Setkind(AIndex : Integer; AValue : string); virtual;
    Procedure Setregions(AIndex : Integer; AValue : TRegionsListResponseregions); virtual;
  Public
  Published
    Property kind : string Index 0 Read Fkind Write Setkind;
    Property regions : TRegionsListResponseregions Index 8 Read Fregions Write Setregions;
  end;
  TRegionsListResponseClass = Class of TRegionsListResponse;
  
  { --------------------------------------------------------------------
    TRegionsListResponseregions
    --------------------------------------------------------------------}
  
  TRegionsListResponseregions = Class(TGoogleBaseObject)
  Private
  Protected
    //Property setters
  Public
  Published
  end;
  TRegionsListResponseregionsClass = Class of TRegionsListResponseregions;
  
  { --------------------------------------------------------------------
    TRemarketingList
    --------------------------------------------------------------------}
  
  TRemarketingList = Class(TGoogleBaseObject)
  Private
    FaccountId : string;
    Factive : boolean;
    FadvertiserId : string;
    FadvertiserIdDimensionValue : TDimensionValue;
    Fdescription : string;
    Fid : string;
    Fkind : string;
    FlifeSpan : string;
    FlistPopulationRule : TListPopulationRule;
    FlistSize : string;
    FlistSource : string;
    Fname : string;
    FsubaccountId : string;
  Protected
    //Property setters
    Procedure SetaccountId(AIndex : Integer; AValue : string); virtual;
    Procedure Setactive(AIndex : Integer; AValue : boolean); virtual;
    Procedure SetadvertiserId(AIndex : Integer; AValue : string); virtual;
    Procedure SetadvertiserIdDimensionValue(AIndex : Integer; AValue : TDimensionValue); virtual;
    Procedure Setdescription(AIndex : Integer; AValue : string); virtual;
    Procedure Setid(AIndex : Integer; AValue : string); virtual;
    Procedure Setkind(AIndex : Integer; AValue : string); virtual;
    Procedure SetlifeSpan(AIndex : Integer; AValue : string); virtual;
    Procedure SetlistPopulationRule(AIndex : Integer; AValue : TListPopulationRule); virtual;
    Procedure SetlistSize(AIndex : Integer; AValue : string); virtual;
    Procedure SetlistSource(AIndex : Integer; AValue : string); virtual;
    Procedure Setname(AIndex : Integer; AValue : string); virtual;
    Procedure SetsubaccountId(AIndex : Integer; AValue : string); virtual;
  Public
  Published
    Property accountId : string Index 0 Read FaccountId Write SetaccountId;
    Property active : boolean Index 8 Read Factive Write Setactive;
    Property advertiserId : string Index 16 Read FadvertiserId Write SetadvertiserId;
    Property advertiserIdDimensionValue : TDimensionValue Index 24 Read FadvertiserIdDimensionValue Write SetadvertiserIdDimensionValue;
    Property description : string Index 32 Read Fdescription Write Setdescription;
    Property id : string Index 40 Read Fid Write Setid;
    Property kind : string Index 48 Read Fkind Write Setkind;
    Property lifeSpan : string Index 56 Read FlifeSpan Write SetlifeSpan;
    Property listPopulationRule : TListPopulationRule Index 64 Read FlistPopulationRule Write SetlistPopulationRule;
    Property listSize : string Index 72 Read FlistSize Write SetlistSize;
    Property listSource : string Index 80 Read FlistSource Write SetlistSource;
    Property name : string Index 88 Read Fname Write Setname;
    Property subaccountId : string Index 96 Read FsubaccountId Write SetsubaccountId;
  end;
  TRemarketingListClass = Class of TRemarketingList;
  
  { --------------------------------------------------------------------
    TRemarketingListShare
    --------------------------------------------------------------------}
  
  TRemarketingListShare = Class(TGoogleBaseObject)
  Private
    Fkind : string;
    FremarketingListId : string;
    FsharedAccountIds : TRemarketingListSharesharedAccountIds;
    FsharedAdvertiserIds : TRemarketingListSharesharedAdvertiserIds;
  Protected
    //Property setters
    Procedure Setkind(AIndex : Integer; AValue : string); virtual;
    Procedure SetremarketingListId(AIndex : Integer; AValue : string); virtual;
    Procedure SetsharedAccountIds(AIndex : Integer; AValue : TRemarketingListSharesharedAccountIds); virtual;
    Procedure SetsharedAdvertiserIds(AIndex : Integer; AValue : TRemarketingListSharesharedAdvertiserIds); virtual;
  Public
  Published
    Property kind : string Index 0 Read Fkind Write Setkind;
    Property remarketingListId : string Index 8 Read FremarketingListId Write SetremarketingListId;
    Property sharedAccountIds : TRemarketingListSharesharedAccountIds Index 16 Read FsharedAccountIds Write SetsharedAccountIds;
    Property sharedAdvertiserIds : TRemarketingListSharesharedAdvertiserIds Index 24 Read FsharedAdvertiserIds Write SetsharedAdvertiserIds;
  end;
  TRemarketingListShareClass = Class of TRemarketingListShare;
  
  { --------------------------------------------------------------------
    TRemarketingListSharesharedAccountIds
    --------------------------------------------------------------------}
  
  TRemarketingListSharesharedAccountIds = Class(TGoogleBaseObject)
  Private
  Protected
    //Property setters
  Public
  Published
  end;
  TRemarketingListSharesharedAccountIdsClass = Class of TRemarketingListSharesharedAccountIds;
  
  { --------------------------------------------------------------------
    TRemarketingListSharesharedAdvertiserIds
    --------------------------------------------------------------------}
  
  TRemarketingListSharesharedAdvertiserIds = Class(TGoogleBaseObject)
  Private
  Protected
    //Property setters
  Public
  Published
  end;
  TRemarketingListSharesharedAdvertiserIdsClass = Class of TRemarketingListSharesharedAdvertiserIds;
  
  { --------------------------------------------------------------------
    TRemarketingListsListResponse
    --------------------------------------------------------------------}
  
  TRemarketingListsListResponse = Class(TGoogleBaseObject)
  Private
    Fkind : string;
    FnextPageToken : string;
    FremarketingLists : TRemarketingListsListResponseremarketingLists;
  Protected
    //Property setters
    Procedure Setkind(AIndex : Integer; AValue : string); virtual;
    Procedure SetnextPageToken(AIndex : Integer; AValue : string); virtual;
    Procedure SetremarketingLists(AIndex : Integer; AValue : TRemarketingListsListResponseremarketingLists); virtual;
  Public
  Published
    Property kind : string Index 0 Read Fkind Write Setkind;
    Property nextPageToken : string Index 8 Read FnextPageToken Write SetnextPageToken;
    Property remarketingLists : TRemarketingListsListResponseremarketingLists Index 16 Read FremarketingLists Write SetremarketingLists;
  end;
  TRemarketingListsListResponseClass = Class of TRemarketingListsListResponse;
  
  { --------------------------------------------------------------------
    TRemarketingListsListResponseremarketingLists
    --------------------------------------------------------------------}
  
  TRemarketingListsListResponseremarketingLists = Class(TGoogleBaseObject)
  Private
  Protected
    //Property setters
  Public
  Published
  end;
  TRemarketingListsListResponseremarketingListsClass = Class of TRemarketingListsListResponseremarketingLists;
  
  { --------------------------------------------------------------------
    TReport
    --------------------------------------------------------------------}
  
  TReport = Class(TGoogleBaseObject)
  Private
    FaccountId : string;
    Fcriteria : TReportcriteria;
    FcrossDimensionReachCriteria : TReportcrossDimensionReachCriteria;
    Fdelivery : TReportdelivery;
    Fetag : string;
    FfileName : string;
    FfloodlightCriteria : TReportfloodlightCriteria;
    Fformat : string;
    Fid : string;
    Fkind : string;
    FlastModifiedTime : string;
    Fname : string;
    FownerProfileId : string;
    FpathToConversionCriteria : TReportpathToConversionCriteria;
    FreachCriteria : TReportreachCriteria;
    Fschedule : TReportschedule;
    FsubAccountId : string;
    F_type : string;
  Protected
    Class Function ExportPropertyName(Const AName : String) : string; override;
    //Property setters
    Procedure SetaccountId(AIndex : Integer; AValue : string); virtual;
    Procedure Setcriteria(AIndex : Integer; AValue : TReportcriteria); virtual;
    Procedure SetcrossDimensionReachCriteria(AIndex : Integer; AValue : TReportcrossDimensionReachCriteria); virtual;
    Procedure Setdelivery(AIndex : Integer; AValue : TReportdelivery); virtual;
    Procedure Setetag(AIndex : Integer; AValue : string); virtual;
    Procedure SetfileName(AIndex : Integer; AValue : string); virtual;
    Procedure SetfloodlightCriteria(AIndex : Integer; AValue : TReportfloodlightCriteria); virtual;
    Procedure Setformat(AIndex : Integer; AValue : string); virtual;
    Procedure Setid(AIndex : Integer; AValue : string); virtual;
    Procedure Setkind(AIndex : Integer; AValue : string); virtual;
    Procedure SetlastModifiedTime(AIndex : Integer; AValue : string); virtual;
    Procedure Setname(AIndex : Integer; AValue : string); virtual;
    Procedure SetownerProfileId(AIndex : Integer; AValue : string); virtual;
    Procedure SetpathToConversionCriteria(AIndex : Integer; AValue : TReportpathToConversionCriteria); virtual;
    Procedure SetreachCriteria(AIndex : Integer; AValue : TReportreachCriteria); virtual;
    Procedure Setschedule(AIndex : Integer; AValue : TReportschedule); virtual;
    Procedure SetsubAccountId(AIndex : Integer; AValue : string); virtual;
    Procedure Set_type(AIndex : Integer; AValue : string); virtual;
  Public
  Published
    Property accountId : string Index 0 Read FaccountId Write SetaccountId;
    Property criteria : TReportcriteria Index 8 Read Fcriteria Write Setcriteria;
    Property crossDimensionReachCriteria : TReportcrossDimensionReachCriteria Index 16 Read FcrossDimensionReachCriteria Write SetcrossDimensionReachCriteria;
    Property delivery : TReportdelivery Index 24 Read Fdelivery Write Setdelivery;
    Property etag : string Index 32 Read Fetag Write Setetag;
    Property fileName : string Index 40 Read FfileName Write SetfileName;
    Property floodlightCriteria : TReportfloodlightCriteria Index 48 Read FfloodlightCriteria Write SetfloodlightCriteria;
    Property format : string Index 56 Read Fformat Write Setformat;
    Property id : string Index 64 Read Fid Write Setid;
    Property kind : string Index 72 Read Fkind Write Setkind;
    Property lastModifiedTime : string Index 80 Read FlastModifiedTime Write SetlastModifiedTime;
    Property name : string Index 88 Read Fname Write Setname;
    Property ownerProfileId : string Index 96 Read FownerProfileId Write SetownerProfileId;
    Property pathToConversionCriteria : TReportpathToConversionCriteria Index 104 Read FpathToConversionCriteria Write SetpathToConversionCriteria;
    Property reachCriteria : TReportreachCriteria Index 112 Read FreachCriteria Write SetreachCriteria;
    Property schedule : TReportschedule Index 120 Read Fschedule Write Setschedule;
    Property subAccountId : string Index 128 Read FsubAccountId Write SetsubAccountId;
    Property _type : string Index 136 Read F_type Write Set_type;
  end;
  TReportClass = Class of TReport;
  
  { --------------------------------------------------------------------
    TReportcriteria
    --------------------------------------------------------------------}
  
  TReportcriteria = Class(TGoogleBaseObject)
  Private
    Factivities : TActivities;
    FcustomRichMediaEvents : TCustomRichMediaEvents;
    FdateRange : TDateRange;
    FdimensionFilters : TReportcriteriadimensionFilters;
    Fdimensions : TReportcriteriadimensions;
    FmetricNames : TReportcriteriametricNames;
  Protected
    //Property setters
    Procedure Setactivities(AIndex : Integer; AValue : TActivities); virtual;
    Procedure SetcustomRichMediaEvents(AIndex : Integer; AValue : TCustomRichMediaEvents); virtual;
    Procedure SetdateRange(AIndex : Integer; AValue : TDateRange); virtual;
    Procedure SetdimensionFilters(AIndex : Integer; AValue : TReportcriteriadimensionFilters); virtual;
    Procedure Setdimensions(AIndex : Integer; AValue : TReportcriteriadimensions); virtual;
    Procedure SetmetricNames(AIndex : Integer; AValue : TReportcriteriametricNames); virtual;
  Public
  Published
    Property activities : TActivities Index 0 Read Factivities Write Setactivities;
    Property customRichMediaEvents : TCustomRichMediaEvents Index 8 Read FcustomRichMediaEvents Write SetcustomRichMediaEvents;
    Property dateRange : TDateRange Index 16 Read FdateRange Write SetdateRange;
    Property dimensionFilters : TReportcriteriadimensionFilters Index 24 Read FdimensionFilters Write SetdimensionFilters;
    Property dimensions : TReportcriteriadimensions Index 32 Read Fdimensions Write Setdimensions;
    Property metricNames : TReportcriteriametricNames Index 40 Read FmetricNames Write SetmetricNames;
  end;
  TReportcriteriaClass = Class of TReportcriteria;
  
  { --------------------------------------------------------------------
    TReportcriteriadimensionFilters
    --------------------------------------------------------------------}
  
  TReportcriteriadimensionFilters = Class(TGoogleBaseObject)
  Private
  Protected
    //Property setters
  Public
  Published
  end;
  TReportcriteriadimensionFiltersClass = Class of TReportcriteriadimensionFilters;
  
  { --------------------------------------------------------------------
    TReportcriteriadimensions
    --------------------------------------------------------------------}
  
  TReportcriteriadimensions = Class(TGoogleBaseObject)
  Private
  Protected
    //Property setters
  Public
  Published
  end;
  TReportcriteriadimensionsClass = Class of TReportcriteriadimensions;
  
  { --------------------------------------------------------------------
    TReportcriteriametricNames
    --------------------------------------------------------------------}
  
  TReportcriteriametricNames = Class(TGoogleBaseObject)
  Private
  Protected
    //Property setters
  Public
  Published
  end;
  TReportcriteriametricNamesClass = Class of TReportcriteriametricNames;
  
  { --------------------------------------------------------------------
    TReportcrossDimensionReachCriteria
    --------------------------------------------------------------------}
  
  TReportcrossDimensionReachCriteria = Class(TGoogleBaseObject)
  Private
    Fbreakdown : TReportcrossDimensionReachCriteriabreakdown;
    FdateRange : TDateRange;
    Fdimension : string;
    FdimensionFilters : TReportcrossDimensionReachCriteriadimensionFilters;
    FmetricNames : TReportcrossDimensionReachCriteriametricNames;
    FoverlapMetricNames : TReportcrossDimensionReachCriteriaoverlapMetricNames;
    Fpivoted : boolean;
  Protected
    //Property setters
    Procedure Setbreakdown(AIndex : Integer; AValue : TReportcrossDimensionReachCriteriabreakdown); virtual;
    Procedure SetdateRange(AIndex : Integer; AValue : TDateRange); virtual;
    Procedure Setdimension(AIndex : Integer; AValue : string); virtual;
    Procedure SetdimensionFilters(AIndex : Integer; AValue : TReportcrossDimensionReachCriteriadimensionFilters); virtual;
    Procedure SetmetricNames(AIndex : Integer; AValue : TReportcrossDimensionReachCriteriametricNames); virtual;
    Procedure SetoverlapMetricNames(AIndex : Integer; AValue : TReportcrossDimensionReachCriteriaoverlapMetricNames); virtual;
    Procedure Setpivoted(AIndex : Integer; AValue : boolean); virtual;
  Public
  Published
    Property breakdown : TReportcrossDimensionReachCriteriabreakdown Index 0 Read Fbreakdown Write Setbreakdown;
    Property dateRange : TDateRange Index 8 Read FdateRange Write SetdateRange;
    Property dimension : string Index 16 Read Fdimension Write Setdimension;
    Property dimensionFilters : TReportcrossDimensionReachCriteriadimensionFilters Index 24 Read FdimensionFilters Write SetdimensionFilters;
    Property metricNames : TReportcrossDimensionReachCriteriametricNames Index 32 Read FmetricNames Write SetmetricNames;
    Property overlapMetricNames : TReportcrossDimensionReachCriteriaoverlapMetricNames Index 40 Read FoverlapMetricNames Write SetoverlapMetricNames;
    Property pivoted : boolean Index 48 Read Fpivoted Write Setpivoted;
  end;
  TReportcrossDimensionReachCriteriaClass = Class of TReportcrossDimensionReachCriteria;
  
  { --------------------------------------------------------------------
    TReportcrossDimensionReachCriteriabreakdown
    --------------------------------------------------------------------}
  
  TReportcrossDimensionReachCriteriabreakdown = Class(TGoogleBaseObject)
  Private
  Protected
    //Property setters
  Public
  Published
  end;
  TReportcrossDimensionReachCriteriabreakdownClass = Class of TReportcrossDimensionReachCriteriabreakdown;
  
  { --------------------------------------------------------------------
    TReportcrossDimensionReachCriteriadimensionFilters
    --------------------------------------------------------------------}
  
  TReportcrossDimensionReachCriteriadimensionFilters = Class(TGoogleBaseObject)
  Private
  Protected
    //Property setters
  Public
  Published
  end;
  TReportcrossDimensionReachCriteriadimensionFiltersClass = Class of TReportcrossDimensionReachCriteriadimensionFilters;
  
  { --------------------------------------------------------------------
    TReportcrossDimensionReachCriteriametricNames
    --------------------------------------------------------------------}
  
  TReportcrossDimensionReachCriteriametricNames = Class(TGoogleBaseObject)
  Private
  Protected
    //Property setters
  Public
  Published
  end;
  TReportcrossDimensionReachCriteriametricNamesClass = Class of TReportcrossDimensionReachCriteriametricNames;
  
  { --------------------------------------------------------------------
    TReportcrossDimensionReachCriteriaoverlapMetricNames
    --------------------------------------------------------------------}
  
  TReportcrossDimensionReachCriteriaoverlapMetricNames = Class(TGoogleBaseObject)
  Private
  Protected
    //Property setters
  Public
  Published
  end;
  TReportcrossDimensionReachCriteriaoverlapMetricNamesClass = Class of TReportcrossDimensionReachCriteriaoverlapMetricNames;
  
  { --------------------------------------------------------------------
    TReportdelivery
    --------------------------------------------------------------------}
  
  TReportdelivery = Class(TGoogleBaseObject)
  Private
    FemailOwner : boolean;
    FemailOwnerDeliveryType : string;
    Fmessage : string;
    Frecipients : TReportdeliveryrecipients;
  Protected
    //Property setters
    Procedure SetemailOwner(AIndex : Integer; AValue : boolean); virtual;
    Procedure SetemailOwnerDeliveryType(AIndex : Integer; AValue : string); virtual;
    Procedure Setmessage(AIndex : Integer; AValue : string); virtual;
    Procedure Setrecipients(AIndex : Integer; AValue : TReportdeliveryrecipients); virtual;
  Public
  Published
    Property emailOwner : boolean Index 0 Read FemailOwner Write SetemailOwner;
    Property emailOwnerDeliveryType : string Index 8 Read FemailOwnerDeliveryType Write SetemailOwnerDeliveryType;
    Property message : string Index 16 Read Fmessage Write Setmessage;
    Property recipients : TReportdeliveryrecipients Index 24 Read Frecipients Write Setrecipients;
  end;
  TReportdeliveryClass = Class of TReportdelivery;
  
  { --------------------------------------------------------------------
    TReportdeliveryrecipients
    --------------------------------------------------------------------}
  
  TReportdeliveryrecipients = Class(TGoogleBaseObject)
  Private
  Protected
    //Property setters
  Public
  Published
  end;
  TReportdeliveryrecipientsClass = Class of TReportdeliveryrecipients;
  
  { --------------------------------------------------------------------
    TReportfloodlightCriteria
    --------------------------------------------------------------------}
  
  TReportfloodlightCriteria = Class(TGoogleBaseObject)
  Private
    FcustomRichMediaEvents : TReportfloodlightCriteriacustomRichMediaEvents;
    FdateRange : TDateRange;
    FdimensionFilters : TReportfloodlightCriteriadimensionFilters;
    Fdimensions : TReportfloodlightCriteriadimensions;
    FfloodlightConfigId : TDimensionValue;
    FmetricNames : TReportfloodlightCriteriametricNames;
    FreportProperties : TReportfloodlightCriteriareportProperties;
  Protected
    //Property setters
    Procedure SetcustomRichMediaEvents(AIndex : Integer; AValue : TReportfloodlightCriteriacustomRichMediaEvents); virtual;
    Procedure SetdateRange(AIndex : Integer; AValue : TDateRange); virtual;
    Procedure SetdimensionFilters(AIndex : Integer; AValue : TReportfloodlightCriteriadimensionFilters); virtual;
    Procedure Setdimensions(AIndex : Integer; AValue : TReportfloodlightCriteriadimensions); virtual;
    Procedure SetfloodlightConfigId(AIndex : Integer; AValue : TDimensionValue); virtual;
    Procedure SetmetricNames(AIndex : Integer; AValue : TReportfloodlightCriteriametricNames); virtual;
    Procedure SetreportProperties(AIndex : Integer; AValue : TReportfloodlightCriteriareportProperties); virtual;
  Public
  Published
    Property customRichMediaEvents : TReportfloodlightCriteriacustomRichMediaEvents Index 0 Read FcustomRichMediaEvents Write SetcustomRichMediaEvents;
    Property dateRange : TDateRange Index 8 Read FdateRange Write SetdateRange;
    Property dimensionFilters : TReportfloodlightCriteriadimensionFilters Index 16 Read FdimensionFilters Write SetdimensionFilters;
    Property dimensions : TReportfloodlightCriteriadimensions Index 24 Read Fdimensions Write Setdimensions;
    Property floodlightConfigId : TDimensionValue Index 32 Read FfloodlightConfigId Write SetfloodlightConfigId;
    Property metricNames : TReportfloodlightCriteriametricNames Index 40 Read FmetricNames Write SetmetricNames;
    Property reportProperties : TReportfloodlightCriteriareportProperties Index 48 Read FreportProperties Write SetreportProperties;
  end;
  TReportfloodlightCriteriaClass = Class of TReportfloodlightCriteria;
  
  { --------------------------------------------------------------------
    TReportfloodlightCriteriacustomRichMediaEvents
    --------------------------------------------------------------------}
  
  TReportfloodlightCriteriacustomRichMediaEvents = Class(TGoogleBaseObject)
  Private
  Protected
    //Property setters
  Public
  Published
  end;
  TReportfloodlightCriteriacustomRichMediaEventsClass = Class of TReportfloodlightCriteriacustomRichMediaEvents;
  
  { --------------------------------------------------------------------
    TReportfloodlightCriteriadimensionFilters
    --------------------------------------------------------------------}
  
  TReportfloodlightCriteriadimensionFilters = Class(TGoogleBaseObject)
  Private
  Protected
    //Property setters
  Public
  Published
  end;
  TReportfloodlightCriteriadimensionFiltersClass = Class of TReportfloodlightCriteriadimensionFilters;
  
  { --------------------------------------------------------------------
    TReportfloodlightCriteriadimensions
    --------------------------------------------------------------------}
  
  TReportfloodlightCriteriadimensions = Class(TGoogleBaseObject)
  Private
  Protected
    //Property setters
  Public
  Published
  end;
  TReportfloodlightCriteriadimensionsClass = Class of TReportfloodlightCriteriadimensions;
  
  { --------------------------------------------------------------------
    TReportfloodlightCriteriametricNames
    --------------------------------------------------------------------}
  
  TReportfloodlightCriteriametricNames = Class(TGoogleBaseObject)
  Private
  Protected
    //Property setters
  Public
  Published
  end;
  TReportfloodlightCriteriametricNamesClass = Class of TReportfloodlightCriteriametricNames;
  
  { --------------------------------------------------------------------
    TReportfloodlightCriteriareportProperties
    --------------------------------------------------------------------}
  
  TReportfloodlightCriteriareportProperties = Class(TGoogleBaseObject)
  Private
    FincludeAttributedIPConversions : boolean;
    FincludeUnattributedCookieConversions : boolean;
    FincludeUnattributedIPConversions : boolean;
  Protected
    //Property setters
    Procedure SetincludeAttributedIPConversions(AIndex : Integer; AValue : boolean); virtual;
    Procedure SetincludeUnattributedCookieConversions(AIndex : Integer; AValue : boolean); virtual;
    Procedure SetincludeUnattributedIPConversions(AIndex : Integer; AValue : boolean); virtual;
  Public
  Published
    Property includeAttributedIPConversions : boolean Index 0 Read FincludeAttributedIPConversions Write SetincludeAttributedIPConversions;
    Property includeUnattributedCookieConversions : boolean Index 8 Read FincludeUnattributedCookieConversions Write SetincludeUnattributedCookieConversions;
    Property includeUnattributedIPConversions : boolean Index 16 Read FincludeUnattributedIPConversions Write SetincludeUnattributedIPConversions;
  end;
  TReportfloodlightCriteriareportPropertiesClass = Class of TReportfloodlightCriteriareportProperties;
  
  { --------------------------------------------------------------------
    TReportpathToConversionCriteria
    --------------------------------------------------------------------}
  
  TReportpathToConversionCriteria = Class(TGoogleBaseObject)
  Private
    FactivityFilters : TReportpathToConversionCriteriaactivityFilters;
    FconversionDimensions : TReportpathToConversionCriteriaconversionDimensions;
    FcustomFloodlightVariables : TReportpathToConversionCriteriacustomFloodlightVariables;
    FcustomRichMediaEvents : TReportpathToConversionCriteriacustomRichMediaEvents;
    FdateRange : TDateRange;
    FfloodlightConfigId : TDimensionValue;
    FmetricNames : TReportpathToConversionCriteriametricNames;
    FperInteractionDimensions : TReportpathToConversionCriteriaperInteractionDimensions;
    FreportProperties : TReportpathToConversionCriteriareportProperties;
  Protected
    //Property setters
    Procedure SetactivityFilters(AIndex : Integer; AValue : TReportpathToConversionCriteriaactivityFilters); virtual;
    Procedure SetconversionDimensions(AIndex : Integer; AValue : TReportpathToConversionCriteriaconversionDimensions); virtual;
    Procedure SetcustomFloodlightVariables(AIndex : Integer; AValue : TReportpathToConversionCriteriacustomFloodlightVariables); virtual;
    Procedure SetcustomRichMediaEvents(AIndex : Integer; AValue : TReportpathToConversionCriteriacustomRichMediaEvents); virtual;
    Procedure SetdateRange(AIndex : Integer; AValue : TDateRange); virtual;
    Procedure SetfloodlightConfigId(AIndex : Integer; AValue : TDimensionValue); virtual;
    Procedure SetmetricNames(AIndex : Integer; AValue : TReportpathToConversionCriteriametricNames); virtual;
    Procedure SetperInteractionDimensions(AIndex : Integer; AValue : TReportpathToConversionCriteriaperInteractionDimensions); virtual;
    Procedure SetreportProperties(AIndex : Integer; AValue : TReportpathToConversionCriteriareportProperties); virtual;
  Public
  Published
    Property activityFilters : TReportpathToConversionCriteriaactivityFilters Index 0 Read FactivityFilters Write SetactivityFilters;
    Property conversionDimensions : TReportpathToConversionCriteriaconversionDimensions Index 8 Read FconversionDimensions Write SetconversionDimensions;
    Property customFloodlightVariables : TReportpathToConversionCriteriacustomFloodlightVariables Index 16 Read FcustomFloodlightVariables Write SetcustomFloodlightVariables;
    Property customRichMediaEvents : TReportpathToConversionCriteriacustomRichMediaEvents Index 24 Read FcustomRichMediaEvents Write SetcustomRichMediaEvents;
    Property dateRange : TDateRange Index 32 Read FdateRange Write SetdateRange;
    Property floodlightConfigId : TDimensionValue Index 40 Read FfloodlightConfigId Write SetfloodlightConfigId;
    Property metricNames : TReportpathToConversionCriteriametricNames Index 48 Read FmetricNames Write SetmetricNames;
    Property perInteractionDimensions : TReportpathToConversionCriteriaperInteractionDimensions Index 56 Read FperInteractionDimensions Write SetperInteractionDimensions;
    Property reportProperties : TReportpathToConversionCriteriareportProperties Index 64 Read FreportProperties Write SetreportProperties;
  end;
  TReportpathToConversionCriteriaClass = Class of TReportpathToConversionCriteria;
  
  { --------------------------------------------------------------------
    TReportpathToConversionCriteriaactivityFilters
    --------------------------------------------------------------------}
  
  TReportpathToConversionCriteriaactivityFilters = Class(TGoogleBaseObject)
  Private
  Protected
    //Property setters
  Public
  Published
  end;
  TReportpathToConversionCriteriaactivityFiltersClass = Class of TReportpathToConversionCriteriaactivityFilters;
  
  { --------------------------------------------------------------------
    TReportpathToConversionCriteriaconversionDimensions
    --------------------------------------------------------------------}
  
  TReportpathToConversionCriteriaconversionDimensions = Class(TGoogleBaseObject)
  Private
  Protected
    //Property setters
  Public
  Published
  end;
  TReportpathToConversionCriteriaconversionDimensionsClass = Class of TReportpathToConversionCriteriaconversionDimensions;
  
  { --------------------------------------------------------------------
    TReportpathToConversionCriteriacustomFloodlightVariables
    --------------------------------------------------------------------}
  
  TReportpathToConversionCriteriacustomFloodlightVariables = Class(TGoogleBaseObject)
  Private
  Protected
    //Property setters
  Public
  Published
  end;
  TReportpathToConversionCriteriacustomFloodlightVariablesClass = Class of TReportpathToConversionCriteriacustomFloodlightVariables;
  
  { --------------------------------------------------------------------
    TReportpathToConversionCriteriacustomRichMediaEvents
    --------------------------------------------------------------------}
  
  TReportpathToConversionCriteriacustomRichMediaEvents = Class(TGoogleBaseObject)
  Private
  Protected
    //Property setters
  Public
  Published
  end;
  TReportpathToConversionCriteriacustomRichMediaEventsClass = Class of TReportpathToConversionCriteriacustomRichMediaEvents;
  
  { --------------------------------------------------------------------
    TReportpathToConversionCriteriametricNames
    --------------------------------------------------------------------}
  
  TReportpathToConversionCriteriametricNames = Class(TGoogleBaseObject)
  Private
  Protected
    //Property setters
  Public
  Published
  end;
  TReportpathToConversionCriteriametricNamesClass = Class of TReportpathToConversionCriteriametricNames;
  
  { --------------------------------------------------------------------
    TReportpathToConversionCriteriaperInteractionDimensions
    --------------------------------------------------------------------}
  
  TReportpathToConversionCriteriaperInteractionDimensions = Class(TGoogleBaseObject)
  Private
  Protected
    //Property setters
  Public
  Published
  end;
  TReportpathToConversionCriteriaperInteractionDimensionsClass = Class of TReportpathToConversionCriteriaperInteractionDimensions;
  
  { --------------------------------------------------------------------
    TReportpathToConversionCriteriareportProperties
    --------------------------------------------------------------------}
  
  TReportpathToConversionCriteriareportProperties = Class(TGoogleBaseObject)
  Private
    FclicksLookbackWindow : integer;
    FimpressionsLookbackWindow : integer;
    FincludeAttributedIPConversions : boolean;
    FincludeUnattributedCookieConversions : boolean;
    FincludeUnattributedIPConversions : boolean;
    FmaximumClickInteractions : integer;
    FmaximumImpressionInteractions : integer;
    FmaximumInteractionGap : integer;
    FpivotOnInteractionPath : boolean;
  Protected
    //Property setters
    Procedure SetclicksLookbackWindow(AIndex : Integer; AValue : integer); virtual;
    Procedure SetimpressionsLookbackWindow(AIndex : Integer; AValue : integer); virtual;
    Procedure SetincludeAttributedIPConversions(AIndex : Integer; AValue : boolean); virtual;
    Procedure SetincludeUnattributedCookieConversions(AIndex : Integer; AValue : boolean); virtual;
    Procedure SetincludeUnattributedIPConversions(AIndex : Integer; AValue : boolean); virtual;
    Procedure SetmaximumClickInteractions(AIndex : Integer; AValue : integer); virtual;
    Procedure SetmaximumImpressionInteractions(AIndex : Integer; AValue : integer); virtual;
    Procedure SetmaximumInteractionGap(AIndex : Integer; AValue : integer); virtual;
    Procedure SetpivotOnInteractionPath(AIndex : Integer; AValue : boolean); virtual;
  Public
  Published
    Property clicksLookbackWindow : integer Index 0 Read FclicksLookbackWindow Write SetclicksLookbackWindow;
    Property impressionsLookbackWindow : integer Index 8 Read FimpressionsLookbackWindow Write SetimpressionsLookbackWindow;
    Property includeAttributedIPConversions : boolean Index 16 Read FincludeAttributedIPConversions Write SetincludeAttributedIPConversions;
    Property includeUnattributedCookieConversions : boolean Index 24 Read FincludeUnattributedCookieConversions Write SetincludeUnattributedCookieConversions;
    Property includeUnattributedIPConversions : boolean Index 32 Read FincludeUnattributedIPConversions Write SetincludeUnattributedIPConversions;
    Property maximumClickInteractions : integer Index 40 Read FmaximumClickInteractions Write SetmaximumClickInteractions;
    Property maximumImpressionInteractions : integer Index 48 Read FmaximumImpressionInteractions Write SetmaximumImpressionInteractions;
    Property maximumInteractionGap : integer Index 56 Read FmaximumInteractionGap Write SetmaximumInteractionGap;
    Property pivotOnInteractionPath : boolean Index 64 Read FpivotOnInteractionPath Write SetpivotOnInteractionPath;
  end;
  TReportpathToConversionCriteriareportPropertiesClass = Class of TReportpathToConversionCriteriareportProperties;
  
  { --------------------------------------------------------------------
    TReportreachCriteria
    --------------------------------------------------------------------}
  
  TReportreachCriteria = Class(TGoogleBaseObject)
  Private
    Factivities : TActivities;
    FcustomRichMediaEvents : TCustomRichMediaEvents;
    FdateRange : TDateRange;
    FdimensionFilters : TReportreachCriteriadimensionFilters;
    Fdimensions : TReportreachCriteriadimensions;
    FenableAllDimensionCombinations : boolean;
    FmetricNames : TReportreachCriteriametricNames;
    FreachByFrequencyMetricNames : TReportreachCriteriareachByFrequencyMetricNames;
  Protected
    //Property setters
    Procedure Setactivities(AIndex : Integer; AValue : TActivities); virtual;
    Procedure SetcustomRichMediaEvents(AIndex : Integer; AValue : TCustomRichMediaEvents); virtual;
    Procedure SetdateRange(AIndex : Integer; AValue : TDateRange); virtual;
    Procedure SetdimensionFilters(AIndex : Integer; AValue : TReportreachCriteriadimensionFilters); virtual;
    Procedure Setdimensions(AIndex : Integer; AValue : TReportreachCriteriadimensions); virtual;
    Procedure SetenableAllDimensionCombinations(AIndex : Integer; AValue : boolean); virtual;
    Procedure SetmetricNames(AIndex : Integer; AValue : TReportreachCriteriametricNames); virtual;
    Procedure SetreachByFrequencyMetricNames(AIndex : Integer; AValue : TReportreachCriteriareachByFrequencyMetricNames); virtual;
  Public
  Published
    Property activities : TActivities Index 0 Read Factivities Write Setactivities;
    Property customRichMediaEvents : TCustomRichMediaEvents Index 8 Read FcustomRichMediaEvents Write SetcustomRichMediaEvents;
    Property dateRange : TDateRange Index 16 Read FdateRange Write SetdateRange;
    Property dimensionFilters : TReportreachCriteriadimensionFilters Index 24 Read FdimensionFilters Write SetdimensionFilters;
    Property dimensions : TReportreachCriteriadimensions Index 32 Read Fdimensions Write Setdimensions;
    Property enableAllDimensionCombinations : boolean Index 40 Read FenableAllDimensionCombinations Write SetenableAllDimensionCombinations;
    Property metricNames : TReportreachCriteriametricNames Index 48 Read FmetricNames Write SetmetricNames;
    Property reachByFrequencyMetricNames : TReportreachCriteriareachByFrequencyMetricNames Index 56 Read FreachByFrequencyMetricNames Write SetreachByFrequencyMetricNames;
  end;
  TReportreachCriteriaClass = Class of TReportreachCriteria;
  
  { --------------------------------------------------------------------
    TReportreachCriteriadimensionFilters
    --------------------------------------------------------------------}
  
  TReportreachCriteriadimensionFilters = Class(TGoogleBaseObject)
  Private
  Protected
    //Property setters
  Public
  Published
  end;
  TReportreachCriteriadimensionFiltersClass = Class of TReportreachCriteriadimensionFilters;
  
  { --------------------------------------------------------------------
    TReportreachCriteriadimensions
    --------------------------------------------------------------------}
  
  TReportreachCriteriadimensions = Class(TGoogleBaseObject)
  Private
  Protected
    //Property setters
  Public
  Published
  end;
  TReportreachCriteriadimensionsClass = Class of TReportreachCriteriadimensions;
  
  { --------------------------------------------------------------------
    TReportreachCriteriametricNames
    --------------------------------------------------------------------}
  
  TReportreachCriteriametricNames = Class(TGoogleBaseObject)
  Private
  Protected
    //Property setters
  Public
  Published
  end;
  TReportreachCriteriametricNamesClass = Class of TReportreachCriteriametricNames;
  
  { --------------------------------------------------------------------
    TReportreachCriteriareachByFrequencyMetricNames
    --------------------------------------------------------------------}
  
  TReportreachCriteriareachByFrequencyMetricNames = Class(TGoogleBaseObject)
  Private
  Protected
    //Property setters
  Public
  Published
  end;
  TReportreachCriteriareachByFrequencyMetricNamesClass = Class of TReportreachCriteriareachByFrequencyMetricNames;
  
  { --------------------------------------------------------------------
    TReportschedule
    --------------------------------------------------------------------}
  
  TReportschedule = Class(TGoogleBaseObject)
  Private
    Factive : boolean;
    Fevery : integer;
    FexpirationDate : TDate;
    Frepeats : string;
    FrepeatsOnWeekDays : TReportschedulerepeatsOnWeekDays;
    FrunsOnDayOfMonth : string;
    FstartDate : TDate;
  Protected
    //Property setters
    Procedure Setactive(AIndex : Integer; AValue : boolean); virtual;
    Procedure Setevery(AIndex : Integer; AValue : integer); virtual;
    Procedure SetexpirationDate(AIndex : Integer; AValue : TDate); virtual;
    Procedure Setrepeats(AIndex : Integer; AValue : string); virtual;
    Procedure SetrepeatsOnWeekDays(AIndex : Integer; AValue : TReportschedulerepeatsOnWeekDays); virtual;
    Procedure SetrunsOnDayOfMonth(AIndex : Integer; AValue : string); virtual;
    Procedure SetstartDate(AIndex : Integer; AValue : TDate); virtual;
  Public
  Published
    Property active : boolean Index 0 Read Factive Write Setactive;
    Property every : integer Index 8 Read Fevery Write Setevery;
    Property expirationDate : TDate Index 16 Read FexpirationDate Write SetexpirationDate;
    Property repeats : string Index 24 Read Frepeats Write Setrepeats;
    Property repeatsOnWeekDays : TReportschedulerepeatsOnWeekDays Index 32 Read FrepeatsOnWeekDays Write SetrepeatsOnWeekDays;
    Property runsOnDayOfMonth : string Index 40 Read FrunsOnDayOfMonth Write SetrunsOnDayOfMonth;
    Property startDate : TDate Index 48 Read FstartDate Write SetstartDate;
  end;
  TReportscheduleClass = Class of TReportschedule;
  
  { --------------------------------------------------------------------
    TReportschedulerepeatsOnWeekDays
    --------------------------------------------------------------------}
  
  TReportschedulerepeatsOnWeekDays = Class(TGoogleBaseObject)
  Private
  Protected
    //Property setters
  Public
  Published
  end;
  TReportschedulerepeatsOnWeekDaysClass = Class of TReportschedulerepeatsOnWeekDays;
  
  { --------------------------------------------------------------------
    TReportCompatibleFields
    --------------------------------------------------------------------}
  
  TReportCompatibleFields = Class(TGoogleBaseObject)
  Private
    FdimensionFilters : TReportCompatibleFieldsdimensionFilters;
    Fdimensions : TReportCompatibleFieldsdimensions;
    Fkind : string;
    Fmetrics : TReportCompatibleFieldsmetrics;
    FpivotedActivityMetrics : TReportCompatibleFieldspivotedActivityMetrics;
  Protected
    //Property setters
    Procedure SetdimensionFilters(AIndex : Integer; AValue : TReportCompatibleFieldsdimensionFilters); virtual;
    Procedure Setdimensions(AIndex : Integer; AValue : TReportCompatibleFieldsdimensions); virtual;
    Procedure Setkind(AIndex : Integer; AValue : string); virtual;
    Procedure Setmetrics(AIndex : Integer; AValue : TReportCompatibleFieldsmetrics); virtual;
    Procedure SetpivotedActivityMetrics(AIndex : Integer; AValue : TReportCompatibleFieldspivotedActivityMetrics); virtual;
  Public
  Published
    Property dimensionFilters : TReportCompatibleFieldsdimensionFilters Index 0 Read FdimensionFilters Write SetdimensionFilters;
    Property dimensions : TReportCompatibleFieldsdimensions Index 8 Read Fdimensions Write Setdimensions;
    Property kind : string Index 16 Read Fkind Write Setkind;
    Property metrics : TReportCompatibleFieldsmetrics Index 24 Read Fmetrics Write Setmetrics;
    Property pivotedActivityMetrics : TReportCompatibleFieldspivotedActivityMetrics Index 32 Read FpivotedActivityMetrics Write SetpivotedActivityMetrics;
  end;
  TReportCompatibleFieldsClass = Class of TReportCompatibleFields;
  
  { --------------------------------------------------------------------
    TReportCompatibleFieldsdimensionFilters
    --------------------------------------------------------------------}
  
  TReportCompatibleFieldsdimensionFilters = Class(TGoogleBaseObject)
  Private
  Protected
    //Property setters
  Public
  Published
  end;
  TReportCompatibleFieldsdimensionFiltersClass = Class of TReportCompatibleFieldsdimensionFilters;
  
  { --------------------------------------------------------------------
    TReportCompatibleFieldsdimensions
    --------------------------------------------------------------------}
  
  TReportCompatibleFieldsdimensions = Class(TGoogleBaseObject)
  Private
  Protected
    //Property setters
  Public
  Published
  end;
  TReportCompatibleFieldsdimensionsClass = Class of TReportCompatibleFieldsdimensions;
  
  { --------------------------------------------------------------------
    TReportCompatibleFieldsmetrics
    --------------------------------------------------------------------}
  
  TReportCompatibleFieldsmetrics = Class(TGoogleBaseObject)
  Private
  Protected
    //Property setters
  Public
  Published
  end;
  TReportCompatibleFieldsmetricsClass = Class of TReportCompatibleFieldsmetrics;
  
  { --------------------------------------------------------------------
    TReportCompatibleFieldspivotedActivityMetrics
    --------------------------------------------------------------------}
  
  TReportCompatibleFieldspivotedActivityMetrics = Class(TGoogleBaseObject)
  Private
  Protected
    //Property setters
  Public
  Published
  end;
  TReportCompatibleFieldspivotedActivityMetricsClass = Class of TReportCompatibleFieldspivotedActivityMetrics;
  
  { --------------------------------------------------------------------
    TReportList
    --------------------------------------------------------------------}
  
  TReportList = Class(TGoogleBaseObject)
  Private
    Fetag : string;
    Fitems : TReportListitems;
    Fkind : string;
    FnextPageToken : string;
  Protected
    //Property setters
    Procedure Setetag(AIndex : Integer; AValue : string); virtual;
    Procedure Setitems(AIndex : Integer; AValue : TReportListitems); virtual;
    Procedure Setkind(AIndex : Integer; AValue : string); virtual;
    Procedure SetnextPageToken(AIndex : Integer; AValue : string); virtual;
  Public
  Published
    Property etag : string Index 0 Read Fetag Write Setetag;
    Property items : TReportListitems Index 8 Read Fitems Write Setitems;
    Property kind : string Index 16 Read Fkind Write Setkind;
    Property nextPageToken : string Index 24 Read FnextPageToken Write SetnextPageToken;
  end;
  TReportListClass = Class of TReportList;
  
  { --------------------------------------------------------------------
    TReportListitems
    --------------------------------------------------------------------}
  
  TReportListitems = Class(TGoogleBaseObject)
  Private
  Protected
    //Property setters
  Public
  Published
  end;
  TReportListitemsClass = Class of TReportListitems;
  
  { --------------------------------------------------------------------
    TReportsConfiguration
    --------------------------------------------------------------------}
  
  TReportsConfiguration = Class(TGoogleBaseObject)
  Private
    FexposureToConversionEnabled : boolean;
    FlookbackConfiguration : TLookbackConfiguration;
    FreportGenerationTimeZoneId : string;
  Protected
    //Property setters
    Procedure SetexposureToConversionEnabled(AIndex : Integer; AValue : boolean); virtual;
    Procedure SetlookbackConfiguration(AIndex : Integer; AValue : TLookbackConfiguration); virtual;
    Procedure SetreportGenerationTimeZoneId(AIndex : Integer; AValue : string); virtual;
  Public
  Published
    Property exposureToConversionEnabled : boolean Index 0 Read FexposureToConversionEnabled Write SetexposureToConversionEnabled;
    Property lookbackConfiguration : TLookbackConfiguration Index 8 Read FlookbackConfiguration Write SetlookbackConfiguration;
    Property reportGenerationTimeZoneId : string Index 16 Read FreportGenerationTimeZoneId Write SetreportGenerationTimeZoneId;
  end;
  TReportsConfigurationClass = Class of TReportsConfiguration;
  
  { --------------------------------------------------------------------
    TRichMediaExitOverride
    --------------------------------------------------------------------}
  
  TRichMediaExitOverride = Class(TGoogleBaseObject)
  Private
    FcustomExitUrl : string;
    FexitId : string;
    FuseCustomExitUrl : boolean;
  Protected
    //Property setters
    Procedure SetcustomExitUrl(AIndex : Integer; AValue : string); virtual;
    Procedure SetexitId(AIndex : Integer; AValue : string); virtual;
    Procedure SetuseCustomExitUrl(AIndex : Integer; AValue : boolean); virtual;
  Public
  Published
    Property customExitUrl : string Index 0 Read FcustomExitUrl Write SetcustomExitUrl;
    Property exitId : string Index 8 Read FexitId Write SetexitId;
    Property useCustomExitUrl : boolean Index 16 Read FuseCustomExitUrl Write SetuseCustomExitUrl;
  end;
  TRichMediaExitOverrideClass = Class of TRichMediaExitOverride;
  
  { --------------------------------------------------------------------
    TSite
    --------------------------------------------------------------------}
  
  TSite = Class(TGoogleBaseObject)
  Private
    FaccountId : string;
    Fapproved : boolean;
    FdirectorySiteId : string;
    FdirectorySiteIdDimensionValue : TDimensionValue;
    Fid : string;
    FidDimensionValue : TDimensionValue;
    FkeyName : string;
    Fkind : string;
    Fname : string;
    FsiteContacts : TSitesiteContacts;
    FsiteSettings : TSiteSettings;
    FsubaccountId : string;
  Protected
    //Property setters
    Procedure SetaccountId(AIndex : Integer; AValue : string); virtual;
    Procedure Setapproved(AIndex : Integer; AValue : boolean); virtual;
    Procedure SetdirectorySiteId(AIndex : Integer; AValue : string); virtual;
    Procedure SetdirectorySiteIdDimensionValue(AIndex : Integer; AValue : TDimensionValue); virtual;
    Procedure Setid(AIndex : Integer; AValue : string); virtual;
    Procedure SetidDimensionValue(AIndex : Integer; AValue : TDimensionValue); virtual;
    Procedure SetkeyName(AIndex : Integer; AValue : string); virtual;
    Procedure Setkind(AIndex : Integer; AValue : string); virtual;
    Procedure Setname(AIndex : Integer; AValue : string); virtual;
    Procedure SetsiteContacts(AIndex : Integer; AValue : TSitesiteContacts); virtual;
    Procedure SetsiteSettings(AIndex : Integer; AValue : TSiteSettings); virtual;
    Procedure SetsubaccountId(AIndex : Integer; AValue : string); virtual;
  Public
  Published
    Property accountId : string Index 0 Read FaccountId Write SetaccountId;
    Property approved : boolean Index 8 Read Fapproved Write Setapproved;
    Property directorySiteId : string Index 16 Read FdirectorySiteId Write SetdirectorySiteId;
    Property directorySiteIdDimensionValue : TDimensionValue Index 24 Read FdirectorySiteIdDimensionValue Write SetdirectorySiteIdDimensionValue;
    Property id : string Index 32 Read Fid Write Setid;
    Property idDimensionValue : TDimensionValue Index 40 Read FidDimensionValue Write SetidDimensionValue;
    Property keyName : string Index 48 Read FkeyName Write SetkeyName;
    Property kind : string Index 56 Read Fkind Write Setkind;
    Property name : string Index 64 Read Fname Write Setname;
    Property siteContacts : TSitesiteContacts Index 72 Read FsiteContacts Write SetsiteContacts;
    Property siteSettings : TSiteSettings Index 80 Read FsiteSettings Write SetsiteSettings;
    Property subaccountId : string Index 88 Read FsubaccountId Write SetsubaccountId;
  end;
  TSiteClass = Class of TSite;
  
  { --------------------------------------------------------------------
    TSitesiteContacts
    --------------------------------------------------------------------}
  
  TSitesiteContacts = Class(TGoogleBaseObject)
  Private
  Protected
    //Property setters
  Public
  Published
  end;
  TSitesiteContactsClass = Class of TSitesiteContacts;
  
  { --------------------------------------------------------------------
    TSiteContact
    --------------------------------------------------------------------}
  
  TSiteContact = Class(TGoogleBaseObject)
  Private
    Faddress : string;
    FcontactType : string;
    Femail : string;
    FfirstName : string;
    Fid : string;
    FlastName : string;
    Fphone : string;
    Ftitle : string;
  Protected
    //Property setters
    Procedure Setaddress(AIndex : Integer; AValue : string); virtual;
    Procedure SetcontactType(AIndex : Integer; AValue : string); virtual;
    Procedure Setemail(AIndex : Integer; AValue : string); virtual;
    Procedure SetfirstName(AIndex : Integer; AValue : string); virtual;
    Procedure Setid(AIndex : Integer; AValue : string); virtual;
    Procedure SetlastName(AIndex : Integer; AValue : string); virtual;
    Procedure Setphone(AIndex : Integer; AValue : string); virtual;
    Procedure Settitle(AIndex : Integer; AValue : string); virtual;
  Public
  Published
    Property address : string Index 0 Read Faddress Write Setaddress;
    Property contactType : string Index 8 Read FcontactType Write SetcontactType;
    Property email : string Index 16 Read Femail Write Setemail;
    Property firstName : string Index 24 Read FfirstName Write SetfirstName;
    Property id : string Index 32 Read Fid Write Setid;
    Property lastName : string Index 40 Read FlastName Write SetlastName;
    Property phone : string Index 48 Read Fphone Write Setphone;
    Property title : string Index 56 Read Ftitle Write Settitle;
  end;
  TSiteContactClass = Class of TSiteContact;
  
  { --------------------------------------------------------------------
    TSiteSettings
    --------------------------------------------------------------------}
  
  TSiteSettings = Class(TGoogleBaseObject)
  Private
    FactiveViewOptOut : boolean;
    FcreativeSettings : TCreativeSettings;
    FdisableBrandSafeAds : boolean;
    FdisableNewCookie : boolean;
    FlookbackConfiguration : TLookbackConfiguration;
    FtagSetting : TTagSetting;
  Protected
    //Property setters
    Procedure SetactiveViewOptOut(AIndex : Integer; AValue : boolean); virtual;
    Procedure SetcreativeSettings(AIndex : Integer; AValue : TCreativeSettings); virtual;
    Procedure SetdisableBrandSafeAds(AIndex : Integer; AValue : boolean); virtual;
    Procedure SetdisableNewCookie(AIndex : Integer; AValue : boolean); virtual;
    Procedure SetlookbackConfiguration(AIndex : Integer; AValue : TLookbackConfiguration); virtual;
    Procedure SettagSetting(AIndex : Integer; AValue : TTagSetting); virtual;
  Public
  Published
    Property activeViewOptOut : boolean Index 0 Read FactiveViewOptOut Write SetactiveViewOptOut;
    Property creativeSettings : TCreativeSettings Index 8 Read FcreativeSettings Write SetcreativeSettings;
    Property disableBrandSafeAds : boolean Index 16 Read FdisableBrandSafeAds Write SetdisableBrandSafeAds;
    Property disableNewCookie : boolean Index 24 Read FdisableNewCookie Write SetdisableNewCookie;
    Property lookbackConfiguration : TLookbackConfiguration Index 32 Read FlookbackConfiguration Write SetlookbackConfiguration;
    Property tagSetting : TTagSetting Index 40 Read FtagSetting Write SettagSetting;
  end;
  TSiteSettingsClass = Class of TSiteSettings;
  
  { --------------------------------------------------------------------
    TSitesListResponse
    --------------------------------------------------------------------}
  
  TSitesListResponse = Class(TGoogleBaseObject)
  Private
    Fkind : string;
    FnextPageToken : string;
    Fsites : TSitesListResponsesites;
  Protected
    //Property setters
    Procedure Setkind(AIndex : Integer; AValue : string); virtual;
    Procedure SetnextPageToken(AIndex : Integer; AValue : string); virtual;
    Procedure Setsites(AIndex : Integer; AValue : TSitesListResponsesites); virtual;
  Public
  Published
    Property kind : string Index 0 Read Fkind Write Setkind;
    Property nextPageToken : string Index 8 Read FnextPageToken Write SetnextPageToken;
    Property sites : TSitesListResponsesites Index 16 Read Fsites Write Setsites;
  end;
  TSitesListResponseClass = Class of TSitesListResponse;
  
  { --------------------------------------------------------------------
    TSitesListResponsesites
    --------------------------------------------------------------------}
  
  TSitesListResponsesites = Class(TGoogleBaseObject)
  Private
  Protected
    //Property setters
  Public
  Published
  end;
  TSitesListResponsesitesClass = Class of TSitesListResponsesites;
  
  { --------------------------------------------------------------------
    TSize
    --------------------------------------------------------------------}
  
  TSize = Class(TGoogleBaseObject)
  Private
    Fheight : integer;
    Fiab : boolean;
    Fid : string;
    Fkind : string;
    Fwidth : integer;
  Protected
    //Property setters
    Procedure Setheight(AIndex : Integer; AValue : integer); virtual;
    Procedure Setiab(AIndex : Integer; AValue : boolean); virtual;
    Procedure Setid(AIndex : Integer; AValue : string); virtual;
    Procedure Setkind(AIndex : Integer; AValue : string); virtual;
    Procedure Setwidth(AIndex : Integer; AValue : integer); virtual;
  Public
  Published
    Property height : integer Index 0 Read Fheight Write Setheight;
    Property iab : boolean Index 8 Read Fiab Write Setiab;
    Property id : string Index 16 Read Fid Write Setid;
    Property kind : string Index 24 Read Fkind Write Setkind;
    Property width : integer Index 32 Read Fwidth Write Setwidth;
  end;
  TSizeClass = Class of TSize;
  
  { --------------------------------------------------------------------
    TSizesListResponse
    --------------------------------------------------------------------}
  
  TSizesListResponse = Class(TGoogleBaseObject)
  Private
    Fkind : string;
    Fsizes : TSizesListResponsesizes;
  Protected
    //Property setters
    Procedure Setkind(AIndex : Integer; AValue : string); virtual;
    Procedure Setsizes(AIndex : Integer; AValue : TSizesListResponsesizes); virtual;
  Public
  Published
    Property kind : string Index 0 Read Fkind Write Setkind;
    Property sizes : TSizesListResponsesizes Index 8 Read Fsizes Write Setsizes;
  end;
  TSizesListResponseClass = Class of TSizesListResponse;
  
  { --------------------------------------------------------------------
    TSizesListResponsesizes
    --------------------------------------------------------------------}
  
  TSizesListResponsesizes = Class(TGoogleBaseObject)
  Private
  Protected
    //Property setters
  Public
  Published
  end;
  TSizesListResponsesizesClass = Class of TSizesListResponsesizes;
  
  { --------------------------------------------------------------------
    TSortedDimension
    --------------------------------------------------------------------}
  
  TSortedDimension = Class(TGoogleBaseObject)
  Private
    Fkind : string;
    Fname : string;
    FsortOrder : string;
  Protected
    //Property setters
    Procedure Setkind(AIndex : Integer; AValue : string); virtual;
    Procedure Setname(AIndex : Integer; AValue : string); virtual;
    Procedure SetsortOrder(AIndex : Integer; AValue : string); virtual;
  Public
  Published
    Property kind : string Index 0 Read Fkind Write Setkind;
    Property name : string Index 8 Read Fname Write Setname;
    Property sortOrder : string Index 16 Read FsortOrder Write SetsortOrder;
  end;
  TSortedDimensionClass = Class of TSortedDimension;
  
  { --------------------------------------------------------------------
    TSubaccount
    --------------------------------------------------------------------}
  
  TSubaccount = Class(TGoogleBaseObject)
  Private
    FaccountId : string;
    FavailablePermissionIds : TSubaccountavailablePermissionIds;
    Fid : string;
    Fkind : string;
    Fname : string;
  Protected
    //Property setters
    Procedure SetaccountId(AIndex : Integer; AValue : string); virtual;
    Procedure SetavailablePermissionIds(AIndex : Integer; AValue : TSubaccountavailablePermissionIds); virtual;
    Procedure Setid(AIndex : Integer; AValue : string); virtual;
    Procedure Setkind(AIndex : Integer; AValue : string); virtual;
    Procedure Setname(AIndex : Integer; AValue : string); virtual;
  Public
  Published
    Property accountId : string Index 0 Read FaccountId Write SetaccountId;
    Property availablePermissionIds : TSubaccountavailablePermissionIds Index 8 Read FavailablePermissionIds Write SetavailablePermissionIds;
    Property id : string Index 16 Read Fid Write Setid;
    Property kind : string Index 24 Read Fkind Write Setkind;
    Property name : string Index 32 Read Fname Write Setname;
  end;
  TSubaccountClass = Class of TSubaccount;
  
  { --------------------------------------------------------------------
    TSubaccountavailablePermissionIds
    --------------------------------------------------------------------}
  
  TSubaccountavailablePermissionIds = Class(TGoogleBaseObject)
  Private
  Protected
    //Property setters
  Public
  Published
  end;
  TSubaccountavailablePermissionIdsClass = Class of TSubaccountavailablePermissionIds;
  
  { --------------------------------------------------------------------
    TSubaccountsListResponse
    --------------------------------------------------------------------}
  
  TSubaccountsListResponse = Class(TGoogleBaseObject)
  Private
    Fkind : string;
    FnextPageToken : string;
    Fsubaccounts : TSubaccountsListResponsesubaccounts;
  Protected
    //Property setters
    Procedure Setkind(AIndex : Integer; AValue : string); virtual;
    Procedure SetnextPageToken(AIndex : Integer; AValue : string); virtual;
    Procedure Setsubaccounts(AIndex : Integer; AValue : TSubaccountsListResponsesubaccounts); virtual;
  Public
  Published
    Property kind : string Index 0 Read Fkind Write Setkind;
    Property nextPageToken : string Index 8 Read FnextPageToken Write SetnextPageToken;
    Property subaccounts : TSubaccountsListResponsesubaccounts Index 16 Read Fsubaccounts Write Setsubaccounts;
  end;
  TSubaccountsListResponseClass = Class of TSubaccountsListResponse;
  
  { --------------------------------------------------------------------
    TSubaccountsListResponsesubaccounts
    --------------------------------------------------------------------}
  
  TSubaccountsListResponsesubaccounts = Class(TGoogleBaseObject)
  Private
  Protected
    //Property setters
  Public
  Published
  end;
  TSubaccountsListResponsesubaccountsClass = Class of TSubaccountsListResponsesubaccounts;
  
  { --------------------------------------------------------------------
    TTagData
    --------------------------------------------------------------------}
  
  TTagData = Class(TGoogleBaseObject)
  Private
    FadId : string;
    FclickTag : string;
    FcreativeId : string;
    Fformat : string;
    FimpressionTag : string;
  Protected
    //Property setters
    Procedure SetadId(AIndex : Integer; AValue : string); virtual;
    Procedure SetclickTag(AIndex : Integer; AValue : string); virtual;
    Procedure SetcreativeId(AIndex : Integer; AValue : string); virtual;
    Procedure Setformat(AIndex : Integer; AValue : string); virtual;
    Procedure SetimpressionTag(AIndex : Integer; AValue : string); virtual;
  Public
  Published
    Property adId : string Index 0 Read FadId Write SetadId;
    Property clickTag : string Index 8 Read FclickTag Write SetclickTag;
    Property creativeId : string Index 16 Read FcreativeId Write SetcreativeId;
    Property format : string Index 24 Read Fformat Write Setformat;
    Property impressionTag : string Index 32 Read FimpressionTag Write SetimpressionTag;
  end;
  TTagDataClass = Class of TTagData;
  
  { --------------------------------------------------------------------
    TTagSetting
    --------------------------------------------------------------------}
  
  TTagSetting = Class(TGoogleBaseObject)
  Private
    FadditionalKeyValues : string;
    FincludeClickThroughUrls : boolean;
    FincludeClickTracking : boolean;
    FkeywordOption : string;
  Protected
    //Property setters
    Procedure SetadditionalKeyValues(AIndex : Integer; AValue : string); virtual;
    Procedure SetincludeClickThroughUrls(AIndex : Integer; AValue : boolean); virtual;
    Procedure SetincludeClickTracking(AIndex : Integer; AValue : boolean); virtual;
    Procedure SetkeywordOption(AIndex : Integer; AValue : string); virtual;
  Public
  Published
    Property additionalKeyValues : string Index 0 Read FadditionalKeyValues Write SetadditionalKeyValues;
    Property includeClickThroughUrls : boolean Index 8 Read FincludeClickThroughUrls Write SetincludeClickThroughUrls;
    Property includeClickTracking : boolean Index 16 Read FincludeClickTracking Write SetincludeClickTracking;
    Property keywordOption : string Index 24 Read FkeywordOption Write SetkeywordOption;
  end;
  TTagSettingClass = Class of TTagSetting;
  
  { --------------------------------------------------------------------
    TTagSettings
    --------------------------------------------------------------------}
  
  TTagSettings = Class(TGoogleBaseObject)
  Private
    FdynamicTagEnabled : boolean;
    FimageTagEnabled : boolean;
  Protected
    //Property setters
    Procedure SetdynamicTagEnabled(AIndex : Integer; AValue : boolean); virtual;
    Procedure SetimageTagEnabled(AIndex : Integer; AValue : boolean); virtual;
  Public
  Published
    Property dynamicTagEnabled : boolean Index 0 Read FdynamicTagEnabled Write SetdynamicTagEnabled;
    Property imageTagEnabled : boolean Index 8 Read FimageTagEnabled Write SetimageTagEnabled;
  end;
  TTagSettingsClass = Class of TTagSettings;
  
  { --------------------------------------------------------------------
    TTargetWindow
    --------------------------------------------------------------------}
  
  TTargetWindow = Class(TGoogleBaseObject)
  Private
    FcustomHtml : string;
    FtargetWindowOption : string;
  Protected
    //Property setters
    Procedure SetcustomHtml(AIndex : Integer; AValue : string); virtual;
    Procedure SettargetWindowOption(AIndex : Integer; AValue : string); virtual;
  Public
  Published
    Property customHtml : string Index 0 Read FcustomHtml Write SetcustomHtml;
    Property targetWindowOption : string Index 8 Read FtargetWindowOption Write SettargetWindowOption;
  end;
  TTargetWindowClass = Class of TTargetWindow;
  
  { --------------------------------------------------------------------
    TTargetableRemarketingList
    --------------------------------------------------------------------}
  
  TTargetableRemarketingList = Class(TGoogleBaseObject)
  Private
    FaccountId : string;
    Factive : boolean;
    FadvertiserId : string;
    FadvertiserIdDimensionValue : TDimensionValue;
    Fdescription : string;
    Fid : string;
    Fkind : string;
    FlifeSpan : string;
    FlistSize : string;
    FlistSource : string;
    Fname : string;
    FsubaccountId : string;
  Protected
    //Property setters
    Procedure SetaccountId(AIndex : Integer; AValue : string); virtual;
    Procedure Setactive(AIndex : Integer; AValue : boolean); virtual;
    Procedure SetadvertiserId(AIndex : Integer; AValue : string); virtual;
    Procedure SetadvertiserIdDimensionValue(AIndex : Integer; AValue : TDimensionValue); virtual;
    Procedure Setdescription(AIndex : Integer; AValue : string); virtual;
    Procedure Setid(AIndex : Integer; AValue : string); virtual;
    Procedure Setkind(AIndex : Integer; AValue : string); virtual;
    Procedure SetlifeSpan(AIndex : Integer; AValue : string); virtual;
    Procedure SetlistSize(AIndex : Integer; AValue : string); virtual;
    Procedure SetlistSource(AIndex : Integer; AValue : string); virtual;
    Procedure Setname(AIndex : Integer; AValue : string); virtual;
    Procedure SetsubaccountId(AIndex : Integer; AValue : string); virtual;
  Public
  Published
    Property accountId : string Index 0 Read FaccountId Write SetaccountId;
    Property active : boolean Index 8 Read Factive Write Setactive;
    Property advertiserId : string Index 16 Read FadvertiserId Write SetadvertiserId;
    Property advertiserIdDimensionValue : TDimensionValue Index 24 Read FadvertiserIdDimensionValue Write SetadvertiserIdDimensionValue;
    Property description : string Index 32 Read Fdescription Write Setdescription;
    Property id : string Index 40 Read Fid Write Setid;
    Property kind : string Index 48 Read Fkind Write Setkind;
    Property lifeSpan : string Index 56 Read FlifeSpan Write SetlifeSpan;
    Property listSize : string Index 64 Read FlistSize Write SetlistSize;
    Property listSource : string Index 72 Read FlistSource Write SetlistSource;
    Property name : string Index 80 Read Fname Write Setname;
    Property subaccountId : string Index 88 Read FsubaccountId Write SetsubaccountId;
  end;
  TTargetableRemarketingListClass = Class of TTargetableRemarketingList;
  
  { --------------------------------------------------------------------
    TTargetableRemarketingListsListResponse
    --------------------------------------------------------------------}
  
  TTargetableRemarketingListsListResponse = Class(TGoogleBaseObject)
  Private
    Fkind : string;
    FnextPageToken : string;
    FtargetableRemarketingLists : TTargetableRemarketingListsListResponsetargetableRemarketingLists;
  Protected
    //Property setters
    Procedure Setkind(AIndex : Integer; AValue : string); virtual;
    Procedure SetnextPageToken(AIndex : Integer; AValue : string); virtual;
    Procedure SettargetableRemarketingLists(AIndex : Integer; AValue : TTargetableRemarketingListsListResponsetargetableRemarketingLists); virtual;
  Public
  Published
    Property kind : string Index 0 Read Fkind Write Setkind;
    Property nextPageToken : string Index 8 Read FnextPageToken Write SetnextPageToken;
    Property targetableRemarketingLists : TTargetableRemarketingListsListResponsetargetableRemarketingLists Index 16 Read FtargetableRemarketingLists Write SettargetableRemarketingLists;
  end;
  TTargetableRemarketingListsListResponseClass = Class of TTargetableRemarketingListsListResponse;
  
  { --------------------------------------------------------------------
    TTargetableRemarketingListsListResponsetargetableRemarketingLists
    --------------------------------------------------------------------}
  
  TTargetableRemarketingListsListResponsetargetableRemarketingLists = Class(TGoogleBaseObject)
  Private
  Protected
    //Property setters
  Public
  Published
  end;
  TTargetableRemarketingListsListResponsetargetableRemarketingListsClass = Class of TTargetableRemarketingListsListResponsetargetableRemarketingLists;
  
  { --------------------------------------------------------------------
    TTechnologyTargeting
    --------------------------------------------------------------------}
  
  TTechnologyTargeting = Class(TGoogleBaseObject)
  Private
    Fbrowsers : TTechnologyTargetingbrowsers;
    FconnectionTypes : TTechnologyTargetingconnectionTypes;
    FmobileCarriers : TTechnologyTargetingmobileCarriers;
    FoperatingSystemVersions : TTechnologyTargetingoperatingSystemVersions;
    FoperatingSystems : TTechnologyTargetingoperatingSystems;
    FplatformTypes : TTechnologyTargetingplatformTypes;
  Protected
    //Property setters
    Procedure Setbrowsers(AIndex : Integer; AValue : TTechnologyTargetingbrowsers); virtual;
    Procedure SetconnectionTypes(AIndex : Integer; AValue : TTechnologyTargetingconnectionTypes); virtual;
    Procedure SetmobileCarriers(AIndex : Integer; AValue : TTechnologyTargetingmobileCarriers); virtual;
    Procedure SetoperatingSystemVersions(AIndex : Integer; AValue : TTechnologyTargetingoperatingSystemVersions); virtual;
    Procedure SetoperatingSystems(AIndex : Integer; AValue : TTechnologyTargetingoperatingSystems); virtual;
    Procedure SetplatformTypes(AIndex : Integer; AValue : TTechnologyTargetingplatformTypes); virtual;
  Public
  Published
    Property browsers : TTechnologyTargetingbrowsers Index 0 Read Fbrowsers Write Setbrowsers;
    Property connectionTypes : TTechnologyTargetingconnectionTypes Index 8 Read FconnectionTypes Write SetconnectionTypes;
    Property mobileCarriers : TTechnologyTargetingmobileCarriers Index 16 Read FmobileCarriers Write SetmobileCarriers;
    Property operatingSystemVersions : TTechnologyTargetingoperatingSystemVersions Index 24 Read FoperatingSystemVersions Write SetoperatingSystemVersions;
    Property operatingSystems : TTechnologyTargetingoperatingSystems Index 32 Read FoperatingSystems Write SetoperatingSystems;
    Property platformTypes : TTechnologyTargetingplatformTypes Index 40 Read FplatformTypes Write SetplatformTypes;
  end;
  TTechnologyTargetingClass = Class of TTechnologyTargeting;
  
  { --------------------------------------------------------------------
    TTechnologyTargetingbrowsers
    --------------------------------------------------------------------}
  
  TTechnologyTargetingbrowsers = Class(TGoogleBaseObject)
  Private
  Protected
    //Property setters
  Public
  Published
  end;
  TTechnologyTargetingbrowsersClass = Class of TTechnologyTargetingbrowsers;
  
  { --------------------------------------------------------------------
    TTechnologyTargetingconnectionTypes
    --------------------------------------------------------------------}
  
  TTechnologyTargetingconnectionTypes = Class(TGoogleBaseObject)
  Private
  Protected
    //Property setters
  Public
  Published
  end;
  TTechnologyTargetingconnectionTypesClass = Class of TTechnologyTargetingconnectionTypes;
  
  { --------------------------------------------------------------------
    TTechnologyTargetingmobileCarriers
    --------------------------------------------------------------------}
  
  TTechnologyTargetingmobileCarriers = Class(TGoogleBaseObject)
  Private
  Protected
    //Property setters
  Public
  Published
  end;
  TTechnologyTargetingmobileCarriersClass = Class of TTechnologyTargetingmobileCarriers;
  
  { --------------------------------------------------------------------
    TTechnologyTargetingoperatingSystemVersions
    --------------------------------------------------------------------}
  
  TTechnologyTargetingoperatingSystemVersions = Class(TGoogleBaseObject)
  Private
  Protected
    //Property setters
  Public
  Published
  end;
  TTechnologyTargetingoperatingSystemVersionsClass = Class of TTechnologyTargetingoperatingSystemVersions;
  
  { --------------------------------------------------------------------
    TTechnologyTargetingoperatingSystems
    --------------------------------------------------------------------}
  
  TTechnologyTargetingoperatingSystems = Class(TGoogleBaseObject)
  Private
  Protected
    //Property setters
  Public
  Published
  end;
  TTechnologyTargetingoperatingSystemsClass = Class of TTechnologyTargetingoperatingSystems;
  
  { --------------------------------------------------------------------
    TTechnologyTargetingplatformTypes
    --------------------------------------------------------------------}
  
  TTechnologyTargetingplatformTypes = Class(TGoogleBaseObject)
  Private
  Protected
    //Property setters
  Public
  Published
  end;
  TTechnologyTargetingplatformTypesClass = Class of TTechnologyTargetingplatformTypes;
  
  { --------------------------------------------------------------------
    TThirdPartyTrackingUrl
    --------------------------------------------------------------------}
  
  TThirdPartyTrackingUrl = Class(TGoogleBaseObject)
  Private
    FthirdPartyUrlType : string;
    Furl : string;
  Protected
    //Property setters
    Procedure SetthirdPartyUrlType(AIndex : Integer; AValue : string); virtual;
    Procedure Seturl(AIndex : Integer; AValue : string); virtual;
  Public
  Published
    Property thirdPartyUrlType : string Index 0 Read FthirdPartyUrlType Write SetthirdPartyUrlType;
    Property url : string Index 8 Read Furl Write Seturl;
  end;
  TThirdPartyTrackingUrlClass = Class of TThirdPartyTrackingUrl;
  
  { --------------------------------------------------------------------
    TUserDefinedVariableConfiguration
    --------------------------------------------------------------------}
  
  TUserDefinedVariableConfiguration = Class(TGoogleBaseObject)
  Private
    FdataType : string;
    FreportName : string;
    FvariableType : string;
  Protected
    //Property setters
    Procedure SetdataType(AIndex : Integer; AValue : string); virtual;
    Procedure SetreportName(AIndex : Integer; AValue : string); virtual;
    Procedure SetvariableType(AIndex : Integer; AValue : string); virtual;
  Public
  Published
    Property dataType : string Index 0 Read FdataType Write SetdataType;
    Property reportName : string Index 8 Read FreportName Write SetreportName;
    Property variableType : string Index 16 Read FvariableType Write SetvariableType;
  end;
  TUserDefinedVariableConfigurationClass = Class of TUserDefinedVariableConfiguration;
  
  { --------------------------------------------------------------------
    TUserProfile
    --------------------------------------------------------------------}
  
  TUserProfile = Class(TGoogleBaseObject)
  Private
    FaccountId : string;
    FaccountName : string;
    Fetag : string;
    Fkind : string;
    FprofileId : string;
    FsubAccountId : string;
    FsubAccountName : string;
    FuserName : string;
  Protected
    //Property setters
    Procedure SetaccountId(AIndex : Integer; AValue : string); virtual;
    Procedure SetaccountName(AIndex : Integer; AValue : string); virtual;
    Procedure Setetag(AIndex : Integer; AValue : string); virtual;
    Procedure Setkind(AIndex : Integer; AValue : string); virtual;
    Procedure SetprofileId(AIndex : Integer; AValue : string); virtual;
    Procedure SetsubAccountId(AIndex : Integer; AValue : string); virtual;
    Procedure SetsubAccountName(AIndex : Integer; AValue : string); virtual;
    Procedure SetuserName(AIndex : Integer; AValue : string); virtual;
  Public
  Published
    Property accountId : string Index 0 Read FaccountId Write SetaccountId;
    Property accountName : string Index 8 Read FaccountName Write SetaccountName;
    Property etag : string Index 16 Read Fetag Write Setetag;
    Property kind : string Index 24 Read Fkind Write Setkind;
    Property profileId : string Index 32 Read FprofileId Write SetprofileId;
    Property subAccountId : string Index 40 Read FsubAccountId Write SetsubAccountId;
    Property subAccountName : string Index 48 Read FsubAccountName Write SetsubAccountName;
    Property userName : string Index 56 Read FuserName Write SetuserName;
  end;
  TUserProfileClass = Class of TUserProfile;
  
  { --------------------------------------------------------------------
    TUserProfileList
    --------------------------------------------------------------------}
  
  TUserProfileList = Class(TGoogleBaseObject)
  Private
    Fetag : string;
    Fitems : TUserProfileListitems;
    Fkind : string;
  Protected
    //Property setters
    Procedure Setetag(AIndex : Integer; AValue : string); virtual;
    Procedure Setitems(AIndex : Integer; AValue : TUserProfileListitems); virtual;
    Procedure Setkind(AIndex : Integer; AValue : string); virtual;
  Public
  Published
    Property etag : string Index 0 Read Fetag Write Setetag;
    Property items : TUserProfileListitems Index 8 Read Fitems Write Setitems;
    Property kind : string Index 16 Read Fkind Write Setkind;
  end;
  TUserProfileListClass = Class of TUserProfileList;
  
  { --------------------------------------------------------------------
    TUserProfileListitems
    --------------------------------------------------------------------}
  
  TUserProfileListitems = Class(TGoogleBaseObject)
  Private
  Protected
    //Property setters
  Public
  Published
  end;
  TUserProfileListitemsClass = Class of TUserProfileListitems;
  
  { --------------------------------------------------------------------
    TUserRole
    --------------------------------------------------------------------}
  
  TUserRole = Class(TGoogleBaseObject)
  Private
    FaccountId : string;
    FdefaultUserRole : boolean;
    Fid : string;
    Fkind : string;
    Fname : string;
    FparentUserRoleId : string;
    Fpermissions : TUserRolepermissions;
    FsubaccountId : string;
  Protected
    //Property setters
    Procedure SetaccountId(AIndex : Integer; AValue : string); virtual;
    Procedure SetdefaultUserRole(AIndex : Integer; AValue : boolean); virtual;
    Procedure Setid(AIndex : Integer; AValue : string); virtual;
    Procedure Setkind(AIndex : Integer; AValue : string); virtual;
    Procedure Setname(AIndex : Integer; AValue : string); virtual;
    Procedure SetparentUserRoleId(AIndex : Integer; AValue : string); virtual;
    Procedure Setpermissions(AIndex : Integer; AValue : TUserRolepermissions); virtual;
    Procedure SetsubaccountId(AIndex : Integer; AValue : string); virtual;
  Public
  Published
    Property accountId : string Index 0 Read FaccountId Write SetaccountId;
    Property defaultUserRole : boolean Index 8 Read FdefaultUserRole Write SetdefaultUserRole;
    Property id : string Index 16 Read Fid Write Setid;
    Property kind : string Index 24 Read Fkind Write Setkind;
    Property name : string Index 32 Read Fname Write Setname;
    Property parentUserRoleId : string Index 40 Read FparentUserRoleId Write SetparentUserRoleId;
    Property permissions : TUserRolepermissions Index 48 Read Fpermissions Write Setpermissions;
    Property subaccountId : string Index 56 Read FsubaccountId Write SetsubaccountId;
  end;
  TUserRoleClass = Class of TUserRole;
  
  { --------------------------------------------------------------------
    TUserRolepermissions
    --------------------------------------------------------------------}
  
  TUserRolepermissions = Class(TGoogleBaseObject)
  Private
  Protected
    //Property setters
  Public
  Published
  end;
  TUserRolepermissionsClass = Class of TUserRolepermissions;
  
  { --------------------------------------------------------------------
    TUserRolePermission
    --------------------------------------------------------------------}
  
  TUserRolePermission = Class(TGoogleBaseObject)
  Private
    Favailability : string;
    Fid : string;
    Fkind : string;
    Fname : string;
    FpermissionGroupId : string;
  Protected
    //Property setters
    Procedure Setavailability(AIndex : Integer; AValue : string); virtual;
    Procedure Setid(AIndex : Integer; AValue : string); virtual;
    Procedure Setkind(AIndex : Integer; AValue : string); virtual;
    Procedure Setname(AIndex : Integer; AValue : string); virtual;
    Procedure SetpermissionGroupId(AIndex : Integer; AValue : string); virtual;
  Public
  Published
    Property availability : string Index 0 Read Favailability Write Setavailability;
    Property id : string Index 8 Read Fid Write Setid;
    Property kind : string Index 16 Read Fkind Write Setkind;
    Property name : string Index 24 Read Fname Write Setname;
    Property permissionGroupId : string Index 32 Read FpermissionGroupId Write SetpermissionGroupId;
  end;
  TUserRolePermissionClass = Class of TUserRolePermission;
  
  { --------------------------------------------------------------------
    TUserRolePermissionGroup
    --------------------------------------------------------------------}
  
  TUserRolePermissionGroup = Class(TGoogleBaseObject)
  Private
    Fid : string;
    Fkind : string;
    Fname : string;
  Protected
    //Property setters
    Procedure Setid(AIndex : Integer; AValue : string); virtual;
    Procedure Setkind(AIndex : Integer; AValue : string); virtual;
    Procedure Setname(AIndex : Integer; AValue : string); virtual;
  Public
  Published
    Property id : string Index 0 Read Fid Write Setid;
    Property kind : string Index 8 Read Fkind Write Setkind;
    Property name : string Index 16 Read Fname Write Setname;
  end;
  TUserRolePermissionGroupClass = Class of TUserRolePermissionGroup;
  
  { --------------------------------------------------------------------
    TUserRolePermissionGroupsListResponse
    --------------------------------------------------------------------}
  
  TUserRolePermissionGroupsListResponse = Class(TGoogleBaseObject)
  Private
    Fkind : string;
    FuserRolePermissionGroups : TUserRolePermissionGroupsListResponseuserRolePermissionGroups;
  Protected
    //Property setters
    Procedure Setkind(AIndex : Integer; AValue : string); virtual;
    Procedure SetuserRolePermissionGroups(AIndex : Integer; AValue : TUserRolePermissionGroupsListResponseuserRolePermissionGroups); virtual;
  Public
  Published
    Property kind : string Index 0 Read Fkind Write Setkind;
    Property userRolePermissionGroups : TUserRolePermissionGroupsListResponseuserRolePermissionGroups Index 8 Read FuserRolePermissionGroups Write SetuserRolePermissionGroups;
  end;
  TUserRolePermissionGroupsListResponseClass = Class of TUserRolePermissionGroupsListResponse;
  
  { --------------------------------------------------------------------
    TUserRolePermissionGroupsListResponseuserRolePermissionGroups
    --------------------------------------------------------------------}
  
  TUserRolePermissionGroupsListResponseuserRolePermissionGroups = Class(TGoogleBaseObject)
  Private
  Protected
    //Property setters
  Public
  Published
  end;
  TUserRolePermissionGroupsListResponseuserRolePermissionGroupsClass = Class of TUserRolePermissionGroupsListResponseuserRolePermissionGroups;
  
  { --------------------------------------------------------------------
    TUserRolePermissionsListResponse
    --------------------------------------------------------------------}
  
  TUserRolePermissionsListResponse = Class(TGoogleBaseObject)
  Private
    Fkind : string;
    FuserRolePermissions : TUserRolePermissionsListResponseuserRolePermissions;
  Protected
    //Property setters
    Procedure Setkind(AIndex : Integer; AValue : string); virtual;
    Procedure SetuserRolePermissions(AIndex : Integer; AValue : TUserRolePermissionsListResponseuserRolePermissions); virtual;
  Public
  Published
    Property kind : string Index 0 Read Fkind Write Setkind;
    Property userRolePermissions : TUserRolePermissionsListResponseuserRolePermissions Index 8 Read FuserRolePermissions Write SetuserRolePermissions;
  end;
  TUserRolePermissionsListResponseClass = Class of TUserRolePermissionsListResponse;
  
  { --------------------------------------------------------------------
    TUserRolePermissionsListResponseuserRolePermissions
    --------------------------------------------------------------------}
  
  TUserRolePermissionsListResponseuserRolePermissions = Class(TGoogleBaseObject)
  Private
  Protected
    //Property setters
  Public
  Published
  end;
  TUserRolePermissionsListResponseuserRolePermissionsClass = Class of TUserRolePermissionsListResponseuserRolePermissions;
  
  { --------------------------------------------------------------------
    TUserRolesListResponse
    --------------------------------------------------------------------}
  
  TUserRolesListResponse = Class(TGoogleBaseObject)
  Private
    Fkind : string;
    FnextPageToken : string;
    FuserRoles : TUserRolesListResponseuserRoles;
  Protected
    //Property setters
    Procedure Setkind(AIndex : Integer; AValue : string); virtual;
    Procedure SetnextPageToken(AIndex : Integer; AValue : string); virtual;
    Procedure SetuserRoles(AIndex : Integer; AValue : TUserRolesListResponseuserRoles); virtual;
  Public
  Published
    Property kind : string Index 0 Read Fkind Write Setkind;
    Property nextPageToken : string Index 8 Read FnextPageToken Write SetnextPageToken;
    Property userRoles : TUserRolesListResponseuserRoles Index 16 Read FuserRoles Write SetuserRoles;
  end;
  TUserRolesListResponseClass = Class of TUserRolesListResponse;
  
  { --------------------------------------------------------------------
    TUserRolesListResponseuserRoles
    --------------------------------------------------------------------}
  
  TUserRolesListResponseuserRoles = Class(TGoogleBaseObject)
  Private
  Protected
    //Property setters
  Public
  Published
  end;
  TUserRolesListResponseuserRolesClass = Class of TUserRolesListResponseuserRoles;
  
  { --------------------------------------------------------------------
    TAccountActiveAdSummariesResource
    --------------------------------------------------------------------}
  
  TAccountActiveAdSummariesResource = Class(TGoogleResource)
  Public
    Class Function ResourceName : String; override;
    Class Function DefaultAPI : TGoogleAPIClass; override;
    Function Get(profileId: string; summaryAccountId: string) : TAccountActiveAdSummary;
  end;
  
  
  { --------------------------------------------------------------------
    TAccountPermissionGroupsResource
    --------------------------------------------------------------------}
  
  TAccountPermissionGroupsResource = Class(TGoogleResource)
  Public
    Class Function ResourceName : String; override;
    Class Function DefaultAPI : TGoogleAPIClass; override;
    Function Get(id: string; profileId: string) : TAccountPermissionGroup;
    Function List(profileId: string) : TAccountPermissionGroupsListResponse;
  end;
  
  
  { --------------------------------------------------------------------
    TAccountPermissionsResource
    --------------------------------------------------------------------}
  
  TAccountPermissionsResource = Class(TGoogleResource)
  Public
    Class Function ResourceName : String; override;
    Class Function DefaultAPI : TGoogleAPIClass; override;
    Function Get(id: string; profileId: string) : TAccountPermission;
    Function List(profileId: string) : TAccountPermissionsListResponse;
  end;
  
  
  { --------------------------------------------------------------------
    TAccountUserProfilesResource
    --------------------------------------------------------------------}
  
  
  //Optional query Options for TAccountUserProfilesResource, method List
  
  TAccountUserProfilesListOptions = Record
    active : boolean;
    ids : int64;
    maxResults : integer;
    pageToken : string;
    searchString : string;
    sortField : string;
    sortOrder : string;
    subaccountId : int64;
    userRoleId : int64;
  end;
  
  
  //Optional query Options for TAccountUserProfilesResource, method Patch
  
  TAccountUserProfilesPatchOptions = Record
    id : int64;
  end;
  
  TAccountUserProfilesResource = Class(TGoogleResource)
  Public
    Class Function ResourceName : String; override;
    Class Function DefaultAPI : TGoogleAPIClass; override;
    Function Get(id: string; profileId: string) : TAccountUserProfile;
    Function Insert(profileId: string; aAccountUserProfile : TAccountUserProfile) : TAccountUserProfile;
    Function List(profileId: string; AQuery : string  = '') : TAccountUserProfilesListResponse;
    Function List(profileId: string; AQuery : TAccountUserProfileslistOptions) : TAccountUserProfilesListResponse;
    Function Patch(profileId: string; aAccountUserProfile : TAccountUserProfile; AQuery : string  = '') : TAccountUserProfile;
    Function Patch(profileId: string; aAccountUserProfile : TAccountUserProfile; AQuery : TAccountUserProfilespatchOptions) : TAccountUserProfile;
    Function Update(profileId: string; aAccountUserProfile : TAccountUserProfile) : TAccountUserProfile;
  end;
  
  
  { --------------------------------------------------------------------
    TAccountsResource
    --------------------------------------------------------------------}
  
  
  //Optional query Options for TAccountsResource, method List
  
  TAccountsListOptions = Record
    active : boolean;
    ids : int64;
    maxResults : integer;
    pageToken : string;
    searchString : string;
    sortField : string;
    sortOrder : string;
  end;
  
  
  //Optional query Options for TAccountsResource, method Patch
  
  TAccountsPatchOptions = Record
    id : int64;
  end;
  
  TAccountsResource = Class(TGoogleResource)
  Public
    Class Function ResourceName : String; override;
    Class Function DefaultAPI : TGoogleAPIClass; override;
    Function Get(id: string; profileId: string) : TAccount;
    Function List(profileId: string; AQuery : string  = '') : TAccountsListResponse;
    Function List(profileId: string; AQuery : TAccountslistOptions) : TAccountsListResponse;
    Function Patch(profileId: string; aAccount : TAccount; AQuery : string  = '') : TAccount;
    Function Patch(profileId: string; aAccount : TAccount; AQuery : TAccountspatchOptions) : TAccount;
    Function Update(profileId: string; aAccount : TAccount) : TAccount;
  end;
  
  
  { --------------------------------------------------------------------
    TAdsResource
    --------------------------------------------------------------------}
  
  
  //Optional query Options for TAdsResource, method List
  
  TAdsListOptions = Record
    active : boolean;
    advertiserId : int64;
    archived : boolean;
    audienceSegmentIds : int64;
    campaignIds : int64;
    compatibility : string;
    creativeIds : int64;
    creativeOptimizationConfigurationIds : int64;
    creativeType : string;
    dynamicClickTracker : boolean;
    ids : int64;
    landingPageIds : int64;
    maxResults : integer;
    overriddenEventTagId : int64;
    pageToken : string;
    placementIds : int64;
    remarketingListIds : int64;
    searchString : string;
    sizeIds : int64;
    sortField : string;
    sortOrder : string;
    sslCompliant : boolean;
    sslRequired : boolean;
    _type : string;
  end;
  
  
  //Optional query Options for TAdsResource, method Patch
  
  TAdsPatchOptions = Record
    id : int64;
  end;
  
  TAdsResource = Class(TGoogleResource)
  Public
    Class Function ResourceName : String; override;
    Class Function DefaultAPI : TGoogleAPIClass; override;
    Function Get(id: string; profileId: string) : TAd;
    Function Insert(profileId: string; aAd : TAd) : TAd;
    Function List(profileId: string; AQuery : string  = '') : TAdsListResponse;
    Function List(profileId: string; AQuery : TAdslistOptions) : TAdsListResponse;
    Function Patch(profileId: string; aAd : TAd; AQuery : string  = '') : TAd;
    Function Patch(profileId: string; aAd : TAd; AQuery : TAdspatchOptions) : TAd;
    Function Update(profileId: string; aAd : TAd) : TAd;
  end;
  
  
  { --------------------------------------------------------------------
    TAdvertiserGroupsResource
    --------------------------------------------------------------------}
  
  
  //Optional query Options for TAdvertiserGroupsResource, method List
  
  TAdvertiserGroupsListOptions = Record
    ids : int64;
    maxResults : integer;
    pageToken : string;
    searchString : string;
    sortField : string;
    sortOrder : string;
  end;
  
  
  //Optional query Options for TAdvertiserGroupsResource, method Patch
  
  TAdvertiserGroupsPatchOptions = Record
    id : int64;
  end;
  
  TAdvertiserGroupsResource = Class(TGoogleResource)
  Public
    Class Function ResourceName : String; override;
    Class Function DefaultAPI : TGoogleAPIClass; override;
    Procedure Delete(id: string; profileId: string);
    Function Get(id: string; profileId: string) : TAdvertiserGroup;
    Function Insert(profileId: string; aAdvertiserGroup : TAdvertiserGroup) : TAdvertiserGroup;
    Function List(profileId: string; AQuery : string  = '') : TAdvertiserGroupsListResponse;
    Function List(profileId: string; AQuery : TAdvertiserGroupslistOptions) : TAdvertiserGroupsListResponse;
    Function Patch(profileId: string; aAdvertiserGroup : TAdvertiserGroup; AQuery : string  = '') : TAdvertiserGroup;
    Function Patch(profileId: string; aAdvertiserGroup : TAdvertiserGroup; AQuery : TAdvertiserGroupspatchOptions) : TAdvertiserGroup;
    Function Update(profileId: string; aAdvertiserGroup : TAdvertiserGroup) : TAdvertiserGroup;
  end;
  
  
  { --------------------------------------------------------------------
    TAdvertisersResource
    --------------------------------------------------------------------}
  
  
  //Optional query Options for TAdvertisersResource, method List
  
  TAdvertisersListOptions = Record
    advertiserGroupIds : int64;
    floodlightConfigurationIds : int64;
    ids : int64;
    includeAdvertisersWithoutGroupsOnly : boolean;
    maxResults : integer;
    onlyParent : boolean;
    pageToken : string;
    searchString : string;
    sortField : string;
    sortOrder : string;
    status : string;
    subaccountId : int64;
  end;
  
  
  //Optional query Options for TAdvertisersResource, method Patch
  
  TAdvertisersPatchOptions = Record
    id : int64;
  end;
  
  TAdvertisersResource = Class(TGoogleResource)
  Public
    Class Function ResourceName : String; override;
    Class Function DefaultAPI : TGoogleAPIClass; override;
    Function Get(id: string; profileId: string) : TAdvertiser;
    Function Insert(profileId: string; aAdvertiser : TAdvertiser) : TAdvertiser;
    Function List(profileId: string; AQuery : string  = '') : TAdvertisersListResponse;
    Function List(profileId: string; AQuery : TAdvertiserslistOptions) : TAdvertisersListResponse;
    Function Patch(profileId: string; aAdvertiser : TAdvertiser; AQuery : string  = '') : TAdvertiser;
    Function Patch(profileId: string; aAdvertiser : TAdvertiser; AQuery : TAdvertiserspatchOptions) : TAdvertiser;
    Function Update(profileId: string; aAdvertiser : TAdvertiser) : TAdvertiser;
  end;
  
  
  { --------------------------------------------------------------------
    TBrowsersResource
    --------------------------------------------------------------------}
  
  TBrowsersResource = Class(TGoogleResource)
  Public
    Class Function ResourceName : String; override;
    Class Function DefaultAPI : TGoogleAPIClass; override;
    Function List(profileId: string) : TBrowsersListResponse;
  end;
  
  
  { --------------------------------------------------------------------
    TCampaignCreativeAssociationsResource
    --------------------------------------------------------------------}
  
  
  //Optional query Options for TCampaignCreativeAssociationsResource, method List
  
  TCampaignCreativeAssociationsListOptions = Record
    maxResults : integer;
    pageToken : string;
    sortOrder : string;
  end;
  
  TCampaignCreativeAssociationsResource = Class(TGoogleResource)
  Public
    Class Function ResourceName : String; override;
    Class Function DefaultAPI : TGoogleAPIClass; override;
    Function Insert(campaignId: string; profileId: string; aCampaignCreativeAssociation : TCampaignCreativeAssociation) : TCampaignCreativeAssociation;
    Function List(campaignId: string; profileId: string; AQuery : string  = '') : TCampaignCreativeAssociationsListResponse;
    Function List(campaignId: string; profileId: string; AQuery : TCampaignCreativeAssociationslistOptions) : TCampaignCreativeAssociationsListResponse;
  end;
  
  
  { --------------------------------------------------------------------
    TCampaignsResource
    --------------------------------------------------------------------}
  
  
  //Optional query Options for TCampaignsResource, method Insert
  
  TCampaignsInsertOptions = Record
    defaultLandingPageName : string;
    defaultLandingPageUrl : string;
  end;
  
  
  //Optional query Options for TCampaignsResource, method List
  
  TCampaignsListOptions = Record
    advertiserGroupIds : int64;
    advertiserIds : int64;
    archived : boolean;
    atLeastOneOptimizationActivity : boolean;
    excludedIds : int64;
    ids : int64;
    maxResults : integer;
    overriddenEventTagId : int64;
    pageToken : string;
    searchString : string;
    sortField : string;
    sortOrder : string;
    subaccountId : int64;
  end;
  
  
  //Optional query Options for TCampaignsResource, method Patch
  
  TCampaignsPatchOptions = Record
    id : int64;
  end;
  
  TCampaignsResource = Class(TGoogleResource)
  Public
    Class Function ResourceName : String; override;
    Class Function DefaultAPI : TGoogleAPIClass; override;
    Function Get(id: string; profileId: string) : TCampaign;
    Function Insert(profileId: string; aCampaign : TCampaign; AQuery : string  = '') : TCampaign;
    Function Insert(profileId: string; aCampaign : TCampaign; AQuery : TCampaignsinsertOptions) : TCampaign;
    Function List(profileId: string; AQuery : string  = '') : TCampaignsListResponse;
    Function List(profileId: string; AQuery : TCampaignslistOptions) : TCampaignsListResponse;
    Function Patch(profileId: string; aCampaign : TCampaign; AQuery : string  = '') : TCampaign;
    Function Patch(profileId: string; aCampaign : TCampaign; AQuery : TCampaignspatchOptions) : TCampaign;
    Function Update(profileId: string; aCampaign : TCampaign) : TCampaign;
  end;
  
  
  { --------------------------------------------------------------------
    TChangeLogsResource
    --------------------------------------------------------------------}
  
  
  //Optional query Options for TChangeLogsResource, method List
  
  TChangeLogsListOptions = Record
    action : string;
    ids : int64;
    maxChangeTime : string;
    maxResults : integer;
    minChangeTime : string;
    objectIds : int64;
    objectType : string;
    pageToken : string;
    searchString : string;
    userProfileIds : int64;
  end;
  
  TChangeLogsResource = Class(TGoogleResource)
  Public
    Class Function ResourceName : String; override;
    Class Function DefaultAPI : TGoogleAPIClass; override;
    Function Get(id: string; profileId: string) : TChangeLog;
    Function List(profileId: string; AQuery : string  = '') : TChangeLogsListResponse;
    Function List(profileId: string; AQuery : TChangeLogslistOptions) : TChangeLogsListResponse;
  end;
  
  
  { --------------------------------------------------------------------
    TCitiesResource
    --------------------------------------------------------------------}
  
  
  //Optional query Options for TCitiesResource, method List
  
  TCitiesListOptions = Record
    countryDartIds : int64;
    dartIds : int64;
    namePrefix : string;
    regionDartIds : int64;
  end;
  
  TCitiesResource = Class(TGoogleResource)
  Public
    Class Function ResourceName : String; override;
    Class Function DefaultAPI : TGoogleAPIClass; override;
    Function List(profileId: string; AQuery : string  = '') : TCitiesListResponse;
    Function List(profileId: string; AQuery : TCitieslistOptions) : TCitiesListResponse;
  end;
  
  
  { --------------------------------------------------------------------
    TConnectionTypesResource
    --------------------------------------------------------------------}
  
  TConnectionTypesResource = Class(TGoogleResource)
  Public
    Class Function ResourceName : String; override;
    Class Function DefaultAPI : TGoogleAPIClass; override;
    Function Get(id: string; profileId: string) : TConnectionType;
    Function List(profileId: string) : TConnectionTypesListResponse;
  end;
  
  
  { --------------------------------------------------------------------
    TContentCategoriesResource
    --------------------------------------------------------------------}
  
  
  //Optional query Options for TContentCategoriesResource, method List
  
  TContentCategoriesListOptions = Record
    ids : int64;
    maxResults : integer;
    pageToken : string;
    searchString : string;
    sortField : string;
    sortOrder : string;
  end;
  
  
  //Optional query Options for TContentCategoriesResource, method Patch
  
  TContentCategoriesPatchOptions = Record
    id : int64;
  end;
  
  TContentCategoriesResource = Class(TGoogleResource)
  Public
    Class Function ResourceName : String; override;
    Class Function DefaultAPI : TGoogleAPIClass; override;
    Procedure Delete(id: string; profileId: string);
    Function Get(id: string; profileId: string) : TContentCategory;
    Function Insert(profileId: string; aContentCategory : TContentCategory) : TContentCategory;
    Function List(profileId: string; AQuery : string  = '') : TContentCategoriesListResponse;
    Function List(profileId: string; AQuery : TContentCategorieslistOptions) : TContentCategoriesListResponse;
    Function Patch(profileId: string; aContentCategory : TContentCategory; AQuery : string  = '') : TContentCategory;
    Function Patch(profileId: string; aContentCategory : TContentCategory; AQuery : TContentCategoriespatchOptions) : TContentCategory;
    Function Update(profileId: string; aContentCategory : TContentCategory) : TContentCategory;
  end;
  
  
  { --------------------------------------------------------------------
    TCountriesResource
    --------------------------------------------------------------------}
  
  TCountriesResource = Class(TGoogleResource)
  Public
    Class Function ResourceName : String; override;
    Class Function DefaultAPI : TGoogleAPIClass; override;
    Function Get(dartId: string; profileId: string) : TCountry;
    Function List(profileId: string) : TCountriesListResponse;
  end;
  
  
  { --------------------------------------------------------------------
    TCreativeAssetsResource
    --------------------------------------------------------------------}
  
  TCreativeAssetsResource = Class(TGoogleResource)
  Public
    Class Function ResourceName : String; override;
    Class Function DefaultAPI : TGoogleAPIClass; override;
    Function Insert(advertiserId: string; profileId: string; aCreativeAssetMetadata : TCreativeAssetMetadata) : TCreativeAssetMetadata;
  end;
  
  
  { --------------------------------------------------------------------
    TCreativeFieldValuesResource
    --------------------------------------------------------------------}
  
  
  //Optional query Options for TCreativeFieldValuesResource, method List
  
  TCreativeFieldValuesListOptions = Record
    ids : int64;
    maxResults : integer;
    pageToken : string;
    searchString : string;
    sortField : string;
    sortOrder : string;
  end;
  
  
  //Optional query Options for TCreativeFieldValuesResource, method Patch
  
  TCreativeFieldValuesPatchOptions = Record
    id : int64;
  end;
  
  TCreativeFieldValuesResource = Class(TGoogleResource)
  Public
    Class Function ResourceName : String; override;
    Class Function DefaultAPI : TGoogleAPIClass; override;
    Procedure Delete(creativeFieldId: string; id: string; profileId: string);
    Function Get(creativeFieldId: string; id: string; profileId: string) : TCreativeFieldValue;
    Function Insert(creativeFieldId: string; profileId: string; aCreativeFieldValue : TCreativeFieldValue) : TCreativeFieldValue;
    Function List(creativeFieldId: string; profileId: string; AQuery : string  = '') : TCreativeFieldValuesListResponse;
    Function List(creativeFieldId: string; profileId: string; AQuery : TCreativeFieldValueslistOptions) : TCreativeFieldValuesListResponse;
    Function Patch(creativeFieldId: string; profileId: string; aCreativeFieldValue : TCreativeFieldValue; AQuery : string  = '') : TCreativeFieldValue;
    Function Patch(creativeFieldId: string; profileId: string; aCreativeFieldValue : TCreativeFieldValue; AQuery : TCreativeFieldValuespatchOptions) : TCreativeFieldValue;
    Function Update(creativeFieldId: string; profileId: string; aCreativeFieldValue : TCreativeFieldValue) : TCreativeFieldValue;
  end;
  
  
  { --------------------------------------------------------------------
    TCreativeFieldsResource
    --------------------------------------------------------------------}
  
  
  //Optional query Options for TCreativeFieldsResource, method List
  
  TCreativeFieldsListOptions = Record
    advertiserIds : int64;
    ids : int64;
    maxResults : integer;
    pageToken : string;
    searchString : string;
    sortField : string;
    sortOrder : string;
  end;
  
  
  //Optional query Options for TCreativeFieldsResource, method Patch
  
  TCreativeFieldsPatchOptions = Record
    id : int64;
  end;
  
  TCreativeFieldsResource = Class(TGoogleResource)
  Public
    Class Function ResourceName : String; override;
    Class Function DefaultAPI : TGoogleAPIClass; override;
    Procedure Delete(id: string; profileId: string);
    Function Get(id: string; profileId: string) : TCreativeField;
    Function Insert(profileId: string; aCreativeField : TCreativeField) : TCreativeField;
    Function List(profileId: string; AQuery : string  = '') : TCreativeFieldsListResponse;
    Function List(profileId: string; AQuery : TCreativeFieldslistOptions) : TCreativeFieldsListResponse;
    Function Patch(profileId: string; aCreativeField : TCreativeField; AQuery : string  = '') : TCreativeField;
    Function Patch(profileId: string; aCreativeField : TCreativeField; AQuery : TCreativeFieldspatchOptions) : TCreativeField;
    Function Update(profileId: string; aCreativeField : TCreativeField) : TCreativeField;
  end;
  
  
  { --------------------------------------------------------------------
    TCreativeGroupsResource
    --------------------------------------------------------------------}
  
  
  //Optional query Options for TCreativeGroupsResource, method List
  
  TCreativeGroupsListOptions = Record
    advertiserIds : int64;
    groupNumber : integer;
    ids : int64;
    maxResults : integer;
    pageToken : string;
    searchString : string;
    sortField : string;
    sortOrder : string;
  end;
  
  
  //Optional query Options for TCreativeGroupsResource, method Patch
  
  TCreativeGroupsPatchOptions = Record
    id : int64;
  end;
  
  TCreativeGroupsResource = Class(TGoogleResource)
  Public
    Class Function ResourceName : String; override;
    Class Function DefaultAPI : TGoogleAPIClass; override;
    Function Get(id: string; profileId: string) : TCreativeGroup;
    Function Insert(profileId: string; aCreativeGroup : TCreativeGroup) : TCreativeGroup;
    Function List(profileId: string; AQuery : string  = '') : TCreativeGroupsListResponse;
    Function List(profileId: string; AQuery : TCreativeGroupslistOptions) : TCreativeGroupsListResponse;
    Function Patch(profileId: string; aCreativeGroup : TCreativeGroup; AQuery : string  = '') : TCreativeGroup;
    Function Patch(profileId: string; aCreativeGroup : TCreativeGroup; AQuery : TCreativeGroupspatchOptions) : TCreativeGroup;
    Function Update(profileId: string; aCreativeGroup : TCreativeGroup) : TCreativeGroup;
  end;
  
  
  { --------------------------------------------------------------------
    TCreativesResource
    --------------------------------------------------------------------}
  
  
  //Optional query Options for TCreativesResource, method List
  
  TCreativesListOptions = Record
    active : boolean;
    advertiserId : int64;
    archived : boolean;
    campaignId : int64;
    companionCreativeIds : int64;
    creativeFieldIds : int64;
    ids : int64;
    maxResults : integer;
    pageToken : string;
    renderingIds : int64;
    searchString : string;
    sizeIds : int64;
    sortField : string;
    sortOrder : string;
    studioCreativeId : int64;
    types : string;
  end;
  
  
  //Optional query Options for TCreativesResource, method Patch
  
  TCreativesPatchOptions = Record
    id : int64;
  end;
  
  TCreativesResource = Class(TGoogleResource)
  Public
    Class Function ResourceName : String; override;
    Class Function DefaultAPI : TGoogleAPIClass; override;
    Function Get(id: string; profileId: string) : TCreative;
    Function Insert(profileId: string; aCreative : TCreative) : TCreative;
    Function List(profileId: string; AQuery : string  = '') : TCreativesListResponse;
    Function List(profileId: string; AQuery : TCreativeslistOptions) : TCreativesListResponse;
    Function Patch(profileId: string; aCreative : TCreative; AQuery : string  = '') : TCreative;
    Function Patch(profileId: string; aCreative : TCreative; AQuery : TCreativespatchOptions) : TCreative;
    Function Update(profileId: string; aCreative : TCreative) : TCreative;
  end;
  
  
  { --------------------------------------------------------------------
    TDimensionValuesResource
    --------------------------------------------------------------------}
  
  
  //Optional query Options for TDimensionValuesResource, method Query
  
  TDimensionValuesQueryOptions = Record
    maxResults : integer;
    pageToken : string;
  end;
  
  TDimensionValuesResource = Class(TGoogleResource)
  Public
    Class Function ResourceName : String; override;
    Class Function DefaultAPI : TGoogleAPIClass; override;
    Function Query(profileId: string; aDimensionValueRequest : TDimensionValueRequest; AQuery : string  = '') : TDimensionValueList;
    Function Query(profileId: string; aDimensionValueRequest : TDimensionValueRequest; AQuery : TDimensionValuesqueryOptions) : TDimensionValueList;
  end;
  
  
  { --------------------------------------------------------------------
    TDirectorySiteContactsResource
    --------------------------------------------------------------------}
  
  
  //Optional query Options for TDirectorySiteContactsResource, method List
  
  TDirectorySiteContactsListOptions = Record
    directorySiteIds : int64;
    ids : int64;
    maxResults : integer;
    pageToken : string;
    searchString : string;
    sortField : string;
    sortOrder : string;
  end;
  
  TDirectorySiteContactsResource = Class(TGoogleResource)
  Public
    Class Function ResourceName : String; override;
    Class Function DefaultAPI : TGoogleAPIClass; override;
    Function Get(id: string; profileId: string) : TDirectorySiteContact;
    Function List(profileId: string; AQuery : string  = '') : TDirectorySiteContactsListResponse;
    Function List(profileId: string; AQuery : TDirectorySiteContactslistOptions) : TDirectorySiteContactsListResponse;
  end;
  
  
  { --------------------------------------------------------------------
    TDirectorySitesResource
    --------------------------------------------------------------------}
  
  
  //Optional query Options for TDirectorySitesResource, method List
  
  TDirectorySitesListOptions = Record
    acceptsInStreamVideoPlacements : boolean;
    acceptsInterstitialPlacements : boolean;
    acceptsPublisherPaidPlacements : boolean;
    active : boolean;
    countryId : int64;
    dfp_network_code : string;
    ids : int64;
    maxResults : integer;
    pageToken : string;
    parentId : int64;
    searchString : string;
    sortField : string;
    sortOrder : string;
  end;
  
  TDirectorySitesResource = Class(TGoogleResource)
  Public
    Class Function ResourceName : String; override;
    Class Function DefaultAPI : TGoogleAPIClass; override;
    Function Get(id: string; profileId: string) : TDirectorySite;
    Function Insert(profileId: string; aDirectorySite : TDirectorySite) : TDirectorySite;
    Function List(profileId: string; AQuery : string  = '') : TDirectorySitesListResponse;
    Function List(profileId: string; AQuery : TDirectorySiteslistOptions) : TDirectorySitesListResponse;
  end;
  
  
  { --------------------------------------------------------------------
    TEventTagsResource
    --------------------------------------------------------------------}
  
  
  //Optional query Options for TEventTagsResource, method List
  
  TEventTagsListOptions = Record
    adId : int64;
    advertiserId : int64;
    campaignId : int64;
    definitionsOnly : boolean;
    enabled : boolean;
    eventTagTypes : string;
    ids : int64;
    searchString : string;
    sortField : string;
    sortOrder : string;
  end;
  
  
  //Optional query Options for TEventTagsResource, method Patch
  
  TEventTagsPatchOptions = Record
    id : int64;
  end;
  
  TEventTagsResource = Class(TGoogleResource)
  Public
    Class Function ResourceName : String; override;
    Class Function DefaultAPI : TGoogleAPIClass; override;
    Procedure Delete(id: string; profileId: string);
    Function Get(id: string; profileId: string) : TEventTag;
    Function Insert(profileId: string; aEventTag : TEventTag) : TEventTag;
    Function List(profileId: string; AQuery : string  = '') : TEventTagsListResponse;
    Function List(profileId: string; AQuery : TEventTagslistOptions) : TEventTagsListResponse;
    Function Patch(profileId: string; aEventTag : TEventTag; AQuery : string  = '') : TEventTag;
    Function Patch(profileId: string; aEventTag : TEventTag; AQuery : TEventTagspatchOptions) : TEventTag;
    Function Update(profileId: string; aEventTag : TEventTag) : TEventTag;
  end;
  
  
  { --------------------------------------------------------------------
    TFilesResource
    --------------------------------------------------------------------}
  
  
  //Optional query Options for TFilesResource, method List
  
  TFilesListOptions = Record
    maxResults : integer;
    pageToken : string;
    scope : string;
    sortField : string;
    sortOrder : string;
  end;
  
  TFilesResource = Class(TGoogleResource)
  Public
    Class Function ResourceName : String; override;
    Class Function DefaultAPI : TGoogleAPIClass; override;
    Function Get(fileId: string; reportId: string) : TFile;
    Function List(profileId: string; AQuery : string  = '') : TFileList;
    Function List(profileId: string; AQuery : TFileslistOptions) : TFileList;
  end;
  
  
  { --------------------------------------------------------------------
    TFloodlightActivitiesResource
    --------------------------------------------------------------------}
  
  
  //Optional query Options for TFloodlightActivitiesResource, method Generatetag
  
  TFloodlightActivitiesGeneratetagOptions = Record
    floodlightActivityId : int64;
  end;
  
  
  //Optional query Options for TFloodlightActivitiesResource, method List
  
  TFloodlightActivitiesListOptions = Record
    advertiserId : int64;
    floodlightActivityGroupIds : int64;
    floodlightActivityGroupName : string;
    floodlightActivityGroupTagString : string;
    floodlightActivityGroupType : string;
    floodlightConfigurationId : int64;
    ids : int64;
    maxResults : integer;
    pageToken : string;
    searchString : string;
    sortField : string;
    sortOrder : string;
    tagString : string;
  end;
  
  
  //Optional query Options for TFloodlightActivitiesResource, method Patch
  
  TFloodlightActivitiesPatchOptions = Record
    id : int64;
  end;
  
  TFloodlightActivitiesResource = Class(TGoogleResource)
  Public
    Class Function ResourceName : String; override;
    Class Function DefaultAPI : TGoogleAPIClass; override;
    Procedure Delete(id: string; profileId: string);
    Function Generatetag(profileId: string; AQuery : string  = '') : TFloodlightActivitiesGenerateTagResponse;
    Function Generatetag(profileId: string; AQuery : TFloodlightActivitiesgeneratetagOptions) : TFloodlightActivitiesGenerateTagResponse;
    Function Get(id: string; profileId: string) : TFloodlightActivity;
    Function Insert(profileId: string; aFloodlightActivity : TFloodlightActivity) : TFloodlightActivity;
    Function List(profileId: string; AQuery : string  = '') : TFloodlightActivitiesListResponse;
    Function List(profileId: string; AQuery : TFloodlightActivitieslistOptions) : TFloodlightActivitiesListResponse;
    Function Patch(profileId: string; aFloodlightActivity : TFloodlightActivity; AQuery : string  = '') : TFloodlightActivity;
    Function Patch(profileId: string; aFloodlightActivity : TFloodlightActivity; AQuery : TFloodlightActivitiespatchOptions) : TFloodlightActivity;
    Function Update(profileId: string; aFloodlightActivity : TFloodlightActivity) : TFloodlightActivity;
  end;
  
  
  { --------------------------------------------------------------------
    TFloodlightActivityGroupsResource
    --------------------------------------------------------------------}
  
  
  //Optional query Options for TFloodlightActivityGroupsResource, method List
  
  TFloodlightActivityGroupsListOptions = Record
    advertiserId : int64;
    floodlightConfigurationId : int64;
    ids : int64;
    maxResults : integer;
    pageToken : string;
    searchString : string;
    sortField : string;
    sortOrder : string;
    _type : string;
  end;
  
  
  //Optional query Options for TFloodlightActivityGroupsResource, method Patch
  
  TFloodlightActivityGroupsPatchOptions = Record
    id : int64;
  end;
  
  TFloodlightActivityGroupsResource = Class(TGoogleResource)
  Public
    Class Function ResourceName : String; override;
    Class Function DefaultAPI : TGoogleAPIClass; override;
    Procedure Delete(id: string; profileId: string);
    Function Get(id: string; profileId: string) : TFloodlightActivityGroup;
    Function Insert(profileId: string; aFloodlightActivityGroup : TFloodlightActivityGroup) : TFloodlightActivityGroup;
    Function List(profileId: string; AQuery : string  = '') : TFloodlightActivityGroupsListResponse;
    Function List(profileId: string; AQuery : TFloodlightActivityGroupslistOptions) : TFloodlightActivityGroupsListResponse;
    Function Patch(profileId: string; aFloodlightActivityGroup : TFloodlightActivityGroup; AQuery : string  = '') : TFloodlightActivityGroup;
    Function Patch(profileId: string; aFloodlightActivityGroup : TFloodlightActivityGroup; AQuery : TFloodlightActivityGroupspatchOptions) : TFloodlightActivityGroup;
    Function Update(profileId: string; aFloodlightActivityGroup : TFloodlightActivityGroup) : TFloodlightActivityGroup;
  end;
  
  
  { --------------------------------------------------------------------
    TFloodlightConfigurationsResource
    --------------------------------------------------------------------}
  
  
  //Optional query Options for TFloodlightConfigurationsResource, method List
  
  TFloodlightConfigurationsListOptions = Record
    ids : int64;
  end;
  
  
  //Optional query Options for TFloodlightConfigurationsResource, method Patch
  
  TFloodlightConfigurationsPatchOptions = Record
    id : int64;
  end;
  
  TFloodlightConfigurationsResource = Class(TGoogleResource)
  Public
    Class Function ResourceName : String; override;
    Class Function DefaultAPI : TGoogleAPIClass; override;
    Function Get(id: string; profileId: string) : TFloodlightConfiguration;
    Function List(profileId: string; AQuery : string  = '') : TFloodlightConfigurationsListResponse;
    Function List(profileId: string; AQuery : TFloodlightConfigurationslistOptions) : TFloodlightConfigurationsListResponse;
    Function Patch(profileId: string; aFloodlightConfiguration : TFloodlightConfiguration; AQuery : string  = '') : TFloodlightConfiguration;
    Function Patch(profileId: string; aFloodlightConfiguration : TFloodlightConfiguration; AQuery : TFloodlightConfigurationspatchOptions) : TFloodlightConfiguration;
    Function Update(profileId: string; aFloodlightConfiguration : TFloodlightConfiguration) : TFloodlightConfiguration;
  end;
  
  
  { --------------------------------------------------------------------
    TInventoryItemsResource
    --------------------------------------------------------------------}
  
  
  //Optional query Options for TInventoryItemsResource, method List
  
  TInventoryItemsListOptions = Record
    ids : int64;
    inPlan : boolean;
    maxResults : integer;
    orderId : int64;
    pageToken : string;
    siteId : int64;
    sortField : string;
    sortOrder : string;
  end;
  
  TInventoryItemsResource = Class(TGoogleResource)
  Public
    Class Function ResourceName : String; override;
    Class Function DefaultAPI : TGoogleAPIClass; override;
    Function Get(id: string; profileId: string; projectId: string) : TInventoryItem;
    Function List(profileId: string; projectId: string; AQuery : string  = '') : TInventoryItemsListResponse;
    Function List(profileId: string; projectId: string; AQuery : TInventoryItemslistOptions) : TInventoryItemsListResponse;
  end;
  
  
  { --------------------------------------------------------------------
    TLandingPagesResource
    --------------------------------------------------------------------}
  
  
  //Optional query Options for TLandingPagesResource, method Patch
  
  TLandingPagesPatchOptions = Record
    id : int64;
  end;
  
  TLandingPagesResource = Class(TGoogleResource)
  Public
    Class Function ResourceName : String; override;
    Class Function DefaultAPI : TGoogleAPIClass; override;
    Procedure Delete(campaignId: string; id: string; profileId: string);
    Function Get(campaignId: string; id: string; profileId: string) : TLandingPage;
    Function Insert(campaignId: string; profileId: string; aLandingPage : TLandingPage) : TLandingPage;
    Function List(campaignId: string; profileId: string) : TLandingPagesListResponse;
    Function Patch(campaignId: string; profileId: string; aLandingPage : TLandingPage; AQuery : string  = '') : TLandingPage;
    Function Patch(campaignId: string; profileId: string; aLandingPage : TLandingPage; AQuery : TLandingPagespatchOptions) : TLandingPage;
    Function Update(campaignId: string; profileId: string; aLandingPage : TLandingPage) : TLandingPage;
  end;
  
  
  { --------------------------------------------------------------------
    TMetrosResource
    --------------------------------------------------------------------}
  
  TMetrosResource = Class(TGoogleResource)
  Public
    Class Function ResourceName : String; override;
    Class Function DefaultAPI : TGoogleAPIClass; override;
    Function List(profileId: string) : TMetrosListResponse;
  end;
  
  
  { --------------------------------------------------------------------
    TMobileCarriersResource
    --------------------------------------------------------------------}
  
  TMobileCarriersResource = Class(TGoogleResource)
  Public
    Class Function ResourceName : String; override;
    Class Function DefaultAPI : TGoogleAPIClass; override;
    Function Get(id: string; profileId: string) : TMobileCarrier;
    Function List(profileId: string) : TMobileCarriersListResponse;
  end;
  
  
  { --------------------------------------------------------------------
    TOperatingSystemVersionsResource
    --------------------------------------------------------------------}
  
  TOperatingSystemVersionsResource = Class(TGoogleResource)
  Public
    Class Function ResourceName : String; override;
    Class Function DefaultAPI : TGoogleAPIClass; override;
    Function Get(id: string; profileId: string) : TOperatingSystemVersion;
    Function List(profileId: string) : TOperatingSystemVersionsListResponse;
  end;
  
  
  { --------------------------------------------------------------------
    TOperatingSystemsResource
    --------------------------------------------------------------------}
  
  TOperatingSystemsResource = Class(TGoogleResource)
  Public
    Class Function ResourceName : String; override;
    Class Function DefaultAPI : TGoogleAPIClass; override;
    Function Get(dartId: string; profileId: string) : TOperatingSystem;
    Function List(profileId: string) : TOperatingSystemsListResponse;
  end;
  
  
  { --------------------------------------------------------------------
    TOrderDocumentsResource
    --------------------------------------------------------------------}
  
  
  //Optional query Options for TOrderDocumentsResource, method List
  
  TOrderDocumentsListOptions = Record
    approved : boolean;
    ids : int64;
    maxResults : integer;
    orderId : int64;
    pageToken : string;
    searchString : string;
    siteId : int64;
    sortField : string;
    sortOrder : string;
  end;
  
  TOrderDocumentsResource = Class(TGoogleResource)
  Public
    Class Function ResourceName : String; override;
    Class Function DefaultAPI : TGoogleAPIClass; override;
    Function Get(id: string; profileId: string; projectId: string) : TOrderDocument;
    Function List(profileId: string; projectId: string; AQuery : string  = '') : TOrderDocumentsListResponse;
    Function List(profileId: string; projectId: string; AQuery : TOrderDocumentslistOptions) : TOrderDocumentsListResponse;
  end;
  
  
  { --------------------------------------------------------------------
    TOrdersResource
    --------------------------------------------------------------------}
  
  
  //Optional query Options for TOrdersResource, method List
  
  TOrdersListOptions = Record
    ids : int64;
    maxResults : integer;
    pageToken : string;
    searchString : string;
    siteId : int64;
    sortField : string;
    sortOrder : string;
  end;
  
  TOrdersResource = Class(TGoogleResource)
  Public
    Class Function ResourceName : String; override;
    Class Function DefaultAPI : TGoogleAPIClass; override;
    Function Get(id: string; profileId: string; projectId: string) : TOrder;
    Function List(profileId: string; projectId: string; AQuery : string  = '') : TOrdersListResponse;
    Function List(profileId: string; projectId: string; AQuery : TOrderslistOptions) : TOrdersListResponse;
  end;
  
  
  { --------------------------------------------------------------------
    TPlacementGroupsResource
    --------------------------------------------------------------------}
  
  
  //Optional query Options for TPlacementGroupsResource, method List
  
  TPlacementGroupsListOptions = Record
    advertiserIds : int64;
    archived : boolean;
    campaignIds : int64;
    contentCategoryIds : int64;
    directorySiteIds : int64;
    ids : int64;
    maxResults : integer;
    pageToken : string;
    placementGroupType : string;
    placementStrategyIds : int64;
    pricingTypes : string;
    searchString : string;
    siteIds : int64;
    sortField : string;
    sortOrder : string;
  end;
  
  
  //Optional query Options for TPlacementGroupsResource, method Patch
  
  TPlacementGroupsPatchOptions = Record
    id : int64;
  end;
  
  TPlacementGroupsResource = Class(TGoogleResource)
  Public
    Class Function ResourceName : String; override;
    Class Function DefaultAPI : TGoogleAPIClass; override;
    Function Get(id: string; profileId: string) : TPlacementGroup;
    Function Insert(profileId: string; aPlacementGroup : TPlacementGroup) : TPlacementGroup;
    Function List(profileId: string; AQuery : string  = '') : TPlacementGroupsListResponse;
    Function List(profileId: string; AQuery : TPlacementGroupslistOptions) : TPlacementGroupsListResponse;
    Function Patch(profileId: string; aPlacementGroup : TPlacementGroup; AQuery : string  = '') : TPlacementGroup;
    Function Patch(profileId: string; aPlacementGroup : TPlacementGroup; AQuery : TPlacementGroupspatchOptions) : TPlacementGroup;
    Function Update(profileId: string; aPlacementGroup : TPlacementGroup) : TPlacementGroup;
  end;
  
  
  { --------------------------------------------------------------------
    TPlacementStrategiesResource
    --------------------------------------------------------------------}
  
  
  //Optional query Options for TPlacementStrategiesResource, method List
  
  TPlacementStrategiesListOptions = Record
    ids : int64;
    maxResults : integer;
    pageToken : string;
    searchString : string;
    sortField : string;
    sortOrder : string;
  end;
  
  
  //Optional query Options for TPlacementStrategiesResource, method Patch
  
  TPlacementStrategiesPatchOptions = Record
    id : int64;
  end;
  
  TPlacementStrategiesResource = Class(TGoogleResource)
  Public
    Class Function ResourceName : String; override;
    Class Function DefaultAPI : TGoogleAPIClass; override;
    Procedure Delete(id: string; profileId: string);
    Function Get(id: string; profileId: string) : TPlacementStrategy;
    Function Insert(profileId: string; aPlacementStrategy : TPlacementStrategy) : TPlacementStrategy;
    Function List(profileId: string; AQuery : string  = '') : TPlacementStrategiesListResponse;
    Function List(profileId: string; AQuery : TPlacementStrategieslistOptions) : TPlacementStrategiesListResponse;
    Function Patch(profileId: string; aPlacementStrategy : TPlacementStrategy; AQuery : string  = '') : TPlacementStrategy;
    Function Patch(profileId: string; aPlacementStrategy : TPlacementStrategy; AQuery : TPlacementStrategiespatchOptions) : TPlacementStrategy;
    Function Update(profileId: string; aPlacementStrategy : TPlacementStrategy) : TPlacementStrategy;
  end;
  
  
  { --------------------------------------------------------------------
    TPlacementsResource
    --------------------------------------------------------------------}
  
  
  //Optional query Options for TPlacementsResource, method Generatetags
  
  TPlacementsGeneratetagsOptions = Record
    campaignId : int64;
    placementIds : int64;
    tagFormats : string;
  end;
  
  
  //Optional query Options for TPlacementsResource, method List
  
  TPlacementsListOptions = Record
    advertiserIds : int64;
    archived : boolean;
    campaignIds : int64;
    compatibilities : string;
    contentCategoryIds : int64;
    directorySiteIds : int64;
    groupIds : int64;
    ids : int64;
    maxResults : integer;
    pageToken : string;
    paymentSource : string;
    placementStrategyIds : int64;
    pricingTypes : string;
    searchString : string;
    siteIds : int64;
    sizeIds : int64;
    sortField : string;
    sortOrder : string;
  end;
  
  
  //Optional query Options for TPlacementsResource, method Patch
  
  TPlacementsPatchOptions = Record
    id : int64;
  end;
  
  TPlacementsResource = Class(TGoogleResource)
  Public
    Class Function ResourceName : String; override;
    Class Function DefaultAPI : TGoogleAPIClass; override;
    Function Generatetags(profileId: string; AQuery : string  = '') : TPlacementsGenerateTagsResponse;
    Function Generatetags(profileId: string; AQuery : TPlacementsgeneratetagsOptions) : TPlacementsGenerateTagsResponse;
    Function Get(id: string; profileId: string) : TPlacement;
    Function Insert(profileId: string; aPlacement : TPlacement) : TPlacement;
    Function List(profileId: string; AQuery : string  = '') : TPlacementsListResponse;
    Function List(profileId: string; AQuery : TPlacementslistOptions) : TPlacementsListResponse;
    Function Patch(profileId: string; aPlacement : TPlacement; AQuery : string  = '') : TPlacement;
    Function Patch(profileId: string; aPlacement : TPlacement; AQuery : TPlacementspatchOptions) : TPlacement;
    Function Update(profileId: string; aPlacement : TPlacement) : TPlacement;
  end;
  
  
  { --------------------------------------------------------------------
    TPlatformTypesResource
    --------------------------------------------------------------------}
  
  TPlatformTypesResource = Class(TGoogleResource)
  Public
    Class Function ResourceName : String; override;
    Class Function DefaultAPI : TGoogleAPIClass; override;
    Function Get(id: string; profileId: string) : TPlatformType;
    Function List(profileId: string) : TPlatformTypesListResponse;
  end;
  
  
  { --------------------------------------------------------------------
    TPostalCodesResource
    --------------------------------------------------------------------}
  
  TPostalCodesResource = Class(TGoogleResource)
  Public
    Class Function ResourceName : String; override;
    Class Function DefaultAPI : TGoogleAPIClass; override;
    Function Get(code: string; profileId: string) : TPostalCode;
    Function List(profileId: string) : TPostalCodesListResponse;
  end;
  
  
  { --------------------------------------------------------------------
    TProjectsResource
    --------------------------------------------------------------------}
  
  
  //Optional query Options for TProjectsResource, method List
  
  TProjectsListOptions = Record
    advertiserIds : int64;
    ids : int64;
    maxResults : integer;
    pageToken : string;
    searchString : string;
    sortField : string;
    sortOrder : string;
  end;
  
  TProjectsResource = Class(TGoogleResource)
  Public
    Class Function ResourceName : String; override;
    Class Function DefaultAPI : TGoogleAPIClass; override;
    Function Get(id: string; profileId: string) : TProject;
    Function List(profileId: string; AQuery : string  = '') : TProjectsListResponse;
    Function List(profileId: string; AQuery : TProjectslistOptions) : TProjectsListResponse;
  end;
  
  
  { --------------------------------------------------------------------
    TRegionsResource
    --------------------------------------------------------------------}
  
  TRegionsResource = Class(TGoogleResource)
  Public
    Class Function ResourceName : String; override;
    Class Function DefaultAPI : TGoogleAPIClass; override;
    Function List(profileId: string) : TRegionsListResponse;
  end;
  
  
  { --------------------------------------------------------------------
    TRemarketingListSharesResource
    --------------------------------------------------------------------}
  
  
  //Optional query Options for TRemarketingListSharesResource, method Patch
  
  TRemarketingListSharesPatchOptions = Record
    remarketingListId : int64;
  end;
  
  TRemarketingListSharesResource = Class(TGoogleResource)
  Public
    Class Function ResourceName : String; override;
    Class Function DefaultAPI : TGoogleAPIClass; override;
    Function Get(profileId: string; remarketingListId: string) : TRemarketingListShare;
    Function Patch(profileId: string; aRemarketingListShare : TRemarketingListShare; AQuery : string  = '') : TRemarketingListShare;
    Function Patch(profileId: string; aRemarketingListShare : TRemarketingListShare; AQuery : TRemarketingListSharespatchOptions) : TRemarketingListShare;
    Function Update(profileId: string; aRemarketingListShare : TRemarketingListShare) : TRemarketingListShare;
  end;
  
  
  { --------------------------------------------------------------------
    TRemarketingListsResource
    --------------------------------------------------------------------}
  
  
  //Optional query Options for TRemarketingListsResource, method List
  
  TRemarketingListsListOptions = Record
    active : boolean;
    advertiserId : int64;
    floodlightActivityId : int64;
    maxResults : integer;
    _name : string;
    pageToken : string;
    sortField : string;
    sortOrder : string;
  end;
  
  
  //Optional query Options for TRemarketingListsResource, method Patch
  
  TRemarketingListsPatchOptions = Record
    id : int64;
  end;
  
  TRemarketingListsResource = Class(TGoogleResource)
  Public
    Class Function ResourceName : String; override;
    Class Function DefaultAPI : TGoogleAPIClass; override;
    Function Get(id: string; profileId: string) : TRemarketingList;
    Function Insert(profileId: string; aRemarketingList : TRemarketingList) : TRemarketingList;
    Function List(profileId: string; AQuery : string  = '') : TRemarketingListsListResponse;
    Function List(profileId: string; AQuery : TRemarketingListslistOptions) : TRemarketingListsListResponse;
    Function Patch(profileId: string; aRemarketingList : TRemarketingList; AQuery : string  = '') : TRemarketingList;
    Function Patch(profileId: string; aRemarketingList : TRemarketingList; AQuery : TRemarketingListspatchOptions) : TRemarketingList;
    Function Update(profileId: string; aRemarketingList : TRemarketingList) : TRemarketingList;
  end;
  
  
  { --------------------------------------------------------------------
    TReportsResource
    --------------------------------------------------------------------}
  
  
  //Optional query Options for TReportsResource, method List
  
  TReportsListOptions = Record
    maxResults : integer;
    pageToken : string;
    scope : string;
    sortField : string;
    sortOrder : string;
  end;
  
  
  //Optional query Options for TReportsResource, method Run
  
  TReportsRunOptions = Record
    synchronous : boolean;
  end;
  
  TReportsResource = Class(TGoogleResource)
  Public
    Class Function ResourceName : String; override;
    Class Function DefaultAPI : TGoogleAPIClass; override;
    Procedure Delete(profileId: string; reportId: string);
    Function Get(profileId: string; reportId: string) : TReport;
    Function Insert(profileId: string; aReport : TReport) : TReport;
    Function List(profileId: string; AQuery : string  = '') : TReportList;
    Function List(profileId: string; AQuery : TReportslistOptions) : TReportList;
    Function Patch(profileId: string; reportId: string; aReport : TReport) : TReport;
    Function Run(profileId: string; reportId: string; AQuery : string  = '') : TFile;
    Function Run(profileId: string; reportId: string; AQuery : TReportsrunOptions) : TFile;
    Function Update(profileId: string; reportId: string; aReport : TReport) : TReport;
  end;
  
  
  { --------------------------------------------------------------------
    TSitesResource
    --------------------------------------------------------------------}
  
  
  //Optional query Options for TSitesResource, method List
  
  TSitesListOptions = Record
    acceptsInStreamVideoPlacements : boolean;
    acceptsInterstitialPlacements : boolean;
    acceptsPublisherPaidPlacements : boolean;
    adWordsSite : boolean;
    approved : boolean;
    campaignIds : int64;
    directorySiteIds : int64;
    ids : int64;
    maxResults : integer;
    pageToken : string;
    searchString : string;
    sortField : string;
    sortOrder : string;
    subaccountId : int64;
    unmappedSite : boolean;
  end;
  
  
  //Optional query Options for TSitesResource, method Patch
  
  TSitesPatchOptions = Record
    id : int64;
  end;
  
  TSitesResource = Class(TGoogleResource)
  Public
    Class Function ResourceName : String; override;
    Class Function DefaultAPI : TGoogleAPIClass; override;
    Function Get(id: string; profileId: string) : TSite;
    Function Insert(profileId: string; aSite : TSite) : TSite;
    Function List(profileId: string; AQuery : string  = '') : TSitesListResponse;
    Function List(profileId: string; AQuery : TSiteslistOptions) : TSitesListResponse;
    Function Patch(profileId: string; aSite : TSite; AQuery : string  = '') : TSite;
    Function Patch(profileId: string; aSite : TSite; AQuery : TSitespatchOptions) : TSite;
    Function Update(profileId: string; aSite : TSite) : TSite;
  end;
  
  
  { --------------------------------------------------------------------
    TSizesResource
    --------------------------------------------------------------------}
  
  
  //Optional query Options for TSizesResource, method List
  
  TSizesListOptions = Record
    height : integer;
    iabStandard : boolean;
    ids : int64;
    width : integer;
  end;
  
  TSizesResource = Class(TGoogleResource)
  Public
    Class Function ResourceName : String; override;
    Class Function DefaultAPI : TGoogleAPIClass; override;
    Function Get(id: string; profileId: string) : TSize;
    Function Insert(profileId: string; aSize : TSize) : TSize;
    Function List(profileId: string; AQuery : string  = '') : TSizesListResponse;
    Function List(profileId: string; AQuery : TSizeslistOptions) : TSizesListResponse;
  end;
  
  
  { --------------------------------------------------------------------
    TSubaccountsResource
    --------------------------------------------------------------------}
  
  
  //Optional query Options for TSubaccountsResource, method List
  
  TSubaccountsListOptions = Record
    ids : int64;
    maxResults : integer;
    pageToken : string;
    searchString : string;
    sortField : string;
    sortOrder : string;
  end;
  
  
  //Optional query Options for TSubaccountsResource, method Patch
  
  TSubaccountsPatchOptions = Record
    id : int64;
  end;
  
  TSubaccountsResource = Class(TGoogleResource)
  Public
    Class Function ResourceName : String; override;
    Class Function DefaultAPI : TGoogleAPIClass; override;
    Function Get(id: string; profileId: string) : TSubaccount;
    Function Insert(profileId: string; aSubaccount : TSubaccount) : TSubaccount;
    Function List(profileId: string; AQuery : string  = '') : TSubaccountsListResponse;
    Function List(profileId: string; AQuery : TSubaccountslistOptions) : TSubaccountsListResponse;
    Function Patch(profileId: string; aSubaccount : TSubaccount; AQuery : string  = '') : TSubaccount;
    Function Patch(profileId: string; aSubaccount : TSubaccount; AQuery : TSubaccountspatchOptions) : TSubaccount;
    Function Update(profileId: string; aSubaccount : TSubaccount) : TSubaccount;
  end;
  
  
  { --------------------------------------------------------------------
    TTargetableRemarketingListsResource
    --------------------------------------------------------------------}
  
  
  //Optional query Options for TTargetableRemarketingListsResource, method List
  
  TTargetableRemarketingListsListOptions = Record
    active : boolean;
    advertiserId : int64;
    maxResults : integer;
    _name : string;
    pageToken : string;
    sortField : string;
    sortOrder : string;
  end;
  
  TTargetableRemarketingListsResource = Class(TGoogleResource)
  Public
    Class Function ResourceName : String; override;
    Class Function DefaultAPI : TGoogleAPIClass; override;
    Function Get(id: string; profileId: string) : TTargetableRemarketingList;
    Function List(profileId: string; AQuery : string  = '') : TTargetableRemarketingListsListResponse;
    Function List(profileId: string; AQuery : TTargetableRemarketingListslistOptions) : TTargetableRemarketingListsListResponse;
  end;
  
  
  { --------------------------------------------------------------------
    TUserProfilesResource
    --------------------------------------------------------------------}
  
  TUserProfilesResource = Class(TGoogleResource)
  Public
    Class Function ResourceName : String; override;
    Class Function DefaultAPI : TGoogleAPIClass; override;
    Function Get(profileId: string) : TUserProfile;
    Function List : TUserProfileList;
  end;
  
  
  { --------------------------------------------------------------------
    TUserRolePermissionGroupsResource
    --------------------------------------------------------------------}
  
  TUserRolePermissionGroupsResource = Class(TGoogleResource)
  Public
    Class Function ResourceName : String; override;
    Class Function DefaultAPI : TGoogleAPIClass; override;
    Function Get(id: string; profileId: string) : TUserRolePermissionGroup;
    Function List(profileId: string) : TUserRolePermissionGroupsListResponse;
  end;
  
  
  { --------------------------------------------------------------------
    TUserRolePermissionsResource
    --------------------------------------------------------------------}
  
  
  //Optional query Options for TUserRolePermissionsResource, method List
  
  TUserRolePermissionsListOptions = Record
    ids : int64;
  end;
  
  TUserRolePermissionsResource = Class(TGoogleResource)
  Public
    Class Function ResourceName : String; override;
    Class Function DefaultAPI : TGoogleAPIClass; override;
    Function Get(id: string; profileId: string) : TUserRolePermission;
    Function List(profileId: string; AQuery : string  = '') : TUserRolePermissionsListResponse;
    Function List(profileId: string; AQuery : TUserRolePermissionslistOptions) : TUserRolePermissionsListResponse;
  end;
  
  
  { --------------------------------------------------------------------
    TUserRolesResource
    --------------------------------------------------------------------}
  
  
  //Optional query Options for TUserRolesResource, method List
  
  TUserRolesListOptions = Record
    accountUserRoleOnly : boolean;
    ids : int64;
    maxResults : integer;
    pageToken : string;
    searchString : string;
    sortField : string;
    sortOrder : string;
    subaccountId : int64;
  end;
  
  
  //Optional query Options for TUserRolesResource, method Patch
  
  TUserRolesPatchOptions = Record
    id : int64;
  end;
  
  TUserRolesResource = Class(TGoogleResource)
  Public
    Class Function ResourceName : String; override;
    Class Function DefaultAPI : TGoogleAPIClass; override;
    Procedure Delete(id: string; profileId: string);
    Function Get(id: string; profileId: string) : TUserRole;
    Function Insert(profileId: string; aUserRole : TUserRole) : TUserRole;
    Function List(profileId: string; AQuery : string  = '') : TUserRolesListResponse;
    Function List(profileId: string; AQuery : TUserRoleslistOptions) : TUserRolesListResponse;
    Function Patch(profileId: string; aUserRole : TUserRole; AQuery : string  = '') : TUserRole;
    Function Patch(profileId: string; aUserRole : TUserRole; AQuery : TUserRolespatchOptions) : TUserRole;
    Function Update(profileId: string; aUserRole : TUserRole) : TUserRole;
  end;
  
  
  { --------------------------------------------------------------------
    TDfareportingAPI
    --------------------------------------------------------------------}
  
  TDfareportingAPI = Class(TGoogleAPI)
  Private
    FAccountActiveAdSummariesInstance : TAccountActiveAdSummariesResource;
    FAccountPermissionGroupsInstance : TAccountPermissionGroupsResource;
    FAccountPermissionsInstance : TAccountPermissionsResource;
    FAccountUserProfilesInstance : TAccountUserProfilesResource;
    FAccountsInstance : TAccountsResource;
    FAdsInstance : TAdsResource;
    FAdvertiserGroupsInstance : TAdvertiserGroupsResource;
    FAdvertisersInstance : TAdvertisersResource;
    FBrowsersInstance : TBrowsersResource;
    FCampaignCreativeAssociationsInstance : TCampaignCreativeAssociationsResource;
    FCampaignsInstance : TCampaignsResource;
    FChangeLogsInstance : TChangeLogsResource;
    FCitiesInstance : TCitiesResource;
    FConnectionTypesInstance : TConnectionTypesResource;
    FContentCategoriesInstance : TContentCategoriesResource;
    FCountriesInstance : TCountriesResource;
    FCreativeAssetsInstance : TCreativeAssetsResource;
    FCreativeFieldValuesInstance : TCreativeFieldValuesResource;
    FCreativeFieldsInstance : TCreativeFieldsResource;
    FCreativeGroupsInstance : TCreativeGroupsResource;
    FCreativesInstance : TCreativesResource;
    FDimensionValuesInstance : TDimensionValuesResource;
    FDirectorySiteContactsInstance : TDirectorySiteContactsResource;
    FDirectorySitesInstance : TDirectorySitesResource;
    FEventTagsInstance : TEventTagsResource;
    FFilesInstance : TFilesResource;
    FFloodlightActivitiesInstance : TFloodlightActivitiesResource;
    FFloodlightActivityGroupsInstance : TFloodlightActivityGroupsResource;
    FFloodlightConfigurationsInstance : TFloodlightConfigurationsResource;
    FInventoryItemsInstance : TInventoryItemsResource;
    FLandingPagesInstance : TLandingPagesResource;
    FMetrosInstance : TMetrosResource;
    FMobileCarriersInstance : TMobileCarriersResource;
    FOperatingSystemVersionsInstance : TOperatingSystemVersionsResource;
    FOperatingSystemsInstance : TOperatingSystemsResource;
    FOrderDocumentsInstance : TOrderDocumentsResource;
    FOrdersInstance : TOrdersResource;
    FPlacementGroupsInstance : TPlacementGroupsResource;
    FPlacementStrategiesInstance : TPlacementStrategiesResource;
    FPlacementsInstance : TPlacementsResource;
    FPlatformTypesInstance : TPlatformTypesResource;
    FPostalCodesInstance : TPostalCodesResource;
    FProjectsInstance : TProjectsResource;
    FRegionsInstance : TRegionsResource;
    FRemarketingListSharesInstance : TRemarketingListSharesResource;
    FRemarketingListsInstance : TRemarketingListsResource;
    FReportsInstance : TReportsResource;
    FSitesInstance : TSitesResource;
    FSizesInstance : TSizesResource;
    FSubaccountsInstance : TSubaccountsResource;
    FTargetableRemarketingListsInstance : TTargetableRemarketingListsResource;
    FUserProfilesInstance : TUserProfilesResource;
    FUserRolePermissionGroupsInstance : TUserRolePermissionGroupsResource;
    FUserRolePermissionsInstance : TUserRolePermissionsResource;
    FUserRolesInstance : TUserRolesResource;
    Function GetAccountActiveAdSummariesInstance : TAccountActiveAdSummariesResource;virtual;
    Function GetAccountPermissionGroupsInstance : TAccountPermissionGroupsResource;virtual;
    Function GetAccountPermissionsInstance : TAccountPermissionsResource;virtual;
    Function GetAccountUserProfilesInstance : TAccountUserProfilesResource;virtual;
    Function GetAccountsInstance : TAccountsResource;virtual;
    Function GetAdsInstance : TAdsResource;virtual;
    Function GetAdvertiserGroupsInstance : TAdvertiserGroupsResource;virtual;
    Function GetAdvertisersInstance : TAdvertisersResource;virtual;
    Function GetBrowsersInstance : TBrowsersResource;virtual;
    Function GetCampaignCreativeAssociationsInstance : TCampaignCreativeAssociationsResource;virtual;
    Function GetCampaignsInstance : TCampaignsResource;virtual;
    Function GetChangeLogsInstance : TChangeLogsResource;virtual;
    Function GetCitiesInstance : TCitiesResource;virtual;
    Function GetConnectionTypesInstance : TConnectionTypesResource;virtual;
    Function GetContentCategoriesInstance : TContentCategoriesResource;virtual;
    Function GetCountriesInstance : TCountriesResource;virtual;
    Function GetCreativeAssetsInstance : TCreativeAssetsResource;virtual;
    Function GetCreativeFieldValuesInstance : TCreativeFieldValuesResource;virtual;
    Function GetCreativeFieldsInstance : TCreativeFieldsResource;virtual;
    Function GetCreativeGroupsInstance : TCreativeGroupsResource;virtual;
    Function GetCreativesInstance : TCreativesResource;virtual;
    Function GetDimensionValuesInstance : TDimensionValuesResource;virtual;
    Function GetDirectorySiteContactsInstance : TDirectorySiteContactsResource;virtual;
    Function GetDirectorySitesInstance : TDirectorySitesResource;virtual;
    Function GetEventTagsInstance : TEventTagsResource;virtual;
    Function GetFilesInstance : TFilesResource;virtual;
    Function GetFloodlightActivitiesInstance : TFloodlightActivitiesResource;virtual;
    Function GetFloodlightActivityGroupsInstance : TFloodlightActivityGroupsResource;virtual;
    Function GetFloodlightConfigurationsInstance : TFloodlightConfigurationsResource;virtual;
    Function GetInventoryItemsInstance : TInventoryItemsResource;virtual;
    Function GetLandingPagesInstance : TLandingPagesResource;virtual;
    Function GetMetrosInstance : TMetrosResource;virtual;
    Function GetMobileCarriersInstance : TMobileCarriersResource;virtual;
    Function GetOperatingSystemVersionsInstance : TOperatingSystemVersionsResource;virtual;
    Function GetOperatingSystemsInstance : TOperatingSystemsResource;virtual;
    Function GetOrderDocumentsInstance : TOrderDocumentsResource;virtual;
    Function GetOrdersInstance : TOrdersResource;virtual;
    Function GetPlacementGroupsInstance : TPlacementGroupsResource;virtual;
    Function GetPlacementStrategiesInstance : TPlacementStrategiesResource;virtual;
    Function GetPlacementsInstance : TPlacementsResource;virtual;
    Function GetPlatformTypesInstance : TPlatformTypesResource;virtual;
    Function GetPostalCodesInstance : TPostalCodesResource;virtual;
    Function GetProjectsInstance : TProjectsResource;virtual;
    Function GetRegionsInstance : TRegionsResource;virtual;
    Function GetRemarketingListSharesInstance : TRemarketingListSharesResource;virtual;
    Function GetRemarketingListsInstance : TRemarketingListsResource;virtual;
    Function GetReportsInstance : TReportsResource;virtual;
    Function GetSitesInstance : TSitesResource;virtual;
    Function GetSizesInstance : TSizesResource;virtual;
    Function GetSubaccountsInstance : TSubaccountsResource;virtual;
    Function GetTargetableRemarketingListsInstance : TTargetableRemarketingListsResource;virtual;
    Function GetUserProfilesInstance : TUserProfilesResource;virtual;
    Function GetUserRolePermissionGroupsInstance : TUserRolePermissionGroupsResource;virtual;
    Function GetUserRolePermissionsInstance : TUserRolePermissionsResource;virtual;
    Function GetUserRolesInstance : TUserRolesResource;virtual;
  Public
    //Override class functions with API info
    Class Function APIName : String; override;
    Class Function APIVersion : String; override;
    Class Function APIRevision : String; override;
    Class Function APIID : String; override;
    Class Function APITitle : String; override;
    Class Function APIDescription : String; override;
    Class Function APIOwnerDomain : String; override;
    Class Function APIOwnerName : String; override;
    Class Function APIIcon16 : String; override;
    Class Function APIIcon32 : String; override;
    Class Function APIdocumentationLink : String; override;
    Class Function APIrootUrl : string; override;
    Class Function APIbasePath : string;override;
    Class Function APIbaseURL : String;override;
    Class Function APIProtocol : string;override;
    Class Function APIservicePath : string;override;
    Class Function APIbatchPath : String;override;
    Class Function APIAuthScopes : TScopeInfoArray;override;
    Class Function APINeedsAuth : Boolean;override;
    Class Procedure RegisterAPIResources; override;
    //Add create function for resources
    Function CreateAccountActiveAdSummariesResource(AOwner : TComponent) : TAccountActiveAdSummariesResource;virtual;overload;
    Function CreateAccountActiveAdSummariesResource : TAccountActiveAdSummariesResource;virtual;overload;
    Function CreateAccountPermissionGroupsResource(AOwner : TComponent) : TAccountPermissionGroupsResource;virtual;overload;
    Function CreateAccountPermissionGroupsResource : TAccountPermissionGroupsResource;virtual;overload;
    Function CreateAccountPermissionsResource(AOwner : TComponent) : TAccountPermissionsResource;virtual;overload;
    Function CreateAccountPermissionsResource : TAccountPermissionsResource;virtual;overload;
    Function CreateAccountUserProfilesResource(AOwner : TComponent) : TAccountUserProfilesResource;virtual;overload;
    Function CreateAccountUserProfilesResource : TAccountUserProfilesResource;virtual;overload;
    Function CreateAccountsResource(AOwner : TComponent) : TAccountsResource;virtual;overload;
    Function CreateAccountsResource : TAccountsResource;virtual;overload;
    Function CreateAdsResource(AOwner : TComponent) : TAdsResource;virtual;overload;
    Function CreateAdsResource : TAdsResource;virtual;overload;
    Function CreateAdvertiserGroupsResource(AOwner : TComponent) : TAdvertiserGroupsResource;virtual;overload;
    Function CreateAdvertiserGroupsResource : TAdvertiserGroupsResource;virtual;overload;
    Function CreateAdvertisersResource(AOwner : TComponent) : TAdvertisersResource;virtual;overload;
    Function CreateAdvertisersResource : TAdvertisersResource;virtual;overload;
    Function CreateBrowsersResource(AOwner : TComponent) : TBrowsersResource;virtual;overload;
    Function CreateBrowsersResource : TBrowsersResource;virtual;overload;
    Function CreateCampaignCreativeAssociationsResource(AOwner : TComponent) : TCampaignCreativeAssociationsResource;virtual;overload;
    Function CreateCampaignCreativeAssociationsResource : TCampaignCreativeAssociationsResource;virtual;overload;
    Function CreateCampaignsResource(AOwner : TComponent) : TCampaignsResource;virtual;overload;
    Function CreateCampaignsResource : TCampaignsResource;virtual;overload;
    Function CreateChangeLogsResource(AOwner : TComponent) : TChangeLogsResource;virtual;overload;
    Function CreateChangeLogsResource : TChangeLogsResource;virtual;overload;
    Function CreateCitiesResource(AOwner : TComponent) : TCitiesResource;virtual;overload;
    Function CreateCitiesResource : TCitiesResource;virtual;overload;
    Function CreateConnectionTypesResource(AOwner : TComponent) : TConnectionTypesResource;virtual;overload;
    Function CreateConnectionTypesResource : TConnectionTypesResource;virtual;overload;
    Function CreateContentCategoriesResource(AOwner : TComponent) : TContentCategoriesResource;virtual;overload;
    Function CreateContentCategoriesResource : TContentCategoriesResource;virtual;overload;
    Function CreateCountriesResource(AOwner : TComponent) : TCountriesResource;virtual;overload;
    Function CreateCountriesResource : TCountriesResource;virtual;overload;
    Function CreateCreativeAssetsResource(AOwner : TComponent) : TCreativeAssetsResource;virtual;overload;
    Function CreateCreativeAssetsResource : TCreativeAssetsResource;virtual;overload;
    Function CreateCreativeFieldValuesResource(AOwner : TComponent) : TCreativeFieldValuesResource;virtual;overload;
    Function CreateCreativeFieldValuesResource : TCreativeFieldValuesResource;virtual;overload;
    Function CreateCreativeFieldsResource(AOwner : TComponent) : TCreativeFieldsResource;virtual;overload;
    Function CreateCreativeFieldsResource : TCreativeFieldsResource;virtual;overload;
    Function CreateCreativeGroupsResource(AOwner : TComponent) : TCreativeGroupsResource;virtual;overload;
    Function CreateCreativeGroupsResource : TCreativeGroupsResource;virtual;overload;
    Function CreateCreativesResource(AOwner : TComponent) : TCreativesResource;virtual;overload;
    Function CreateCreativesResource : TCreativesResource;virtual;overload;
    Function CreateDimensionValuesResource(AOwner : TComponent) : TDimensionValuesResource;virtual;overload;
    Function CreateDimensionValuesResource : TDimensionValuesResource;virtual;overload;
    Function CreateDirectorySiteContactsResource(AOwner : TComponent) : TDirectorySiteContactsResource;virtual;overload;
    Function CreateDirectorySiteContactsResource : TDirectorySiteContactsResource;virtual;overload;
    Function CreateDirectorySitesResource(AOwner : TComponent) : TDirectorySitesResource;virtual;overload;
    Function CreateDirectorySitesResource : TDirectorySitesResource;virtual;overload;
    Function CreateEventTagsResource(AOwner : TComponent) : TEventTagsResource;virtual;overload;
    Function CreateEventTagsResource : TEventTagsResource;virtual;overload;
    Function CreateFilesResource(AOwner : TComponent) : TFilesResource;virtual;overload;
    Function CreateFilesResource : TFilesResource;virtual;overload;
    Function CreateFloodlightActivitiesResource(AOwner : TComponent) : TFloodlightActivitiesResource;virtual;overload;
    Function CreateFloodlightActivitiesResource : TFloodlightActivitiesResource;virtual;overload;
    Function CreateFloodlightActivityGroupsResource(AOwner : TComponent) : TFloodlightActivityGroupsResource;virtual;overload;
    Function CreateFloodlightActivityGroupsResource : TFloodlightActivityGroupsResource;virtual;overload;
    Function CreateFloodlightConfigurationsResource(AOwner : TComponent) : TFloodlightConfigurationsResource;virtual;overload;
    Function CreateFloodlightConfigurationsResource : TFloodlightConfigurationsResource;virtual;overload;
    Function CreateInventoryItemsResource(AOwner : TComponent) : TInventoryItemsResource;virtual;overload;
    Function CreateInventoryItemsResource : TInventoryItemsResource;virtual;overload;
    Function CreateLandingPagesResource(AOwner : TComponent) : TLandingPagesResource;virtual;overload;
    Function CreateLandingPagesResource : TLandingPagesResource;virtual;overload;
    Function CreateMetrosResource(AOwner : TComponent) : TMetrosResource;virtual;overload;
    Function CreateMetrosResource : TMetrosResource;virtual;overload;
    Function CreateMobileCarriersResource(AOwner : TComponent) : TMobileCarriersResource;virtual;overload;
    Function CreateMobileCarriersResource : TMobileCarriersResource;virtual;overload;
    Function CreateOperatingSystemVersionsResource(AOwner : TComponent) : TOperatingSystemVersionsResource;virtual;overload;
    Function CreateOperatingSystemVersionsResource : TOperatingSystemVersionsResource;virtual;overload;
    Function CreateOperatingSystemsResource(AOwner : TComponent) : TOperatingSystemsResource;virtual;overload;
    Function CreateOperatingSystemsResource : TOperatingSystemsResource;virtual;overload;
    Function CreateOrderDocumentsResource(AOwner : TComponent) : TOrderDocumentsResource;virtual;overload;
    Function CreateOrderDocumentsResource : TOrderDocumentsResource;virtual;overload;
    Function CreateOrdersResource(AOwner : TComponent) : TOrdersResource;virtual;overload;
    Function CreateOrdersResource : TOrdersResource;virtual;overload;
    Function CreatePlacementGroupsResource(AOwner : TComponent) : TPlacementGroupsResource;virtual;overload;
    Function CreatePlacementGroupsResource : TPlacementGroupsResource;virtual;overload;
    Function CreatePlacementStrategiesResource(AOwner : TComponent) : TPlacementStrategiesResource;virtual;overload;
    Function CreatePlacementStrategiesResource : TPlacementStrategiesResource;virtual;overload;
    Function CreatePlacementsResource(AOwner : TComponent) : TPlacementsResource;virtual;overload;
    Function CreatePlacementsResource : TPlacementsResource;virtual;overload;
    Function CreatePlatformTypesResource(AOwner : TComponent) : TPlatformTypesResource;virtual;overload;
    Function CreatePlatformTypesResource : TPlatformTypesResource;virtual;overload;
    Function CreatePostalCodesResource(AOwner : TComponent) : TPostalCodesResource;virtual;overload;
    Function CreatePostalCodesResource : TPostalCodesResource;virtual;overload;
    Function CreateProjectsResource(AOwner : TComponent) : TProjectsResource;virtual;overload;
    Function CreateProjectsResource : TProjectsResource;virtual;overload;
    Function CreateRegionsResource(AOwner : TComponent) : TRegionsResource;virtual;overload;
    Function CreateRegionsResource : TRegionsResource;virtual;overload;
    Function CreateRemarketingListSharesResource(AOwner : TComponent) : TRemarketingListSharesResource;virtual;overload;
    Function CreateRemarketingListSharesResource : TRemarketingListSharesResource;virtual;overload;
    Function CreateRemarketingListsResource(AOwner : TComponent) : TRemarketingListsResource;virtual;overload;
    Function CreateRemarketingListsResource : TRemarketingListsResource;virtual;overload;
    Function CreateReportsResource(AOwner : TComponent) : TReportsResource;virtual;overload;
    Function CreateReportsResource : TReportsResource;virtual;overload;
    Function CreateSitesResource(AOwner : TComponent) : TSitesResource;virtual;overload;
    Function CreateSitesResource : TSitesResource;virtual;overload;
    Function CreateSizesResource(AOwner : TComponent) : TSizesResource;virtual;overload;
    Function CreateSizesResource : TSizesResource;virtual;overload;
    Function CreateSubaccountsResource(AOwner : TComponent) : TSubaccountsResource;virtual;overload;
    Function CreateSubaccountsResource : TSubaccountsResource;virtual;overload;
    Function CreateTargetableRemarketingListsResource(AOwner : TComponent) : TTargetableRemarketingListsResource;virtual;overload;
    Function CreateTargetableRemarketingListsResource : TTargetableRemarketingListsResource;virtual;overload;
    Function CreateUserProfilesResource(AOwner : TComponent) : TUserProfilesResource;virtual;overload;
    Function CreateUserProfilesResource : TUserProfilesResource;virtual;overload;
    Function CreateUserRolePermissionGroupsResource(AOwner : TComponent) : TUserRolePermissionGroupsResource;virtual;overload;
    Function CreateUserRolePermissionGroupsResource : TUserRolePermissionGroupsResource;virtual;overload;
    Function CreateUserRolePermissionsResource(AOwner : TComponent) : TUserRolePermissionsResource;virtual;overload;
    Function CreateUserRolePermissionsResource : TUserRolePermissionsResource;virtual;overload;
    Function CreateUserRolesResource(AOwner : TComponent) : TUserRolesResource;virtual;overload;
    Function CreateUserRolesResource : TUserRolesResource;virtual;overload;
    //Add default on-demand instances for resources
    Property AccountActiveAdSummariesResource : TAccountActiveAdSummariesResource Read GetAccountActiveAdSummariesInstance;
    Property AccountPermissionGroupsResource : TAccountPermissionGroupsResource Read GetAccountPermissionGroupsInstance;
    Property AccountPermissionsResource : TAccountPermissionsResource Read GetAccountPermissionsInstance;
    Property AccountUserProfilesResource : TAccountUserProfilesResource Read GetAccountUserProfilesInstance;
    Property AccountsResource : TAccountsResource Read GetAccountsInstance;
    Property AdsResource : TAdsResource Read GetAdsInstance;
    Property AdvertiserGroupsResource : TAdvertiserGroupsResource Read GetAdvertiserGroupsInstance;
    Property AdvertisersResource : TAdvertisersResource Read GetAdvertisersInstance;
    Property BrowsersResource : TBrowsersResource Read GetBrowsersInstance;
    Property CampaignCreativeAssociationsResource : TCampaignCreativeAssociationsResource Read GetCampaignCreativeAssociationsInstance;
    Property CampaignsResource : TCampaignsResource Read GetCampaignsInstance;
    Property ChangeLogsResource : TChangeLogsResource Read GetChangeLogsInstance;
    Property CitiesResource : TCitiesResource Read GetCitiesInstance;
    Property ConnectionTypesResource : TConnectionTypesResource Read GetConnectionTypesInstance;
    Property ContentCategoriesResource : TContentCategoriesResource Read GetContentCategoriesInstance;
    Property CountriesResource : TCountriesResource Read GetCountriesInstance;
    Property CreativeAssetsResource : TCreativeAssetsResource Read GetCreativeAssetsInstance;
    Property CreativeFieldValuesResource : TCreativeFieldValuesResource Read GetCreativeFieldValuesInstance;
    Property CreativeFieldsResource : TCreativeFieldsResource Read GetCreativeFieldsInstance;
    Property CreativeGroupsResource : TCreativeGroupsResource Read GetCreativeGroupsInstance;
    Property CreativesResource : TCreativesResource Read GetCreativesInstance;
    Property DimensionValuesResource : TDimensionValuesResource Read GetDimensionValuesInstance;
    Property DirectorySiteContactsResource : TDirectorySiteContactsResource Read GetDirectorySiteContactsInstance;
    Property DirectorySitesResource : TDirectorySitesResource Read GetDirectorySitesInstance;
    Property EventTagsResource : TEventTagsResource Read GetEventTagsInstance;
    Property FilesResource : TFilesResource Read GetFilesInstance;
    Property FloodlightActivitiesResource : TFloodlightActivitiesResource Read GetFloodlightActivitiesInstance;
    Property FloodlightActivityGroupsResource : TFloodlightActivityGroupsResource Read GetFloodlightActivityGroupsInstance;
    Property FloodlightConfigurationsResource : TFloodlightConfigurationsResource Read GetFloodlightConfigurationsInstance;
    Property InventoryItemsResource : TInventoryItemsResource Read GetInventoryItemsInstance;
    Property LandingPagesResource : TLandingPagesResource Read GetLandingPagesInstance;
    Property MetrosResource : TMetrosResource Read GetMetrosInstance;
    Property MobileCarriersResource : TMobileCarriersResource Read GetMobileCarriersInstance;
    Property OperatingSystemVersionsResource : TOperatingSystemVersionsResource Read GetOperatingSystemVersionsInstance;
    Property OperatingSystemsResource : TOperatingSystemsResource Read GetOperatingSystemsInstance;
    Property OrderDocumentsResource : TOrderDocumentsResource Read GetOrderDocumentsInstance;
    Property OrdersResource : TOrdersResource Read GetOrdersInstance;
    Property PlacementGroupsResource : TPlacementGroupsResource Read GetPlacementGroupsInstance;
    Property PlacementStrategiesResource : TPlacementStrategiesResource Read GetPlacementStrategiesInstance;
    Property PlacementsResource : TPlacementsResource Read GetPlacementsInstance;
    Property PlatformTypesResource : TPlatformTypesResource Read GetPlatformTypesInstance;
    Property PostalCodesResource : TPostalCodesResource Read GetPostalCodesInstance;
    Property ProjectsResource : TProjectsResource Read GetProjectsInstance;
    Property RegionsResource : TRegionsResource Read GetRegionsInstance;
    Property RemarketingListSharesResource : TRemarketingListSharesResource Read GetRemarketingListSharesInstance;
    Property RemarketingListsResource : TRemarketingListsResource Read GetRemarketingListsInstance;
    Property ReportsResource : TReportsResource Read GetReportsInstance;
    Property SitesResource : TSitesResource Read GetSitesInstance;
    Property SizesResource : TSizesResource Read GetSizesInstance;
    Property SubaccountsResource : TSubaccountsResource Read GetSubaccountsInstance;
    Property TargetableRemarketingListsResource : TTargetableRemarketingListsResource Read GetTargetableRemarketingListsInstance;
    Property UserProfilesResource : TUserProfilesResource Read GetUserProfilesInstance;
    Property UserRolePermissionGroupsResource : TUserRolePermissionGroupsResource Read GetUserRolePermissionGroupsInstance;
    Property UserRolePermissionsResource : TUserRolePermissionsResource Read GetUserRolePermissionsInstance;
    Property UserRolesResource : TUserRolesResource Read GetUserRolesInstance;
  end;

implementation


{ --------------------------------------------------------------------
  TAccount
  --------------------------------------------------------------------}


Procedure TAccount.SetaccountPermissionIds(AIndex : Integer; AValue : TAccountaccountPermissionIds); 

begin
  If (FaccountPermissionIds=AValue) then exit;
  FaccountPermissionIds:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TAccount.SetaccountProfile(AIndex : Integer; AValue : string); 

begin
  If (FaccountProfile=AValue) then exit;
  FaccountProfile:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TAccount.Setactive(AIndex : Integer; AValue : boolean); 

begin
  If (Factive=AValue) then exit;
  Factive:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TAccount.SetactiveAdsLimitTier(AIndex : Integer; AValue : string); 

begin
  If (FactiveAdsLimitTier=AValue) then exit;
  FactiveAdsLimitTier:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TAccount.SetactiveViewOptOut(AIndex : Integer; AValue : boolean); 

begin
  If (FactiveViewOptOut=AValue) then exit;
  FactiveViewOptOut:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TAccount.SetavailablePermissionIds(AIndex : Integer; AValue : TAccountavailablePermissionIds); 

begin
  If (FavailablePermissionIds=AValue) then exit;
  FavailablePermissionIds:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TAccount.SetcomscoreVceEnabled(AIndex : Integer; AValue : boolean); 

begin
  If (FcomscoreVceEnabled=AValue) then exit;
  FcomscoreVceEnabled:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TAccount.SetcountryId(AIndex : Integer; AValue : string); 

begin
  If (FcountryId=AValue) then exit;
  FcountryId:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TAccount.SetcurrencyId(AIndex : Integer; AValue : string); 

begin
  If (FcurrencyId=AValue) then exit;
  FcurrencyId:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TAccount.SetdefaultCreativeSizeId(AIndex : Integer; AValue : string); 

begin
  If (FdefaultCreativeSizeId=AValue) then exit;
  FdefaultCreativeSizeId:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TAccount.Setdescription(AIndex : Integer; AValue : string); 

begin
  If (Fdescription=AValue) then exit;
  Fdescription:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TAccount.Setid(AIndex : Integer; AValue : string); 

begin
  If (Fid=AValue) then exit;
  Fid:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TAccount.Setkind(AIndex : Integer; AValue : string); 

begin
  If (Fkind=AValue) then exit;
  Fkind:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TAccount.Setlocale(AIndex : Integer; AValue : string); 

begin
  If (Flocale=AValue) then exit;
  Flocale:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TAccount.SetmaximumImageSize(AIndex : Integer; AValue : string); 

begin
  If (FmaximumImageSize=AValue) then exit;
  FmaximumImageSize:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TAccount.Setname(AIndex : Integer; AValue : string); 

begin
  If (Fname=AValue) then exit;
  Fname:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TAccount.SetnielsenOcrEnabled(AIndex : Integer; AValue : boolean); 

begin
  If (FnielsenOcrEnabled=AValue) then exit;
  FnielsenOcrEnabled:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TAccount.SetreportsConfiguration(AIndex : Integer; AValue : TReportsConfiguration); 

begin
  If (FreportsConfiguration=AValue) then exit;
  FreportsConfiguration:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TAccount.SetteaserSizeLimit(AIndex : Integer; AValue : string); 

begin
  If (FteaserSizeLimit=AValue) then exit;
  FteaserSizeLimit:=AValue;
  MarkPropertyChanged(AIndex);
end;





{ --------------------------------------------------------------------
  TAccountaccountPermissionIds
  --------------------------------------------------------------------}




{ --------------------------------------------------------------------
  TAccountavailablePermissionIds
  --------------------------------------------------------------------}




{ --------------------------------------------------------------------
  TAccountActiveAdSummary
  --------------------------------------------------------------------}


Procedure TAccountActiveAdSummary.SetaccountId(AIndex : Integer; AValue : string); 

begin
  If (FaccountId=AValue) then exit;
  FaccountId:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TAccountActiveAdSummary.SetactiveAds(AIndex : Integer; AValue : string); 

begin
  If (FactiveAds=AValue) then exit;
  FactiveAds:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TAccountActiveAdSummary.SetactiveAdsLimitTier(AIndex : Integer; AValue : string); 

begin
  If (FactiveAdsLimitTier=AValue) then exit;
  FactiveAdsLimitTier:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TAccountActiveAdSummary.SetavailableAds(AIndex : Integer; AValue : string); 

begin
  If (FavailableAds=AValue) then exit;
  FavailableAds:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TAccountActiveAdSummary.Setkind(AIndex : Integer; AValue : string); 

begin
  If (Fkind=AValue) then exit;
  Fkind:=AValue;
  MarkPropertyChanged(AIndex);
end;





{ --------------------------------------------------------------------
  TAccountPermission
  --------------------------------------------------------------------}


Procedure TAccountPermission.SetaccountProfiles(AIndex : Integer; AValue : TAccountPermissionaccountProfiles); 

begin
  If (FaccountProfiles=AValue) then exit;
  FaccountProfiles:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TAccountPermission.Setid(AIndex : Integer; AValue : string); 

begin
  If (Fid=AValue) then exit;
  Fid:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TAccountPermission.Setkind(AIndex : Integer; AValue : string); 

begin
  If (Fkind=AValue) then exit;
  Fkind:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TAccountPermission.Setlevel(AIndex : Integer; AValue : string); 

begin
  If (Flevel=AValue) then exit;
  Flevel:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TAccountPermission.Setname(AIndex : Integer; AValue : string); 

begin
  If (Fname=AValue) then exit;
  Fname:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TAccountPermission.SetpermissionGroupId(AIndex : Integer; AValue : string); 

begin
  If (FpermissionGroupId=AValue) then exit;
  FpermissionGroupId:=AValue;
  MarkPropertyChanged(AIndex);
end;





{ --------------------------------------------------------------------
  TAccountPermissionaccountProfiles
  --------------------------------------------------------------------}




{ --------------------------------------------------------------------
  TAccountPermissionGroup
  --------------------------------------------------------------------}


Procedure TAccountPermissionGroup.Setid(AIndex : Integer; AValue : string); 

begin
  If (Fid=AValue) then exit;
  Fid:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TAccountPermissionGroup.Setkind(AIndex : Integer; AValue : string); 

begin
  If (Fkind=AValue) then exit;
  Fkind:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TAccountPermissionGroup.Setname(AIndex : Integer; AValue : string); 

begin
  If (Fname=AValue) then exit;
  Fname:=AValue;
  MarkPropertyChanged(AIndex);
end;





{ --------------------------------------------------------------------
  TAccountPermissionGroupsListResponse
  --------------------------------------------------------------------}


Procedure TAccountPermissionGroupsListResponse.SetaccountPermissionGroups(AIndex : Integer; AValue : TAccountPermissionGroupsListResponseaccountPermissionGroups); 

begin
  If (FaccountPermissionGroups=AValue) then exit;
  FaccountPermissionGroups:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TAccountPermissionGroupsListResponse.Setkind(AIndex : Integer; AValue : string); 

begin
  If (Fkind=AValue) then exit;
  Fkind:=AValue;
  MarkPropertyChanged(AIndex);
end;





{ --------------------------------------------------------------------
  TAccountPermissionGroupsListResponseaccountPermissionGroups
  --------------------------------------------------------------------}




{ --------------------------------------------------------------------
  TAccountPermissionsListResponse
  --------------------------------------------------------------------}


Procedure TAccountPermissionsListResponse.SetaccountPermissions(AIndex : Integer; AValue : TAccountPermissionsListResponseaccountPermissions); 

begin
  If (FaccountPermissions=AValue) then exit;
  FaccountPermissions:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TAccountPermissionsListResponse.Setkind(AIndex : Integer; AValue : string); 

begin
  If (Fkind=AValue) then exit;
  Fkind:=AValue;
  MarkPropertyChanged(AIndex);
end;





{ --------------------------------------------------------------------
  TAccountPermissionsListResponseaccountPermissions
  --------------------------------------------------------------------}




{ --------------------------------------------------------------------
  TAccountUserProfile
  --------------------------------------------------------------------}


Procedure TAccountUserProfile.SetaccountId(AIndex : Integer; AValue : string); 

begin
  If (FaccountId=AValue) then exit;
  FaccountId:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TAccountUserProfile.Setactive(AIndex : Integer; AValue : boolean); 

begin
  If (Factive=AValue) then exit;
  Factive:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TAccountUserProfile.SetadvertiserFilter(AIndex : Integer; AValue : TObjectFilter); 

begin
  If (FadvertiserFilter=AValue) then exit;
  FadvertiserFilter:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TAccountUserProfile.SetcampaignFilter(AIndex : Integer; AValue : TObjectFilter); 

begin
  If (FcampaignFilter=AValue) then exit;
  FcampaignFilter:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TAccountUserProfile.Setcomments(AIndex : Integer; AValue : string); 

begin
  If (Fcomments=AValue) then exit;
  Fcomments:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TAccountUserProfile.Setemail(AIndex : Integer; AValue : string); 

begin
  If (Femail=AValue) then exit;
  Femail:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TAccountUserProfile.Setid(AIndex : Integer; AValue : string); 

begin
  If (Fid=AValue) then exit;
  Fid:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TAccountUserProfile.Setkind(AIndex : Integer; AValue : string); 

begin
  If (Fkind=AValue) then exit;
  Fkind:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TAccountUserProfile.Setlocale(AIndex : Integer; AValue : string); 

begin
  If (Flocale=AValue) then exit;
  Flocale:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TAccountUserProfile.Setname(AIndex : Integer; AValue : string); 

begin
  If (Fname=AValue) then exit;
  Fname:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TAccountUserProfile.SetsiteFilter(AIndex : Integer; AValue : TObjectFilter); 

begin
  If (FsiteFilter=AValue) then exit;
  FsiteFilter:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TAccountUserProfile.SetsubaccountId(AIndex : Integer; AValue : string); 

begin
  If (FsubaccountId=AValue) then exit;
  FsubaccountId:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TAccountUserProfile.SettraffickerType(AIndex : Integer; AValue : string); 

begin
  If (FtraffickerType=AValue) then exit;
  FtraffickerType:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TAccountUserProfile.SetuserAccessType(AIndex : Integer; AValue : string); 

begin
  If (FuserAccessType=AValue) then exit;
  FuserAccessType:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TAccountUserProfile.SetuserRoleFilter(AIndex : Integer; AValue : TObjectFilter); 

begin
  If (FuserRoleFilter=AValue) then exit;
  FuserRoleFilter:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TAccountUserProfile.SetuserRoleId(AIndex : Integer; AValue : string); 

begin
  If (FuserRoleId=AValue) then exit;
  FuserRoleId:=AValue;
  MarkPropertyChanged(AIndex);
end;





{ --------------------------------------------------------------------
  TAccountUserProfilesListResponse
  --------------------------------------------------------------------}


Procedure TAccountUserProfilesListResponse.SetaccountUserProfiles(AIndex : Integer; AValue : TAccountUserProfilesListResponseaccountUserProfiles); 

begin
  If (FaccountUserProfiles=AValue) then exit;
  FaccountUserProfiles:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TAccountUserProfilesListResponse.Setkind(AIndex : Integer; AValue : string); 

begin
  If (Fkind=AValue) then exit;
  Fkind:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TAccountUserProfilesListResponse.SetnextPageToken(AIndex : Integer; AValue : string); 

begin
  If (FnextPageToken=AValue) then exit;
  FnextPageToken:=AValue;
  MarkPropertyChanged(AIndex);
end;





{ --------------------------------------------------------------------
  TAccountUserProfilesListResponseaccountUserProfiles
  --------------------------------------------------------------------}




{ --------------------------------------------------------------------
  TAccountsListResponse
  --------------------------------------------------------------------}


Procedure TAccountsListResponse.Setaccounts(AIndex : Integer; AValue : TAccountsListResponseaccounts); 

begin
  If (Faccounts=AValue) then exit;
  Faccounts:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TAccountsListResponse.Setkind(AIndex : Integer; AValue : string); 

begin
  If (Fkind=AValue) then exit;
  Fkind:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TAccountsListResponse.SetnextPageToken(AIndex : Integer; AValue : string); 

begin
  If (FnextPageToken=AValue) then exit;
  FnextPageToken:=AValue;
  MarkPropertyChanged(AIndex);
end;





{ --------------------------------------------------------------------
  TAccountsListResponseaccounts
  --------------------------------------------------------------------}




{ --------------------------------------------------------------------
  TActivities
  --------------------------------------------------------------------}


Procedure TActivities.Setfilters(AIndex : Integer; AValue : TActivitiesfilters); 

begin
  If (Ffilters=AValue) then exit;
  Ffilters:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TActivities.Setkind(AIndex : Integer; AValue : string); 

begin
  If (Fkind=AValue) then exit;
  Fkind:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TActivities.SetmetricNames(AIndex : Integer; AValue : TActivitiesmetricNames); 

begin
  If (FmetricNames=AValue) then exit;
  FmetricNames:=AValue;
  MarkPropertyChanged(AIndex);
end;





{ --------------------------------------------------------------------
  TActivitiesfilters
  --------------------------------------------------------------------}




{ --------------------------------------------------------------------
  TActivitiesmetricNames
  --------------------------------------------------------------------}




{ --------------------------------------------------------------------
  TAd
  --------------------------------------------------------------------}


Procedure TAd.SetaccountId(AIndex : Integer; AValue : string); 

begin
  If (FaccountId=AValue) then exit;
  FaccountId:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TAd.Setactive(AIndex : Integer; AValue : boolean); 

begin
  If (Factive=AValue) then exit;
  Factive:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TAd.SetadvertiserId(AIndex : Integer; AValue : string); 

begin
  If (FadvertiserId=AValue) then exit;
  FadvertiserId:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TAd.SetadvertiserIdDimensionValue(AIndex : Integer; AValue : TDimensionValue); 

begin
  If (FadvertiserIdDimensionValue=AValue) then exit;
  FadvertiserIdDimensionValue:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TAd.Setarchived(AIndex : Integer; AValue : boolean); 

begin
  If (Farchived=AValue) then exit;
  Farchived:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TAd.SetaudienceSegmentId(AIndex : Integer; AValue : string); 

begin
  If (FaudienceSegmentId=AValue) then exit;
  FaudienceSegmentId:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TAd.SetcampaignId(AIndex : Integer; AValue : string); 

begin
  If (FcampaignId=AValue) then exit;
  FcampaignId:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TAd.SetcampaignIdDimensionValue(AIndex : Integer; AValue : TDimensionValue); 

begin
  If (FcampaignIdDimensionValue=AValue) then exit;
  FcampaignIdDimensionValue:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TAd.SetclickThroughUrl(AIndex : Integer; AValue : TClickThroughUrl); 

begin
  If (FclickThroughUrl=AValue) then exit;
  FclickThroughUrl:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TAd.SetclickThroughUrlSuffixProperties(AIndex : Integer; AValue : TClickThroughUrlSuffixProperties); 

begin
  If (FclickThroughUrlSuffixProperties=AValue) then exit;
  FclickThroughUrlSuffixProperties:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TAd.Setcomments(AIndex : Integer; AValue : string); 

begin
  If (Fcomments=AValue) then exit;
  Fcomments:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TAd.Setcompatibility(AIndex : Integer; AValue : string); 

begin
  If (Fcompatibility=AValue) then exit;
  Fcompatibility:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TAd.SetcreateInfo(AIndex : Integer; AValue : TLastModifiedInfo); 

begin
  If (FcreateInfo=AValue) then exit;
  FcreateInfo:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TAd.SetcreativeGroupAssignments(AIndex : Integer; AValue : TAdcreativeGroupAssignments); 

begin
  If (FcreativeGroupAssignments=AValue) then exit;
  FcreativeGroupAssignments:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TAd.SetcreativeRotation(AIndex : Integer; AValue : TCreativeRotation); 

begin
  If (FcreativeRotation=AValue) then exit;
  FcreativeRotation:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TAd.SetdayPartTargeting(AIndex : Integer; AValue : TDayPartTargeting); 

begin
  If (FdayPartTargeting=AValue) then exit;
  FdayPartTargeting:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TAd.SetdefaultClickThroughEventTagProperties(AIndex : Integer; AValue : TDefaultClickThroughEventTagProperties); 

begin
  If (FdefaultClickThroughEventTagProperties=AValue) then exit;
  FdefaultClickThroughEventTagProperties:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TAd.SetdeliverySchedule(AIndex : Integer; AValue : TDeliverySchedule); 

begin
  If (FdeliverySchedule=AValue) then exit;
  FdeliverySchedule:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TAd.SetdynamicClickTracker(AIndex : Integer; AValue : boolean); 

begin
  If (FdynamicClickTracker=AValue) then exit;
  FdynamicClickTracker:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TAd.SetendTime(AIndex : Integer; AValue : TDatetime); 

begin
  If (FendTime=AValue) then exit;
  FendTime:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TAd.SeteventTagOverrides(AIndex : Integer; AValue : TAdeventTagOverrides); 

begin
  If (FeventTagOverrides=AValue) then exit;
  FeventTagOverrides:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TAd.SetgeoTargeting(AIndex : Integer; AValue : TGeoTargeting); 

begin
  If (FgeoTargeting=AValue) then exit;
  FgeoTargeting:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TAd.Setid(AIndex : Integer; AValue : string); 

begin
  If (Fid=AValue) then exit;
  Fid:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TAd.SetidDimensionValue(AIndex : Integer; AValue : TDimensionValue); 

begin
  If (FidDimensionValue=AValue) then exit;
  FidDimensionValue:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TAd.SetkeyValueTargetingExpression(AIndex : Integer; AValue : TKeyValueTargetingExpression); 

begin
  If (FkeyValueTargetingExpression=AValue) then exit;
  FkeyValueTargetingExpression:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TAd.Setkind(AIndex : Integer; AValue : string); 

begin
  If (Fkind=AValue) then exit;
  Fkind:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TAd.SetlastModifiedInfo(AIndex : Integer; AValue : TLastModifiedInfo); 

begin
  If (FlastModifiedInfo=AValue) then exit;
  FlastModifiedInfo:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TAd.Setname(AIndex : Integer; AValue : string); 

begin
  If (Fname=AValue) then exit;
  Fname:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TAd.SetplacementAssignments(AIndex : Integer; AValue : TAdplacementAssignments); 

begin
  If (FplacementAssignments=AValue) then exit;
  FplacementAssignments:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TAd.Setremarketing_list_expression(AIndex : Integer; AValue : TListTargetingExpression); 

begin
  If (Fremarketing_list_expression=AValue) then exit;
  Fremarketing_list_expression:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TAd.Setsize(AIndex : Integer; AValue : TSize); 

begin
  If (Fsize=AValue) then exit;
  Fsize:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TAd.SetsslCompliant(AIndex : Integer; AValue : boolean); 

begin
  If (FsslCompliant=AValue) then exit;
  FsslCompliant:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TAd.SetsslRequired(AIndex : Integer; AValue : boolean); 

begin
  If (FsslRequired=AValue) then exit;
  FsslRequired:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TAd.SetstartTime(AIndex : Integer; AValue : TDatetime); 

begin
  If (FstartTime=AValue) then exit;
  FstartTime:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TAd.SetsubaccountId(AIndex : Integer; AValue : string); 

begin
  If (FsubaccountId=AValue) then exit;
  FsubaccountId:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TAd.SettechnologyTargeting(AIndex : Integer; AValue : TTechnologyTargeting); 

begin
  If (FtechnologyTargeting=AValue) then exit;
  FtechnologyTargeting:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TAd.Set_type(AIndex : Integer; AValue : string); 

begin
  If (F_type=AValue) then exit;
  F_type:=AValue;
  MarkPropertyChanged(AIndex);
end;



Class Function TAd.ExportPropertyName(Const AName : String) :String;

begin
  Case AName of
  '_type' : Result:='type';
  else
    Result:=Inherited ExportPropertyName(AName);
  end;
end;




{ --------------------------------------------------------------------
  TAdcreativeGroupAssignments
  --------------------------------------------------------------------}




{ --------------------------------------------------------------------
  TAdeventTagOverrides
  --------------------------------------------------------------------}




{ --------------------------------------------------------------------
  TAdplacementAssignments
  --------------------------------------------------------------------}




{ --------------------------------------------------------------------
  TAdSlot
  --------------------------------------------------------------------}


Procedure TAdSlot.Setcomment(AIndex : Integer; AValue : string); 

begin
  If (Fcomment=AValue) then exit;
  Fcomment:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TAdSlot.Setcompatibility(AIndex : Integer; AValue : string); 

begin
  If (Fcompatibility=AValue) then exit;
  Fcompatibility:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TAdSlot.Setheight(AIndex : Integer; AValue : string); 

begin
  If (Fheight=AValue) then exit;
  Fheight:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TAdSlot.SetlinkedPlacementId(AIndex : Integer; AValue : string); 

begin
  If (FlinkedPlacementId=AValue) then exit;
  FlinkedPlacementId:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TAdSlot.Setname(AIndex : Integer; AValue : string); 

begin
  If (Fname=AValue) then exit;
  Fname:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TAdSlot.SetpaymentSourceType(AIndex : Integer; AValue : string); 

begin
  If (FpaymentSourceType=AValue) then exit;
  FpaymentSourceType:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TAdSlot.Setprimary(AIndex : Integer; AValue : boolean); 

begin
  If (Fprimary=AValue) then exit;
  Fprimary:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TAdSlot.Setwidth(AIndex : Integer; AValue : string); 

begin
  If (Fwidth=AValue) then exit;
  Fwidth:=AValue;
  MarkPropertyChanged(AIndex);
end;





{ --------------------------------------------------------------------
  TAdsListResponse
  --------------------------------------------------------------------}


Procedure TAdsListResponse.Setads(AIndex : Integer; AValue : TAdsListResponseads); 

begin
  If (Fads=AValue) then exit;
  Fads:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TAdsListResponse.Setkind(AIndex : Integer; AValue : string); 

begin
  If (Fkind=AValue) then exit;
  Fkind:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TAdsListResponse.SetnextPageToken(AIndex : Integer; AValue : string); 

begin
  If (FnextPageToken=AValue) then exit;
  FnextPageToken:=AValue;
  MarkPropertyChanged(AIndex);
end;





{ --------------------------------------------------------------------
  TAdsListResponseads
  --------------------------------------------------------------------}




{ --------------------------------------------------------------------
  TAdvertiser
  --------------------------------------------------------------------}


Procedure TAdvertiser.SetaccountId(AIndex : Integer; AValue : string); 

begin
  If (FaccountId=AValue) then exit;
  FaccountId:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TAdvertiser.SetadvertiserGroupId(AIndex : Integer; AValue : string); 

begin
  If (FadvertiserGroupId=AValue) then exit;
  FadvertiserGroupId:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TAdvertiser.SetclickThroughUrlSuffix(AIndex : Integer; AValue : string); 

begin
  If (FclickThroughUrlSuffix=AValue) then exit;
  FclickThroughUrlSuffix:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TAdvertiser.SetdefaultClickThroughEventTagId(AIndex : Integer; AValue : string); 

begin
  If (FdefaultClickThroughEventTagId=AValue) then exit;
  FdefaultClickThroughEventTagId:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TAdvertiser.SetdefaultEmail(AIndex : Integer; AValue : string); 

begin
  If (FdefaultEmail=AValue) then exit;
  FdefaultEmail:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TAdvertiser.SetfloodlightConfigurationId(AIndex : Integer; AValue : string); 

begin
  If (FfloodlightConfigurationId=AValue) then exit;
  FfloodlightConfigurationId:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TAdvertiser.SetfloodlightConfigurationIdDimensionValue(AIndex : Integer; AValue : TDimensionValue); 

begin
  If (FfloodlightConfigurationIdDimensionValue=AValue) then exit;
  FfloodlightConfigurationIdDimensionValue:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TAdvertiser.Setid(AIndex : Integer; AValue : string); 

begin
  If (Fid=AValue) then exit;
  Fid:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TAdvertiser.SetidDimensionValue(AIndex : Integer; AValue : TDimensionValue); 

begin
  If (FidDimensionValue=AValue) then exit;
  FidDimensionValue:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TAdvertiser.Setkind(AIndex : Integer; AValue : string); 

begin
  If (Fkind=AValue) then exit;
  Fkind:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TAdvertiser.Setname(AIndex : Integer; AValue : string); 

begin
  If (Fname=AValue) then exit;
  Fname:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TAdvertiser.SetoriginalFloodlightConfigurationId(AIndex : Integer; AValue : string); 

begin
  If (ForiginalFloodlightConfigurationId=AValue) then exit;
  ForiginalFloodlightConfigurationId:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TAdvertiser.Setstatus(AIndex : Integer; AValue : string); 

begin
  If (Fstatus=AValue) then exit;
  Fstatus:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TAdvertiser.SetsubaccountId(AIndex : Integer; AValue : string); 

begin
  If (FsubaccountId=AValue) then exit;
  FsubaccountId:=AValue;
  MarkPropertyChanged(AIndex);
end;





{ --------------------------------------------------------------------
  TAdvertiserGroup
  --------------------------------------------------------------------}


Procedure TAdvertiserGroup.SetaccountId(AIndex : Integer; AValue : string); 

begin
  If (FaccountId=AValue) then exit;
  FaccountId:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TAdvertiserGroup.Setid(AIndex : Integer; AValue : string); 

begin
  If (Fid=AValue) then exit;
  Fid:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TAdvertiserGroup.Setkind(AIndex : Integer; AValue : string); 

begin
  If (Fkind=AValue) then exit;
  Fkind:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TAdvertiserGroup.Setname(AIndex : Integer; AValue : string); 

begin
  If (Fname=AValue) then exit;
  Fname:=AValue;
  MarkPropertyChanged(AIndex);
end;





{ --------------------------------------------------------------------
  TAdvertiserGroupsListResponse
  --------------------------------------------------------------------}


Procedure TAdvertiserGroupsListResponse.SetadvertiserGroups(AIndex : Integer; AValue : TAdvertiserGroupsListResponseadvertiserGroups); 

begin
  If (FadvertiserGroups=AValue) then exit;
  FadvertiserGroups:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TAdvertiserGroupsListResponse.Setkind(AIndex : Integer; AValue : string); 

begin
  If (Fkind=AValue) then exit;
  Fkind:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TAdvertiserGroupsListResponse.SetnextPageToken(AIndex : Integer; AValue : string); 

begin
  If (FnextPageToken=AValue) then exit;
  FnextPageToken:=AValue;
  MarkPropertyChanged(AIndex);
end;





{ --------------------------------------------------------------------
  TAdvertiserGroupsListResponseadvertiserGroups
  --------------------------------------------------------------------}




{ --------------------------------------------------------------------
  TAdvertisersListResponse
  --------------------------------------------------------------------}


Procedure TAdvertisersListResponse.Setadvertisers(AIndex : Integer; AValue : TAdvertisersListResponseadvertisers); 

begin
  If (Fadvertisers=AValue) then exit;
  Fadvertisers:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TAdvertisersListResponse.Setkind(AIndex : Integer; AValue : string); 

begin
  If (Fkind=AValue) then exit;
  Fkind:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TAdvertisersListResponse.SetnextPageToken(AIndex : Integer; AValue : string); 

begin
  If (FnextPageToken=AValue) then exit;
  FnextPageToken:=AValue;
  MarkPropertyChanged(AIndex);
end;





{ --------------------------------------------------------------------
  TAdvertisersListResponseadvertisers
  --------------------------------------------------------------------}




{ --------------------------------------------------------------------
  TAudienceSegment
  --------------------------------------------------------------------}


Procedure TAudienceSegment.Setallocation(AIndex : Integer; AValue : integer); 

begin
  If (Fallocation=AValue) then exit;
  Fallocation:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TAudienceSegment.Setid(AIndex : Integer; AValue : string); 

begin
  If (Fid=AValue) then exit;
  Fid:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TAudienceSegment.Setname(AIndex : Integer; AValue : string); 

begin
  If (Fname=AValue) then exit;
  Fname:=AValue;
  MarkPropertyChanged(AIndex);
end;





{ --------------------------------------------------------------------
  TAudienceSegmentGroup
  --------------------------------------------------------------------}


Procedure TAudienceSegmentGroup.SetaudienceSegments(AIndex : Integer; AValue : TAudienceSegmentGroupaudienceSegments); 

begin
  If (FaudienceSegments=AValue) then exit;
  FaudienceSegments:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TAudienceSegmentGroup.Setid(AIndex : Integer; AValue : string); 

begin
  If (Fid=AValue) then exit;
  Fid:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TAudienceSegmentGroup.Setname(AIndex : Integer; AValue : string); 

begin
  If (Fname=AValue) then exit;
  Fname:=AValue;
  MarkPropertyChanged(AIndex);
end;





{ --------------------------------------------------------------------
  TAudienceSegmentGroupaudienceSegments
  --------------------------------------------------------------------}




{ --------------------------------------------------------------------
  TBrowser
  --------------------------------------------------------------------}


Procedure TBrowser.SetbrowserVersionId(AIndex : Integer; AValue : string); 

begin
  If (FbrowserVersionId=AValue) then exit;
  FbrowserVersionId:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TBrowser.SetdartId(AIndex : Integer; AValue : string); 

begin
  If (FdartId=AValue) then exit;
  FdartId:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TBrowser.Setkind(AIndex : Integer; AValue : string); 

begin
  If (Fkind=AValue) then exit;
  Fkind:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TBrowser.SetmajorVersion(AIndex : Integer; AValue : string); 

begin
  If (FmajorVersion=AValue) then exit;
  FmajorVersion:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TBrowser.SetminorVersion(AIndex : Integer; AValue : string); 

begin
  If (FminorVersion=AValue) then exit;
  FminorVersion:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TBrowser.Setname(AIndex : Integer; AValue : string); 

begin
  If (Fname=AValue) then exit;
  Fname:=AValue;
  MarkPropertyChanged(AIndex);
end;





{ --------------------------------------------------------------------
  TBrowsersListResponse
  --------------------------------------------------------------------}


Procedure TBrowsersListResponse.Setbrowsers(AIndex : Integer; AValue : TBrowsersListResponsebrowsers); 

begin
  If (Fbrowsers=AValue) then exit;
  Fbrowsers:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TBrowsersListResponse.Setkind(AIndex : Integer; AValue : string); 

begin
  If (Fkind=AValue) then exit;
  Fkind:=AValue;
  MarkPropertyChanged(AIndex);
end;





{ --------------------------------------------------------------------
  TBrowsersListResponsebrowsers
  --------------------------------------------------------------------}




{ --------------------------------------------------------------------
  TCampaign
  --------------------------------------------------------------------}


Procedure TCampaign.SetaccountId(AIndex : Integer; AValue : string); 

begin
  If (FaccountId=AValue) then exit;
  FaccountId:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TCampaign.SetadditionalCreativeOptimizationConfigurations(AIndex : Integer; AValue : TCampaignadditionalCreativeOptimizationConfigurations); 

begin
  If (FadditionalCreativeOptimizationConfigurations=AValue) then exit;
  FadditionalCreativeOptimizationConfigurations:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TCampaign.SetadvertiserGroupId(AIndex : Integer; AValue : string); 

begin
  If (FadvertiserGroupId=AValue) then exit;
  FadvertiserGroupId:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TCampaign.SetadvertiserId(AIndex : Integer; AValue : string); 

begin
  If (FadvertiserId=AValue) then exit;
  FadvertiserId:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TCampaign.SetadvertiserIdDimensionValue(AIndex : Integer; AValue : TDimensionValue); 

begin
  If (FadvertiserIdDimensionValue=AValue) then exit;
  FadvertiserIdDimensionValue:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TCampaign.Setarchived(AIndex : Integer; AValue : boolean); 

begin
  If (Farchived=AValue) then exit;
  Farchived:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TCampaign.SetaudienceSegmentGroups(AIndex : Integer; AValue : TCampaignaudienceSegmentGroups); 

begin
  If (FaudienceSegmentGroups=AValue) then exit;
  FaudienceSegmentGroups:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TCampaign.SetbillingInvoiceCode(AIndex : Integer; AValue : string); 

begin
  If (FbillingInvoiceCode=AValue) then exit;
  FbillingInvoiceCode:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TCampaign.SetclickThroughUrlSuffixProperties(AIndex : Integer; AValue : TClickThroughUrlSuffixProperties); 

begin
  If (FclickThroughUrlSuffixProperties=AValue) then exit;
  FclickThroughUrlSuffixProperties:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TCampaign.Setcomment(AIndex : Integer; AValue : string); 

begin
  If (Fcomment=AValue) then exit;
  Fcomment:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TCampaign.SetcomscoreVceEnabled(AIndex : Integer; AValue : boolean); 

begin
  If (FcomscoreVceEnabled=AValue) then exit;
  FcomscoreVceEnabled:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TCampaign.SetcreateInfo(AIndex : Integer; AValue : TLastModifiedInfo); 

begin
  If (FcreateInfo=AValue) then exit;
  FcreateInfo:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TCampaign.SetcreativeGroupIds(AIndex : Integer; AValue : TCampaigncreativeGroupIds); 

begin
  If (FcreativeGroupIds=AValue) then exit;
  FcreativeGroupIds:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TCampaign.SetcreativeOptimizationConfiguration(AIndex : Integer; AValue : TCreativeOptimizationConfiguration); 

begin
  If (FcreativeOptimizationConfiguration=AValue) then exit;
  FcreativeOptimizationConfiguration:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TCampaign.SetdefaultClickThroughEventTagProperties(AIndex : Integer; AValue : TDefaultClickThroughEventTagProperties); 

begin
  If (FdefaultClickThroughEventTagProperties=AValue) then exit;
  FdefaultClickThroughEventTagProperties:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TCampaign.SetendDate(AIndex : Integer; AValue : TDate); 

begin
  If (FendDate=AValue) then exit;
  FendDate:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TCampaign.SeteventTagOverrides(AIndex : Integer; AValue : TCampaigneventTagOverrides); 

begin
  If (FeventTagOverrides=AValue) then exit;
  FeventTagOverrides:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TCampaign.SetexternalId(AIndex : Integer; AValue : string); 

begin
  If (FexternalId=AValue) then exit;
  FexternalId:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TCampaign.Setid(AIndex : Integer; AValue : string); 

begin
  If (Fid=AValue) then exit;
  Fid:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TCampaign.SetidDimensionValue(AIndex : Integer; AValue : TDimensionValue); 

begin
  If (FidDimensionValue=AValue) then exit;
  FidDimensionValue:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TCampaign.Setkind(AIndex : Integer; AValue : string); 

begin
  If (Fkind=AValue) then exit;
  Fkind:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TCampaign.SetlastModifiedInfo(AIndex : Integer; AValue : TLastModifiedInfo); 

begin
  If (FlastModifiedInfo=AValue) then exit;
  FlastModifiedInfo:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TCampaign.SetlookbackConfiguration(AIndex : Integer; AValue : TLookbackConfiguration); 

begin
  If (FlookbackConfiguration=AValue) then exit;
  FlookbackConfiguration:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TCampaign.Setname(AIndex : Integer; AValue : string); 

begin
  If (Fname=AValue) then exit;
  Fname:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TCampaign.SetnielsenOcrEnabled(AIndex : Integer; AValue : boolean); 

begin
  If (FnielsenOcrEnabled=AValue) then exit;
  FnielsenOcrEnabled:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TCampaign.SetstartDate(AIndex : Integer; AValue : TDate); 

begin
  If (FstartDate=AValue) then exit;
  FstartDate:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TCampaign.SetsubaccountId(AIndex : Integer; AValue : string); 

begin
  If (FsubaccountId=AValue) then exit;
  FsubaccountId:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TCampaign.SettraffickerEmails(AIndex : Integer; AValue : TCampaigntraffickerEmails); 

begin
  If (FtraffickerEmails=AValue) then exit;
  FtraffickerEmails:=AValue;
  MarkPropertyChanged(AIndex);
end;





{ --------------------------------------------------------------------
  TCampaignadditionalCreativeOptimizationConfigurations
  --------------------------------------------------------------------}




{ --------------------------------------------------------------------
  TCampaignaudienceSegmentGroups
  --------------------------------------------------------------------}




{ --------------------------------------------------------------------
  TCampaigncreativeGroupIds
  --------------------------------------------------------------------}




{ --------------------------------------------------------------------
  TCampaigneventTagOverrides
  --------------------------------------------------------------------}




{ --------------------------------------------------------------------
  TCampaigntraffickerEmails
  --------------------------------------------------------------------}




{ --------------------------------------------------------------------
  TCampaignCreativeAssociation
  --------------------------------------------------------------------}


Procedure TCampaignCreativeAssociation.SetcreativeId(AIndex : Integer; AValue : string); 

begin
  If (FcreativeId=AValue) then exit;
  FcreativeId:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TCampaignCreativeAssociation.Setkind(AIndex : Integer; AValue : string); 

begin
  If (Fkind=AValue) then exit;
  Fkind:=AValue;
  MarkPropertyChanged(AIndex);
end;





{ --------------------------------------------------------------------
  TCampaignCreativeAssociationsListResponse
  --------------------------------------------------------------------}


Procedure TCampaignCreativeAssociationsListResponse.SetcampaignCreativeAssociations(AIndex : Integer; AValue : TCampaignCreativeAssociationsListResponsecampaignCreativeAssociations); 

begin
  If (FcampaignCreativeAssociations=AValue) then exit;
  FcampaignCreativeAssociations:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TCampaignCreativeAssociationsListResponse.Setkind(AIndex : Integer; AValue : string); 

begin
  If (Fkind=AValue) then exit;
  Fkind:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TCampaignCreativeAssociationsListResponse.SetnextPageToken(AIndex : Integer; AValue : string); 

begin
  If (FnextPageToken=AValue) then exit;
  FnextPageToken:=AValue;
  MarkPropertyChanged(AIndex);
end;





{ --------------------------------------------------------------------
  TCampaignCreativeAssociationsListResponsecampaignCreativeAssociations
  --------------------------------------------------------------------}




{ --------------------------------------------------------------------
  TCampaignsListResponse
  --------------------------------------------------------------------}


Procedure TCampaignsListResponse.Setcampaigns(AIndex : Integer; AValue : TCampaignsListResponsecampaigns); 

begin
  If (Fcampaigns=AValue) then exit;
  Fcampaigns:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TCampaignsListResponse.Setkind(AIndex : Integer; AValue : string); 

begin
  If (Fkind=AValue) then exit;
  Fkind:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TCampaignsListResponse.SetnextPageToken(AIndex : Integer; AValue : string); 

begin
  If (FnextPageToken=AValue) then exit;
  FnextPageToken:=AValue;
  MarkPropertyChanged(AIndex);
end;





{ --------------------------------------------------------------------
  TCampaignsListResponsecampaigns
  --------------------------------------------------------------------}




{ --------------------------------------------------------------------
  TChangeLog
  --------------------------------------------------------------------}


Procedure TChangeLog.SetaccountId(AIndex : Integer; AValue : string); 

begin
  If (FaccountId=AValue) then exit;
  FaccountId:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TChangeLog.Setaction(AIndex : Integer; AValue : string); 

begin
  If (Faction=AValue) then exit;
  Faction:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TChangeLog.SetchangeTime(AIndex : Integer; AValue : TDatetime); 

begin
  If (FchangeTime=AValue) then exit;
  FchangeTime:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TChangeLog.SetfieldName(AIndex : Integer; AValue : string); 

begin
  If (FfieldName=AValue) then exit;
  FfieldName:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TChangeLog.Setid(AIndex : Integer; AValue : string); 

begin
  If (Fid=AValue) then exit;
  Fid:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TChangeLog.Setkind(AIndex : Integer; AValue : string); 

begin
  If (Fkind=AValue) then exit;
  Fkind:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TChangeLog.SetnewValue(AIndex : Integer; AValue : string); 

begin
  If (FnewValue=AValue) then exit;
  FnewValue:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TChangeLog.SetobjectId(AIndex : Integer; AValue : string); 

begin
  If (FobjectId=AValue) then exit;
  FobjectId:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TChangeLog.SetobjectType(AIndex : Integer; AValue : string); 

begin
  If (FobjectType=AValue) then exit;
  FobjectType:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TChangeLog.SetoldValue(AIndex : Integer; AValue : string); 

begin
  If (FoldValue=AValue) then exit;
  FoldValue:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TChangeLog.SetsubaccountId(AIndex : Integer; AValue : string); 

begin
  If (FsubaccountId=AValue) then exit;
  FsubaccountId:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TChangeLog.SettransactionId(AIndex : Integer; AValue : string); 

begin
  If (FtransactionId=AValue) then exit;
  FtransactionId:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TChangeLog.SetuserProfileId(AIndex : Integer; AValue : string); 

begin
  If (FuserProfileId=AValue) then exit;
  FuserProfileId:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TChangeLog.SetuserProfileName(AIndex : Integer; AValue : string); 

begin
  If (FuserProfileName=AValue) then exit;
  FuserProfileName:=AValue;
  MarkPropertyChanged(AIndex);
end;





{ --------------------------------------------------------------------
  TChangeLogsListResponse
  --------------------------------------------------------------------}


Procedure TChangeLogsListResponse.SetchangeLogs(AIndex : Integer; AValue : TChangeLogsListResponsechangeLogs); 

begin
  If (FchangeLogs=AValue) then exit;
  FchangeLogs:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TChangeLogsListResponse.Setkind(AIndex : Integer; AValue : string); 

begin
  If (Fkind=AValue) then exit;
  Fkind:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TChangeLogsListResponse.SetnextPageToken(AIndex : Integer; AValue : string); 

begin
  If (FnextPageToken=AValue) then exit;
  FnextPageToken:=AValue;
  MarkPropertyChanged(AIndex);
end;





{ --------------------------------------------------------------------
  TChangeLogsListResponsechangeLogs
  --------------------------------------------------------------------}




{ --------------------------------------------------------------------
  TCitiesListResponse
  --------------------------------------------------------------------}


Procedure TCitiesListResponse.Setcities(AIndex : Integer; AValue : TCitiesListResponsecities); 

begin
  If (Fcities=AValue) then exit;
  Fcities:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TCitiesListResponse.Setkind(AIndex : Integer; AValue : string); 

begin
  If (Fkind=AValue) then exit;
  Fkind:=AValue;
  MarkPropertyChanged(AIndex);
end;





{ --------------------------------------------------------------------
  TCitiesListResponsecities
  --------------------------------------------------------------------}




{ --------------------------------------------------------------------
  TCity
  --------------------------------------------------------------------}


Procedure TCity.SetcountryCode(AIndex : Integer; AValue : string); 

begin
  If (FcountryCode=AValue) then exit;
  FcountryCode:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TCity.SetcountryDartId(AIndex : Integer; AValue : string); 

begin
  If (FcountryDartId=AValue) then exit;
  FcountryDartId:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TCity.SetdartId(AIndex : Integer; AValue : string); 

begin
  If (FdartId=AValue) then exit;
  FdartId:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TCity.Setkind(AIndex : Integer; AValue : string); 

begin
  If (Fkind=AValue) then exit;
  Fkind:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TCity.SetmetroCode(AIndex : Integer; AValue : string); 

begin
  If (FmetroCode=AValue) then exit;
  FmetroCode:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TCity.SetmetroDmaId(AIndex : Integer; AValue : string); 

begin
  If (FmetroDmaId=AValue) then exit;
  FmetroDmaId:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TCity.Setname(AIndex : Integer; AValue : string); 

begin
  If (Fname=AValue) then exit;
  Fname:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TCity.SetregionCode(AIndex : Integer; AValue : string); 

begin
  If (FregionCode=AValue) then exit;
  FregionCode:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TCity.SetregionDartId(AIndex : Integer; AValue : string); 

begin
  If (FregionDartId=AValue) then exit;
  FregionDartId:=AValue;
  MarkPropertyChanged(AIndex);
end;





{ --------------------------------------------------------------------
  TClickTag
  --------------------------------------------------------------------}


Procedure TClickTag.SeteventName(AIndex : Integer; AValue : string); 

begin
  If (FeventName=AValue) then exit;
  FeventName:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TClickTag.Setname(AIndex : Integer; AValue : string); 

begin
  If (Fname=AValue) then exit;
  Fname:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TClickTag.Setvalue(AIndex : Integer; AValue : string); 

begin
  If (Fvalue=AValue) then exit;
  Fvalue:=AValue;
  MarkPropertyChanged(AIndex);
end;





{ --------------------------------------------------------------------
  TClickThroughUrl
  --------------------------------------------------------------------}


Procedure TClickThroughUrl.SetcustomClickThroughUrl(AIndex : Integer; AValue : string); 

begin
  If (FcustomClickThroughUrl=AValue) then exit;
  FcustomClickThroughUrl:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TClickThroughUrl.SetdefaultLandingPage(AIndex : Integer; AValue : boolean); 

begin
  If (FdefaultLandingPage=AValue) then exit;
  FdefaultLandingPage:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TClickThroughUrl.SetlandingPageId(AIndex : Integer; AValue : string); 

begin
  If (FlandingPageId=AValue) then exit;
  FlandingPageId:=AValue;
  MarkPropertyChanged(AIndex);
end;





{ --------------------------------------------------------------------
  TClickThroughUrlSuffixProperties
  --------------------------------------------------------------------}


Procedure TClickThroughUrlSuffixProperties.SetclickThroughUrlSuffix(AIndex : Integer; AValue : string); 

begin
  If (FclickThroughUrlSuffix=AValue) then exit;
  FclickThroughUrlSuffix:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TClickThroughUrlSuffixProperties.SetoverrideInheritedSuffix(AIndex : Integer; AValue : boolean); 

begin
  If (FoverrideInheritedSuffix=AValue) then exit;
  FoverrideInheritedSuffix:=AValue;
  MarkPropertyChanged(AIndex);
end;





{ --------------------------------------------------------------------
  TCompanionClickThroughOverride
  --------------------------------------------------------------------}


Procedure TCompanionClickThroughOverride.SetclickThroughUrl(AIndex : Integer; AValue : TClickThroughUrl); 

begin
  If (FclickThroughUrl=AValue) then exit;
  FclickThroughUrl:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TCompanionClickThroughOverride.SetcreativeId(AIndex : Integer; AValue : string); 

begin
  If (FcreativeId=AValue) then exit;
  FcreativeId:=AValue;
  MarkPropertyChanged(AIndex);
end;





{ --------------------------------------------------------------------
  TCompatibleFields
  --------------------------------------------------------------------}


Procedure TCompatibleFields.SetcrossDimensionReachReportCompatibleFields(AIndex : Integer; AValue : TCrossDimensionReachReportCompatibleFields); 

begin
  If (FcrossDimensionReachReportCompatibleFields=AValue) then exit;
  FcrossDimensionReachReportCompatibleFields:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TCompatibleFields.SetfloodlightReportCompatibleFields(AIndex : Integer; AValue : TFloodlightReportCompatibleFields); 

begin
  If (FfloodlightReportCompatibleFields=AValue) then exit;
  FfloodlightReportCompatibleFields:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TCompatibleFields.Setkind(AIndex : Integer; AValue : string); 

begin
  If (Fkind=AValue) then exit;
  Fkind:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TCompatibleFields.SetpathToConversionReportCompatibleFields(AIndex : Integer; AValue : TPathToConversionReportCompatibleFields); 

begin
  If (FpathToConversionReportCompatibleFields=AValue) then exit;
  FpathToConversionReportCompatibleFields:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TCompatibleFields.SetreachReportCompatibleFields(AIndex : Integer; AValue : TReachReportCompatibleFields); 

begin
  If (FreachReportCompatibleFields=AValue) then exit;
  FreachReportCompatibleFields:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TCompatibleFields.SetreportCompatibleFields(AIndex : Integer; AValue : TReportCompatibleFields); 

begin
  If (FreportCompatibleFields=AValue) then exit;
  FreportCompatibleFields:=AValue;
  MarkPropertyChanged(AIndex);
end;





{ --------------------------------------------------------------------
  TConnectionType
  --------------------------------------------------------------------}


Procedure TConnectionType.Setid(AIndex : Integer; AValue : string); 

begin
  If (Fid=AValue) then exit;
  Fid:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TConnectionType.Setkind(AIndex : Integer; AValue : string); 

begin
  If (Fkind=AValue) then exit;
  Fkind:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TConnectionType.Setname(AIndex : Integer; AValue : string); 

begin
  If (Fname=AValue) then exit;
  Fname:=AValue;
  MarkPropertyChanged(AIndex);
end;





{ --------------------------------------------------------------------
  TConnectionTypesListResponse
  --------------------------------------------------------------------}


Procedure TConnectionTypesListResponse.SetconnectionTypes(AIndex : Integer; AValue : TConnectionTypesListResponseconnectionTypes); 

begin
  If (FconnectionTypes=AValue) then exit;
  FconnectionTypes:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TConnectionTypesListResponse.Setkind(AIndex : Integer; AValue : string); 

begin
  If (Fkind=AValue) then exit;
  Fkind:=AValue;
  MarkPropertyChanged(AIndex);
end;





{ --------------------------------------------------------------------
  TConnectionTypesListResponseconnectionTypes
  --------------------------------------------------------------------}




{ --------------------------------------------------------------------
  TContentCategoriesListResponse
  --------------------------------------------------------------------}


Procedure TContentCategoriesListResponse.SetcontentCategories(AIndex : Integer; AValue : TContentCategoriesListResponsecontentCategories); 

begin
  If (FcontentCategories=AValue) then exit;
  FcontentCategories:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TContentCategoriesListResponse.Setkind(AIndex : Integer; AValue : string); 

begin
  If (Fkind=AValue) then exit;
  Fkind:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TContentCategoriesListResponse.SetnextPageToken(AIndex : Integer; AValue : string); 

begin
  If (FnextPageToken=AValue) then exit;
  FnextPageToken:=AValue;
  MarkPropertyChanged(AIndex);
end;





{ --------------------------------------------------------------------
  TContentCategoriesListResponsecontentCategories
  --------------------------------------------------------------------}




{ --------------------------------------------------------------------
  TContentCategory
  --------------------------------------------------------------------}


Procedure TContentCategory.SetaccountId(AIndex : Integer; AValue : string); 

begin
  If (FaccountId=AValue) then exit;
  FaccountId:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TContentCategory.Setid(AIndex : Integer; AValue : string); 

begin
  If (Fid=AValue) then exit;
  Fid:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TContentCategory.Setkind(AIndex : Integer; AValue : string); 

begin
  If (Fkind=AValue) then exit;
  Fkind:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TContentCategory.Setname(AIndex : Integer; AValue : string); 

begin
  If (Fname=AValue) then exit;
  Fname:=AValue;
  MarkPropertyChanged(AIndex);
end;





{ --------------------------------------------------------------------
  TCountriesListResponse
  --------------------------------------------------------------------}


Procedure TCountriesListResponse.Setcountries(AIndex : Integer; AValue : TCountriesListResponsecountries); 

begin
  If (Fcountries=AValue) then exit;
  Fcountries:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TCountriesListResponse.Setkind(AIndex : Integer; AValue : string); 

begin
  If (Fkind=AValue) then exit;
  Fkind:=AValue;
  MarkPropertyChanged(AIndex);
end;





{ --------------------------------------------------------------------
  TCountriesListResponsecountries
  --------------------------------------------------------------------}




{ --------------------------------------------------------------------
  TCountry
  --------------------------------------------------------------------}


Procedure TCountry.SetcountryCode(AIndex : Integer; AValue : string); 

begin
  If (FcountryCode=AValue) then exit;
  FcountryCode:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TCountry.SetdartId(AIndex : Integer; AValue : string); 

begin
  If (FdartId=AValue) then exit;
  FdartId:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TCountry.Setkind(AIndex : Integer; AValue : string); 

begin
  If (Fkind=AValue) then exit;
  Fkind:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TCountry.Setname(AIndex : Integer; AValue : string); 

begin
  If (Fname=AValue) then exit;
  Fname:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TCountry.SetsslEnabled(AIndex : Integer; AValue : boolean); 

begin
  If (FsslEnabled=AValue) then exit;
  FsslEnabled:=AValue;
  MarkPropertyChanged(AIndex);
end;





{ --------------------------------------------------------------------
  TCreative
  --------------------------------------------------------------------}


Procedure TCreative.SetaccountId(AIndex : Integer; AValue : string); 

begin
  If (FaccountId=AValue) then exit;
  FaccountId:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TCreative.Setactive(AIndex : Integer; AValue : boolean); 

begin
  If (Factive=AValue) then exit;
  Factive:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TCreative.SetadParameters(AIndex : Integer; AValue : string); 

begin
  If (FadParameters=AValue) then exit;
  FadParameters:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TCreative.SetadTagKeys(AIndex : Integer; AValue : TCreativeadTagKeys); 

begin
  If (FadTagKeys=AValue) then exit;
  FadTagKeys:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TCreative.SetadvertiserId(AIndex : Integer; AValue : string); 

begin
  If (FadvertiserId=AValue) then exit;
  FadvertiserId:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TCreative.SetallowScriptAccess(AIndex : Integer; AValue : boolean); 

begin
  If (FallowScriptAccess=AValue) then exit;
  FallowScriptAccess:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TCreative.Setarchived(AIndex : Integer; AValue : boolean); 

begin
  If (Farchived=AValue) then exit;
  Farchived:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TCreative.SetartworkType(AIndex : Integer; AValue : string); 

begin
  If (FartworkType=AValue) then exit;
  FartworkType:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TCreative.SetauthoringTool(AIndex : Integer; AValue : string); 

begin
  If (FauthoringTool=AValue) then exit;
  FauthoringTool:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TCreative.Setauto_advance_images(AIndex : Integer; AValue : boolean); 

begin
  If (Fauto_advance_images=AValue) then exit;
  Fauto_advance_images:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TCreative.SetbackgroundColor(AIndex : Integer; AValue : string); 

begin
  If (FbackgroundColor=AValue) then exit;
  FbackgroundColor:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TCreative.SetbackupImageClickThroughUrl(AIndex : Integer; AValue : string); 

begin
  If (FbackupImageClickThroughUrl=AValue) then exit;
  FbackupImageClickThroughUrl:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TCreative.SetbackupImageFeatures(AIndex : Integer; AValue : TCreativebackupImageFeatures); 

begin
  If (FbackupImageFeatures=AValue) then exit;
  FbackupImageFeatures:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TCreative.SetbackupImageReportingLabel(AIndex : Integer; AValue : string); 

begin
  If (FbackupImageReportingLabel=AValue) then exit;
  FbackupImageReportingLabel:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TCreative.SetbackupImageTargetWindow(AIndex : Integer; AValue : TTargetWindow); 

begin
  If (FbackupImageTargetWindow=AValue) then exit;
  FbackupImageTargetWindow:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TCreative.SetclickTags(AIndex : Integer; AValue : TCreativeclickTags); 

begin
  If (FclickTags=AValue) then exit;
  FclickTags:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TCreative.SetcommercialId(AIndex : Integer; AValue : string); 

begin
  If (FcommercialId=AValue) then exit;
  FcommercialId:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TCreative.SetcompanionCreatives(AIndex : Integer; AValue : TCreativecompanionCreatives); 

begin
  If (FcompanionCreatives=AValue) then exit;
  FcompanionCreatives:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TCreative.Setcompatibility(AIndex : Integer; AValue : TCreativecompatibility); 

begin
  If (Fcompatibility=AValue) then exit;
  Fcompatibility:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TCreative.SetconvertFlashToHtml5(AIndex : Integer; AValue : boolean); 

begin
  If (FconvertFlashToHtml5=AValue) then exit;
  FconvertFlashToHtml5:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TCreative.SetcounterCustomEvents(AIndex : Integer; AValue : TCreativecounterCustomEvents); 

begin
  If (FcounterCustomEvents=AValue) then exit;
  FcounterCustomEvents:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TCreative.SetcreativeAssets(AIndex : Integer; AValue : TCreativecreativeAssets); 

begin
  If (FcreativeAssets=AValue) then exit;
  FcreativeAssets:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TCreative.SetcreativeFieldAssignments(AIndex : Integer; AValue : TCreativecreativeFieldAssignments); 

begin
  If (FcreativeFieldAssignments=AValue) then exit;
  FcreativeFieldAssignments:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TCreative.SetcustomKeyValues(AIndex : Integer; AValue : TCreativecustomKeyValues); 

begin
  If (FcustomKeyValues=AValue) then exit;
  FcustomKeyValues:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TCreative.SetexitCustomEvents(AIndex : Integer; AValue : TCreativeexitCustomEvents); 

begin
  If (FexitCustomEvents=AValue) then exit;
  FexitCustomEvents:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TCreative.SetfsCommand(AIndex : Integer; AValue : TFsCommand); 

begin
  If (FfsCommand=AValue) then exit;
  FfsCommand:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TCreative.SethtmlCode(AIndex : Integer; AValue : string); 

begin
  If (FhtmlCode=AValue) then exit;
  FhtmlCode:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TCreative.SethtmlCodeLocked(AIndex : Integer; AValue : boolean); 

begin
  If (FhtmlCodeLocked=AValue) then exit;
  FhtmlCodeLocked:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TCreative.Setid(AIndex : Integer; AValue : string); 

begin
  If (Fid=AValue) then exit;
  Fid:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TCreative.SetidDimensionValue(AIndex : Integer; AValue : TDimensionValue); 

begin
  If (FidDimensionValue=AValue) then exit;
  FidDimensionValue:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TCreative.Setkind(AIndex : Integer; AValue : string); 

begin
  If (Fkind=AValue) then exit;
  Fkind:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TCreative.SetlastModifiedInfo(AIndex : Integer; AValue : TLastModifiedInfo); 

begin
  If (FlastModifiedInfo=AValue) then exit;
  FlastModifiedInfo:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TCreative.SetlatestTraffickedCreativeId(AIndex : Integer; AValue : string); 

begin
  If (FlatestTraffickedCreativeId=AValue) then exit;
  FlatestTraffickedCreativeId:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TCreative.Setname(AIndex : Integer; AValue : string); 

begin
  If (Fname=AValue) then exit;
  Fname:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TCreative.SetoverrideCss(AIndex : Integer; AValue : string); 

begin
  If (FoverrideCss=AValue) then exit;
  FoverrideCss:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TCreative.SetredirectUrl(AIndex : Integer; AValue : string); 

begin
  If (FredirectUrl=AValue) then exit;
  FredirectUrl:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TCreative.SetrenderingId(AIndex : Integer; AValue : string); 

begin
  If (FrenderingId=AValue) then exit;
  FrenderingId:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TCreative.SetrenderingIdDimensionValue(AIndex : Integer; AValue : TDimensionValue); 

begin
  If (FrenderingIdDimensionValue=AValue) then exit;
  FrenderingIdDimensionValue:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TCreative.SetrequiredFlashPluginVersion(AIndex : Integer; AValue : string); 

begin
  If (FrequiredFlashPluginVersion=AValue) then exit;
  FrequiredFlashPluginVersion:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TCreative.SetrequiredFlashVersion(AIndex : Integer; AValue : integer); 

begin
  If (FrequiredFlashVersion=AValue) then exit;
  FrequiredFlashVersion:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TCreative.Setsize(AIndex : Integer; AValue : TSize); 

begin
  If (Fsize=AValue) then exit;
  Fsize:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TCreative.Setskippable(AIndex : Integer; AValue : boolean); 

begin
  If (Fskippable=AValue) then exit;
  Fskippable:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TCreative.SetsslCompliant(AIndex : Integer; AValue : boolean); 

begin
  If (FsslCompliant=AValue) then exit;
  FsslCompliant:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TCreative.SetstudioAdvertiserId(AIndex : Integer; AValue : string); 

begin
  If (FstudioAdvertiserId=AValue) then exit;
  FstudioAdvertiserId:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TCreative.SetstudioCreativeId(AIndex : Integer; AValue : string); 

begin
  If (FstudioCreativeId=AValue) then exit;
  FstudioCreativeId:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TCreative.SetstudioTraffickedCreativeId(AIndex : Integer; AValue : string); 

begin
  If (FstudioTraffickedCreativeId=AValue) then exit;
  FstudioTraffickedCreativeId:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TCreative.SetsubaccountId(AIndex : Integer; AValue : string); 

begin
  If (FsubaccountId=AValue) then exit;
  FsubaccountId:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TCreative.SetthirdPartyBackupImageImpressionsUrl(AIndex : Integer; AValue : string); 

begin
  If (FthirdPartyBackupImageImpressionsUrl=AValue) then exit;
  FthirdPartyBackupImageImpressionsUrl:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TCreative.SetthirdPartyRichMediaImpressionsUrl(AIndex : Integer; AValue : string); 

begin
  If (FthirdPartyRichMediaImpressionsUrl=AValue) then exit;
  FthirdPartyRichMediaImpressionsUrl:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TCreative.SetthirdPartyUrls(AIndex : Integer; AValue : TCreativethirdPartyUrls); 

begin
  If (FthirdPartyUrls=AValue) then exit;
  FthirdPartyUrls:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TCreative.SettimerCustomEvents(AIndex : Integer; AValue : TCreativetimerCustomEvents); 

begin
  If (FtimerCustomEvents=AValue) then exit;
  FtimerCustomEvents:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TCreative.SettotalFileSize(AIndex : Integer; AValue : string); 

begin
  If (FtotalFileSize=AValue) then exit;
  FtotalFileSize:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TCreative.Set_type(AIndex : Integer; AValue : string); 

begin
  If (F_type=AValue) then exit;
  F_type:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TCreative.Setversion(AIndex : Integer; AValue : integer); 

begin
  If (Fversion=AValue) then exit;
  Fversion:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TCreative.SetvideoDescription(AIndex : Integer; AValue : string); 

begin
  If (FvideoDescription=AValue) then exit;
  FvideoDescription:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TCreative.SetvideoDuration(AIndex : Integer; AValue : integer); 

begin
  If (FvideoDuration=AValue) then exit;
  FvideoDuration:=AValue;
  MarkPropertyChanged(AIndex);
end;



Class Function TCreative.ExportPropertyName(Const AName : String) :String;

begin
  Case AName of
  '_type' : Result:='type';
  else
    Result:=Inherited ExportPropertyName(AName);
  end;
end;




{ --------------------------------------------------------------------
  TCreativeadTagKeys
  --------------------------------------------------------------------}




{ --------------------------------------------------------------------
  TCreativebackupImageFeatures
  --------------------------------------------------------------------}




{ --------------------------------------------------------------------
  TCreativeclickTags
  --------------------------------------------------------------------}




{ --------------------------------------------------------------------
  TCreativecompanionCreatives
  --------------------------------------------------------------------}




{ --------------------------------------------------------------------
  TCreativecompatibility
  --------------------------------------------------------------------}




{ --------------------------------------------------------------------
  TCreativecounterCustomEvents
  --------------------------------------------------------------------}




{ --------------------------------------------------------------------
  TCreativecreativeAssets
  --------------------------------------------------------------------}




{ --------------------------------------------------------------------
  TCreativecreativeFieldAssignments
  --------------------------------------------------------------------}




{ --------------------------------------------------------------------
  TCreativecustomKeyValues
  --------------------------------------------------------------------}




{ --------------------------------------------------------------------
  TCreativeexitCustomEvents
  --------------------------------------------------------------------}




{ --------------------------------------------------------------------
  TCreativethirdPartyUrls
  --------------------------------------------------------------------}




{ --------------------------------------------------------------------
  TCreativetimerCustomEvents
  --------------------------------------------------------------------}




{ --------------------------------------------------------------------
  TCreativeAsset
  --------------------------------------------------------------------}


Procedure TCreativeAsset.SetactionScript3(AIndex : Integer; AValue : boolean); 

begin
  If (FactionScript3=AValue) then exit;
  FactionScript3:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TCreativeAsset.Setactive(AIndex : Integer; AValue : boolean); 

begin
  If (Factive=AValue) then exit;
  Factive:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TCreativeAsset.Setalignment(AIndex : Integer; AValue : string); 

begin
  If (Falignment=AValue) then exit;
  Falignment:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TCreativeAsset.SetartworkType(AIndex : Integer; AValue : string); 

begin
  If (FartworkType=AValue) then exit;
  FartworkType:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TCreativeAsset.SetassetIdentifier(AIndex : Integer; AValue : TCreativeAssetId); 

begin
  If (FassetIdentifier=AValue) then exit;
  FassetIdentifier:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TCreativeAsset.SetbackupImageExit(AIndex : Integer; AValue : TCreativeCustomEvent); 

begin
  If (FbackupImageExit=AValue) then exit;
  FbackupImageExit:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TCreativeAsset.SetbitRate(AIndex : Integer; AValue : integer); 

begin
  If (FbitRate=AValue) then exit;
  FbitRate:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TCreativeAsset.SetchildAssetType(AIndex : Integer; AValue : string); 

begin
  If (FchildAssetType=AValue) then exit;
  FchildAssetType:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TCreativeAsset.SetcollapsedSize(AIndex : Integer; AValue : TSize); 

begin
  If (FcollapsedSize=AValue) then exit;
  FcollapsedSize:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TCreativeAsset.SetcustomStartTimeValue(AIndex : Integer; AValue : integer); 

begin
  If (FcustomStartTimeValue=AValue) then exit;
  FcustomStartTimeValue:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TCreativeAsset.SetdetectedFeatures(AIndex : Integer; AValue : TCreativeAssetdetectedFeatures); 

begin
  If (FdetectedFeatures=AValue) then exit;
  FdetectedFeatures:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TCreativeAsset.SetdisplayType(AIndex : Integer; AValue : string); 

begin
  If (FdisplayType=AValue) then exit;
  FdisplayType:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TCreativeAsset.Setduration(AIndex : Integer; AValue : integer); 

begin
  If (Fduration=AValue) then exit;
  Fduration:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TCreativeAsset.SetdurationType(AIndex : Integer; AValue : string); 

begin
  If (FdurationType=AValue) then exit;
  FdurationType:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TCreativeAsset.SetexpandedDimension(AIndex : Integer; AValue : TSize); 

begin
  If (FexpandedDimension=AValue) then exit;
  FexpandedDimension:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TCreativeAsset.SetfileSize(AIndex : Integer; AValue : string); 

begin
  If (FfileSize=AValue) then exit;
  FfileSize:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TCreativeAsset.SetflashVersion(AIndex : Integer; AValue : integer); 

begin
  If (FflashVersion=AValue) then exit;
  FflashVersion:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TCreativeAsset.SethideFlashObjects(AIndex : Integer; AValue : boolean); 

begin
  If (FhideFlashObjects=AValue) then exit;
  FhideFlashObjects:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TCreativeAsset.SethideSelectionBoxes(AIndex : Integer; AValue : boolean); 

begin
  If (FhideSelectionBoxes=AValue) then exit;
  FhideSelectionBoxes:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TCreativeAsset.SethorizontallyLocked(AIndex : Integer; AValue : boolean); 

begin
  If (FhorizontallyLocked=AValue) then exit;
  FhorizontallyLocked:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TCreativeAsset.Setid(AIndex : Integer; AValue : string); 

begin
  If (Fid=AValue) then exit;
  Fid:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TCreativeAsset.SetmimeType(AIndex : Integer; AValue : string); 

begin
  If (FmimeType=AValue) then exit;
  FmimeType:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TCreativeAsset.Setoffset(AIndex : Integer; AValue : TOffsetPosition); 

begin
  If (Foffset=AValue) then exit;
  Foffset:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TCreativeAsset.SetoriginalBackup(AIndex : Integer; AValue : boolean); 

begin
  If (ForiginalBackup=AValue) then exit;
  ForiginalBackup:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TCreativeAsset.Setposition(AIndex : Integer; AValue : TOffsetPosition); 

begin
  If (Fposition=AValue) then exit;
  Fposition:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TCreativeAsset.SetpositionLeftUnit(AIndex : Integer; AValue : string); 

begin
  If (FpositionLeftUnit=AValue) then exit;
  FpositionLeftUnit:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TCreativeAsset.SetpositionTopUnit(AIndex : Integer; AValue : string); 

begin
  If (FpositionTopUnit=AValue) then exit;
  FpositionTopUnit:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TCreativeAsset.SetprogressiveServingUrl(AIndex : Integer; AValue : string); 

begin
  If (FprogressiveServingUrl=AValue) then exit;
  FprogressiveServingUrl:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TCreativeAsset.Setpushdown(AIndex : Integer; AValue : boolean); 

begin
  If (Fpushdown=AValue) then exit;
  Fpushdown:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TCreativeAsset.SetpushdownDuration(AIndex : Integer; AValue : integer); 

begin
  If (FpushdownDuration=AValue) then exit;
  FpushdownDuration:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TCreativeAsset.Setrole(AIndex : Integer; AValue : string); 

begin
  If (Frole=AValue) then exit;
  Frole:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TCreativeAsset.Setsize(AIndex : Integer; AValue : TSize); 

begin
  If (Fsize=AValue) then exit;
  Fsize:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TCreativeAsset.SetsslCompliant(AIndex : Integer; AValue : boolean); 

begin
  If (FsslCompliant=AValue) then exit;
  FsslCompliant:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TCreativeAsset.SetstartTimeType(AIndex : Integer; AValue : string); 

begin
  If (FstartTimeType=AValue) then exit;
  FstartTimeType:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TCreativeAsset.SetstreamingServingUrl(AIndex : Integer; AValue : string); 

begin
  If (FstreamingServingUrl=AValue) then exit;
  FstreamingServingUrl:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TCreativeAsset.Settransparency(AIndex : Integer; AValue : boolean); 

begin
  If (Ftransparency=AValue) then exit;
  Ftransparency:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TCreativeAsset.SetverticallyLocked(AIndex : Integer; AValue : boolean); 

begin
  If (FverticallyLocked=AValue) then exit;
  FverticallyLocked:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TCreativeAsset.SetvideoDuration(AIndex : Integer; AValue : integer); 

begin
  If (FvideoDuration=AValue) then exit;
  FvideoDuration:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TCreativeAsset.SetwindowMode(AIndex : Integer; AValue : string); 

begin
  If (FwindowMode=AValue) then exit;
  FwindowMode:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TCreativeAsset.SetzIndex(AIndex : Integer; AValue : integer); 

begin
  If (FzIndex=AValue) then exit;
  FzIndex:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TCreativeAsset.SetzipFilename(AIndex : Integer; AValue : string); 

begin
  If (FzipFilename=AValue) then exit;
  FzipFilename:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TCreativeAsset.SetzipFilesize(AIndex : Integer; AValue : string); 

begin
  If (FzipFilesize=AValue) then exit;
  FzipFilesize:=AValue;
  MarkPropertyChanged(AIndex);
end;





{ --------------------------------------------------------------------
  TCreativeAssetdetectedFeatures
  --------------------------------------------------------------------}




{ --------------------------------------------------------------------
  TCreativeAssetId
  --------------------------------------------------------------------}


Procedure TCreativeAssetId.Setname(AIndex : Integer; AValue : string); 

begin
  If (Fname=AValue) then exit;
  Fname:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TCreativeAssetId.Set_type(AIndex : Integer; AValue : string); 

begin
  If (F_type=AValue) then exit;
  F_type:=AValue;
  MarkPropertyChanged(AIndex);
end;



Class Function TCreativeAssetId.ExportPropertyName(Const AName : String) :String;

begin
  Case AName of
  '_type' : Result:='type';
  else
    Result:=Inherited ExportPropertyName(AName);
  end;
end;




{ --------------------------------------------------------------------
  TCreativeAssetMetadata
  --------------------------------------------------------------------}


Procedure TCreativeAssetMetadata.SetassetIdentifier(AIndex : Integer; AValue : TCreativeAssetId); 

begin
  If (FassetIdentifier=AValue) then exit;
  FassetIdentifier:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TCreativeAssetMetadata.SetclickTags(AIndex : Integer; AValue : TCreativeAssetMetadataclickTags); 

begin
  If (FclickTags=AValue) then exit;
  FclickTags:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TCreativeAssetMetadata.SetdetectedFeatures(AIndex : Integer; AValue : TCreativeAssetMetadatadetectedFeatures); 

begin
  If (FdetectedFeatures=AValue) then exit;
  FdetectedFeatures:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TCreativeAssetMetadata.Setkind(AIndex : Integer; AValue : string); 

begin
  If (Fkind=AValue) then exit;
  Fkind:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TCreativeAssetMetadata.SetwarnedValidationRules(AIndex : Integer; AValue : TCreativeAssetMetadatawarnedValidationRules); 

begin
  If (FwarnedValidationRules=AValue) then exit;
  FwarnedValidationRules:=AValue;
  MarkPropertyChanged(AIndex);
end;





{ --------------------------------------------------------------------
  TCreativeAssetMetadataclickTags
  --------------------------------------------------------------------}




{ --------------------------------------------------------------------
  TCreativeAssetMetadatadetectedFeatures
  --------------------------------------------------------------------}




{ --------------------------------------------------------------------
  TCreativeAssetMetadatawarnedValidationRules
  --------------------------------------------------------------------}




{ --------------------------------------------------------------------
  TCreativeAssignment
  --------------------------------------------------------------------}


Procedure TCreativeAssignment.Setactive(AIndex : Integer; AValue : boolean); 

begin
  If (Factive=AValue) then exit;
  Factive:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TCreativeAssignment.SetapplyEventTags(AIndex : Integer; AValue : boolean); 

begin
  If (FapplyEventTags=AValue) then exit;
  FapplyEventTags:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TCreativeAssignment.SetclickThroughUrl(AIndex : Integer; AValue : TClickThroughUrl); 

begin
  If (FclickThroughUrl=AValue) then exit;
  FclickThroughUrl:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TCreativeAssignment.SetcompanionCreativeOverrides(AIndex : Integer; AValue : TCreativeAssignmentcompanionCreativeOverrides); 

begin
  If (FcompanionCreativeOverrides=AValue) then exit;
  FcompanionCreativeOverrides:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TCreativeAssignment.SetcreativeGroupAssignments(AIndex : Integer; AValue : TCreativeAssignmentcreativeGroupAssignments); 

begin
  If (FcreativeGroupAssignments=AValue) then exit;
  FcreativeGroupAssignments:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TCreativeAssignment.SetcreativeId(AIndex : Integer; AValue : string); 

begin
  If (FcreativeId=AValue) then exit;
  FcreativeId:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TCreativeAssignment.SetcreativeIdDimensionValue(AIndex : Integer; AValue : TDimensionValue); 

begin
  If (FcreativeIdDimensionValue=AValue) then exit;
  FcreativeIdDimensionValue:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TCreativeAssignment.SetendTime(AIndex : Integer; AValue : TDatetime); 

begin
  If (FendTime=AValue) then exit;
  FendTime:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TCreativeAssignment.SetrichMediaExitOverrides(AIndex : Integer; AValue : TCreativeAssignmentrichMediaExitOverrides); 

begin
  If (FrichMediaExitOverrides=AValue) then exit;
  FrichMediaExitOverrides:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TCreativeAssignment.Setsequence(AIndex : Integer; AValue : integer); 

begin
  If (Fsequence=AValue) then exit;
  Fsequence:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TCreativeAssignment.SetsslCompliant(AIndex : Integer; AValue : boolean); 

begin
  If (FsslCompliant=AValue) then exit;
  FsslCompliant:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TCreativeAssignment.SetstartTime(AIndex : Integer; AValue : TDatetime); 

begin
  If (FstartTime=AValue) then exit;
  FstartTime:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TCreativeAssignment.Setweight(AIndex : Integer; AValue : integer); 

begin
  If (Fweight=AValue) then exit;
  Fweight:=AValue;
  MarkPropertyChanged(AIndex);
end;





{ --------------------------------------------------------------------
  TCreativeAssignmentcompanionCreativeOverrides
  --------------------------------------------------------------------}




{ --------------------------------------------------------------------
  TCreativeAssignmentcreativeGroupAssignments
  --------------------------------------------------------------------}




{ --------------------------------------------------------------------
  TCreativeAssignmentrichMediaExitOverrides
  --------------------------------------------------------------------}




{ --------------------------------------------------------------------
  TCreativeCustomEvent
  --------------------------------------------------------------------}


Procedure TCreativeCustomEvent.Setactive(AIndex : Integer; AValue : boolean); 

begin
  If (Factive=AValue) then exit;
  Factive:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TCreativeCustomEvent.SetadvertiserCustomEventName(AIndex : Integer; AValue : string); 

begin
  If (FadvertiserCustomEventName=AValue) then exit;
  FadvertiserCustomEventName:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TCreativeCustomEvent.SetadvertiserCustomEventType(AIndex : Integer; AValue : string); 

begin
  If (FadvertiserCustomEventType=AValue) then exit;
  FadvertiserCustomEventType:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TCreativeCustomEvent.SetartworkLabel(AIndex : Integer; AValue : string); 

begin
  If (FartworkLabel=AValue) then exit;
  FartworkLabel:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TCreativeCustomEvent.SetartworkType(AIndex : Integer; AValue : string); 

begin
  If (FartworkType=AValue) then exit;
  FartworkType:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TCreativeCustomEvent.SetexitUrl(AIndex : Integer; AValue : string); 

begin
  If (FexitUrl=AValue) then exit;
  FexitUrl:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TCreativeCustomEvent.Setid(AIndex : Integer; AValue : string); 

begin
  If (Fid=AValue) then exit;
  Fid:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TCreativeCustomEvent.SetpopupWindowProperties(AIndex : Integer; AValue : TPopupWindowProperties); 

begin
  If (FpopupWindowProperties=AValue) then exit;
  FpopupWindowProperties:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TCreativeCustomEvent.SettargetType(AIndex : Integer; AValue : string); 

begin
  If (FtargetType=AValue) then exit;
  FtargetType:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TCreativeCustomEvent.SetvideoReportingId(AIndex : Integer; AValue : string); 

begin
  If (FvideoReportingId=AValue) then exit;
  FvideoReportingId:=AValue;
  MarkPropertyChanged(AIndex);
end;





{ --------------------------------------------------------------------
  TCreativeField
  --------------------------------------------------------------------}


Procedure TCreativeField.SetaccountId(AIndex : Integer; AValue : string); 

begin
  If (FaccountId=AValue) then exit;
  FaccountId:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TCreativeField.SetadvertiserId(AIndex : Integer; AValue : string); 

begin
  If (FadvertiserId=AValue) then exit;
  FadvertiserId:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TCreativeField.SetadvertiserIdDimensionValue(AIndex : Integer; AValue : TDimensionValue); 

begin
  If (FadvertiserIdDimensionValue=AValue) then exit;
  FadvertiserIdDimensionValue:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TCreativeField.Setid(AIndex : Integer; AValue : string); 

begin
  If (Fid=AValue) then exit;
  Fid:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TCreativeField.Setkind(AIndex : Integer; AValue : string); 

begin
  If (Fkind=AValue) then exit;
  Fkind:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TCreativeField.Setname(AIndex : Integer; AValue : string); 

begin
  If (Fname=AValue) then exit;
  Fname:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TCreativeField.SetsubaccountId(AIndex : Integer; AValue : string); 

begin
  If (FsubaccountId=AValue) then exit;
  FsubaccountId:=AValue;
  MarkPropertyChanged(AIndex);
end;





{ --------------------------------------------------------------------
  TCreativeFieldAssignment
  --------------------------------------------------------------------}


Procedure TCreativeFieldAssignment.SetcreativeFieldId(AIndex : Integer; AValue : string); 

begin
  If (FcreativeFieldId=AValue) then exit;
  FcreativeFieldId:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TCreativeFieldAssignment.SetcreativeFieldValueId(AIndex : Integer; AValue : string); 

begin
  If (FcreativeFieldValueId=AValue) then exit;
  FcreativeFieldValueId:=AValue;
  MarkPropertyChanged(AIndex);
end;





{ --------------------------------------------------------------------
  TCreativeFieldValue
  --------------------------------------------------------------------}


Procedure TCreativeFieldValue.Setid(AIndex : Integer; AValue : string); 

begin
  If (Fid=AValue) then exit;
  Fid:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TCreativeFieldValue.Setkind(AIndex : Integer; AValue : string); 

begin
  If (Fkind=AValue) then exit;
  Fkind:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TCreativeFieldValue.Setvalue(AIndex : Integer; AValue : string); 

begin
  If (Fvalue=AValue) then exit;
  Fvalue:=AValue;
  MarkPropertyChanged(AIndex);
end;





{ --------------------------------------------------------------------
  TCreativeFieldValuesListResponse
  --------------------------------------------------------------------}


Procedure TCreativeFieldValuesListResponse.SetcreativeFieldValues(AIndex : Integer; AValue : TCreativeFieldValuesListResponsecreativeFieldValues); 

begin
  If (FcreativeFieldValues=AValue) then exit;
  FcreativeFieldValues:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TCreativeFieldValuesListResponse.Setkind(AIndex : Integer; AValue : string); 

begin
  If (Fkind=AValue) then exit;
  Fkind:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TCreativeFieldValuesListResponse.SetnextPageToken(AIndex : Integer; AValue : string); 

begin
  If (FnextPageToken=AValue) then exit;
  FnextPageToken:=AValue;
  MarkPropertyChanged(AIndex);
end;





{ --------------------------------------------------------------------
  TCreativeFieldValuesListResponsecreativeFieldValues
  --------------------------------------------------------------------}




{ --------------------------------------------------------------------
  TCreativeFieldsListResponse
  --------------------------------------------------------------------}


Procedure TCreativeFieldsListResponse.SetcreativeFields(AIndex : Integer; AValue : TCreativeFieldsListResponsecreativeFields); 

begin
  If (FcreativeFields=AValue) then exit;
  FcreativeFields:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TCreativeFieldsListResponse.Setkind(AIndex : Integer; AValue : string); 

begin
  If (Fkind=AValue) then exit;
  Fkind:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TCreativeFieldsListResponse.SetnextPageToken(AIndex : Integer; AValue : string); 

begin
  If (FnextPageToken=AValue) then exit;
  FnextPageToken:=AValue;
  MarkPropertyChanged(AIndex);
end;





{ --------------------------------------------------------------------
  TCreativeFieldsListResponsecreativeFields
  --------------------------------------------------------------------}




{ --------------------------------------------------------------------
  TCreativeGroup
  --------------------------------------------------------------------}


Procedure TCreativeGroup.SetaccountId(AIndex : Integer; AValue : string); 

begin
  If (FaccountId=AValue) then exit;
  FaccountId:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TCreativeGroup.SetadvertiserId(AIndex : Integer; AValue : string); 

begin
  If (FadvertiserId=AValue) then exit;
  FadvertiserId:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TCreativeGroup.SetadvertiserIdDimensionValue(AIndex : Integer; AValue : TDimensionValue); 

begin
  If (FadvertiserIdDimensionValue=AValue) then exit;
  FadvertiserIdDimensionValue:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TCreativeGroup.SetgroupNumber(AIndex : Integer; AValue : integer); 

begin
  If (FgroupNumber=AValue) then exit;
  FgroupNumber:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TCreativeGroup.Setid(AIndex : Integer; AValue : string); 

begin
  If (Fid=AValue) then exit;
  Fid:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TCreativeGroup.Setkind(AIndex : Integer; AValue : string); 

begin
  If (Fkind=AValue) then exit;
  Fkind:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TCreativeGroup.Setname(AIndex : Integer; AValue : string); 

begin
  If (Fname=AValue) then exit;
  Fname:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TCreativeGroup.SetsubaccountId(AIndex : Integer; AValue : string); 

begin
  If (FsubaccountId=AValue) then exit;
  FsubaccountId:=AValue;
  MarkPropertyChanged(AIndex);
end;





{ --------------------------------------------------------------------
  TCreativeGroupAssignment
  --------------------------------------------------------------------}


Procedure TCreativeGroupAssignment.SetcreativeGroupId(AIndex : Integer; AValue : string); 

begin
  If (FcreativeGroupId=AValue) then exit;
  FcreativeGroupId:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TCreativeGroupAssignment.SetcreativeGroupNumber(AIndex : Integer; AValue : string); 

begin
  If (FcreativeGroupNumber=AValue) then exit;
  FcreativeGroupNumber:=AValue;
  MarkPropertyChanged(AIndex);
end;





{ --------------------------------------------------------------------
  TCreativeGroupsListResponse
  --------------------------------------------------------------------}


Procedure TCreativeGroupsListResponse.SetcreativeGroups(AIndex : Integer; AValue : TCreativeGroupsListResponsecreativeGroups); 

begin
  If (FcreativeGroups=AValue) then exit;
  FcreativeGroups:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TCreativeGroupsListResponse.Setkind(AIndex : Integer; AValue : string); 

begin
  If (Fkind=AValue) then exit;
  Fkind:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TCreativeGroupsListResponse.SetnextPageToken(AIndex : Integer; AValue : string); 

begin
  If (FnextPageToken=AValue) then exit;
  FnextPageToken:=AValue;
  MarkPropertyChanged(AIndex);
end;





{ --------------------------------------------------------------------
  TCreativeGroupsListResponsecreativeGroups
  --------------------------------------------------------------------}




{ --------------------------------------------------------------------
  TCreativeOptimizationConfiguration
  --------------------------------------------------------------------}


Procedure TCreativeOptimizationConfiguration.Setid(AIndex : Integer; AValue : string); 

begin
  If (Fid=AValue) then exit;
  Fid:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TCreativeOptimizationConfiguration.Setname(AIndex : Integer; AValue : string); 

begin
  If (Fname=AValue) then exit;
  Fname:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TCreativeOptimizationConfiguration.SetoptimizationActivitys(AIndex : Integer; AValue : TCreativeOptimizationConfigurationoptimizationActivitys); 

begin
  If (FoptimizationActivitys=AValue) then exit;
  FoptimizationActivitys:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TCreativeOptimizationConfiguration.SetoptimizationModel(AIndex : Integer; AValue : string); 

begin
  If (FoptimizationModel=AValue) then exit;
  FoptimizationModel:=AValue;
  MarkPropertyChanged(AIndex);
end;





{ --------------------------------------------------------------------
  TCreativeOptimizationConfigurationoptimizationActivitys
  --------------------------------------------------------------------}




{ --------------------------------------------------------------------
  TCreativeRotation
  --------------------------------------------------------------------}


Procedure TCreativeRotation.SetcreativeAssignments(AIndex : Integer; AValue : TCreativeRotationcreativeAssignments); 

begin
  If (FcreativeAssignments=AValue) then exit;
  FcreativeAssignments:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TCreativeRotation.SetcreativeOptimizationConfigurationId(AIndex : Integer; AValue : string); 

begin
  If (FcreativeOptimizationConfigurationId=AValue) then exit;
  FcreativeOptimizationConfigurationId:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TCreativeRotation.Set_type(AIndex : Integer; AValue : string); 

begin
  If (F_type=AValue) then exit;
  F_type:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TCreativeRotation.SetweightCalculationStrategy(AIndex : Integer; AValue : string); 

begin
  If (FweightCalculationStrategy=AValue) then exit;
  FweightCalculationStrategy:=AValue;
  MarkPropertyChanged(AIndex);
end;



Class Function TCreativeRotation.ExportPropertyName(Const AName : String) :String;

begin
  Case AName of
  '_type' : Result:='type';
  else
    Result:=Inherited ExportPropertyName(AName);
  end;
end;




{ --------------------------------------------------------------------
  TCreativeRotationcreativeAssignments
  --------------------------------------------------------------------}




{ --------------------------------------------------------------------
  TCreativeSettings
  --------------------------------------------------------------------}


Procedure TCreativeSettings.SetiFrameFooter(AIndex : Integer; AValue : string); 

begin
  If (FiFrameFooter=AValue) then exit;
  FiFrameFooter:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TCreativeSettings.SetiFrameHeader(AIndex : Integer; AValue : string); 

begin
  If (FiFrameHeader=AValue) then exit;
  FiFrameHeader:=AValue;
  MarkPropertyChanged(AIndex);
end;





{ --------------------------------------------------------------------
  TCreativesListResponse
  --------------------------------------------------------------------}


Procedure TCreativesListResponse.Setcreatives(AIndex : Integer; AValue : TCreativesListResponsecreatives); 

begin
  If (Fcreatives=AValue) then exit;
  Fcreatives:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TCreativesListResponse.Setkind(AIndex : Integer; AValue : string); 

begin
  If (Fkind=AValue) then exit;
  Fkind:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TCreativesListResponse.SetnextPageToken(AIndex : Integer; AValue : string); 

begin
  If (FnextPageToken=AValue) then exit;
  FnextPageToken:=AValue;
  MarkPropertyChanged(AIndex);
end;





{ --------------------------------------------------------------------
  TCreativesListResponsecreatives
  --------------------------------------------------------------------}




{ --------------------------------------------------------------------
  TCrossDimensionReachReportCompatibleFields
  --------------------------------------------------------------------}


Procedure TCrossDimensionReachReportCompatibleFields.Setbreakdown(AIndex : Integer; AValue : TCrossDimensionReachReportCompatibleFieldsbreakdown); 

begin
  If (Fbreakdown=AValue) then exit;
  Fbreakdown:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TCrossDimensionReachReportCompatibleFields.SetdimensionFilters(AIndex : Integer; AValue : TCrossDimensionReachReportCompatibleFieldsdimensionFilters); 

begin
  If (FdimensionFilters=AValue) then exit;
  FdimensionFilters:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TCrossDimensionReachReportCompatibleFields.Setkind(AIndex : Integer; AValue : string); 

begin
  If (Fkind=AValue) then exit;
  Fkind:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TCrossDimensionReachReportCompatibleFields.Setmetrics(AIndex : Integer; AValue : TCrossDimensionReachReportCompatibleFieldsmetrics); 

begin
  If (Fmetrics=AValue) then exit;
  Fmetrics:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TCrossDimensionReachReportCompatibleFields.SetoverlapMetrics(AIndex : Integer; AValue : TCrossDimensionReachReportCompatibleFieldsoverlapMetrics); 

begin
  If (FoverlapMetrics=AValue) then exit;
  FoverlapMetrics:=AValue;
  MarkPropertyChanged(AIndex);
end;





{ --------------------------------------------------------------------
  TCrossDimensionReachReportCompatibleFieldsbreakdown
  --------------------------------------------------------------------}




{ --------------------------------------------------------------------
  TCrossDimensionReachReportCompatibleFieldsdimensionFilters
  --------------------------------------------------------------------}




{ --------------------------------------------------------------------
  TCrossDimensionReachReportCompatibleFieldsmetrics
  --------------------------------------------------------------------}




{ --------------------------------------------------------------------
  TCrossDimensionReachReportCompatibleFieldsoverlapMetrics
  --------------------------------------------------------------------}




{ --------------------------------------------------------------------
  TCustomRichMediaEvents
  --------------------------------------------------------------------}


Procedure TCustomRichMediaEvents.SetfilteredEventIds(AIndex : Integer; AValue : TCustomRichMediaEventsfilteredEventIds); 

begin
  If (FfilteredEventIds=AValue) then exit;
  FfilteredEventIds:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TCustomRichMediaEvents.Setkind(AIndex : Integer; AValue : string); 

begin
  If (Fkind=AValue) then exit;
  Fkind:=AValue;
  MarkPropertyChanged(AIndex);
end;





{ --------------------------------------------------------------------
  TCustomRichMediaEventsfilteredEventIds
  --------------------------------------------------------------------}




{ --------------------------------------------------------------------
  TDateRange
  --------------------------------------------------------------------}


Procedure TDateRange.SetendDate(AIndex : Integer; AValue : TDate); 

begin
  If (FendDate=AValue) then exit;
  FendDate:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TDateRange.Setkind(AIndex : Integer; AValue : string); 

begin
  If (Fkind=AValue) then exit;
  Fkind:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TDateRange.SetrelativeDateRange(AIndex : Integer; AValue : string); 

begin
  If (FrelativeDateRange=AValue) then exit;
  FrelativeDateRange:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TDateRange.SetstartDate(AIndex : Integer; AValue : TDate); 

begin
  If (FstartDate=AValue) then exit;
  FstartDate:=AValue;
  MarkPropertyChanged(AIndex);
end;





{ --------------------------------------------------------------------
  TDayPartTargeting
  --------------------------------------------------------------------}


Procedure TDayPartTargeting.SetdaysOfWeek(AIndex : Integer; AValue : TDayPartTargetingdaysOfWeek); 

begin
  If (FdaysOfWeek=AValue) then exit;
  FdaysOfWeek:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TDayPartTargeting.SethoursOfDay(AIndex : Integer; AValue : TDayPartTargetinghoursOfDay); 

begin
  If (FhoursOfDay=AValue) then exit;
  FhoursOfDay:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TDayPartTargeting.SetuserLocalTime(AIndex : Integer; AValue : boolean); 

begin
  If (FuserLocalTime=AValue) then exit;
  FuserLocalTime:=AValue;
  MarkPropertyChanged(AIndex);
end;





{ --------------------------------------------------------------------
  TDayPartTargetingdaysOfWeek
  --------------------------------------------------------------------}




{ --------------------------------------------------------------------
  TDayPartTargetinghoursOfDay
  --------------------------------------------------------------------}




{ --------------------------------------------------------------------
  TDefaultClickThroughEventTagProperties
  --------------------------------------------------------------------}


Procedure TDefaultClickThroughEventTagProperties.SetdefaultClickThroughEventTagId(AIndex : Integer; AValue : string); 

begin
  If (FdefaultClickThroughEventTagId=AValue) then exit;
  FdefaultClickThroughEventTagId:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TDefaultClickThroughEventTagProperties.SetoverrideInheritedEventTag(AIndex : Integer; AValue : boolean); 

begin
  If (FoverrideInheritedEventTag=AValue) then exit;
  FoverrideInheritedEventTag:=AValue;
  MarkPropertyChanged(AIndex);
end;





{ --------------------------------------------------------------------
  TDeliverySchedule
  --------------------------------------------------------------------}


Procedure TDeliverySchedule.SetfrequencyCap(AIndex : Integer; AValue : TFrequencyCap); 

begin
  If (FfrequencyCap=AValue) then exit;
  FfrequencyCap:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TDeliverySchedule.SethardCutoff(AIndex : Integer; AValue : boolean); 

begin
  If (FhardCutoff=AValue) then exit;
  FhardCutoff:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TDeliverySchedule.SetimpressionRatio(AIndex : Integer; AValue : string); 

begin
  If (FimpressionRatio=AValue) then exit;
  FimpressionRatio:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TDeliverySchedule.Setpriority(AIndex : Integer; AValue : string); 

begin
  If (Fpriority=AValue) then exit;
  Fpriority:=AValue;
  MarkPropertyChanged(AIndex);
end;





{ --------------------------------------------------------------------
  TDfpSettings
  --------------------------------------------------------------------}


Procedure TDfpSettings.Setdfp_network_code(AIndex : Integer; AValue : string); 

begin
  If (Fdfp_network_code=AValue) then exit;
  Fdfp_network_code:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TDfpSettings.Setdfp_network_name(AIndex : Integer; AValue : string); 

begin
  If (Fdfp_network_name=AValue) then exit;
  Fdfp_network_name:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TDfpSettings.SetprogrammaticPlacementAccepted(AIndex : Integer; AValue : boolean); 

begin
  If (FprogrammaticPlacementAccepted=AValue) then exit;
  FprogrammaticPlacementAccepted:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TDfpSettings.SetpubPaidPlacementAccepted(AIndex : Integer; AValue : boolean); 

begin
  If (FpubPaidPlacementAccepted=AValue) then exit;
  FpubPaidPlacementAccepted:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TDfpSettings.SetpublisherPortalOnly(AIndex : Integer; AValue : boolean); 

begin
  If (FpublisherPortalOnly=AValue) then exit;
  FpublisherPortalOnly:=AValue;
  MarkPropertyChanged(AIndex);
end;





{ --------------------------------------------------------------------
  TDimension
  --------------------------------------------------------------------}


Procedure TDimension.Setkind(AIndex : Integer; AValue : string); 

begin
  If (Fkind=AValue) then exit;
  Fkind:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TDimension.Setname(AIndex : Integer; AValue : string); 

begin
  If (Fname=AValue) then exit;
  Fname:=AValue;
  MarkPropertyChanged(AIndex);
end;





{ --------------------------------------------------------------------
  TDimensionFilter
  --------------------------------------------------------------------}


Procedure TDimensionFilter.SetdimensionName(AIndex : Integer; AValue : string); 

begin
  If (FdimensionName=AValue) then exit;
  FdimensionName:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TDimensionFilter.Setkind(AIndex : Integer; AValue : string); 

begin
  If (Fkind=AValue) then exit;
  Fkind:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TDimensionFilter.Setvalue(AIndex : Integer; AValue : string); 

begin
  If (Fvalue=AValue) then exit;
  Fvalue:=AValue;
  MarkPropertyChanged(AIndex);
end;





{ --------------------------------------------------------------------
  TDimensionValue
  --------------------------------------------------------------------}


Procedure TDimensionValue.SetdimensionName(AIndex : Integer; AValue : string); 

begin
  If (FdimensionName=AValue) then exit;
  FdimensionName:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TDimensionValue.Setetag(AIndex : Integer; AValue : string); 

begin
  If (Fetag=AValue) then exit;
  Fetag:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TDimensionValue.Setid(AIndex : Integer; AValue : string); 

begin
  If (Fid=AValue) then exit;
  Fid:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TDimensionValue.Setkind(AIndex : Integer; AValue : string); 

begin
  If (Fkind=AValue) then exit;
  Fkind:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TDimensionValue.SetmatchType(AIndex : Integer; AValue : string); 

begin
  If (FmatchType=AValue) then exit;
  FmatchType:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TDimensionValue.Setvalue(AIndex : Integer; AValue : string); 

begin
  If (Fvalue=AValue) then exit;
  Fvalue:=AValue;
  MarkPropertyChanged(AIndex);
end;





{ --------------------------------------------------------------------
  TDimensionValueList
  --------------------------------------------------------------------}


Procedure TDimensionValueList.Setetag(AIndex : Integer; AValue : string); 

begin
  If (Fetag=AValue) then exit;
  Fetag:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TDimensionValueList.Setitems(AIndex : Integer; AValue : TDimensionValueListitems); 

begin
  If (Fitems=AValue) then exit;
  Fitems:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TDimensionValueList.Setkind(AIndex : Integer; AValue : string); 

begin
  If (Fkind=AValue) then exit;
  Fkind:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TDimensionValueList.SetnextPageToken(AIndex : Integer; AValue : string); 

begin
  If (FnextPageToken=AValue) then exit;
  FnextPageToken:=AValue;
  MarkPropertyChanged(AIndex);
end;





{ --------------------------------------------------------------------
  TDimensionValueListitems
  --------------------------------------------------------------------}




{ --------------------------------------------------------------------
  TDimensionValueRequest
  --------------------------------------------------------------------}


Procedure TDimensionValueRequest.SetdimensionName(AIndex : Integer; AValue : string); 

begin
  If (FdimensionName=AValue) then exit;
  FdimensionName:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TDimensionValueRequest.SetendDate(AIndex : Integer; AValue : TDate); 

begin
  If (FendDate=AValue) then exit;
  FendDate:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TDimensionValueRequest.Setfilters(AIndex : Integer; AValue : TDimensionValueRequestfilters); 

begin
  If (Ffilters=AValue) then exit;
  Ffilters:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TDimensionValueRequest.Setkind(AIndex : Integer; AValue : string); 

begin
  If (Fkind=AValue) then exit;
  Fkind:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TDimensionValueRequest.SetstartDate(AIndex : Integer; AValue : TDate); 

begin
  If (FstartDate=AValue) then exit;
  FstartDate:=AValue;
  MarkPropertyChanged(AIndex);
end;





{ --------------------------------------------------------------------
  TDimensionValueRequestfilters
  --------------------------------------------------------------------}




{ --------------------------------------------------------------------
  TDirectorySite
  --------------------------------------------------------------------}


Procedure TDirectorySite.Setactive(AIndex : Integer; AValue : boolean); 

begin
  If (Factive=AValue) then exit;
  Factive:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TDirectorySite.SetcontactAssignments(AIndex : Integer; AValue : TDirectorySitecontactAssignments); 

begin
  If (FcontactAssignments=AValue) then exit;
  FcontactAssignments:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TDirectorySite.SetcountryId(AIndex : Integer; AValue : string); 

begin
  If (FcountryId=AValue) then exit;
  FcountryId:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TDirectorySite.SetcurrencyId(AIndex : Integer; AValue : string); 

begin
  If (FcurrencyId=AValue) then exit;
  FcurrencyId:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TDirectorySite.Setdescription(AIndex : Integer; AValue : string); 

begin
  If (Fdescription=AValue) then exit;
  Fdescription:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TDirectorySite.Setid(AIndex : Integer; AValue : string); 

begin
  If (Fid=AValue) then exit;
  Fid:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TDirectorySite.SetidDimensionValue(AIndex : Integer; AValue : TDimensionValue); 

begin
  If (FidDimensionValue=AValue) then exit;
  FidDimensionValue:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TDirectorySite.SetinpageTagFormats(AIndex : Integer; AValue : TDirectorySiteinpageTagFormats); 

begin
  If (FinpageTagFormats=AValue) then exit;
  FinpageTagFormats:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TDirectorySite.SetinterstitialTagFormats(AIndex : Integer; AValue : TDirectorySiteinterstitialTagFormats); 

begin
  If (FinterstitialTagFormats=AValue) then exit;
  FinterstitialTagFormats:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TDirectorySite.Setkind(AIndex : Integer; AValue : string); 

begin
  If (Fkind=AValue) then exit;
  Fkind:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TDirectorySite.Setname(AIndex : Integer; AValue : string); 

begin
  If (Fname=AValue) then exit;
  Fname:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TDirectorySite.SetparentId(AIndex : Integer; AValue : string); 

begin
  If (FparentId=AValue) then exit;
  FparentId:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TDirectorySite.Setsettings(AIndex : Integer; AValue : TDirectorySiteSettings); 

begin
  If (Fsettings=AValue) then exit;
  Fsettings:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TDirectorySite.Seturl(AIndex : Integer; AValue : string); 

begin
  If (Furl=AValue) then exit;
  Furl:=AValue;
  MarkPropertyChanged(AIndex);
end;





{ --------------------------------------------------------------------
  TDirectorySitecontactAssignments
  --------------------------------------------------------------------}




{ --------------------------------------------------------------------
  TDirectorySiteinpageTagFormats
  --------------------------------------------------------------------}




{ --------------------------------------------------------------------
  TDirectorySiteinterstitialTagFormats
  --------------------------------------------------------------------}




{ --------------------------------------------------------------------
  TDirectorySiteContact
  --------------------------------------------------------------------}


Procedure TDirectorySiteContact.Setaddress(AIndex : Integer; AValue : string); 

begin
  If (Faddress=AValue) then exit;
  Faddress:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TDirectorySiteContact.Setemail(AIndex : Integer; AValue : string); 

begin
  If (Femail=AValue) then exit;
  Femail:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TDirectorySiteContact.SetfirstName(AIndex : Integer; AValue : string); 

begin
  If (FfirstName=AValue) then exit;
  FfirstName:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TDirectorySiteContact.Setid(AIndex : Integer; AValue : string); 

begin
  If (Fid=AValue) then exit;
  Fid:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TDirectorySiteContact.Setkind(AIndex : Integer; AValue : string); 

begin
  If (Fkind=AValue) then exit;
  Fkind:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TDirectorySiteContact.SetlastName(AIndex : Integer; AValue : string); 

begin
  If (FlastName=AValue) then exit;
  FlastName:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TDirectorySiteContact.Setphone(AIndex : Integer; AValue : string); 

begin
  If (Fphone=AValue) then exit;
  Fphone:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TDirectorySiteContact.Setrole(AIndex : Integer; AValue : string); 

begin
  If (Frole=AValue) then exit;
  Frole:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TDirectorySiteContact.Settitle(AIndex : Integer; AValue : string); 

begin
  If (Ftitle=AValue) then exit;
  Ftitle:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TDirectorySiteContact.Set_type(AIndex : Integer; AValue : string); 

begin
  If (F_type=AValue) then exit;
  F_type:=AValue;
  MarkPropertyChanged(AIndex);
end;



Class Function TDirectorySiteContact.ExportPropertyName(Const AName : String) :String;

begin
  Case AName of
  '_type' : Result:='type';
  else
    Result:=Inherited ExportPropertyName(AName);
  end;
end;




{ --------------------------------------------------------------------
  TDirectorySiteContactAssignment
  --------------------------------------------------------------------}


Procedure TDirectorySiteContactAssignment.SetcontactId(AIndex : Integer; AValue : string); 

begin
  If (FcontactId=AValue) then exit;
  FcontactId:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TDirectorySiteContactAssignment.Setvisibility(AIndex : Integer; AValue : string); 

begin
  If (Fvisibility=AValue) then exit;
  Fvisibility:=AValue;
  MarkPropertyChanged(AIndex);
end;





{ --------------------------------------------------------------------
  TDirectorySiteContactsListResponse
  --------------------------------------------------------------------}


Procedure TDirectorySiteContactsListResponse.SetdirectorySiteContacts(AIndex : Integer; AValue : TDirectorySiteContactsListResponsedirectorySiteContacts); 

begin
  If (FdirectorySiteContacts=AValue) then exit;
  FdirectorySiteContacts:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TDirectorySiteContactsListResponse.Setkind(AIndex : Integer; AValue : string); 

begin
  If (Fkind=AValue) then exit;
  Fkind:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TDirectorySiteContactsListResponse.SetnextPageToken(AIndex : Integer; AValue : string); 

begin
  If (FnextPageToken=AValue) then exit;
  FnextPageToken:=AValue;
  MarkPropertyChanged(AIndex);
end;





{ --------------------------------------------------------------------
  TDirectorySiteContactsListResponsedirectorySiteContacts
  --------------------------------------------------------------------}




{ --------------------------------------------------------------------
  TDirectorySiteSettings
  --------------------------------------------------------------------}


Procedure TDirectorySiteSettings.SetactiveViewOptOut(AIndex : Integer; AValue : boolean); 

begin
  If (FactiveViewOptOut=AValue) then exit;
  FactiveViewOptOut:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TDirectorySiteSettings.Setdfp_settings(AIndex : Integer; AValue : TDfpSettings); 

begin
  If (Fdfp_settings=AValue) then exit;
  Fdfp_settings:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TDirectorySiteSettings.Setinstream_video_placement_accepted(AIndex : Integer; AValue : boolean); 

begin
  If (Finstream_video_placement_accepted=AValue) then exit;
  Finstream_video_placement_accepted:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TDirectorySiteSettings.SetinterstitialPlacementAccepted(AIndex : Integer; AValue : boolean); 

begin
  If (FinterstitialPlacementAccepted=AValue) then exit;
  FinterstitialPlacementAccepted:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TDirectorySiteSettings.SetnielsenOcrOptOut(AIndex : Integer; AValue : boolean); 

begin
  If (FnielsenOcrOptOut=AValue) then exit;
  FnielsenOcrOptOut:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TDirectorySiteSettings.SetverificationTagOptOut(AIndex : Integer; AValue : boolean); 

begin
  If (FverificationTagOptOut=AValue) then exit;
  FverificationTagOptOut:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TDirectorySiteSettings.SetvideoActiveViewOptOut(AIndex : Integer; AValue : boolean); 

begin
  If (FvideoActiveViewOptOut=AValue) then exit;
  FvideoActiveViewOptOut:=AValue;
  MarkPropertyChanged(AIndex);
end;





{ --------------------------------------------------------------------
  TDirectorySitesListResponse
  --------------------------------------------------------------------}


Procedure TDirectorySitesListResponse.SetdirectorySites(AIndex : Integer; AValue : TDirectorySitesListResponsedirectorySites); 

begin
  If (FdirectorySites=AValue) then exit;
  FdirectorySites:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TDirectorySitesListResponse.Setkind(AIndex : Integer; AValue : string); 

begin
  If (Fkind=AValue) then exit;
  Fkind:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TDirectorySitesListResponse.SetnextPageToken(AIndex : Integer; AValue : string); 

begin
  If (FnextPageToken=AValue) then exit;
  FnextPageToken:=AValue;
  MarkPropertyChanged(AIndex);
end;





{ --------------------------------------------------------------------
  TDirectorySitesListResponsedirectorySites
  --------------------------------------------------------------------}




{ --------------------------------------------------------------------
  TEventTag
  --------------------------------------------------------------------}


Procedure TEventTag.SetaccountId(AIndex : Integer; AValue : string); 

begin
  If (FaccountId=AValue) then exit;
  FaccountId:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TEventTag.SetadvertiserId(AIndex : Integer; AValue : string); 

begin
  If (FadvertiserId=AValue) then exit;
  FadvertiserId:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TEventTag.SetadvertiserIdDimensionValue(AIndex : Integer; AValue : TDimensionValue); 

begin
  If (FadvertiserIdDimensionValue=AValue) then exit;
  FadvertiserIdDimensionValue:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TEventTag.SetcampaignId(AIndex : Integer; AValue : string); 

begin
  If (FcampaignId=AValue) then exit;
  FcampaignId:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TEventTag.SetcampaignIdDimensionValue(AIndex : Integer; AValue : TDimensionValue); 

begin
  If (FcampaignIdDimensionValue=AValue) then exit;
  FcampaignIdDimensionValue:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TEventTag.SetenabledByDefault(AIndex : Integer; AValue : boolean); 

begin
  If (FenabledByDefault=AValue) then exit;
  FenabledByDefault:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TEventTag.Setid(AIndex : Integer; AValue : string); 

begin
  If (Fid=AValue) then exit;
  Fid:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TEventTag.Setkind(AIndex : Integer; AValue : string); 

begin
  If (Fkind=AValue) then exit;
  Fkind:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TEventTag.Setname(AIndex : Integer; AValue : string); 

begin
  If (Fname=AValue) then exit;
  Fname:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TEventTag.SetsiteFilterType(AIndex : Integer; AValue : string); 

begin
  If (FsiteFilterType=AValue) then exit;
  FsiteFilterType:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TEventTag.SetsiteIds(AIndex : Integer; AValue : TEventTagsiteIds); 

begin
  If (FsiteIds=AValue) then exit;
  FsiteIds:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TEventTag.SetsslCompliant(AIndex : Integer; AValue : boolean); 

begin
  If (FsslCompliant=AValue) then exit;
  FsslCompliant:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TEventTag.Setstatus(AIndex : Integer; AValue : string); 

begin
  If (Fstatus=AValue) then exit;
  Fstatus:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TEventTag.SetsubaccountId(AIndex : Integer; AValue : string); 

begin
  If (FsubaccountId=AValue) then exit;
  FsubaccountId:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TEventTag.Set_type(AIndex : Integer; AValue : string); 

begin
  If (F_type=AValue) then exit;
  F_type:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TEventTag.Seturl(AIndex : Integer; AValue : string); 

begin
  If (Furl=AValue) then exit;
  Furl:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TEventTag.SeturlEscapeLevels(AIndex : Integer; AValue : integer); 

begin
  If (FurlEscapeLevels=AValue) then exit;
  FurlEscapeLevels:=AValue;
  MarkPropertyChanged(AIndex);
end;



Class Function TEventTag.ExportPropertyName(Const AName : String) :String;

begin
  Case AName of
  '_type' : Result:='type';
  else
    Result:=Inherited ExportPropertyName(AName);
  end;
end;




{ --------------------------------------------------------------------
  TEventTagsiteIds
  --------------------------------------------------------------------}




{ --------------------------------------------------------------------
  TEventTagOverride
  --------------------------------------------------------------------}


Procedure TEventTagOverride.Setenabled(AIndex : Integer; AValue : boolean); 

begin
  If (Fenabled=AValue) then exit;
  Fenabled:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TEventTagOverride.Setid(AIndex : Integer; AValue : string); 

begin
  If (Fid=AValue) then exit;
  Fid:=AValue;
  MarkPropertyChanged(AIndex);
end;





{ --------------------------------------------------------------------
  TEventTagsListResponse
  --------------------------------------------------------------------}


Procedure TEventTagsListResponse.SeteventTags(AIndex : Integer; AValue : TEventTagsListResponseeventTags); 

begin
  If (FeventTags=AValue) then exit;
  FeventTags:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TEventTagsListResponse.Setkind(AIndex : Integer; AValue : string); 

begin
  If (Fkind=AValue) then exit;
  Fkind:=AValue;
  MarkPropertyChanged(AIndex);
end;





{ --------------------------------------------------------------------
  TEventTagsListResponseeventTags
  --------------------------------------------------------------------}




{ --------------------------------------------------------------------
  TFile
  --------------------------------------------------------------------}


Procedure TFile.SetdateRange(AIndex : Integer; AValue : TDateRange); 

begin
  If (FdateRange=AValue) then exit;
  FdateRange:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TFile.Setetag(AIndex : Integer; AValue : string); 

begin
  If (Fetag=AValue) then exit;
  Fetag:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TFile.SetfileName(AIndex : Integer; AValue : string); 

begin
  If (FfileName=AValue) then exit;
  FfileName:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TFile.Setformat(AIndex : Integer; AValue : string); 

begin
  If (Fformat=AValue) then exit;
  Fformat:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TFile.Setid(AIndex : Integer; AValue : string); 

begin
  If (Fid=AValue) then exit;
  Fid:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TFile.Setkind(AIndex : Integer; AValue : string); 

begin
  If (Fkind=AValue) then exit;
  Fkind:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TFile.SetlastModifiedTime(AIndex : Integer; AValue : string); 

begin
  If (FlastModifiedTime=AValue) then exit;
  FlastModifiedTime:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TFile.SetreportId(AIndex : Integer; AValue : string); 

begin
  If (FreportId=AValue) then exit;
  FreportId:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TFile.Setstatus(AIndex : Integer; AValue : string); 

begin
  If (Fstatus=AValue) then exit;
  Fstatus:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TFile.Seturls(AIndex : Integer; AValue : TFileurls); 

begin
  If (Furls=AValue) then exit;
  Furls:=AValue;
  MarkPropertyChanged(AIndex);
end;





{ --------------------------------------------------------------------
  TFileurls
  --------------------------------------------------------------------}


Procedure TFileurls.SetapiUrl(AIndex : Integer; AValue : string); 

begin
  If (FapiUrl=AValue) then exit;
  FapiUrl:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TFileurls.SetbrowserUrl(AIndex : Integer; AValue : string); 

begin
  If (FbrowserUrl=AValue) then exit;
  FbrowserUrl:=AValue;
  MarkPropertyChanged(AIndex);
end;





{ --------------------------------------------------------------------
  TFileList
  --------------------------------------------------------------------}


Procedure TFileList.Setetag(AIndex : Integer; AValue : string); 

begin
  If (Fetag=AValue) then exit;
  Fetag:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TFileList.Setitems(AIndex : Integer; AValue : TFileListitems); 

begin
  If (Fitems=AValue) then exit;
  Fitems:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TFileList.Setkind(AIndex : Integer; AValue : string); 

begin
  If (Fkind=AValue) then exit;
  Fkind:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TFileList.SetnextPageToken(AIndex : Integer; AValue : string); 

begin
  If (FnextPageToken=AValue) then exit;
  FnextPageToken:=AValue;
  MarkPropertyChanged(AIndex);
end;





{ --------------------------------------------------------------------
  TFileListitems
  --------------------------------------------------------------------}




{ --------------------------------------------------------------------
  TFlight
  --------------------------------------------------------------------}


Procedure TFlight.SetendDate(AIndex : Integer; AValue : TDate); 

begin
  If (FendDate=AValue) then exit;
  FendDate:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TFlight.SetrateOrCost(AIndex : Integer; AValue : string); 

begin
  If (FrateOrCost=AValue) then exit;
  FrateOrCost:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TFlight.SetstartDate(AIndex : Integer; AValue : TDate); 

begin
  If (FstartDate=AValue) then exit;
  FstartDate:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TFlight.Setunits(AIndex : Integer; AValue : string); 

begin
  If (Funits=AValue) then exit;
  Funits:=AValue;
  MarkPropertyChanged(AIndex);
end;





{ --------------------------------------------------------------------
  TFloodlightActivitiesGenerateTagResponse
  --------------------------------------------------------------------}


Procedure TFloodlightActivitiesGenerateTagResponse.SetfloodlightActivityTag(AIndex : Integer; AValue : string); 

begin
  If (FfloodlightActivityTag=AValue) then exit;
  FfloodlightActivityTag:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TFloodlightActivitiesGenerateTagResponse.Setkind(AIndex : Integer; AValue : string); 

begin
  If (Fkind=AValue) then exit;
  Fkind:=AValue;
  MarkPropertyChanged(AIndex);
end;





{ --------------------------------------------------------------------
  TFloodlightActivitiesListResponse
  --------------------------------------------------------------------}


Procedure TFloodlightActivitiesListResponse.SetfloodlightActivities(AIndex : Integer; AValue : TFloodlightActivitiesListResponsefloodlightActivities); 

begin
  If (FfloodlightActivities=AValue) then exit;
  FfloodlightActivities:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TFloodlightActivitiesListResponse.Setkind(AIndex : Integer; AValue : string); 

begin
  If (Fkind=AValue) then exit;
  Fkind:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TFloodlightActivitiesListResponse.SetnextPageToken(AIndex : Integer; AValue : string); 

begin
  If (FnextPageToken=AValue) then exit;
  FnextPageToken:=AValue;
  MarkPropertyChanged(AIndex);
end;





{ --------------------------------------------------------------------
  TFloodlightActivitiesListResponsefloodlightActivities
  --------------------------------------------------------------------}




{ --------------------------------------------------------------------
  TFloodlightActivity
  --------------------------------------------------------------------}


Procedure TFloodlightActivity.SetaccountId(AIndex : Integer; AValue : string); 

begin
  If (FaccountId=AValue) then exit;
  FaccountId:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TFloodlightActivity.SetadvertiserId(AIndex : Integer; AValue : string); 

begin
  If (FadvertiserId=AValue) then exit;
  FadvertiserId:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TFloodlightActivity.SetadvertiserIdDimensionValue(AIndex : Integer; AValue : TDimensionValue); 

begin
  If (FadvertiserIdDimensionValue=AValue) then exit;
  FadvertiserIdDimensionValue:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TFloodlightActivity.SetcacheBustingType(AIndex : Integer; AValue : string); 

begin
  If (FcacheBustingType=AValue) then exit;
  FcacheBustingType:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TFloodlightActivity.SetcountingMethod(AIndex : Integer; AValue : string); 

begin
  If (FcountingMethod=AValue) then exit;
  FcountingMethod:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TFloodlightActivity.SetdefaultTags(AIndex : Integer; AValue : TFloodlightActivitydefaultTags); 

begin
  If (FdefaultTags=AValue) then exit;
  FdefaultTags:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TFloodlightActivity.SetexpectedUrl(AIndex : Integer; AValue : string); 

begin
  If (FexpectedUrl=AValue) then exit;
  FexpectedUrl:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TFloodlightActivity.SetfloodlightActivityGroupId(AIndex : Integer; AValue : string); 

begin
  If (FfloodlightActivityGroupId=AValue) then exit;
  FfloodlightActivityGroupId:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TFloodlightActivity.SetfloodlightActivityGroupName(AIndex : Integer; AValue : string); 

begin
  If (FfloodlightActivityGroupName=AValue) then exit;
  FfloodlightActivityGroupName:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TFloodlightActivity.SetfloodlightActivityGroupTagString(AIndex : Integer; AValue : string); 

begin
  If (FfloodlightActivityGroupTagString=AValue) then exit;
  FfloodlightActivityGroupTagString:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TFloodlightActivity.SetfloodlightActivityGroupType(AIndex : Integer; AValue : string); 

begin
  If (FfloodlightActivityGroupType=AValue) then exit;
  FfloodlightActivityGroupType:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TFloodlightActivity.SetfloodlightConfigurationId(AIndex : Integer; AValue : string); 

begin
  If (FfloodlightConfigurationId=AValue) then exit;
  FfloodlightConfigurationId:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TFloodlightActivity.SetfloodlightConfigurationIdDimensionValue(AIndex : Integer; AValue : TDimensionValue); 

begin
  If (FfloodlightConfigurationIdDimensionValue=AValue) then exit;
  FfloodlightConfigurationIdDimensionValue:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TFloodlightActivity.Sethidden(AIndex : Integer; AValue : boolean); 

begin
  If (Fhidden=AValue) then exit;
  Fhidden:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TFloodlightActivity.Setid(AIndex : Integer; AValue : string); 

begin
  If (Fid=AValue) then exit;
  Fid:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TFloodlightActivity.SetidDimensionValue(AIndex : Integer; AValue : TDimensionValue); 

begin
  If (FidDimensionValue=AValue) then exit;
  FidDimensionValue:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TFloodlightActivity.SetimageTagEnabled(AIndex : Integer; AValue : boolean); 

begin
  If (FimageTagEnabled=AValue) then exit;
  FimageTagEnabled:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TFloodlightActivity.Setkind(AIndex : Integer; AValue : string); 

begin
  If (Fkind=AValue) then exit;
  Fkind:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TFloodlightActivity.Setname(AIndex : Integer; AValue : string); 

begin
  If (Fname=AValue) then exit;
  Fname:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TFloodlightActivity.Setnotes(AIndex : Integer; AValue : string); 

begin
  If (Fnotes=AValue) then exit;
  Fnotes:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TFloodlightActivity.SetpublisherTags(AIndex : Integer; AValue : TFloodlightActivitypublisherTags); 

begin
  If (FpublisherTags=AValue) then exit;
  FpublisherTags:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TFloodlightActivity.Setsecure(AIndex : Integer; AValue : boolean); 

begin
  If (Fsecure=AValue) then exit;
  Fsecure:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TFloodlightActivity.SetsslCompliant(AIndex : Integer; AValue : boolean); 

begin
  If (FsslCompliant=AValue) then exit;
  FsslCompliant:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TFloodlightActivity.SetsslRequired(AIndex : Integer; AValue : boolean); 

begin
  If (FsslRequired=AValue) then exit;
  FsslRequired:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TFloodlightActivity.SetsubaccountId(AIndex : Integer; AValue : string); 

begin
  If (FsubaccountId=AValue) then exit;
  FsubaccountId:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TFloodlightActivity.SettagFormat(AIndex : Integer; AValue : string); 

begin
  If (FtagFormat=AValue) then exit;
  FtagFormat:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TFloodlightActivity.SettagString(AIndex : Integer; AValue : string); 

begin
  If (FtagString=AValue) then exit;
  FtagString:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TFloodlightActivity.SetuserDefinedVariableTypes(AIndex : Integer; AValue : TFloodlightActivityuserDefinedVariableTypes); 

begin
  If (FuserDefinedVariableTypes=AValue) then exit;
  FuserDefinedVariableTypes:=AValue;
  MarkPropertyChanged(AIndex);
end;





{ --------------------------------------------------------------------
  TFloodlightActivitydefaultTags
  --------------------------------------------------------------------}




{ --------------------------------------------------------------------
  TFloodlightActivitypublisherTags
  --------------------------------------------------------------------}




{ --------------------------------------------------------------------
  TFloodlightActivityuserDefinedVariableTypes
  --------------------------------------------------------------------}




{ --------------------------------------------------------------------
  TFloodlightActivityDynamicTag
  --------------------------------------------------------------------}


Procedure TFloodlightActivityDynamicTag.Setid(AIndex : Integer; AValue : string); 

begin
  If (Fid=AValue) then exit;
  Fid:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TFloodlightActivityDynamicTag.Setname(AIndex : Integer; AValue : string); 

begin
  If (Fname=AValue) then exit;
  Fname:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TFloodlightActivityDynamicTag.Settag(AIndex : Integer; AValue : string); 

begin
  If (Ftag=AValue) then exit;
  Ftag:=AValue;
  MarkPropertyChanged(AIndex);
end;





{ --------------------------------------------------------------------
  TFloodlightActivityGroup
  --------------------------------------------------------------------}


Procedure TFloodlightActivityGroup.SetaccountId(AIndex : Integer; AValue : string); 

begin
  If (FaccountId=AValue) then exit;
  FaccountId:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TFloodlightActivityGroup.SetadvertiserId(AIndex : Integer; AValue : string); 

begin
  If (FadvertiserId=AValue) then exit;
  FadvertiserId:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TFloodlightActivityGroup.SetadvertiserIdDimensionValue(AIndex : Integer; AValue : TDimensionValue); 

begin
  If (FadvertiserIdDimensionValue=AValue) then exit;
  FadvertiserIdDimensionValue:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TFloodlightActivityGroup.SetfloodlightConfigurationId(AIndex : Integer; AValue : string); 

begin
  If (FfloodlightConfigurationId=AValue) then exit;
  FfloodlightConfigurationId:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TFloodlightActivityGroup.SetfloodlightConfigurationIdDimensionValue(AIndex : Integer; AValue : TDimensionValue); 

begin
  If (FfloodlightConfigurationIdDimensionValue=AValue) then exit;
  FfloodlightConfigurationIdDimensionValue:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TFloodlightActivityGroup.Setid(AIndex : Integer; AValue : string); 

begin
  If (Fid=AValue) then exit;
  Fid:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TFloodlightActivityGroup.SetidDimensionValue(AIndex : Integer; AValue : TDimensionValue); 

begin
  If (FidDimensionValue=AValue) then exit;
  FidDimensionValue:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TFloodlightActivityGroup.Setkind(AIndex : Integer; AValue : string); 

begin
  If (Fkind=AValue) then exit;
  Fkind:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TFloodlightActivityGroup.Setname(AIndex : Integer; AValue : string); 

begin
  If (Fname=AValue) then exit;
  Fname:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TFloodlightActivityGroup.SetsubaccountId(AIndex : Integer; AValue : string); 

begin
  If (FsubaccountId=AValue) then exit;
  FsubaccountId:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TFloodlightActivityGroup.SettagString(AIndex : Integer; AValue : string); 

begin
  If (FtagString=AValue) then exit;
  FtagString:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TFloodlightActivityGroup.Set_type(AIndex : Integer; AValue : string); 

begin
  If (F_type=AValue) then exit;
  F_type:=AValue;
  MarkPropertyChanged(AIndex);
end;



Class Function TFloodlightActivityGroup.ExportPropertyName(Const AName : String) :String;

begin
  Case AName of
  '_type' : Result:='type';
  else
    Result:=Inherited ExportPropertyName(AName);
  end;
end;




{ --------------------------------------------------------------------
  TFloodlightActivityGroupsListResponse
  --------------------------------------------------------------------}


Procedure TFloodlightActivityGroupsListResponse.SetfloodlightActivityGroups(AIndex : Integer; AValue : TFloodlightActivityGroupsListResponsefloodlightActivityGroups); 

begin
  If (FfloodlightActivityGroups=AValue) then exit;
  FfloodlightActivityGroups:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TFloodlightActivityGroupsListResponse.Setkind(AIndex : Integer; AValue : string); 

begin
  If (Fkind=AValue) then exit;
  Fkind:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TFloodlightActivityGroupsListResponse.SetnextPageToken(AIndex : Integer; AValue : string); 

begin
  If (FnextPageToken=AValue) then exit;
  FnextPageToken:=AValue;
  MarkPropertyChanged(AIndex);
end;





{ --------------------------------------------------------------------
  TFloodlightActivityGroupsListResponsefloodlightActivityGroups
  --------------------------------------------------------------------}




{ --------------------------------------------------------------------
  TFloodlightActivityPublisherDynamicTag
  --------------------------------------------------------------------}


Procedure TFloodlightActivityPublisherDynamicTag.SetclickThrough(AIndex : Integer; AValue : boolean); 

begin
  If (FclickThrough=AValue) then exit;
  FclickThrough:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TFloodlightActivityPublisherDynamicTag.SetdirectorySiteId(AIndex : Integer; AValue : string); 

begin
  If (FdirectorySiteId=AValue) then exit;
  FdirectorySiteId:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TFloodlightActivityPublisherDynamicTag.SetdynamicTag(AIndex : Integer; AValue : TFloodlightActivityDynamicTag); 

begin
  If (FdynamicTag=AValue) then exit;
  FdynamicTag:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TFloodlightActivityPublisherDynamicTag.SetsiteId(AIndex : Integer; AValue : string); 

begin
  If (FsiteId=AValue) then exit;
  FsiteId:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TFloodlightActivityPublisherDynamicTag.SetsiteIdDimensionValue(AIndex : Integer; AValue : TDimensionValue); 

begin
  If (FsiteIdDimensionValue=AValue) then exit;
  FsiteIdDimensionValue:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TFloodlightActivityPublisherDynamicTag.SetviewThrough(AIndex : Integer; AValue : boolean); 

begin
  If (FviewThrough=AValue) then exit;
  FviewThrough:=AValue;
  MarkPropertyChanged(AIndex);
end;





{ --------------------------------------------------------------------
  TFloodlightConfiguration
  --------------------------------------------------------------------}


Procedure TFloodlightConfiguration.SetaccountId(AIndex : Integer; AValue : string); 

begin
  If (FaccountId=AValue) then exit;
  FaccountId:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TFloodlightConfiguration.SetadvertiserId(AIndex : Integer; AValue : string); 

begin
  If (FadvertiserId=AValue) then exit;
  FadvertiserId:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TFloodlightConfiguration.SetadvertiserIdDimensionValue(AIndex : Integer; AValue : TDimensionValue); 

begin
  If (FadvertiserIdDimensionValue=AValue) then exit;
  FadvertiserIdDimensionValue:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TFloodlightConfiguration.SetanalyticsDataSharingEnabled(AIndex : Integer; AValue : boolean); 

begin
  If (FanalyticsDataSharingEnabled=AValue) then exit;
  FanalyticsDataSharingEnabled:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TFloodlightConfiguration.SetexposureToConversionEnabled(AIndex : Integer; AValue : boolean); 

begin
  If (FexposureToConversionEnabled=AValue) then exit;
  FexposureToConversionEnabled:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TFloodlightConfiguration.SetfirstDayOfWeek(AIndex : Integer; AValue : string); 

begin
  If (FfirstDayOfWeek=AValue) then exit;
  FfirstDayOfWeek:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TFloodlightConfiguration.Setid(AIndex : Integer; AValue : string); 

begin
  If (Fid=AValue) then exit;
  Fid:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TFloodlightConfiguration.SetidDimensionValue(AIndex : Integer; AValue : TDimensionValue); 

begin
  If (FidDimensionValue=AValue) then exit;
  FidDimensionValue:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TFloodlightConfiguration.Setkind(AIndex : Integer; AValue : string); 

begin
  If (Fkind=AValue) then exit;
  Fkind:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TFloodlightConfiguration.SetlookbackConfiguration(AIndex : Integer; AValue : TLookbackConfiguration); 

begin
  If (FlookbackConfiguration=AValue) then exit;
  FlookbackConfiguration:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TFloodlightConfiguration.SetnaturalSearchConversionAttributionOption(AIndex : Integer; AValue : string); 

begin
  If (FnaturalSearchConversionAttributionOption=AValue) then exit;
  FnaturalSearchConversionAttributionOption:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TFloodlightConfiguration.SetomnitureSettings(AIndex : Integer; AValue : TOmnitureSettings); 

begin
  If (FomnitureSettings=AValue) then exit;
  FomnitureSettings:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TFloodlightConfiguration.SetsslRequired(AIndex : Integer; AValue : boolean); 

begin
  If (FsslRequired=AValue) then exit;
  FsslRequired:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TFloodlightConfiguration.SetstandardVariableTypes(AIndex : Integer; AValue : TFloodlightConfigurationstandardVariableTypes); 

begin
  If (FstandardVariableTypes=AValue) then exit;
  FstandardVariableTypes:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TFloodlightConfiguration.SetsubaccountId(AIndex : Integer; AValue : string); 

begin
  If (FsubaccountId=AValue) then exit;
  FsubaccountId:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TFloodlightConfiguration.SettagSettings(AIndex : Integer; AValue : TTagSettings); 

begin
  If (FtagSettings=AValue) then exit;
  FtagSettings:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TFloodlightConfiguration.SetuserDefinedVariableConfigurations(AIndex : Integer; AValue : TFloodlightConfigurationuserDefinedVariableConfigurations); 

begin
  If (FuserDefinedVariableConfigurations=AValue) then exit;
  FuserDefinedVariableConfigurations:=AValue;
  MarkPropertyChanged(AIndex);
end;





{ --------------------------------------------------------------------
  TFloodlightConfigurationstandardVariableTypes
  --------------------------------------------------------------------}




{ --------------------------------------------------------------------
  TFloodlightConfigurationuserDefinedVariableConfigurations
  --------------------------------------------------------------------}




{ --------------------------------------------------------------------
  TFloodlightConfigurationsListResponse
  --------------------------------------------------------------------}


Procedure TFloodlightConfigurationsListResponse.SetfloodlightConfigurations(AIndex : Integer; AValue : TFloodlightConfigurationsListResponsefloodlightConfigurations); 

begin
  If (FfloodlightConfigurations=AValue) then exit;
  FfloodlightConfigurations:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TFloodlightConfigurationsListResponse.Setkind(AIndex : Integer; AValue : string); 

begin
  If (Fkind=AValue) then exit;
  Fkind:=AValue;
  MarkPropertyChanged(AIndex);
end;





{ --------------------------------------------------------------------
  TFloodlightConfigurationsListResponsefloodlightConfigurations
  --------------------------------------------------------------------}




{ --------------------------------------------------------------------
  TFloodlightReportCompatibleFields
  --------------------------------------------------------------------}


Procedure TFloodlightReportCompatibleFields.SetdimensionFilters(AIndex : Integer; AValue : TFloodlightReportCompatibleFieldsdimensionFilters); 

begin
  If (FdimensionFilters=AValue) then exit;
  FdimensionFilters:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TFloodlightReportCompatibleFields.Setdimensions(AIndex : Integer; AValue : TFloodlightReportCompatibleFieldsdimensions); 

begin
  If (Fdimensions=AValue) then exit;
  Fdimensions:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TFloodlightReportCompatibleFields.Setkind(AIndex : Integer; AValue : string); 

begin
  If (Fkind=AValue) then exit;
  Fkind:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TFloodlightReportCompatibleFields.Setmetrics(AIndex : Integer; AValue : TFloodlightReportCompatibleFieldsmetrics); 

begin
  If (Fmetrics=AValue) then exit;
  Fmetrics:=AValue;
  MarkPropertyChanged(AIndex);
end;





{ --------------------------------------------------------------------
  TFloodlightReportCompatibleFieldsdimensionFilters
  --------------------------------------------------------------------}




{ --------------------------------------------------------------------
  TFloodlightReportCompatibleFieldsdimensions
  --------------------------------------------------------------------}




{ --------------------------------------------------------------------
  TFloodlightReportCompatibleFieldsmetrics
  --------------------------------------------------------------------}




{ --------------------------------------------------------------------
  TFrequencyCap
  --------------------------------------------------------------------}


Procedure TFrequencyCap.Setduration(AIndex : Integer; AValue : string); 

begin
  If (Fduration=AValue) then exit;
  Fduration:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TFrequencyCap.Setimpressions(AIndex : Integer; AValue : string); 

begin
  If (Fimpressions=AValue) then exit;
  Fimpressions:=AValue;
  MarkPropertyChanged(AIndex);
end;





{ --------------------------------------------------------------------
  TFsCommand
  --------------------------------------------------------------------}


Procedure TFsCommand.Setleft(AIndex : Integer; AValue : integer); 

begin
  If (Fleft=AValue) then exit;
  Fleft:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TFsCommand.SetpositionOption(AIndex : Integer; AValue : string); 

begin
  If (FpositionOption=AValue) then exit;
  FpositionOption:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TFsCommand.Settop(AIndex : Integer; AValue : integer); 

begin
  If (Ftop=AValue) then exit;
  Ftop:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TFsCommand.SetwindowHeight(AIndex : Integer; AValue : integer); 

begin
  If (FwindowHeight=AValue) then exit;
  FwindowHeight:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TFsCommand.SetwindowWidth(AIndex : Integer; AValue : integer); 

begin
  If (FwindowWidth=AValue) then exit;
  FwindowWidth:=AValue;
  MarkPropertyChanged(AIndex);
end;





{ --------------------------------------------------------------------
  TGeoTargeting
  --------------------------------------------------------------------}


Procedure TGeoTargeting.Setcities(AIndex : Integer; AValue : TGeoTargetingcities); 

begin
  If (Fcities=AValue) then exit;
  Fcities:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TGeoTargeting.Setcountries(AIndex : Integer; AValue : TGeoTargetingcountries); 

begin
  If (Fcountries=AValue) then exit;
  Fcountries:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TGeoTargeting.SetexcludeCountries(AIndex : Integer; AValue : boolean); 

begin
  If (FexcludeCountries=AValue) then exit;
  FexcludeCountries:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TGeoTargeting.Setmetros(AIndex : Integer; AValue : TGeoTargetingmetros); 

begin
  If (Fmetros=AValue) then exit;
  Fmetros:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TGeoTargeting.SetpostalCodes(AIndex : Integer; AValue : TGeoTargetingpostalCodes); 

begin
  If (FpostalCodes=AValue) then exit;
  FpostalCodes:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TGeoTargeting.Setregions(AIndex : Integer; AValue : TGeoTargetingregions); 

begin
  If (Fregions=AValue) then exit;
  Fregions:=AValue;
  MarkPropertyChanged(AIndex);
end;





{ --------------------------------------------------------------------
  TGeoTargetingcities
  --------------------------------------------------------------------}




{ --------------------------------------------------------------------
  TGeoTargetingcountries
  --------------------------------------------------------------------}




{ --------------------------------------------------------------------
  TGeoTargetingmetros
  --------------------------------------------------------------------}




{ --------------------------------------------------------------------
  TGeoTargetingpostalCodes
  --------------------------------------------------------------------}




{ --------------------------------------------------------------------
  TGeoTargetingregions
  --------------------------------------------------------------------}




{ --------------------------------------------------------------------
  TInventoryItem
  --------------------------------------------------------------------}


Procedure TInventoryItem.SetaccountId(AIndex : Integer; AValue : string); 

begin
  If (FaccountId=AValue) then exit;
  FaccountId:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TInventoryItem.SetadSlots(AIndex : Integer; AValue : TInventoryItemadSlots); 

begin
  If (FadSlots=AValue) then exit;
  FadSlots:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TInventoryItem.SetadvertiserId(AIndex : Integer; AValue : string); 

begin
  If (FadvertiserId=AValue) then exit;
  FadvertiserId:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TInventoryItem.SetcontentCategoryId(AIndex : Integer; AValue : string); 

begin
  If (FcontentCategoryId=AValue) then exit;
  FcontentCategoryId:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TInventoryItem.SetestimatedClickThroughRate(AIndex : Integer; AValue : string); 

begin
  If (FestimatedClickThroughRate=AValue) then exit;
  FestimatedClickThroughRate:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TInventoryItem.SetestimatedConversionRate(AIndex : Integer; AValue : string); 

begin
  If (FestimatedConversionRate=AValue) then exit;
  FestimatedConversionRate:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TInventoryItem.Setid(AIndex : Integer; AValue : string); 

begin
  If (Fid=AValue) then exit;
  Fid:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TInventoryItem.SetinPlan(AIndex : Integer; AValue : boolean); 

begin
  If (FinPlan=AValue) then exit;
  FinPlan:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TInventoryItem.Setkind(AIndex : Integer; AValue : string); 

begin
  If (Fkind=AValue) then exit;
  Fkind:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TInventoryItem.SetlastModifiedInfo(AIndex : Integer; AValue : TLastModifiedInfo); 

begin
  If (FlastModifiedInfo=AValue) then exit;
  FlastModifiedInfo:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TInventoryItem.Setname(AIndex : Integer; AValue : string); 

begin
  If (Fname=AValue) then exit;
  Fname:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TInventoryItem.SetnegotiationChannelId(AIndex : Integer; AValue : string); 

begin
  If (FnegotiationChannelId=AValue) then exit;
  FnegotiationChannelId:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TInventoryItem.SetorderId(AIndex : Integer; AValue : string); 

begin
  If (ForderId=AValue) then exit;
  ForderId:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TInventoryItem.SetplacementStrategyId(AIndex : Integer; AValue : string); 

begin
  If (FplacementStrategyId=AValue) then exit;
  FplacementStrategyId:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TInventoryItem.Setpricing(AIndex : Integer; AValue : TPricing); 

begin
  If (Fpricing=AValue) then exit;
  Fpricing:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TInventoryItem.SetprojectId(AIndex : Integer; AValue : string); 

begin
  If (FprojectId=AValue) then exit;
  FprojectId:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TInventoryItem.SetrfpId(AIndex : Integer; AValue : string); 

begin
  If (FrfpId=AValue) then exit;
  FrfpId:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TInventoryItem.SetsiteId(AIndex : Integer; AValue : string); 

begin
  If (FsiteId=AValue) then exit;
  FsiteId:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TInventoryItem.SetsubaccountId(AIndex : Integer; AValue : string); 

begin
  If (FsubaccountId=AValue) then exit;
  FsubaccountId:=AValue;
  MarkPropertyChanged(AIndex);
end;





{ --------------------------------------------------------------------
  TInventoryItemadSlots
  --------------------------------------------------------------------}




{ --------------------------------------------------------------------
  TInventoryItemsListResponse
  --------------------------------------------------------------------}


Procedure TInventoryItemsListResponse.SetinventoryItems(AIndex : Integer; AValue : TInventoryItemsListResponseinventoryItems); 

begin
  If (FinventoryItems=AValue) then exit;
  FinventoryItems:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TInventoryItemsListResponse.Setkind(AIndex : Integer; AValue : string); 

begin
  If (Fkind=AValue) then exit;
  Fkind:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TInventoryItemsListResponse.SetnextPageToken(AIndex : Integer; AValue : string); 

begin
  If (FnextPageToken=AValue) then exit;
  FnextPageToken:=AValue;
  MarkPropertyChanged(AIndex);
end;





{ --------------------------------------------------------------------
  TInventoryItemsListResponseinventoryItems
  --------------------------------------------------------------------}




{ --------------------------------------------------------------------
  TKeyValueTargetingExpression
  --------------------------------------------------------------------}


Procedure TKeyValueTargetingExpression.Setexpression(AIndex : Integer; AValue : string); 

begin
  If (Fexpression=AValue) then exit;
  Fexpression:=AValue;
  MarkPropertyChanged(AIndex);
end;





{ --------------------------------------------------------------------
  TLandingPage
  --------------------------------------------------------------------}


Procedure TLandingPage.Setdefault(AIndex : Integer; AValue : boolean); 

begin
  If (Fdefault=AValue) then exit;
  Fdefault:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TLandingPage.Setid(AIndex : Integer; AValue : string); 

begin
  If (Fid=AValue) then exit;
  Fid:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TLandingPage.Setkind(AIndex : Integer; AValue : string); 

begin
  If (Fkind=AValue) then exit;
  Fkind:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TLandingPage.Setname(AIndex : Integer; AValue : string); 

begin
  If (Fname=AValue) then exit;
  Fname:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TLandingPage.Seturl(AIndex : Integer; AValue : string); 

begin
  If (Furl=AValue) then exit;
  Furl:=AValue;
  MarkPropertyChanged(AIndex);
end;





{ --------------------------------------------------------------------
  TLandingPagesListResponse
  --------------------------------------------------------------------}


Procedure TLandingPagesListResponse.Setkind(AIndex : Integer; AValue : string); 

begin
  If (Fkind=AValue) then exit;
  Fkind:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TLandingPagesListResponse.SetlandingPages(AIndex : Integer; AValue : TLandingPagesListResponselandingPages); 

begin
  If (FlandingPages=AValue) then exit;
  FlandingPages:=AValue;
  MarkPropertyChanged(AIndex);
end;





{ --------------------------------------------------------------------
  TLandingPagesListResponselandingPages
  --------------------------------------------------------------------}




{ --------------------------------------------------------------------
  TLastModifiedInfo
  --------------------------------------------------------------------}


Procedure TLastModifiedInfo.Settime(AIndex : Integer; AValue : string); 

begin
  If (Ftime=AValue) then exit;
  Ftime:=AValue;
  MarkPropertyChanged(AIndex);
end;





{ --------------------------------------------------------------------
  TListPopulationClause
  --------------------------------------------------------------------}


Procedure TListPopulationClause.Setterms(AIndex : Integer; AValue : TListPopulationClauseterms); 

begin
  If (Fterms=AValue) then exit;
  Fterms:=AValue;
  MarkPropertyChanged(AIndex);
end;





{ --------------------------------------------------------------------
  TListPopulationClauseterms
  --------------------------------------------------------------------}




{ --------------------------------------------------------------------
  TListPopulationRule
  --------------------------------------------------------------------}


Procedure TListPopulationRule.SetfloodlightActivityId(AIndex : Integer; AValue : string); 

begin
  If (FfloodlightActivityId=AValue) then exit;
  FfloodlightActivityId:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TListPopulationRule.SetfloodlightActivityName(AIndex : Integer; AValue : string); 

begin
  If (FfloodlightActivityName=AValue) then exit;
  FfloodlightActivityName:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TListPopulationRule.SetlistPopulationClauses(AIndex : Integer; AValue : TListPopulationRulelistPopulationClauses); 

begin
  If (FlistPopulationClauses=AValue) then exit;
  FlistPopulationClauses:=AValue;
  MarkPropertyChanged(AIndex);
end;





{ --------------------------------------------------------------------
  TListPopulationRulelistPopulationClauses
  --------------------------------------------------------------------}




{ --------------------------------------------------------------------
  TListPopulationTerm
  --------------------------------------------------------------------}


Procedure TListPopulationTerm.Setcontains(AIndex : Integer; AValue : boolean); 

begin
  If (Fcontains=AValue) then exit;
  Fcontains:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TListPopulationTerm.Setnegation(AIndex : Integer; AValue : boolean); 

begin
  If (Fnegation=AValue) then exit;
  Fnegation:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TListPopulationTerm.Set_operator(AIndex : Integer; AValue : string); 

begin
  If (F_operator=AValue) then exit;
  F_operator:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TListPopulationTerm.SetremarketingListId(AIndex : Integer; AValue : string); 

begin
  If (FremarketingListId=AValue) then exit;
  FremarketingListId:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TListPopulationTerm.Set_type(AIndex : Integer; AValue : string); 

begin
  If (F_type=AValue) then exit;
  F_type:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TListPopulationTerm.Setvalue(AIndex : Integer; AValue : string); 

begin
  If (Fvalue=AValue) then exit;
  Fvalue:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TListPopulationTerm.SetvariableFriendlyName(AIndex : Integer; AValue : string); 

begin
  If (FvariableFriendlyName=AValue) then exit;
  FvariableFriendlyName:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TListPopulationTerm.SetvariableName(AIndex : Integer; AValue : string); 

begin
  If (FvariableName=AValue) then exit;
  FvariableName:=AValue;
  MarkPropertyChanged(AIndex);
end;



Class Function TListPopulationTerm.ExportPropertyName(Const AName : String) :String;

begin
  Case AName of
  '_operator' : Result:='operator';
  '_type' : Result:='type';
  else
    Result:=Inherited ExportPropertyName(AName);
  end;
end;




{ --------------------------------------------------------------------
  TListTargetingExpression
  --------------------------------------------------------------------}


Procedure TListTargetingExpression.Setexpression(AIndex : Integer; AValue : string); 

begin
  If (Fexpression=AValue) then exit;
  Fexpression:=AValue;
  MarkPropertyChanged(AIndex);
end;





{ --------------------------------------------------------------------
  TLookbackConfiguration
  --------------------------------------------------------------------}


Procedure TLookbackConfiguration.SetclickDuration(AIndex : Integer; AValue : integer); 

begin
  If (FclickDuration=AValue) then exit;
  FclickDuration:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TLookbackConfiguration.SetpostImpressionActivitiesDuration(AIndex : Integer; AValue : integer); 

begin
  If (FpostImpressionActivitiesDuration=AValue) then exit;
  FpostImpressionActivitiesDuration:=AValue;
  MarkPropertyChanged(AIndex);
end;





{ --------------------------------------------------------------------
  TMetric
  --------------------------------------------------------------------}


Procedure TMetric.Setkind(AIndex : Integer; AValue : string); 

begin
  If (Fkind=AValue) then exit;
  Fkind:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TMetric.Setname(AIndex : Integer; AValue : string); 

begin
  If (Fname=AValue) then exit;
  Fname:=AValue;
  MarkPropertyChanged(AIndex);
end;





{ --------------------------------------------------------------------
  TMetro
  --------------------------------------------------------------------}


Procedure TMetro.SetcountryCode(AIndex : Integer; AValue : string); 

begin
  If (FcountryCode=AValue) then exit;
  FcountryCode:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TMetro.SetcountryDartId(AIndex : Integer; AValue : string); 

begin
  If (FcountryDartId=AValue) then exit;
  FcountryDartId:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TMetro.SetdartId(AIndex : Integer; AValue : string); 

begin
  If (FdartId=AValue) then exit;
  FdartId:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TMetro.SetdmaId(AIndex : Integer; AValue : string); 

begin
  If (FdmaId=AValue) then exit;
  FdmaId:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TMetro.Setkind(AIndex : Integer; AValue : string); 

begin
  If (Fkind=AValue) then exit;
  Fkind:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TMetro.SetmetroCode(AIndex : Integer; AValue : string); 

begin
  If (FmetroCode=AValue) then exit;
  FmetroCode:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TMetro.Setname(AIndex : Integer; AValue : string); 

begin
  If (Fname=AValue) then exit;
  Fname:=AValue;
  MarkPropertyChanged(AIndex);
end;





{ --------------------------------------------------------------------
  TMetrosListResponse
  --------------------------------------------------------------------}


Procedure TMetrosListResponse.Setkind(AIndex : Integer; AValue : string); 

begin
  If (Fkind=AValue) then exit;
  Fkind:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TMetrosListResponse.Setmetros(AIndex : Integer; AValue : TMetrosListResponsemetros); 

begin
  If (Fmetros=AValue) then exit;
  Fmetros:=AValue;
  MarkPropertyChanged(AIndex);
end;





{ --------------------------------------------------------------------
  TMetrosListResponsemetros
  --------------------------------------------------------------------}




{ --------------------------------------------------------------------
  TMobileCarrier
  --------------------------------------------------------------------}


Procedure TMobileCarrier.SetcountryCode(AIndex : Integer; AValue : string); 

begin
  If (FcountryCode=AValue) then exit;
  FcountryCode:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TMobileCarrier.SetcountryDartId(AIndex : Integer; AValue : string); 

begin
  If (FcountryDartId=AValue) then exit;
  FcountryDartId:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TMobileCarrier.Setid(AIndex : Integer; AValue : string); 

begin
  If (Fid=AValue) then exit;
  Fid:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TMobileCarrier.Setkind(AIndex : Integer; AValue : string); 

begin
  If (Fkind=AValue) then exit;
  Fkind:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TMobileCarrier.Setname(AIndex : Integer; AValue : string); 

begin
  If (Fname=AValue) then exit;
  Fname:=AValue;
  MarkPropertyChanged(AIndex);
end;





{ --------------------------------------------------------------------
  TMobileCarriersListResponse
  --------------------------------------------------------------------}


Procedure TMobileCarriersListResponse.Setkind(AIndex : Integer; AValue : string); 

begin
  If (Fkind=AValue) then exit;
  Fkind:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TMobileCarriersListResponse.SetmobileCarriers(AIndex : Integer; AValue : TMobileCarriersListResponsemobileCarriers); 

begin
  If (FmobileCarriers=AValue) then exit;
  FmobileCarriers:=AValue;
  MarkPropertyChanged(AIndex);
end;





{ --------------------------------------------------------------------
  TMobileCarriersListResponsemobileCarriers
  --------------------------------------------------------------------}




{ --------------------------------------------------------------------
  TObjectFilter
  --------------------------------------------------------------------}


Procedure TObjectFilter.Setkind(AIndex : Integer; AValue : string); 

begin
  If (Fkind=AValue) then exit;
  Fkind:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TObjectFilter.SetobjectIds(AIndex : Integer; AValue : TObjectFilterobjectIds); 

begin
  If (FobjectIds=AValue) then exit;
  FobjectIds:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TObjectFilter.Setstatus(AIndex : Integer; AValue : string); 

begin
  If (Fstatus=AValue) then exit;
  Fstatus:=AValue;
  MarkPropertyChanged(AIndex);
end;





{ --------------------------------------------------------------------
  TObjectFilterobjectIds
  --------------------------------------------------------------------}




{ --------------------------------------------------------------------
  TOffsetPosition
  --------------------------------------------------------------------}


Procedure TOffsetPosition.Setleft(AIndex : Integer; AValue : integer); 

begin
  If (Fleft=AValue) then exit;
  Fleft:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TOffsetPosition.Settop(AIndex : Integer; AValue : integer); 

begin
  If (Ftop=AValue) then exit;
  Ftop:=AValue;
  MarkPropertyChanged(AIndex);
end;





{ --------------------------------------------------------------------
  TOmnitureSettings
  --------------------------------------------------------------------}


Procedure TOmnitureSettings.SetomnitureCostDataEnabled(AIndex : Integer; AValue : boolean); 

begin
  If (FomnitureCostDataEnabled=AValue) then exit;
  FomnitureCostDataEnabled:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TOmnitureSettings.SetomnitureIntegrationEnabled(AIndex : Integer; AValue : boolean); 

begin
  If (FomnitureIntegrationEnabled=AValue) then exit;
  FomnitureIntegrationEnabled:=AValue;
  MarkPropertyChanged(AIndex);
end;





{ --------------------------------------------------------------------
  TOperatingSystem
  --------------------------------------------------------------------}


Procedure TOperatingSystem.SetdartId(AIndex : Integer; AValue : string); 

begin
  If (FdartId=AValue) then exit;
  FdartId:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TOperatingSystem.Setdesktop(AIndex : Integer; AValue : boolean); 

begin
  If (Fdesktop=AValue) then exit;
  Fdesktop:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TOperatingSystem.Setkind(AIndex : Integer; AValue : string); 

begin
  If (Fkind=AValue) then exit;
  Fkind:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TOperatingSystem.Setmobile(AIndex : Integer; AValue : boolean); 

begin
  If (Fmobile=AValue) then exit;
  Fmobile:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TOperatingSystem.Setname(AIndex : Integer; AValue : string); 

begin
  If (Fname=AValue) then exit;
  Fname:=AValue;
  MarkPropertyChanged(AIndex);
end;





{ --------------------------------------------------------------------
  TOperatingSystemVersion
  --------------------------------------------------------------------}


Procedure TOperatingSystemVersion.Setid(AIndex : Integer; AValue : string); 

begin
  If (Fid=AValue) then exit;
  Fid:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TOperatingSystemVersion.Setkind(AIndex : Integer; AValue : string); 

begin
  If (Fkind=AValue) then exit;
  Fkind:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TOperatingSystemVersion.SetmajorVersion(AIndex : Integer; AValue : string); 

begin
  If (FmajorVersion=AValue) then exit;
  FmajorVersion:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TOperatingSystemVersion.SetminorVersion(AIndex : Integer; AValue : string); 

begin
  If (FminorVersion=AValue) then exit;
  FminorVersion:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TOperatingSystemVersion.Setname(AIndex : Integer; AValue : string); 

begin
  If (Fname=AValue) then exit;
  Fname:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TOperatingSystemVersion.SetoperatingSystem(AIndex : Integer; AValue : TOperatingSystem); 

begin
  If (FoperatingSystem=AValue) then exit;
  FoperatingSystem:=AValue;
  MarkPropertyChanged(AIndex);
end;





{ --------------------------------------------------------------------
  TOperatingSystemVersionsListResponse
  --------------------------------------------------------------------}


Procedure TOperatingSystemVersionsListResponse.Setkind(AIndex : Integer; AValue : string); 

begin
  If (Fkind=AValue) then exit;
  Fkind:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TOperatingSystemVersionsListResponse.SetoperatingSystemVersions(AIndex : Integer; AValue : TOperatingSystemVersionsListResponseoperatingSystemVersions); 

begin
  If (FoperatingSystemVersions=AValue) then exit;
  FoperatingSystemVersions:=AValue;
  MarkPropertyChanged(AIndex);
end;





{ --------------------------------------------------------------------
  TOperatingSystemVersionsListResponseoperatingSystemVersions
  --------------------------------------------------------------------}




{ --------------------------------------------------------------------
  TOperatingSystemsListResponse
  --------------------------------------------------------------------}


Procedure TOperatingSystemsListResponse.Setkind(AIndex : Integer; AValue : string); 

begin
  If (Fkind=AValue) then exit;
  Fkind:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TOperatingSystemsListResponse.SetoperatingSystems(AIndex : Integer; AValue : TOperatingSystemsListResponseoperatingSystems); 

begin
  If (FoperatingSystems=AValue) then exit;
  FoperatingSystems:=AValue;
  MarkPropertyChanged(AIndex);
end;





{ --------------------------------------------------------------------
  TOperatingSystemsListResponseoperatingSystems
  --------------------------------------------------------------------}




{ --------------------------------------------------------------------
  TOptimizationActivity
  --------------------------------------------------------------------}


Procedure TOptimizationActivity.SetfloodlightActivityId(AIndex : Integer; AValue : string); 

begin
  If (FfloodlightActivityId=AValue) then exit;
  FfloodlightActivityId:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TOptimizationActivity.SetfloodlightActivityIdDimensionValue(AIndex : Integer; AValue : TDimensionValue); 

begin
  If (FfloodlightActivityIdDimensionValue=AValue) then exit;
  FfloodlightActivityIdDimensionValue:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TOptimizationActivity.Setweight(AIndex : Integer; AValue : integer); 

begin
  If (Fweight=AValue) then exit;
  Fweight:=AValue;
  MarkPropertyChanged(AIndex);
end;





{ --------------------------------------------------------------------
  TOrder
  --------------------------------------------------------------------}


Procedure TOrder.SetaccountId(AIndex : Integer; AValue : string); 

begin
  If (FaccountId=AValue) then exit;
  FaccountId:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TOrder.SetadvertiserId(AIndex : Integer; AValue : string); 

begin
  If (FadvertiserId=AValue) then exit;
  FadvertiserId:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TOrder.SetapproverUserProfileIds(AIndex : Integer; AValue : TOrderapproverUserProfileIds); 

begin
  If (FapproverUserProfileIds=AValue) then exit;
  FapproverUserProfileIds:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TOrder.SetbuyerInvoiceId(AIndex : Integer; AValue : string); 

begin
  If (FbuyerInvoiceId=AValue) then exit;
  FbuyerInvoiceId:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TOrder.SetbuyerOrganizationName(AIndex : Integer; AValue : string); 

begin
  If (FbuyerOrganizationName=AValue) then exit;
  FbuyerOrganizationName:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TOrder.Setcomments(AIndex : Integer; AValue : string); 

begin
  If (Fcomments=AValue) then exit;
  Fcomments:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TOrder.Setcontacts(AIndex : Integer; AValue : TOrdercontacts); 

begin
  If (Fcontacts=AValue) then exit;
  Fcontacts:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TOrder.Setid(AIndex : Integer; AValue : string); 

begin
  If (Fid=AValue) then exit;
  Fid:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TOrder.Setkind(AIndex : Integer; AValue : string); 

begin
  If (Fkind=AValue) then exit;
  Fkind:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TOrder.SetlastModifiedInfo(AIndex : Integer; AValue : TLastModifiedInfo); 

begin
  If (FlastModifiedInfo=AValue) then exit;
  FlastModifiedInfo:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TOrder.Setname(AIndex : Integer; AValue : string); 

begin
  If (Fname=AValue) then exit;
  Fname:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TOrder.Setnotes(AIndex : Integer; AValue : string); 

begin
  If (Fnotes=AValue) then exit;
  Fnotes:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TOrder.SetplanningTermId(AIndex : Integer; AValue : string); 

begin
  If (FplanningTermId=AValue) then exit;
  FplanningTermId:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TOrder.SetprojectId(AIndex : Integer; AValue : string); 

begin
  If (FprojectId=AValue) then exit;
  FprojectId:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TOrder.SetsellerOrderId(AIndex : Integer; AValue : string); 

begin
  If (FsellerOrderId=AValue) then exit;
  FsellerOrderId:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TOrder.SetsellerOrganizationName(AIndex : Integer; AValue : string); 

begin
  If (FsellerOrganizationName=AValue) then exit;
  FsellerOrganizationName:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TOrder.SetsiteId(AIndex : Integer; AValue : TOrdersiteId); 

begin
  If (FsiteId=AValue) then exit;
  FsiteId:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TOrder.SetsiteNames(AIndex : Integer; AValue : TOrdersiteNames); 

begin
  If (FsiteNames=AValue) then exit;
  FsiteNames:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TOrder.SetsubaccountId(AIndex : Integer; AValue : string); 

begin
  If (FsubaccountId=AValue) then exit;
  FsubaccountId:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TOrder.SettermsAndConditions(AIndex : Integer; AValue : string); 

begin
  If (FtermsAndConditions=AValue) then exit;
  FtermsAndConditions:=AValue;
  MarkPropertyChanged(AIndex);
end;





{ --------------------------------------------------------------------
  TOrderapproverUserProfileIds
  --------------------------------------------------------------------}




{ --------------------------------------------------------------------
  TOrdercontacts
  --------------------------------------------------------------------}




{ --------------------------------------------------------------------
  TOrdersiteId
  --------------------------------------------------------------------}




{ --------------------------------------------------------------------
  TOrdersiteNames
  --------------------------------------------------------------------}




{ --------------------------------------------------------------------
  TOrderContact
  --------------------------------------------------------------------}


Procedure TOrderContact.SetcontactInfo(AIndex : Integer; AValue : string); 

begin
  If (FcontactInfo=AValue) then exit;
  FcontactInfo:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TOrderContact.SetcontactName(AIndex : Integer; AValue : string); 

begin
  If (FcontactName=AValue) then exit;
  FcontactName:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TOrderContact.SetcontactTitle(AIndex : Integer; AValue : string); 

begin
  If (FcontactTitle=AValue) then exit;
  FcontactTitle:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TOrderContact.SetcontactType(AIndex : Integer; AValue : string); 

begin
  If (FcontactType=AValue) then exit;
  FcontactType:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TOrderContact.SetsignatureUserProfileId(AIndex : Integer; AValue : string); 

begin
  If (FsignatureUserProfileId=AValue) then exit;
  FsignatureUserProfileId:=AValue;
  MarkPropertyChanged(AIndex);
end;





{ --------------------------------------------------------------------
  TOrderDocument
  --------------------------------------------------------------------}


Procedure TOrderDocument.SetaccountId(AIndex : Integer; AValue : string); 

begin
  If (FaccountId=AValue) then exit;
  FaccountId:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TOrderDocument.SetadvertiserId(AIndex : Integer; AValue : string); 

begin
  If (FadvertiserId=AValue) then exit;
  FadvertiserId:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TOrderDocument.SetamendedOrderDocumentId(AIndex : Integer; AValue : string); 

begin
  If (FamendedOrderDocumentId=AValue) then exit;
  FamendedOrderDocumentId:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TOrderDocument.SetapprovedByUserProfileIds(AIndex : Integer; AValue : TOrderDocumentapprovedByUserProfileIds); 

begin
  If (FapprovedByUserProfileIds=AValue) then exit;
  FapprovedByUserProfileIds:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TOrderDocument.Setcancelled(AIndex : Integer; AValue : boolean); 

begin
  If (Fcancelled=AValue) then exit;
  Fcancelled:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TOrderDocument.SetcreatedInfo(AIndex : Integer; AValue : TLastModifiedInfo); 

begin
  If (FcreatedInfo=AValue) then exit;
  FcreatedInfo:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TOrderDocument.SeteffectiveDate(AIndex : Integer; AValue : TDate); 

begin
  If (FeffectiveDate=AValue) then exit;
  FeffectiveDate:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TOrderDocument.Setid(AIndex : Integer; AValue : string); 

begin
  If (Fid=AValue) then exit;
  Fid:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TOrderDocument.Setkind(AIndex : Integer; AValue : string); 

begin
  If (Fkind=AValue) then exit;
  Fkind:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TOrderDocument.SetorderId(AIndex : Integer; AValue : string); 

begin
  If (ForderId=AValue) then exit;
  ForderId:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TOrderDocument.SetprojectId(AIndex : Integer; AValue : string); 

begin
  If (FprojectId=AValue) then exit;
  FprojectId:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TOrderDocument.Setsigned(AIndex : Integer; AValue : boolean); 

begin
  If (Fsigned=AValue) then exit;
  Fsigned:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TOrderDocument.SetsubaccountId(AIndex : Integer; AValue : string); 

begin
  If (FsubaccountId=AValue) then exit;
  FsubaccountId:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TOrderDocument.Settitle(AIndex : Integer; AValue : string); 

begin
  If (Ftitle=AValue) then exit;
  Ftitle:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TOrderDocument.Set_type(AIndex : Integer; AValue : string); 

begin
  If (F_type=AValue) then exit;
  F_type:=AValue;
  MarkPropertyChanged(AIndex);
end;



Class Function TOrderDocument.ExportPropertyName(Const AName : String) :String;

begin
  Case AName of
  '_type' : Result:='type';
  else
    Result:=Inherited ExportPropertyName(AName);
  end;
end;




{ --------------------------------------------------------------------
  TOrderDocumentapprovedByUserProfileIds
  --------------------------------------------------------------------}




{ --------------------------------------------------------------------
  TOrderDocumentsListResponse
  --------------------------------------------------------------------}


Procedure TOrderDocumentsListResponse.Setkind(AIndex : Integer; AValue : string); 

begin
  If (Fkind=AValue) then exit;
  Fkind:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TOrderDocumentsListResponse.SetnextPageToken(AIndex : Integer; AValue : string); 

begin
  If (FnextPageToken=AValue) then exit;
  FnextPageToken:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TOrderDocumentsListResponse.SetorderDocuments(AIndex : Integer; AValue : TOrderDocumentsListResponseorderDocuments); 

begin
  If (ForderDocuments=AValue) then exit;
  ForderDocuments:=AValue;
  MarkPropertyChanged(AIndex);
end;





{ --------------------------------------------------------------------
  TOrderDocumentsListResponseorderDocuments
  --------------------------------------------------------------------}




{ --------------------------------------------------------------------
  TOrdersListResponse
  --------------------------------------------------------------------}


Procedure TOrdersListResponse.Setkind(AIndex : Integer; AValue : string); 

begin
  If (Fkind=AValue) then exit;
  Fkind:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TOrdersListResponse.SetnextPageToken(AIndex : Integer; AValue : string); 

begin
  If (FnextPageToken=AValue) then exit;
  FnextPageToken:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TOrdersListResponse.Setorders(AIndex : Integer; AValue : TOrdersListResponseorders); 

begin
  If (Forders=AValue) then exit;
  Forders:=AValue;
  MarkPropertyChanged(AIndex);
end;





{ --------------------------------------------------------------------
  TOrdersListResponseorders
  --------------------------------------------------------------------}




{ --------------------------------------------------------------------
  TPathToConversionReportCompatibleFields
  --------------------------------------------------------------------}


Procedure TPathToConversionReportCompatibleFields.SetconversionDimensions(AIndex : Integer; AValue : TPathToConversionReportCompatibleFieldsconversionDimensions); 

begin
  If (FconversionDimensions=AValue) then exit;
  FconversionDimensions:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TPathToConversionReportCompatibleFields.SetcustomFloodlightVariables(AIndex : Integer; AValue : TPathToConversionReportCompatibleFieldscustomFloodlightVariables); 

begin
  If (FcustomFloodlightVariables=AValue) then exit;
  FcustomFloodlightVariables:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TPathToConversionReportCompatibleFields.Setkind(AIndex : Integer; AValue : string); 

begin
  If (Fkind=AValue) then exit;
  Fkind:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TPathToConversionReportCompatibleFields.Setmetrics(AIndex : Integer; AValue : TPathToConversionReportCompatibleFieldsmetrics); 

begin
  If (Fmetrics=AValue) then exit;
  Fmetrics:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TPathToConversionReportCompatibleFields.SetperInteractionDimensions(AIndex : Integer; AValue : TPathToConversionReportCompatibleFieldsperInteractionDimensions); 

begin
  If (FperInteractionDimensions=AValue) then exit;
  FperInteractionDimensions:=AValue;
  MarkPropertyChanged(AIndex);
end;





{ --------------------------------------------------------------------
  TPathToConversionReportCompatibleFieldsconversionDimensions
  --------------------------------------------------------------------}




{ --------------------------------------------------------------------
  TPathToConversionReportCompatibleFieldscustomFloodlightVariables
  --------------------------------------------------------------------}




{ --------------------------------------------------------------------
  TPathToConversionReportCompatibleFieldsmetrics
  --------------------------------------------------------------------}




{ --------------------------------------------------------------------
  TPathToConversionReportCompatibleFieldsperInteractionDimensions
  --------------------------------------------------------------------}




{ --------------------------------------------------------------------
  TPlacement
  --------------------------------------------------------------------}


Procedure TPlacement.SetaccountId(AIndex : Integer; AValue : string); 

begin
  If (FaccountId=AValue) then exit;
  FaccountId:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TPlacement.SetadvertiserId(AIndex : Integer; AValue : string); 

begin
  If (FadvertiserId=AValue) then exit;
  FadvertiserId:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TPlacement.SetadvertiserIdDimensionValue(AIndex : Integer; AValue : TDimensionValue); 

begin
  If (FadvertiserIdDimensionValue=AValue) then exit;
  FadvertiserIdDimensionValue:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TPlacement.Setarchived(AIndex : Integer; AValue : boolean); 

begin
  If (Farchived=AValue) then exit;
  Farchived:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TPlacement.SetcampaignId(AIndex : Integer; AValue : string); 

begin
  If (FcampaignId=AValue) then exit;
  FcampaignId:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TPlacement.SetcampaignIdDimensionValue(AIndex : Integer; AValue : TDimensionValue); 

begin
  If (FcampaignIdDimensionValue=AValue) then exit;
  FcampaignIdDimensionValue:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TPlacement.Setcomment(AIndex : Integer; AValue : string); 

begin
  If (Fcomment=AValue) then exit;
  Fcomment:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TPlacement.Setcompatibility(AIndex : Integer; AValue : string); 

begin
  If (Fcompatibility=AValue) then exit;
  Fcompatibility:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TPlacement.SetcontentCategoryId(AIndex : Integer; AValue : string); 

begin
  If (FcontentCategoryId=AValue) then exit;
  FcontentCategoryId:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TPlacement.SetcreateInfo(AIndex : Integer; AValue : TLastModifiedInfo); 

begin
  If (FcreateInfo=AValue) then exit;
  FcreateInfo:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TPlacement.SetdirectorySiteId(AIndex : Integer; AValue : string); 

begin
  If (FdirectorySiteId=AValue) then exit;
  FdirectorySiteId:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TPlacement.SetdirectorySiteIdDimensionValue(AIndex : Integer; AValue : TDimensionValue); 

begin
  If (FdirectorySiteIdDimensionValue=AValue) then exit;
  FdirectorySiteIdDimensionValue:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TPlacement.SetexternalId(AIndex : Integer; AValue : string); 

begin
  If (FexternalId=AValue) then exit;
  FexternalId:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TPlacement.Setid(AIndex : Integer; AValue : string); 

begin
  If (Fid=AValue) then exit;
  Fid:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TPlacement.SetidDimensionValue(AIndex : Integer; AValue : TDimensionValue); 

begin
  If (FidDimensionValue=AValue) then exit;
  FidDimensionValue:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TPlacement.SetkeyName(AIndex : Integer; AValue : string); 

begin
  If (FkeyName=AValue) then exit;
  FkeyName:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TPlacement.Setkind(AIndex : Integer; AValue : string); 

begin
  If (Fkind=AValue) then exit;
  Fkind:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TPlacement.SetlastModifiedInfo(AIndex : Integer; AValue : TLastModifiedInfo); 

begin
  If (FlastModifiedInfo=AValue) then exit;
  FlastModifiedInfo:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TPlacement.SetlookbackConfiguration(AIndex : Integer; AValue : TLookbackConfiguration); 

begin
  If (FlookbackConfiguration=AValue) then exit;
  FlookbackConfiguration:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TPlacement.Setname(AIndex : Integer; AValue : string); 

begin
  If (Fname=AValue) then exit;
  Fname:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TPlacement.SetpaymentApproved(AIndex : Integer; AValue : boolean); 

begin
  If (FpaymentApproved=AValue) then exit;
  FpaymentApproved:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TPlacement.SetpaymentSource(AIndex : Integer; AValue : string); 

begin
  If (FpaymentSource=AValue) then exit;
  FpaymentSource:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TPlacement.SetplacementGroupId(AIndex : Integer; AValue : string); 

begin
  If (FplacementGroupId=AValue) then exit;
  FplacementGroupId:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TPlacement.SetplacementGroupIdDimensionValue(AIndex : Integer; AValue : TDimensionValue); 

begin
  If (FplacementGroupIdDimensionValue=AValue) then exit;
  FplacementGroupIdDimensionValue:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TPlacement.SetplacementStrategyId(AIndex : Integer; AValue : string); 

begin
  If (FplacementStrategyId=AValue) then exit;
  FplacementStrategyId:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TPlacement.SetpricingSchedule(AIndex : Integer; AValue : TPricingSchedule); 

begin
  If (FpricingSchedule=AValue) then exit;
  FpricingSchedule:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TPlacement.Setprimary(AIndex : Integer; AValue : boolean); 

begin
  If (Fprimary=AValue) then exit;
  Fprimary:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TPlacement.SetpublisherUpdateInfo(AIndex : Integer; AValue : TLastModifiedInfo); 

begin
  If (FpublisherUpdateInfo=AValue) then exit;
  FpublisherUpdateInfo:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TPlacement.SetsiteId(AIndex : Integer; AValue : string); 

begin
  If (FsiteId=AValue) then exit;
  FsiteId:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TPlacement.SetsiteIdDimensionValue(AIndex : Integer; AValue : TDimensionValue); 

begin
  If (FsiteIdDimensionValue=AValue) then exit;
  FsiteIdDimensionValue:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TPlacement.Setsize(AIndex : Integer; AValue : TSize); 

begin
  If (Fsize=AValue) then exit;
  Fsize:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TPlacement.SetsslRequired(AIndex : Integer; AValue : boolean); 

begin
  If (FsslRequired=AValue) then exit;
  FsslRequired:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TPlacement.Setstatus(AIndex : Integer; AValue : string); 

begin
  If (Fstatus=AValue) then exit;
  Fstatus:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TPlacement.SetsubaccountId(AIndex : Integer; AValue : string); 

begin
  If (FsubaccountId=AValue) then exit;
  FsubaccountId:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TPlacement.SettagFormats(AIndex : Integer; AValue : TPlacementtagFormats); 

begin
  If (FtagFormats=AValue) then exit;
  FtagFormats:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TPlacement.SettagSetting(AIndex : Integer; AValue : TTagSetting); 

begin
  If (FtagSetting=AValue) then exit;
  FtagSetting:=AValue;
  MarkPropertyChanged(AIndex);
end;





{ --------------------------------------------------------------------
  TPlacementtagFormats
  --------------------------------------------------------------------}




{ --------------------------------------------------------------------
  TPlacementAssignment
  --------------------------------------------------------------------}


Procedure TPlacementAssignment.Setactive(AIndex : Integer; AValue : boolean); 

begin
  If (Factive=AValue) then exit;
  Factive:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TPlacementAssignment.SetplacementId(AIndex : Integer; AValue : string); 

begin
  If (FplacementId=AValue) then exit;
  FplacementId:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TPlacementAssignment.SetplacementIdDimensionValue(AIndex : Integer; AValue : TDimensionValue); 

begin
  If (FplacementIdDimensionValue=AValue) then exit;
  FplacementIdDimensionValue:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TPlacementAssignment.SetsslRequired(AIndex : Integer; AValue : boolean); 

begin
  If (FsslRequired=AValue) then exit;
  FsslRequired:=AValue;
  MarkPropertyChanged(AIndex);
end;





{ --------------------------------------------------------------------
  TPlacementGroup
  --------------------------------------------------------------------}


Procedure TPlacementGroup.SetaccountId(AIndex : Integer; AValue : string); 

begin
  If (FaccountId=AValue) then exit;
  FaccountId:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TPlacementGroup.SetadvertiserId(AIndex : Integer; AValue : string); 

begin
  If (FadvertiserId=AValue) then exit;
  FadvertiserId:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TPlacementGroup.SetadvertiserIdDimensionValue(AIndex : Integer; AValue : TDimensionValue); 

begin
  If (FadvertiserIdDimensionValue=AValue) then exit;
  FadvertiserIdDimensionValue:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TPlacementGroup.Setarchived(AIndex : Integer; AValue : boolean); 

begin
  If (Farchived=AValue) then exit;
  Farchived:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TPlacementGroup.SetcampaignId(AIndex : Integer; AValue : string); 

begin
  If (FcampaignId=AValue) then exit;
  FcampaignId:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TPlacementGroup.SetcampaignIdDimensionValue(AIndex : Integer; AValue : TDimensionValue); 

begin
  If (FcampaignIdDimensionValue=AValue) then exit;
  FcampaignIdDimensionValue:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TPlacementGroup.SetchildPlacementIds(AIndex : Integer; AValue : TPlacementGroupchildPlacementIds); 

begin
  If (FchildPlacementIds=AValue) then exit;
  FchildPlacementIds:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TPlacementGroup.Setcomment(AIndex : Integer; AValue : string); 

begin
  If (Fcomment=AValue) then exit;
  Fcomment:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TPlacementGroup.SetcontentCategoryId(AIndex : Integer; AValue : string); 

begin
  If (FcontentCategoryId=AValue) then exit;
  FcontentCategoryId:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TPlacementGroup.SetcreateInfo(AIndex : Integer; AValue : TLastModifiedInfo); 

begin
  If (FcreateInfo=AValue) then exit;
  FcreateInfo:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TPlacementGroup.SetdirectorySiteId(AIndex : Integer; AValue : string); 

begin
  If (FdirectorySiteId=AValue) then exit;
  FdirectorySiteId:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TPlacementGroup.SetdirectorySiteIdDimensionValue(AIndex : Integer; AValue : TDimensionValue); 

begin
  If (FdirectorySiteIdDimensionValue=AValue) then exit;
  FdirectorySiteIdDimensionValue:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TPlacementGroup.SetexternalId(AIndex : Integer; AValue : string); 

begin
  If (FexternalId=AValue) then exit;
  FexternalId:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TPlacementGroup.Setid(AIndex : Integer; AValue : string); 

begin
  If (Fid=AValue) then exit;
  Fid:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TPlacementGroup.SetidDimensionValue(AIndex : Integer; AValue : TDimensionValue); 

begin
  If (FidDimensionValue=AValue) then exit;
  FidDimensionValue:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TPlacementGroup.Setkind(AIndex : Integer; AValue : string); 

begin
  If (Fkind=AValue) then exit;
  Fkind:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TPlacementGroup.SetlastModifiedInfo(AIndex : Integer; AValue : TLastModifiedInfo); 

begin
  If (FlastModifiedInfo=AValue) then exit;
  FlastModifiedInfo:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TPlacementGroup.Setname(AIndex : Integer; AValue : string); 

begin
  If (Fname=AValue) then exit;
  Fname:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TPlacementGroup.SetplacementGroupType(AIndex : Integer; AValue : string); 

begin
  If (FplacementGroupType=AValue) then exit;
  FplacementGroupType:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TPlacementGroup.SetplacementStrategyId(AIndex : Integer; AValue : string); 

begin
  If (FplacementStrategyId=AValue) then exit;
  FplacementStrategyId:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TPlacementGroup.SetpricingSchedule(AIndex : Integer; AValue : TPricingSchedule); 

begin
  If (FpricingSchedule=AValue) then exit;
  FpricingSchedule:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TPlacementGroup.SetprimaryPlacementId(AIndex : Integer; AValue : string); 

begin
  If (FprimaryPlacementId=AValue) then exit;
  FprimaryPlacementId:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TPlacementGroup.SetprimaryPlacementIdDimensionValue(AIndex : Integer; AValue : TDimensionValue); 

begin
  If (FprimaryPlacementIdDimensionValue=AValue) then exit;
  FprimaryPlacementIdDimensionValue:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TPlacementGroup.SetprogrammaticSetting(AIndex : Integer; AValue : TProgrammaticSetting); 

begin
  If (FprogrammaticSetting=AValue) then exit;
  FprogrammaticSetting:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TPlacementGroup.SetsiteId(AIndex : Integer; AValue : string); 

begin
  If (FsiteId=AValue) then exit;
  FsiteId:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TPlacementGroup.SetsiteIdDimensionValue(AIndex : Integer; AValue : TDimensionValue); 

begin
  If (FsiteIdDimensionValue=AValue) then exit;
  FsiteIdDimensionValue:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TPlacementGroup.SetsubaccountId(AIndex : Integer; AValue : string); 

begin
  If (FsubaccountId=AValue) then exit;
  FsubaccountId:=AValue;
  MarkPropertyChanged(AIndex);
end;





{ --------------------------------------------------------------------
  TPlacementGroupchildPlacementIds
  --------------------------------------------------------------------}




{ --------------------------------------------------------------------
  TPlacementGroupsListResponse
  --------------------------------------------------------------------}


Procedure TPlacementGroupsListResponse.Setkind(AIndex : Integer; AValue : string); 

begin
  If (Fkind=AValue) then exit;
  Fkind:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TPlacementGroupsListResponse.SetnextPageToken(AIndex : Integer; AValue : string); 

begin
  If (FnextPageToken=AValue) then exit;
  FnextPageToken:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TPlacementGroupsListResponse.SetplacementGroups(AIndex : Integer; AValue : TPlacementGroupsListResponseplacementGroups); 

begin
  If (FplacementGroups=AValue) then exit;
  FplacementGroups:=AValue;
  MarkPropertyChanged(AIndex);
end;





{ --------------------------------------------------------------------
  TPlacementGroupsListResponseplacementGroups
  --------------------------------------------------------------------}




{ --------------------------------------------------------------------
  TPlacementStrategiesListResponse
  --------------------------------------------------------------------}


Procedure TPlacementStrategiesListResponse.Setkind(AIndex : Integer; AValue : string); 

begin
  If (Fkind=AValue) then exit;
  Fkind:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TPlacementStrategiesListResponse.SetnextPageToken(AIndex : Integer; AValue : string); 

begin
  If (FnextPageToken=AValue) then exit;
  FnextPageToken:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TPlacementStrategiesListResponse.SetplacementStrategies(AIndex : Integer; AValue : TPlacementStrategiesListResponseplacementStrategies); 

begin
  If (FplacementStrategies=AValue) then exit;
  FplacementStrategies:=AValue;
  MarkPropertyChanged(AIndex);
end;





{ --------------------------------------------------------------------
  TPlacementStrategiesListResponseplacementStrategies
  --------------------------------------------------------------------}




{ --------------------------------------------------------------------
  TPlacementStrategy
  --------------------------------------------------------------------}


Procedure TPlacementStrategy.SetaccountId(AIndex : Integer; AValue : string); 

begin
  If (FaccountId=AValue) then exit;
  FaccountId:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TPlacementStrategy.Setid(AIndex : Integer; AValue : string); 

begin
  If (Fid=AValue) then exit;
  Fid:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TPlacementStrategy.Setkind(AIndex : Integer; AValue : string); 

begin
  If (Fkind=AValue) then exit;
  Fkind:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TPlacementStrategy.Setname(AIndex : Integer; AValue : string); 

begin
  If (Fname=AValue) then exit;
  Fname:=AValue;
  MarkPropertyChanged(AIndex);
end;





{ --------------------------------------------------------------------
  TPlacementTag
  --------------------------------------------------------------------}


Procedure TPlacementTag.SetplacementId(AIndex : Integer; AValue : string); 

begin
  If (FplacementId=AValue) then exit;
  FplacementId:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TPlacementTag.SettagDatas(AIndex : Integer; AValue : TPlacementTagtagDatas); 

begin
  If (FtagDatas=AValue) then exit;
  FtagDatas:=AValue;
  MarkPropertyChanged(AIndex);
end;





{ --------------------------------------------------------------------
  TPlacementTagtagDatas
  --------------------------------------------------------------------}




{ --------------------------------------------------------------------
  TPlacementsGenerateTagsResponse
  --------------------------------------------------------------------}


Procedure TPlacementsGenerateTagsResponse.Setkind(AIndex : Integer; AValue : string); 

begin
  If (Fkind=AValue) then exit;
  Fkind:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TPlacementsGenerateTagsResponse.SetplacementTags(AIndex : Integer; AValue : TPlacementsGenerateTagsResponseplacementTags); 

begin
  If (FplacementTags=AValue) then exit;
  FplacementTags:=AValue;
  MarkPropertyChanged(AIndex);
end;





{ --------------------------------------------------------------------
  TPlacementsGenerateTagsResponseplacementTags
  --------------------------------------------------------------------}




{ --------------------------------------------------------------------
  TPlacementsListResponse
  --------------------------------------------------------------------}


Procedure TPlacementsListResponse.Setkind(AIndex : Integer; AValue : string); 

begin
  If (Fkind=AValue) then exit;
  Fkind:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TPlacementsListResponse.SetnextPageToken(AIndex : Integer; AValue : string); 

begin
  If (FnextPageToken=AValue) then exit;
  FnextPageToken:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TPlacementsListResponse.Setplacements(AIndex : Integer; AValue : TPlacementsListResponseplacements); 

begin
  If (Fplacements=AValue) then exit;
  Fplacements:=AValue;
  MarkPropertyChanged(AIndex);
end;





{ --------------------------------------------------------------------
  TPlacementsListResponseplacements
  --------------------------------------------------------------------}




{ --------------------------------------------------------------------
  TPlatformType
  --------------------------------------------------------------------}


Procedure TPlatformType.Setid(AIndex : Integer; AValue : string); 

begin
  If (Fid=AValue) then exit;
  Fid:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TPlatformType.Setkind(AIndex : Integer; AValue : string); 

begin
  If (Fkind=AValue) then exit;
  Fkind:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TPlatformType.Setname(AIndex : Integer; AValue : string); 

begin
  If (Fname=AValue) then exit;
  Fname:=AValue;
  MarkPropertyChanged(AIndex);
end;





{ --------------------------------------------------------------------
  TPlatformTypesListResponse
  --------------------------------------------------------------------}


Procedure TPlatformTypesListResponse.Setkind(AIndex : Integer; AValue : string); 

begin
  If (Fkind=AValue) then exit;
  Fkind:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TPlatformTypesListResponse.SetplatformTypes(AIndex : Integer; AValue : TPlatformTypesListResponseplatformTypes); 

begin
  If (FplatformTypes=AValue) then exit;
  FplatformTypes:=AValue;
  MarkPropertyChanged(AIndex);
end;





{ --------------------------------------------------------------------
  TPlatformTypesListResponseplatformTypes
  --------------------------------------------------------------------}




{ --------------------------------------------------------------------
  TPopupWindowProperties
  --------------------------------------------------------------------}


Procedure TPopupWindowProperties.Setdimension(AIndex : Integer; AValue : TSize); 

begin
  If (Fdimension=AValue) then exit;
  Fdimension:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TPopupWindowProperties.Setoffset(AIndex : Integer; AValue : TOffsetPosition); 

begin
  If (Foffset=AValue) then exit;
  Foffset:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TPopupWindowProperties.SetpositionType(AIndex : Integer; AValue : string); 

begin
  If (FpositionType=AValue) then exit;
  FpositionType:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TPopupWindowProperties.SetshowAddressBar(AIndex : Integer; AValue : boolean); 

begin
  If (FshowAddressBar=AValue) then exit;
  FshowAddressBar:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TPopupWindowProperties.SetshowMenuBar(AIndex : Integer; AValue : boolean); 

begin
  If (FshowMenuBar=AValue) then exit;
  FshowMenuBar:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TPopupWindowProperties.SetshowScrollBar(AIndex : Integer; AValue : boolean); 

begin
  If (FshowScrollBar=AValue) then exit;
  FshowScrollBar:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TPopupWindowProperties.SetshowStatusBar(AIndex : Integer; AValue : boolean); 

begin
  If (FshowStatusBar=AValue) then exit;
  FshowStatusBar:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TPopupWindowProperties.SetshowToolBar(AIndex : Integer; AValue : boolean); 

begin
  If (FshowToolBar=AValue) then exit;
  FshowToolBar:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TPopupWindowProperties.Settitle(AIndex : Integer; AValue : string); 

begin
  If (Ftitle=AValue) then exit;
  Ftitle:=AValue;
  MarkPropertyChanged(AIndex);
end;





{ --------------------------------------------------------------------
  TPostalCode
  --------------------------------------------------------------------}


Procedure TPostalCode.Setcode(AIndex : Integer; AValue : string); 

begin
  If (Fcode=AValue) then exit;
  Fcode:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TPostalCode.SetcountryCode(AIndex : Integer; AValue : string); 

begin
  If (FcountryCode=AValue) then exit;
  FcountryCode:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TPostalCode.SetcountryDartId(AIndex : Integer; AValue : string); 

begin
  If (FcountryDartId=AValue) then exit;
  FcountryDartId:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TPostalCode.Setid(AIndex : Integer; AValue : string); 

begin
  If (Fid=AValue) then exit;
  Fid:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TPostalCode.Setkind(AIndex : Integer; AValue : string); 

begin
  If (Fkind=AValue) then exit;
  Fkind:=AValue;
  MarkPropertyChanged(AIndex);
end;





{ --------------------------------------------------------------------
  TPostalCodesListResponse
  --------------------------------------------------------------------}


Procedure TPostalCodesListResponse.Setkind(AIndex : Integer; AValue : string); 

begin
  If (Fkind=AValue) then exit;
  Fkind:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TPostalCodesListResponse.SetpostalCodes(AIndex : Integer; AValue : TPostalCodesListResponsepostalCodes); 

begin
  If (FpostalCodes=AValue) then exit;
  FpostalCodes:=AValue;
  MarkPropertyChanged(AIndex);
end;





{ --------------------------------------------------------------------
  TPostalCodesListResponsepostalCodes
  --------------------------------------------------------------------}




{ --------------------------------------------------------------------
  TPricing
  --------------------------------------------------------------------}


Procedure TPricing.SetcapCostType(AIndex : Integer; AValue : string); 

begin
  If (FcapCostType=AValue) then exit;
  FcapCostType:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TPricing.SetendDate(AIndex : Integer; AValue : TDate); 

begin
  If (FendDate=AValue) then exit;
  FendDate:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TPricing.Setflights(AIndex : Integer; AValue : TPricingflights); 

begin
  If (Fflights=AValue) then exit;
  Fflights:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TPricing.SetgroupType(AIndex : Integer; AValue : string); 

begin
  If (FgroupType=AValue) then exit;
  FgroupType:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TPricing.SetpricingType(AIndex : Integer; AValue : string); 

begin
  If (FpricingType=AValue) then exit;
  FpricingType:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TPricing.SetstartDate(AIndex : Integer; AValue : TDate); 

begin
  If (FstartDate=AValue) then exit;
  FstartDate:=AValue;
  MarkPropertyChanged(AIndex);
end;





{ --------------------------------------------------------------------
  TPricingflights
  --------------------------------------------------------------------}




{ --------------------------------------------------------------------
  TPricingSchedule
  --------------------------------------------------------------------}


Procedure TPricingSchedule.SetcapCostOption(AIndex : Integer; AValue : string); 

begin
  If (FcapCostOption=AValue) then exit;
  FcapCostOption:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TPricingSchedule.SetdisregardOverdelivery(AIndex : Integer; AValue : boolean); 

begin
  If (FdisregardOverdelivery=AValue) then exit;
  FdisregardOverdelivery:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TPricingSchedule.SetendDate(AIndex : Integer; AValue : TDate); 

begin
  If (FendDate=AValue) then exit;
  FendDate:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TPricingSchedule.Setflighted(AIndex : Integer; AValue : boolean); 

begin
  If (Fflighted=AValue) then exit;
  Fflighted:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TPricingSchedule.SetfloodlightActivityId(AIndex : Integer; AValue : string); 

begin
  If (FfloodlightActivityId=AValue) then exit;
  FfloodlightActivityId:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TPricingSchedule.SetpricingPeriods(AIndex : Integer; AValue : TPricingSchedulepricingPeriods); 

begin
  If (FpricingPeriods=AValue) then exit;
  FpricingPeriods:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TPricingSchedule.SetpricingType(AIndex : Integer; AValue : string); 

begin
  If (FpricingType=AValue) then exit;
  FpricingType:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TPricingSchedule.SetstartDate(AIndex : Integer; AValue : TDate); 

begin
  If (FstartDate=AValue) then exit;
  FstartDate:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TPricingSchedule.SettestingStartDate(AIndex : Integer; AValue : TDate); 

begin
  If (FtestingStartDate=AValue) then exit;
  FtestingStartDate:=AValue;
  MarkPropertyChanged(AIndex);
end;





{ --------------------------------------------------------------------
  TPricingSchedulepricingPeriods
  --------------------------------------------------------------------}




{ --------------------------------------------------------------------
  TPricingSchedulePricingPeriod
  --------------------------------------------------------------------}


Procedure TPricingSchedulePricingPeriod.SetendDate(AIndex : Integer; AValue : TDate); 

begin
  If (FendDate=AValue) then exit;
  FendDate:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TPricingSchedulePricingPeriod.SetpricingComment(AIndex : Integer; AValue : string); 

begin
  If (FpricingComment=AValue) then exit;
  FpricingComment:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TPricingSchedulePricingPeriod.SetrateOrCostNanos(AIndex : Integer; AValue : string); 

begin
  If (FrateOrCostNanos=AValue) then exit;
  FrateOrCostNanos:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TPricingSchedulePricingPeriod.SetstartDate(AIndex : Integer; AValue : TDate); 

begin
  If (FstartDate=AValue) then exit;
  FstartDate:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TPricingSchedulePricingPeriod.Setunits(AIndex : Integer; AValue : string); 

begin
  If (Funits=AValue) then exit;
  Funits:=AValue;
  MarkPropertyChanged(AIndex);
end;





{ --------------------------------------------------------------------
  TProgrammaticSetting
  --------------------------------------------------------------------}


Procedure TProgrammaticSetting.SetadxDealIds(AIndex : Integer; AValue : TProgrammaticSettingadxDealIds); 

begin
  If (FadxDealIds=AValue) then exit;
  FadxDealIds:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TProgrammaticSetting.SetinsertionOrderId(AIndex : Integer; AValue : string); 

begin
  If (FinsertionOrderId=AValue) then exit;
  FinsertionOrderId:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TProgrammaticSetting.SetinsertionOrderIdStatus(AIndex : Integer; AValue : boolean); 

begin
  If (FinsertionOrderIdStatus=AValue) then exit;
  FinsertionOrderIdStatus:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TProgrammaticSetting.SetmediaCostNanos(AIndex : Integer; AValue : string); 

begin
  If (FmediaCostNanos=AValue) then exit;
  FmediaCostNanos:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TProgrammaticSetting.Setprogrammatic(AIndex : Integer; AValue : boolean); 

begin
  If (Fprogrammatic=AValue) then exit;
  Fprogrammatic:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TProgrammaticSetting.SettraffickerEmails(AIndex : Integer; AValue : TProgrammaticSettingtraffickerEmails); 

begin
  If (FtraffickerEmails=AValue) then exit;
  FtraffickerEmails:=AValue;
  MarkPropertyChanged(AIndex);
end;





{ --------------------------------------------------------------------
  TProgrammaticSettingadxDealIds
  --------------------------------------------------------------------}




{ --------------------------------------------------------------------
  TProgrammaticSettingtraffickerEmails
  --------------------------------------------------------------------}




{ --------------------------------------------------------------------
  TProject
  --------------------------------------------------------------------}


Procedure TProject.SetaccountId(AIndex : Integer; AValue : string); 

begin
  If (FaccountId=AValue) then exit;
  FaccountId:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TProject.SetadvertiserId(AIndex : Integer; AValue : string); 

begin
  If (FadvertiserId=AValue) then exit;
  FadvertiserId:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TProject.SetaudienceAgeGroup(AIndex : Integer; AValue : string); 

begin
  If (FaudienceAgeGroup=AValue) then exit;
  FaudienceAgeGroup:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TProject.SetaudienceGender(AIndex : Integer; AValue : string); 

begin
  If (FaudienceGender=AValue) then exit;
  FaudienceGender:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TProject.Setbudget(AIndex : Integer; AValue : string); 

begin
  If (Fbudget=AValue) then exit;
  Fbudget:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TProject.SetclientBillingCode(AIndex : Integer; AValue : string); 

begin
  If (FclientBillingCode=AValue) then exit;
  FclientBillingCode:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TProject.SetclientName(AIndex : Integer; AValue : string); 

begin
  If (FclientName=AValue) then exit;
  FclientName:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TProject.SetendDate(AIndex : Integer; AValue : TDate); 

begin
  If (FendDate=AValue) then exit;
  FendDate:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TProject.Setid(AIndex : Integer; AValue : string); 

begin
  If (Fid=AValue) then exit;
  Fid:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TProject.Setkind(AIndex : Integer; AValue : string); 

begin
  If (Fkind=AValue) then exit;
  Fkind:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TProject.SetlastModifiedInfo(AIndex : Integer; AValue : TLastModifiedInfo); 

begin
  If (FlastModifiedInfo=AValue) then exit;
  FlastModifiedInfo:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TProject.Setname(AIndex : Integer; AValue : string); 

begin
  If (Fname=AValue) then exit;
  Fname:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TProject.Setoverview(AIndex : Integer; AValue : string); 

begin
  If (Foverview=AValue) then exit;
  Foverview:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TProject.SetstartDate(AIndex : Integer; AValue : TDate); 

begin
  If (FstartDate=AValue) then exit;
  FstartDate:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TProject.SetsubaccountId(AIndex : Integer; AValue : string); 

begin
  If (FsubaccountId=AValue) then exit;
  FsubaccountId:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TProject.SettargetClicks(AIndex : Integer; AValue : string); 

begin
  If (FtargetClicks=AValue) then exit;
  FtargetClicks:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TProject.SettargetConversions(AIndex : Integer; AValue : string); 

begin
  If (FtargetConversions=AValue) then exit;
  FtargetConversions:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TProject.SettargetCpaNanos(AIndex : Integer; AValue : string); 

begin
  If (FtargetCpaNanos=AValue) then exit;
  FtargetCpaNanos:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TProject.SettargetCpcNanos(AIndex : Integer; AValue : string); 

begin
  If (FtargetCpcNanos=AValue) then exit;
  FtargetCpcNanos:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TProject.SettargetCpmNanos(AIndex : Integer; AValue : string); 

begin
  If (FtargetCpmNanos=AValue) then exit;
  FtargetCpmNanos:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TProject.SettargetImpressions(AIndex : Integer; AValue : string); 

begin
  If (FtargetImpressions=AValue) then exit;
  FtargetImpressions:=AValue;
  MarkPropertyChanged(AIndex);
end;





{ --------------------------------------------------------------------
  TProjectsListResponse
  --------------------------------------------------------------------}


Procedure TProjectsListResponse.Setkind(AIndex : Integer; AValue : string); 

begin
  If (Fkind=AValue) then exit;
  Fkind:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TProjectsListResponse.SetnextPageToken(AIndex : Integer; AValue : string); 

begin
  If (FnextPageToken=AValue) then exit;
  FnextPageToken:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TProjectsListResponse.Setprojects(AIndex : Integer; AValue : TProjectsListResponseprojects); 

begin
  If (Fprojects=AValue) then exit;
  Fprojects:=AValue;
  MarkPropertyChanged(AIndex);
end;





{ --------------------------------------------------------------------
  TProjectsListResponseprojects
  --------------------------------------------------------------------}




{ --------------------------------------------------------------------
  TReachReportCompatibleFields
  --------------------------------------------------------------------}


Procedure TReachReportCompatibleFields.SetdimensionFilters(AIndex : Integer; AValue : TReachReportCompatibleFieldsdimensionFilters); 

begin
  If (FdimensionFilters=AValue) then exit;
  FdimensionFilters:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TReachReportCompatibleFields.Setdimensions(AIndex : Integer; AValue : TReachReportCompatibleFieldsdimensions); 

begin
  If (Fdimensions=AValue) then exit;
  Fdimensions:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TReachReportCompatibleFields.Setkind(AIndex : Integer; AValue : string); 

begin
  If (Fkind=AValue) then exit;
  Fkind:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TReachReportCompatibleFields.Setmetrics(AIndex : Integer; AValue : TReachReportCompatibleFieldsmetrics); 

begin
  If (Fmetrics=AValue) then exit;
  Fmetrics:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TReachReportCompatibleFields.SetpivotedActivityMetrics(AIndex : Integer; AValue : TReachReportCompatibleFieldspivotedActivityMetrics); 

begin
  If (FpivotedActivityMetrics=AValue) then exit;
  FpivotedActivityMetrics:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TReachReportCompatibleFields.SetreachByFrequencyMetrics(AIndex : Integer; AValue : TReachReportCompatibleFieldsreachByFrequencyMetrics); 

begin
  If (FreachByFrequencyMetrics=AValue) then exit;
  FreachByFrequencyMetrics:=AValue;
  MarkPropertyChanged(AIndex);
end;





{ --------------------------------------------------------------------
  TReachReportCompatibleFieldsdimensionFilters
  --------------------------------------------------------------------}




{ --------------------------------------------------------------------
  TReachReportCompatibleFieldsdimensions
  --------------------------------------------------------------------}




{ --------------------------------------------------------------------
  TReachReportCompatibleFieldsmetrics
  --------------------------------------------------------------------}




{ --------------------------------------------------------------------
  TReachReportCompatibleFieldspivotedActivityMetrics
  --------------------------------------------------------------------}




{ --------------------------------------------------------------------
  TReachReportCompatibleFieldsreachByFrequencyMetrics
  --------------------------------------------------------------------}




{ --------------------------------------------------------------------
  TRecipient
  --------------------------------------------------------------------}


Procedure TRecipient.SetdeliveryType(AIndex : Integer; AValue : string); 

begin
  If (FdeliveryType=AValue) then exit;
  FdeliveryType:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TRecipient.Setemail(AIndex : Integer; AValue : string); 

begin
  If (Femail=AValue) then exit;
  Femail:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TRecipient.Setkind(AIndex : Integer; AValue : string); 

begin
  If (Fkind=AValue) then exit;
  Fkind:=AValue;
  MarkPropertyChanged(AIndex);
end;





{ --------------------------------------------------------------------
  TRegion
  --------------------------------------------------------------------}


Procedure TRegion.SetcountryCode(AIndex : Integer; AValue : string); 

begin
  If (FcountryCode=AValue) then exit;
  FcountryCode:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TRegion.SetcountryDartId(AIndex : Integer; AValue : string); 

begin
  If (FcountryDartId=AValue) then exit;
  FcountryDartId:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TRegion.SetdartId(AIndex : Integer; AValue : string); 

begin
  If (FdartId=AValue) then exit;
  FdartId:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TRegion.Setkind(AIndex : Integer; AValue : string); 

begin
  If (Fkind=AValue) then exit;
  Fkind:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TRegion.Setname(AIndex : Integer; AValue : string); 

begin
  If (Fname=AValue) then exit;
  Fname:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TRegion.SetregionCode(AIndex : Integer; AValue : string); 

begin
  If (FregionCode=AValue) then exit;
  FregionCode:=AValue;
  MarkPropertyChanged(AIndex);
end;





{ --------------------------------------------------------------------
  TRegionsListResponse
  --------------------------------------------------------------------}


Procedure TRegionsListResponse.Setkind(AIndex : Integer; AValue : string); 

begin
  If (Fkind=AValue) then exit;
  Fkind:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TRegionsListResponse.Setregions(AIndex : Integer; AValue : TRegionsListResponseregions); 

begin
  If (Fregions=AValue) then exit;
  Fregions:=AValue;
  MarkPropertyChanged(AIndex);
end;





{ --------------------------------------------------------------------
  TRegionsListResponseregions
  --------------------------------------------------------------------}




{ --------------------------------------------------------------------
  TRemarketingList
  --------------------------------------------------------------------}


Procedure TRemarketingList.SetaccountId(AIndex : Integer; AValue : string); 

begin
  If (FaccountId=AValue) then exit;
  FaccountId:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TRemarketingList.Setactive(AIndex : Integer; AValue : boolean); 

begin
  If (Factive=AValue) then exit;
  Factive:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TRemarketingList.SetadvertiserId(AIndex : Integer; AValue : string); 

begin
  If (FadvertiserId=AValue) then exit;
  FadvertiserId:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TRemarketingList.SetadvertiserIdDimensionValue(AIndex : Integer; AValue : TDimensionValue); 

begin
  If (FadvertiserIdDimensionValue=AValue) then exit;
  FadvertiserIdDimensionValue:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TRemarketingList.Setdescription(AIndex : Integer; AValue : string); 

begin
  If (Fdescription=AValue) then exit;
  Fdescription:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TRemarketingList.Setid(AIndex : Integer; AValue : string); 

begin
  If (Fid=AValue) then exit;
  Fid:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TRemarketingList.Setkind(AIndex : Integer; AValue : string); 

begin
  If (Fkind=AValue) then exit;
  Fkind:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TRemarketingList.SetlifeSpan(AIndex : Integer; AValue : string); 

begin
  If (FlifeSpan=AValue) then exit;
  FlifeSpan:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TRemarketingList.SetlistPopulationRule(AIndex : Integer; AValue : TListPopulationRule); 

begin
  If (FlistPopulationRule=AValue) then exit;
  FlistPopulationRule:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TRemarketingList.SetlistSize(AIndex : Integer; AValue : string); 

begin
  If (FlistSize=AValue) then exit;
  FlistSize:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TRemarketingList.SetlistSource(AIndex : Integer; AValue : string); 

begin
  If (FlistSource=AValue) then exit;
  FlistSource:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TRemarketingList.Setname(AIndex : Integer; AValue : string); 

begin
  If (Fname=AValue) then exit;
  Fname:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TRemarketingList.SetsubaccountId(AIndex : Integer; AValue : string); 

begin
  If (FsubaccountId=AValue) then exit;
  FsubaccountId:=AValue;
  MarkPropertyChanged(AIndex);
end;





{ --------------------------------------------------------------------
  TRemarketingListShare
  --------------------------------------------------------------------}


Procedure TRemarketingListShare.Setkind(AIndex : Integer; AValue : string); 

begin
  If (Fkind=AValue) then exit;
  Fkind:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TRemarketingListShare.SetremarketingListId(AIndex : Integer; AValue : string); 

begin
  If (FremarketingListId=AValue) then exit;
  FremarketingListId:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TRemarketingListShare.SetsharedAccountIds(AIndex : Integer; AValue : TRemarketingListSharesharedAccountIds); 

begin
  If (FsharedAccountIds=AValue) then exit;
  FsharedAccountIds:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TRemarketingListShare.SetsharedAdvertiserIds(AIndex : Integer; AValue : TRemarketingListSharesharedAdvertiserIds); 

begin
  If (FsharedAdvertiserIds=AValue) then exit;
  FsharedAdvertiserIds:=AValue;
  MarkPropertyChanged(AIndex);
end;





{ --------------------------------------------------------------------
  TRemarketingListSharesharedAccountIds
  --------------------------------------------------------------------}




{ --------------------------------------------------------------------
  TRemarketingListSharesharedAdvertiserIds
  --------------------------------------------------------------------}




{ --------------------------------------------------------------------
  TRemarketingListsListResponse
  --------------------------------------------------------------------}


Procedure TRemarketingListsListResponse.Setkind(AIndex : Integer; AValue : string); 

begin
  If (Fkind=AValue) then exit;
  Fkind:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TRemarketingListsListResponse.SetnextPageToken(AIndex : Integer; AValue : string); 

begin
  If (FnextPageToken=AValue) then exit;
  FnextPageToken:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TRemarketingListsListResponse.SetremarketingLists(AIndex : Integer; AValue : TRemarketingListsListResponseremarketingLists); 

begin
  If (FremarketingLists=AValue) then exit;
  FremarketingLists:=AValue;
  MarkPropertyChanged(AIndex);
end;





{ --------------------------------------------------------------------
  TRemarketingListsListResponseremarketingLists
  --------------------------------------------------------------------}




{ --------------------------------------------------------------------
  TReport
  --------------------------------------------------------------------}


Procedure TReport.SetaccountId(AIndex : Integer; AValue : string); 

begin
  If (FaccountId=AValue) then exit;
  FaccountId:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TReport.Setcriteria(AIndex : Integer; AValue : TReportcriteria); 

begin
  If (Fcriteria=AValue) then exit;
  Fcriteria:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TReport.SetcrossDimensionReachCriteria(AIndex : Integer; AValue : TReportcrossDimensionReachCriteria); 

begin
  If (FcrossDimensionReachCriteria=AValue) then exit;
  FcrossDimensionReachCriteria:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TReport.Setdelivery(AIndex : Integer; AValue : TReportdelivery); 

begin
  If (Fdelivery=AValue) then exit;
  Fdelivery:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TReport.Setetag(AIndex : Integer; AValue : string); 

begin
  If (Fetag=AValue) then exit;
  Fetag:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TReport.SetfileName(AIndex : Integer; AValue : string); 

begin
  If (FfileName=AValue) then exit;
  FfileName:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TReport.SetfloodlightCriteria(AIndex : Integer; AValue : TReportfloodlightCriteria); 

begin
  If (FfloodlightCriteria=AValue) then exit;
  FfloodlightCriteria:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TReport.Setformat(AIndex : Integer; AValue : string); 

begin
  If (Fformat=AValue) then exit;
  Fformat:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TReport.Setid(AIndex : Integer; AValue : string); 

begin
  If (Fid=AValue) then exit;
  Fid:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TReport.Setkind(AIndex : Integer; AValue : string); 

begin
  If (Fkind=AValue) then exit;
  Fkind:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TReport.SetlastModifiedTime(AIndex : Integer; AValue : string); 

begin
  If (FlastModifiedTime=AValue) then exit;
  FlastModifiedTime:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TReport.Setname(AIndex : Integer; AValue : string); 

begin
  If (Fname=AValue) then exit;
  Fname:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TReport.SetownerProfileId(AIndex : Integer; AValue : string); 

begin
  If (FownerProfileId=AValue) then exit;
  FownerProfileId:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TReport.SetpathToConversionCriteria(AIndex : Integer; AValue : TReportpathToConversionCriteria); 

begin
  If (FpathToConversionCriteria=AValue) then exit;
  FpathToConversionCriteria:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TReport.SetreachCriteria(AIndex : Integer; AValue : TReportreachCriteria); 

begin
  If (FreachCriteria=AValue) then exit;
  FreachCriteria:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TReport.Setschedule(AIndex : Integer; AValue : TReportschedule); 

begin
  If (Fschedule=AValue) then exit;
  Fschedule:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TReport.SetsubAccountId(AIndex : Integer; AValue : string); 

begin
  If (FsubAccountId=AValue) then exit;
  FsubAccountId:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TReport.Set_type(AIndex : Integer; AValue : string); 

begin
  If (F_type=AValue) then exit;
  F_type:=AValue;
  MarkPropertyChanged(AIndex);
end;



Class Function TReport.ExportPropertyName(Const AName : String) :String;

begin
  Case AName of
  '_type' : Result:='type';
  else
    Result:=Inherited ExportPropertyName(AName);
  end;
end;




{ --------------------------------------------------------------------
  TReportcriteria
  --------------------------------------------------------------------}


Procedure TReportcriteria.Setactivities(AIndex : Integer; AValue : TActivities); 

begin
  If (Factivities=AValue) then exit;
  Factivities:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TReportcriteria.SetcustomRichMediaEvents(AIndex : Integer; AValue : TCustomRichMediaEvents); 

begin
  If (FcustomRichMediaEvents=AValue) then exit;
  FcustomRichMediaEvents:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TReportcriteria.SetdateRange(AIndex : Integer; AValue : TDateRange); 

begin
  If (FdateRange=AValue) then exit;
  FdateRange:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TReportcriteria.SetdimensionFilters(AIndex : Integer; AValue : TReportcriteriadimensionFilters); 

begin
  If (FdimensionFilters=AValue) then exit;
  FdimensionFilters:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TReportcriteria.Setdimensions(AIndex : Integer; AValue : TReportcriteriadimensions); 

begin
  If (Fdimensions=AValue) then exit;
  Fdimensions:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TReportcriteria.SetmetricNames(AIndex : Integer; AValue : TReportcriteriametricNames); 

begin
  If (FmetricNames=AValue) then exit;
  FmetricNames:=AValue;
  MarkPropertyChanged(AIndex);
end;





{ --------------------------------------------------------------------
  TReportcriteriadimensionFilters
  --------------------------------------------------------------------}




{ --------------------------------------------------------------------
  TReportcriteriadimensions
  --------------------------------------------------------------------}




{ --------------------------------------------------------------------
  TReportcriteriametricNames
  --------------------------------------------------------------------}




{ --------------------------------------------------------------------
  TReportcrossDimensionReachCriteria
  --------------------------------------------------------------------}


Procedure TReportcrossDimensionReachCriteria.Setbreakdown(AIndex : Integer; AValue : TReportcrossDimensionReachCriteriabreakdown); 

begin
  If (Fbreakdown=AValue) then exit;
  Fbreakdown:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TReportcrossDimensionReachCriteria.SetdateRange(AIndex : Integer; AValue : TDateRange); 

begin
  If (FdateRange=AValue) then exit;
  FdateRange:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TReportcrossDimensionReachCriteria.Setdimension(AIndex : Integer; AValue : string); 

begin
  If (Fdimension=AValue) then exit;
  Fdimension:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TReportcrossDimensionReachCriteria.SetdimensionFilters(AIndex : Integer; AValue : TReportcrossDimensionReachCriteriadimensionFilters); 

begin
  If (FdimensionFilters=AValue) then exit;
  FdimensionFilters:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TReportcrossDimensionReachCriteria.SetmetricNames(AIndex : Integer; AValue : TReportcrossDimensionReachCriteriametricNames); 

begin
  If (FmetricNames=AValue) then exit;
  FmetricNames:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TReportcrossDimensionReachCriteria.SetoverlapMetricNames(AIndex : Integer; AValue : TReportcrossDimensionReachCriteriaoverlapMetricNames); 

begin
  If (FoverlapMetricNames=AValue) then exit;
  FoverlapMetricNames:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TReportcrossDimensionReachCriteria.Setpivoted(AIndex : Integer; AValue : boolean); 

begin
  If (Fpivoted=AValue) then exit;
  Fpivoted:=AValue;
  MarkPropertyChanged(AIndex);
end;





{ --------------------------------------------------------------------
  TReportcrossDimensionReachCriteriabreakdown
  --------------------------------------------------------------------}




{ --------------------------------------------------------------------
  TReportcrossDimensionReachCriteriadimensionFilters
  --------------------------------------------------------------------}




{ --------------------------------------------------------------------
  TReportcrossDimensionReachCriteriametricNames
  --------------------------------------------------------------------}




{ --------------------------------------------------------------------
  TReportcrossDimensionReachCriteriaoverlapMetricNames
  --------------------------------------------------------------------}




{ --------------------------------------------------------------------
  TReportdelivery
  --------------------------------------------------------------------}


Procedure TReportdelivery.SetemailOwner(AIndex : Integer; AValue : boolean); 

begin
  If (FemailOwner=AValue) then exit;
  FemailOwner:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TReportdelivery.SetemailOwnerDeliveryType(AIndex : Integer; AValue : string); 

begin
  If (FemailOwnerDeliveryType=AValue) then exit;
  FemailOwnerDeliveryType:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TReportdelivery.Setmessage(AIndex : Integer; AValue : string); 

begin
  If (Fmessage=AValue) then exit;
  Fmessage:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TReportdelivery.Setrecipients(AIndex : Integer; AValue : TReportdeliveryrecipients); 

begin
  If (Frecipients=AValue) then exit;
  Frecipients:=AValue;
  MarkPropertyChanged(AIndex);
end;





{ --------------------------------------------------------------------
  TReportdeliveryrecipients
  --------------------------------------------------------------------}




{ --------------------------------------------------------------------
  TReportfloodlightCriteria
  --------------------------------------------------------------------}


Procedure TReportfloodlightCriteria.SetcustomRichMediaEvents(AIndex : Integer; AValue : TReportfloodlightCriteriacustomRichMediaEvents); 

begin
  If (FcustomRichMediaEvents=AValue) then exit;
  FcustomRichMediaEvents:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TReportfloodlightCriteria.SetdateRange(AIndex : Integer; AValue : TDateRange); 

begin
  If (FdateRange=AValue) then exit;
  FdateRange:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TReportfloodlightCriteria.SetdimensionFilters(AIndex : Integer; AValue : TReportfloodlightCriteriadimensionFilters); 

begin
  If (FdimensionFilters=AValue) then exit;
  FdimensionFilters:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TReportfloodlightCriteria.Setdimensions(AIndex : Integer; AValue : TReportfloodlightCriteriadimensions); 

begin
  If (Fdimensions=AValue) then exit;
  Fdimensions:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TReportfloodlightCriteria.SetfloodlightConfigId(AIndex : Integer; AValue : TDimensionValue); 

begin
  If (FfloodlightConfigId=AValue) then exit;
  FfloodlightConfigId:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TReportfloodlightCriteria.SetmetricNames(AIndex : Integer; AValue : TReportfloodlightCriteriametricNames); 

begin
  If (FmetricNames=AValue) then exit;
  FmetricNames:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TReportfloodlightCriteria.SetreportProperties(AIndex : Integer; AValue : TReportfloodlightCriteriareportProperties); 

begin
  If (FreportProperties=AValue) then exit;
  FreportProperties:=AValue;
  MarkPropertyChanged(AIndex);
end;





{ --------------------------------------------------------------------
  TReportfloodlightCriteriacustomRichMediaEvents
  --------------------------------------------------------------------}




{ --------------------------------------------------------------------
  TReportfloodlightCriteriadimensionFilters
  --------------------------------------------------------------------}




{ --------------------------------------------------------------------
  TReportfloodlightCriteriadimensions
  --------------------------------------------------------------------}




{ --------------------------------------------------------------------
  TReportfloodlightCriteriametricNames
  --------------------------------------------------------------------}




{ --------------------------------------------------------------------
  TReportfloodlightCriteriareportProperties
  --------------------------------------------------------------------}


Procedure TReportfloodlightCriteriareportProperties.SetincludeAttributedIPConversions(AIndex : Integer; AValue : boolean); 

begin
  If (FincludeAttributedIPConversions=AValue) then exit;
  FincludeAttributedIPConversions:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TReportfloodlightCriteriareportProperties.SetincludeUnattributedCookieConversions(AIndex : Integer; AValue : boolean); 

begin
  If (FincludeUnattributedCookieConversions=AValue) then exit;
  FincludeUnattributedCookieConversions:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TReportfloodlightCriteriareportProperties.SetincludeUnattributedIPConversions(AIndex : Integer; AValue : boolean); 

begin
  If (FincludeUnattributedIPConversions=AValue) then exit;
  FincludeUnattributedIPConversions:=AValue;
  MarkPropertyChanged(AIndex);
end;





{ --------------------------------------------------------------------
  TReportpathToConversionCriteria
  --------------------------------------------------------------------}


Procedure TReportpathToConversionCriteria.SetactivityFilters(AIndex : Integer; AValue : TReportpathToConversionCriteriaactivityFilters); 

begin
  If (FactivityFilters=AValue) then exit;
  FactivityFilters:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TReportpathToConversionCriteria.SetconversionDimensions(AIndex : Integer; AValue : TReportpathToConversionCriteriaconversionDimensions); 

begin
  If (FconversionDimensions=AValue) then exit;
  FconversionDimensions:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TReportpathToConversionCriteria.SetcustomFloodlightVariables(AIndex : Integer; AValue : TReportpathToConversionCriteriacustomFloodlightVariables); 

begin
  If (FcustomFloodlightVariables=AValue) then exit;
  FcustomFloodlightVariables:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TReportpathToConversionCriteria.SetcustomRichMediaEvents(AIndex : Integer; AValue : TReportpathToConversionCriteriacustomRichMediaEvents); 

begin
  If (FcustomRichMediaEvents=AValue) then exit;
  FcustomRichMediaEvents:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TReportpathToConversionCriteria.SetdateRange(AIndex : Integer; AValue : TDateRange); 

begin
  If (FdateRange=AValue) then exit;
  FdateRange:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TReportpathToConversionCriteria.SetfloodlightConfigId(AIndex : Integer; AValue : TDimensionValue); 

begin
  If (FfloodlightConfigId=AValue) then exit;
  FfloodlightConfigId:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TReportpathToConversionCriteria.SetmetricNames(AIndex : Integer; AValue : TReportpathToConversionCriteriametricNames); 

begin
  If (FmetricNames=AValue) then exit;
  FmetricNames:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TReportpathToConversionCriteria.SetperInteractionDimensions(AIndex : Integer; AValue : TReportpathToConversionCriteriaperInteractionDimensions); 

begin
  If (FperInteractionDimensions=AValue) then exit;
  FperInteractionDimensions:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TReportpathToConversionCriteria.SetreportProperties(AIndex : Integer; AValue : TReportpathToConversionCriteriareportProperties); 

begin
  If (FreportProperties=AValue) then exit;
  FreportProperties:=AValue;
  MarkPropertyChanged(AIndex);
end;





{ --------------------------------------------------------------------
  TReportpathToConversionCriteriaactivityFilters
  --------------------------------------------------------------------}




{ --------------------------------------------------------------------
  TReportpathToConversionCriteriaconversionDimensions
  --------------------------------------------------------------------}




{ --------------------------------------------------------------------
  TReportpathToConversionCriteriacustomFloodlightVariables
  --------------------------------------------------------------------}




{ --------------------------------------------------------------------
  TReportpathToConversionCriteriacustomRichMediaEvents
  --------------------------------------------------------------------}




{ --------------------------------------------------------------------
  TReportpathToConversionCriteriametricNames
  --------------------------------------------------------------------}




{ --------------------------------------------------------------------
  TReportpathToConversionCriteriaperInteractionDimensions
  --------------------------------------------------------------------}




{ --------------------------------------------------------------------
  TReportpathToConversionCriteriareportProperties
  --------------------------------------------------------------------}


Procedure TReportpathToConversionCriteriareportProperties.SetclicksLookbackWindow(AIndex : Integer; AValue : integer); 

begin
  If (FclicksLookbackWindow=AValue) then exit;
  FclicksLookbackWindow:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TReportpathToConversionCriteriareportProperties.SetimpressionsLookbackWindow(AIndex : Integer; AValue : integer); 

begin
  If (FimpressionsLookbackWindow=AValue) then exit;
  FimpressionsLookbackWindow:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TReportpathToConversionCriteriareportProperties.SetincludeAttributedIPConversions(AIndex : Integer; AValue : boolean); 

begin
  If (FincludeAttributedIPConversions=AValue) then exit;
  FincludeAttributedIPConversions:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TReportpathToConversionCriteriareportProperties.SetincludeUnattributedCookieConversions(AIndex : Integer; AValue : boolean); 

begin
  If (FincludeUnattributedCookieConversions=AValue) then exit;
  FincludeUnattributedCookieConversions:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TReportpathToConversionCriteriareportProperties.SetincludeUnattributedIPConversions(AIndex : Integer; AValue : boolean); 

begin
  If (FincludeUnattributedIPConversions=AValue) then exit;
  FincludeUnattributedIPConversions:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TReportpathToConversionCriteriareportProperties.SetmaximumClickInteractions(AIndex : Integer; AValue : integer); 

begin
  If (FmaximumClickInteractions=AValue) then exit;
  FmaximumClickInteractions:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TReportpathToConversionCriteriareportProperties.SetmaximumImpressionInteractions(AIndex : Integer; AValue : integer); 

begin
  If (FmaximumImpressionInteractions=AValue) then exit;
  FmaximumImpressionInteractions:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TReportpathToConversionCriteriareportProperties.SetmaximumInteractionGap(AIndex : Integer; AValue : integer); 

begin
  If (FmaximumInteractionGap=AValue) then exit;
  FmaximumInteractionGap:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TReportpathToConversionCriteriareportProperties.SetpivotOnInteractionPath(AIndex : Integer; AValue : boolean); 

begin
  If (FpivotOnInteractionPath=AValue) then exit;
  FpivotOnInteractionPath:=AValue;
  MarkPropertyChanged(AIndex);
end;





{ --------------------------------------------------------------------
  TReportreachCriteria
  --------------------------------------------------------------------}


Procedure TReportreachCriteria.Setactivities(AIndex : Integer; AValue : TActivities); 

begin
  If (Factivities=AValue) then exit;
  Factivities:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TReportreachCriteria.SetcustomRichMediaEvents(AIndex : Integer; AValue : TCustomRichMediaEvents); 

begin
  If (FcustomRichMediaEvents=AValue) then exit;
  FcustomRichMediaEvents:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TReportreachCriteria.SetdateRange(AIndex : Integer; AValue : TDateRange); 

begin
  If (FdateRange=AValue) then exit;
  FdateRange:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TReportreachCriteria.SetdimensionFilters(AIndex : Integer; AValue : TReportreachCriteriadimensionFilters); 

begin
  If (FdimensionFilters=AValue) then exit;
  FdimensionFilters:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TReportreachCriteria.Setdimensions(AIndex : Integer; AValue : TReportreachCriteriadimensions); 

begin
  If (Fdimensions=AValue) then exit;
  Fdimensions:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TReportreachCriteria.SetenableAllDimensionCombinations(AIndex : Integer; AValue : boolean); 

begin
  If (FenableAllDimensionCombinations=AValue) then exit;
  FenableAllDimensionCombinations:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TReportreachCriteria.SetmetricNames(AIndex : Integer; AValue : TReportreachCriteriametricNames); 

begin
  If (FmetricNames=AValue) then exit;
  FmetricNames:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TReportreachCriteria.SetreachByFrequencyMetricNames(AIndex : Integer; AValue : TReportreachCriteriareachByFrequencyMetricNames); 

begin
  If (FreachByFrequencyMetricNames=AValue) then exit;
  FreachByFrequencyMetricNames:=AValue;
  MarkPropertyChanged(AIndex);
end;





{ --------------------------------------------------------------------
  TReportreachCriteriadimensionFilters
  --------------------------------------------------------------------}




{ --------------------------------------------------------------------
  TReportreachCriteriadimensions
  --------------------------------------------------------------------}




{ --------------------------------------------------------------------
  TReportreachCriteriametricNames
  --------------------------------------------------------------------}




{ --------------------------------------------------------------------
  TReportreachCriteriareachByFrequencyMetricNames
  --------------------------------------------------------------------}




{ --------------------------------------------------------------------
  TReportschedule
  --------------------------------------------------------------------}


Procedure TReportschedule.Setactive(AIndex : Integer; AValue : boolean); 

begin
  If (Factive=AValue) then exit;
  Factive:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TReportschedule.Setevery(AIndex : Integer; AValue : integer); 

begin
  If (Fevery=AValue) then exit;
  Fevery:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TReportschedule.SetexpirationDate(AIndex : Integer; AValue : TDate); 

begin
  If (FexpirationDate=AValue) then exit;
  FexpirationDate:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TReportschedule.Setrepeats(AIndex : Integer; AValue : string); 

begin
  If (Frepeats=AValue) then exit;
  Frepeats:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TReportschedule.SetrepeatsOnWeekDays(AIndex : Integer; AValue : TReportschedulerepeatsOnWeekDays); 

begin
  If (FrepeatsOnWeekDays=AValue) then exit;
  FrepeatsOnWeekDays:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TReportschedule.SetrunsOnDayOfMonth(AIndex : Integer; AValue : string); 

begin
  If (FrunsOnDayOfMonth=AValue) then exit;
  FrunsOnDayOfMonth:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TReportschedule.SetstartDate(AIndex : Integer; AValue : TDate); 

begin
  If (FstartDate=AValue) then exit;
  FstartDate:=AValue;
  MarkPropertyChanged(AIndex);
end;





{ --------------------------------------------------------------------
  TReportschedulerepeatsOnWeekDays
  --------------------------------------------------------------------}




{ --------------------------------------------------------------------
  TReportCompatibleFields
  --------------------------------------------------------------------}


Procedure TReportCompatibleFields.SetdimensionFilters(AIndex : Integer; AValue : TReportCompatibleFieldsdimensionFilters); 

begin
  If (FdimensionFilters=AValue) then exit;
  FdimensionFilters:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TReportCompatibleFields.Setdimensions(AIndex : Integer; AValue : TReportCompatibleFieldsdimensions); 

begin
  If (Fdimensions=AValue) then exit;
  Fdimensions:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TReportCompatibleFields.Setkind(AIndex : Integer; AValue : string); 

begin
  If (Fkind=AValue) then exit;
  Fkind:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TReportCompatibleFields.Setmetrics(AIndex : Integer; AValue : TReportCompatibleFieldsmetrics); 

begin
  If (Fmetrics=AValue) then exit;
  Fmetrics:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TReportCompatibleFields.SetpivotedActivityMetrics(AIndex : Integer; AValue : TReportCompatibleFieldspivotedActivityMetrics); 

begin
  If (FpivotedActivityMetrics=AValue) then exit;
  FpivotedActivityMetrics:=AValue;
  MarkPropertyChanged(AIndex);
end;





{ --------------------------------------------------------------------
  TReportCompatibleFieldsdimensionFilters
  --------------------------------------------------------------------}




{ --------------------------------------------------------------------
  TReportCompatibleFieldsdimensions
  --------------------------------------------------------------------}




{ --------------------------------------------------------------------
  TReportCompatibleFieldsmetrics
  --------------------------------------------------------------------}




{ --------------------------------------------------------------------
  TReportCompatibleFieldspivotedActivityMetrics
  --------------------------------------------------------------------}




{ --------------------------------------------------------------------
  TReportList
  --------------------------------------------------------------------}


Procedure TReportList.Setetag(AIndex : Integer; AValue : string); 

begin
  If (Fetag=AValue) then exit;
  Fetag:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TReportList.Setitems(AIndex : Integer; AValue : TReportListitems); 

begin
  If (Fitems=AValue) then exit;
  Fitems:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TReportList.Setkind(AIndex : Integer; AValue : string); 

begin
  If (Fkind=AValue) then exit;
  Fkind:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TReportList.SetnextPageToken(AIndex : Integer; AValue : string); 

begin
  If (FnextPageToken=AValue) then exit;
  FnextPageToken:=AValue;
  MarkPropertyChanged(AIndex);
end;





{ --------------------------------------------------------------------
  TReportListitems
  --------------------------------------------------------------------}




{ --------------------------------------------------------------------
  TReportsConfiguration
  --------------------------------------------------------------------}


Procedure TReportsConfiguration.SetexposureToConversionEnabled(AIndex : Integer; AValue : boolean); 

begin
  If (FexposureToConversionEnabled=AValue) then exit;
  FexposureToConversionEnabled:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TReportsConfiguration.SetlookbackConfiguration(AIndex : Integer; AValue : TLookbackConfiguration); 

begin
  If (FlookbackConfiguration=AValue) then exit;
  FlookbackConfiguration:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TReportsConfiguration.SetreportGenerationTimeZoneId(AIndex : Integer; AValue : string); 

begin
  If (FreportGenerationTimeZoneId=AValue) then exit;
  FreportGenerationTimeZoneId:=AValue;
  MarkPropertyChanged(AIndex);
end;





{ --------------------------------------------------------------------
  TRichMediaExitOverride
  --------------------------------------------------------------------}


Procedure TRichMediaExitOverride.SetcustomExitUrl(AIndex : Integer; AValue : string); 

begin
  If (FcustomExitUrl=AValue) then exit;
  FcustomExitUrl:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TRichMediaExitOverride.SetexitId(AIndex : Integer; AValue : string); 

begin
  If (FexitId=AValue) then exit;
  FexitId:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TRichMediaExitOverride.SetuseCustomExitUrl(AIndex : Integer; AValue : boolean); 

begin
  If (FuseCustomExitUrl=AValue) then exit;
  FuseCustomExitUrl:=AValue;
  MarkPropertyChanged(AIndex);
end;





{ --------------------------------------------------------------------
  TSite
  --------------------------------------------------------------------}


Procedure TSite.SetaccountId(AIndex : Integer; AValue : string); 

begin
  If (FaccountId=AValue) then exit;
  FaccountId:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TSite.Setapproved(AIndex : Integer; AValue : boolean); 

begin
  If (Fapproved=AValue) then exit;
  Fapproved:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TSite.SetdirectorySiteId(AIndex : Integer; AValue : string); 

begin
  If (FdirectorySiteId=AValue) then exit;
  FdirectorySiteId:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TSite.SetdirectorySiteIdDimensionValue(AIndex : Integer; AValue : TDimensionValue); 

begin
  If (FdirectorySiteIdDimensionValue=AValue) then exit;
  FdirectorySiteIdDimensionValue:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TSite.Setid(AIndex : Integer; AValue : string); 

begin
  If (Fid=AValue) then exit;
  Fid:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TSite.SetidDimensionValue(AIndex : Integer; AValue : TDimensionValue); 

begin
  If (FidDimensionValue=AValue) then exit;
  FidDimensionValue:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TSite.SetkeyName(AIndex : Integer; AValue : string); 

begin
  If (FkeyName=AValue) then exit;
  FkeyName:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TSite.Setkind(AIndex : Integer; AValue : string); 

begin
  If (Fkind=AValue) then exit;
  Fkind:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TSite.Setname(AIndex : Integer; AValue : string); 

begin
  If (Fname=AValue) then exit;
  Fname:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TSite.SetsiteContacts(AIndex : Integer; AValue : TSitesiteContacts); 

begin
  If (FsiteContacts=AValue) then exit;
  FsiteContacts:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TSite.SetsiteSettings(AIndex : Integer; AValue : TSiteSettings); 

begin
  If (FsiteSettings=AValue) then exit;
  FsiteSettings:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TSite.SetsubaccountId(AIndex : Integer; AValue : string); 

begin
  If (FsubaccountId=AValue) then exit;
  FsubaccountId:=AValue;
  MarkPropertyChanged(AIndex);
end;





{ --------------------------------------------------------------------
  TSitesiteContacts
  --------------------------------------------------------------------}




{ --------------------------------------------------------------------
  TSiteContact
  --------------------------------------------------------------------}


Procedure TSiteContact.Setaddress(AIndex : Integer; AValue : string); 

begin
  If (Faddress=AValue) then exit;
  Faddress:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TSiteContact.SetcontactType(AIndex : Integer; AValue : string); 

begin
  If (FcontactType=AValue) then exit;
  FcontactType:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TSiteContact.Setemail(AIndex : Integer; AValue : string); 

begin
  If (Femail=AValue) then exit;
  Femail:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TSiteContact.SetfirstName(AIndex : Integer; AValue : string); 

begin
  If (FfirstName=AValue) then exit;
  FfirstName:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TSiteContact.Setid(AIndex : Integer; AValue : string); 

begin
  If (Fid=AValue) then exit;
  Fid:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TSiteContact.SetlastName(AIndex : Integer; AValue : string); 

begin
  If (FlastName=AValue) then exit;
  FlastName:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TSiteContact.Setphone(AIndex : Integer; AValue : string); 

begin
  If (Fphone=AValue) then exit;
  Fphone:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TSiteContact.Settitle(AIndex : Integer; AValue : string); 

begin
  If (Ftitle=AValue) then exit;
  Ftitle:=AValue;
  MarkPropertyChanged(AIndex);
end;





{ --------------------------------------------------------------------
  TSiteSettings
  --------------------------------------------------------------------}


Procedure TSiteSettings.SetactiveViewOptOut(AIndex : Integer; AValue : boolean); 

begin
  If (FactiveViewOptOut=AValue) then exit;
  FactiveViewOptOut:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TSiteSettings.SetcreativeSettings(AIndex : Integer; AValue : TCreativeSettings); 

begin
  If (FcreativeSettings=AValue) then exit;
  FcreativeSettings:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TSiteSettings.SetdisableBrandSafeAds(AIndex : Integer; AValue : boolean); 

begin
  If (FdisableBrandSafeAds=AValue) then exit;
  FdisableBrandSafeAds:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TSiteSettings.SetdisableNewCookie(AIndex : Integer; AValue : boolean); 

begin
  If (FdisableNewCookie=AValue) then exit;
  FdisableNewCookie:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TSiteSettings.SetlookbackConfiguration(AIndex : Integer; AValue : TLookbackConfiguration); 

begin
  If (FlookbackConfiguration=AValue) then exit;
  FlookbackConfiguration:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TSiteSettings.SettagSetting(AIndex : Integer; AValue : TTagSetting); 

begin
  If (FtagSetting=AValue) then exit;
  FtagSetting:=AValue;
  MarkPropertyChanged(AIndex);
end;





{ --------------------------------------------------------------------
  TSitesListResponse
  --------------------------------------------------------------------}


Procedure TSitesListResponse.Setkind(AIndex : Integer; AValue : string); 

begin
  If (Fkind=AValue) then exit;
  Fkind:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TSitesListResponse.SetnextPageToken(AIndex : Integer; AValue : string); 

begin
  If (FnextPageToken=AValue) then exit;
  FnextPageToken:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TSitesListResponse.Setsites(AIndex : Integer; AValue : TSitesListResponsesites); 

begin
  If (Fsites=AValue) then exit;
  Fsites:=AValue;
  MarkPropertyChanged(AIndex);
end;





{ --------------------------------------------------------------------
  TSitesListResponsesites
  --------------------------------------------------------------------}




{ --------------------------------------------------------------------
  TSize
  --------------------------------------------------------------------}


Procedure TSize.Setheight(AIndex : Integer; AValue : integer); 

begin
  If (Fheight=AValue) then exit;
  Fheight:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TSize.Setiab(AIndex : Integer; AValue : boolean); 

begin
  If (Fiab=AValue) then exit;
  Fiab:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TSize.Setid(AIndex : Integer; AValue : string); 

begin
  If (Fid=AValue) then exit;
  Fid:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TSize.Setkind(AIndex : Integer; AValue : string); 

begin
  If (Fkind=AValue) then exit;
  Fkind:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TSize.Setwidth(AIndex : Integer; AValue : integer); 

begin
  If (Fwidth=AValue) then exit;
  Fwidth:=AValue;
  MarkPropertyChanged(AIndex);
end;





{ --------------------------------------------------------------------
  TSizesListResponse
  --------------------------------------------------------------------}


Procedure TSizesListResponse.Setkind(AIndex : Integer; AValue : string); 

begin
  If (Fkind=AValue) then exit;
  Fkind:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TSizesListResponse.Setsizes(AIndex : Integer; AValue : TSizesListResponsesizes); 

begin
  If (Fsizes=AValue) then exit;
  Fsizes:=AValue;
  MarkPropertyChanged(AIndex);
end;





{ --------------------------------------------------------------------
  TSizesListResponsesizes
  --------------------------------------------------------------------}




{ --------------------------------------------------------------------
  TSortedDimension
  --------------------------------------------------------------------}


Procedure TSortedDimension.Setkind(AIndex : Integer; AValue : string); 

begin
  If (Fkind=AValue) then exit;
  Fkind:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TSortedDimension.Setname(AIndex : Integer; AValue : string); 

begin
  If (Fname=AValue) then exit;
  Fname:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TSortedDimension.SetsortOrder(AIndex : Integer; AValue : string); 

begin
  If (FsortOrder=AValue) then exit;
  FsortOrder:=AValue;
  MarkPropertyChanged(AIndex);
end;





{ --------------------------------------------------------------------
  TSubaccount
  --------------------------------------------------------------------}


Procedure TSubaccount.SetaccountId(AIndex : Integer; AValue : string); 

begin
  If (FaccountId=AValue) then exit;
  FaccountId:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TSubaccount.SetavailablePermissionIds(AIndex : Integer; AValue : TSubaccountavailablePermissionIds); 

begin
  If (FavailablePermissionIds=AValue) then exit;
  FavailablePermissionIds:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TSubaccount.Setid(AIndex : Integer; AValue : string); 

begin
  If (Fid=AValue) then exit;
  Fid:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TSubaccount.Setkind(AIndex : Integer; AValue : string); 

begin
  If (Fkind=AValue) then exit;
  Fkind:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TSubaccount.Setname(AIndex : Integer; AValue : string); 

begin
  If (Fname=AValue) then exit;
  Fname:=AValue;
  MarkPropertyChanged(AIndex);
end;





{ --------------------------------------------------------------------
  TSubaccountavailablePermissionIds
  --------------------------------------------------------------------}




{ --------------------------------------------------------------------
  TSubaccountsListResponse
  --------------------------------------------------------------------}


Procedure TSubaccountsListResponse.Setkind(AIndex : Integer; AValue : string); 

begin
  If (Fkind=AValue) then exit;
  Fkind:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TSubaccountsListResponse.SetnextPageToken(AIndex : Integer; AValue : string); 

begin
  If (FnextPageToken=AValue) then exit;
  FnextPageToken:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TSubaccountsListResponse.Setsubaccounts(AIndex : Integer; AValue : TSubaccountsListResponsesubaccounts); 

begin
  If (Fsubaccounts=AValue) then exit;
  Fsubaccounts:=AValue;
  MarkPropertyChanged(AIndex);
end;





{ --------------------------------------------------------------------
  TSubaccountsListResponsesubaccounts
  --------------------------------------------------------------------}




{ --------------------------------------------------------------------
  TTagData
  --------------------------------------------------------------------}


Procedure TTagData.SetadId(AIndex : Integer; AValue : string); 

begin
  If (FadId=AValue) then exit;
  FadId:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TTagData.SetclickTag(AIndex : Integer; AValue : string); 

begin
  If (FclickTag=AValue) then exit;
  FclickTag:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TTagData.SetcreativeId(AIndex : Integer; AValue : string); 

begin
  If (FcreativeId=AValue) then exit;
  FcreativeId:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TTagData.Setformat(AIndex : Integer; AValue : string); 

begin
  If (Fformat=AValue) then exit;
  Fformat:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TTagData.SetimpressionTag(AIndex : Integer; AValue : string); 

begin
  If (FimpressionTag=AValue) then exit;
  FimpressionTag:=AValue;
  MarkPropertyChanged(AIndex);
end;





{ --------------------------------------------------------------------
  TTagSetting
  --------------------------------------------------------------------}


Procedure TTagSetting.SetadditionalKeyValues(AIndex : Integer; AValue : string); 

begin
  If (FadditionalKeyValues=AValue) then exit;
  FadditionalKeyValues:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TTagSetting.SetincludeClickThroughUrls(AIndex : Integer; AValue : boolean); 

begin
  If (FincludeClickThroughUrls=AValue) then exit;
  FincludeClickThroughUrls:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TTagSetting.SetincludeClickTracking(AIndex : Integer; AValue : boolean); 

begin
  If (FincludeClickTracking=AValue) then exit;
  FincludeClickTracking:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TTagSetting.SetkeywordOption(AIndex : Integer; AValue : string); 

begin
  If (FkeywordOption=AValue) then exit;
  FkeywordOption:=AValue;
  MarkPropertyChanged(AIndex);
end;





{ --------------------------------------------------------------------
  TTagSettings
  --------------------------------------------------------------------}


Procedure TTagSettings.SetdynamicTagEnabled(AIndex : Integer; AValue : boolean); 

begin
  If (FdynamicTagEnabled=AValue) then exit;
  FdynamicTagEnabled:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TTagSettings.SetimageTagEnabled(AIndex : Integer; AValue : boolean); 

begin
  If (FimageTagEnabled=AValue) then exit;
  FimageTagEnabled:=AValue;
  MarkPropertyChanged(AIndex);
end;





{ --------------------------------------------------------------------
  TTargetWindow
  --------------------------------------------------------------------}


Procedure TTargetWindow.SetcustomHtml(AIndex : Integer; AValue : string); 

begin
  If (FcustomHtml=AValue) then exit;
  FcustomHtml:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TTargetWindow.SettargetWindowOption(AIndex : Integer; AValue : string); 

begin
  If (FtargetWindowOption=AValue) then exit;
  FtargetWindowOption:=AValue;
  MarkPropertyChanged(AIndex);
end;





{ --------------------------------------------------------------------
  TTargetableRemarketingList
  --------------------------------------------------------------------}


Procedure TTargetableRemarketingList.SetaccountId(AIndex : Integer; AValue : string); 

begin
  If (FaccountId=AValue) then exit;
  FaccountId:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TTargetableRemarketingList.Setactive(AIndex : Integer; AValue : boolean); 

begin
  If (Factive=AValue) then exit;
  Factive:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TTargetableRemarketingList.SetadvertiserId(AIndex : Integer; AValue : string); 

begin
  If (FadvertiserId=AValue) then exit;
  FadvertiserId:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TTargetableRemarketingList.SetadvertiserIdDimensionValue(AIndex : Integer; AValue : TDimensionValue); 

begin
  If (FadvertiserIdDimensionValue=AValue) then exit;
  FadvertiserIdDimensionValue:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TTargetableRemarketingList.Setdescription(AIndex : Integer; AValue : string); 

begin
  If (Fdescription=AValue) then exit;
  Fdescription:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TTargetableRemarketingList.Setid(AIndex : Integer; AValue : string); 

begin
  If (Fid=AValue) then exit;
  Fid:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TTargetableRemarketingList.Setkind(AIndex : Integer; AValue : string); 

begin
  If (Fkind=AValue) then exit;
  Fkind:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TTargetableRemarketingList.SetlifeSpan(AIndex : Integer; AValue : string); 

begin
  If (FlifeSpan=AValue) then exit;
  FlifeSpan:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TTargetableRemarketingList.SetlistSize(AIndex : Integer; AValue : string); 

begin
  If (FlistSize=AValue) then exit;
  FlistSize:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TTargetableRemarketingList.SetlistSource(AIndex : Integer; AValue : string); 

begin
  If (FlistSource=AValue) then exit;
  FlistSource:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TTargetableRemarketingList.Setname(AIndex : Integer; AValue : string); 

begin
  If (Fname=AValue) then exit;
  Fname:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TTargetableRemarketingList.SetsubaccountId(AIndex : Integer; AValue : string); 

begin
  If (FsubaccountId=AValue) then exit;
  FsubaccountId:=AValue;
  MarkPropertyChanged(AIndex);
end;





{ --------------------------------------------------------------------
  TTargetableRemarketingListsListResponse
  --------------------------------------------------------------------}


Procedure TTargetableRemarketingListsListResponse.Setkind(AIndex : Integer; AValue : string); 

begin
  If (Fkind=AValue) then exit;
  Fkind:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TTargetableRemarketingListsListResponse.SetnextPageToken(AIndex : Integer; AValue : string); 

begin
  If (FnextPageToken=AValue) then exit;
  FnextPageToken:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TTargetableRemarketingListsListResponse.SettargetableRemarketingLists(AIndex : Integer; AValue : TTargetableRemarketingListsListResponsetargetableRemarketingLists); 

begin
  If (FtargetableRemarketingLists=AValue) then exit;
  FtargetableRemarketingLists:=AValue;
  MarkPropertyChanged(AIndex);
end;





{ --------------------------------------------------------------------
  TTargetableRemarketingListsListResponsetargetableRemarketingLists
  --------------------------------------------------------------------}




{ --------------------------------------------------------------------
  TTechnologyTargeting
  --------------------------------------------------------------------}


Procedure TTechnologyTargeting.Setbrowsers(AIndex : Integer; AValue : TTechnologyTargetingbrowsers); 

begin
  If (Fbrowsers=AValue) then exit;
  Fbrowsers:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TTechnologyTargeting.SetconnectionTypes(AIndex : Integer; AValue : TTechnologyTargetingconnectionTypes); 

begin
  If (FconnectionTypes=AValue) then exit;
  FconnectionTypes:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TTechnologyTargeting.SetmobileCarriers(AIndex : Integer; AValue : TTechnologyTargetingmobileCarriers); 

begin
  If (FmobileCarriers=AValue) then exit;
  FmobileCarriers:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TTechnologyTargeting.SetoperatingSystemVersions(AIndex : Integer; AValue : TTechnologyTargetingoperatingSystemVersions); 

begin
  If (FoperatingSystemVersions=AValue) then exit;
  FoperatingSystemVersions:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TTechnologyTargeting.SetoperatingSystems(AIndex : Integer; AValue : TTechnologyTargetingoperatingSystems); 

begin
  If (FoperatingSystems=AValue) then exit;
  FoperatingSystems:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TTechnologyTargeting.SetplatformTypes(AIndex : Integer; AValue : TTechnologyTargetingplatformTypes); 

begin
  If (FplatformTypes=AValue) then exit;
  FplatformTypes:=AValue;
  MarkPropertyChanged(AIndex);
end;





{ --------------------------------------------------------------------
  TTechnologyTargetingbrowsers
  --------------------------------------------------------------------}




{ --------------------------------------------------------------------
  TTechnologyTargetingconnectionTypes
  --------------------------------------------------------------------}




{ --------------------------------------------------------------------
  TTechnologyTargetingmobileCarriers
  --------------------------------------------------------------------}




{ --------------------------------------------------------------------
  TTechnologyTargetingoperatingSystemVersions
  --------------------------------------------------------------------}




{ --------------------------------------------------------------------
  TTechnologyTargetingoperatingSystems
  --------------------------------------------------------------------}




{ --------------------------------------------------------------------
  TTechnologyTargetingplatformTypes
  --------------------------------------------------------------------}




{ --------------------------------------------------------------------
  TThirdPartyTrackingUrl
  --------------------------------------------------------------------}


Procedure TThirdPartyTrackingUrl.SetthirdPartyUrlType(AIndex : Integer; AValue : string); 

begin
  If (FthirdPartyUrlType=AValue) then exit;
  FthirdPartyUrlType:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TThirdPartyTrackingUrl.Seturl(AIndex : Integer; AValue : string); 

begin
  If (Furl=AValue) then exit;
  Furl:=AValue;
  MarkPropertyChanged(AIndex);
end;





{ --------------------------------------------------------------------
  TUserDefinedVariableConfiguration
  --------------------------------------------------------------------}


Procedure TUserDefinedVariableConfiguration.SetdataType(AIndex : Integer; AValue : string); 

begin
  If (FdataType=AValue) then exit;
  FdataType:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TUserDefinedVariableConfiguration.SetreportName(AIndex : Integer; AValue : string); 

begin
  If (FreportName=AValue) then exit;
  FreportName:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TUserDefinedVariableConfiguration.SetvariableType(AIndex : Integer; AValue : string); 

begin
  If (FvariableType=AValue) then exit;
  FvariableType:=AValue;
  MarkPropertyChanged(AIndex);
end;





{ --------------------------------------------------------------------
  TUserProfile
  --------------------------------------------------------------------}


Procedure TUserProfile.SetaccountId(AIndex : Integer; AValue : string); 

begin
  If (FaccountId=AValue) then exit;
  FaccountId:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TUserProfile.SetaccountName(AIndex : Integer; AValue : string); 

begin
  If (FaccountName=AValue) then exit;
  FaccountName:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TUserProfile.Setetag(AIndex : Integer; AValue : string); 

begin
  If (Fetag=AValue) then exit;
  Fetag:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TUserProfile.Setkind(AIndex : Integer; AValue : string); 

begin
  If (Fkind=AValue) then exit;
  Fkind:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TUserProfile.SetprofileId(AIndex : Integer; AValue : string); 

begin
  If (FprofileId=AValue) then exit;
  FprofileId:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TUserProfile.SetsubAccountId(AIndex : Integer; AValue : string); 

begin
  If (FsubAccountId=AValue) then exit;
  FsubAccountId:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TUserProfile.SetsubAccountName(AIndex : Integer; AValue : string); 

begin
  If (FsubAccountName=AValue) then exit;
  FsubAccountName:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TUserProfile.SetuserName(AIndex : Integer; AValue : string); 

begin
  If (FuserName=AValue) then exit;
  FuserName:=AValue;
  MarkPropertyChanged(AIndex);
end;





{ --------------------------------------------------------------------
  TUserProfileList
  --------------------------------------------------------------------}


Procedure TUserProfileList.Setetag(AIndex : Integer; AValue : string); 

begin
  If (Fetag=AValue) then exit;
  Fetag:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TUserProfileList.Setitems(AIndex : Integer; AValue : TUserProfileListitems); 

begin
  If (Fitems=AValue) then exit;
  Fitems:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TUserProfileList.Setkind(AIndex : Integer; AValue : string); 

begin
  If (Fkind=AValue) then exit;
  Fkind:=AValue;
  MarkPropertyChanged(AIndex);
end;





{ --------------------------------------------------------------------
  TUserProfileListitems
  --------------------------------------------------------------------}




{ --------------------------------------------------------------------
  TUserRole
  --------------------------------------------------------------------}


Procedure TUserRole.SetaccountId(AIndex : Integer; AValue : string); 

begin
  If (FaccountId=AValue) then exit;
  FaccountId:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TUserRole.SetdefaultUserRole(AIndex : Integer; AValue : boolean); 

begin
  If (FdefaultUserRole=AValue) then exit;
  FdefaultUserRole:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TUserRole.Setid(AIndex : Integer; AValue : string); 

begin
  If (Fid=AValue) then exit;
  Fid:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TUserRole.Setkind(AIndex : Integer; AValue : string); 

begin
  If (Fkind=AValue) then exit;
  Fkind:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TUserRole.Setname(AIndex : Integer; AValue : string); 

begin
  If (Fname=AValue) then exit;
  Fname:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TUserRole.SetparentUserRoleId(AIndex : Integer; AValue : string); 

begin
  If (FparentUserRoleId=AValue) then exit;
  FparentUserRoleId:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TUserRole.Setpermissions(AIndex : Integer; AValue : TUserRolepermissions); 

begin
  If (Fpermissions=AValue) then exit;
  Fpermissions:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TUserRole.SetsubaccountId(AIndex : Integer; AValue : string); 

begin
  If (FsubaccountId=AValue) then exit;
  FsubaccountId:=AValue;
  MarkPropertyChanged(AIndex);
end;





{ --------------------------------------------------------------------
  TUserRolepermissions
  --------------------------------------------------------------------}




{ --------------------------------------------------------------------
  TUserRolePermission
  --------------------------------------------------------------------}


Procedure TUserRolePermission.Setavailability(AIndex : Integer; AValue : string); 

begin
  If (Favailability=AValue) then exit;
  Favailability:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TUserRolePermission.Setid(AIndex : Integer; AValue : string); 

begin
  If (Fid=AValue) then exit;
  Fid:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TUserRolePermission.Setkind(AIndex : Integer; AValue : string); 

begin
  If (Fkind=AValue) then exit;
  Fkind:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TUserRolePermission.Setname(AIndex : Integer; AValue : string); 

begin
  If (Fname=AValue) then exit;
  Fname:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TUserRolePermission.SetpermissionGroupId(AIndex : Integer; AValue : string); 

begin
  If (FpermissionGroupId=AValue) then exit;
  FpermissionGroupId:=AValue;
  MarkPropertyChanged(AIndex);
end;





{ --------------------------------------------------------------------
  TUserRolePermissionGroup
  --------------------------------------------------------------------}


Procedure TUserRolePermissionGroup.Setid(AIndex : Integer; AValue : string); 

begin
  If (Fid=AValue) then exit;
  Fid:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TUserRolePermissionGroup.Setkind(AIndex : Integer; AValue : string); 

begin
  If (Fkind=AValue) then exit;
  Fkind:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TUserRolePermissionGroup.Setname(AIndex : Integer; AValue : string); 

begin
  If (Fname=AValue) then exit;
  Fname:=AValue;
  MarkPropertyChanged(AIndex);
end;





{ --------------------------------------------------------------------
  TUserRolePermissionGroupsListResponse
  --------------------------------------------------------------------}


Procedure TUserRolePermissionGroupsListResponse.Setkind(AIndex : Integer; AValue : string); 

begin
  If (Fkind=AValue) then exit;
  Fkind:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TUserRolePermissionGroupsListResponse.SetuserRolePermissionGroups(AIndex : Integer; AValue : TUserRolePermissionGroupsListResponseuserRolePermissionGroups); 

begin
  If (FuserRolePermissionGroups=AValue) then exit;
  FuserRolePermissionGroups:=AValue;
  MarkPropertyChanged(AIndex);
end;





{ --------------------------------------------------------------------
  TUserRolePermissionGroupsListResponseuserRolePermissionGroups
  --------------------------------------------------------------------}




{ --------------------------------------------------------------------
  TUserRolePermissionsListResponse
  --------------------------------------------------------------------}


Procedure TUserRolePermissionsListResponse.Setkind(AIndex : Integer; AValue : string); 

begin
  If (Fkind=AValue) then exit;
  Fkind:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TUserRolePermissionsListResponse.SetuserRolePermissions(AIndex : Integer; AValue : TUserRolePermissionsListResponseuserRolePermissions); 

begin
  If (FuserRolePermissions=AValue) then exit;
  FuserRolePermissions:=AValue;
  MarkPropertyChanged(AIndex);
end;





{ --------------------------------------------------------------------
  TUserRolePermissionsListResponseuserRolePermissions
  --------------------------------------------------------------------}




{ --------------------------------------------------------------------
  TUserRolesListResponse
  --------------------------------------------------------------------}


Procedure TUserRolesListResponse.Setkind(AIndex : Integer; AValue : string); 

begin
  If (Fkind=AValue) then exit;
  Fkind:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TUserRolesListResponse.SetnextPageToken(AIndex : Integer; AValue : string); 

begin
  If (FnextPageToken=AValue) then exit;
  FnextPageToken:=AValue;
  MarkPropertyChanged(AIndex);
end;



Procedure TUserRolesListResponse.SetuserRoles(AIndex : Integer; AValue : TUserRolesListResponseuserRoles); 

begin
  If (FuserRoles=AValue) then exit;
  FuserRoles:=AValue;
  MarkPropertyChanged(AIndex);
end;





{ --------------------------------------------------------------------
  TUserRolesListResponseuserRoles
  --------------------------------------------------------------------}




{ --------------------------------------------------------------------
  TAccountActiveAdSummariesResource
  --------------------------------------------------------------------}


Class Function TAccountActiveAdSummariesResource.ResourceName : String;

begin
  Result:='accountActiveAdSummaries';
end;

Class Function TAccountActiveAdSummariesResource.DefaultAPI : TGoogleAPIClass;

begin
  Result:=TdfareportingAPI;
end;

Function TAccountActiveAdSummariesResource.Get(profileId: string; summaryAccountId: string) : TAccountActiveAdSummary;

Const
  _HTTPMethod = 'GET';
  _Path       = 'userprofiles/{profileId}/accountActiveAdSummaries/{summaryAccountId}';
  _Methodid   = 'dfareporting.accountActiveAdSummaries.get';

Var
  _P : String;

begin
  _P:=SubstitutePath(_Path,['profileId',profileId,'summaryAccountId',summaryAccountId]);
  Result:=ServiceCall(_HTTPMethod,_P,'',Nil,TAccountActiveAdSummary) as TAccountActiveAdSummary;
end;



{ --------------------------------------------------------------------
  TAccountPermissionGroupsResource
  --------------------------------------------------------------------}


Class Function TAccountPermissionGroupsResource.ResourceName : String;

begin
  Result:='accountPermissionGroups';
end;

Class Function TAccountPermissionGroupsResource.DefaultAPI : TGoogleAPIClass;

begin
  Result:=TdfareportingAPI;
end;

Function TAccountPermissionGroupsResource.Get(id: string; profileId: string) : TAccountPermissionGroup;

Const
  _HTTPMethod = 'GET';
  _Path       = 'userprofiles/{profileId}/accountPermissionGroups/{id}';
  _Methodid   = 'dfareporting.accountPermissionGroups.get';

Var
  _P : String;

begin
  _P:=SubstitutePath(_Path,['id',id,'profileId',profileId]);
  Result:=ServiceCall(_HTTPMethod,_P,'',Nil,TAccountPermissionGroup) as TAccountPermissionGroup;
end;

Function TAccountPermissionGroupsResource.List(profileId: string) : TAccountPermissionGroupsListResponse;

Const
  _HTTPMethod = 'GET';
  _Path       = 'userprofiles/{profileId}/accountPermissionGroups';
  _Methodid   = 'dfareporting.accountPermissionGroups.list';

Var
  _P : String;

begin
  _P:=SubstitutePath(_Path,['profileId',profileId]);
  Result:=ServiceCall(_HTTPMethod,_P,'',Nil,TAccountPermissionGroupsListResponse) as TAccountPermissionGroupsListResponse;
end;



{ --------------------------------------------------------------------
  TAccountPermissionsResource
  --------------------------------------------------------------------}


Class Function TAccountPermissionsResource.ResourceName : String;

begin
  Result:='accountPermissions';
end;

Class Function TAccountPermissionsResource.DefaultAPI : TGoogleAPIClass;

begin
  Result:=TdfareportingAPI;
end;

Function TAccountPermissionsResource.Get(id: string; profileId: string) : TAccountPermission;

Const
  _HTTPMethod = 'GET';
  _Path       = 'userprofiles/{profileId}/accountPermissions/{id}';
  _Methodid   = 'dfareporting.accountPermissions.get';

Var
  _P : String;

begin
  _P:=SubstitutePath(_Path,['id',id,'profileId',profileId]);
  Result:=ServiceCall(_HTTPMethod,_P,'',Nil,TAccountPermission) as TAccountPermission;
end;

Function TAccountPermissionsResource.List(profileId: string) : TAccountPermissionsListResponse;

Const
  _HTTPMethod = 'GET';
  _Path       = 'userprofiles/{profileId}/accountPermissions';
  _Methodid   = 'dfareporting.accountPermissions.list';

Var
  _P : String;

begin
  _P:=SubstitutePath(_Path,['profileId',profileId]);
  Result:=ServiceCall(_HTTPMethod,_P,'',Nil,TAccountPermissionsListResponse) as TAccountPermissionsListResponse;
end;



{ --------------------------------------------------------------------
  TAccountUserProfilesResource
  --------------------------------------------------------------------}


Class Function TAccountUserProfilesResource.ResourceName : String;

begin
  Result:='accountUserProfiles';
end;

Class Function TAccountUserProfilesResource.DefaultAPI : TGoogleAPIClass;

begin
  Result:=TdfareportingAPI;
end;

Function TAccountUserProfilesResource.Get(id: string; profileId: string) : TAccountUserProfile;

Const
  _HTTPMethod = 'GET';
  _Path       = 'userprofiles/{profileId}/accountUserProfiles/{id}';
  _Methodid   = 'dfareporting.accountUserProfiles.get';

Var
  _P : String;

begin
  _P:=SubstitutePath(_Path,['id',id,'profileId',profileId]);
  Result:=ServiceCall(_HTTPMethod,_P,'',Nil,TAccountUserProfile) as TAccountUserProfile;
end;

Function TAccountUserProfilesResource.Insert(profileId: string; aAccountUserProfile : TAccountUserProfile) : TAccountUserProfile;

Const
  _HTTPMethod = 'POST';
  _Path       = 'userprofiles/{profileId}/accountUserProfiles';
  _Methodid   = 'dfareporting.accountUserProfiles.insert';

Var
  _P : String;

begin
  _P:=SubstitutePath(_Path,['profileId',profileId]);
  Result:=ServiceCall(_HTTPMethod,_P,'',aAccountUserProfile,TAccountUserProfile) as TAccountUserProfile;
end;

Function TAccountUserProfilesResource.List(profileId: string; AQuery : string = '') : TAccountUserProfilesListResponse;

Const
  _HTTPMethod = 'GET';
  _Path       = 'userprofiles/{profileId}/accountUserProfiles';
  _Methodid   = 'dfareporting.accountUserProfiles.list';

Var
  _P : String;

begin
  _P:=SubstitutePath(_Path,['profileId',profileId]);
  Result:=ServiceCall(_HTTPMethod,_P,AQuery,Nil,TAccountUserProfilesListResponse) as TAccountUserProfilesListResponse;
end;


Function TAccountUserProfilesResource.List(profileId: string; AQuery : TAccountUserProfileslistOptions) : TAccountUserProfilesListResponse;

Var
  _Q : String;

begin
  _Q:='';
  AddToQuery(_Q,'active',AQuery.active);
  AddToQuery(_Q,'ids',AQuery.ids);
  AddToQuery(_Q,'maxResults',AQuery.maxResults);
  AddToQuery(_Q,'pageToken',AQuery.pageToken);
  AddToQuery(_Q,'searchString',AQuery.searchString);
  AddToQuery(_Q,'sortField',AQuery.sortField);
  AddToQuery(_Q,'sortOrder',AQuery.sortOrder);
  AddToQuery(_Q,'subaccountId',AQuery.subaccountId);
  AddToQuery(_Q,'userRoleId',AQuery.userRoleId);
  Result:=List(profileId,_Q);
end;

Function TAccountUserProfilesResource.Patch(profileId: string; aAccountUserProfile : TAccountUserProfile; AQuery : string = '') : TAccountUserProfile;

Const
  _HTTPMethod = 'PATCH';
  _Path       = 'userprofiles/{profileId}/accountUserProfiles';
  _Methodid   = 'dfareporting.accountUserProfiles.patch';

Var
  _P : String;

begin
  _P:=SubstitutePath(_Path,['profileId',profileId]);
  Result:=ServiceCall(_HTTPMethod,_P,AQuery,aAccountUserProfile,TAccountUserProfile) as TAccountUserProfile;
end;


Function TAccountUserProfilesResource.Patch(profileId: string; aAccountUserProfile : TAccountUserProfile; AQuery : TAccountUserProfilespatchOptions) : TAccountUserProfile;

Var
  _Q : String;

begin
  _Q:='';
  AddToQuery(_Q,'id',AQuery.id);
  Result:=Patch(profileId,aAccountUserProfile,_Q);
end;

Function TAccountUserProfilesResource.Update(profileId: string; aAccountUserProfile : TAccountUserProfile) : TAccountUserProfile;

Const
  _HTTPMethod = 'PUT';
  _Path       = 'userprofiles/{profileId}/accountUserProfiles';
  _Methodid   = 'dfareporting.accountUserProfiles.update';

Var
  _P : String;

begin
  _P:=SubstitutePath(_Path,['profileId',profileId]);
  Result:=ServiceCall(_HTTPMethod,_P,'',aAccountUserProfile,TAccountUserProfile) as TAccountUserProfile;
end;



{ --------------------------------------------------------------------
  TAccountsResource
  --------------------------------------------------------------------}


Class Function TAccountsResource.ResourceName : String;

begin
  Result:='accounts';
end;

Class Function TAccountsResource.DefaultAPI : TGoogleAPIClass;

begin
  Result:=TdfareportingAPI;
end;

Function TAccountsResource.Get(id: string; profileId: string) : TAccount;

Const
  _HTTPMethod = 'GET';
  _Path       = 'userprofiles/{profileId}/accounts/{id}';
  _Methodid   = 'dfareporting.accounts.get';

Var
  _P : String;

begin
  _P:=SubstitutePath(_Path,['id',id,'profileId',profileId]);
  Result:=ServiceCall(_HTTPMethod,_P,'',Nil,TAccount) as TAccount;
end;

Function TAccountsResource.List(profileId: string; AQuery : string = '') : TAccountsListResponse;

Const
  _HTTPMethod = 'GET';
  _Path       = 'userprofiles/{profileId}/accounts';
  _Methodid   = 'dfareporting.accounts.list';

Var
  _P : String;

begin
  _P:=SubstitutePath(_Path,['profileId',profileId]);
  Result:=ServiceCall(_HTTPMethod,_P,AQuery,Nil,TAccountsListResponse) as TAccountsListResponse;
end;


Function TAccountsResource.List(profileId: string; AQuery : TAccountslistOptions) : TAccountsListResponse;

Var
  _Q : String;

begin
  _Q:='';
  AddToQuery(_Q,'active',AQuery.active);
  AddToQuery(_Q,'ids',AQuery.ids);
  AddToQuery(_Q,'maxResults',AQuery.maxResults);
  AddToQuery(_Q,'pageToken',AQuery.pageToken);
  AddToQuery(_Q,'searchString',AQuery.searchString);
  AddToQuery(_Q,'sortField',AQuery.sortField);
  AddToQuery(_Q,'sortOrder',AQuery.sortOrder);
  Result:=List(profileId,_Q);
end;

Function TAccountsResource.Patch(profileId: string; aAccount : TAccount; AQuery : string = '') : TAccount;

Const
  _HTTPMethod = 'PATCH';
  _Path       = 'userprofiles/{profileId}/accounts';
  _Methodid   = 'dfareporting.accounts.patch';

Var
  _P : String;

begin
  _P:=SubstitutePath(_Path,['profileId',profileId]);
  Result:=ServiceCall(_HTTPMethod,_P,AQuery,aAccount,TAccount) as TAccount;
end;


Function TAccountsResource.Patch(profileId: string; aAccount : TAccount; AQuery : TAccountspatchOptions) : TAccount;

Var
  _Q : String;

begin
  _Q:='';
  AddToQuery(_Q,'id',AQuery.id);
  Result:=Patch(profileId,aAccount,_Q);
end;

Function TAccountsResource.Update(profileId: string; aAccount : TAccount) : TAccount;

Const
  _HTTPMethod = 'PUT';
  _Path       = 'userprofiles/{profileId}/accounts';
  _Methodid   = 'dfareporting.accounts.update';

Var
  _P : String;

begin
  _P:=SubstitutePath(_Path,['profileId',profileId]);
  Result:=ServiceCall(_HTTPMethod,_P,'',aAccount,TAccount) as TAccount;
end;



{ --------------------------------------------------------------------
  TAdsResource
  --------------------------------------------------------------------}


Class Function TAdsResource.ResourceName : String;

begin
  Result:='ads';
end;

Class Function TAdsResource.DefaultAPI : TGoogleAPIClass;

begin
  Result:=TdfareportingAPI;
end;

Function TAdsResource.Get(id: string; profileId: string) : TAd;

Const
  _HTTPMethod = 'GET';
  _Path       = 'userprofiles/{profileId}/ads/{id}';
  _Methodid   = 'dfareporting.ads.get';

Var
  _P : String;

begin
  _P:=SubstitutePath(_Path,['id',id,'profileId',profileId]);
  Result:=ServiceCall(_HTTPMethod,_P,'',Nil,TAd) as TAd;
end;

Function TAdsResource.Insert(profileId: string; aAd : TAd) : TAd;

Const
  _HTTPMethod = 'POST';
  _Path       = 'userprofiles/{profileId}/ads';
  _Methodid   = 'dfareporting.ads.insert';

Var
  _P : String;

begin
  _P:=SubstitutePath(_Path,['profileId',profileId]);
  Result:=ServiceCall(_HTTPMethod,_P,'',aAd,TAd) as TAd;
end;

Function TAdsResource.List(profileId: string; AQuery : string = '') : TAdsListResponse;

Const
  _HTTPMethod = 'GET';
  _Path       = 'userprofiles/{profileId}/ads';
  _Methodid   = 'dfareporting.ads.list';

Var
  _P : String;

begin
  _P:=SubstitutePath(_Path,['profileId',profileId]);
  Result:=ServiceCall(_HTTPMethod,_P,AQuery,Nil,TAdsListResponse) as TAdsListResponse;
end;


Function TAdsResource.List(profileId: string; AQuery : TAdslistOptions) : TAdsListResponse;

Var
  _Q : String;

begin
  _Q:='';
  AddToQuery(_Q,'active',AQuery.active);
  AddToQuery(_Q,'advertiserId',AQuery.advertiserId);
  AddToQuery(_Q,'archived',AQuery.archived);
  AddToQuery(_Q,'audienceSegmentIds',AQuery.audienceSegmentIds);
  AddToQuery(_Q,'campaignIds',AQuery.campaignIds);
  AddToQuery(_Q,'compatibility',AQuery.compatibility);
  AddToQuery(_Q,'creativeIds',AQuery.creativeIds);
  AddToQuery(_Q,'creativeOptimizationConfigurationIds',AQuery.creativeOptimizationConfigurationIds);
  AddToQuery(_Q,'creativeType',AQuery.creativeType);
  AddToQuery(_Q,'dynamicClickTracker',AQuery.dynamicClickTracker);
  AddToQuery(_Q,'ids',AQuery.ids);
  AddToQuery(_Q,'landingPageIds',AQuery.landingPageIds);
  AddToQuery(_Q,'maxResults',AQuery.maxResults);
  AddToQuery(_Q,'overriddenEventTagId',AQuery.overriddenEventTagId);
  AddToQuery(_Q,'pageToken',AQuery.pageToken);
  AddToQuery(_Q,'placementIds',AQuery.placementIds);
  AddToQuery(_Q,'remarketingListIds',AQuery.remarketingListIds);
  AddToQuery(_Q,'searchString',AQuery.searchString);
  AddToQuery(_Q,'sizeIds',AQuery.sizeIds);
  AddToQuery(_Q,'sortField',AQuery.sortField);
  AddToQuery(_Q,'sortOrder',AQuery.sortOrder);
  AddToQuery(_Q,'sslCompliant',AQuery.sslCompliant);
  AddToQuery(_Q,'sslRequired',AQuery.sslRequired);
  AddToQuery(_Q,'type',AQuery._type);
  Result:=List(profileId,_Q);
end;

Function TAdsResource.Patch(profileId: string; aAd : TAd; AQuery : string = '') : TAd;

Const
  _HTTPMethod = 'PATCH';
  _Path       = 'userprofiles/{profileId}/ads';
  _Methodid   = 'dfareporting.ads.patch';

Var
  _P : String;

begin
  _P:=SubstitutePath(_Path,['profileId',profileId]);
  Result:=ServiceCall(_HTTPMethod,_P,AQuery,aAd,TAd) as TAd;
end;


Function TAdsResource.Patch(profileId: string; aAd : TAd; AQuery : TAdspatchOptions) : TAd;

Var
  _Q : String;

begin
  _Q:='';
  AddToQuery(_Q,'id',AQuery.id);
  Result:=Patch(profileId,aAd,_Q);
end;

Function TAdsResource.Update(profileId: string; aAd : TAd) : TAd;

Const
  _HTTPMethod = 'PUT';
  _Path       = 'userprofiles/{profileId}/ads';
  _Methodid   = 'dfareporting.ads.update';

Var
  _P : String;

begin
  _P:=SubstitutePath(_Path,['profileId',profileId]);
  Result:=ServiceCall(_HTTPMethod,_P,'',aAd,TAd) as TAd;
end;



{ --------------------------------------------------------------------
  TAdvertiserGroupsResource
  --------------------------------------------------------------------}


Class Function TAdvertiserGroupsResource.ResourceName : String;

begin
  Result:='advertiserGroups';
end;

Class Function TAdvertiserGroupsResource.DefaultAPI : TGoogleAPIClass;

begin
  Result:=TdfareportingAPI;
end;

Procedure TAdvertiserGroupsResource.Delete(id: string; profileId: string);

Const
  _HTTPMethod = 'DELETE';
  _Path       = 'userprofiles/{profileId}/advertiserGroups/{id}';
  _Methodid   = 'dfareporting.advertiserGroups.delete';

Var
  _P : String;

begin
  _P:=SubstitutePath(_Path,['id',id,'profileId',profileId]);
  ServiceCall(_HTTPMethod,_P,'',Nil,Nil);
end;

Function TAdvertiserGroupsResource.Get(id: string; profileId: string) : TAdvertiserGroup;

Const
  _HTTPMethod = 'GET';
  _Path       = 'userprofiles/{profileId}/advertiserGroups/{id}';
  _Methodid   = 'dfareporting.advertiserGroups.get';

Var
  _P : String;

begin
  _P:=SubstitutePath(_Path,['id',id,'profileId',profileId]);
  Result:=ServiceCall(_HTTPMethod,_P,'',Nil,TAdvertiserGroup) as TAdvertiserGroup;
end;

Function TAdvertiserGroupsResource.Insert(profileId: string; aAdvertiserGroup : TAdvertiserGroup) : TAdvertiserGroup;

Const
  _HTTPMethod = 'POST';
  _Path       = 'userprofiles/{profileId}/advertiserGroups';
  _Methodid   = 'dfareporting.advertiserGroups.insert';

Var
  _P : String;

begin
  _P:=SubstitutePath(_Path,['profileId',profileId]);
  Result:=ServiceCall(_HTTPMethod,_P,'',aAdvertiserGroup,TAdvertiserGroup) as TAdvertiserGroup;
end;

Function TAdvertiserGroupsResource.List(profileId: string; AQuery : string = '') : TAdvertiserGroupsListResponse;

Const
  _HTTPMethod = 'GET';
  _Path       = 'userprofiles/{profileId}/advertiserGroups';
  _Methodid   = 'dfareporting.advertiserGroups.list';

Var
  _P : String;

begin
  _P:=SubstitutePath(_Path,['profileId',profileId]);
  Result:=ServiceCall(_HTTPMethod,_P,AQuery,Nil,TAdvertiserGroupsListResponse) as TAdvertiserGroupsListResponse;
end;


Function TAdvertiserGroupsResource.List(profileId: string; AQuery : TAdvertiserGroupslistOptions) : TAdvertiserGroupsListResponse;

Var
  _Q : String;

begin
  _Q:='';
  AddToQuery(_Q,'ids',AQuery.ids);
  AddToQuery(_Q,'maxResults',AQuery.maxResults);
  AddToQuery(_Q,'pageToken',AQuery.pageToken);
  AddToQuery(_Q,'searchString',AQuery.searchString);
  AddToQuery(_Q,'sortField',AQuery.sortField);
  AddToQuery(_Q,'sortOrder',AQuery.sortOrder);
  Result:=List(profileId,_Q);
end;

Function TAdvertiserGroupsResource.Patch(profileId: string; aAdvertiserGroup : TAdvertiserGroup; AQuery : string = '') : TAdvertiserGroup;

Const
  _HTTPMethod = 'PATCH';
  _Path       = 'userprofiles/{profileId}/advertiserGroups';
  _Methodid   = 'dfareporting.advertiserGroups.patch';

Var
  _P : String;

begin
  _P:=SubstitutePath(_Path,['profileId',profileId]);
  Result:=ServiceCall(_HTTPMethod,_P,AQuery,aAdvertiserGroup,TAdvertiserGroup) as TAdvertiserGroup;
end;


Function TAdvertiserGroupsResource.Patch(profileId: string; aAdvertiserGroup : TAdvertiserGroup; AQuery : TAdvertiserGroupspatchOptions) : TAdvertiserGroup;

Var
  _Q : String;

begin
  _Q:='';
  AddToQuery(_Q,'id',AQuery.id);
  Result:=Patch(profileId,aAdvertiserGroup,_Q);
end;

Function TAdvertiserGroupsResource.Update(profileId: string; aAdvertiserGroup : TAdvertiserGroup) : TAdvertiserGroup;

Const
  _HTTPMethod = 'PUT';
  _Path       = 'userprofiles/{profileId}/advertiserGroups';
  _Methodid   = 'dfareporting.advertiserGroups.update';

Var
  _P : String;

begin
  _P:=SubstitutePath(_Path,['profileId',profileId]);
  Result:=ServiceCall(_HTTPMethod,_P,'',aAdvertiserGroup,TAdvertiserGroup) as TAdvertiserGroup;
end;



{ --------------------------------------------------------------------
  TAdvertisersResource
  --------------------------------------------------------------------}


Class Function TAdvertisersResource.ResourceName : String;

begin
  Result:='advertisers';
end;

Class Function TAdvertisersResource.DefaultAPI : TGoogleAPIClass;

begin
  Result:=TdfareportingAPI;
end;

Function TAdvertisersResource.Get(id: string; profileId: string) : TAdvertiser;

Const
  _HTTPMethod = 'GET';
  _Path       = 'userprofiles/{profileId}/advertisers/{id}';
  _Methodid   = 'dfareporting.advertisers.get';

Var
  _P : String;

begin
  _P:=SubstitutePath(_Path,['id',id,'profileId',profileId]);
  Result:=ServiceCall(_HTTPMethod,_P,'',Nil,TAdvertiser) as TAdvertiser;
end;

Function TAdvertisersResource.Insert(profileId: string; aAdvertiser : TAdvertiser) : TAdvertiser;

Const
  _HTTPMethod = 'POST';
  _Path       = 'userprofiles/{profileId}/advertisers';
  _Methodid   = 'dfareporting.advertisers.insert';

Var
  _P : String;

begin
  _P:=SubstitutePath(_Path,['profileId',profileId]);
  Result:=ServiceCall(_HTTPMethod,_P,'',aAdvertiser,TAdvertiser) as TAdvertiser;
end;

Function TAdvertisersResource.List(profileId: string; AQuery : string = '') : TAdvertisersListResponse;

Const
  _HTTPMethod = 'GET';
  _Path       = 'userprofiles/{profileId}/advertisers';
  _Methodid   = 'dfareporting.advertisers.list';

Var
  _P : String;

begin
  _P:=SubstitutePath(_Path,['profileId',profileId]);
  Result:=ServiceCall(_HTTPMethod,_P,AQuery,Nil,TAdvertisersListResponse) as TAdvertisersListResponse;
end;


Function TAdvertisersResource.List(profileId: string; AQuery : TAdvertiserslistOptions) : TAdvertisersListResponse;

Var
  _Q : String;

begin
  _Q:='';
  AddToQuery(_Q,'advertiserGroupIds',AQuery.advertiserGroupIds);
  AddToQuery(_Q,'floodlightConfigurationIds',AQuery.floodlightConfigurationIds);
  AddToQuery(_Q,'ids',AQuery.ids);
  AddToQuery(_Q,'includeAdvertisersWithoutGroupsOnly',AQuery.includeAdvertisersWithoutGroupsOnly);
  AddToQuery(_Q,'maxResults',AQuery.maxResults);
  AddToQuery(_Q,'onlyParent',AQuery.onlyParent);
  AddToQuery(_Q,'pageToken',AQuery.pageToken);
  AddToQuery(_Q,'searchString',AQuery.searchString);
  AddToQuery(_Q,'sortField',AQuery.sortField);
  AddToQuery(_Q,'sortOrder',AQuery.sortOrder);
  AddToQuery(_Q,'status',AQuery.status);
  AddToQuery(_Q,'subaccountId',AQuery.subaccountId);
  Result:=List(profileId,_Q);
end;

Function TAdvertisersResource.Patch(profileId: string; aAdvertiser : TAdvertiser; AQuery : string = '') : TAdvertiser;

Const
  _HTTPMethod = 'PATCH';
  _Path       = 'userprofiles/{profileId}/advertisers';
  _Methodid   = 'dfareporting.advertisers.patch';

Var
  _P : String;

begin
  _P:=SubstitutePath(_Path,['profileId',profileId]);
  Result:=ServiceCall(_HTTPMethod,_P,AQuery,aAdvertiser,TAdvertiser) as TAdvertiser;
end;


Function TAdvertisersResource.Patch(profileId: string; aAdvertiser : TAdvertiser; AQuery : TAdvertiserspatchOptions) : TAdvertiser;

Var
  _Q : String;

begin
  _Q:='';
  AddToQuery(_Q,'id',AQuery.id);
  Result:=Patch(profileId,aAdvertiser,_Q);
end;

Function TAdvertisersResource.Update(profileId: string; aAdvertiser : TAdvertiser) : TAdvertiser;

Const
  _HTTPMethod = 'PUT';
  _Path       = 'userprofiles/{profileId}/advertisers';
  _Methodid   = 'dfareporting.advertisers.update';

Var
  _P : String;

begin
  _P:=SubstitutePath(_Path,['profileId',profileId]);
  Result:=ServiceCall(_HTTPMethod,_P,'',aAdvertiser,TAdvertiser) as TAdvertiser;
end;



{ --------------------------------------------------------------------
  TBrowsersResource
  --------------------------------------------------------------------}


Class Function TBrowsersResource.ResourceName : String;

begin
  Result:='browsers';
end;

Class Function TBrowsersResource.DefaultAPI : TGoogleAPIClass;

begin
  Result:=TdfareportingAPI;
end;

Function TBrowsersResource.List(profileId: string) : TBrowsersListResponse;

Const
  _HTTPMethod = 'GET';
  _Path       = 'userprofiles/{profileId}/browsers';
  _Methodid   = 'dfareporting.browsers.list';

Var
  _P : String;

begin
  _P:=SubstitutePath(_Path,['profileId',profileId]);
  Result:=ServiceCall(_HTTPMethod,_P,'',Nil,TBrowsersListResponse) as TBrowsersListResponse;
end;



{ --------------------------------------------------------------------
  TCampaignCreativeAssociationsResource
  --------------------------------------------------------------------}


Class Function TCampaignCreativeAssociationsResource.ResourceName : String;

begin
  Result:='campaignCreativeAssociations';
end;

Class Function TCampaignCreativeAssociationsResource.DefaultAPI : TGoogleAPIClass;

begin
  Result:=TdfareportingAPI;
end;

Function TCampaignCreativeAssociationsResource.Insert(campaignId: string; profileId: string; aCampaignCreativeAssociation : TCampaignCreativeAssociation) : TCampaignCreativeAssociation;

Const
  _HTTPMethod = 'POST';
  _Path       = 'userprofiles/{profileId}/campaigns/{campaignId}/campaignCreativeAssociations';
  _Methodid   = 'dfareporting.campaignCreativeAssociations.insert';

Var
  _P : String;

begin
  _P:=SubstitutePath(_Path,['campaignId',campaignId,'profileId',profileId]);
  Result:=ServiceCall(_HTTPMethod,_P,'',aCampaignCreativeAssociation,TCampaignCreativeAssociation) as TCampaignCreativeAssociation;
end;

Function TCampaignCreativeAssociationsResource.List(campaignId: string; profileId: string; AQuery : string = '') : TCampaignCreativeAssociationsListResponse;

Const
  _HTTPMethod = 'GET';
  _Path       = 'userprofiles/{profileId}/campaigns/{campaignId}/campaignCreativeAssociations';
  _Methodid   = 'dfareporting.campaignCreativeAssociations.list';

Var
  _P : String;

begin
  _P:=SubstitutePath(_Path,['campaignId',campaignId,'profileId',profileId]);
  Result:=ServiceCall(_HTTPMethod,_P,AQuery,Nil,TCampaignCreativeAssociationsListResponse) as TCampaignCreativeAssociationsListResponse;
end;


Function TCampaignCreativeAssociationsResource.List(campaignId: string; profileId: string; AQuery : TCampaignCreativeAssociationslistOptions) : TCampaignCreativeAssociationsListResponse;

Var
  _Q : String;

begin
  _Q:='';
  AddToQuery(_Q,'maxResults',AQuery.maxResults);
  AddToQuery(_Q,'pageToken',AQuery.pageToken);
  AddToQuery(_Q,'sortOrder',AQuery.sortOrder);
  Result:=List(campaignId,profileId,_Q);
end;



{ --------------------------------------------------------------------
  TCampaignsResource
  --------------------------------------------------------------------}


Class Function TCampaignsResource.ResourceName : String;

begin
  Result:='campaigns';
end;

Class Function TCampaignsResource.DefaultAPI : TGoogleAPIClass;

begin
  Result:=TdfareportingAPI;
end;

Function TCampaignsResource.Get(id: string; profileId: string) : TCampaign;

Const
  _HTTPMethod = 'GET';
  _Path       = 'userprofiles/{profileId}/campaigns/{id}';
  _Methodid   = 'dfareporting.campaigns.get';

Var
  _P : String;

begin
  _P:=SubstitutePath(_Path,['id',id,'profileId',profileId]);
  Result:=ServiceCall(_HTTPMethod,_P,'',Nil,TCampaign) as TCampaign;
end;

Function TCampaignsResource.Insert(profileId: string; aCampaign : TCampaign; AQuery : string = '') : TCampaign;

Const
  _HTTPMethod = 'POST';
  _Path       = 'userprofiles/{profileId}/campaigns';
  _Methodid   = 'dfareporting.campaigns.insert';

Var
  _P : String;

begin
  _P:=SubstitutePath(_Path,['profileId',profileId]);
  Result:=ServiceCall(_HTTPMethod,_P,AQuery,aCampaign,TCampaign) as TCampaign;
end;


Function TCampaignsResource.Insert(profileId: string; aCampaign : TCampaign; AQuery : TCampaignsinsertOptions) : TCampaign;

Var
  _Q : String;

begin
  _Q:='';
  AddToQuery(_Q,'defaultLandingPageName',AQuery.defaultLandingPageName);
  AddToQuery(_Q,'defaultLandingPageUrl',AQuery.defaultLandingPageUrl);
  Result:=Insert(profileId,aCampaign,_Q);
end;

Function TCampaignsResource.List(profileId: string; AQuery : string = '') : TCampaignsListResponse;

Const
  _HTTPMethod = 'GET';
  _Path       = 'userprofiles/{profileId}/campaigns';
  _Methodid   = 'dfareporting.campaigns.list';

Var
  _P : String;

begin
  _P:=SubstitutePath(_Path,['profileId',profileId]);
  Result:=ServiceCall(_HTTPMethod,_P,AQuery,Nil,TCampaignsListResponse) as TCampaignsListResponse;
end;


Function TCampaignsResource.List(profileId: string; AQuery : TCampaignslistOptions) : TCampaignsListResponse;

Var
  _Q : String;

begin
  _Q:='';
  AddToQuery(_Q,'advertiserGroupIds',AQuery.advertiserGroupIds);
  AddToQuery(_Q,'advertiserIds',AQuery.advertiserIds);
  AddToQuery(_Q,'archived',AQuery.archived);
  AddToQuery(_Q,'atLeastOneOptimizationActivity',AQuery.atLeastOneOptimizationActivity);
  AddToQuery(_Q,'excludedIds',AQuery.excludedIds);
  AddToQuery(_Q,'ids',AQuery.ids);
  AddToQuery(_Q,'maxResults',AQuery.maxResults);
  AddToQuery(_Q,'overriddenEventTagId',AQuery.overriddenEventTagId);
  AddToQuery(_Q,'pageToken',AQuery.pageToken);
  AddToQuery(_Q,'searchString',AQuery.searchString);
  AddToQuery(_Q,'sortField',AQuery.sortField);
  AddToQuery(_Q,'sortOrder',AQuery.sortOrder);
  AddToQuery(_Q,'subaccountId',AQuery.subaccountId);
  Result:=List(profileId,_Q);
end;

Function TCampaignsResource.Patch(profileId: string; aCampaign : TCampaign; AQuery : string = '') : TCampaign;

Const
  _HTTPMethod = 'PATCH';
  _Path       = 'userprofiles/{profileId}/campaigns';
  _Methodid   = 'dfareporting.campaigns.patch';

Var
  _P : String;

begin
  _P:=SubstitutePath(_Path,['profileId',profileId]);
  Result:=ServiceCall(_HTTPMethod,_P,AQuery,aCampaign,TCampaign) as TCampaign;
end;


Function TCampaignsResource.Patch(profileId: string; aCampaign : TCampaign; AQuery : TCampaignspatchOptions) : TCampaign;

Var
  _Q : String;

begin
  _Q:='';
  AddToQuery(_Q,'id',AQuery.id);
  Result:=Patch(profileId,aCampaign,_Q);
end;

Function TCampaignsResource.Update(profileId: string; aCampaign : TCampaign) : TCampaign;

Const
  _HTTPMethod = 'PUT';
  _Path       = 'userprofiles/{profileId}/campaigns';
  _Methodid   = 'dfareporting.campaigns.update';

Var
  _P : String;

begin
  _P:=SubstitutePath(_Path,['profileId',profileId]);
  Result:=ServiceCall(_HTTPMethod,_P,'',aCampaign,TCampaign) as TCampaign;
end;



{ --------------------------------------------------------------------
  TChangeLogsResource
  --------------------------------------------------------------------}


Class Function TChangeLogsResource.ResourceName : String;

begin
  Result:='changeLogs';
end;

Class Function TChangeLogsResource.DefaultAPI : TGoogleAPIClass;

begin
  Result:=TdfareportingAPI;
end;

Function TChangeLogsResource.Get(id: string; profileId: string) : TChangeLog;

Const
  _HTTPMethod = 'GET';
  _Path       = 'userprofiles/{profileId}/changeLogs/{id}';
  _Methodid   = 'dfareporting.changeLogs.get';

Var
  _P : String;

begin
  _P:=SubstitutePath(_Path,['id',id,'profileId',profileId]);
  Result:=ServiceCall(_HTTPMethod,_P,'',Nil,TChangeLog) as TChangeLog;
end;

Function TChangeLogsResource.List(profileId: string; AQuery : string = '') : TChangeLogsListResponse;

Const
  _HTTPMethod = 'GET';
  _Path       = 'userprofiles/{profileId}/changeLogs';
  _Methodid   = 'dfareporting.changeLogs.list';

Var
  _P : String;

begin
  _P:=SubstitutePath(_Path,['profileId',profileId]);
  Result:=ServiceCall(_HTTPMethod,_P,AQuery,Nil,TChangeLogsListResponse) as TChangeLogsListResponse;
end;


Function TChangeLogsResource.List(profileId: string; AQuery : TChangeLogslistOptions) : TChangeLogsListResponse;

Var
  _Q : String;

begin
  _Q:='';
  AddToQuery(_Q,'action',AQuery.action);
  AddToQuery(_Q,'ids',AQuery.ids);
  AddToQuery(_Q,'maxChangeTime',AQuery.maxChangeTime);
  AddToQuery(_Q,'maxResults',AQuery.maxResults);
  AddToQuery(_Q,'minChangeTime',AQuery.minChangeTime);
  AddToQuery(_Q,'objectIds',AQuery.objectIds);
  AddToQuery(_Q,'objectType',AQuery.objectType);
  AddToQuery(_Q,'pageToken',AQuery.pageToken);
  AddToQuery(_Q,'searchString',AQuery.searchString);
  AddToQuery(_Q,'userProfileIds',AQuery.userProfileIds);
  Result:=List(profileId,_Q);
end;



{ --------------------------------------------------------------------
  TCitiesResource
  --------------------------------------------------------------------}


Class Function TCitiesResource.ResourceName : String;

begin
  Result:='cities';
end;

Class Function TCitiesResource.DefaultAPI : TGoogleAPIClass;

begin
  Result:=TdfareportingAPI;
end;

Function TCitiesResource.List(profileId: string; AQuery : string = '') : TCitiesListResponse;

Const
  _HTTPMethod = 'GET';
  _Path       = 'userprofiles/{profileId}/cities';
  _Methodid   = 'dfareporting.cities.list';

Var
  _P : String;

begin
  _P:=SubstitutePath(_Path,['profileId',profileId]);
  Result:=ServiceCall(_HTTPMethod,_P,AQuery,Nil,TCitiesListResponse) as TCitiesListResponse;
end;


Function TCitiesResource.List(profileId: string; AQuery : TCitieslistOptions) : TCitiesListResponse;

Var
  _Q : String;

begin
  _Q:='';
  AddToQuery(_Q,'countryDartIds',AQuery.countryDartIds);
  AddToQuery(_Q,'dartIds',AQuery.dartIds);
  AddToQuery(_Q,'namePrefix',AQuery.namePrefix);
  AddToQuery(_Q,'regionDartIds',AQuery.regionDartIds);
  Result:=List(profileId,_Q);
end;



{ --------------------------------------------------------------------
  TConnectionTypesResource
  --------------------------------------------------------------------}


Class Function TConnectionTypesResource.ResourceName : String;

begin
  Result:='connectionTypes';
end;

Class Function TConnectionTypesResource.DefaultAPI : TGoogleAPIClass;

begin
  Result:=TdfareportingAPI;
end;

Function TConnectionTypesResource.Get(id: string; profileId: string) : TConnectionType;

Const
  _HTTPMethod = 'GET';
  _Path       = 'userprofiles/{profileId}/connectionTypes/{id}';
  _Methodid   = 'dfareporting.connectionTypes.get';

Var
  _P : String;

begin
  _P:=SubstitutePath(_Path,['id',id,'profileId',profileId]);
  Result:=ServiceCall(_HTTPMethod,_P,'',Nil,TConnectionType) as TConnectionType;
end;

Function TConnectionTypesResource.List(profileId: string) : TConnectionTypesListResponse;

Const
  _HTTPMethod = 'GET';
  _Path       = 'userprofiles/{profileId}/connectionTypes';
  _Methodid   = 'dfareporting.connectionTypes.list';

Var
  _P : String;

begin
  _P:=SubstitutePath(_Path,['profileId',profileId]);
  Result:=ServiceCall(_HTTPMethod,_P,'',Nil,TConnectionTypesListResponse) as TConnectionTypesListResponse;
end;



{ --------------------------------------------------------------------
  TContentCategoriesResource
  --------------------------------------------------------------------}


Class Function TContentCategoriesResource.ResourceName : String;

begin
  Result:='contentCategories';
end;

Class Function TContentCategoriesResource.DefaultAPI : TGoogleAPIClass;

begin
  Result:=TdfareportingAPI;
end;

Procedure TContentCategoriesResource.Delete(id: string; profileId: string);

Const
  _HTTPMethod = 'DELETE';
  _Path       = 'userprofiles/{profileId}/contentCategories/{id}';
  _Methodid   = 'dfareporting.contentCategories.delete';

Var
  _P : String;

begin
  _P:=SubstitutePath(_Path,['id',id,'profileId',profileId]);
  ServiceCall(_HTTPMethod,_P,'',Nil,Nil);
end;

Function TContentCategoriesResource.Get(id: string; profileId: string) : TContentCategory;

Const
  _HTTPMethod = 'GET';
  _Path       = 'userprofiles/{profileId}/contentCategories/{id}';
  _Methodid   = 'dfareporting.contentCategories.get';

Var
  _P : String;

begin
  _P:=SubstitutePath(_Path,['id',id,'profileId',profileId]);
  Result:=ServiceCall(_HTTPMethod,_P,'',Nil,TContentCategory) as TContentCategory;
end;

Function TContentCategoriesResource.Insert(profileId: string; aContentCategory : TContentCategory) : TContentCategory;

Const
  _HTTPMethod = 'POST';
  _Path       = 'userprofiles/{profileId}/contentCategories';
  _Methodid   = 'dfareporting.contentCategories.insert';

Var
  _P : String;

begin
  _P:=SubstitutePath(_Path,['profileId',profileId]);
  Result:=ServiceCall(_HTTPMethod,_P,'',aContentCategory,TContentCategory) as TContentCategory;
end;

Function TContentCategoriesResource.List(profileId: string; AQuery : string = '') : TContentCategoriesListResponse;

Const
  _HTTPMethod = 'GET';
  _Path       = 'userprofiles/{profileId}/contentCategories';
  _Methodid   = 'dfareporting.contentCategories.list';

Var
  _P : String;

begin
  _P:=SubstitutePath(_Path,['profileId',profileId]);
  Result:=ServiceCall(_HTTPMethod,_P,AQuery,Nil,TContentCategoriesListResponse) as TContentCategoriesListResponse;
end;


Function TContentCategoriesResource.List(profileId: string; AQuery : TContentCategorieslistOptions) : TContentCategoriesListResponse;

Var
  _Q : String;

begin
  _Q:='';
  AddToQuery(_Q,'ids',AQuery.ids);
  AddToQuery(_Q,'maxResults',AQuery.maxResults);
  AddToQuery(_Q,'pageToken',AQuery.pageToken);
  AddToQuery(_Q,'searchString',AQuery.searchString);
  AddToQuery(_Q,'sortField',AQuery.sortField);
  AddToQuery(_Q,'sortOrder',AQuery.sortOrder);
  Result:=List(profileId,_Q);
end;

Function TContentCategoriesResource.Patch(profileId: string; aContentCategory : TContentCategory; AQuery : string = '') : TContentCategory;

Const
  _HTTPMethod = 'PATCH';
  _Path       = 'userprofiles/{profileId}/contentCategories';
  _Methodid   = 'dfareporting.contentCategories.patch';

Var
  _P : String;

begin
  _P:=SubstitutePath(_Path,['profileId',profileId]);
  Result:=ServiceCall(_HTTPMethod,_P,AQuery,aContentCategory,TContentCategory) as TContentCategory;
end;


Function TContentCategoriesResource.Patch(profileId: string; aContentCategory : TContentCategory; AQuery : TContentCategoriespatchOptions) : TContentCategory;

Var
  _Q : String;

begin
  _Q:='';
  AddToQuery(_Q,'id',AQuery.id);
  Result:=Patch(profileId,aContentCategory,_Q);
end;

Function TContentCategoriesResource.Update(profileId: string; aContentCategory : TContentCategory) : TContentCategory;

Const
  _HTTPMethod = 'PUT';
  _Path       = 'userprofiles/{profileId}/contentCategories';
  _Methodid   = 'dfareporting.contentCategories.update';

Var
  _P : String;

begin
  _P:=SubstitutePath(_Path,['profileId',profileId]);
  Result:=ServiceCall(_HTTPMethod,_P,'',aContentCategory,TContentCategory) as TContentCategory;
end;



{ --------------------------------------------------------------------
  TCountriesResource
  --------------------------------------------------------------------}


Class Function TCountriesResource.ResourceName : String;

begin
  Result:='countries';
end;

Class Function TCountriesResource.DefaultAPI : TGoogleAPIClass;

begin
  Result:=TdfareportingAPI;
end;

Function TCountriesResource.Get(dartId: string; profileId: string) : TCountry;

Const
  _HTTPMethod = 'GET';
  _Path       = 'userprofiles/{profileId}/countries/{dartId}';
  _Methodid   = 'dfareporting.countries.get';

Var
  _P : String;

begin
  _P:=SubstitutePath(_Path,['dartId',dartId,'profileId',profileId]);
  Result:=ServiceCall(_HTTPMethod,_P,'',Nil,TCountry) as TCountry;
end;

Function TCountriesResource.List(profileId: string) : TCountriesListResponse;

Const
  _HTTPMethod = 'GET';
  _Path       = 'userprofiles/{profileId}/countries';
  _Methodid   = 'dfareporting.countries.list';

Var
  _P : String;

begin
  _P:=SubstitutePath(_Path,['profileId',profileId]);
  Result:=ServiceCall(_HTTPMethod,_P,'',Nil,TCountriesListResponse) as TCountriesListResponse;
end;



{ --------------------------------------------------------------------
  TCreativeAssetsResource
  --------------------------------------------------------------------}


Class Function TCreativeAssetsResource.ResourceName : String;

begin
  Result:='creativeAssets';
end;

Class Function TCreativeAssetsResource.DefaultAPI : TGoogleAPIClass;

begin
  Result:=TdfareportingAPI;
end;

Function TCreativeAssetsResource.Insert(advertiserId: string; profileId: string; aCreativeAssetMetadata : TCreativeAssetMetadata) : TCreativeAssetMetadata;

Const
  _HTTPMethod = 'POST';
  _Path       = 'userprofiles/{profileId}/creativeAssets/{advertiserId}/creativeAssets';
  _Methodid   = 'dfareporting.creativeAssets.insert';

Var
  _P : String;

begin
  _P:=SubstitutePath(_Path,['advertiserId',advertiserId,'profileId',profileId]);
  Result:=ServiceCall(_HTTPMethod,_P,'',aCreativeAssetMetadata,TCreativeAssetMetadata) as TCreativeAssetMetadata;
end;



{ --------------------------------------------------------------------
  TCreativeFieldValuesResource
  --------------------------------------------------------------------}


Class Function TCreativeFieldValuesResource.ResourceName : String;

begin
  Result:='creativeFieldValues';
end;

Class Function TCreativeFieldValuesResource.DefaultAPI : TGoogleAPIClass;

begin
  Result:=TdfareportingAPI;
end;

Procedure TCreativeFieldValuesResource.Delete(creativeFieldId: string; id: string; profileId: string);

Const
  _HTTPMethod = 'DELETE';
  _Path       = 'userprofiles/{profileId}/creativeFields/{creativeFieldId}/creativeFieldValues/{id}';
  _Methodid   = 'dfareporting.creativeFieldValues.delete';

Var
  _P : String;

begin
  _P:=SubstitutePath(_Path,['creativeFieldId',creativeFieldId,'id',id,'profileId',profileId]);
  ServiceCall(_HTTPMethod,_P,'',Nil,Nil);
end;

Function TCreativeFieldValuesResource.Get(creativeFieldId: string; id: string; profileId: string) : TCreativeFieldValue;

Const
  _HTTPMethod = 'GET';
  _Path       = 'userprofiles/{profileId}/creativeFields/{creativeFieldId}/creativeFieldValues/{id}';
  _Methodid   = 'dfareporting.creativeFieldValues.get';

Var
  _P : String;

begin
  _P:=SubstitutePath(_Path,['creativeFieldId',creativeFieldId,'id',id,'profileId',profileId]);
  Result:=ServiceCall(_HTTPMethod,_P,'',Nil,TCreativeFieldValue) as TCreativeFieldValue;
end;

Function TCreativeFieldValuesResource.Insert(creativeFieldId: string; profileId: string; aCreativeFieldValue : TCreativeFieldValue) : TCreativeFieldValue;

Const
  _HTTPMethod = 'POST';
  _Path       = 'userprofiles/{profileId}/creativeFields/{creativeFieldId}/creativeFieldValues';
  _Methodid   = 'dfareporting.creativeFieldValues.insert';

Var
  _P : String;

begin
  _P:=SubstitutePath(_Path,['creativeFieldId',creativeFieldId,'profileId',profileId]);
  Result:=ServiceCall(_HTTPMethod,_P,'',aCreativeFieldValue,TCreativeFieldValue) as TCreativeFieldValue;
end;

Function TCreativeFieldValuesResource.List(creativeFieldId: string; profileId: string; AQuery : string = '') : TCreativeFieldValuesListResponse;

Const
  _HTTPMethod = 'GET';
  _Path       = 'userprofiles/{profileId}/creativeFields/{creativeFieldId}/creativeFieldValues';
  _Methodid   = 'dfareporting.creativeFieldValues.list';

Var
  _P : String;

begin
  _P:=SubstitutePath(_Path,['creativeFieldId',creativeFieldId,'profileId',profileId]);
  Result:=ServiceCall(_HTTPMethod,_P,AQuery,Nil,TCreativeFieldValuesListResponse) as TCreativeFieldValuesListResponse;
end;


Function TCreativeFieldValuesResource.List(creativeFieldId: string; profileId: string; AQuery : TCreativeFieldValueslistOptions) : TCreativeFieldValuesListResponse;

Var
  _Q : String;

begin
  _Q:='';
  AddToQuery(_Q,'ids',AQuery.ids);
  AddToQuery(_Q,'maxResults',AQuery.maxResults);
  AddToQuery(_Q,'pageToken',AQuery.pageToken);
  AddToQuery(_Q,'searchString',AQuery.searchString);
  AddToQuery(_Q,'sortField',AQuery.sortField);
  AddToQuery(_Q,'sortOrder',AQuery.sortOrder);
  Result:=List(creativeFieldId,profileId,_Q);
end;

Function TCreativeFieldValuesResource.Patch(creativeFieldId: string; profileId: string; aCreativeFieldValue : TCreativeFieldValue; AQuery : string = '') : TCreativeFieldValue;

Const
  _HTTPMethod = 'PATCH';
  _Path       = 'userprofiles/{profileId}/creativeFields/{creativeFieldId}/creativeFieldValues';
  _Methodid   = 'dfareporting.creativeFieldValues.patch';

Var
  _P : String;

begin
  _P:=SubstitutePath(_Path,['creativeFieldId',creativeFieldId,'profileId',profileId]);
  Result:=ServiceCall(_HTTPMethod,_P,AQuery,aCreativeFieldValue,TCreativeFieldValue) as TCreativeFieldValue;
end;


Function TCreativeFieldValuesResource.Patch(creativeFieldId: string; profileId: string; aCreativeFieldValue : TCreativeFieldValue; AQuery : TCreativeFieldValuespatchOptions) : TCreativeFieldValue;

Var
  _Q : String;

begin
  _Q:='';
  AddToQuery(_Q,'id',AQuery.id);
  Result:=Patch(creativeFieldId,profileId,aCreativeFieldValue,_Q);
end;

Function TCreativeFieldValuesResource.Update(creativeFieldId: string; profileId: string; aCreativeFieldValue : TCreativeFieldValue) : TCreativeFieldValue;

Const
  _HTTPMethod = 'PUT';
  _Path       = 'userprofiles/{profileId}/creativeFields/{creativeFieldId}/creativeFieldValues';
  _Methodid   = 'dfareporting.creativeFieldValues.update';

Var
  _P : String;

begin
  _P:=SubstitutePath(_Path,['creativeFieldId',creativeFieldId,'profileId',profileId]);
  Result:=ServiceCall(_HTTPMethod,_P,'',aCreativeFieldValue,TCreativeFieldValue) as TCreativeFieldValue;
end;



{ --------------------------------------------------------------------
  TCreativeFieldsResource
  --------------------------------------------------------------------}


Class Function TCreativeFieldsResource.ResourceName : String;

begin
  Result:='creativeFields';
end;

Class Function TCreativeFieldsResource.DefaultAPI : TGoogleAPIClass;

begin
  Result:=TdfareportingAPI;
end;

Procedure TCreativeFieldsResource.Delete(id: string; profileId: string);

Const
  _HTTPMethod = 'DELETE';
  _Path       = 'userprofiles/{profileId}/creativeFields/{id}';
  _Methodid   = 'dfareporting.creativeFields.delete';

Var
  _P : String;

begin
  _P:=SubstitutePath(_Path,['id',id,'profileId',profileId]);
  ServiceCall(_HTTPMethod,_P,'',Nil,Nil);
end;

Function TCreativeFieldsResource.Get(id: string; profileId: string) : TCreativeField;

Const
  _HTTPMethod = 'GET';
  _Path       = 'userprofiles/{profileId}/creativeFields/{id}';
  _Methodid   = 'dfareporting.creativeFields.get';

Var
  _P : String;

begin
  _P:=SubstitutePath(_Path,['id',id,'profileId',profileId]);
  Result:=ServiceCall(_HTTPMethod,_P,'',Nil,TCreativeField) as TCreativeField;
end;

Function TCreativeFieldsResource.Insert(profileId: string; aCreativeField : TCreativeField) : TCreativeField;

Const
  _HTTPMethod = 'POST';
  _Path       = 'userprofiles/{profileId}/creativeFields';
  _Methodid   = 'dfareporting.creativeFields.insert';

Var
  _P : String;

begin
  _P:=SubstitutePath(_Path,['profileId',profileId]);
  Result:=ServiceCall(_HTTPMethod,_P,'',aCreativeField,TCreativeField) as TCreativeField;
end;

Function TCreativeFieldsResource.List(profileId: string; AQuery : string = '') : TCreativeFieldsListResponse;

Const
  _HTTPMethod = 'GET';
  _Path       = 'userprofiles/{profileId}/creativeFields';
  _Methodid   = 'dfareporting.creativeFields.list';

Var
  _P : String;

begin
  _P:=SubstitutePath(_Path,['profileId',profileId]);
  Result:=ServiceCall(_HTTPMethod,_P,AQuery,Nil,TCreativeFieldsListResponse) as TCreativeFieldsListResponse;
end;


Function TCreativeFieldsResource.List(profileId: string; AQuery : TCreativeFieldslistOptions) : TCreativeFieldsListResponse;

Var
  _Q : String;

begin
  _Q:='';
  AddToQuery(_Q,'advertiserIds',AQuery.advertiserIds);
  AddToQuery(_Q,'ids',AQuery.ids);
  AddToQuery(_Q,'maxResults',AQuery.maxResults);
  AddToQuery(_Q,'pageToken',AQuery.pageToken);
  AddToQuery(_Q,'searchString',AQuery.searchString);
  AddToQuery(_Q,'sortField',AQuery.sortField);
  AddToQuery(_Q,'sortOrder',AQuery.sortOrder);
  Result:=List(profileId,_Q);
end;

Function TCreativeFieldsResource.Patch(profileId: string; aCreativeField : TCreativeField; AQuery : string = '') : TCreativeField;

Const
  _HTTPMethod = 'PATCH';
  _Path       = 'userprofiles/{profileId}/creativeFields';
  _Methodid   = 'dfareporting.creativeFields.patch';

Var
  _P : String;

begin
  _P:=SubstitutePath(_Path,['profileId',profileId]);
  Result:=ServiceCall(_HTTPMethod,_P,AQuery,aCreativeField,TCreativeField) as TCreativeField;
end;


Function TCreativeFieldsResource.Patch(profileId: string; aCreativeField : TCreativeField; AQuery : TCreativeFieldspatchOptions) : TCreativeField;

Var
  _Q : String;

begin
  _Q:='';
  AddToQuery(_Q,'id',AQuery.id);
  Result:=Patch(profileId,aCreativeField,_Q);
end;

Function TCreativeFieldsResource.Update(profileId: string; aCreativeField : TCreativeField) : TCreativeField;

Const
  _HTTPMethod = 'PUT';
  _Path       = 'userprofiles/{profileId}/creativeFields';
  _Methodid   = 'dfareporting.creativeFields.update';

Var
  _P : String;

begin
  _P:=SubstitutePath(_Path,['profileId',profileId]);
  Result:=ServiceCall(_HTTPMethod,_P,'',aCreativeField,TCreativeField) as TCreativeField;
end;



{ --------------------------------------------------------------------
  TCreativeGroupsResource
  --------------------------------------------------------------------}


Class Function TCreativeGroupsResource.ResourceName : String;

begin
  Result:='creativeGroups';
end;

Class Function TCreativeGroupsResource.DefaultAPI : TGoogleAPIClass;

begin
  Result:=TdfareportingAPI;
end;

Function TCreativeGroupsResource.Get(id: string; profileId: string) : TCreativeGroup;

Const
  _HTTPMethod = 'GET';
  _Path       = 'userprofiles/{profileId}/creativeGroups/{id}';
  _Methodid   = 'dfareporting.creativeGroups.get';

Var
  _P : String;

begin
  _P:=SubstitutePath(_Path,['id',id,'profileId',profileId]);
  Result:=ServiceCall(_HTTPMethod,_P,'',Nil,TCreativeGroup) as TCreativeGroup;
end;

Function TCreativeGroupsResource.Insert(profileId: string; aCreativeGroup : TCreativeGroup) : TCreativeGroup;

Const
  _HTTPMethod = 'POST';
  _Path       = 'userprofiles/{profileId}/creativeGroups';
  _Methodid   = 'dfareporting.creativeGroups.insert';

Var
  _P : String;

begin
  _P:=SubstitutePath(_Path,['profileId',profileId]);
  Result:=ServiceCall(_HTTPMethod,_P,'',aCreativeGroup,TCreativeGroup) as TCreativeGroup;
end;

Function TCreativeGroupsResource.List(profileId: string; AQuery : string = '') : TCreativeGroupsListResponse;

Const
  _HTTPMethod = 'GET';
  _Path       = 'userprofiles/{profileId}/creativeGroups';
  _Methodid   = 'dfareporting.creativeGroups.list';

Var
  _P : String;

begin
  _P:=SubstitutePath(_Path,['profileId',profileId]);
  Result:=ServiceCall(_HTTPMethod,_P,AQuery,Nil,TCreativeGroupsListResponse) as TCreativeGroupsListResponse;
end;


Function TCreativeGroupsResource.List(profileId: string; AQuery : TCreativeGroupslistOptions) : TCreativeGroupsListResponse;

Var
  _Q : String;

begin
  _Q:='';
  AddToQuery(_Q,'advertiserIds',AQuery.advertiserIds);
  AddToQuery(_Q,'groupNumber',AQuery.groupNumber);
  AddToQuery(_Q,'ids',AQuery.ids);
  AddToQuery(_Q,'maxResults',AQuery.maxResults);
  AddToQuery(_Q,'pageToken',AQuery.pageToken);
  AddToQuery(_Q,'searchString',AQuery.searchString);
  AddToQuery(_Q,'sortField',AQuery.sortField);
  AddToQuery(_Q,'sortOrder',AQuery.sortOrder);
  Result:=List(profileId,_Q);
end;

Function TCreativeGroupsResource.Patch(profileId: string; aCreativeGroup : TCreativeGroup; AQuery : string = '') : TCreativeGroup;

Const
  _HTTPMethod = 'PATCH';
  _Path       = 'userprofiles/{profileId}/creativeGroups';
  _Methodid   = 'dfareporting.creativeGroups.patch';

Var
  _P : String;

begin
  _P:=SubstitutePath(_Path,['profileId',profileId]);
  Result:=ServiceCall(_HTTPMethod,_P,AQuery,aCreativeGroup,TCreativeGroup) as TCreativeGroup;
end;


Function TCreativeGroupsResource.Patch(profileId: string; aCreativeGroup : TCreativeGroup; AQuery : TCreativeGroupspatchOptions) : TCreativeGroup;

Var
  _Q : String;

begin
  _Q:='';
  AddToQuery(_Q,'id',AQuery.id);
  Result:=Patch(profileId,aCreativeGroup,_Q);
end;

Function TCreativeGroupsResource.Update(profileId: string; aCreativeGroup : TCreativeGroup) : TCreativeGroup;

Const
  _HTTPMethod = 'PUT';
  _Path       = 'userprofiles/{profileId}/creativeGroups';
  _Methodid   = 'dfareporting.creativeGroups.update';

Var
  _P : String;

begin
  _P:=SubstitutePath(_Path,['profileId',profileId]);
  Result:=ServiceCall(_HTTPMethod,_P,'',aCreativeGroup,TCreativeGroup) as TCreativeGroup;
end;



{ --------------------------------------------------------------------
  TCreativesResource
  --------------------------------------------------------------------}


Class Function TCreativesResource.ResourceName : String;

begin
  Result:='creatives';
end;

Class Function TCreativesResource.DefaultAPI : TGoogleAPIClass;

begin
  Result:=TdfareportingAPI;
end;

Function TCreativesResource.Get(id: string; profileId: string) : TCreative;

Const
  _HTTPMethod = 'GET';
  _Path       = 'userprofiles/{profileId}/creatives/{id}';
  _Methodid   = 'dfareporting.creatives.get';

Var
  _P : String;

begin
  _P:=SubstitutePath(_Path,['id',id,'profileId',profileId]);
  Result:=ServiceCall(_HTTPMethod,_P,'',Nil,TCreative) as TCreative;
end;

Function TCreativesResource.Insert(profileId: string; aCreative : TCreative) : TCreative;

Const
  _HTTPMethod = 'POST';
  _Path       = 'userprofiles/{profileId}/creatives';
  _Methodid   = 'dfareporting.creatives.insert';

Var
  _P : String;

begin
  _P:=SubstitutePath(_Path,['profileId',profileId]);
  Result:=ServiceCall(_HTTPMethod,_P,'',aCreative,TCreative) as TCreative;
end;

Function TCreativesResource.List(profileId: string; AQuery : string = '') : TCreativesListResponse;

Const
  _HTTPMethod = 'GET';
  _Path       = 'userprofiles/{profileId}/creatives';
  _Methodid   = 'dfareporting.creatives.list';

Var
  _P : String;

begin
  _P:=SubstitutePath(_Path,['profileId',profileId]);
  Result:=ServiceCall(_HTTPMethod,_P,AQuery,Nil,TCreativesListResponse) as TCreativesListResponse;
end;


Function TCreativesResource.List(profileId: string; AQuery : TCreativeslistOptions) : TCreativesListResponse;

Var
  _Q : String;

begin
  _Q:='';
  AddToQuery(_Q,'active',AQuery.active);
  AddToQuery(_Q,'advertiserId',AQuery.advertiserId);
  AddToQuery(_Q,'archived',AQuery.archived);
  AddToQuery(_Q,'campaignId',AQuery.campaignId);
  AddToQuery(_Q,'companionCreativeIds',AQuery.companionCreativeIds);
  AddToQuery(_Q,'creativeFieldIds',AQuery.creativeFieldIds);
  AddToQuery(_Q,'ids',AQuery.ids);
  AddToQuery(_Q,'maxResults',AQuery.maxResults);
  AddToQuery(_Q,'pageToken',AQuery.pageToken);
  AddToQuery(_Q,'renderingIds',AQuery.renderingIds);
  AddToQuery(_Q,'searchString',AQuery.searchString);
  AddToQuery(_Q,'sizeIds',AQuery.sizeIds);
  AddToQuery(_Q,'sortField',AQuery.sortField);
  AddToQuery(_Q,'sortOrder',AQuery.sortOrder);
  AddToQuery(_Q,'studioCreativeId',AQuery.studioCreativeId);
  AddToQuery(_Q,'types',AQuery.types);
  Result:=List(profileId,_Q);
end;

Function TCreativesResource.Patch(profileId: string; aCreative : TCreative; AQuery : string = '') : TCreative;

Const
  _HTTPMethod = 'PATCH';
  _Path       = 'userprofiles/{profileId}/creatives';
  _Methodid   = 'dfareporting.creatives.patch';

Var
  _P : String;

begin
  _P:=SubstitutePath(_Path,['profileId',profileId]);
  Result:=ServiceCall(_HTTPMethod,_P,AQuery,aCreative,TCreative) as TCreative;
end;


Function TCreativesResource.Patch(profileId: string; aCreative : TCreative; AQuery : TCreativespatchOptions) : TCreative;

Var
  _Q : String;

begin
  _Q:='';
  AddToQuery(_Q,'id',AQuery.id);
  Result:=Patch(profileId,aCreative,_Q);
end;

Function TCreativesResource.Update(profileId: string; aCreative : TCreative) : TCreative;

Const
  _HTTPMethod = 'PUT';
  _Path       = 'userprofiles/{profileId}/creatives';
  _Methodid   = 'dfareporting.creatives.update';

Var
  _P : String;

begin
  _P:=SubstitutePath(_Path,['profileId',profileId]);
  Result:=ServiceCall(_HTTPMethod,_P,'',aCreative,TCreative) as TCreative;
end;



{ --------------------------------------------------------------------
  TDimensionValuesResource
  --------------------------------------------------------------------}


Class Function TDimensionValuesResource.ResourceName : String;

begin
  Result:='dimensionValues';
end;

Class Function TDimensionValuesResource.DefaultAPI : TGoogleAPIClass;

begin
  Result:=TdfareportingAPI;
end;

Function TDimensionValuesResource.Query(profileId: string; aDimensionValueRequest : TDimensionValueRequest; AQuery : string = '') : TDimensionValueList;

Const
  _HTTPMethod = 'POST';
  _Path       = 'userprofiles/{profileId}/dimensionvalues/query';
  _Methodid   = 'dfareporting.dimensionValues.query';

Var
  _P : String;

begin
  _P:=SubstitutePath(_Path,['profileId',profileId]);
  Result:=ServiceCall(_HTTPMethod,_P,AQuery,aDimensionValueRequest,TDimensionValueList) as TDimensionValueList;
end;


Function TDimensionValuesResource.Query(profileId: string; aDimensionValueRequest : TDimensionValueRequest; AQuery : TDimensionValuesqueryOptions) : TDimensionValueList;

Var
  _Q : String;

begin
  _Q:='';
  AddToQuery(_Q,'maxResults',AQuery.maxResults);
  AddToQuery(_Q,'pageToken',AQuery.pageToken);
  Result:=Query(profileId,aDimensionValueRequest,_Q);
end;



{ --------------------------------------------------------------------
  TDirectorySiteContactsResource
  --------------------------------------------------------------------}


Class Function TDirectorySiteContactsResource.ResourceName : String;

begin
  Result:='directorySiteContacts';
end;

Class Function TDirectorySiteContactsResource.DefaultAPI : TGoogleAPIClass;

begin
  Result:=TdfareportingAPI;
end;

Function TDirectorySiteContactsResource.Get(id: string; profileId: string) : TDirectorySiteContact;

Const
  _HTTPMethod = 'GET';
  _Path       = 'userprofiles/{profileId}/directorySiteContacts/{id}';
  _Methodid   = 'dfareporting.directorySiteContacts.get';

Var
  _P : String;

begin
  _P:=SubstitutePath(_Path,['id',id,'profileId',profileId]);
  Result:=ServiceCall(_HTTPMethod,_P,'',Nil,TDirectorySiteContact) as TDirectorySiteContact;
end;

Function TDirectorySiteContactsResource.List(profileId: string; AQuery : string = '') : TDirectorySiteContactsListResponse;

Const
  _HTTPMethod = 'GET';
  _Path       = 'userprofiles/{profileId}/directorySiteContacts';
  _Methodid   = 'dfareporting.directorySiteContacts.list';

Var
  _P : String;

begin
  _P:=SubstitutePath(_Path,['profileId',profileId]);
  Result:=ServiceCall(_HTTPMethod,_P,AQuery,Nil,TDirectorySiteContactsListResponse) as TDirectorySiteContactsListResponse;
end;


Function TDirectorySiteContactsResource.List(profileId: string; AQuery : TDirectorySiteContactslistOptions) : TDirectorySiteContactsListResponse;

Var
  _Q : String;

begin
  _Q:='';
  AddToQuery(_Q,'directorySiteIds',AQuery.directorySiteIds);
  AddToQuery(_Q,'ids',AQuery.ids);
  AddToQuery(_Q,'maxResults',AQuery.maxResults);
  AddToQuery(_Q,'pageToken',AQuery.pageToken);
  AddToQuery(_Q,'searchString',AQuery.searchString);
  AddToQuery(_Q,'sortField',AQuery.sortField);
  AddToQuery(_Q,'sortOrder',AQuery.sortOrder);
  Result:=List(profileId,_Q);
end;



{ --------------------------------------------------------------------
  TDirectorySitesResource
  --------------------------------------------------------------------}


Class Function TDirectorySitesResource.ResourceName : String;

begin
  Result:='directorySites';
end;

Class Function TDirectorySitesResource.DefaultAPI : TGoogleAPIClass;

begin
  Result:=TdfareportingAPI;
end;

Function TDirectorySitesResource.Get(id: string; profileId: string) : TDirectorySite;

Const
  _HTTPMethod = 'GET';
  _Path       = 'userprofiles/{profileId}/directorySites/{id}';
  _Methodid   = 'dfareporting.directorySites.get';

Var
  _P : String;

begin
  _P:=SubstitutePath(_Path,['id',id,'profileId',profileId]);
  Result:=ServiceCall(_HTTPMethod,_P,'',Nil,TDirectorySite) as TDirectorySite;
end;

Function TDirectorySitesResource.Insert(profileId: string; aDirectorySite : TDirectorySite) : TDirectorySite;

Const
  _HTTPMethod = 'POST';
  _Path       = 'userprofiles/{profileId}/directorySites';
  _Methodid   = 'dfareporting.directorySites.insert';

Var
  _P : String;

begin
  _P:=SubstitutePath(_Path,['profileId',profileId]);
  Result:=ServiceCall(_HTTPMethod,_P,'',aDirectorySite,TDirectorySite) as TDirectorySite;
end;

Function TDirectorySitesResource.List(profileId: string; AQuery : string = '') : TDirectorySitesListResponse;

Const
  _HTTPMethod = 'GET';
  _Path       = 'userprofiles/{profileId}/directorySites';
  _Methodid   = 'dfareporting.directorySites.list';

Var
  _P : String;

begin
  _P:=SubstitutePath(_Path,['profileId',profileId]);
  Result:=ServiceCall(_HTTPMethod,_P,AQuery,Nil,TDirectorySitesListResponse) as TDirectorySitesListResponse;
end;


Function TDirectorySitesResource.List(profileId: string; AQuery : TDirectorySiteslistOptions) : TDirectorySitesListResponse;

Var
  _Q : String;

begin
  _Q:='';
  AddToQuery(_Q,'acceptsInStreamVideoPlacements',AQuery.acceptsInStreamVideoPlacements);
  AddToQuery(_Q,'acceptsInterstitialPlacements',AQuery.acceptsInterstitialPlacements);
  AddToQuery(_Q,'acceptsPublisherPaidPlacements',AQuery.acceptsPublisherPaidPlacements);
  AddToQuery(_Q,'active',AQuery.active);
  AddToQuery(_Q,'countryId',AQuery.countryId);
  AddToQuery(_Q,'dfp_network_code',AQuery.dfp_network_code);
  AddToQuery(_Q,'ids',AQuery.ids);
  AddToQuery(_Q,'maxResults',AQuery.maxResults);
  AddToQuery(_Q,'pageToken',AQuery.pageToken);
  AddToQuery(_Q,'parentId',AQuery.parentId);
  AddToQuery(_Q,'searchString',AQuery.searchString);
  AddToQuery(_Q,'sortField',AQuery.sortField);
  AddToQuery(_Q,'sortOrder',AQuery.sortOrder);
  Result:=List(profileId,_Q);
end;



{ --------------------------------------------------------------------
  TEventTagsResource
  --------------------------------------------------------------------}


Class Function TEventTagsResource.ResourceName : String;

begin
  Result:='eventTags';
end;

Class Function TEventTagsResource.DefaultAPI : TGoogleAPIClass;

begin
  Result:=TdfareportingAPI;
end;

Procedure TEventTagsResource.Delete(id: string; profileId: string);

Const
  _HTTPMethod = 'DELETE';
  _Path       = 'userprofiles/{profileId}/eventTags/{id}';
  _Methodid   = 'dfareporting.eventTags.delete';

Var
  _P : String;

begin
  _P:=SubstitutePath(_Path,['id',id,'profileId',profileId]);
  ServiceCall(_HTTPMethod,_P,'',Nil,Nil);
end;

Function TEventTagsResource.Get(id: string; profileId: string) : TEventTag;

Const
  _HTTPMethod = 'GET';
  _Path       = 'userprofiles/{profileId}/eventTags/{id}';
  _Methodid   = 'dfareporting.eventTags.get';

Var
  _P : String;

begin
  _P:=SubstitutePath(_Path,['id',id,'profileId',profileId]);
  Result:=ServiceCall(_HTTPMethod,_P,'',Nil,TEventTag) as TEventTag;
end;

Function TEventTagsResource.Insert(profileId: string; aEventTag : TEventTag) : TEventTag;

Const
  _HTTPMethod = 'POST';
  _Path       = 'userprofiles/{profileId}/eventTags';
  _Methodid   = 'dfareporting.eventTags.insert';

Var
  _P : String;

begin
  _P:=SubstitutePath(_Path,['profileId',profileId]);
  Result:=ServiceCall(_HTTPMethod,_P,'',aEventTag,TEventTag) as TEventTag;
end;

Function TEventTagsResource.List(profileId: string; AQuery : string = '') : TEventTagsListResponse;

Const
  _HTTPMethod = 'GET';
  _Path       = 'userprofiles/{profileId}/eventTags';
  _Methodid   = 'dfareporting.eventTags.list';

Var
  _P : String;

begin
  _P:=SubstitutePath(_Path,['profileId',profileId]);
  Result:=ServiceCall(_HTTPMethod,_P,AQuery,Nil,TEventTagsListResponse) as TEventTagsListResponse;
end;


Function TEventTagsResource.List(profileId: string; AQuery : TEventTagslistOptions) : TEventTagsListResponse;

Var
  _Q : String;

begin
  _Q:='';
  AddToQuery(_Q,'adId',AQuery.adId);
  AddToQuery(_Q,'advertiserId',AQuery.advertiserId);
  AddToQuery(_Q,'campaignId',AQuery.campaignId);
  AddToQuery(_Q,'definitionsOnly',AQuery.definitionsOnly);
  AddToQuery(_Q,'enabled',AQuery.enabled);
  AddToQuery(_Q,'eventTagTypes',AQuery.eventTagTypes);
  AddToQuery(_Q,'ids',AQuery.ids);
  AddToQuery(_Q,'searchString',AQuery.searchString);
  AddToQuery(_Q,'sortField',AQuery.sortField);
  AddToQuery(_Q,'sortOrder',AQuery.sortOrder);
  Result:=List(profileId,_Q);
end;

Function TEventTagsResource.Patch(profileId: string; aEventTag : TEventTag; AQuery : string = '') : TEventTag;

Const
  _HTTPMethod = 'PATCH';
  _Path       = 'userprofiles/{profileId}/eventTags';
  _Methodid   = 'dfareporting.eventTags.patch';

Var
  _P : String;

begin
  _P:=SubstitutePath(_Path,['profileId',profileId]);
  Result:=ServiceCall(_HTTPMethod,_P,AQuery,aEventTag,TEventTag) as TEventTag;
end;


Function TEventTagsResource.Patch(profileId: string; aEventTag : TEventTag; AQuery : TEventTagspatchOptions) : TEventTag;

Var
  _Q : String;

begin
  _Q:='';
  AddToQuery(_Q,'id',AQuery.id);
  Result:=Patch(profileId,aEventTag,_Q);
end;

Function TEventTagsResource.Update(profileId: string; aEventTag : TEventTag) : TEventTag;

Const
  _HTTPMethod = 'PUT';
  _Path       = 'userprofiles/{profileId}/eventTags';
  _Methodid   = 'dfareporting.eventTags.update';

Var
  _P : String;

begin
  _P:=SubstitutePath(_Path,['profileId',profileId]);
  Result:=ServiceCall(_HTTPMethod,_P,'',aEventTag,TEventTag) as TEventTag;
end;



{ --------------------------------------------------------------------
  TFilesResource
  --------------------------------------------------------------------}


Class Function TFilesResource.ResourceName : String;

begin
  Result:='files';
end;

Class Function TFilesResource.DefaultAPI : TGoogleAPIClass;

begin
  Result:=TdfareportingAPI;
end;

Function TFilesResource.Get(fileId: string; reportId: string) : TFile;

Const
  _HTTPMethod = 'GET';
  _Path       = 'reports/{reportId}/files/{fileId}';
  _Methodid   = 'dfareporting.files.get';

Var
  _P : String;

begin
  _P:=SubstitutePath(_Path,['fileId',fileId,'reportId',reportId]);
  Result:=ServiceCall(_HTTPMethod,_P,'',Nil,TFile) as TFile;
end;

Function TFilesResource.List(profileId: string; AQuery : string = '') : TFileList;

Const
  _HTTPMethod = 'GET';
  _Path       = 'userprofiles/{profileId}/files';
  _Methodid   = 'dfareporting.files.list';

Var
  _P : String;

begin
  _P:=SubstitutePath(_Path,['profileId',profileId]);
  Result:=ServiceCall(_HTTPMethod,_P,AQuery,Nil,TFileList) as TFileList;
end;


Function TFilesResource.List(profileId: string; AQuery : TFileslistOptions) : TFileList;

Var
  _Q : String;

begin
  _Q:='';
  AddToQuery(_Q,'maxResults',AQuery.maxResults);
  AddToQuery(_Q,'pageToken',AQuery.pageToken);
  AddToQuery(_Q,'scope',AQuery.scope);
  AddToQuery(_Q,'sortField',AQuery.sortField);
  AddToQuery(_Q,'sortOrder',AQuery.sortOrder);
  Result:=List(profileId,_Q);
end;



{ --------------------------------------------------------------------
  TFloodlightActivitiesResource
  --------------------------------------------------------------------}


Class Function TFloodlightActivitiesResource.ResourceName : String;

begin
  Result:='floodlightActivities';
end;

Class Function TFloodlightActivitiesResource.DefaultAPI : TGoogleAPIClass;

begin
  Result:=TdfareportingAPI;
end;

Procedure TFloodlightActivitiesResource.Delete(id: string; profileId: string);

Const
  _HTTPMethod = 'DELETE';
  _Path       = 'userprofiles/{profileId}/floodlightActivities/{id}';
  _Methodid   = 'dfareporting.floodlightActivities.delete';

Var
  _P : String;

begin
  _P:=SubstitutePath(_Path,['id',id,'profileId',profileId]);
  ServiceCall(_HTTPMethod,_P,'',Nil,Nil);
end;

Function TFloodlightActivitiesResource.Generatetag(profileId: string; AQuery : string = '') : TFloodlightActivitiesGenerateTagResponse;

Const
  _HTTPMethod = 'POST';
  _Path       = 'userprofiles/{profileId}/floodlightActivities/generatetag';
  _Methodid   = 'dfareporting.floodlightActivities.generatetag';

Var
  _P : String;

begin
  _P:=SubstitutePath(_Path,['profileId',profileId]);
  Result:=ServiceCall(_HTTPMethod,_P,AQuery,Nil,TFloodlightActivitiesGenerateTagResponse) as TFloodlightActivitiesGenerateTagResponse;
end;


Function TFloodlightActivitiesResource.Generatetag(profileId: string; AQuery : TFloodlightActivitiesgeneratetagOptions) : TFloodlightActivitiesGenerateTagResponse;

Var
  _Q : String;

begin
  _Q:='';
  AddToQuery(_Q,'floodlightActivityId',AQuery.floodlightActivityId);
  Result:=Generatetag(profileId,_Q);
end;

Function TFloodlightActivitiesResource.Get(id: string; profileId: string) : TFloodlightActivity;

Const
  _HTTPMethod = 'GET';
  _Path       = 'userprofiles/{profileId}/floodlightActivities/{id}';
  _Methodid   = 'dfareporting.floodlightActivities.get';

Var
  _P : String;

begin
  _P:=SubstitutePath(_Path,['id',id,'profileId',profileId]);
  Result:=ServiceCall(_HTTPMethod,_P,'',Nil,TFloodlightActivity) as TFloodlightActivity;
end;

Function TFloodlightActivitiesResource.Insert(profileId: string; aFloodlightActivity : TFloodlightActivity) : TFloodlightActivity;

Const
  _HTTPMethod = 'POST';
  _Path       = 'userprofiles/{profileId}/floodlightActivities';
  _Methodid   = 'dfareporting.floodlightActivities.insert';

Var
  _P : String;

begin
  _P:=SubstitutePath(_Path,['profileId',profileId]);
  Result:=ServiceCall(_HTTPMethod,_P,'',aFloodlightActivity,TFloodlightActivity) as TFloodlightActivity;
end;

Function TFloodlightActivitiesResource.List(profileId: string; AQuery : string = '') : TFloodlightActivitiesListResponse;

Const
  _HTTPMethod = 'GET';
  _Path       = 'userprofiles/{profileId}/floodlightActivities';
  _Methodid   = 'dfareporting.floodlightActivities.list';

Var
  _P : String;

begin
  _P:=SubstitutePath(_Path,['profileId',profileId]);
  Result:=ServiceCall(_HTTPMethod,_P,AQuery,Nil,TFloodlightActivitiesListResponse) as TFloodlightActivitiesListResponse;
end;


Function TFloodlightActivitiesResource.List(profileId: string; AQuery : TFloodlightActivitieslistOptions) : TFloodlightActivitiesListResponse;

Var
  _Q : String;

begin
  _Q:='';
  AddToQuery(_Q,'advertiserId',AQuery.advertiserId);
  AddToQuery(_Q,'floodlightActivityGroupIds',AQuery.floodlightActivityGroupIds);
  AddToQuery(_Q,'floodlightActivityGroupName',AQuery.floodlightActivityGroupName);
  AddToQuery(_Q,'floodlightActivityGroupTagString',AQuery.floodlightActivityGroupTagString);
  AddToQuery(_Q,'floodlightActivityGroupType',AQuery.floodlightActivityGroupType);
  AddToQuery(_Q,'floodlightConfigurationId',AQuery.floodlightConfigurationId);
  AddToQuery(_Q,'ids',AQuery.ids);
  AddToQuery(_Q,'maxResults',AQuery.maxResults);
  AddToQuery(_Q,'pageToken',AQuery.pageToken);
  AddToQuery(_Q,'searchString',AQuery.searchString);
  AddToQuery(_Q,'sortField',AQuery.sortField);
  AddToQuery(_Q,'sortOrder',AQuery.sortOrder);
  AddToQuery(_Q,'tagString',AQuery.tagString);
  Result:=List(profileId,_Q);
end;

Function TFloodlightActivitiesResource.Patch(profileId: string; aFloodlightActivity : TFloodlightActivity; AQuery : string = '') : TFloodlightActivity;

Const
  _HTTPMethod = 'PATCH';
  _Path       = 'userprofiles/{profileId}/floodlightActivities';
  _Methodid   = 'dfareporting.floodlightActivities.patch';

Var
  _P : String;

begin
  _P:=SubstitutePath(_Path,['profileId',profileId]);
  Result:=ServiceCall(_HTTPMethod,_P,AQuery,aFloodlightActivity,TFloodlightActivity) as TFloodlightActivity;
end;


Function TFloodlightActivitiesResource.Patch(profileId: string; aFloodlightActivity : TFloodlightActivity; AQuery : TFloodlightActivitiespatchOptions) : TFloodlightActivity;

Var
  _Q : String;

begin
  _Q:='';
  AddToQuery(_Q,'id',AQuery.id);
  Result:=Patch(profileId,aFloodlightActivity,_Q);
end;

Function TFloodlightActivitiesResource.Update(profileId: string; aFloodlightActivity : TFloodlightActivity) : TFloodlightActivity;

Const
  _HTTPMethod = 'PUT';
  _Path       = 'userprofiles/{profileId}/floodlightActivities';
  _Methodid   = 'dfareporting.floodlightActivities.update';

Var
  _P : String;

begin
  _P:=SubstitutePath(_Path,['profileId',profileId]);
  Result:=ServiceCall(_HTTPMethod,_P,'',aFloodlightActivity,TFloodlightActivity) as TFloodlightActivity;
end;



{ --------------------------------------------------------------------
  TFloodlightActivityGroupsResource
  --------------------------------------------------------------------}


Class Function TFloodlightActivityGroupsResource.ResourceName : String;

begin
  Result:='floodlightActivityGroups';
end;

Class Function TFloodlightActivityGroupsResource.DefaultAPI : TGoogleAPIClass;

begin
  Result:=TdfareportingAPI;
end;

Procedure TFloodlightActivityGroupsResource.Delete(id: string; profileId: string);

Const
  _HTTPMethod = 'DELETE';
  _Path       = 'userprofiles/{profileId}/floodlightActivityGroups/{id}';
  _Methodid   = 'dfareporting.floodlightActivityGroups.delete';

Var
  _P : String;

begin
  _P:=SubstitutePath(_Path,['id',id,'profileId',profileId]);
  ServiceCall(_HTTPMethod,_P,'',Nil,Nil);
end;

Function TFloodlightActivityGroupsResource.Get(id: string; profileId: string) : TFloodlightActivityGroup;

Const
  _HTTPMethod = 'GET';
  _Path       = 'userprofiles/{profileId}/floodlightActivityGroups/{id}';
  _Methodid   = 'dfareporting.floodlightActivityGroups.get';

Var
  _P : String;

begin
  _P:=SubstitutePath(_Path,['id',id,'profileId',profileId]);
  Result:=ServiceCall(_HTTPMethod,_P,'',Nil,TFloodlightActivityGroup) as TFloodlightActivityGroup;
end;

Function TFloodlightActivityGroupsResource.Insert(profileId: string; aFloodlightActivityGroup : TFloodlightActivityGroup) : TFloodlightActivityGroup;

Const
  _HTTPMethod = 'POST';
  _Path       = 'userprofiles/{profileId}/floodlightActivityGroups';
  _Methodid   = 'dfareporting.floodlightActivityGroups.insert';

Var
  _P : String;

begin
  _P:=SubstitutePath(_Path,['profileId',profileId]);
  Result:=ServiceCall(_HTTPMethod,_P,'',aFloodlightActivityGroup,TFloodlightActivityGroup) as TFloodlightActivityGroup;
end;

Function TFloodlightActivityGroupsResource.List(profileId: string; AQuery : string = '') : TFloodlightActivityGroupsListResponse;

Const
  _HTTPMethod = 'GET';
  _Path       = 'userprofiles/{profileId}/floodlightActivityGroups';
  _Methodid   = 'dfareporting.floodlightActivityGroups.list';

Var
  _P : String;

begin
  _P:=SubstitutePath(_Path,['profileId',profileId]);
  Result:=ServiceCall(_HTTPMethod,_P,AQuery,Nil,TFloodlightActivityGroupsListResponse) as TFloodlightActivityGroupsListResponse;
end;


Function TFloodlightActivityGroupsResource.List(profileId: string; AQuery : TFloodlightActivityGroupslistOptions) : TFloodlightActivityGroupsListResponse;

Var
  _Q : String;

begin
  _Q:='';
  AddToQuery(_Q,'advertiserId',AQuery.advertiserId);
  AddToQuery(_Q,'floodlightConfigurationId',AQuery.floodlightConfigurationId);
  AddToQuery(_Q,'ids',AQuery.ids);
  AddToQuery(_Q,'maxResults',AQuery.maxResults);
  AddToQuery(_Q,'pageToken',AQuery.pageToken);
  AddToQuery(_Q,'searchString',AQuery.searchString);
  AddToQuery(_Q,'sortField',AQuery.sortField);
  AddToQuery(_Q,'sortOrder',AQuery.sortOrder);
  AddToQuery(_Q,'type',AQuery._type);
  Result:=List(profileId,_Q);
end;

Function TFloodlightActivityGroupsResource.Patch(profileId: string; aFloodlightActivityGroup : TFloodlightActivityGroup; AQuery : string = '') : TFloodlightActivityGroup;

Const
  _HTTPMethod = 'PATCH';
  _Path       = 'userprofiles/{profileId}/floodlightActivityGroups';
  _Methodid   = 'dfareporting.floodlightActivityGroups.patch';

Var
  _P : String;

begin
  _P:=SubstitutePath(_Path,['profileId',profileId]);
  Result:=ServiceCall(_HTTPMethod,_P,AQuery,aFloodlightActivityGroup,TFloodlightActivityGroup) as TFloodlightActivityGroup;
end;


Function TFloodlightActivityGroupsResource.Patch(profileId: string; aFloodlightActivityGroup : TFloodlightActivityGroup; AQuery : TFloodlightActivityGroupspatchOptions) : TFloodlightActivityGroup;

Var
  _Q : String;

begin
  _Q:='';
  AddToQuery(_Q,'id',AQuery.id);
  Result:=Patch(profileId,aFloodlightActivityGroup,_Q);
end;

Function TFloodlightActivityGroupsResource.Update(profileId: string; aFloodlightActivityGroup : TFloodlightActivityGroup) : TFloodlightActivityGroup;

Const
  _HTTPMethod = 'PUT';
  _Path       = 'userprofiles/{profileId}/floodlightActivityGroups';
  _Methodid   = 'dfareporting.floodlightActivityGroups.update';

Var
  _P : String;

begin
  _P:=SubstitutePath(_Path,['profileId',profileId]);
  Result:=ServiceCall(_HTTPMethod,_P,'',aFloodlightActivityGroup,TFloodlightActivityGroup) as TFloodlightActivityGroup;
end;



{ --------------------------------------------------------------------
  TFloodlightConfigurationsResource
  --------------------------------------------------------------------}


Class Function TFloodlightConfigurationsResource.ResourceName : String;

begin
  Result:='floodlightConfigurations';
end;

Class Function TFloodlightConfigurationsResource.DefaultAPI : TGoogleAPIClass;

begin
  Result:=TdfareportingAPI;
end;

Function TFloodlightConfigurationsResource.Get(id: string; profileId: string) : TFloodlightConfiguration;

Const
  _HTTPMethod = 'GET';
  _Path       = 'userprofiles/{profileId}/floodlightConfigurations/{id}';
  _Methodid   = 'dfareporting.floodlightConfigurations.get';

Var
  _P : String;

begin
  _P:=SubstitutePath(_Path,['id',id,'profileId',profileId]);
  Result:=ServiceCall(_HTTPMethod,_P,'',Nil,TFloodlightConfiguration) as TFloodlightConfiguration;
end;

Function TFloodlightConfigurationsResource.List(profileId: string; AQuery : string = '') : TFloodlightConfigurationsListResponse;

Const
  _HTTPMethod = 'GET';
  _Path       = 'userprofiles/{profileId}/floodlightConfigurations';
  _Methodid   = 'dfareporting.floodlightConfigurations.list';

Var
  _P : String;

begin
  _P:=SubstitutePath(_Path,['profileId',profileId]);
  Result:=ServiceCall(_HTTPMethod,_P,AQuery,Nil,TFloodlightConfigurationsListResponse) as TFloodlightConfigurationsListResponse;
end;


Function TFloodlightConfigurationsResource.List(profileId: string; AQuery : TFloodlightConfigurationslistOptions) : TFloodlightConfigurationsListResponse;

Var
  _Q : String;

begin
  _Q:='';
  AddToQuery(_Q,'ids',AQuery.ids);
  Result:=List(profileId,_Q);
end;

Function TFloodlightConfigurationsResource.Patch(profileId: string; aFloodlightConfiguration : TFloodlightConfiguration; AQuery : string = '') : TFloodlightConfiguration;

Const
  _HTTPMethod = 'PATCH';
  _Path       = 'userprofiles/{profileId}/floodlightConfigurations';
  _Methodid   = 'dfareporting.floodlightConfigurations.patch';

Var
  _P : String;

begin
  _P:=SubstitutePath(_Path,['profileId',profileId]);
  Result:=ServiceCall(_HTTPMethod,_P,AQuery,aFloodlightConfiguration,TFloodlightConfiguration) as TFloodlightConfiguration;
end;


Function TFloodlightConfigurationsResource.Patch(profileId: string; aFloodlightConfiguration : TFloodlightConfiguration; AQuery : TFloodlightConfigurationspatchOptions) : TFloodlightConfiguration;

Var
  _Q : String;

begin
  _Q:='';
  AddToQuery(_Q,'id',AQuery.id);
  Result:=Patch(profileId,aFloodlightConfiguration,_Q);
end;

Function TFloodlightConfigurationsResource.Update(profileId: string; aFloodlightConfiguration : TFloodlightConfiguration) : TFloodlightConfiguration;

Const
  _HTTPMethod = 'PUT';
  _Path       = 'userprofiles/{profileId}/floodlightConfigurations';
  _Methodid   = 'dfareporting.floodlightConfigurations.update';

Var
  _P : String;

begin
  _P:=SubstitutePath(_Path,['profileId',profileId]);
  Result:=ServiceCall(_HTTPMethod,_P,'',aFloodlightConfiguration,TFloodlightConfiguration) as TFloodlightConfiguration;
end;



{ --------------------------------------------------------------------
  TInventoryItemsResource
  --------------------------------------------------------------------}


Class Function TInventoryItemsResource.ResourceName : String;

begin
  Result:='inventoryItems';
end;

Class Function TInventoryItemsResource.DefaultAPI : TGoogleAPIClass;

begin
  Result:=TdfareportingAPI;
end;

Function TInventoryItemsResource.Get(id: string; profileId: string; projectId: string) : TInventoryItem;

Const
  _HTTPMethod = 'GET';
  _Path       = 'userprofiles/{profileId}/projects/{projectId}/inventoryItems/{id}';
  _Methodid   = 'dfareporting.inventoryItems.get';

Var
  _P : String;

begin
  _P:=SubstitutePath(_Path,['id',id,'profileId',profileId,'projectId',projectId]);
  Result:=ServiceCall(_HTTPMethod,_P,'',Nil,TInventoryItem) as TInventoryItem;
end;

Function TInventoryItemsResource.List(profileId: string; projectId: string; AQuery : string = '') : TInventoryItemsListResponse;

Const
  _HTTPMethod = 'GET';
  _Path       = 'userprofiles/{profileId}/projects/{projectId}/inventoryItems';
  _Methodid   = 'dfareporting.inventoryItems.list';

Var
  _P : String;

begin
  _P:=SubstitutePath(_Path,['profileId',profileId,'projectId',projectId]);
  Result:=ServiceCall(_HTTPMethod,_P,AQuery,Nil,TInventoryItemsListResponse) as TInventoryItemsListResponse;
end;


Function TInventoryItemsResource.List(profileId: string; projectId: string; AQuery : TInventoryItemslistOptions) : TInventoryItemsListResponse;

Var
  _Q : String;

begin
  _Q:='';
  AddToQuery(_Q,'ids',AQuery.ids);
  AddToQuery(_Q,'inPlan',AQuery.inPlan);
  AddToQuery(_Q,'maxResults',AQuery.maxResults);
  AddToQuery(_Q,'orderId',AQuery.orderId);
  AddToQuery(_Q,'pageToken',AQuery.pageToken);
  AddToQuery(_Q,'siteId',AQuery.siteId);
  AddToQuery(_Q,'sortField',AQuery.sortField);
  AddToQuery(_Q,'sortOrder',AQuery.sortOrder);
  Result:=List(profileId,projectId,_Q);
end;



{ --------------------------------------------------------------------
  TLandingPagesResource
  --------------------------------------------------------------------}


Class Function TLandingPagesResource.ResourceName : String;

begin
  Result:='landingPages';
end;

Class Function TLandingPagesResource.DefaultAPI : TGoogleAPIClass;

begin
  Result:=TdfareportingAPI;
end;

Procedure TLandingPagesResource.Delete(campaignId: string; id: string; profileId: string);

Const
  _HTTPMethod = 'DELETE';
  _Path       = 'userprofiles/{profileId}/campaigns/{campaignId}/landingPages/{id}';
  _Methodid   = 'dfareporting.landingPages.delete';

Var
  _P : String;

begin
  _P:=SubstitutePath(_Path,['campaignId',campaignId,'id',id,'profileId',profileId]);
  ServiceCall(_HTTPMethod,_P,'',Nil,Nil);
end;

Function TLandingPagesResource.Get(campaignId: string; id: string; profileId: string) : TLandingPage;

Const
  _HTTPMethod = 'GET';
  _Path       = 'userprofiles/{profileId}/campaigns/{campaignId}/landingPages/{id}';
  _Methodid   = 'dfareporting.landingPages.get';

Var
  _P : String;

begin
  _P:=SubstitutePath(_Path,['campaignId',campaignId,'id',id,'profileId',profileId]);
  Result:=ServiceCall(_HTTPMethod,_P,'',Nil,TLandingPage) as TLandingPage;
end;

Function TLandingPagesResource.Insert(campaignId: string; profileId: string; aLandingPage : TLandingPage) : TLandingPage;

Const
  _HTTPMethod = 'POST';
  _Path       = 'userprofiles/{profileId}/campaigns/{campaignId}/landingPages';
  _Methodid   = 'dfareporting.landingPages.insert';

Var
  _P : String;

begin
  _P:=SubstitutePath(_Path,['campaignId',campaignId,'profileId',profileId]);
  Result:=ServiceCall(_HTTPMethod,_P,'',aLandingPage,TLandingPage) as TLandingPage;
end;

Function TLandingPagesResource.List(campaignId: string; profileId: string) : TLandingPagesListResponse;

Const
  _HTTPMethod = 'GET';
  _Path       = 'userprofiles/{profileId}/campaigns/{campaignId}/landingPages';
  _Methodid   = 'dfareporting.landingPages.list';

Var
  _P : String;

begin
  _P:=SubstitutePath(_Path,['campaignId',campaignId,'profileId',profileId]);
  Result:=ServiceCall(_HTTPMethod,_P,'',Nil,TLandingPagesListResponse) as TLandingPagesListResponse;
end;

Function TLandingPagesResource.Patch(campaignId: string; profileId: string; aLandingPage : TLandingPage; AQuery : string = '') : TLandingPage;

Const
  _HTTPMethod = 'PATCH';
  _Path       = 'userprofiles/{profileId}/campaigns/{campaignId}/landingPages';
  _Methodid   = 'dfareporting.landingPages.patch';

Var
  _P : String;

begin
  _P:=SubstitutePath(_Path,['campaignId',campaignId,'profileId',profileId]);
  Result:=ServiceCall(_HTTPMethod,_P,AQuery,aLandingPage,TLandingPage) as TLandingPage;
end;


Function TLandingPagesResource.Patch(campaignId: string; profileId: string; aLandingPage : TLandingPage; AQuery : TLandingPagespatchOptions) : TLandingPage;

Var
  _Q : String;

begin
  _Q:='';
  AddToQuery(_Q,'id',AQuery.id);
  Result:=Patch(campaignId,profileId,aLandingPage,_Q);
end;

Function TLandingPagesResource.Update(campaignId: string; profileId: string; aLandingPage : TLandingPage) : TLandingPage;

Const
  _HTTPMethod = 'PUT';
  _Path       = 'userprofiles/{profileId}/campaigns/{campaignId}/landingPages';
  _Methodid   = 'dfareporting.landingPages.update';

Var
  _P : String;

begin
  _P:=SubstitutePath(_Path,['campaignId',campaignId,'profileId',profileId]);
  Result:=ServiceCall(_HTTPMethod,_P,'',aLandingPage,TLandingPage) as TLandingPage;
end;



{ --------------------------------------------------------------------
  TMetrosResource
  --------------------------------------------------------------------}


Class Function TMetrosResource.ResourceName : String;

begin
  Result:='metros';
end;

Class Function TMetrosResource.DefaultAPI : TGoogleAPIClass;

begin
  Result:=TdfareportingAPI;
end;

Function TMetrosResource.List(profileId: string) : TMetrosListResponse;

Const
  _HTTPMethod = 'GET';
  _Path       = 'userprofiles/{profileId}/metros';
  _Methodid   = 'dfareporting.metros.list';

Var
  _P : String;

begin
  _P:=SubstitutePath(_Path,['profileId',profileId]);
  Result:=ServiceCall(_HTTPMethod,_P,'',Nil,TMetrosListResponse) as TMetrosListResponse;
end;



{ --------------------------------------------------------------------
  TMobileCarriersResource
  --------------------------------------------------------------------}


Class Function TMobileCarriersResource.ResourceName : String;

begin
  Result:='mobileCarriers';
end;

Class Function TMobileCarriersResource.DefaultAPI : TGoogleAPIClass;

begin
  Result:=TdfareportingAPI;
end;

Function TMobileCarriersResource.Get(id: string; profileId: string) : TMobileCarrier;

Const
  _HTTPMethod = 'GET';
  _Path       = 'userprofiles/{profileId}/mobileCarriers/{id}';
  _Methodid   = 'dfareporting.mobileCarriers.get';

Var
  _P : String;

begin
  _P:=SubstitutePath(_Path,['id',id,'profileId',profileId]);
  Result:=ServiceCall(_HTTPMethod,_P,'',Nil,TMobileCarrier) as TMobileCarrier;
end;

Function TMobileCarriersResource.List(profileId: string) : TMobileCarriersListResponse;

Const
  _HTTPMethod = 'GET';
  _Path       = 'userprofiles/{profileId}/mobileCarriers';
  _Methodid   = 'dfareporting.mobileCarriers.list';

Var
  _P : String;

begin
  _P:=SubstitutePath(_Path,['profileId',profileId]);
  Result:=ServiceCall(_HTTPMethod,_P,'',Nil,TMobileCarriersListResponse) as TMobileCarriersListResponse;
end;



{ --------------------------------------------------------------------
  TOperatingSystemVersionsResource
  --------------------------------------------------------------------}


Class Function TOperatingSystemVersionsResource.ResourceName : String;

begin
  Result:='operatingSystemVersions';
end;

Class Function TOperatingSystemVersionsResource.DefaultAPI : TGoogleAPIClass;

begin
  Result:=TdfareportingAPI;
end;

Function TOperatingSystemVersionsResource.Get(id: string; profileId: string) : TOperatingSystemVersion;

Const
  _HTTPMethod = 'GET';
  _Path       = 'userprofiles/{profileId}/operatingSystemVersions/{id}';
  _Methodid   = 'dfareporting.operatingSystemVersions.get';

Var
  _P : String;

begin
  _P:=SubstitutePath(_Path,['id',id,'profileId',profileId]);
  Result:=ServiceCall(_HTTPMethod,_P,'',Nil,TOperatingSystemVersion) as TOperatingSystemVersion;
end;

Function TOperatingSystemVersionsResource.List(profileId: string) : TOperatingSystemVersionsListResponse;

Const
  _HTTPMethod = 'GET';
  _Path       = 'userprofiles/{profileId}/operatingSystemVersions';
  _Methodid   = 'dfareporting.operatingSystemVersions.list';

Var
  _P : String;

begin
  _P:=SubstitutePath(_Path,['profileId',profileId]);
  Result:=ServiceCall(_HTTPMethod,_P,'',Nil,TOperatingSystemVersionsListResponse) as TOperatingSystemVersionsListResponse;
end;



{ --------------------------------------------------------------------
  TOperatingSystemsResource
  --------------------------------------------------------------------}


Class Function TOperatingSystemsResource.ResourceName : String;

begin
  Result:='operatingSystems';
end;

Class Function TOperatingSystemsResource.DefaultAPI : TGoogleAPIClass;

begin
  Result:=TdfareportingAPI;
end;

Function TOperatingSystemsResource.Get(dartId: string; profileId: string) : TOperatingSystem;

Const
  _HTTPMethod = 'GET';
  _Path       = 'userprofiles/{profileId}/operatingSystems/{dartId}';
  _Methodid   = 'dfareporting.operatingSystems.get';

Var
  _P : String;

begin
  _P:=SubstitutePath(_Path,['dartId',dartId,'profileId',profileId]);
  Result:=ServiceCall(_HTTPMethod,_P,'',Nil,TOperatingSystem) as TOperatingSystem;
end;

Function TOperatingSystemsResource.List(profileId: string) : TOperatingSystemsListResponse;

Const
  _HTTPMethod = 'GET';
  _Path       = 'userprofiles/{profileId}/operatingSystems';
  _Methodid   = 'dfareporting.operatingSystems.list';

Var
  _P : String;

begin
  _P:=SubstitutePath(_Path,['profileId',profileId]);
  Result:=ServiceCall(_HTTPMethod,_P,'',Nil,TOperatingSystemsListResponse) as TOperatingSystemsListResponse;
end;



{ --------------------------------------------------------------------
  TOrderDocumentsResource
  --------------------------------------------------------------------}


Class Function TOrderDocumentsResource.ResourceName : String;

begin
  Result:='orderDocuments';
end;

Class Function TOrderDocumentsResource.DefaultAPI : TGoogleAPIClass;

begin
  Result:=TdfareportingAPI;
end;

Function TOrderDocumentsResource.Get(id: string; profileId: string; projectId: string) : TOrderDocument;

Const
  _HTTPMethod = 'GET';
  _Path       = 'userprofiles/{profileId}/projects/{projectId}/orderDocuments/{id}';
  _Methodid   = 'dfareporting.orderDocuments.get';

Var
  _P : String;

begin
  _P:=SubstitutePath(_Path,['id',id,'profileId',profileId,'projectId',projectId]);
  Result:=ServiceCall(_HTTPMethod,_P,'',Nil,TOrderDocument) as TOrderDocument;
end;

Function TOrderDocumentsResource.List(profileId: string; projectId: string; AQuery : string = '') : TOrderDocumentsListResponse;

Const
  _HTTPMethod = 'GET';
  _Path       = 'userprofiles/{profileId}/projects/{projectId}/orderDocuments';
  _Methodid   = 'dfareporting.orderDocuments.list';

Var
  _P : String;

begin
  _P:=SubstitutePath(_Path,['profileId',profileId,'projectId',projectId]);
  Result:=ServiceCall(_HTTPMethod,_P,AQuery,Nil,TOrderDocumentsListResponse) as TOrderDocumentsListResponse;
end;


Function TOrderDocumentsResource.List(profileId: string; projectId: string; AQuery : TOrderDocumentslistOptions) : TOrderDocumentsListResponse;

Var
  _Q : String;

begin
  _Q:='';
  AddToQuery(_Q,'approved',AQuery.approved);
  AddToQuery(_Q,'ids',AQuery.ids);
  AddToQuery(_Q,'maxResults',AQuery.maxResults);
  AddToQuery(_Q,'orderId',AQuery.orderId);
  AddToQuery(_Q,'pageToken',AQuery.pageToken);
  AddToQuery(_Q,'searchString',AQuery.searchString);
  AddToQuery(_Q,'siteId',AQuery.siteId);
  AddToQuery(_Q,'sortField',AQuery.sortField);
  AddToQuery(_Q,'sortOrder',AQuery.sortOrder);
  Result:=List(profileId,projectId,_Q);
end;



{ --------------------------------------------------------------------
  TOrdersResource
  --------------------------------------------------------------------}


Class Function TOrdersResource.ResourceName : String;

begin
  Result:='orders';
end;

Class Function TOrdersResource.DefaultAPI : TGoogleAPIClass;

begin
  Result:=TdfareportingAPI;
end;

Function TOrdersResource.Get(id: string; profileId: string; projectId: string) : TOrder;

Const
  _HTTPMethod = 'GET';
  _Path       = 'userprofiles/{profileId}/projects/{projectId}/orders/{id}';
  _Methodid   = 'dfareporting.orders.get';

Var
  _P : String;

begin
  _P:=SubstitutePath(_Path,['id',id,'profileId',profileId,'projectId',projectId]);
  Result:=ServiceCall(_HTTPMethod,_P,'',Nil,TOrder) as TOrder;
end;

Function TOrdersResource.List(profileId: string; projectId: string; AQuery : string = '') : TOrdersListResponse;

Const
  _HTTPMethod = 'GET';
  _Path       = 'userprofiles/{profileId}/projects/{projectId}/orders';
  _Methodid   = 'dfareporting.orders.list';

Var
  _P : String;

begin
  _P:=SubstitutePath(_Path,['profileId',profileId,'projectId',projectId]);
  Result:=ServiceCall(_HTTPMethod,_P,AQuery,Nil,TOrdersListResponse) as TOrdersListResponse;
end;


Function TOrdersResource.List(profileId: string; projectId: string; AQuery : TOrderslistOptions) : TOrdersListResponse;

Var
  _Q : String;

begin
  _Q:='';
  AddToQuery(_Q,'ids',AQuery.ids);
  AddToQuery(_Q,'maxResults',AQuery.maxResults);
  AddToQuery(_Q,'pageToken',AQuery.pageToken);
  AddToQuery(_Q,'searchString',AQuery.searchString);
  AddToQuery(_Q,'siteId',AQuery.siteId);
  AddToQuery(_Q,'sortField',AQuery.sortField);
  AddToQuery(_Q,'sortOrder',AQuery.sortOrder);
  Result:=List(profileId,projectId,_Q);
end;



{ --------------------------------------------------------------------
  TPlacementGroupsResource
  --------------------------------------------------------------------}


Class Function TPlacementGroupsResource.ResourceName : String;

begin
  Result:='placementGroups';
end;

Class Function TPlacementGroupsResource.DefaultAPI : TGoogleAPIClass;

begin
  Result:=TdfareportingAPI;
end;

Function TPlacementGroupsResource.Get(id: string; profileId: string) : TPlacementGroup;

Const
  _HTTPMethod = 'GET';
  _Path       = 'userprofiles/{profileId}/placementGroups/{id}';
  _Methodid   = 'dfareporting.placementGroups.get';

Var
  _P : String;

begin
  _P:=SubstitutePath(_Path,['id',id,'profileId',profileId]);
  Result:=ServiceCall(_HTTPMethod,_P,'',Nil,TPlacementGroup) as TPlacementGroup;
end;

Function TPlacementGroupsResource.Insert(profileId: string; aPlacementGroup : TPlacementGroup) : TPlacementGroup;

Const
  _HTTPMethod = 'POST';
  _Path       = 'userprofiles/{profileId}/placementGroups';
  _Methodid   = 'dfareporting.placementGroups.insert';

Var
  _P : String;

begin
  _P:=SubstitutePath(_Path,['profileId',profileId]);
  Result:=ServiceCall(_HTTPMethod,_P,'',aPlacementGroup,TPlacementGroup) as TPlacementGroup;
end;

Function TPlacementGroupsResource.List(profileId: string; AQuery : string = '') : TPlacementGroupsListResponse;

Const
  _HTTPMethod = 'GET';
  _Path       = 'userprofiles/{profileId}/placementGroups';
  _Methodid   = 'dfareporting.placementGroups.list';

Var
  _P : String;

begin
  _P:=SubstitutePath(_Path,['profileId',profileId]);
  Result:=ServiceCall(_HTTPMethod,_P,AQuery,Nil,TPlacementGroupsListResponse) as TPlacementGroupsListResponse;
end;


Function TPlacementGroupsResource.List(profileId: string; AQuery : TPlacementGroupslistOptions) : TPlacementGroupsListResponse;

Var
  _Q : String;

begin
  _Q:='';
  AddToQuery(_Q,'advertiserIds',AQuery.advertiserIds);
  AddToQuery(_Q,'archived',AQuery.archived);
  AddToQuery(_Q,'campaignIds',AQuery.campaignIds);
  AddToQuery(_Q,'contentCategoryIds',AQuery.contentCategoryIds);
  AddToQuery(_Q,'directorySiteIds',AQuery.directorySiteIds);
  AddToQuery(_Q,'ids',AQuery.ids);
  AddToQuery(_Q,'maxResults',AQuery.maxResults);
  AddToQuery(_Q,'pageToken',AQuery.pageToken);
  AddToQuery(_Q,'placementGroupType',AQuery.placementGroupType);
  AddToQuery(_Q,'placementStrategyIds',AQuery.placementStrategyIds);
  AddToQuery(_Q,'pricingTypes',AQuery.pricingTypes);
  AddToQuery(_Q,'searchString',AQuery.searchString);
  AddToQuery(_Q,'siteIds',AQuery.siteIds);
  AddToQuery(_Q,'sortField',AQuery.sortField);
  AddToQuery(_Q,'sortOrder',AQuery.sortOrder);
  Result:=List(profileId,_Q);
end;

Function TPlacementGroupsResource.Patch(profileId: string; aPlacementGroup : TPlacementGroup; AQuery : string = '') : TPlacementGroup;

Const
  _HTTPMethod = 'PATCH';
  _Path       = 'userprofiles/{profileId}/placementGroups';
  _Methodid   = 'dfareporting.placementGroups.patch';

Var
  _P : String;

begin
  _P:=SubstitutePath(_Path,['profileId',profileId]);
  Result:=ServiceCall(_HTTPMethod,_P,AQuery,aPlacementGroup,TPlacementGroup) as TPlacementGroup;
end;


Function TPlacementGroupsResource.Patch(profileId: string; aPlacementGroup : TPlacementGroup; AQuery : TPlacementGroupspatchOptions) : TPlacementGroup;

Var
  _Q : String;

begin
  _Q:='';
  AddToQuery(_Q,'id',AQuery.id);
  Result:=Patch(profileId,aPlacementGroup,_Q);
end;

Function TPlacementGroupsResource.Update(profileId: string; aPlacementGroup : TPlacementGroup) : TPlacementGroup;

Const
  _HTTPMethod = 'PUT';
  _Path       = 'userprofiles/{profileId}/placementGroups';
  _Methodid   = 'dfareporting.placementGroups.update';

Var
  _P : String;

begin
  _P:=SubstitutePath(_Path,['profileId',profileId]);
  Result:=ServiceCall(_HTTPMethod,_P,'',aPlacementGroup,TPlacementGroup) as TPlacementGroup;
end;



{ --------------------------------------------------------------------
  TPlacementStrategiesResource
  --------------------------------------------------------------------}


Class Function TPlacementStrategiesResource.ResourceName : String;

begin
  Result:='placementStrategies';
end;

Class Function TPlacementStrategiesResource.DefaultAPI : TGoogleAPIClass;

begin
  Result:=TdfareportingAPI;
end;

Procedure TPlacementStrategiesResource.Delete(id: string; profileId: string);

Const
  _HTTPMethod = 'DELETE';
  _Path       = 'userprofiles/{profileId}/placementStrategies/{id}';
  _Methodid   = 'dfareporting.placementStrategies.delete';

Var
  _P : String;

begin
  _P:=SubstitutePath(_Path,['id',id,'profileId',profileId]);
  ServiceCall(_HTTPMethod,_P,'',Nil,Nil);
end;

Function TPlacementStrategiesResource.Get(id: string; profileId: string) : TPlacementStrategy;

Const
  _HTTPMethod = 'GET';
  _Path       = 'userprofiles/{profileId}/placementStrategies/{id}';
  _Methodid   = 'dfareporting.placementStrategies.get';

Var
  _P : String;

begin
  _P:=SubstitutePath(_Path,['id',id,'profileId',profileId]);
  Result:=ServiceCall(_HTTPMethod,_P,'',Nil,TPlacementStrategy) as TPlacementStrategy;
end;

Function TPlacementStrategiesResource.Insert(profileId: string; aPlacementStrategy : TPlacementStrategy) : TPlacementStrategy;

Const
  _HTTPMethod = 'POST';
  _Path       = 'userprofiles/{profileId}/placementStrategies';
  _Methodid   = 'dfareporting.placementStrategies.insert';

Var
  _P : String;

begin
  _P:=SubstitutePath(_Path,['profileId',profileId]);
  Result:=ServiceCall(_HTTPMethod,_P,'',aPlacementStrategy,TPlacementStrategy) as TPlacementStrategy;
end;

Function TPlacementStrategiesResource.List(profileId: string; AQuery : string = '') : TPlacementStrategiesListResponse;

Const
  _HTTPMethod = 'GET';
  _Path       = 'userprofiles/{profileId}/placementStrategies';
  _Methodid   = 'dfareporting.placementStrategies.list';

Var
  _P : String;

begin
  _P:=SubstitutePath(_Path,['profileId',profileId]);
  Result:=ServiceCall(_HTTPMethod,_P,AQuery,Nil,TPlacementStrategiesListResponse) as TPlacementStrategiesListResponse;
end;


Function TPlacementStrategiesResource.List(profileId: string; AQuery : TPlacementStrategieslistOptions) : TPlacementStrategiesListResponse;

Var
  _Q : String;

begin
  _Q:='';
  AddToQuery(_Q,'ids',AQuery.ids);
  AddToQuery(_Q,'maxResults',AQuery.maxResults);
  AddToQuery(_Q,'pageToken',AQuery.pageToken);
  AddToQuery(_Q,'searchString',AQuery.searchString);
  AddToQuery(_Q,'sortField',AQuery.sortField);
  AddToQuery(_Q,'sortOrder',AQuery.sortOrder);
  Result:=List(profileId,_Q);
end;

Function TPlacementStrategiesResource.Patch(profileId: string; aPlacementStrategy : TPlacementStrategy; AQuery : string = '') : TPlacementStrategy;

Const
  _HTTPMethod = 'PATCH';
  _Path       = 'userprofiles/{profileId}/placementStrategies';
  _Methodid   = 'dfareporting.placementStrategies.patch';

Var
  _P : String;

begin
  _P:=SubstitutePath(_Path,['profileId',profileId]);
  Result:=ServiceCall(_HTTPMethod,_P,AQuery,aPlacementStrategy,TPlacementStrategy) as TPlacementStrategy;
end;


Function TPlacementStrategiesResource.Patch(profileId: string; aPlacementStrategy : TPlacementStrategy; AQuery : TPlacementStrategiespatchOptions) : TPlacementStrategy;

Var
  _Q : String;

begin
  _Q:='';
  AddToQuery(_Q,'id',AQuery.id);
  Result:=Patch(profileId,aPlacementStrategy,_Q);
end;

Function TPlacementStrategiesResource.Update(profileId: string; aPlacementStrategy : TPlacementStrategy) : TPlacementStrategy;

Const
  _HTTPMethod = 'PUT';
  _Path       = 'userprofiles/{profileId}/placementStrategies';
  _Methodid   = 'dfareporting.placementStrategies.update';

Var
  _P : String;

begin
  _P:=SubstitutePath(_Path,['profileId',profileId]);
  Result:=ServiceCall(_HTTPMethod,_P,'',aPlacementStrategy,TPlacementStrategy) as TPlacementStrategy;
end;



{ --------------------------------------------------------------------
  TPlacementsResource
  --------------------------------------------------------------------}


Class Function TPlacementsResource.ResourceName : String;

begin
  Result:='placements';
end;

Class Function TPlacementsResource.DefaultAPI : TGoogleAPIClass;

begin
  Result:=TdfareportingAPI;
end;

Function TPlacementsResource.Generatetags(profileId: string; AQuery : string = '') : TPlacementsGenerateTagsResponse;

Const
  _HTTPMethod = 'POST';
  _Path       = 'userprofiles/{profileId}/placements/generatetags';
  _Methodid   = 'dfareporting.placements.generatetags';

Var
  _P : String;

begin
  _P:=SubstitutePath(_Path,['profileId',profileId]);
  Result:=ServiceCall(_HTTPMethod,_P,AQuery,Nil,TPlacementsGenerateTagsResponse) as TPlacementsGenerateTagsResponse;
end;


Function TPlacementsResource.Generatetags(profileId: string; AQuery : TPlacementsgeneratetagsOptions) : TPlacementsGenerateTagsResponse;

Var
  _Q : String;

begin
  _Q:='';
  AddToQuery(_Q,'campaignId',AQuery.campaignId);
  AddToQuery(_Q,'placementIds',AQuery.placementIds);
  AddToQuery(_Q,'tagFormats',AQuery.tagFormats);
  Result:=Generatetags(profileId,_Q);
end;

Function TPlacementsResource.Get(id: string; profileId: string) : TPlacement;

Const
  _HTTPMethod = 'GET';
  _Path       = 'userprofiles/{profileId}/placements/{id}';
  _Methodid   = 'dfareporting.placements.get';

Var
  _P : String;

begin
  _P:=SubstitutePath(_Path,['id',id,'profileId',profileId]);
  Result:=ServiceCall(_HTTPMethod,_P,'',Nil,TPlacement) as TPlacement;
end;

Function TPlacementsResource.Insert(profileId: string; aPlacement : TPlacement) : TPlacement;

Const
  _HTTPMethod = 'POST';
  _Path       = 'userprofiles/{profileId}/placements';
  _Methodid   = 'dfareporting.placements.insert';

Var
  _P : String;

begin
  _P:=SubstitutePath(_Path,['profileId',profileId]);
  Result:=ServiceCall(_HTTPMethod,_P,'',aPlacement,TPlacement) as TPlacement;
end;

Function TPlacementsResource.List(profileId: string; AQuery : string = '') : TPlacementsListResponse;

Const
  _HTTPMethod = 'GET';
  _Path       = 'userprofiles/{profileId}/placements';
  _Methodid   = 'dfareporting.placements.list';

Var
  _P : String;

begin
  _P:=SubstitutePath(_Path,['profileId',profileId]);
  Result:=ServiceCall(_HTTPMethod,_P,AQuery,Nil,TPlacementsListResponse) as TPlacementsListResponse;
end;


Function TPlacementsResource.List(profileId: string; AQuery : TPlacementslistOptions) : TPlacementsListResponse;

Var
  _Q : String;

begin
  _Q:='';
  AddToQuery(_Q,'advertiserIds',AQuery.advertiserIds);
  AddToQuery(_Q,'archived',AQuery.archived);
  AddToQuery(_Q,'campaignIds',AQuery.campaignIds);
  AddToQuery(_Q,'compatibilities',AQuery.compatibilities);
  AddToQuery(_Q,'contentCategoryIds',AQuery.contentCategoryIds);
  AddToQuery(_Q,'directorySiteIds',AQuery.directorySiteIds);
  AddToQuery(_Q,'groupIds',AQuery.groupIds);
  AddToQuery(_Q,'ids',AQuery.ids);
  AddToQuery(_Q,'maxResults',AQuery.maxResults);
  AddToQuery(_Q,'pageToken',AQuery.pageToken);
  AddToQuery(_Q,'paymentSource',AQuery.paymentSource);
  AddToQuery(_Q,'placementStrategyIds',AQuery.placementStrategyIds);
  AddToQuery(_Q,'pricingTypes',AQuery.pricingTypes);
  AddToQuery(_Q,'searchString',AQuery.searchString);
  AddToQuery(_Q,'siteIds',AQuery.siteIds);
  AddToQuery(_Q,'sizeIds',AQuery.sizeIds);
  AddToQuery(_Q,'sortField',AQuery.sortField);
  AddToQuery(_Q,'sortOrder',AQuery.sortOrder);
  Result:=List(profileId,_Q);
end;

Function TPlacementsResource.Patch(profileId: string; aPlacement : TPlacement; AQuery : string = '') : TPlacement;

Const
  _HTTPMethod = 'PATCH';
  _Path       = 'userprofiles/{profileId}/placements';
  _Methodid   = 'dfareporting.placements.patch';

Var
  _P : String;

begin
  _P:=SubstitutePath(_Path,['profileId',profileId]);
  Result:=ServiceCall(_HTTPMethod,_P,AQuery,aPlacement,TPlacement) as TPlacement;
end;


Function TPlacementsResource.Patch(profileId: string; aPlacement : TPlacement; AQuery : TPlacementspatchOptions) : TPlacement;

Var
  _Q : String;

begin
  _Q:='';
  AddToQuery(_Q,'id',AQuery.id);
  Result:=Patch(profileId,aPlacement,_Q);
end;

Function TPlacementsResource.Update(profileId: string; aPlacement : TPlacement) : TPlacement;

Const
  _HTTPMethod = 'PUT';
  _Path       = 'userprofiles/{profileId}/placements';
  _Methodid   = 'dfareporting.placements.update';

Var
  _P : String;

begin
  _P:=SubstitutePath(_Path,['profileId',profileId]);
  Result:=ServiceCall(_HTTPMethod,_P,'',aPlacement,TPlacement) as TPlacement;
end;



{ --------------------------------------------------------------------
  TPlatformTypesResource
  --------------------------------------------------------------------}


Class Function TPlatformTypesResource.ResourceName : String;

begin
  Result:='platformTypes';
end;

Class Function TPlatformTypesResource.DefaultAPI : TGoogleAPIClass;

begin
  Result:=TdfareportingAPI;
end;

Function TPlatformTypesResource.Get(id: string; profileId: string) : TPlatformType;

Const
  _HTTPMethod = 'GET';
  _Path       = 'userprofiles/{profileId}/platformTypes/{id}';
  _Methodid   = 'dfareporting.platformTypes.get';

Var
  _P : String;

begin
  _P:=SubstitutePath(_Path,['id',id,'profileId',profileId]);
  Result:=ServiceCall(_HTTPMethod,_P,'',Nil,TPlatformType) as TPlatformType;
end;

Function TPlatformTypesResource.List(profileId: string) : TPlatformTypesListResponse;

Const
  _HTTPMethod = 'GET';
  _Path       = 'userprofiles/{profileId}/platformTypes';
  _Methodid   = 'dfareporting.platformTypes.list';

Var
  _P : String;

begin
  _P:=SubstitutePath(_Path,['profileId',profileId]);
  Result:=ServiceCall(_HTTPMethod,_P,'',Nil,TPlatformTypesListResponse) as TPlatformTypesListResponse;
end;



{ --------------------------------------------------------------------
  TPostalCodesResource
  --------------------------------------------------------------------}


Class Function TPostalCodesResource.ResourceName : String;

begin
  Result:='postalCodes';
end;

Class Function TPostalCodesResource.DefaultAPI : TGoogleAPIClass;

begin
  Result:=TdfareportingAPI;
end;

Function TPostalCodesResource.Get(code: string; profileId: string) : TPostalCode;

Const
  _HTTPMethod = 'GET';
  _Path       = 'userprofiles/{profileId}/postalCodes/{code}';
  _Methodid   = 'dfareporting.postalCodes.get';

Var
  _P : String;

begin
  _P:=SubstitutePath(_Path,['code',code,'profileId',profileId]);
  Result:=ServiceCall(_HTTPMethod,_P,'',Nil,TPostalCode) as TPostalCode;
end;

Function TPostalCodesResource.List(profileId: string) : TPostalCodesListResponse;

Const
  _HTTPMethod = 'GET';
  _Path       = 'userprofiles/{profileId}/postalCodes';
  _Methodid   = 'dfareporting.postalCodes.list';

Var
  _P : String;

begin
  _P:=SubstitutePath(_Path,['profileId',profileId]);
  Result:=ServiceCall(_HTTPMethod,_P,'',Nil,TPostalCodesListResponse) as TPostalCodesListResponse;
end;



{ --------------------------------------------------------------------
  TProjectsResource
  --------------------------------------------------------------------}


Class Function TProjectsResource.ResourceName : String;

begin
  Result:='projects';
end;

Class Function TProjectsResource.DefaultAPI : TGoogleAPIClass;

begin
  Result:=TdfareportingAPI;
end;

Function TProjectsResource.Get(id: string; profileId: string) : TProject;

Const
  _HTTPMethod = 'GET';
  _Path       = 'userprofiles/{profileId}/projects/{id}';
  _Methodid   = 'dfareporting.projects.get';

Var
  _P : String;

begin
  _P:=SubstitutePath(_Path,['id',id,'profileId',profileId]);
  Result:=ServiceCall(_HTTPMethod,_P,'',Nil,TProject) as TProject;
end;

Function TProjectsResource.List(profileId: string; AQuery : string = '') : TProjectsListResponse;

Const
  _HTTPMethod = 'GET';
  _Path       = 'userprofiles/{profileId}/projects';
  _Methodid   = 'dfareporting.projects.list';

Var
  _P : String;

begin
  _P:=SubstitutePath(_Path,['profileId',profileId]);
  Result:=ServiceCall(_HTTPMethod,_P,AQuery,Nil,TProjectsListResponse) as TProjectsListResponse;
end;


Function TProjectsResource.List(profileId: string; AQuery : TProjectslistOptions) : TProjectsListResponse;

Var
  _Q : String;

begin
  _Q:='';
  AddToQuery(_Q,'advertiserIds',AQuery.advertiserIds);
  AddToQuery(_Q,'ids',AQuery.ids);
  AddToQuery(_Q,'maxResults',AQuery.maxResults);
  AddToQuery(_Q,'pageToken',AQuery.pageToken);
  AddToQuery(_Q,'searchString',AQuery.searchString);
  AddToQuery(_Q,'sortField',AQuery.sortField);
  AddToQuery(_Q,'sortOrder',AQuery.sortOrder);
  Result:=List(profileId,_Q);
end;



{ --------------------------------------------------------------------
  TRegionsResource
  --------------------------------------------------------------------}


Class Function TRegionsResource.ResourceName : String;

begin
  Result:='regions';
end;

Class Function TRegionsResource.DefaultAPI : TGoogleAPIClass;

begin
  Result:=TdfareportingAPI;
end;

Function TRegionsResource.List(profileId: string) : TRegionsListResponse;

Const
  _HTTPMethod = 'GET';
  _Path       = 'userprofiles/{profileId}/regions';
  _Methodid   = 'dfareporting.regions.list';

Var
  _P : String;

begin
  _P:=SubstitutePath(_Path,['profileId',profileId]);
  Result:=ServiceCall(_HTTPMethod,_P,'',Nil,TRegionsListResponse) as TRegionsListResponse;
end;



{ --------------------------------------------------------------------
  TRemarketingListSharesResource
  --------------------------------------------------------------------}


Class Function TRemarketingListSharesResource.ResourceName : String;

begin
  Result:='remarketingListShares';
end;

Class Function TRemarketingListSharesResource.DefaultAPI : TGoogleAPIClass;

begin
  Result:=TdfareportingAPI;
end;

Function TRemarketingListSharesResource.Get(profileId: string; remarketingListId: string) : TRemarketingListShare;

Const
  _HTTPMethod = 'GET';
  _Path       = 'userprofiles/{profileId}/remarketingListShares/{remarketingListId}';
  _Methodid   = 'dfareporting.remarketingListShares.get';

Var
  _P : String;

begin
  _P:=SubstitutePath(_Path,['profileId',profileId,'remarketingListId',remarketingListId]);
  Result:=ServiceCall(_HTTPMethod,_P,'',Nil,TRemarketingListShare) as TRemarketingListShare;
end;

Function TRemarketingListSharesResource.Patch(profileId: string; aRemarketingListShare : TRemarketingListShare; AQuery : string = '') : TRemarketingListShare;

Const
  _HTTPMethod = 'PATCH';
  _Path       = 'userprofiles/{profileId}/remarketingListShares';
  _Methodid   = 'dfareporting.remarketingListShares.patch';

Var
  _P : String;

begin
  _P:=SubstitutePath(_Path,['profileId',profileId]);
  Result:=ServiceCall(_HTTPMethod,_P,AQuery,aRemarketingListShare,TRemarketingListShare) as TRemarketingListShare;
end;


Function TRemarketingListSharesResource.Patch(profileId: string; aRemarketingListShare : TRemarketingListShare; AQuery : TRemarketingListSharespatchOptions) : TRemarketingListShare;

Var
  _Q : String;

begin
  _Q:='';
  AddToQuery(_Q,'remarketingListId',AQuery.remarketingListId);
  Result:=Patch(profileId,aRemarketingListShare,_Q);
end;

Function TRemarketingListSharesResource.Update(profileId: string; aRemarketingListShare : TRemarketingListShare) : TRemarketingListShare;

Const
  _HTTPMethod = 'PUT';
  _Path       = 'userprofiles/{profileId}/remarketingListShares';
  _Methodid   = 'dfareporting.remarketingListShares.update';

Var
  _P : String;

begin
  _P:=SubstitutePath(_Path,['profileId',profileId]);
  Result:=ServiceCall(_HTTPMethod,_P,'',aRemarketingListShare,TRemarketingListShare) as TRemarketingListShare;
end;



{ --------------------------------------------------------------------
  TRemarketingListsResource
  --------------------------------------------------------------------}


Class Function TRemarketingListsResource.ResourceName : String;

begin
  Result:='remarketingLists';
end;

Class Function TRemarketingListsResource.DefaultAPI : TGoogleAPIClass;

begin
  Result:=TdfareportingAPI;
end;

Function TRemarketingListsResource.Get(id: string; profileId: string) : TRemarketingList;

Const
  _HTTPMethod = 'GET';
  _Path       = 'userprofiles/{profileId}/remarketingLists/{id}';
  _Methodid   = 'dfareporting.remarketingLists.get';

Var
  _P : String;

begin
  _P:=SubstitutePath(_Path,['id',id,'profileId',profileId]);
  Result:=ServiceCall(_HTTPMethod,_P,'',Nil,TRemarketingList) as TRemarketingList;
end;

Function TRemarketingListsResource.Insert(profileId: string; aRemarketingList : TRemarketingList) : TRemarketingList;

Const
  _HTTPMethod = 'POST';
  _Path       = 'userprofiles/{profileId}/remarketingLists';
  _Methodid   = 'dfareporting.remarketingLists.insert';

Var
  _P : String;

begin
  _P:=SubstitutePath(_Path,['profileId',profileId]);
  Result:=ServiceCall(_HTTPMethod,_P,'',aRemarketingList,TRemarketingList) as TRemarketingList;
end;

Function TRemarketingListsResource.List(profileId: string; AQuery : string = '') : TRemarketingListsListResponse;

Const
  _HTTPMethod = 'GET';
  _Path       = 'userprofiles/{profileId}/remarketingLists';
  _Methodid   = 'dfareporting.remarketingLists.list';

Var
  _P : String;

begin
  _P:=SubstitutePath(_Path,['profileId',profileId]);
  Result:=ServiceCall(_HTTPMethod,_P,AQuery,Nil,TRemarketingListsListResponse) as TRemarketingListsListResponse;
end;


Function TRemarketingListsResource.List(profileId: string; AQuery : TRemarketingListslistOptions) : TRemarketingListsListResponse;

Var
  _Q : String;

begin
  _Q:='';
  AddToQuery(_Q,'active',AQuery.active);
  AddToQuery(_Q,'advertiserId',AQuery.advertiserId);
  AddToQuery(_Q,'floodlightActivityId',AQuery.floodlightActivityId);
  AddToQuery(_Q,'maxResults',AQuery.maxResults);
  AddToQuery(_Q,'name',AQuery._name);
  AddToQuery(_Q,'pageToken',AQuery.pageToken);
  AddToQuery(_Q,'sortField',AQuery.sortField);
  AddToQuery(_Q,'sortOrder',AQuery.sortOrder);
  Result:=List(profileId,_Q);
end;

Function TRemarketingListsResource.Patch(profileId: string; aRemarketingList : TRemarketingList; AQuery : string = '') : TRemarketingList;

Const
  _HTTPMethod = 'PATCH';
  _Path       = 'userprofiles/{profileId}/remarketingLists';
  _Methodid   = 'dfareporting.remarketingLists.patch';

Var
  _P : String;

begin
  _P:=SubstitutePath(_Path,['profileId',profileId]);
  Result:=ServiceCall(_HTTPMethod,_P,AQuery,aRemarketingList,TRemarketingList) as TRemarketingList;
end;


Function TRemarketingListsResource.Patch(profileId: string; aRemarketingList : TRemarketingList; AQuery : TRemarketingListspatchOptions) : TRemarketingList;

Var
  _Q : String;

begin
  _Q:='';
  AddToQuery(_Q,'id',AQuery.id);
  Result:=Patch(profileId,aRemarketingList,_Q);
end;

Function TRemarketingListsResource.Update(profileId: string; aRemarketingList : TRemarketingList) : TRemarketingList;

Const
  _HTTPMethod = 'PUT';
  _Path       = 'userprofiles/{profileId}/remarketingLists';
  _Methodid   = 'dfareporting.remarketingLists.update';

Var
  _P : String;

begin
  _P:=SubstitutePath(_Path,['profileId',profileId]);
  Result:=ServiceCall(_HTTPMethod,_P,'',aRemarketingList,TRemarketingList) as TRemarketingList;
end;



{ --------------------------------------------------------------------
  TReportsResource
  --------------------------------------------------------------------}


Class Function TReportsResource.ResourceName : String;

begin
  Result:='reports';
end;

Class Function TReportsResource.DefaultAPI : TGoogleAPIClass;

begin
  Result:=TdfareportingAPI;
end;

Procedure TReportsResource.Delete(profileId: string; reportId: string);

Const
  _HTTPMethod = 'DELETE';
  _Path       = 'userprofiles/{profileId}/reports/{reportId}';
  _Methodid   = 'dfareporting.reports.delete';

Var
  _P : String;

begin
  _P:=SubstitutePath(_Path,['profileId',profileId,'reportId',reportId]);
  ServiceCall(_HTTPMethod,_P,'',Nil,Nil);
end;

Function TReportsResource.Get(profileId: string; reportId: string) : TReport;

Const
  _HTTPMethod = 'GET';
  _Path       = 'userprofiles/{profileId}/reports/{reportId}';
  _Methodid   = 'dfareporting.reports.get';

Var
  _P : String;

begin
  _P:=SubstitutePath(_Path,['profileId',profileId,'reportId',reportId]);
  Result:=ServiceCall(_HTTPMethod,_P,'',Nil,TReport) as TReport;
end;

Function TReportsResource.Insert(profileId: string; aReport : TReport) : TReport;

Const
  _HTTPMethod = 'POST';
  _Path       = 'userprofiles/{profileId}/reports';
  _Methodid   = 'dfareporting.reports.insert';

Var
  _P : String;

begin
  _P:=SubstitutePath(_Path,['profileId',profileId]);
  Result:=ServiceCall(_HTTPMethod,_P,'',aReport,TReport) as TReport;
end;

Function TReportsResource.List(profileId: string; AQuery : string = '') : TReportList;

Const
  _HTTPMethod = 'GET';
  _Path       = 'userprofiles/{profileId}/reports';
  _Methodid   = 'dfareporting.reports.list';

Var
  _P : String;

begin
  _P:=SubstitutePath(_Path,['profileId',profileId]);
  Result:=ServiceCall(_HTTPMethod,_P,AQuery,Nil,TReportList) as TReportList;
end;


Function TReportsResource.List(profileId: string; AQuery : TReportslistOptions) : TReportList;

Var
  _Q : String;

begin
  _Q:='';
  AddToQuery(_Q,'maxResults',AQuery.maxResults);
  AddToQuery(_Q,'pageToken',AQuery.pageToken);
  AddToQuery(_Q,'scope',AQuery.scope);
  AddToQuery(_Q,'sortField',AQuery.sortField);
  AddToQuery(_Q,'sortOrder',AQuery.sortOrder);
  Result:=List(profileId,_Q);
end;

Function TReportsResource.Patch(profileId: string; reportId: string; aReport : TReport) : TReport;

Const
  _HTTPMethod = 'PATCH';
  _Path       = 'userprofiles/{profileId}/reports/{reportId}';
  _Methodid   = 'dfareporting.reports.patch';

Var
  _P : String;

begin
  _P:=SubstitutePath(_Path,['profileId',profileId,'reportId',reportId]);
  Result:=ServiceCall(_HTTPMethod,_P,'',aReport,TReport) as TReport;
end;

Function TReportsResource.Run(profileId: string; reportId: string; AQuery : string = '') : TFile;

Const
  _HTTPMethod = 'POST';
  _Path       = 'userprofiles/{profileId}/reports/{reportId}/run';
  _Methodid   = 'dfareporting.reports.run';

Var
  _P : String;

begin
  _P:=SubstitutePath(_Path,['profileId',profileId,'reportId',reportId]);
  Result:=ServiceCall(_HTTPMethod,_P,AQuery,Nil,TFile) as TFile;
end;


Function TReportsResource.Run(profileId: string; reportId: string; AQuery : TReportsrunOptions) : TFile;

Var
  _Q : String;

begin
  _Q:='';
  AddToQuery(_Q,'synchronous',AQuery.synchronous);
  Result:=Run(profileId,reportId,_Q);
end;

Function TReportsResource.Update(profileId: string; reportId: string; aReport : TReport) : TReport;

Const
  _HTTPMethod = 'PUT';
  _Path       = 'userprofiles/{profileId}/reports/{reportId}';
  _Methodid   = 'dfareporting.reports.update';

Var
  _P : String;

begin
  _P:=SubstitutePath(_Path,['profileId',profileId,'reportId',reportId]);
  Result:=ServiceCall(_HTTPMethod,_P,'',aReport,TReport) as TReport;
end;



{ --------------------------------------------------------------------
  TSitesResource
  --------------------------------------------------------------------}


Class Function TSitesResource.ResourceName : String;

begin
  Result:='sites';
end;

Class Function TSitesResource.DefaultAPI : TGoogleAPIClass;

begin
  Result:=TdfareportingAPI;
end;

Function TSitesResource.Get(id: string; profileId: string) : TSite;

Const
  _HTTPMethod = 'GET';
  _Path       = 'userprofiles/{profileId}/sites/{id}';
  _Methodid   = 'dfareporting.sites.get';

Var
  _P : String;

begin
  _P:=SubstitutePath(_Path,['id',id,'profileId',profileId]);
  Result:=ServiceCall(_HTTPMethod,_P,'',Nil,TSite) as TSite;
end;

Function TSitesResource.Insert(profileId: string; aSite : TSite) : TSite;

Const
  _HTTPMethod = 'POST';
  _Path       = 'userprofiles/{profileId}/sites';
  _Methodid   = 'dfareporting.sites.insert';

Var
  _P : String;

begin
  _P:=SubstitutePath(_Path,['profileId',profileId]);
  Result:=ServiceCall(_HTTPMethod,_P,'',aSite,TSite) as TSite;
end;

Function TSitesResource.List(profileId: string; AQuery : string = '') : TSitesListResponse;

Const
  _HTTPMethod = 'GET';
  _Path       = 'userprofiles/{profileId}/sites';
  _Methodid   = 'dfareporting.sites.list';

Var
  _P : String;

begin
  _P:=SubstitutePath(_Path,['profileId',profileId]);
  Result:=ServiceCall(_HTTPMethod,_P,AQuery,Nil,TSitesListResponse) as TSitesListResponse;
end;


Function TSitesResource.List(profileId: string; AQuery : TSiteslistOptions) : TSitesListResponse;

Var
  _Q : String;

begin
  _Q:='';
  AddToQuery(_Q,'acceptsInStreamVideoPlacements',AQuery.acceptsInStreamVideoPlacements);
  AddToQuery(_Q,'acceptsInterstitialPlacements',AQuery.acceptsInterstitialPlacements);
  AddToQuery(_Q,'acceptsPublisherPaidPlacements',AQuery.acceptsPublisherPaidPlacements);
  AddToQuery(_Q,'adWordsSite',AQuery.adWordsSite);
  AddToQuery(_Q,'approved',AQuery.approved);
  AddToQuery(_Q,'campaignIds',AQuery.campaignIds);
  AddToQuery(_Q,'directorySiteIds',AQuery.directorySiteIds);
  AddToQuery(_Q,'ids',AQuery.ids);
  AddToQuery(_Q,'maxResults',AQuery.maxResults);
  AddToQuery(_Q,'pageToken',AQuery.pageToken);
  AddToQuery(_Q,'searchString',AQuery.searchString);
  AddToQuery(_Q,'sortField',AQuery.sortField);
  AddToQuery(_Q,'sortOrder',AQuery.sortOrder);
  AddToQuery(_Q,'subaccountId',AQuery.subaccountId);
  AddToQuery(_Q,'unmappedSite',AQuery.unmappedSite);
  Result:=List(profileId,_Q);
end;

Function TSitesResource.Patch(profileId: string; aSite : TSite; AQuery : string = '') : TSite;

Const
  _HTTPMethod = 'PATCH';
  _Path       = 'userprofiles/{profileId}/sites';
  _Methodid   = 'dfareporting.sites.patch';

Var
  _P : String;

begin
  _P:=SubstitutePath(_Path,['profileId',profileId]);
  Result:=ServiceCall(_HTTPMethod,_P,AQuery,aSite,TSite) as TSite;
end;


Function TSitesResource.Patch(profileId: string; aSite : TSite; AQuery : TSitespatchOptions) : TSite;

Var
  _Q : String;

begin
  _Q:='';
  AddToQuery(_Q,'id',AQuery.id);
  Result:=Patch(profileId,aSite,_Q);
end;

Function TSitesResource.Update(profileId: string; aSite : TSite) : TSite;

Const
  _HTTPMethod = 'PUT';
  _Path       = 'userprofiles/{profileId}/sites';
  _Methodid   = 'dfareporting.sites.update';

Var
  _P : String;

begin
  _P:=SubstitutePath(_Path,['profileId',profileId]);
  Result:=ServiceCall(_HTTPMethod,_P,'',aSite,TSite) as TSite;
end;



{ --------------------------------------------------------------------
  TSizesResource
  --------------------------------------------------------------------}


Class Function TSizesResource.ResourceName : String;

begin
  Result:='sizes';
end;

Class Function TSizesResource.DefaultAPI : TGoogleAPIClass;

begin
  Result:=TdfareportingAPI;
end;

Function TSizesResource.Get(id: string; profileId: string) : TSize;

Const
  _HTTPMethod = 'GET';
  _Path       = 'userprofiles/{profileId}/sizes/{id}';
  _Methodid   = 'dfareporting.sizes.get';

Var
  _P : String;

begin
  _P:=SubstitutePath(_Path,['id',id,'profileId',profileId]);
  Result:=ServiceCall(_HTTPMethod,_P,'',Nil,TSize) as TSize;
end;

Function TSizesResource.Insert(profileId: string; aSize : TSize) : TSize;

Const
  _HTTPMethod = 'POST';
  _Path       = 'userprofiles/{profileId}/sizes';
  _Methodid   = 'dfareporting.sizes.insert';

Var
  _P : String;

begin
  _P:=SubstitutePath(_Path,['profileId',profileId]);
  Result:=ServiceCall(_HTTPMethod,_P,'',aSize,TSize) as TSize;
end;

Function TSizesResource.List(profileId: string; AQuery : string = '') : TSizesListResponse;

Const
  _HTTPMethod = 'GET';
  _Path       = 'userprofiles/{profileId}/sizes';
  _Methodid   = 'dfareporting.sizes.list';

Var
  _P : String;

begin
  _P:=SubstitutePath(_Path,['profileId',profileId]);
  Result:=ServiceCall(_HTTPMethod,_P,AQuery,Nil,TSizesListResponse) as TSizesListResponse;
end;


Function TSizesResource.List(profileId: string; AQuery : TSizeslistOptions) : TSizesListResponse;

Var
  _Q : String;

begin
  _Q:='';
  AddToQuery(_Q,'height',AQuery.height);
  AddToQuery(_Q,'iabStandard',AQuery.iabStandard);
  AddToQuery(_Q,'ids',AQuery.ids);
  AddToQuery(_Q,'width',AQuery.width);
  Result:=List(profileId,_Q);
end;



{ --------------------------------------------------------------------
  TSubaccountsResource
  --------------------------------------------------------------------}


Class Function TSubaccountsResource.ResourceName : String;

begin
  Result:='subaccounts';
end;

Class Function TSubaccountsResource.DefaultAPI : TGoogleAPIClass;

begin
  Result:=TdfareportingAPI;
end;

Function TSubaccountsResource.Get(id: string; profileId: string) : TSubaccount;

Const
  _HTTPMethod = 'GET';
  _Path       = 'userprofiles/{profileId}/subaccounts/{id}';
  _Methodid   = 'dfareporting.subaccounts.get';

Var
  _P : String;

begin
  _P:=SubstitutePath(_Path,['id',id,'profileId',profileId]);
  Result:=ServiceCall(_HTTPMethod,_P,'',Nil,TSubaccount) as TSubaccount;
end;

Function TSubaccountsResource.Insert(profileId: string; aSubaccount : TSubaccount) : TSubaccount;

Const
  _HTTPMethod = 'POST';
  _Path       = 'userprofiles/{profileId}/subaccounts';
  _Methodid   = 'dfareporting.subaccounts.insert';

Var
  _P : String;

begin
  _P:=SubstitutePath(_Path,['profileId',profileId]);
  Result:=ServiceCall(_HTTPMethod,_P,'',aSubaccount,TSubaccount) as TSubaccount;
end;

Function TSubaccountsResource.List(profileId: string; AQuery : string = '') : TSubaccountsListResponse;

Const
  _HTTPMethod = 'GET';
  _Path       = 'userprofiles/{profileId}/subaccounts';
  _Methodid   = 'dfareporting.subaccounts.list';

Var
  _P : String;

begin
  _P:=SubstitutePath(_Path,['profileId',profileId]);
  Result:=ServiceCall(_HTTPMethod,_P,AQuery,Nil,TSubaccountsListResponse) as TSubaccountsListResponse;
end;


Function TSubaccountsResource.List(profileId: string; AQuery : TSubaccountslistOptions) : TSubaccountsListResponse;

Var
  _Q : String;

begin
  _Q:='';
  AddToQuery(_Q,'ids',AQuery.ids);
  AddToQuery(_Q,'maxResults',AQuery.maxResults);
  AddToQuery(_Q,'pageToken',AQuery.pageToken);
  AddToQuery(_Q,'searchString',AQuery.searchString);
  AddToQuery(_Q,'sortField',AQuery.sortField);
  AddToQuery(_Q,'sortOrder',AQuery.sortOrder);
  Result:=List(profileId,_Q);
end;

Function TSubaccountsResource.Patch(profileId: string; aSubaccount : TSubaccount; AQuery : string = '') : TSubaccount;

Const
  _HTTPMethod = 'PATCH';
  _Path       = 'userprofiles/{profileId}/subaccounts';
  _Methodid   = 'dfareporting.subaccounts.patch';

Var
  _P : String;

begin
  _P:=SubstitutePath(_Path,['profileId',profileId]);
  Result:=ServiceCall(_HTTPMethod,_P,AQuery,aSubaccount,TSubaccount) as TSubaccount;
end;


Function TSubaccountsResource.Patch(profileId: string; aSubaccount : TSubaccount; AQuery : TSubaccountspatchOptions) : TSubaccount;

Var
  _Q : String;

begin
  _Q:='';
  AddToQuery(_Q,'id',AQuery.id);
  Result:=Patch(profileId,aSubaccount,_Q);
end;

Function TSubaccountsResource.Update(profileId: string; aSubaccount : TSubaccount) : TSubaccount;

Const
  _HTTPMethod = 'PUT';
  _Path       = 'userprofiles/{profileId}/subaccounts';
  _Methodid   = 'dfareporting.subaccounts.update';

Var
  _P : String;

begin
  _P:=SubstitutePath(_Path,['profileId',profileId]);
  Result:=ServiceCall(_HTTPMethod,_P,'',aSubaccount,TSubaccount) as TSubaccount;
end;



{ --------------------------------------------------------------------
  TTargetableRemarketingListsResource
  --------------------------------------------------------------------}


Class Function TTargetableRemarketingListsResource.ResourceName : String;

begin
  Result:='targetableRemarketingLists';
end;

Class Function TTargetableRemarketingListsResource.DefaultAPI : TGoogleAPIClass;

begin
  Result:=TdfareportingAPI;
end;

Function TTargetableRemarketingListsResource.Get(id: string; profileId: string) : TTargetableRemarketingList;

Const
  _HTTPMethod = 'GET';
  _Path       = 'userprofiles/{profileId}/targetableRemarketingLists/{id}';
  _Methodid   = 'dfareporting.targetableRemarketingLists.get';

Var
  _P : String;

begin
  _P:=SubstitutePath(_Path,['id',id,'profileId',profileId]);
  Result:=ServiceCall(_HTTPMethod,_P,'',Nil,TTargetableRemarketingList) as TTargetableRemarketingList;
end;

Function TTargetableRemarketingListsResource.List(profileId: string; AQuery : string = '') : TTargetableRemarketingListsListResponse;

Const
  _HTTPMethod = 'GET';
  _Path       = 'userprofiles/{profileId}/targetableRemarketingLists';
  _Methodid   = 'dfareporting.targetableRemarketingLists.list';

Var
  _P : String;

begin
  _P:=SubstitutePath(_Path,['profileId',profileId]);
  Result:=ServiceCall(_HTTPMethod,_P,AQuery,Nil,TTargetableRemarketingListsListResponse) as TTargetableRemarketingListsListResponse;
end;


Function TTargetableRemarketingListsResource.List(profileId: string; AQuery : TTargetableRemarketingListslistOptions) : TTargetableRemarketingListsListResponse;

Var
  _Q : String;

begin
  _Q:='';
  AddToQuery(_Q,'active',AQuery.active);
  AddToQuery(_Q,'advertiserId',AQuery.advertiserId);
  AddToQuery(_Q,'maxResults',AQuery.maxResults);
  AddToQuery(_Q,'name',AQuery._name);
  AddToQuery(_Q,'pageToken',AQuery.pageToken);
  AddToQuery(_Q,'sortField',AQuery.sortField);
  AddToQuery(_Q,'sortOrder',AQuery.sortOrder);
  Result:=List(profileId,_Q);
end;



{ --------------------------------------------------------------------
  TUserProfilesResource
  --------------------------------------------------------------------}


Class Function TUserProfilesResource.ResourceName : String;

begin
  Result:='userProfiles';
end;

Class Function TUserProfilesResource.DefaultAPI : TGoogleAPIClass;

begin
  Result:=TdfareportingAPI;
end;

Function TUserProfilesResource.Get(profileId: string) : TUserProfile;

Const
  _HTTPMethod = 'GET';
  _Path       = 'userprofiles/{profileId}';
  _Methodid   = 'dfareporting.userProfiles.get';

Var
  _P : String;

begin
  _P:=SubstitutePath(_Path,['profileId',profileId]);
  Result:=ServiceCall(_HTTPMethod,_P,'',Nil,TUserProfile) as TUserProfile;
end;

Function TUserProfilesResource.List : TUserProfileList;

Const
  _HTTPMethod = 'GET';
  _Path       = 'userprofiles';
  _Methodid   = 'dfareporting.userProfiles.list';

begin
  Result:=ServiceCall(_HTTPMethod,_Path,'',Nil,TUserProfileList) as TUserProfileList;
end;



{ --------------------------------------------------------------------
  TUserRolePermissionGroupsResource
  --------------------------------------------------------------------}


Class Function TUserRolePermissionGroupsResource.ResourceName : String;

begin
  Result:='userRolePermissionGroups';
end;

Class Function TUserRolePermissionGroupsResource.DefaultAPI : TGoogleAPIClass;

begin
  Result:=TdfareportingAPI;
end;

Function TUserRolePermissionGroupsResource.Get(id: string; profileId: string) : TUserRolePermissionGroup;

Const
  _HTTPMethod = 'GET';
  _Path       = 'userprofiles/{profileId}/userRolePermissionGroups/{id}';
  _Methodid   = 'dfareporting.userRolePermissionGroups.get';

Var
  _P : String;

begin
  _P:=SubstitutePath(_Path,['id',id,'profileId',profileId]);
  Result:=ServiceCall(_HTTPMethod,_P,'',Nil,TUserRolePermissionGroup) as TUserRolePermissionGroup;
end;

Function TUserRolePermissionGroupsResource.List(profileId: string) : TUserRolePermissionGroupsListResponse;

Const
  _HTTPMethod = 'GET';
  _Path       = 'userprofiles/{profileId}/userRolePermissionGroups';
  _Methodid   = 'dfareporting.userRolePermissionGroups.list';

Var
  _P : String;

begin
  _P:=SubstitutePath(_Path,['profileId',profileId]);
  Result:=ServiceCall(_HTTPMethod,_P,'',Nil,TUserRolePermissionGroupsListResponse) as TUserRolePermissionGroupsListResponse;
end;



{ --------------------------------------------------------------------
  TUserRolePermissionsResource
  --------------------------------------------------------------------}


Class Function TUserRolePermissionsResource.ResourceName : String;

begin
  Result:='userRolePermissions';
end;

Class Function TUserRolePermissionsResource.DefaultAPI : TGoogleAPIClass;

begin
  Result:=TdfareportingAPI;
end;

Function TUserRolePermissionsResource.Get(id: string; profileId: string) : TUserRolePermission;

Const
  _HTTPMethod = 'GET';
  _Path       = 'userprofiles/{profileId}/userRolePermissions/{id}';
  _Methodid   = 'dfareporting.userRolePermissions.get';

Var
  _P : String;

begin
  _P:=SubstitutePath(_Path,['id',id,'profileId',profileId]);
  Result:=ServiceCall(_HTTPMethod,_P,'',Nil,TUserRolePermission) as TUserRolePermission;
end;

Function TUserRolePermissionsResource.List(profileId: string; AQuery : string = '') : TUserRolePermissionsListResponse;

Const
  _HTTPMethod = 'GET';
  _Path       = 'userprofiles/{profileId}/userRolePermissions';
  _Methodid   = 'dfareporting.userRolePermissions.list';

Var
  _P : String;

begin
  _P:=SubstitutePath(_Path,['profileId',profileId]);
  Result:=ServiceCall(_HTTPMethod,_P,AQuery,Nil,TUserRolePermissionsListResponse) as TUserRolePermissionsListResponse;
end;


Function TUserRolePermissionsResource.List(profileId: string; AQuery : TUserRolePermissionslistOptions) : TUserRolePermissionsListResponse;

Var
  _Q : String;

begin
  _Q:='';
  AddToQuery(_Q,'ids',AQuery.ids);
  Result:=List(profileId,_Q);
end;



{ --------------------------------------------------------------------
  TUserRolesResource
  --------------------------------------------------------------------}


Class Function TUserRolesResource.ResourceName : String;

begin
  Result:='userRoles';
end;

Class Function TUserRolesResource.DefaultAPI : TGoogleAPIClass;

begin
  Result:=TdfareportingAPI;
end;

Procedure TUserRolesResource.Delete(id: string; profileId: string);

Const
  _HTTPMethod = 'DELETE';
  _Path       = 'userprofiles/{profileId}/userRoles/{id}';
  _Methodid   = 'dfareporting.userRoles.delete';

Var
  _P : String;

begin
  _P:=SubstitutePath(_Path,['id',id,'profileId',profileId]);
  ServiceCall(_HTTPMethod,_P,'',Nil,Nil);
end;

Function TUserRolesResource.Get(id: string; profileId: string) : TUserRole;

Const
  _HTTPMethod = 'GET';
  _Path       = 'userprofiles/{profileId}/userRoles/{id}';
  _Methodid   = 'dfareporting.userRoles.get';

Var
  _P : String;

begin
  _P:=SubstitutePath(_Path,['id',id,'profileId',profileId]);
  Result:=ServiceCall(_HTTPMethod,_P,'',Nil,TUserRole) as TUserRole;
end;

Function TUserRolesResource.Insert(profileId: string; aUserRole : TUserRole) : TUserRole;

Const
  _HTTPMethod = 'POST';
  _Path       = 'userprofiles/{profileId}/userRoles';
  _Methodid   = 'dfareporting.userRoles.insert';

Var
  _P : String;

begin
  _P:=SubstitutePath(_Path,['profileId',profileId]);
  Result:=ServiceCall(_HTTPMethod,_P,'',aUserRole,TUserRole) as TUserRole;
end;

Function TUserRolesResource.List(profileId: string; AQuery : string = '') : TUserRolesListResponse;

Const
  _HTTPMethod = 'GET';
  _Path       = 'userprofiles/{profileId}/userRoles';
  _Methodid   = 'dfareporting.userRoles.list';

Var
  _P : String;

begin
  _P:=SubstitutePath(_Path,['profileId',profileId]);
  Result:=ServiceCall(_HTTPMethod,_P,AQuery,Nil,TUserRolesListResponse) as TUserRolesListResponse;
end;


Function TUserRolesResource.List(profileId: string; AQuery : TUserRoleslistOptions) : TUserRolesListResponse;

Var
  _Q : String;

begin
  _Q:='';
  AddToQuery(_Q,'accountUserRoleOnly',AQuery.accountUserRoleOnly);
  AddToQuery(_Q,'ids',AQuery.ids);
  AddToQuery(_Q,'maxResults',AQuery.maxResults);
  AddToQuery(_Q,'pageToken',AQuery.pageToken);
  AddToQuery(_Q,'searchString',AQuery.searchString);
  AddToQuery(_Q,'sortField',AQuery.sortField);
  AddToQuery(_Q,'sortOrder',AQuery.sortOrder);
  AddToQuery(_Q,'subaccountId',AQuery.subaccountId);
  Result:=List(profileId,_Q);
end;

Function TUserRolesResource.Patch(profileId: string; aUserRole : TUserRole; AQuery : string = '') : TUserRole;

Const
  _HTTPMethod = 'PATCH';
  _Path       = 'userprofiles/{profileId}/userRoles';
  _Methodid   = 'dfareporting.userRoles.patch';

Var
  _P : String;

begin
  _P:=SubstitutePath(_Path,['profileId',profileId]);
  Result:=ServiceCall(_HTTPMethod,_P,AQuery,aUserRole,TUserRole) as TUserRole;
end;


Function TUserRolesResource.Patch(profileId: string; aUserRole : TUserRole; AQuery : TUserRolespatchOptions) : TUserRole;

Var
  _Q : String;

begin
  _Q:='';
  AddToQuery(_Q,'id',AQuery.id);
  Result:=Patch(profileId,aUserRole,_Q);
end;

Function TUserRolesResource.Update(profileId: string; aUserRole : TUserRole) : TUserRole;

Const
  _HTTPMethod = 'PUT';
  _Path       = 'userprofiles/{profileId}/userRoles';
  _Methodid   = 'dfareporting.userRoles.update';

Var
  _P : String;

begin
  _P:=SubstitutePath(_Path,['profileId',profileId]);
  Result:=ServiceCall(_HTTPMethod,_P,'',aUserRole,TUserRole) as TUserRole;
end;



{ --------------------------------------------------------------------
  TDfareportingAPI
  --------------------------------------------------------------------}

Class Function TDfareportingAPI.APIName : String;

begin
  Result:='dfareporting';
end;

Class Function TDfareportingAPI.APIVersion : String;

begin
  Result:='v2.1';
end;

Class Function TDfareportingAPI.APIRevision : String;

begin
  Result:='20150326';
end;

Class Function TDfareportingAPI.APIID : String;

begin
  Result:='dfareporting:v2.1';
end;

Class Function TDfareportingAPI.APITitle : String;

begin
  Result:='DCM/DFA Reporting And Trafficking API';
end;

Class Function TDfareportingAPI.APIDescription : String;

begin
  Result:='Manage your DoubleClick Campaign Manager ad campaigns and reports.';
end;

Class Function TDfareportingAPI.APIOwnerDomain : String;

begin
  Result:='google.com';
end;

Class Function TDfareportingAPI.APIOwnerName : String;

begin
  Result:='Google';
end;

Class Function TDfareportingAPI.APIIcon16 : String;

begin
  Result:='https://www.google.com/images/icons/product/doubleclick-16.gif';
end;

Class Function TDfareportingAPI.APIIcon32 : String;

begin
  Result:='https://www.google.com/images/icons/product/doubleclick-32.gif';
end;

Class Function TDfareportingAPI.APIdocumentationLink : String;

begin
  Result:='https://developers.google.com/doubleclick-advertisers/reporting/';
end;

Class Function TDfareportingAPI.APIrootUrl : string;

begin
  Result:='https://www.googleapis.com/';
end;

Class Function TDfareportingAPI.APIbasePath : string;

begin
  Result:='/dfareporting/v2.1/';
end;

Class Function TDfareportingAPI.APIbaseURL : String;

begin
  Result:='https://www.googleapis.com/dfareporting/v2.1/';
end;

Class Function TDfareportingAPI.APIProtocol : string;

begin
  Result:='rest';
end;

Class Function TDfareportingAPI.APIservicePath : string;

begin
  Result:='dfareporting/v2.1/';
end;

Class Function TDfareportingAPI.APIbatchPath : String;

begin
  Result:='batch';
end;

Class Function TDfareportingAPI.APIAuthScopes : TScopeInfoArray;

begin
  SetLength(Result,2);
  Result[0].Name:='https://www.googleapis.com/auth/dfareporting';
  Result[0].Description:='View and manage DoubleClick for Advertisers reports';
  Result[1].Name:='https://www.googleapis.com/auth/dfatrafficking';
  Result[1].Description:='View and manage your DoubleClick Campaign Manager''s (DCM) display ad campaigns';
  
end;

Class Function TDfareportingAPI.APINeedsAuth : Boolean;

begin
  Result:=True;
end;

Class Procedure TDfareportingAPI.RegisterAPIResources;

begin
  TAccount.RegisterObject;
  TAccountaccountPermissionIds.RegisterObject;
  TAccountavailablePermissionIds.RegisterObject;
  TAccountActiveAdSummary.RegisterObject;
  TAccountPermission.RegisterObject;
  TAccountPermissionaccountProfiles.RegisterObject;
  TAccountPermissionGroup.RegisterObject;
  TAccountPermissionGroupsListResponse.RegisterObject;
  TAccountPermissionGroupsListResponseaccountPermissionGroups.RegisterObject;
  TAccountPermissionsListResponse.RegisterObject;
  TAccountPermissionsListResponseaccountPermissions.RegisterObject;
  TAccountUserProfile.RegisterObject;
  TAccountUserProfilesListResponse.RegisterObject;
  TAccountUserProfilesListResponseaccountUserProfiles.RegisterObject;
  TAccountsListResponse.RegisterObject;
  TAccountsListResponseaccounts.RegisterObject;
  TActivities.RegisterObject;
  TActivitiesfilters.RegisterObject;
  TActivitiesmetricNames.RegisterObject;
  TAd.RegisterObject;
  TAdcreativeGroupAssignments.RegisterObject;
  TAdeventTagOverrides.RegisterObject;
  TAdplacementAssignments.RegisterObject;
  TAdSlot.RegisterObject;
  TAdsListResponse.RegisterObject;
  TAdsListResponseads.RegisterObject;
  TAdvertiser.RegisterObject;
  TAdvertiserGroup.RegisterObject;
  TAdvertiserGroupsListResponse.RegisterObject;
  TAdvertiserGroupsListResponseadvertiserGroups.RegisterObject;
  TAdvertisersListResponse.RegisterObject;
  TAdvertisersListResponseadvertisers.RegisterObject;
  TAudienceSegment.RegisterObject;
  TAudienceSegmentGroup.RegisterObject;
  TAudienceSegmentGroupaudienceSegments.RegisterObject;
  TBrowser.RegisterObject;
  TBrowsersListResponse.RegisterObject;
  TBrowsersListResponsebrowsers.RegisterObject;
  TCampaign.RegisterObject;
  TCampaignadditionalCreativeOptimizationConfigurations.RegisterObject;
  TCampaignaudienceSegmentGroups.RegisterObject;
  TCampaigncreativeGroupIds.RegisterObject;
  TCampaigneventTagOverrides.RegisterObject;
  TCampaigntraffickerEmails.RegisterObject;
  TCampaignCreativeAssociation.RegisterObject;
  TCampaignCreativeAssociationsListResponse.RegisterObject;
  TCampaignCreativeAssociationsListResponsecampaignCreativeAssociations.RegisterObject;
  TCampaignsListResponse.RegisterObject;
  TCampaignsListResponsecampaigns.RegisterObject;
  TChangeLog.RegisterObject;
  TChangeLogsListResponse.RegisterObject;
  TChangeLogsListResponsechangeLogs.RegisterObject;
  TCitiesListResponse.RegisterObject;
  TCitiesListResponsecities.RegisterObject;
  TCity.RegisterObject;
  TClickTag.RegisterObject;
  TClickThroughUrl.RegisterObject;
  TClickThroughUrlSuffixProperties.RegisterObject;
  TCompanionClickThroughOverride.RegisterObject;
  TCompatibleFields.RegisterObject;
  TConnectionType.RegisterObject;
  TConnectionTypesListResponse.RegisterObject;
  TConnectionTypesListResponseconnectionTypes.RegisterObject;
  TContentCategoriesListResponse.RegisterObject;
  TContentCategoriesListResponsecontentCategories.RegisterObject;
  TContentCategory.RegisterObject;
  TCountriesListResponse.RegisterObject;
  TCountriesListResponsecountries.RegisterObject;
  TCountry.RegisterObject;
  TCreative.RegisterObject;
  TCreativeadTagKeys.RegisterObject;
  TCreativebackupImageFeatures.RegisterObject;
  TCreativeclickTags.RegisterObject;
  TCreativecompanionCreatives.RegisterObject;
  TCreativecompatibility.RegisterObject;
  TCreativecounterCustomEvents.RegisterObject;
  TCreativecreativeAssets.RegisterObject;
  TCreativecreativeFieldAssignments.RegisterObject;
  TCreativecustomKeyValues.RegisterObject;
  TCreativeexitCustomEvents.RegisterObject;
  TCreativethirdPartyUrls.RegisterObject;
  TCreativetimerCustomEvents.RegisterObject;
  TCreativeAsset.RegisterObject;
  TCreativeAssetdetectedFeatures.RegisterObject;
  TCreativeAssetId.RegisterObject;
  TCreativeAssetMetadata.RegisterObject;
  TCreativeAssetMetadataclickTags.RegisterObject;
  TCreativeAssetMetadatadetectedFeatures.RegisterObject;
  TCreativeAssetMetadatawarnedValidationRules.RegisterObject;
  TCreativeAssignment.RegisterObject;
  TCreativeAssignmentcompanionCreativeOverrides.RegisterObject;
  TCreativeAssignmentcreativeGroupAssignments.RegisterObject;
  TCreativeAssignmentrichMediaExitOverrides.RegisterObject;
  TCreativeCustomEvent.RegisterObject;
  TCreativeField.RegisterObject;
  TCreativeFieldAssignment.RegisterObject;
  TCreativeFieldValue.RegisterObject;
  TCreativeFieldValuesListResponse.RegisterObject;
  TCreativeFieldValuesListResponsecreativeFieldValues.RegisterObject;
  TCreativeFieldsListResponse.RegisterObject;
  TCreativeFieldsListResponsecreativeFields.RegisterObject;
  TCreativeGroup.RegisterObject;
  TCreativeGroupAssignment.RegisterObject;
  TCreativeGroupsListResponse.RegisterObject;
  TCreativeGroupsListResponsecreativeGroups.RegisterObject;
  TCreativeOptimizationConfiguration.RegisterObject;
  TCreativeOptimizationConfigurationoptimizationActivitys.RegisterObject;
  TCreativeRotation.RegisterObject;
  TCreativeRotationcreativeAssignments.RegisterObject;
  TCreativeSettings.RegisterObject;
  TCreativesListResponse.RegisterObject;
  TCreativesListResponsecreatives.RegisterObject;
  TCrossDimensionReachReportCompatibleFields.RegisterObject;
  TCrossDimensionReachReportCompatibleFieldsbreakdown.RegisterObject;
  TCrossDimensionReachReportCompatibleFieldsdimensionFilters.RegisterObject;
  TCrossDimensionReachReportCompatibleFieldsmetrics.RegisterObject;
  TCrossDimensionReachReportCompatibleFieldsoverlapMetrics.RegisterObject;
  TCustomRichMediaEvents.RegisterObject;
  TCustomRichMediaEventsfilteredEventIds.RegisterObject;
  TDateRange.RegisterObject;
  TDayPartTargeting.RegisterObject;
  TDayPartTargetingdaysOfWeek.RegisterObject;
  TDayPartTargetinghoursOfDay.RegisterObject;
  TDefaultClickThroughEventTagProperties.RegisterObject;
  TDeliverySchedule.RegisterObject;
  TDfpSettings.RegisterObject;
  TDimension.RegisterObject;
  TDimensionFilter.RegisterObject;
  TDimensionValue.RegisterObject;
  TDimensionValueList.RegisterObject;
  TDimensionValueListitems.RegisterObject;
  TDimensionValueRequest.RegisterObject;
  TDimensionValueRequestfilters.RegisterObject;
  TDirectorySite.RegisterObject;
  TDirectorySitecontactAssignments.RegisterObject;
  TDirectorySiteinpageTagFormats.RegisterObject;
  TDirectorySiteinterstitialTagFormats.RegisterObject;
  TDirectorySiteContact.RegisterObject;
  TDirectorySiteContactAssignment.RegisterObject;
  TDirectorySiteContactsListResponse.RegisterObject;
  TDirectorySiteContactsListResponsedirectorySiteContacts.RegisterObject;
  TDirectorySiteSettings.RegisterObject;
  TDirectorySitesListResponse.RegisterObject;
  TDirectorySitesListResponsedirectorySites.RegisterObject;
  TEventTag.RegisterObject;
  TEventTagsiteIds.RegisterObject;
  TEventTagOverride.RegisterObject;
  TEventTagsListResponse.RegisterObject;
  TEventTagsListResponseeventTags.RegisterObject;
  TFile.RegisterObject;
  TFileurls.RegisterObject;
  TFileList.RegisterObject;
  TFileListitems.RegisterObject;
  TFlight.RegisterObject;
  TFloodlightActivitiesGenerateTagResponse.RegisterObject;
  TFloodlightActivitiesListResponse.RegisterObject;
  TFloodlightActivitiesListResponsefloodlightActivities.RegisterObject;
  TFloodlightActivity.RegisterObject;
  TFloodlightActivitydefaultTags.RegisterObject;
  TFloodlightActivitypublisherTags.RegisterObject;
  TFloodlightActivityuserDefinedVariableTypes.RegisterObject;
  TFloodlightActivityDynamicTag.RegisterObject;
  TFloodlightActivityGroup.RegisterObject;
  TFloodlightActivityGroupsListResponse.RegisterObject;
  TFloodlightActivityGroupsListResponsefloodlightActivityGroups.RegisterObject;
  TFloodlightActivityPublisherDynamicTag.RegisterObject;
  TFloodlightConfiguration.RegisterObject;
  TFloodlightConfigurationstandardVariableTypes.RegisterObject;
  TFloodlightConfigurationuserDefinedVariableConfigurations.RegisterObject;
  TFloodlightConfigurationsListResponse.RegisterObject;
  TFloodlightConfigurationsListResponsefloodlightConfigurations.RegisterObject;
  TFloodlightReportCompatibleFields.RegisterObject;
  TFloodlightReportCompatibleFieldsdimensionFilters.RegisterObject;
  TFloodlightReportCompatibleFieldsdimensions.RegisterObject;
  TFloodlightReportCompatibleFieldsmetrics.RegisterObject;
  TFrequencyCap.RegisterObject;
  TFsCommand.RegisterObject;
  TGeoTargeting.RegisterObject;
  TGeoTargetingcities.RegisterObject;
  TGeoTargetingcountries.RegisterObject;
  TGeoTargetingmetros.RegisterObject;
  TGeoTargetingpostalCodes.RegisterObject;
  TGeoTargetingregions.RegisterObject;
  TInventoryItem.RegisterObject;
  TInventoryItemadSlots.RegisterObject;
  TInventoryItemsListResponse.RegisterObject;
  TInventoryItemsListResponseinventoryItems.RegisterObject;
  TKeyValueTargetingExpression.RegisterObject;
  TLandingPage.RegisterObject;
  TLandingPagesListResponse.RegisterObject;
  TLandingPagesListResponselandingPages.RegisterObject;
  TLastModifiedInfo.RegisterObject;
  TListPopulationClause.RegisterObject;
  TListPopulationClauseterms.RegisterObject;
  TListPopulationRule.RegisterObject;
  TListPopulationRulelistPopulationClauses.RegisterObject;
  TListPopulationTerm.RegisterObject;
  TListTargetingExpression.RegisterObject;
  TLookbackConfiguration.RegisterObject;
  TMetric.RegisterObject;
  TMetro.RegisterObject;
  TMetrosListResponse.RegisterObject;
  TMetrosListResponsemetros.RegisterObject;
  TMobileCarrier.RegisterObject;
  TMobileCarriersListResponse.RegisterObject;
  TMobileCarriersListResponsemobileCarriers.RegisterObject;
  TObjectFilter.RegisterObject;
  TObjectFilterobjectIds.RegisterObject;
  TOffsetPosition.RegisterObject;
  TOmnitureSettings.RegisterObject;
  TOperatingSystem.RegisterObject;
  TOperatingSystemVersion.RegisterObject;
  TOperatingSystemVersionsListResponse.RegisterObject;
  TOperatingSystemVersionsListResponseoperatingSystemVersions.RegisterObject;
  TOperatingSystemsListResponse.RegisterObject;
  TOperatingSystemsListResponseoperatingSystems.RegisterObject;
  TOptimizationActivity.RegisterObject;
  TOrder.RegisterObject;
  TOrderapproverUserProfileIds.RegisterObject;
  TOrdercontacts.RegisterObject;
  TOrdersiteId.RegisterObject;
  TOrdersiteNames.RegisterObject;
  TOrderContact.RegisterObject;
  TOrderDocument.RegisterObject;
  TOrderDocumentapprovedByUserProfileIds.RegisterObject;
  TOrderDocumentsListResponse.RegisterObject;
  TOrderDocumentsListResponseorderDocuments.RegisterObject;
  TOrdersListResponse.RegisterObject;
  TOrdersListResponseorders.RegisterObject;
  TPathToConversionReportCompatibleFields.RegisterObject;
  TPathToConversionReportCompatibleFieldsconversionDimensions.RegisterObject;
  TPathToConversionReportCompatibleFieldscustomFloodlightVariables.RegisterObject;
  TPathToConversionReportCompatibleFieldsmetrics.RegisterObject;
  TPathToConversionReportCompatibleFieldsperInteractionDimensions.RegisterObject;
  TPlacement.RegisterObject;
  TPlacementtagFormats.RegisterObject;
  TPlacementAssignment.RegisterObject;
  TPlacementGroup.RegisterObject;
  TPlacementGroupchildPlacementIds.RegisterObject;
  TPlacementGroupsListResponse.RegisterObject;
  TPlacementGroupsListResponseplacementGroups.RegisterObject;
  TPlacementStrategiesListResponse.RegisterObject;
  TPlacementStrategiesListResponseplacementStrategies.RegisterObject;
  TPlacementStrategy.RegisterObject;
  TPlacementTag.RegisterObject;
  TPlacementTagtagDatas.RegisterObject;
  TPlacementsGenerateTagsResponse.RegisterObject;
  TPlacementsGenerateTagsResponseplacementTags.RegisterObject;
  TPlacementsListResponse.RegisterObject;
  TPlacementsListResponseplacements.RegisterObject;
  TPlatformType.RegisterObject;
  TPlatformTypesListResponse.RegisterObject;
  TPlatformTypesListResponseplatformTypes.RegisterObject;
  TPopupWindowProperties.RegisterObject;
  TPostalCode.RegisterObject;
  TPostalCodesListResponse.RegisterObject;
  TPostalCodesListResponsepostalCodes.RegisterObject;
  TPricing.RegisterObject;
  TPricingflights.RegisterObject;
  TPricingSchedule.RegisterObject;
  TPricingSchedulepricingPeriods.RegisterObject;
  TPricingSchedulePricingPeriod.RegisterObject;
  TProgrammaticSetting.RegisterObject;
  TProgrammaticSettingadxDealIds.RegisterObject;
  TProgrammaticSettingtraffickerEmails.RegisterObject;
  TProject.RegisterObject;
  TProjectsListResponse.RegisterObject;
  TProjectsListResponseprojects.RegisterObject;
  TReachReportCompatibleFields.RegisterObject;
  TReachReportCompatibleFieldsdimensionFilters.RegisterObject;
  TReachReportCompatibleFieldsdimensions.RegisterObject;
  TReachReportCompatibleFieldsmetrics.RegisterObject;
  TReachReportCompatibleFieldspivotedActivityMetrics.RegisterObject;
  TReachReportCompatibleFieldsreachByFrequencyMetrics.RegisterObject;
  TRecipient.RegisterObject;
  TRegion.RegisterObject;
  TRegionsListResponse.RegisterObject;
  TRegionsListResponseregions.RegisterObject;
  TRemarketingList.RegisterObject;
  TRemarketingListShare.RegisterObject;
  TRemarketingListSharesharedAccountIds.RegisterObject;
  TRemarketingListSharesharedAdvertiserIds.RegisterObject;
  TRemarketingListsListResponse.RegisterObject;
  TRemarketingListsListResponseremarketingLists.RegisterObject;
  TReport.RegisterObject;
  TReportcriteria.RegisterObject;
  TReportcriteriadimensionFilters.RegisterObject;
  TReportcriteriadimensions.RegisterObject;
  TReportcriteriametricNames.RegisterObject;
  TReportcrossDimensionReachCriteria.RegisterObject;
  TReportcrossDimensionReachCriteriabreakdown.RegisterObject;
  TReportcrossDimensionReachCriteriadimensionFilters.RegisterObject;
  TReportcrossDimensionReachCriteriametricNames.RegisterObject;
  TReportcrossDimensionReachCriteriaoverlapMetricNames.RegisterObject;
  TReportdelivery.RegisterObject;
  TReportdeliveryrecipients.RegisterObject;
  TReportfloodlightCriteria.RegisterObject;
  TReportfloodlightCriteriacustomRichMediaEvents.RegisterObject;
  TReportfloodlightCriteriadimensionFilters.RegisterObject;
  TReportfloodlightCriteriadimensions.RegisterObject;
  TReportfloodlightCriteriametricNames.RegisterObject;
  TReportfloodlightCriteriareportProperties.RegisterObject;
  TReportpathToConversionCriteria.RegisterObject;
  TReportpathToConversionCriteriaactivityFilters.RegisterObject;
  TReportpathToConversionCriteriaconversionDimensions.RegisterObject;
  TReportpathToConversionCriteriacustomFloodlightVariables.RegisterObject;
  TReportpathToConversionCriteriacustomRichMediaEvents.RegisterObject;
  TReportpathToConversionCriteriametricNames.RegisterObject;
  TReportpathToConversionCriteriaperInteractionDimensions.RegisterObject;
  TReportpathToConversionCriteriareportProperties.RegisterObject;
  TReportreachCriteria.RegisterObject;
  TReportreachCriteriadimensionFilters.RegisterObject;
  TReportreachCriteriadimensions.RegisterObject;
  TReportreachCriteriametricNames.RegisterObject;
  TReportreachCriteriareachByFrequencyMetricNames.RegisterObject;
  TReportschedule.RegisterObject;
  TReportschedulerepeatsOnWeekDays.RegisterObject;
  TReportCompatibleFields.RegisterObject;
  TReportCompatibleFieldsdimensionFilters.RegisterObject;
  TReportCompatibleFieldsdimensions.RegisterObject;
  TReportCompatibleFieldsmetrics.RegisterObject;
  TReportCompatibleFieldspivotedActivityMetrics.RegisterObject;
  TReportList.RegisterObject;
  TReportListitems.RegisterObject;
  TReportsConfiguration.RegisterObject;
  TRichMediaExitOverride.RegisterObject;
  TSite.RegisterObject;
  TSitesiteContacts.RegisterObject;
  TSiteContact.RegisterObject;
  TSiteSettings.RegisterObject;
  TSitesListResponse.RegisterObject;
  TSitesListResponsesites.RegisterObject;
  TSize.RegisterObject;
  TSizesListResponse.RegisterObject;
  TSizesListResponsesizes.RegisterObject;
  TSortedDimension.RegisterObject;
  TSubaccount.RegisterObject;
  TSubaccountavailablePermissionIds.RegisterObject;
  TSubaccountsListResponse.RegisterObject;
  TSubaccountsListResponsesubaccounts.RegisterObject;
  TTagData.RegisterObject;
  TTagSetting.RegisterObject;
  TTagSettings.RegisterObject;
  TTargetWindow.RegisterObject;
  TTargetableRemarketingList.RegisterObject;
  TTargetableRemarketingListsListResponse.RegisterObject;
  TTargetableRemarketingListsListResponsetargetableRemarketingLists.RegisterObject;
  TTechnologyTargeting.RegisterObject;
  TTechnologyTargetingbrowsers.RegisterObject;
  TTechnologyTargetingconnectionTypes.RegisterObject;
  TTechnologyTargetingmobileCarriers.RegisterObject;
  TTechnologyTargetingoperatingSystemVersions.RegisterObject;
  TTechnologyTargetingoperatingSystems.RegisterObject;
  TTechnologyTargetingplatformTypes.RegisterObject;
  TThirdPartyTrackingUrl.RegisterObject;
  TUserDefinedVariableConfiguration.RegisterObject;
  TUserProfile.RegisterObject;
  TUserProfileList.RegisterObject;
  TUserProfileListitems.RegisterObject;
  TUserRole.RegisterObject;
  TUserRolepermissions.RegisterObject;
  TUserRolePermission.RegisterObject;
  TUserRolePermissionGroup.RegisterObject;
  TUserRolePermissionGroupsListResponse.RegisterObject;
  TUserRolePermissionGroupsListResponseuserRolePermissionGroups.RegisterObject;
  TUserRolePermissionsListResponse.RegisterObject;
  TUserRolePermissionsListResponseuserRolePermissions.RegisterObject;
  TUserRolesListResponse.RegisterObject;
  TUserRolesListResponseuserRoles.RegisterObject;
end;


Function TDfareportingAPI.GetAccountActiveAdSummariesInstance : TAccountActiveAdSummariesResource;

begin
  if (FAccountActiveAdSummariesInstance=Nil) then
    FAccountActiveAdSummariesInstance:=CreateAccountActiveAdSummariesResource;
  Result:=FAccountActiveAdSummariesInstance;
end;

Function TDfareportingAPI.CreateAccountActiveAdSummariesResource : TAccountActiveAdSummariesResource;

begin
  Result:=CreateAccountActiveAdSummariesResource(Self);
end;


Function TDfareportingAPI.CreateAccountActiveAdSummariesResource(AOwner : TComponent) : TAccountActiveAdSummariesResource;

begin
  Result:=TAccountActiveAdSummariesResource.Create(AOwner);
  Result.API:=Self;
end;



Function TDfareportingAPI.GetAccountPermissionGroupsInstance : TAccountPermissionGroupsResource;

begin
  if (FAccountPermissionGroupsInstance=Nil) then
    FAccountPermissionGroupsInstance:=CreateAccountPermissionGroupsResource;
  Result:=FAccountPermissionGroupsInstance;
end;

Function TDfareportingAPI.CreateAccountPermissionGroupsResource : TAccountPermissionGroupsResource;

begin
  Result:=CreateAccountPermissionGroupsResource(Self);
end;


Function TDfareportingAPI.CreateAccountPermissionGroupsResource(AOwner : TComponent) : TAccountPermissionGroupsResource;

begin
  Result:=TAccountPermissionGroupsResource.Create(AOwner);
  Result.API:=Self;
end;



Function TDfareportingAPI.GetAccountPermissionsInstance : TAccountPermissionsResource;

begin
  if (FAccountPermissionsInstance=Nil) then
    FAccountPermissionsInstance:=CreateAccountPermissionsResource;
  Result:=FAccountPermissionsInstance;
end;

Function TDfareportingAPI.CreateAccountPermissionsResource : TAccountPermissionsResource;

begin
  Result:=CreateAccountPermissionsResource(Self);
end;


Function TDfareportingAPI.CreateAccountPermissionsResource(AOwner : TComponent) : TAccountPermissionsResource;

begin
  Result:=TAccountPermissionsResource.Create(AOwner);
  Result.API:=Self;
end;



Function TDfareportingAPI.GetAccountUserProfilesInstance : TAccountUserProfilesResource;

begin
  if (FAccountUserProfilesInstance=Nil) then
    FAccountUserProfilesInstance:=CreateAccountUserProfilesResource;
  Result:=FAccountUserProfilesInstance;
end;

Function TDfareportingAPI.CreateAccountUserProfilesResource : TAccountUserProfilesResource;

begin
  Result:=CreateAccountUserProfilesResource(Self);
end;


Function TDfareportingAPI.CreateAccountUserProfilesResource(AOwner : TComponent) : TAccountUserProfilesResource;

begin
  Result:=TAccountUserProfilesResource.Create(AOwner);
  Result.API:=Self;
end;



Function TDfareportingAPI.GetAccountsInstance : TAccountsResource;

begin
  if (FAccountsInstance=Nil) then
    FAccountsInstance:=CreateAccountsResource;
  Result:=FAccountsInstance;
end;

Function TDfareportingAPI.CreateAccountsResource : TAccountsResource;

begin
  Result:=CreateAccountsResource(Self);
end;


Function TDfareportingAPI.CreateAccountsResource(AOwner : TComponent) : TAccountsResource;

begin
  Result:=TAccountsResource.Create(AOwner);
  Result.API:=Self;
end;



Function TDfareportingAPI.GetAdsInstance : TAdsResource;

begin
  if (FAdsInstance=Nil) then
    FAdsInstance:=CreateAdsResource;
  Result:=FAdsInstance;
end;

Function TDfareportingAPI.CreateAdsResource : TAdsResource;

begin
  Result:=CreateAdsResource(Self);
end;


Function TDfareportingAPI.CreateAdsResource(AOwner : TComponent) : TAdsResource;

begin
  Result:=TAdsResource.Create(AOwner);
  Result.API:=Self;
end;



Function TDfareportingAPI.GetAdvertiserGroupsInstance : TAdvertiserGroupsResource;

begin
  if (FAdvertiserGroupsInstance=Nil) then
    FAdvertiserGroupsInstance:=CreateAdvertiserGroupsResource;
  Result:=FAdvertiserGroupsInstance;
end;

Function TDfareportingAPI.CreateAdvertiserGroupsResource : TAdvertiserGroupsResource;

begin
  Result:=CreateAdvertiserGroupsResource(Self);
end;


Function TDfareportingAPI.CreateAdvertiserGroupsResource(AOwner : TComponent) : TAdvertiserGroupsResource;

begin
  Result:=TAdvertiserGroupsResource.Create(AOwner);
  Result.API:=Self;
end;



Function TDfareportingAPI.GetAdvertisersInstance : TAdvertisersResource;

begin
  if (FAdvertisersInstance=Nil) then
    FAdvertisersInstance:=CreateAdvertisersResource;
  Result:=FAdvertisersInstance;
end;

Function TDfareportingAPI.CreateAdvertisersResource : TAdvertisersResource;

begin
  Result:=CreateAdvertisersResource(Self);
end;


Function TDfareportingAPI.CreateAdvertisersResource(AOwner : TComponent) : TAdvertisersResource;

begin
  Result:=TAdvertisersResource.Create(AOwner);
  Result.API:=Self;
end;



Function TDfareportingAPI.GetBrowsersInstance : TBrowsersResource;

begin
  if (FBrowsersInstance=Nil) then
    FBrowsersInstance:=CreateBrowsersResource;
  Result:=FBrowsersInstance;
end;

Function TDfareportingAPI.CreateBrowsersResource : TBrowsersResource;

begin
  Result:=CreateBrowsersResource(Self);
end;


Function TDfareportingAPI.CreateBrowsersResource(AOwner : TComponent) : TBrowsersResource;

begin
  Result:=TBrowsersResource.Create(AOwner);
  Result.API:=Self;
end;



Function TDfareportingAPI.GetCampaignCreativeAssociationsInstance : TCampaignCreativeAssociationsResource;

begin
  if (FCampaignCreativeAssociationsInstance=Nil) then
    FCampaignCreativeAssociationsInstance:=CreateCampaignCreativeAssociationsResource;
  Result:=FCampaignCreativeAssociationsInstance;
end;

Function TDfareportingAPI.CreateCampaignCreativeAssociationsResource : TCampaignCreativeAssociationsResource;

begin
  Result:=CreateCampaignCreativeAssociationsResource(Self);
end;


Function TDfareportingAPI.CreateCampaignCreativeAssociationsResource(AOwner : TComponent) : TCampaignCreativeAssociationsResource;

begin
  Result:=TCampaignCreativeAssociationsResource.Create(AOwner);
  Result.API:=Self;
end;



Function TDfareportingAPI.GetCampaignsInstance : TCampaignsResource;

begin
  if (FCampaignsInstance=Nil) then
    FCampaignsInstance:=CreateCampaignsResource;
  Result:=FCampaignsInstance;
end;

Function TDfareportingAPI.CreateCampaignsResource : TCampaignsResource;

begin
  Result:=CreateCampaignsResource(Self);
end;


Function TDfareportingAPI.CreateCampaignsResource(AOwner : TComponent) : TCampaignsResource;

begin
  Result:=TCampaignsResource.Create(AOwner);
  Result.API:=Self;
end;



Function TDfareportingAPI.GetChangeLogsInstance : TChangeLogsResource;

begin
  if (FChangeLogsInstance=Nil) then
    FChangeLogsInstance:=CreateChangeLogsResource;
  Result:=FChangeLogsInstance;
end;

Function TDfareportingAPI.CreateChangeLogsResource : TChangeLogsResource;

begin
  Result:=CreateChangeLogsResource(Self);
end;


Function TDfareportingAPI.CreateChangeLogsResource(AOwner : TComponent) : TChangeLogsResource;

begin
  Result:=TChangeLogsResource.Create(AOwner);
  Result.API:=Self;
end;



Function TDfareportingAPI.GetCitiesInstance : TCitiesResource;

begin
  if (FCitiesInstance=Nil) then
    FCitiesInstance:=CreateCitiesResource;
  Result:=FCitiesInstance;
end;

Function TDfareportingAPI.CreateCitiesResource : TCitiesResource;

begin
  Result:=CreateCitiesResource(Self);
end;


Function TDfareportingAPI.CreateCitiesResource(AOwner : TComponent) : TCitiesResource;

begin
  Result:=TCitiesResource.Create(AOwner);
  Result.API:=Self;
end;



Function TDfareportingAPI.GetConnectionTypesInstance : TConnectionTypesResource;

begin
  if (FConnectionTypesInstance=Nil) then
    FConnectionTypesInstance:=CreateConnectionTypesResource;
  Result:=FConnectionTypesInstance;
end;

Function TDfareportingAPI.CreateConnectionTypesResource : TConnectionTypesResource;

begin
  Result:=CreateConnectionTypesResource(Self);
end;


Function TDfareportingAPI.CreateConnectionTypesResource(AOwner : TComponent) : TConnectionTypesResource;

begin
  Result:=TConnectionTypesResource.Create(AOwner);
  Result.API:=Self;
end;



Function TDfareportingAPI.GetContentCategoriesInstance : TContentCategoriesResource;

begin
  if (FContentCategoriesInstance=Nil) then
    FContentCategoriesInstance:=CreateContentCategoriesResource;
  Result:=FContentCategoriesInstance;
end;

Function TDfareportingAPI.CreateContentCategoriesResource : TContentCategoriesResource;

begin
  Result:=CreateContentCategoriesResource(Self);
end;


Function TDfareportingAPI.CreateContentCategoriesResource(AOwner : TComponent) : TContentCategoriesResource;

begin
  Result:=TContentCategoriesResource.Create(AOwner);
  Result.API:=Self;
end;



Function TDfareportingAPI.GetCountriesInstance : TCountriesResource;

begin
  if (FCountriesInstance=Nil) then
    FCountriesInstance:=CreateCountriesResource;
  Result:=FCountriesInstance;
end;

Function TDfareportingAPI.CreateCountriesResource : TCountriesResource;

begin
  Result:=CreateCountriesResource(Self);
end;


Function TDfareportingAPI.CreateCountriesResource(AOwner : TComponent) : TCountriesResource;

begin
  Result:=TCountriesResource.Create(AOwner);
  Result.API:=Self;
end;



Function TDfareportingAPI.GetCreativeAssetsInstance : TCreativeAssetsResource;

begin
  if (FCreativeAssetsInstance=Nil) then
    FCreativeAssetsInstance:=CreateCreativeAssetsResource;
  Result:=FCreativeAssetsInstance;
end;

Function TDfareportingAPI.CreateCreativeAssetsResource : TCreativeAssetsResource;

begin
  Result:=CreateCreativeAssetsResource(Self);
end;


Function TDfareportingAPI.CreateCreativeAssetsResource(AOwner : TComponent) : TCreativeAssetsResource;

begin
  Result:=TCreativeAssetsResource.Create(AOwner);
  Result.API:=Self;
end;



Function TDfareportingAPI.GetCreativeFieldValuesInstance : TCreativeFieldValuesResource;

begin
  if (FCreativeFieldValuesInstance=Nil) then
    FCreativeFieldValuesInstance:=CreateCreativeFieldValuesResource;
  Result:=FCreativeFieldValuesInstance;
end;

Function TDfareportingAPI.CreateCreativeFieldValuesResource : TCreativeFieldValuesResource;

begin
  Result:=CreateCreativeFieldValuesResource(Self);
end;


Function TDfareportingAPI.CreateCreativeFieldValuesResource(AOwner : TComponent) : TCreativeFieldValuesResource;

begin
  Result:=TCreativeFieldValuesResource.Create(AOwner);
  Result.API:=Self;
end;



Function TDfareportingAPI.GetCreativeFieldsInstance : TCreativeFieldsResource;

begin
  if (FCreativeFieldsInstance=Nil) then
    FCreativeFieldsInstance:=CreateCreativeFieldsResource;
  Result:=FCreativeFieldsInstance;
end;

Function TDfareportingAPI.CreateCreativeFieldsResource : TCreativeFieldsResource;

begin
  Result:=CreateCreativeFieldsResource(Self);
end;


Function TDfareportingAPI.CreateCreativeFieldsResource(AOwner : TComponent) : TCreativeFieldsResource;

begin
  Result:=TCreativeFieldsResource.Create(AOwner);
  Result.API:=Self;
end;



Function TDfareportingAPI.GetCreativeGroupsInstance : TCreativeGroupsResource;

begin
  if (FCreativeGroupsInstance=Nil) then
    FCreativeGroupsInstance:=CreateCreativeGroupsResource;
  Result:=FCreativeGroupsInstance;
end;

Function TDfareportingAPI.CreateCreativeGroupsResource : TCreativeGroupsResource;

begin
  Result:=CreateCreativeGroupsResource(Self);
end;


Function TDfareportingAPI.CreateCreativeGroupsResource(AOwner : TComponent) : TCreativeGroupsResource;

begin
  Result:=TCreativeGroupsResource.Create(AOwner);
  Result.API:=Self;
end;



Function TDfareportingAPI.GetCreativesInstance : TCreativesResource;

begin
  if (FCreativesInstance=Nil) then
    FCreativesInstance:=CreateCreativesResource;
  Result:=FCreativesInstance;
end;

Function TDfareportingAPI.CreateCreativesResource : TCreativesResource;

begin
  Result:=CreateCreativesResource(Self);
end;


Function TDfareportingAPI.CreateCreativesResource(AOwner : TComponent) : TCreativesResource;

begin
  Result:=TCreativesResource.Create(AOwner);
  Result.API:=Self;
end;



Function TDfareportingAPI.GetDimensionValuesInstance : TDimensionValuesResource;

begin
  if (FDimensionValuesInstance=Nil) then
    FDimensionValuesInstance:=CreateDimensionValuesResource;
  Result:=FDimensionValuesInstance;
end;

Function TDfareportingAPI.CreateDimensionValuesResource : TDimensionValuesResource;

begin
  Result:=CreateDimensionValuesResource(Self);
end;


Function TDfareportingAPI.CreateDimensionValuesResource(AOwner : TComponent) : TDimensionValuesResource;

begin
  Result:=TDimensionValuesResource.Create(AOwner);
  Result.API:=Self;
end;



Function TDfareportingAPI.GetDirectorySiteContactsInstance : TDirectorySiteContactsResource;

begin
  if (FDirectorySiteContactsInstance=Nil) then
    FDirectorySiteContactsInstance:=CreateDirectorySiteContactsResource;
  Result:=FDirectorySiteContactsInstance;
end;

Function TDfareportingAPI.CreateDirectorySiteContactsResource : TDirectorySiteContactsResource;

begin
  Result:=CreateDirectorySiteContactsResource(Self);
end;


Function TDfareportingAPI.CreateDirectorySiteContactsResource(AOwner : TComponent) : TDirectorySiteContactsResource;

begin
  Result:=TDirectorySiteContactsResource.Create(AOwner);
  Result.API:=Self;
end;



Function TDfareportingAPI.GetDirectorySitesInstance : TDirectorySitesResource;

begin
  if (FDirectorySitesInstance=Nil) then
    FDirectorySitesInstance:=CreateDirectorySitesResource;
  Result:=FDirectorySitesInstance;
end;

Function TDfareportingAPI.CreateDirectorySitesResource : TDirectorySitesResource;

begin
  Result:=CreateDirectorySitesResource(Self);
end;


Function TDfareportingAPI.CreateDirectorySitesResource(AOwner : TComponent) : TDirectorySitesResource;

begin
  Result:=TDirectorySitesResource.Create(AOwner);
  Result.API:=Self;
end;



Function TDfareportingAPI.GetEventTagsInstance : TEventTagsResource;

begin
  if (FEventTagsInstance=Nil) then
    FEventTagsInstance:=CreateEventTagsResource;
  Result:=FEventTagsInstance;
end;

Function TDfareportingAPI.CreateEventTagsResource : TEventTagsResource;

begin
  Result:=CreateEventTagsResource(Self);
end;


Function TDfareportingAPI.CreateEventTagsResource(AOwner : TComponent) : TEventTagsResource;

begin
  Result:=TEventTagsResource.Create(AOwner);
  Result.API:=Self;
end;



Function TDfareportingAPI.GetFilesInstance : TFilesResource;

begin
  if (FFilesInstance=Nil) then
    FFilesInstance:=CreateFilesResource;
  Result:=FFilesInstance;
end;

Function TDfareportingAPI.CreateFilesResource : TFilesResource;

begin
  Result:=CreateFilesResource(Self);
end;


Function TDfareportingAPI.CreateFilesResource(AOwner : TComponent) : TFilesResource;

begin
  Result:=TFilesResource.Create(AOwner);
  Result.API:=Self;
end;



Function TDfareportingAPI.GetFloodlightActivitiesInstance : TFloodlightActivitiesResource;

begin
  if (FFloodlightActivitiesInstance=Nil) then
    FFloodlightActivitiesInstance:=CreateFloodlightActivitiesResource;
  Result:=FFloodlightActivitiesInstance;
end;

Function TDfareportingAPI.CreateFloodlightActivitiesResource : TFloodlightActivitiesResource;

begin
  Result:=CreateFloodlightActivitiesResource(Self);
end;


Function TDfareportingAPI.CreateFloodlightActivitiesResource(AOwner : TComponent) : TFloodlightActivitiesResource;

begin
  Result:=TFloodlightActivitiesResource.Create(AOwner);
  Result.API:=Self;
end;



Function TDfareportingAPI.GetFloodlightActivityGroupsInstance : TFloodlightActivityGroupsResource;

begin
  if (FFloodlightActivityGroupsInstance=Nil) then
    FFloodlightActivityGroupsInstance:=CreateFloodlightActivityGroupsResource;
  Result:=FFloodlightActivityGroupsInstance;
end;

Function TDfareportingAPI.CreateFloodlightActivityGroupsResource : TFloodlightActivityGroupsResource;

begin
  Result:=CreateFloodlightActivityGroupsResource(Self);
end;


Function TDfareportingAPI.CreateFloodlightActivityGroupsResource(AOwner : TComponent) : TFloodlightActivityGroupsResource;

begin
  Result:=TFloodlightActivityGroupsResource.Create(AOwner);
  Result.API:=Self;
end;



Function TDfareportingAPI.GetFloodlightConfigurationsInstance : TFloodlightConfigurationsResource;

begin
  if (FFloodlightConfigurationsInstance=Nil) then
    FFloodlightConfigurationsInstance:=CreateFloodlightConfigurationsResource;
  Result:=FFloodlightConfigurationsInstance;
end;

Function TDfareportingAPI.CreateFloodlightConfigurationsResource : TFloodlightConfigurationsResource;

begin
  Result:=CreateFloodlightConfigurationsResource(Self);
end;


Function TDfareportingAPI.CreateFloodlightConfigurationsResource(AOwner : TComponent) : TFloodlightConfigurationsResource;

begin
  Result:=TFloodlightConfigurationsResource.Create(AOwner);
  Result.API:=Self;
end;



Function TDfareportingAPI.GetInventoryItemsInstance : TInventoryItemsResource;

begin
  if (FInventoryItemsInstance=Nil) then
    FInventoryItemsInstance:=CreateInventoryItemsResource;
  Result:=FInventoryItemsInstance;
end;

Function TDfareportingAPI.CreateInventoryItemsResource : TInventoryItemsResource;

begin
  Result:=CreateInventoryItemsResource(Self);
end;


Function TDfareportingAPI.CreateInventoryItemsResource(AOwner : TComponent) : TInventoryItemsResource;

begin
  Result:=TInventoryItemsResource.Create(AOwner);
  Result.API:=Self;
end;



Function TDfareportingAPI.GetLandingPagesInstance : TLandingPagesResource;

begin
  if (FLandingPagesInstance=Nil) then
    FLandingPagesInstance:=CreateLandingPagesResource;
  Result:=FLandingPagesInstance;
end;

Function TDfareportingAPI.CreateLandingPagesResource : TLandingPagesResource;

begin
  Result:=CreateLandingPagesResource(Self);
end;


Function TDfareportingAPI.CreateLandingPagesResource(AOwner : TComponent) : TLandingPagesResource;

begin
  Result:=TLandingPagesResource.Create(AOwner);
  Result.API:=Self;
end;



Function TDfareportingAPI.GetMetrosInstance : TMetrosResource;

begin
  if (FMetrosInstance=Nil) then
    FMetrosInstance:=CreateMetrosResource;
  Result:=FMetrosInstance;
end;

Function TDfareportingAPI.CreateMetrosResource : TMetrosResource;

begin
  Result:=CreateMetrosResource(Self);
end;


Function TDfareportingAPI.CreateMetrosResource(AOwner : TComponent) : TMetrosResource;

begin
  Result:=TMetrosResource.Create(AOwner);
  Result.API:=Self;
end;



Function TDfareportingAPI.GetMobileCarriersInstance : TMobileCarriersResource;

begin
  if (FMobileCarriersInstance=Nil) then
    FMobileCarriersInstance:=CreateMobileCarriersResource;
  Result:=FMobileCarriersInstance;
end;

Function TDfareportingAPI.CreateMobileCarriersResource : TMobileCarriersResource;

begin
  Result:=CreateMobileCarriersResource(Self);
end;


Function TDfareportingAPI.CreateMobileCarriersResource(AOwner : TComponent) : TMobileCarriersResource;

begin
  Result:=TMobileCarriersResource.Create(AOwner);
  Result.API:=Self;
end;



Function TDfareportingAPI.GetOperatingSystemVersionsInstance : TOperatingSystemVersionsResource;

begin
  if (FOperatingSystemVersionsInstance=Nil) then
    FOperatingSystemVersionsInstance:=CreateOperatingSystemVersionsResource;
  Result:=FOperatingSystemVersionsInstance;
end;

Function TDfareportingAPI.CreateOperatingSystemVersionsResource : TOperatingSystemVersionsResource;

begin
  Result:=CreateOperatingSystemVersionsResource(Self);
end;


Function TDfareportingAPI.CreateOperatingSystemVersionsResource(AOwner : TComponent) : TOperatingSystemVersionsResource;

begin
  Result:=TOperatingSystemVersionsResource.Create(AOwner);
  Result.API:=Self;
end;



Function TDfareportingAPI.GetOperatingSystemsInstance : TOperatingSystemsResource;

begin
  if (FOperatingSystemsInstance=Nil) then
    FOperatingSystemsInstance:=CreateOperatingSystemsResource;
  Result:=FOperatingSystemsInstance;
end;

Function TDfareportingAPI.CreateOperatingSystemsResource : TOperatingSystemsResource;

begin
  Result:=CreateOperatingSystemsResource(Self);
end;


Function TDfareportingAPI.CreateOperatingSystemsResource(AOwner : TComponent) : TOperatingSystemsResource;

begin
  Result:=TOperatingSystemsResource.Create(AOwner);
  Result.API:=Self;
end;



Function TDfareportingAPI.GetOrderDocumentsInstance : TOrderDocumentsResource;

begin
  if (FOrderDocumentsInstance=Nil) then
    FOrderDocumentsInstance:=CreateOrderDocumentsResource;
  Result:=FOrderDocumentsInstance;
end;

Function TDfareportingAPI.CreateOrderDocumentsResource : TOrderDocumentsResource;

begin
  Result:=CreateOrderDocumentsResource(Self);
end;


Function TDfareportingAPI.CreateOrderDocumentsResource(AOwner : TComponent) : TOrderDocumentsResource;

begin
  Result:=TOrderDocumentsResource.Create(AOwner);
  Result.API:=Self;
end;



Function TDfareportingAPI.GetOrdersInstance : TOrdersResource;

begin
  if (FOrdersInstance=Nil) then
    FOrdersInstance:=CreateOrdersResource;
  Result:=FOrdersInstance;
end;

Function TDfareportingAPI.CreateOrdersResource : TOrdersResource;

begin
  Result:=CreateOrdersResource(Self);
end;


Function TDfareportingAPI.CreateOrdersResource(AOwner : TComponent) : TOrdersResource;

begin
  Result:=TOrdersResource.Create(AOwner);
  Result.API:=Self;
end;



Function TDfareportingAPI.GetPlacementGroupsInstance : TPlacementGroupsResource;

begin
  if (FPlacementGroupsInstance=Nil) then
    FPlacementGroupsInstance:=CreatePlacementGroupsResource;
  Result:=FPlacementGroupsInstance;
end;

Function TDfareportingAPI.CreatePlacementGroupsResource : TPlacementGroupsResource;

begin
  Result:=CreatePlacementGroupsResource(Self);
end;


Function TDfareportingAPI.CreatePlacementGroupsResource(AOwner : TComponent) : TPlacementGroupsResource;

begin
  Result:=TPlacementGroupsResource.Create(AOwner);
  Result.API:=Self;
end;



Function TDfareportingAPI.GetPlacementStrategiesInstance : TPlacementStrategiesResource;

begin
  if (FPlacementStrategiesInstance=Nil) then
    FPlacementStrategiesInstance:=CreatePlacementStrategiesResource;
  Result:=FPlacementStrategiesInstance;
end;

Function TDfareportingAPI.CreatePlacementStrategiesResource : TPlacementStrategiesResource;

begin
  Result:=CreatePlacementStrategiesResource(Self);
end;


Function TDfareportingAPI.CreatePlacementStrategiesResource(AOwner : TComponent) : TPlacementStrategiesResource;

begin
  Result:=TPlacementStrategiesResource.Create(AOwner);
  Result.API:=Self;
end;



Function TDfareportingAPI.GetPlacementsInstance : TPlacementsResource;

begin
  if (FPlacementsInstance=Nil) then
    FPlacementsInstance:=CreatePlacementsResource;
  Result:=FPlacementsInstance;
end;

Function TDfareportingAPI.CreatePlacementsResource : TPlacementsResource;

begin
  Result:=CreatePlacementsResource(Self);
end;


Function TDfareportingAPI.CreatePlacementsResource(AOwner : TComponent) : TPlacementsResource;

begin
  Result:=TPlacementsResource.Create(AOwner);
  Result.API:=Self;
end;



Function TDfareportingAPI.GetPlatformTypesInstance : TPlatformTypesResource;

begin
  if (FPlatformTypesInstance=Nil) then
    FPlatformTypesInstance:=CreatePlatformTypesResource;
  Result:=FPlatformTypesInstance;
end;

Function TDfareportingAPI.CreatePlatformTypesResource : TPlatformTypesResource;

begin
  Result:=CreatePlatformTypesResource(Self);
end;


Function TDfareportingAPI.CreatePlatformTypesResource(AOwner : TComponent) : TPlatformTypesResource;

begin
  Result:=TPlatformTypesResource.Create(AOwner);
  Result.API:=Self;
end;



Function TDfareportingAPI.GetPostalCodesInstance : TPostalCodesResource;

begin
  if (FPostalCodesInstance=Nil) then
    FPostalCodesInstance:=CreatePostalCodesResource;
  Result:=FPostalCodesInstance;
end;

Function TDfareportingAPI.CreatePostalCodesResource : TPostalCodesResource;

begin
  Result:=CreatePostalCodesResource(Self);
end;


Function TDfareportingAPI.CreatePostalCodesResource(AOwner : TComponent) : TPostalCodesResource;

begin
  Result:=TPostalCodesResource.Create(AOwner);
  Result.API:=Self;
end;



Function TDfareportingAPI.GetProjectsInstance : TProjectsResource;

begin
  if (FProjectsInstance=Nil) then
    FProjectsInstance:=CreateProjectsResource;
  Result:=FProjectsInstance;
end;

Function TDfareportingAPI.CreateProjectsResource : TProjectsResource;

begin
  Result:=CreateProjectsResource(Self);
end;


Function TDfareportingAPI.CreateProjectsResource(AOwner : TComponent) : TProjectsResource;

begin
  Result:=TProjectsResource.Create(AOwner);
  Result.API:=Self;
end;



Function TDfareportingAPI.GetRegionsInstance : TRegionsResource;

begin
  if (FRegionsInstance=Nil) then
    FRegionsInstance:=CreateRegionsResource;
  Result:=FRegionsInstance;
end;

Function TDfareportingAPI.CreateRegionsResource : TRegionsResource;

begin
  Result:=CreateRegionsResource(Self);
end;


Function TDfareportingAPI.CreateRegionsResource(AOwner : TComponent) : TRegionsResource;

begin
  Result:=TRegionsResource.Create(AOwner);
  Result.API:=Self;
end;



Function TDfareportingAPI.GetRemarketingListSharesInstance : TRemarketingListSharesResource;

begin
  if (FRemarketingListSharesInstance=Nil) then
    FRemarketingListSharesInstance:=CreateRemarketingListSharesResource;
  Result:=FRemarketingListSharesInstance;
end;

Function TDfareportingAPI.CreateRemarketingListSharesResource : TRemarketingListSharesResource;

begin
  Result:=CreateRemarketingListSharesResource(Self);
end;


Function TDfareportingAPI.CreateRemarketingListSharesResource(AOwner : TComponent) : TRemarketingListSharesResource;

begin
  Result:=TRemarketingListSharesResource.Create(AOwner);
  Result.API:=Self;
end;



Function TDfareportingAPI.GetRemarketingListsInstance : TRemarketingListsResource;

begin
  if (FRemarketingListsInstance=Nil) then
    FRemarketingListsInstance:=CreateRemarketingListsResource;
  Result:=FRemarketingListsInstance;
end;

Function TDfareportingAPI.CreateRemarketingListsResource : TRemarketingListsResource;

begin
  Result:=CreateRemarketingListsResource(Self);
end;


Function TDfareportingAPI.CreateRemarketingListsResource(AOwner : TComponent) : TRemarketingListsResource;

begin
  Result:=TRemarketingListsResource.Create(AOwner);
  Result.API:=Self;
end;



Function TDfareportingAPI.GetReportsInstance : TReportsResource;

begin
  if (FReportsInstance=Nil) then
    FReportsInstance:=CreateReportsResource;
  Result:=FReportsInstance;
end;

Function TDfareportingAPI.CreateReportsResource : TReportsResource;

begin
  Result:=CreateReportsResource(Self);
end;


Function TDfareportingAPI.CreateReportsResource(AOwner : TComponent) : TReportsResource;

begin
  Result:=TReportsResource.Create(AOwner);
  Result.API:=Self;
end;



Function TDfareportingAPI.GetSitesInstance : TSitesResource;

begin
  if (FSitesInstance=Nil) then
    FSitesInstance:=CreateSitesResource;
  Result:=FSitesInstance;
end;

Function TDfareportingAPI.CreateSitesResource : TSitesResource;

begin
  Result:=CreateSitesResource(Self);
end;


Function TDfareportingAPI.CreateSitesResource(AOwner : TComponent) : TSitesResource;

begin
  Result:=TSitesResource.Create(AOwner);
  Result.API:=Self;
end;



Function TDfareportingAPI.GetSizesInstance : TSizesResource;

begin
  if (FSizesInstance=Nil) then
    FSizesInstance:=CreateSizesResource;
  Result:=FSizesInstance;
end;

Function TDfareportingAPI.CreateSizesResource : TSizesResource;

begin
  Result:=CreateSizesResource(Self);
end;


Function TDfareportingAPI.CreateSizesResource(AOwner : TComponent) : TSizesResource;

begin
  Result:=TSizesResource.Create(AOwner);
  Result.API:=Self;
end;



Function TDfareportingAPI.GetSubaccountsInstance : TSubaccountsResource;

begin
  if (FSubaccountsInstance=Nil) then
    FSubaccountsInstance:=CreateSubaccountsResource;
  Result:=FSubaccountsInstance;
end;

Function TDfareportingAPI.CreateSubaccountsResource : TSubaccountsResource;

begin
  Result:=CreateSubaccountsResource(Self);
end;


Function TDfareportingAPI.CreateSubaccountsResource(AOwner : TComponent) : TSubaccountsResource;

begin
  Result:=TSubaccountsResource.Create(AOwner);
  Result.API:=Self;
end;



Function TDfareportingAPI.GetTargetableRemarketingListsInstance : TTargetableRemarketingListsResource;

begin
  if (FTargetableRemarketingListsInstance=Nil) then
    FTargetableRemarketingListsInstance:=CreateTargetableRemarketingListsResource;
  Result:=FTargetableRemarketingListsInstance;
end;

Function TDfareportingAPI.CreateTargetableRemarketingListsResource : TTargetableRemarketingListsResource;

begin
  Result:=CreateTargetableRemarketingListsResource(Self);
end;


Function TDfareportingAPI.CreateTargetableRemarketingListsResource(AOwner : TComponent) : TTargetableRemarketingListsResource;

begin
  Result:=TTargetableRemarketingListsResource.Create(AOwner);
  Result.API:=Self;
end;



Function TDfareportingAPI.GetUserProfilesInstance : TUserProfilesResource;

begin
  if (FUserProfilesInstance=Nil) then
    FUserProfilesInstance:=CreateUserProfilesResource;
  Result:=FUserProfilesInstance;
end;

Function TDfareportingAPI.CreateUserProfilesResource : TUserProfilesResource;

begin
  Result:=CreateUserProfilesResource(Self);
end;


Function TDfareportingAPI.CreateUserProfilesResource(AOwner : TComponent) : TUserProfilesResource;

begin
  Result:=TUserProfilesResource.Create(AOwner);
  Result.API:=Self;
end;



Function TDfareportingAPI.GetUserRolePermissionGroupsInstance : TUserRolePermissionGroupsResource;

begin
  if (FUserRolePermissionGroupsInstance=Nil) then
    FUserRolePermissionGroupsInstance:=CreateUserRolePermissionGroupsResource;
  Result:=FUserRolePermissionGroupsInstance;
end;

Function TDfareportingAPI.CreateUserRolePermissionGroupsResource : TUserRolePermissionGroupsResource;

begin
  Result:=CreateUserRolePermissionGroupsResource(Self);
end;


Function TDfareportingAPI.CreateUserRolePermissionGroupsResource(AOwner : TComponent) : TUserRolePermissionGroupsResource;

begin
  Result:=TUserRolePermissionGroupsResource.Create(AOwner);
  Result.API:=Self;
end;



Function TDfareportingAPI.GetUserRolePermissionsInstance : TUserRolePermissionsResource;

begin
  if (FUserRolePermissionsInstance=Nil) then
    FUserRolePermissionsInstance:=CreateUserRolePermissionsResource;
  Result:=FUserRolePermissionsInstance;
end;

Function TDfareportingAPI.CreateUserRolePermissionsResource : TUserRolePermissionsResource;

begin
  Result:=CreateUserRolePermissionsResource(Self);
end;


Function TDfareportingAPI.CreateUserRolePermissionsResource(AOwner : TComponent) : TUserRolePermissionsResource;

begin
  Result:=TUserRolePermissionsResource.Create(AOwner);
  Result.API:=Self;
end;



Function TDfareportingAPI.GetUserRolesInstance : TUserRolesResource;

begin
  if (FUserRolesInstance=Nil) then
    FUserRolesInstance:=CreateUserRolesResource;
  Result:=FUserRolesInstance;
end;

Function TDfareportingAPI.CreateUserRolesResource : TUserRolesResource;

begin
  Result:=CreateUserRolesResource(Self);
end;


Function TDfareportingAPI.CreateUserRolesResource(AOwner : TComponent) : TUserRolesResource;

begin
  Result:=TUserRolesResource.Create(AOwner);
  Result.API:=Self;
end;



initialization
  TDfareportingAPI.RegisterAPI;
end.
