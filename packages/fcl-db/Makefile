#
# Don't edit, this file is generated by FPCMake Version 2.0.0 [2008/04/10]
#
default: all
MAKEFILETARGETS=i386-linux i386-go32v2 i386-win32 i386-os2 i386-freebsd i386-beos i386-netbsd i386-solaris i386-qnx i386-netware i386-openbsd i386-wdosx i386-darwin i386-emx i386-watcom i386-netwlibc i386-wince i386-embedded i386-symbian m68k-linux m68k-freebsd m68k-netbsd m68k-amiga m68k-atari m68k-openbsd m68k-palmos m68k-embedded powerpc-linux powerpc-netbsd powerpc-amiga powerpc-macos powerpc-darwin powerpc-morphos powerpc-embedded sparc-linux sparc-netbsd sparc-solaris sparc-embedded x86_64-linux x86_64-freebsd x86_64-darwin x86_64-win64 x86_64-embedded arm-linux arm-palmos arm-darwin arm-wince arm-gba arm-nds arm-embedded arm-symbian powerpc64-linux powerpc64-darwin powerpc64-embedded avr-embedded armeb-linux armeb-embedded
BSDs = freebsd netbsd openbsd darwin
UNIXs = linux $(BSDs) solaris qnx
LIMIT83fs = go32v2 os2 emx watcom
OSNeedsComspecToRunBatch = go32v2 watcom
FORCE:
.PHONY: FORCE
override PATH:=$(patsubst %/,%,$(subst \,/,$(PATH)))
ifneq ($(findstring darwin,$(OSTYPE)),)
inUnix=1 #darwin
SEARCHPATH:=$(filter-out .,$(subst :, ,$(PATH)))
else
ifeq ($(findstring ;,$(PATH)),)
inUnix=1
SEARCHPATH:=$(filter-out .,$(subst :, ,$(PATH)))
else
SEARCHPATH:=$(subst ;, ,$(PATH))
endif
endif
SEARCHPATH+=$(patsubst %/,%,$(subst \,/,$(dir $(MAKE))))
PWD:=$(strip $(wildcard $(addsuffix /pwd.exe,$(SEARCHPATH))))
ifeq ($(PWD),)
PWD:=$(strip $(wildcard $(addsuffix /pwd,$(SEARCHPATH))))
ifeq ($(PWD),)
$(error You need the GNU utils package to use this Makefile)
else
PWD:=$(firstword $(PWD))
SRCEXEEXT=
endif
else
PWD:=$(firstword $(PWD))
SRCEXEEXT=.exe
endif
ifndef inUnix
ifeq ($(OS),Windows_NT)
inWinNT=1
else
ifdef OS2_SHELL
inOS2=1
endif
endif
else
ifneq ($(findstring cygdrive,$(PATH)),)
inCygWin=1
endif
endif
ifdef inUnix
SRCBATCHEXT=.sh
else
ifdef inOS2
SRCBATCHEXT=.cmd
else
SRCBATCHEXT=.bat
endif
endif
ifdef COMSPEC
ifneq ($(findstring $(OS_SOURCE),$(OSNeedsComspecToRunBatch)),)
RUNBATCH=$(COMSPEC) /C
endif
endif
ifdef inUnix
PATHSEP=/
else
PATHSEP:=$(subst /,\,/)
ifdef inCygWin
PATHSEP=/
endif
endif
ifdef PWD
BASEDIR:=$(subst \,/,$(shell $(PWD)))
ifdef inCygWin
ifneq ($(findstring /cygdrive/,$(BASEDIR)),)
BASENODIR:=$(patsubst /cygdrive%,%,$(BASEDIR))
BASEDRIVE:=$(firstword $(subst /, ,$(BASENODIR)))
BASEDIR:=$(subst /cygdrive/$(BASEDRIVE)/,$(BASEDRIVE):/,$(BASEDIR))
endif
endif
else
BASEDIR=.
endif
ifdef inOS2
ifndef ECHO
ECHO:=$(strip $(wildcard $(addsuffix /gecho$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(ECHO),)
ECHO:=$(strip $(wildcard $(addsuffix /echo$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(ECHO),)
ECHO=echo
else
ECHO:=$(firstword $(ECHO))
endif
else
ECHO:=$(firstword $(ECHO))
endif
endif
export ECHO
endif
override DEFAULT_FPCDIR=../..
ifndef FPC
ifdef PP
FPC=$(PP)
endif
endif
ifndef FPC
FPCPROG:=$(strip $(wildcard $(addsuffix /fpc$(SRCEXEEXT),$(SEARCHPATH))))
ifneq ($(FPCPROG),)
FPCPROG:=$(firstword $(FPCPROG))
ifneq ($(CPU_TARGET),)
FPC:=$(shell $(FPCPROG) -P$(CPU_TARGET) -PB)
else
FPC:=$(shell $(FPCPROG) -PB)
endif
ifneq ($(findstring Error,$(FPC)),)
override FPC=$(firstword $(strip $(wildcard $(addsuffix /ppc386$(SRCEXEEXT),$(SEARCHPATH)))))
endif
else
override FPC=$(firstword $(strip $(wildcard $(addsuffix /ppc386$(SRCEXEEXT),$(SEARCHPATH)))))
endif
endif
override FPC:=$(subst $(SRCEXEEXT),,$(FPC))
override FPC:=$(subst \,/,$(FPC))$(SRCEXEEXT)
FOUNDFPC:=$(strip $(wildcard $(FPC)))
ifeq ($(FOUNDFPC),)
FOUNDFPC=$(strip $(wildcard $(addsuffix /$(FPC),$(SEARCHPATH))))
ifeq ($(FOUNDFPC),)
$(error Compiler $(FPC) not found)
endif
endif
ifndef FPC_COMPILERINFO
FPC_COMPILERINFO:=$(shell $(FPC) -iVSPTPSOTO)
endif
ifndef FPC_VERSION
FPC_VERSION:=$(word 1,$(FPC_COMPILERINFO))
endif
export FPC FPC_VERSION FPC_COMPILERINFO
unexport CHECKDEPEND ALLDEPENDENCIES
ifndef CPU_TARGET
ifdef CPU_TARGET_DEFAULT
CPU_TARGET=$(CPU_TARGET_DEFAULT)
endif
endif
ifndef OS_TARGET
ifdef OS_TARGET_DEFAULT
OS_TARGET=$(OS_TARGET_DEFAULT)
endif
endif
ifneq ($(words $(FPC_COMPILERINFO)),5)
FPC_COMPILERINFO+=$(shell $(FPC) -iSP)
FPC_COMPILERINFO+=$(shell $(FPC) -iTP)
FPC_COMPILERINFO+=$(shell $(FPC) -iSO)
FPC_COMPILERINFO+=$(shell $(FPC) -iTO)
endif
ifndef CPU_SOURCE
CPU_SOURCE:=$(word 2,$(FPC_COMPILERINFO))
endif
ifndef CPU_TARGET
CPU_TARGET:=$(word 3,$(FPC_COMPILERINFO))
endif
ifndef OS_SOURCE
OS_SOURCE:=$(word 4,$(FPC_COMPILERINFO))
endif
ifndef OS_TARGET
OS_TARGET:=$(word 5,$(FPC_COMPILERINFO))
endif
FULL_TARGET=$(CPU_TARGET)-$(OS_TARGET)
FULL_SOURCE=$(CPU_SOURCE)-$(OS_SOURCE)
ifeq ($(CPU_TARGET),armeb)
ARCH=arm
override FPCOPT+=-Cb
else
ifeq ($(CPU_TARGET),armel)
ARCH=arm
override FPCOPT+=-CaEABI
else
ARCH=$(CPU_TARGET)
endif
endif
ifneq ($(findstring $(OS_SOURCE),$(LIMIT83fs)),)
TARGETSUFFIX=$(OS_TARGET)
SOURCESUFFIX=$(OS_SOURCE)
else
TARGETSUFFIX=$(FULL_TARGET)
SOURCESUFFIX=$(FULL_SOURCE)
endif
ifneq ($(FULL_TARGET),$(FULL_SOURCE))
CROSSCOMPILE=1
endif
ifeq ($(findstring makefile,$(MAKECMDGOALS)),)
ifeq ($(findstring $(FULL_TARGET),$(MAKEFILETARGETS)),)
$(error The Makefile doesn't support target $(FULL_TARGET), please run fpcmake first)
endif
endif
ifneq ($(findstring $(OS_TARGET),$(BSDs)),)
BSDhier=1
endif
ifeq ($(OS_TARGET),linux)
linuxHier=1
endif
export OS_TARGET OS_SOURCE ARCH CPU_TARGET CPU_SOURCE FULL_TARGET FULL_SOURCE TARGETSUFFIX SOURCESUFFIX CROSSCOMPILE
ifdef FPCDIR
override FPCDIR:=$(subst \,/,$(FPCDIR))
ifeq ($(wildcard $(addprefix $(FPCDIR)/,rtl units)),)
override FPCDIR=wrong
endif
else
override FPCDIR=wrong
endif
ifdef DEFAULT_FPCDIR
ifeq ($(FPCDIR),wrong)
override FPCDIR:=$(subst \,/,$(DEFAULT_FPCDIR))
ifeq ($(wildcard $(addprefix $(FPCDIR)/,rtl units)),)
override FPCDIR=wrong
endif
endif
endif
ifeq ($(FPCDIR),wrong)
ifdef inUnix
override FPCDIR=/usr/local/lib/fpc/$(FPC_VERSION)
ifeq ($(wildcard $(FPCDIR)/units),)
override FPCDIR=/usr/lib/fpc/$(FPC_VERSION)
endif
else
override FPCDIR:=$(subst /$(FPC),,$(firstword $(strip $(wildcard $(addsuffix /$(FPC),$(SEARCHPATH))))))
override FPCDIR:=$(FPCDIR)/..
ifeq ($(wildcard $(addprefix $(FPCDIR)/,rtl units)),)
override FPCDIR:=$(FPCDIR)/..
ifeq ($(wildcard $(addprefix $(FPCDIR)/,rtl units)),)
override FPCDIR:=$(BASEDIR)
ifeq ($(wildcard $(addprefix $(FPCDIR)/,rtl units)),)
override FPCDIR=c:/pp
endif
endif
endif
endif
endif
ifndef CROSSBINDIR
CROSSBINDIR:=$(wildcard $(FPCDIR)/bin/$(TARGETSUFFIX))
endif
ifndef BINUTILSPREFIX
ifndef CROSSBINDIR
ifdef CROSSCOMPILE
BINUTILSPREFIX=$(CPU_TARGET)-$(OS_TARGET)-
endif
endif
endif
UNITSDIR:=$(wildcard $(FPCDIR)/units/$(TARGETSUFFIX))
ifeq ($(UNITSDIR),)
UNITSDIR:=$(wildcard $(FPCDIR)/units/$(OS_TARGET))
endif
PACKAGESDIR:=$(wildcard $(FPCDIR) $(FPCDIR)/packages $(FPCDIR)/packages/base $(FPCDIR)/packages/extra)
override PACKAGE_NAME=fcl-db
override PACKAGE_VERSION=2.0.0
ifeq ($(FULL_TARGET),i386-linux)
override TARGET_DIRS+=src/sdf src/memds src/sqldb src/base  src/dbase src/sqlite src/paradox src/export src/datadict src/codegen
endif
ifeq ($(FULL_TARGET),i386-go32v2)
override TARGET_DIRS+=src/sdf src/memds src/sqldb src/base
endif
ifeq ($(FULL_TARGET),i386-win32)
override TARGET_DIRS+=src/sdf src/memds src/sqldb src/base  src/dbase src/paradox src/sqlite src/export src/datadict src/codegen
endif
ifeq ($(FULL_TARGET),i386-os2)
override TARGET_DIRS+=src/sdf src/memds src/sqldb src/base
endif
ifeq ($(FULL_TARGET),i386-freebsd)
override TARGET_DIRS+=src/sdf src/memds src/sqldb src/base  src/dbase src/sqlite src/paradox src/export src/datadict src/codegen
endif
ifeq ($(FULL_TARGET),i386-beos)
override TARGET_DIRS+=src/sdf src/memds src/sqldb src/base  src/dbase src/sqlite src/paradox src/export src/datadict src/codegen
endif
ifeq ($(FULL_TARGET),i386-netbsd)
override TARGET_DIRS+=src/sdf src/memds src/sqldb src/base  src/dbase src/sqlite src/paradox
endif
ifeq ($(FULL_TARGET),i386-solaris)
override TARGET_DIRS+=src/sdf src/memds src/sqldb src/base  src/dbase src/sqlite
endif
ifeq ($(FULL_TARGET),i386-qnx)
override TARGET_DIRS+=src/sdf src/memds src/sqldb src/base
endif
ifeq ($(FULL_TARGET),i386-netware)
override TARGET_DIRS+=src/sdf src/memds src/sqldb src/base
endif
ifeq ($(FULL_TARGET),i386-openbsd)
override TARGET_DIRS+=src/sdf src/memds src/sqldb src/base  src/dbase src/sqlite src/paradox
endif
ifeq ($(FULL_TARGET),i386-wdosx)
override TARGET_DIRS+=src/sdf src/memds src/sqldb src/base
endif
ifeq ($(FULL_TARGET),i386-darwin)
override TARGET_DIRS+=src/sdf src/memds src/sqldb src/base  src/dbase src/sqlite
endif
ifeq ($(FULL_TARGET),i386-emx)
override TARGET_DIRS+=src/sdf src/memds src/sqldb src/base
endif
ifeq ($(FULL_TARGET),i386-watcom)
override TARGET_DIRS+=src/sdf src/memds src/sqldb src/base
endif
ifeq ($(FULL_TARGET),i386-netwlibc)
override TARGET_DIRS+=src/sdf src/memds src/sqldb src/base
endif
ifeq ($(FULL_TARGET),i386-wince)
override TARGET_DIRS+=src/sdf src/memds src/sqldb src/base  src/dbase src/sqlite src/export src/datadict src/codegen
endif
ifeq ($(FULL_TARGET),i386-embedded)
override TARGET_DIRS+=src/sdf src/memds src/sqldb src/base
endif
ifeq ($(FULL_TARGET),i386-symbian)
override TARGET_DIRS+=src/sdf src/memds src/sqldb src/base
endif
ifeq ($(FULL_TARGET),m68k-linux)
override TARGET_DIRS+=src/sdf src/memds src/sqldb src/base  src/dbase src/sqlite src/paradox src/export src/datadict src/codegen
endif
ifeq ($(FULL_TARGET),m68k-freebsd)
override TARGET_DIRS+=src/sdf src/memds src/sqldb src/base  src/dbase src/sqlite src/paradox src/export src/datadict src/codegen
endif
ifeq ($(FULL_TARGET),m68k-netbsd)
override TARGET_DIRS+=src/sdf src/memds src/sqldb src/base  src/dbase src/sqlite src/paradox
endif
ifeq ($(FULL_TARGET),m68k-amiga)
override TARGET_DIRS+=src/sdf src/memds src/sqldb src/base
endif
ifeq ($(FULL_TARGET),m68k-atari)
override TARGET_DIRS+=src/sdf src/memds src/sqldb src/base
endif
ifeq ($(FULL_TARGET),m68k-openbsd)
override TARGET_DIRS+=src/sdf src/memds src/sqldb src/base  src/dbase src/sqlite src/paradox
endif
ifeq ($(FULL_TARGET),m68k-palmos)
override TARGET_DIRS+=src/sdf src/memds src/sqldb src/base
endif
ifeq ($(FULL_TARGET),m68k-embedded)
override TARGET_DIRS+=src/sdf src/memds src/sqldb src/base
endif
ifeq ($(FULL_TARGET),powerpc-linux)
override TARGET_DIRS+=src/sdf src/memds src/sqldb src/base  src/dbase src/sqlite src/paradox src/export src/datadict src/codegen
endif
ifeq ($(FULL_TARGET),powerpc-netbsd)
override TARGET_DIRS+=src/sdf src/memds src/sqldb src/base  src/dbase src/sqlite src/paradox
endif
ifeq ($(FULL_TARGET),powerpc-amiga)
override TARGET_DIRS+=src/sdf src/memds src/sqldb src/base
endif
ifeq ($(FULL_TARGET),powerpc-macos)
override TARGET_DIRS+=src/sdf src/memds src/sqldb src/base
endif
ifeq ($(FULL_TARGET),powerpc-darwin)
override TARGET_DIRS+=src/sdf src/memds src/sqldb src/base  src/dbase src/sqlite
endif
ifeq ($(FULL_TARGET),powerpc-morphos)
override TARGET_DIRS+=src/sdf src/memds src/sqldb src/base
endif
ifeq ($(FULL_TARGET),powerpc-embedded)
override TARGET_DIRS+=src/sdf src/memds src/sqldb src/base
endif
ifeq ($(FULL_TARGET),sparc-linux)
override TARGET_DIRS+=src/sdf src/memds src/sqldb src/base  src/dbase src/sqlite src/paradox src/export src/datadict src/codegen
endif
ifeq ($(FULL_TARGET),sparc-netbsd)
override TARGET_DIRS+=src/sdf src/memds src/sqldb src/base  src/dbase src/sqlite src/paradox
endif
ifeq ($(FULL_TARGET),sparc-solaris)
override TARGET_DIRS+=src/sdf src/memds src/sqldb src/base  src/dbase src/sqlite
endif
ifeq ($(FULL_TARGET),sparc-embedded)
override TARGET_DIRS+=src/sdf src/memds src/sqldb src/base
endif
ifeq ($(FULL_TARGET),x86_64-linux)
override TARGET_DIRS+=src/sdf src/memds src/sqldb src/base  src/dbase src/sqlite src/paradox src/export src/datadict src/codegen
endif
ifeq ($(FULL_TARGET),x86_64-freebsd)
override TARGET_DIRS+=src/sdf src/memds src/sqldb src/base  src/dbase src/sqlite src/paradox src/export src/datadict src/codegen
endif
ifeq ($(FULL_TARGET),x86_64-darwin)
override TARGET_DIRS+=src/sdf src/memds src/sqldb src/base  src/dbase src/sqlite
endif
ifeq ($(FULL_TARGET),x86_64-win64)
override TARGET_DIRS+=src/sdf src/memds src/sqldb src/base  src/dbase src/export src/datadict src/codegen
endif
ifeq ($(FULL_TARGET),x86_64-embedded)
override TARGET_DIRS+=src/sdf src/memds src/sqldb src/base
endif
ifeq ($(FULL_TARGET),arm-linux)
override TARGET_DIRS+=src/sdf src/memds src/sqldb src/base  src/dbase src/sqlite src/paradox src/export src/datadict src/codegen
endif
ifeq ($(FULL_TARGET),arm-palmos)
override TARGET_DIRS+=src/sdf src/memds src/sqldb src/base
endif
ifeq ($(FULL_TARGET),arm-darwin)
override TARGET_DIRS+=src/sdf src/memds src/sqldb src/base  src/dbase src/sqlite
endif
ifeq ($(FULL_TARGET),arm-wince)
override TARGET_DIRS+=src/sdf src/memds src/sqldb src/base  src/dbase src/sqlite src/export src/datadict src/codegen
endif
ifeq ($(FULL_TARGET),arm-gba)
override TARGET_DIRS+=src/sdf src/memds src/sqldb src/base
endif
ifeq ($(FULL_TARGET),arm-nds)
override TARGET_DIRS+=src/sdf src/memds src/sqldb src/base
endif
ifeq ($(FULL_TARGET),arm-embedded)
override TARGET_DIRS+=src/sdf src/memds src/sqldb src/base
endif
ifeq ($(FULL_TARGET),arm-symbian)
override TARGET_DIRS+=src/sdf src/memds src/sqldb src/base
endif
ifeq ($(FULL_TARGET),powerpc64-linux)
override TARGET_DIRS+=src/sdf src/memds src/sqldb src/base  src/dbase src/sqlite src/paradox src/export src/datadict src/codegen
endif
ifeq ($(FULL_TARGET),powerpc64-darwin)
override TARGET_DIRS+=src/sdf src/memds src/sqldb src/base  src/dbase src/sqlite
endif
ifeq ($(FULL_TARGET),powerpc64-embedded)
override TARGET_DIRS+=src/sdf src/memds src/sqldb src/base
endif
ifeq ($(FULL_TARGET),avr-embedded)
override TARGET_DIRS+=src/sdf src/memds src/sqldb src/base
endif
ifeq ($(FULL_TARGET),armeb-linux)
override TARGET_DIRS+=src/sdf src/memds src/sqldb src/base  src/dbase src/sqlite src/paradox src/export src/datadict src/codegen
endif
ifeq ($(FULL_TARGET),armeb-embedded)
override TARGET_DIRS+=src/sdf src/memds src/sqldb src/base
endif
override INSTALL_FPCPACKAGE=y
ifeq ($(FULL_TARGET),i386-linux)
override COMPILER_OPTIONS+=-S2h
endif
ifeq ($(FULL_TARGET),i386-go32v2)
override COMPILER_OPTIONS+=-S2h
endif
ifeq ($(FULL_TARGET),i386-win32)
override COMPILER_OPTIONS+=-S2h
endif
ifeq ($(FULL_TARGET),i386-os2)
override COMPILER_OPTIONS+=-S2h
endif
ifeq ($(FULL_TARGET),i386-freebsd)
override COMPILER_OPTIONS+=-S2h
endif
ifeq ($(FULL_TARGET),i386-beos)
override COMPILER_OPTIONS+=-S2h
endif
ifeq ($(FULL_TARGET),i386-netbsd)
override COMPILER_OPTIONS+=-S2h
endif
ifeq ($(FULL_TARGET),i386-solaris)
override COMPILER_OPTIONS+=-S2h
endif
ifeq ($(FULL_TARGET),i386-qnx)
override COMPILER_OPTIONS+=-S2h
endif
ifeq ($(FULL_TARGET),i386-netware)
override COMPILER_OPTIONS+=-S2h
endif
ifeq ($(FULL_TARGET),i386-openbsd)
override COMPILER_OPTIONS+=-S2h
endif
ifeq ($(FULL_TARGET),i386-wdosx)
override COMPILER_OPTIONS+=-S2h
endif
ifeq ($(FULL_TARGET),i386-darwin)
override COMPILER_OPTIONS+=-S2h
endif
ifeq ($(FULL_TARGET),i386-emx)
override COMPILER_OPTIONS+=-S2h
endif
ifeq ($(FULL_TARGET),i386-watcom)
override COMPILER_OPTIONS+=-S2h
endif
ifeq ($(FULL_TARGET),i386-netwlibc)
override COMPILER_OPTIONS+=-S2h
endif
ifeq ($(FULL_TARGET),i386-wince)
override COMPILER_OPTIONS+=-S2h
endif
ifeq ($(FULL_TARGET),i386-embedded)
override COMPILER_OPTIONS+=-S2h
endif
ifeq ($(FULL_TARGET),i386-symbian)
override COMPILER_OPTIONS+=-S2h
endif
ifeq ($(FULL_TARGET),m68k-linux)
override COMPILER_OPTIONS+=-S2h
endif
ifeq ($(FULL_TARGET),m68k-freebsd)
override COMPILER_OPTIONS+=-S2h
endif
ifeq ($(FULL_TARGET),m68k-netbsd)
override COMPILER_OPTIONS+=-S2h
endif
ifeq ($(FULL_TARGET),m68k-amiga)
override COMPILER_OPTIONS+=-S2h
endif
ifeq ($(FULL_TARGET),m68k-atari)
override COMPILER_OPTIONS+=-S2h
endif
ifeq ($(FULL_TARGET),m68k-openbsd)
override COMPILER_OPTIONS+=-S2h
endif
ifeq ($(FULL_TARGET),m68k-palmos)
override COMPILER_OPTIONS+=-S2h
endif
ifeq ($(FULL_TARGET),m68k-embedded)
override COMPILER_OPTIONS+=-S2h
endif
ifeq ($(FULL_TARGET),powerpc-linux)
override COMPILER_OPTIONS+=-S2h
endif
ifeq ($(FULL_TARGET),powerpc-netbsd)
override COMPILER_OPTIONS+=-S2h
endif
ifeq ($(FULL_TARGET),powerpc-amiga)
override COMPILER_OPTIONS+=-S2h
endif
ifeq ($(FULL_TARGET),powerpc-macos)
override COMPILER_OPTIONS+=-S2h
endif
ifeq ($(FULL_TARGET),powerpc-darwin)
override COMPILER_OPTIONS+=-S2h
endif
ifeq ($(FULL_TARGET),powerpc-morphos)
override COMPILER_OPTIONS+=-S2h
endif
ifeq ($(FULL_TARGET),powerpc-embedded)
override COMPILER_OPTIONS+=-S2h
endif
ifeq ($(FULL_TARGET),sparc-linux)
override COMPILER_OPTIONS+=-S2h
endif
ifeq ($(FULL_TARGET),sparc-netbsd)
override COMPILER_OPTIONS+=-S2h
endif
ifeq ($(FULL_TARGET),sparc-solaris)
override COMPILER_OPTIONS+=-S2h
endif
ifeq ($(FULL_TARGET),sparc-embedded)
override COMPILER_OPTIONS+=-S2h
endif
ifeq ($(FULL_TARGET),x86_64-linux)
override COMPILER_OPTIONS+=-S2h
endif
ifeq ($(FULL_TARGET),x86_64-freebsd)
override COMPILER_OPTIONS+=-S2h
endif
ifeq ($(FULL_TARGET),x86_64-darwin)
override COMPILER_OPTIONS+=-S2h
endif
ifeq ($(FULL_TARGET),x86_64-win64)
override COMPILER_OPTIONS+=-S2h
endif
ifeq ($(FULL_TARGET),x86_64-embedded)
override COMPILER_OPTIONS+=-S2h
endif
ifeq ($(FULL_TARGET),arm-linux)
override COMPILER_OPTIONS+=-S2h
endif
ifeq ($(FULL_TARGET),arm-palmos)
override COMPILER_OPTIONS+=-S2h
endif
ifeq ($(FULL_TARGET),arm-darwin)
override COMPILER_OPTIONS+=-S2h
endif
ifeq ($(FULL_TARGET),arm-wince)
override COMPILER_OPTIONS+=-S2h
endif
ifeq ($(FULL_TARGET),arm-gba)
override COMPILER_OPTIONS+=-S2h
endif
ifeq ($(FULL_TARGET),arm-nds)
override COMPILER_OPTIONS+=-S2h
endif
ifeq ($(FULL_TARGET),arm-embedded)
override COMPILER_OPTIONS+=-S2h
endif
ifeq ($(FULL_TARGET),arm-symbian)
override COMPILER_OPTIONS+=-S2h
endif
ifeq ($(FULL_TARGET),powerpc64-linux)
override COMPILER_OPTIONS+=-S2h
endif
ifeq ($(FULL_TARGET),powerpc64-darwin)
override COMPILER_OPTIONS+=-S2h
endif
ifeq ($(FULL_TARGET),powerpc64-embedded)
override COMPILER_OPTIONS+=-S2h
endif
ifeq ($(FULL_TARGET),avr-embedded)
override COMPILER_OPTIONS+=-S2h
endif
ifeq ($(FULL_TARGET),armeb-linux)
override COMPILER_OPTIONS+=-S2h
endif
ifeq ($(FULL_TARGET),armeb-embedded)
override COMPILER_OPTIONS+=-S2h
endif
ifdef REQUIRE_UNITSDIR
override UNITSDIR+=$(REQUIRE_UNITSDIR)
endif
ifdef REQUIRE_PACKAGESDIR
override PACKAGESDIR+=$(REQUIRE_PACKAGESDIR)
endif
ifdef ZIPINSTALL
ifneq ($(findstring $(OS_TARGET),$(UNIXs)),)
UNIXHier=1
endif
else
ifneq ($(findstring $(OS_SOURCE),$(UNIXs)),)
UNIXHier=1
endif
endif
ifndef INSTALL_PREFIX
ifdef PREFIX
INSTALL_PREFIX=$(PREFIX)
endif
endif
ifndef INSTALL_PREFIX
ifdef UNIXHier
INSTALL_PREFIX=/usr/local
else
ifdef INSTALL_FPCPACKAGE
INSTALL_BASEDIR:=/pp
else
INSTALL_BASEDIR:=/$(PACKAGE_NAME)
endif
endif
endif
export INSTALL_PREFIX
ifdef INSTALL_FPCSUBDIR
export INSTALL_FPCSUBDIR
endif
ifndef DIST_DESTDIR
DIST_DESTDIR:=$(BASEDIR)
endif
export DIST_DESTDIR
ifndef COMPILER_UNITTARGETDIR
ifdef PACKAGEDIR_MAIN
COMPILER_UNITTARGETDIR=$(PACKAGEDIR_MAIN)/units/$(TARGETSUFFIX)
else
COMPILER_UNITTARGETDIR=units/$(TARGETSUFFIX)
endif
endif
ifndef COMPILER_TARGETDIR
COMPILER_TARGETDIR=.
endif
ifndef INSTALL_BASEDIR
ifdef UNIXHier
ifdef INSTALL_FPCPACKAGE
INSTALL_BASEDIR:=$(INSTALL_PREFIX)/lib/fpc/$(FPC_VERSION)
else
INSTALL_BASEDIR:=$(INSTALL_PREFIX)/lib/$(PACKAGE_NAME)
endif
else
INSTALL_BASEDIR:=$(INSTALL_PREFIX)
endif
endif
ifndef INSTALL_BINDIR
ifdef UNIXHier
INSTALL_BINDIR:=$(INSTALL_PREFIX)/bin
else
INSTALL_BINDIR:=$(INSTALL_BASEDIR)/bin
ifdef INSTALL_FPCPACKAGE
ifdef CROSSCOMPILE
ifdef CROSSINSTALL
INSTALL_BINDIR:=$(INSTALL_BINDIR)/$(SOURCESUFFIX)
else
INSTALL_BINDIR:=$(INSTALL_BINDIR)/$(TARGETSUFFIX)
endif
else
INSTALL_BINDIR:=$(INSTALL_BINDIR)/$(TARGETSUFFIX)
endif
endif
endif
endif
ifndef INSTALL_UNITDIR
INSTALL_UNITDIR:=$(INSTALL_BASEDIR)/units/$(TARGETSUFFIX)
ifdef INSTALL_FPCPACKAGE
ifdef PACKAGE_NAME
INSTALL_UNITDIR:=$(INSTALL_UNITDIR)/$(PACKAGE_NAME)
endif
endif
endif
ifndef INSTALL_LIBDIR
ifdef UNIXHier
INSTALL_LIBDIR:=$(INSTALL_PREFIX)/lib
else
INSTALL_LIBDIR:=$(INSTALL_UNITDIR)
endif
endif
ifndef INSTALL_SOURCEDIR
ifdef UNIXHier
ifdef BSDhier
SRCPREFIXDIR=share/src
else
ifdef linuxHier
SRCPREFIXDIR=share/src
else
SRCPREFIXDIR=src
endif
endif
ifdef INSTALL_FPCPACKAGE
ifdef INSTALL_FPCSUBDIR
INSTALL_SOURCEDIR:=$(INSTALL_PREFIX)/$(SRCPREFIXDIR)/fpc-$(FPC_VERSION)/$(INSTALL_FPCSUBDIR)/$(PACKAGE_NAME)
else
INSTALL_SOURCEDIR:=$(INSTALL_PREFIX)/$(SRCPREFIXDIR)/fpc-$(FPC_VERSION)/$(PACKAGE_NAME)
endif
else
INSTALL_SOURCEDIR:=$(INSTALL_PREFIX)/$(SRCPREFIXDIR)/$(PACKAGE_NAME)-$(PACKAGE_VERSION)
endif
else
ifdef INSTALL_FPCPACKAGE
ifdef INSTALL_FPCSUBDIR
INSTALL_SOURCEDIR:=$(INSTALL_BASEDIR)/source/$(INSTALL_FPCSUBDIR)/$(PACKAGE_NAME)
else
INSTALL_SOURCEDIR:=$(INSTALL_BASEDIR)/source/$(PACKAGE_NAME)
endif
else
INSTALL_SOURCEDIR:=$(INSTALL_BASEDIR)/source
endif
endif
endif
ifndef INSTALL_DOCDIR
ifdef UNIXHier
ifdef BSDhier
DOCPREFIXDIR=share/doc
else
ifdef linuxHier
DOCPREFIXDIR=share/doc
else
DOCPREFIXDIR=doc
endif
endif
ifdef INSTALL_FPCPACKAGE
INSTALL_DOCDIR:=$(INSTALL_PREFIX)/$(DOCPREFIXDIR)/fpc-$(FPC_VERSION)/$(PACKAGE_NAME)
else
INSTALL_DOCDIR:=$(INSTALL_PREFIX)/$(DOCPREFIXDIR)/$(PACKAGE_NAME)-$(PACKAGE_VERSION)
endif
else
ifdef INSTALL_FPCPACKAGE
INSTALL_DOCDIR:=$(INSTALL_BASEDIR)/doc/$(PACKAGE_NAME)
else
INSTALL_DOCDIR:=$(INSTALL_BASEDIR)/doc
endif
endif
endif
ifndef INSTALL_EXAMPLEDIR
ifdef UNIXHier
ifdef INSTALL_FPCPACKAGE
ifdef BSDhier
INSTALL_EXAMPLEDIR:=$(INSTALL_PREFIX)/share/examples/fpc-$(FPC_VERSION)/$(PACKAGE_NAME)
else
ifdef linuxHier
INSTALL_EXAMPLEDIR:=$(INSTALL_DOCDIR)/examples
else
INSTALL_EXAMPLEDIR:=$(INSTALL_PREFIX)/doc/fpc-$(FPC_VERSION)/examples/$(PACKAGE_NAME)
endif
endif
else
ifdef BSDhier
INSTALL_EXAMPLEDIR:=$(INSTALL_PREFIX)/share/examples/$(PACKAGE_NAME)-$(PACKAGE_VERSION)
else
ifdef linuxHier
INSTALL_EXAMPLEDIR:=$(INSTALL_DOCDIR)/examples/$(PACKAGE_NAME)-$(PACKAGE_VERSION)
else
INSTALL_EXAMPLEDIR:=$(INSTALL_PREFIX)/doc/$(PACKAGE_NAME)-$(PACKAGE_VERSION)
endif
endif
endif
else
ifdef INSTALL_FPCPACKAGE
INSTALL_EXAMPLEDIR:=$(INSTALL_BASEDIR)/examples/$(PACKAGE_NAME)
else
INSTALL_EXAMPLEDIR:=$(INSTALL_BASEDIR)/examples
endif
endif
endif
ifndef INSTALL_DATADIR
INSTALL_DATADIR=$(INSTALL_BASEDIR)
endif
ifndef INSTALL_SHAREDDIR
INSTALL_SHAREDDIR=$(INSTALL_PREFIX)/lib
endif
ifdef CROSSCOMPILE
ifndef CROSSBINDIR
CROSSBINDIR:=$(wildcard $(CROSSTARGETDIR)/bin/$(SOURCESUFFIX))
ifeq ($(CROSSBINDIR),)
CROSSBINDIR:=$(wildcard $(INSTALL_BASEDIR)/cross/$(TARGETSUFFIX)/bin/$(FULL_SOURCE))
endif
endif
else
CROSSBINDIR=
endif
ifeq ($(OS_SOURCE),linux)
ifndef GCCLIBDIR
ifeq ($(CPU_TARGET),i386)
ifneq ($(findstring x86_64,$(shell uname -a)),)
ifeq ($(BINUTILSPREFIX),)
GCCLIBDIR:=$(shell dirname `gcc -m32 -print-libgcc-file-name`)
endif
endif
endif
ifeq ($(CPU_TARGET),powerpc64)
ifeq ($(BINUTILSPREFIX),)
GCCLIBDIR:=$(shell dirname `gcc -m64 -print-libgcc-file-name`)
endif
endif
endif
ifndef GCCLIBDIR
CROSSGCC=$(strip $(wildcard $(addsuffix /$(BINUTILSPREFIX)gcc$(SRCEXEEXT),$(SEARCHPATH))))
ifneq ($(CROSSGCC),)
GCCLIBDIR:=$(shell dirname `$(CROSSGCC) -print-libgcc-file-name`)
endif
endif
ifndef OTHERLIBDIR
OTHERLIBDIR:=$(shell grep -v "^\#" /etc/ld.so.conf | awk '{ ORS=" "; print $1 }')
endif
endif
ifdef inUnix
ifeq ($(OS_SOURCE),netbsd)
OTHERLIBDIR+=/usr/pkg/lib
endif
export GCCLIBDIR OTHERLIB
endif
BATCHEXT=.bat
LOADEREXT=.as
EXEEXT=.exe
PPLEXT=.ppl
PPUEXT=.ppu
OEXT=.o
ASMEXT=.s
SMARTEXT=.sl
STATICLIBEXT=.a
SHAREDLIBEXT=.so
SHAREDLIBPREFIX=libfp
STATICLIBPREFIX=libp
IMPORTLIBPREFIX=libimp
RSTEXT=.rst
ifeq ($(findstring 1.0.,$(FPC_VERSION)),)
ifeq ($(OS_TARGET),go32v1)
STATICLIBPREFIX=
SHORTSUFFIX=v1
endif
ifeq ($(OS_TARGET),go32v2)
STATICLIBPREFIX=
SHORTSUFFIX=dos
endif
ifeq ($(OS_TARGET),watcom)
STATICLIBPREFIX=
OEXT=.obj
ASMEXT=.asm
SHAREDLIBEXT=.dll
SHORTSUFFIX=wat
endif
ifeq ($(OS_TARGET),linux)
BATCHEXT=.sh
EXEEXT=
HASSHAREDLIB=1
SHORTSUFFIX=lnx
endif
ifeq ($(OS_TARGET),freebsd)
BATCHEXT=.sh
EXEEXT=
HASSHAREDLIB=1
SHORTSUFFIX=fbs
endif
ifeq ($(OS_TARGET),netbsd)
BATCHEXT=.sh
EXEEXT=
HASSHAREDLIB=1
SHORTSUFFIX=nbs
endif
ifeq ($(OS_TARGET),openbsd)
BATCHEXT=.sh
EXEEXT=
HASSHAREDLIB=1
SHORTSUFFIX=obs
endif
ifeq ($(OS_TARGET),win32)
SHAREDLIBEXT=.dll
SHORTSUFFIX=w32
endif
ifeq ($(OS_TARGET),os2)
BATCHEXT=.cmd
AOUTEXT=.out
STATICLIBPREFIX=
SHAREDLIBEXT=.dll
SHORTSUFFIX=os2
ECHO=echo
endif
ifeq ($(OS_TARGET),emx)
BATCHEXT=.cmd
AOUTEXT=.out
STATICLIBPREFIX=
SHAREDLIBEXT=.dll
SHORTSUFFIX=emx
ECHO=echo
endif
ifeq ($(OS_TARGET),amiga)
EXEEXT=
SHAREDLIBEXT=.library
SHORTSUFFIX=amg
endif
ifeq ($(OS_TARGET),morphos)
EXEEXT=
SHAREDLIBEXT=.library
SHORTSUFFIX=mos
endif
ifeq ($(OS_TARGET),atari)
EXEEXT=.ttp
SHORTSUFFIX=ata
endif
ifeq ($(OS_TARGET),beos)
BATCHEXT=.sh
EXEEXT=
SHORTSUFFIX=be
endif
ifeq ($(OS_TARGET),solaris)
BATCHEXT=.sh
EXEEXT=
SHORTSUFFIX=sun
endif
ifeq ($(OS_TARGET),qnx)
BATCHEXT=.sh
EXEEXT=
SHORTSUFFIX=qnx
endif
ifeq ($(OS_TARGET),netware)
EXEEXT=.nlm
STATICLIBPREFIX=
SHORTSUFFIX=nw
endif
ifeq ($(OS_TARGET),netwlibc)
EXEEXT=.nlm
STATICLIBPREFIX=
SHORTSUFFIX=nwl
endif
ifeq ($(OS_TARGET),macos)
BATCHEXT=
EXEEXT=
DEBUGSYMEXT=.xcoff
SHORTSUFFIX=mac
endif
ifeq ($(OS_TARGET),darwin)
BATCHEXT=.sh
EXEEXT=
HASSHAREDLIB=1
SHORTSUFFIX=dwn
endif
ifeq ($(OS_TARGET),gba)
EXEEXT=.gba
SHAREDLIBEXT=.so
SHORTSUFFIX=gba
endif
ifeq ($(OS_TARGET),symbian)
SHAREDLIBEXT=.dll
SHORTSUFFIX=symbian
endif
else
ifeq ($(OS_TARGET),go32v1)
PPUEXT=.pp1
OEXT=.o1
ASMEXT=.s1
SMARTEXT=.sl1
STATICLIBEXT=.a1
SHAREDLIBEXT=.so1
STATICLIBPREFIX=
SHORTSUFFIX=v1
endif
ifeq ($(OS_TARGET),go32v2)
STATICLIBPREFIX=
SHORTSUFFIX=dos
endif
ifeq ($(OS_TARGET),watcom)
STATICLIBPREFIX=
SHORTSUFFIX=wat
endif
ifeq ($(OS_TARGET),linux)
BATCHEXT=.sh
EXEEXT=
HASSHAREDLIB=1
SHORTSUFFIX=lnx
endif
ifeq ($(OS_TARGET),freebsd)
BATCHEXT=.sh
EXEEXT=
HASSHAREDLIB=1
SHORTSUFFIX=fbs
endif
ifeq ($(OS_TARGET),netbsd)
BATCHEXT=.sh
EXEEXT=
HASSHAREDLIB=1
SHORTSUFFIX=nbs
endif
ifeq ($(OS_TARGET),openbsd)
BATCHEXT=.sh
EXEEXT=
HASSHAREDLIB=1
SHORTSUFFIX=obs
endif
ifeq ($(OS_TARGET),win32)
PPUEXT=.ppw
OEXT=.ow
ASMEXT=.sw
SMARTEXT=.slw
STATICLIBEXT=.aw
SHAREDLIBEXT=.dll
SHORTSUFFIX=w32
endif
ifeq ($(OS_TARGET),os2)
BATCHEXT=.cmd
PPUEXT=.ppo
ASMEXT=.so2
OEXT=.oo2
AOUTEXT=.out
SMARTEXT=.sl2
STATICLIBPREFIX=
STATICLIBEXT=.ao2
SHAREDLIBEXT=.dll
SHORTSUFFIX=os2
ECHO=echo
endif
ifeq ($(OS_TARGET),amiga)
EXEEXT=
PPUEXT=.ppu
ASMEXT=.s
OEXT=.o
SMARTEXT=.sl
STATICLIBEXT=.a
SHAREDLIBEXT=.library
SHORTSUFFIX=amg
endif
ifeq ($(OS_TARGET),atari)
PPUEXT=.ppu
ASMEXT=.s
OEXT=.o
SMARTEXT=.sl
STATICLIBEXT=.a
EXEEXT=.ttp
SHORTSUFFIX=ata
endif
ifeq ($(OS_TARGET),beos)
BATCHEXT=.sh
PPUEXT=.ppu
ASMEXT=.s
OEXT=.o
SMARTEXT=.sl
STATICLIBEXT=.a
EXEEXT=
SHORTSUFFIX=be
endif
ifeq ($(OS_TARGET),solaris)
BATCHEXT=.sh
PPUEXT=.ppu
ASMEXT=.s
OEXT=.o
SMARTEXT=.sl
STATICLIBEXT=.a
EXEEXT=
SHORTSUFFIX=sun
endif
ifeq ($(OS_TARGET),qnx)
BATCHEXT=.sh
PPUEXT=.ppu
ASMEXT=.s
OEXT=.o
SMARTEXT=.sl
STATICLIBEXT=.a
EXEEXT=
SHORTSUFFIX=qnx
endif
ifeq ($(OS_TARGET),netware)
STATICLIBPREFIX=
PPUEXT=.ppu
OEXT=.o
ASMEXT=.s
SMARTEXT=.sl
STATICLIBEXT=.a
SHAREDLIBEXT=.nlm
EXEEXT=.nlm
SHORTSUFFIX=nw
endif
ifeq ($(OS_TARGET),netwlibc)
STATICLIBPREFIX=
PPUEXT=.ppu
OEXT=.o
ASMEXT=.s
SMARTEXT=.sl
STATICLIBEXT=.a
SHAREDLIBEXT=.nlm
EXEEXT=.nlm
SHORTSUFFIX=nwl
endif
ifeq ($(OS_TARGET),macos)
BATCHEXT=
PPUEXT=.ppu
ASMEXT=.s
OEXT=.o
SMARTEXT=.sl
STATICLIBEXT=.a
EXEEXT=
DEBUGSYMEXT=.xcoff
SHORTSUFFIX=mac
endif
endif
ifneq ($(findstring $(OS_SOURCE),$(LIMIT83fs)),)
FPCMADE=fpcmade.$(SHORTSUFFIX)
ZIPSUFFIX=$(SHORTSUFFIX)
ZIPCROSSPREFIX=
ZIPSOURCESUFFIX=src
ZIPEXAMPLESUFFIX=exm
else
FPCMADE=fpcmade.$(TARGETSUFFIX)
ZIPSOURCESUFFIX=.source
ZIPEXAMPLESUFFIX=.examples
ifdef CROSSCOMPILE
ZIPSUFFIX=.$(SOURCESUFFIX)
ZIPCROSSPREFIX=$(TARGETSUFFIX)-
else
ZIPSUFFIX=.$(TARGETSUFFIX)
ZIPCROSSPREFIX=
endif
endif
ifndef ECHO
ECHO:=$(strip $(wildcard $(addsuffix /gecho$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(ECHO),)
ECHO:=$(strip $(wildcard $(addsuffix /echo$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(ECHO),)
ECHO= __missing_command_ECHO
else
ECHO:=$(firstword $(ECHO))
endif
else
ECHO:=$(firstword $(ECHO))
endif
endif
export ECHO
ifndef DATE
DATE:=$(strip $(wildcard $(addsuffix /gdate$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(DATE),)
DATE:=$(strip $(wildcard $(addsuffix /date$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(DATE),)
DATE= __missing_command_DATE
else
DATE:=$(firstword $(DATE))
endif
else
DATE:=$(firstword $(DATE))
endif
endif
export DATE
ifndef GINSTALL
GINSTALL:=$(strip $(wildcard $(addsuffix /ginstall$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(GINSTALL),)
GINSTALL:=$(strip $(wildcard $(addsuffix /install$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(GINSTALL),)
GINSTALL= __missing_command_GINSTALL
else
GINSTALL:=$(firstword $(GINSTALL))
endif
else
GINSTALL:=$(firstword $(GINSTALL))
endif
endif
export GINSTALL
ifndef CPPROG
CPPROG:=$(strip $(wildcard $(addsuffix /cp$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(CPPROG),)
CPPROG= __missing_command_CPPROG
else
CPPROG:=$(firstword $(CPPROG))
endif
endif
export CPPROG
ifndef RMPROG
RMPROG:=$(strip $(wildcard $(addsuffix /rm$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(RMPROG),)
RMPROG= __missing_command_RMPROG
else
RMPROG:=$(firstword $(RMPROG))
endif
endif
export RMPROG
ifndef MVPROG
MVPROG:=$(strip $(wildcard $(addsuffix /mv$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(MVPROG),)
MVPROG= __missing_command_MVPROG
else
MVPROG:=$(firstword $(MVPROG))
endif
endif
export MVPROG
ifndef MKDIRPROG
MKDIRPROG:=$(strip $(wildcard $(addsuffix /gmkdir$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(MKDIRPROG),)
MKDIRPROG:=$(strip $(wildcard $(addsuffix /mkdir$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(MKDIRPROG),)
MKDIRPROG= __missing_command_MKDIRPROG
else
MKDIRPROG:=$(firstword $(MKDIRPROG))
endif
else
MKDIRPROG:=$(firstword $(MKDIRPROG))
endif
endif
export MKDIRPROG
ifndef ECHOREDIR
ifndef inUnix
ECHOREDIR=echo
else
ECHOREDIR=$(ECHO)
endif
endif
ifndef COPY
COPY:=$(CPPROG) -fp
endif
ifndef COPYTREE
COPYTREE:=$(CPPROG) -Rfp
endif
ifndef MKDIRTREE
MKDIRTREE:=$(MKDIRPROG) -p
endif
ifndef MOVE
MOVE:=$(MVPROG) -f
endif
ifndef DEL
DEL:=$(RMPROG) -f
endif
ifndef DELTREE
DELTREE:=$(RMPROG) -rf
endif
ifndef INSTALL
ifdef inUnix
INSTALL:=$(GINSTALL) -c -m 644
else
INSTALL:=$(COPY)
endif
endif
ifndef INSTALLEXE
ifdef inUnix
INSTALLEXE:=$(GINSTALL) -c -m 755
else
INSTALLEXE:=$(COPY)
endif
endif
ifndef MKDIR
MKDIR:=$(GINSTALL) -m 755 -d
endif
export ECHOREDIR COPY COPYTREE MOVE DEL DELTREE INSTALL INSTALLEXE MKDIR
ifndef PPUMOVE
PPUMOVE:=$(strip $(wildcard $(addsuffix /ppumove$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(PPUMOVE),)
PPUMOVE= __missing_command_PPUMOVE
else
PPUMOVE:=$(firstword $(PPUMOVE))
endif
endif
export PPUMOVE
ifndef FPCMAKE
FPCMAKE:=$(strip $(wildcard $(addsuffix /fpcmake$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(FPCMAKE),)
FPCMAKE= __missing_command_FPCMAKE
else
FPCMAKE:=$(firstword $(FPCMAKE))
endif
endif
export FPCMAKE
ifndef ZIPPROG
ZIPPROG:=$(strip $(wildcard $(addsuffix /zip$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(ZIPPROG),)
ZIPPROG= __missing_command_ZIPPROG
else
ZIPPROG:=$(firstword $(ZIPPROG))
endif
endif
export ZIPPROG
ifndef TARPROG
TARPROG:=$(strip $(wildcard $(addsuffix /gtar$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(TARPROG),)
TARPROG:=$(strip $(wildcard $(addsuffix /tar$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(TARPROG),)
TARPROG= __missing_command_TARPROG
else
TARPROG:=$(firstword $(TARPROG))
endif
else
TARPROG:=$(firstword $(TARPROG))
endif
endif
export TARPROG
ASNAME=$(BINUTILSPREFIX)as
LDNAME=$(BINUTILSPREFIX)ld
ARNAME=$(BINUTILSPREFIX)ar
RCNAME=$(BINUTILSPREFIX)rc
ifneq ($(findstring 1.0.,$(FPC_VERSION)),)
ifeq ($(OS_TARGET),win32)
ifeq ($(CROSSBINDIR),)
ASNAME=asw
LDNAME=ldw
ARNAME=arw
endif
endif
endif
ifndef ASPROG
ifdef CROSSBINDIR
ASPROG=$(CROSSBINDIR)/$(ASNAME)$(SRCEXEEXT)
else
ASPROG=$(ASNAME)
endif
endif
ifndef LDPROG
ifdef CROSSBINDIR
LDPROG=$(CROSSBINDIR)/$(LDNAME)$(SRCEXEEXT)
else
LDPROG=$(LDNAME)
endif
endif
ifndef RCPROG
ifdef CROSSBINDIR
RCPROG=$(CROSSBINDIR)/$(RCNAME)$(SRCEXEEXT)
else
RCPROG=$(RCNAME)
endif
endif
ifndef ARPROG
ifdef CROSSBINDIR
ARPROG=$(CROSSBINDIR)/$(ARNAME)$(SRCEXEEXT)
else
ARPROG=$(ARNAME)
endif
endif
AS=$(ASPROG)
LD=$(LDPROG)
RC=$(RCPROG)
AR=$(ARPROG)
PPAS=ppas$(SRCBATCHEXT)
ifdef inUnix
LDCONFIG=ldconfig
else
LDCONFIG=
endif
ifdef DATE
DATESTR:=$(shell $(DATE) +%Y%m%d)
else
DATESTR=
endif
ifndef UPXPROG
ifeq ($(OS_TARGET),go32v2)
UPXPROG:=1
endif
ifeq ($(OS_TARGET),win32)
UPXPROG:=1
endif
ifdef UPXPROG
UPXPROG:=$(strip $(wildcard $(addsuffix /upx$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(UPXPROG),)
UPXPROG=
else
UPXPROG:=$(firstword $(UPXPROG))
endif
else
UPXPROG=
endif
endif
export UPXPROG
ZIPOPT=-9
ZIPEXT=.zip
ifeq ($(USETAR),bz2)
TAROPT=vj
TAREXT=.tar.bz2
else
TAROPT=vz
TAREXT=.tar.gz
endif
override REQUIRE_PACKAGES=fcl-base
ifeq ($(FULL_TARGET),i386-linux)
REQUIRE_PACKAGES_FCL-BASE=1
REQUIRE_PACKAGES_IBASE=1
REQUIRE_PACKAGES_POSTGRES=1
REQUIRE_PACKAGES_MYSQL=1
REQUIRE_PACKAGES_ODBC=1
REQUIRE_PACKAGES_ORACLE=1
REQUIRE_PACKAGES_SQLITE=1
REQUIRE_PACKAGES_PXLIB=1
endif
ifeq ($(FULL_TARGET),i386-go32v2)
REQUIRE_PACKAGES_FCL-BASE=1
endif
ifeq ($(FULL_TARGET),i386-win32)
REQUIRE_PACKAGES_WINUNITS-BASE=1
REQUIRE_PACKAGES_WINUNITS-JEDI=1
REQUIRE_PACKAGES_FCL-BASE=1
REQUIRE_PACKAGES_IBASE=1
REQUIRE_PACKAGES_POSTGRES=1
REQUIRE_PACKAGES_MYSQL=1
REQUIRE_PACKAGES_ODBC=1
REQUIRE_PACKAGES_ORACLE=1
REQUIRE_PACKAGES_SQLITE=1
REQUIRE_PACKAGES_PXLIB=1
endif
ifeq ($(FULL_TARGET),i386-os2)
REQUIRE_PACKAGES_FCL-BASE=1
endif
ifeq ($(FULL_TARGET),i386-freebsd)
REQUIRE_PACKAGES_FCL-BASE=1
REQUIRE_PACKAGES_IBASE=1
REQUIRE_PACKAGES_POSTGRES=1
REQUIRE_PACKAGES_MYSQL=1
REQUIRE_PACKAGES_ODBC=1
REQUIRE_PACKAGES_ORACLE=1
REQUIRE_PACKAGES_SQLITE=1
REQUIRE_PACKAGES_PXLIB=1
endif
ifeq ($(FULL_TARGET),i386-beos)
REQUIRE_PACKAGES_FCL-BASE=1
REQUIRE_PACKAGES_IBASE=1
REQUIRE_PACKAGES_POSTGRES=1
REQUIRE_PACKAGES_MYSQL=1
REQUIRE_PACKAGES_ODBC=1
REQUIRE_PACKAGES_ORACLE=1
REQUIRE_PACKAGES_SQLITE=1
REQUIRE_PACKAGES_PXLIB=1
endif
ifeq ($(FULL_TARGET),i386-netbsd)
REQUIRE_PACKAGES_FCL-BASE=1
REQUIRE_PACKAGES_IBASE=1
REQUIRE_PACKAGES_POSTGRES=1
REQUIRE_PACKAGES_MYSQL=1
REQUIRE_PACKAGES_ODBC=1
REQUIRE_PACKAGES_ORACLE=1
REQUIRE_PACKAGES_SQLITE=1
REQUIRE_PACKAGES_PXLIB=1
endif
ifeq ($(FULL_TARGET),i386-solaris)
REQUIRE_PACKAGES_FCL-BASE=1
REQUIRE_PACKAGES_SQLITE=1
endif
ifeq ($(FULL_TARGET),i386-qnx)
REQUIRE_PACKAGES_FCL-BASE=1
endif
ifeq ($(FULL_TARGET),i386-netware)
REQUIRE_PACKAGES_FCL-BASE=1
endif
ifeq ($(FULL_TARGET),i386-openbsd)
REQUIRE_PACKAGES_FCL-BASE=1
REQUIRE_PACKAGES_IBASE=1
REQUIRE_PACKAGES_POSTGRES=1
REQUIRE_PACKAGES_MYSQL=1
REQUIRE_PACKAGES_ODBC=1
REQUIRE_PACKAGES_ORACLE=1
REQUIRE_PACKAGES_SQLITE=1
REQUIRE_PACKAGES_PXLIB=1
endif
ifeq ($(FULL_TARGET),i386-wdosx)
REQUIRE_PACKAGES_FCL-BASE=1
endif
ifeq ($(FULL_TARGET),i386-darwin)
REQUIRE_PACKAGES_FCL-BASE=1
REQUIRE_PACKAGES_IBASE=1
REQUIRE_PACKAGES_POSTGRES=1
REQUIRE_PACKAGES_MYSQL=1
REQUIRE_PACKAGES_ODBC=1
REQUIRE_PACKAGES_ORACLE=1
REQUIRE_PACKAGES_SQLITE=1
endif
ifeq ($(FULL_TARGET),i386-emx)
REQUIRE_PACKAGES_FCL-BASE=1
endif
ifeq ($(FULL_TARGET),i386-watcom)
REQUIRE_PACKAGES_FCL-BASE=1
endif
ifeq ($(FULL_TARGET),i386-netwlibc)
REQUIRE_PACKAGES_FCL-BASE=1
endif
ifeq ($(FULL_TARGET),i386-wince)
REQUIRE_PACKAGES_FCL-BASE=1
REQUIRE_PACKAGES_IBASE=1
REQUIRE_PACKAGES_POSTGRES=1
REQUIRE_PACKAGES_MYSQL=1
REQUIRE_PACKAGES_ODBC=1
REQUIRE_PACKAGES_ORACLE=1
REQUIRE_PACKAGES_SQLITE=1
endif
ifeq ($(FULL_TARGET),i386-embedded)
REQUIRE_PACKAGES_FCL-BASE=1
endif
ifeq ($(FULL_TARGET),i386-symbian)
REQUIRE_PACKAGES_FCL-BASE=1
endif
ifeq ($(FULL_TARGET),m68k-linux)
REQUIRE_PACKAGES_FCL-BASE=1
REQUIRE_PACKAGES_IBASE=1
REQUIRE_PACKAGES_POSTGRES=1
REQUIRE_PACKAGES_MYSQL=1
REQUIRE_PACKAGES_ODBC=1
REQUIRE_PACKAGES_ORACLE=1
REQUIRE_PACKAGES_SQLITE=1
REQUIRE_PACKAGES_PXLIB=1
endif
ifeq ($(FULL_TARGET),m68k-freebsd)
REQUIRE_PACKAGES_FCL-BASE=1
REQUIRE_PACKAGES_IBASE=1
REQUIRE_PACKAGES_POSTGRES=1
REQUIRE_PACKAGES_MYSQL=1
REQUIRE_PACKAGES_ODBC=1
REQUIRE_PACKAGES_ORACLE=1
REQUIRE_PACKAGES_SQLITE=1
REQUIRE_PACKAGES_PXLIB=1
endif
ifeq ($(FULL_TARGET),m68k-netbsd)
REQUIRE_PACKAGES_FCL-BASE=1
REQUIRE_PACKAGES_IBASE=1
REQUIRE_PACKAGES_POSTGRES=1
REQUIRE_PACKAGES_MYSQL=1
REQUIRE_PACKAGES_ODBC=1
REQUIRE_PACKAGES_ORACLE=1
REQUIRE_PACKAGES_SQLITE=1
REQUIRE_PACKAGES_PXLIB=1
endif
ifeq ($(FULL_TARGET),m68k-amiga)
REQUIRE_PACKAGES_FCL-BASE=1
endif
ifeq ($(FULL_TARGET),m68k-atari)
REQUIRE_PACKAGES_FCL-BASE=1
endif
ifeq ($(FULL_TARGET),m68k-openbsd)
REQUIRE_PACKAGES_FCL-BASE=1
REQUIRE_PACKAGES_IBASE=1
REQUIRE_PACKAGES_POSTGRES=1
REQUIRE_PACKAGES_MYSQL=1
REQUIRE_PACKAGES_ODBC=1
REQUIRE_PACKAGES_ORACLE=1
REQUIRE_PACKAGES_SQLITE=1
REQUIRE_PACKAGES_PXLIB=1
endif
ifeq ($(FULL_TARGET),m68k-palmos)
REQUIRE_PACKAGES_FCL-BASE=1
endif
ifeq ($(FULL_TARGET),m68k-embedded)
REQUIRE_PACKAGES_FCL-BASE=1
endif
ifeq ($(FULL_TARGET),powerpc-linux)
REQUIRE_PACKAGES_FCL-BASE=1
REQUIRE_PACKAGES_IBASE=1
REQUIRE_PACKAGES_POSTGRES=1
REQUIRE_PACKAGES_MYSQL=1
REQUIRE_PACKAGES_ODBC=1
REQUIRE_PACKAGES_ORACLE=1
REQUIRE_PACKAGES_SQLITE=1
REQUIRE_PACKAGES_PXLIB=1
endif
ifeq ($(FULL_TARGET),powerpc-netbsd)
REQUIRE_PACKAGES_FCL-BASE=1
REQUIRE_PACKAGES_IBASE=1
REQUIRE_PACKAGES_POSTGRES=1
REQUIRE_PACKAGES_MYSQL=1
REQUIRE_PACKAGES_ODBC=1
REQUIRE_PACKAGES_ORACLE=1
REQUIRE_PACKAGES_SQLITE=1
REQUIRE_PACKAGES_PXLIB=1
endif
ifeq ($(FULL_TARGET),powerpc-amiga)
REQUIRE_PACKAGES_FCL-BASE=1
endif
ifeq ($(FULL_TARGET),powerpc-macos)
REQUIRE_PACKAGES_FCL-BASE=1
endif
ifeq ($(FULL_TARGET),powerpc-darwin)
REQUIRE_PACKAGES_FCL-BASE=1
REQUIRE_PACKAGES_IBASE=1
REQUIRE_PACKAGES_POSTGRES=1
REQUIRE_PACKAGES_MYSQL=1
REQUIRE_PACKAGES_ODBC=1
REQUIRE_PACKAGES_ORACLE=1
REQUIRE_PACKAGES_SQLITE=1
endif
ifeq ($(FULL_TARGET),powerpc-morphos)
REQUIRE_PACKAGES_FCL-BASE=1
endif
ifeq ($(FULL_TARGET),powerpc-embedded)
REQUIRE_PACKAGES_FCL-BASE=1
endif
ifeq ($(FULL_TARGET),sparc-linux)
REQUIRE_PACKAGES_FCL-BASE=1
REQUIRE_PACKAGES_IBASE=1
REQUIRE_PACKAGES_POSTGRES=1
REQUIRE_PACKAGES_MYSQL=1
REQUIRE_PACKAGES_ODBC=1
REQUIRE_PACKAGES_ORACLE=1
REQUIRE_PACKAGES_SQLITE=1
REQUIRE_PACKAGES_PXLIB=1
endif
ifeq ($(FULL_TARGET),sparc-netbsd)
REQUIRE_PACKAGES_FCL-BASE=1
REQUIRE_PACKAGES_IBASE=1
REQUIRE_PACKAGES_POSTGRES=1
REQUIRE_PACKAGES_MYSQL=1
REQUIRE_PACKAGES_ODBC=1
REQUIRE_PACKAGES_ORACLE=1
REQUIRE_PACKAGES_SQLITE=1
REQUIRE_PACKAGES_PXLIB=1
endif
ifeq ($(FULL_TARGET),sparc-solaris)
REQUIRE_PACKAGES_FCL-BASE=1
REQUIRE_PACKAGES_SQLITE=1
endif
ifeq ($(FULL_TARGET),sparc-embedded)
REQUIRE_PACKAGES_FCL-BASE=1
endif
ifeq ($(FULL_TARGET),x86_64-linux)
REQUIRE_PACKAGES_FCL-BASE=1
REQUIRE_PACKAGES_IBASE=1
REQUIRE_PACKAGES_POSTGRES=1
REQUIRE_PACKAGES_MYSQL=1
REQUIRE_PACKAGES_ODBC=1
REQUIRE_PACKAGES_ORACLE=1
REQUIRE_PACKAGES_SQLITE=1
REQUIRE_PACKAGES_PXLIB=1
endif
ifeq ($(FULL_TARGET),x86_64-freebsd)
REQUIRE_PACKAGES_FCL-BASE=1
REQUIRE_PACKAGES_IBASE=1
REQUIRE_PACKAGES_POSTGRES=1
REQUIRE_PACKAGES_MYSQL=1
REQUIRE_PACKAGES_ODBC=1
REQUIRE_PACKAGES_ORACLE=1
REQUIRE_PACKAGES_SQLITE=1
REQUIRE_PACKAGES_PXLIB=1
endif
ifeq ($(FULL_TARGET),x86_64-darwin)
REQUIRE_PACKAGES_FCL-BASE=1
REQUIRE_PACKAGES_IBASE=1
REQUIRE_PACKAGES_POSTGRES=1
REQUIRE_PACKAGES_MYSQL=1
REQUIRE_PACKAGES_ODBC=1
REQUIRE_PACKAGES_ORACLE=1
REQUIRE_PACKAGES_SQLITE=1
endif
ifeq ($(FULL_TARGET),x86_64-win64)
REQUIRE_PACKAGES_WINUNITS-BASE=1
REQUIRE_PACKAGES_WINUNITS-JEDI=1
REQUIRE_PACKAGES_FCL-BASE=1
REQUIRE_PACKAGES_IBASE=1
REQUIRE_PACKAGES_ODBC=1
REQUIRE_PACKAGES_MYSQL=1
REQUIRE_PACKAGES_SQLITE=1
endif
ifeq ($(FULL_TARGET),x86_64-embedded)
REQUIRE_PACKAGES_FCL-BASE=1
endif
ifeq ($(FULL_TARGET),arm-linux)
REQUIRE_PACKAGES_FCL-BASE=1
REQUIRE_PACKAGES_IBASE=1
REQUIRE_PACKAGES_POSTGRES=1
REQUIRE_PACKAGES_MYSQL=1
REQUIRE_PACKAGES_ODBC=1
REQUIRE_PACKAGES_ORACLE=1
REQUIRE_PACKAGES_SQLITE=1
REQUIRE_PACKAGES_PXLIB=1
endif
ifeq ($(FULL_TARGET),arm-palmos)
REQUIRE_PACKAGES_FCL-BASE=1
endif
ifeq ($(FULL_TARGET),arm-darwin)
REQUIRE_PACKAGES_FCL-BASE=1
REQUIRE_PACKAGES_IBASE=1
REQUIRE_PACKAGES_POSTGRES=1
REQUIRE_PACKAGES_MYSQL=1
REQUIRE_PACKAGES_ODBC=1
REQUIRE_PACKAGES_ORACLE=1
REQUIRE_PACKAGES_SQLITE=1
endif
ifeq ($(FULL_TARGET),arm-wince)
REQUIRE_PACKAGES_FCL-BASE=1
REQUIRE_PACKAGES_IBASE=1
REQUIRE_PACKAGES_POSTGRES=1
REQUIRE_PACKAGES_MYSQL=1
REQUIRE_PACKAGES_ODBC=1
REQUIRE_PACKAGES_ORACLE=1
REQUIRE_PACKAGES_SQLITE=1
endif
ifeq ($(FULL_TARGET),arm-gba)
REQUIRE_PACKAGES_FCL-BASE=1
endif
ifeq ($(FULL_TARGET),arm-nds)
REQUIRE_PACKAGES_FCL-BASE=1
endif
ifeq ($(FULL_TARGET),arm-embedded)
REQUIRE_PACKAGES_FCL-BASE=1
endif
ifeq ($(FULL_TARGET),arm-symbian)
REQUIRE_PACKAGES_FCL-BASE=1
endif
ifeq ($(FULL_TARGET),powerpc64-linux)
REQUIRE_PACKAGES_FCL-BASE=1
REQUIRE_PACKAGES_IBASE=1
REQUIRE_PACKAGES_POSTGRES=1
REQUIRE_PACKAGES_MYSQL=1
REQUIRE_PACKAGES_ODBC=1
REQUIRE_PACKAGES_ORACLE=1
REQUIRE_PACKAGES_SQLITE=1
REQUIRE_PACKAGES_PXLIB=1
endif
ifeq ($(FULL_TARGET),powerpc64-darwin)
REQUIRE_PACKAGES_FCL-BASE=1
REQUIRE_PACKAGES_IBASE=1
REQUIRE_PACKAGES_POSTGRES=1
REQUIRE_PACKAGES_MYSQL=1
REQUIRE_PACKAGES_ODBC=1
REQUIRE_PACKAGES_ORACLE=1
REQUIRE_PACKAGES_SQLITE=1
endif
ifeq ($(FULL_TARGET),powerpc64-embedded)
REQUIRE_PACKAGES_FCL-BASE=1
endif
ifeq ($(FULL_TARGET),avr-embedded)
REQUIRE_PACKAGES_FCL-BASE=1
endif
ifeq ($(FULL_TARGET),armeb-linux)
REQUIRE_PACKAGES_FCL-BASE=1
REQUIRE_PACKAGES_IBASE=1
REQUIRE_PACKAGES_POSTGRES=1
REQUIRE_PACKAGES_MYSQL=1
REQUIRE_PACKAGES_ODBC=1
REQUIRE_PACKAGES_ORACLE=1
REQUIRE_PACKAGES_SQLITE=1
REQUIRE_PACKAGES_PXLIB=1
endif
ifeq ($(FULL_TARGET),armeb-embedded)
REQUIRE_PACKAGES_FCL-BASE=1
endif
ifdef REQUIRE_PACKAGES_FCL-BASE
PACKAGEDIR_FCL-BASE:=$(firstword $(subst /Makefile.fpc,,$(strip $(wildcard $(addsuffix /fcl-base/Makefile.fpc,$(PACKAGESDIR))))))
ifneq ($(PACKAGEDIR_FCL-BASE),)
ifneq ($(wildcard $(PACKAGEDIR_FCL-BASE)/units/$(TARGETSUFFIX)),)
UNITDIR_FCL-BASE=$(PACKAGEDIR_FCL-BASE)/units/$(TARGETSUFFIX)
else
UNITDIR_FCL-BASE=$(PACKAGEDIR_FCL-BASE)
endif
ifdef CHECKDEPEND
$(PACKAGEDIR_FCL-BASE)/$(FPCMADE):
	$(MAKE) -C $(PACKAGEDIR_FCL-BASE) $(FPCMADE)
override ALLDEPENDENCIES+=$(PACKAGEDIR_FCL-BASE)/$(FPCMADE)
endif
else
PACKAGEDIR_FCL-BASE=
UNITDIR_FCL-BASE:=$(subst /Package.fpc,,$(strip $(wildcard $(addsuffix /fcl-base/Package.fpc,$(UNITSDIR)))))
ifneq ($(UNITDIR_FCL-BASE),)
UNITDIR_FCL-BASE:=$(firstword $(UNITDIR_FCL-BASE))
else
UNITDIR_FCL-BASE=
endif
endif
ifdef UNITDIR_FCL-BASE
override COMPILER_UNITDIR+=$(UNITDIR_FCL-BASE)
endif
endif
ifdef REQUIRE_PACKAGES_IBASE
PACKAGEDIR_IBASE:=$(firstword $(subst /Makefile.fpc,,$(strip $(wildcard $(addsuffix /ibase/Makefile.fpc,$(PACKAGESDIR))))))
ifneq ($(PACKAGEDIR_IBASE),)
ifneq ($(wildcard $(PACKAGEDIR_IBASE)/units/$(TARGETSUFFIX)),)
UNITDIR_IBASE=$(PACKAGEDIR_IBASE)/units/$(TARGETSUFFIX)
else
UNITDIR_IBASE=$(PACKAGEDIR_IBASE)
endif
ifdef CHECKDEPEND
$(PACKAGEDIR_IBASE)/$(FPCMADE):
	$(MAKE) -C $(PACKAGEDIR_IBASE) $(FPCMADE)
override ALLDEPENDENCIES+=$(PACKAGEDIR_IBASE)/$(FPCMADE)
endif
else
PACKAGEDIR_IBASE=
UNITDIR_IBASE:=$(subst /Package.fpc,,$(strip $(wildcard $(addsuffix /ibase/Package.fpc,$(UNITSDIR)))))
ifneq ($(UNITDIR_IBASE),)
UNITDIR_IBASE:=$(firstword $(UNITDIR_IBASE))
else
UNITDIR_IBASE=
endif
endif
ifdef UNITDIR_IBASE
override COMPILER_UNITDIR+=$(UNITDIR_IBASE)
endif
endif
ifdef REQUIRE_PACKAGES_POSTGRES
PACKAGEDIR_POSTGRES:=$(firstword $(subst /Makefile.fpc,,$(strip $(wildcard $(addsuffix /postgres/Makefile.fpc,$(PACKAGESDIR))))))
ifneq ($(PACKAGEDIR_POSTGRES),)
ifneq ($(wildcard $(PACKAGEDIR_POSTGRES)/units/$(TARGETSUFFIX)),)
UNITDIR_POSTGRES=$(PACKAGEDIR_POSTGRES)/units/$(TARGETSUFFIX)
else
UNITDIR_POSTGRES=$(PACKAGEDIR_POSTGRES)
endif
ifdef CHECKDEPEND
$(PACKAGEDIR_POSTGRES)/$(FPCMADE):
	$(MAKE) -C $(PACKAGEDIR_POSTGRES) $(FPCMADE)
override ALLDEPENDENCIES+=$(PACKAGEDIR_POSTGRES)/$(FPCMADE)
endif
else
PACKAGEDIR_POSTGRES=
UNITDIR_POSTGRES:=$(subst /Package.fpc,,$(strip $(wildcard $(addsuffix /postgres/Package.fpc,$(UNITSDIR)))))
ifneq ($(UNITDIR_POSTGRES),)
UNITDIR_POSTGRES:=$(firstword $(UNITDIR_POSTGRES))
else
UNITDIR_POSTGRES=
endif
endif
ifdef UNITDIR_POSTGRES
override COMPILER_UNITDIR+=$(UNITDIR_POSTGRES)
endif
endif
ifdef REQUIRE_PACKAGES_MYSQL
PACKAGEDIR_MYSQL:=$(firstword $(subst /Makefile.fpc,,$(strip $(wildcard $(addsuffix /mysql/Makefile.fpc,$(PACKAGESDIR))))))
ifneq ($(PACKAGEDIR_MYSQL),)
ifneq ($(wildcard $(PACKAGEDIR_MYSQL)/units/$(TARGETSUFFIX)),)
UNITDIR_MYSQL=$(PACKAGEDIR_MYSQL)/units/$(TARGETSUFFIX)
else
UNITDIR_MYSQL=$(PACKAGEDIR_MYSQL)
endif
ifdef CHECKDEPEND
$(PACKAGEDIR_MYSQL)/$(FPCMADE):
	$(MAKE) -C $(PACKAGEDIR_MYSQL) $(FPCMADE)
override ALLDEPENDENCIES+=$(PACKAGEDIR_MYSQL)/$(FPCMADE)
endif
else
PACKAGEDIR_MYSQL=
UNITDIR_MYSQL:=$(subst /Package.fpc,,$(strip $(wildcard $(addsuffix /mysql/Package.fpc,$(UNITSDIR)))))
ifneq ($(UNITDIR_MYSQL),)
UNITDIR_MYSQL:=$(firstword $(UNITDIR_MYSQL))
else
UNITDIR_MYSQL=
endif
endif
ifdef UNITDIR_MYSQL
override COMPILER_UNITDIR+=$(UNITDIR_MYSQL)
endif
endif
ifdef REQUIRE_PACKAGES_ODBC
PACKAGEDIR_ODBC:=$(firstword $(subst /Makefile.fpc,,$(strip $(wildcard $(addsuffix /odbc/Makefile.fpc,$(PACKAGESDIR))))))
ifneq ($(PACKAGEDIR_ODBC),)
ifneq ($(wildcard $(PACKAGEDIR_ODBC)/units/$(TARGETSUFFIX)),)
UNITDIR_ODBC=$(PACKAGEDIR_ODBC)/units/$(TARGETSUFFIX)
else
UNITDIR_ODBC=$(PACKAGEDIR_ODBC)
endif
ifdef CHECKDEPEND
$(PACKAGEDIR_ODBC)/$(FPCMADE):
	$(MAKE) -C $(PACKAGEDIR_ODBC) $(FPCMADE)
override ALLDEPENDENCIES+=$(PACKAGEDIR_ODBC)/$(FPCMADE)
endif
else
PACKAGEDIR_ODBC=
UNITDIR_ODBC:=$(subst /Package.fpc,,$(strip $(wildcard $(addsuffix /odbc/Package.fpc,$(UNITSDIR)))))
ifneq ($(UNITDIR_ODBC),)
UNITDIR_ODBC:=$(firstword $(UNITDIR_ODBC))
else
UNITDIR_ODBC=
endif
endif
ifdef UNITDIR_ODBC
override COMPILER_UNITDIR+=$(UNITDIR_ODBC)
endif
endif
ifdef REQUIRE_PACKAGES_ORACLE
PACKAGEDIR_ORACLE:=$(firstword $(subst /Makefile.fpc,,$(strip $(wildcard $(addsuffix /oracle/Makefile.fpc,$(PACKAGESDIR))))))
ifneq ($(PACKAGEDIR_ORACLE),)
ifneq ($(wildcard $(PACKAGEDIR_ORACLE)/units/$(TARGETSUFFIX)),)
UNITDIR_ORACLE=$(PACKAGEDIR_ORACLE)/units/$(TARGETSUFFIX)
else
UNITDIR_ORACLE=$(PACKAGEDIR_ORACLE)
endif
ifdef CHECKDEPEND
$(PACKAGEDIR_ORACLE)/$(FPCMADE):
	$(MAKE) -C $(PACKAGEDIR_ORACLE) $(FPCMADE)
override ALLDEPENDENCIES+=$(PACKAGEDIR_ORACLE)/$(FPCMADE)
endif
else
PACKAGEDIR_ORACLE=
UNITDIR_ORACLE:=$(subst /Package.fpc,,$(strip $(wildcard $(addsuffix /oracle/Package.fpc,$(UNITSDIR)))))
ifneq ($(UNITDIR_ORACLE),)
UNITDIR_ORACLE:=$(firstword $(UNITDIR_ORACLE))
else
UNITDIR_ORACLE=
endif
endif
ifdef UNITDIR_ORACLE
override COMPILER_UNITDIR+=$(UNITDIR_ORACLE)
endif
endif
ifdef REQUIRE_PACKAGES_SQLITE
PACKAGEDIR_SQLITE:=$(firstword $(subst /Makefile.fpc,,$(strip $(wildcard $(addsuffix /sqlite/Makefile.fpc,$(PACKAGESDIR))))))
ifneq ($(PACKAGEDIR_SQLITE),)
ifneq ($(wildcard $(PACKAGEDIR_SQLITE)/units/$(TARGETSUFFIX)),)
UNITDIR_SQLITE=$(PACKAGEDIR_SQLITE)/units/$(TARGETSUFFIX)
else
UNITDIR_SQLITE=$(PACKAGEDIR_SQLITE)
endif
ifdef CHECKDEPEND
$(PACKAGEDIR_SQLITE)/$(FPCMADE):
	$(MAKE) -C $(PACKAGEDIR_SQLITE) $(FPCMADE)
override ALLDEPENDENCIES+=$(PACKAGEDIR_SQLITE)/$(FPCMADE)
endif
else
PACKAGEDIR_SQLITE=
UNITDIR_SQLITE:=$(subst /Package.fpc,,$(strip $(wildcard $(addsuffix /sqlite/Package.fpc,$(UNITSDIR)))))
ifneq ($(UNITDIR_SQLITE),)
UNITDIR_SQLITE:=$(firstword $(UNITDIR_SQLITE))
else
UNITDIR_SQLITE=
endif
endif
ifdef UNITDIR_SQLITE
override COMPILER_UNITDIR+=$(UNITDIR_SQLITE)
endif
endif
ifdef REQUIRE_PACKAGES_PXLIB
PACKAGEDIR_PXLIB:=$(firstword $(subst /Makefile.fpc,,$(strip $(wildcard $(addsuffix /pxlib/Makefile.fpc,$(PACKAGESDIR))))))
ifneq ($(PACKAGEDIR_PXLIB),)
ifneq ($(wildcard $(PACKAGEDIR_PXLIB)/units/$(TARGETSUFFIX)),)
UNITDIR_PXLIB=$(PACKAGEDIR_PXLIB)/units/$(TARGETSUFFIX)
else
UNITDIR_PXLIB=$(PACKAGEDIR_PXLIB)
endif
ifdef CHECKDEPEND
$(PACKAGEDIR_PXLIB)/$(FPCMADE):
	$(MAKE) -C $(PACKAGEDIR_PXLIB) $(FPCMADE)
override ALLDEPENDENCIES+=$(PACKAGEDIR_PXLIB)/$(FPCMADE)
endif
else
PACKAGEDIR_PXLIB=
UNITDIR_PXLIB:=$(subst /Package.fpc,,$(strip $(wildcard $(addsuffix /pxlib/Package.fpc,$(UNITSDIR)))))
ifneq ($(UNITDIR_PXLIB),)
UNITDIR_PXLIB:=$(firstword $(UNITDIR_PXLIB))
else
UNITDIR_PXLIB=
endif
endif
ifdef UNITDIR_PXLIB
override COMPILER_UNITDIR+=$(UNITDIR_PXLIB)
endif
endif
ifdef REQUIRE_PACKAGES_WINUNITS-BASE
PACKAGEDIR_WINUNITS-BASE:=$(firstword $(subst /Makefile.fpc,,$(strip $(wildcard $(addsuffix /winunits-base/Makefile.fpc,$(PACKAGESDIR))))))
ifneq ($(PACKAGEDIR_WINUNITS-BASE),)
ifneq ($(wildcard $(PACKAGEDIR_WINUNITS-BASE)/units/$(TARGETSUFFIX)),)
UNITDIR_WINUNITS-BASE=$(PACKAGEDIR_WINUNITS-BASE)/units/$(TARGETSUFFIX)
else
UNITDIR_WINUNITS-BASE=$(PACKAGEDIR_WINUNITS-BASE)
endif
ifdef CHECKDEPEND
$(PACKAGEDIR_WINUNITS-BASE)/$(FPCMADE):
	$(MAKE) -C $(PACKAGEDIR_WINUNITS-BASE) $(FPCMADE)
override ALLDEPENDENCIES+=$(PACKAGEDIR_WINUNITS-BASE)/$(FPCMADE)
endif
else
PACKAGEDIR_WINUNITS-BASE=
UNITDIR_WINUNITS-BASE:=$(subst /Package.fpc,,$(strip $(wildcard $(addsuffix /winunits-base/Package.fpc,$(UNITSDIR)))))
ifneq ($(UNITDIR_WINUNITS-BASE),)
UNITDIR_WINUNITS-BASE:=$(firstword $(UNITDIR_WINUNITS-BASE))
else
UNITDIR_WINUNITS-BASE=
endif
endif
ifdef UNITDIR_WINUNITS-BASE
override COMPILER_UNITDIR+=$(UNITDIR_WINUNITS-BASE)
endif
endif
ifdef REQUIRE_PACKAGES_WINUNITS-JEDI
PACKAGEDIR_WINUNITS-JEDI:=$(firstword $(subst /Makefile.fpc,,$(strip $(wildcard $(addsuffix /winunits-jedi/Makefile.fpc,$(PACKAGESDIR))))))
ifneq ($(PACKAGEDIR_WINUNITS-JEDI),)
ifneq ($(wildcard $(PACKAGEDIR_WINUNITS-JEDI)/units/$(TARGETSUFFIX)),)
UNITDIR_WINUNITS-JEDI=$(PACKAGEDIR_WINUNITS-JEDI)/units/$(TARGETSUFFIX)
else
UNITDIR_WINUNITS-JEDI=$(PACKAGEDIR_WINUNITS-JEDI)
endif
ifdef CHECKDEPEND
$(PACKAGEDIR_WINUNITS-JEDI)/$(FPCMADE):
	$(MAKE) -C $(PACKAGEDIR_WINUNITS-JEDI) $(FPCMADE)
override ALLDEPENDENCIES+=$(PACKAGEDIR_WINUNITS-JEDI)/$(FPCMADE)
endif
else
PACKAGEDIR_WINUNITS-JEDI=
UNITDIR_WINUNITS-JEDI:=$(subst /Package.fpc,,$(strip $(wildcard $(addsuffix /winunits-jedi/Package.fpc,$(UNITSDIR)))))
ifneq ($(UNITDIR_WINUNITS-JEDI),)
UNITDIR_WINUNITS-JEDI:=$(firstword $(UNITDIR_WINUNITS-JEDI))
else
UNITDIR_WINUNITS-JEDI=
endif
endif
ifdef UNITDIR_WINUNITS-JEDI
override COMPILER_UNITDIR+=$(UNITDIR_WINUNITS-JEDI)
endif
endif
ifndef NOCPUDEF
override FPCOPTDEF=$(ARCH)
endif
ifneq ($(OS_TARGET),$(OS_SOURCE))
override FPCOPT+=-T$(OS_TARGET)
endif
ifneq ($(CPU_TARGET),$(CPU_SOURCE))
override FPCOPT+=-P$(ARCH)
endif
ifeq ($(OS_SOURCE),openbsd)
override FPCOPT+=-FD$(NEW_BINUTILS_PATH)
endif
ifndef CROSSBOOTSTRAP
ifneq ($(BINUTILSPREFIX),)
override FPCOPT+=-XP$(BINUTILSPREFIX)
endif
ifneq ($(BINUTILSPREFIX),)
override FPCOPT+=-Xr$(RLINKPATH)
endif
endif
ifdef UNITDIR
override FPCOPT+=$(addprefix -Fu,$(UNITDIR))
endif
ifdef LIBDIR
override FPCOPT+=$(addprefix -Fl,$(LIBDIR))
endif
ifdef OBJDIR
override FPCOPT+=$(addprefix -Fo,$(OBJDIR))
endif
ifdef INCDIR
override FPCOPT+=$(addprefix -Fi,$(INCDIR))
endif
ifdef LINKSMART
override FPCOPT+=-XX
endif
ifdef CREATESMART
override FPCOPT+=-CX
endif
ifdef DEBUG
override FPCOPT+=-gl
override FPCOPTDEF+=DEBUG
endif
ifdef RELEASE
ifneq ($(findstring 2.0.,$(FPC_VERSION)),)
ifeq ($(CPU_TARGET),i386)
FPCCPUOPT:=-OG2p3
endif
ifeq ($(CPU_TARGET),powerpc)
FPCCPUOPT:=-O1r
endif
else
FPCCPUOPT:=-O2
endif
override FPCOPT+=-Ur -Xs $(FPCCPUOPT) -n
override FPCOPTDEF+=RELEASE
endif
ifdef STRIP
override FPCOPT+=-Xs
endif
ifdef OPTIMIZE
override FPCOPT+=-O2
endif
ifdef VERBOSE
override FPCOPT+=-vwni
endif
ifdef COMPILER_OPTIONS
override FPCOPT+=$(COMPILER_OPTIONS)
endif
ifdef COMPILER_UNITDIR
override FPCOPT+=$(addprefix -Fu,$(COMPILER_UNITDIR))
endif
ifdef COMPILER_LIBRARYDIR
override FPCOPT+=$(addprefix -Fl,$(COMPILER_LIBRARYDIR))
endif
ifdef COMPILER_OBJECTDIR
override FPCOPT+=$(addprefix -Fo,$(COMPILER_OBJECTDIR))
endif
ifdef COMPILER_INCLUDEDIR
override FPCOPT+=$(addprefix -Fi,$(COMPILER_INCLUDEDIR))
endif
ifdef CROSSBINDIR
override FPCOPT+=-FD$(CROSSBINDIR)
endif
ifdef COMPILER_TARGETDIR
override FPCOPT+=-FE$(COMPILER_TARGETDIR)
ifeq ($(COMPILER_TARGETDIR),.)
override TARGETDIRPREFIX=
else
override TARGETDIRPREFIX=$(COMPILER_TARGETDIR)/
endif
endif
ifdef COMPILER_UNITTARGETDIR
override FPCOPT+=-FU$(COMPILER_UNITTARGETDIR)
ifeq ($(COMPILER_UNITTARGETDIR),.)
override UNITTARGETDIRPREFIX=
else
override UNITTARGETDIRPREFIX=$(COMPILER_UNITTARGETDIR)/
endif
else
ifdef COMPILER_TARGETDIR
override COMPILER_UNITTARGETDIR=$(COMPILER_TARGETDIR)
override UNITTARGETDIRPREFIX=$(TARGETDIRPREFIX)
endif
endif
ifdef CREATESHARED
override FPCOPT+=-Cg
ifeq ($(CPU_TARGET),i386)
override FPCOPT+=-Aas
endif
endif
ifeq ($(findstring 2.0.,$(FPC_VERSION)),)
ifeq ($(OS_TARGET),linux)
ifeq ($(CPU_TARGET),x86_64)
override FPCOPT+=-Cg
endif
endif
endif
ifdef LINKSHARED
endif
ifdef GCCLIBDIR
override FPCOPT+=-Fl$(GCCLIBDIR)
endif
ifdef OTHERLIBDIR
override FPCOPT+=$(addprefix -Fl,$(OTHERLIBDIR))
endif
ifdef OPT
override FPCOPT+=$(OPT)
endif
ifdef FPCOPTDEF
override FPCOPT+=$(addprefix -d,$(FPCOPTDEF))
endif
ifdef CFGFILE
override FPCOPT+=@$(CFGFILE)
endif
ifdef USEENV
override FPCEXTCMD:=$(FPCOPT)
override FPCOPT:=!FPCEXTCMD
export FPCEXTCMD
endif
override AFULL_TARGET=$(CPU_TARGET)-$(OS_TARGET)
override AFULL_SOURCE=$(CPU_SOURCE)-$(OS_SOURCE)
ifneq ($(AFULL_TARGET),$(AFULL_SOURCE))
override ACROSSCOMPILE=1
endif
ifdef ACROSSCOMPILE
override FPCOPT+=$(CROSSOPT)
endif
override COMPILER:=$(FPC) $(FPCOPT)
ifeq (,$(findstring -s ,$(COMPILER)))
EXECPPAS=
else
ifeq ($(FULL_SOURCE),$(FULL_TARGET))
ifdef RUNBATCH
EXECPPAS:=@$(RUNBATCH) $(PPAS)
else
EXECPPAS:=@$(PPAS)
endif
endif
endif
ifdef TARGET_RSTS
override RSTFILES=$(addsuffix $(RSTEXT),$(TARGET_RSTS))
override CLEANRSTFILES+=$(RSTFILES)
endif
.PHONY: fpc_install fpc_sourceinstall fpc_exampleinstall
ifdef INSTALL_UNITS
override INSTALLPPUFILES+=$(addsuffix $(PPUEXT),$(INSTALL_UNITS))
endif
ifdef INSTALL_BUILDUNIT
override INSTALLPPUFILES:=$(filter-out $(INSTALL_BUILDUNIT)$(PPUEXT),$(INSTALLPPUFILES))
endif
ifdef INSTALLPPUFILES
override INSTALLPPULINKFILES:=$(subst $(PPUEXT),$(OEXT),$(INSTALLPPUFILES)) $(addprefix $(STATICLIBPREFIX),$(subst $(PPUEXT),$(STATICLIBEXT),$(INSTALLPPUFILES))) $(addprefix $(IMPORTLIBPREFIX),$(subst $(PPUEXT),$(STATICLIBEXT),$(INSTALLPPUFILES)))
ifneq ($(UNITTARGETDIRPREFIX),)
override INSTALLPPUFILES:=$(addprefix $(UNITTARGETDIRPREFIX),$(notdir $(INSTALLPPUFILES)))
override INSTALLPPULINKFILES:=$(wildcard $(addprefix $(UNITTARGETDIRPREFIX),$(notdir $(INSTALLPPULINKFILES))))
endif
override INSTALL_CREATEPACKAGEFPC=1
endif
ifdef INSTALLEXEFILES
ifneq ($(TARGETDIRPREFIX),)
override INSTALLEXEFILES:=$(addprefix $(TARGETDIRPREFIX),$(notdir $(INSTALLEXEFILES)))
endif
endif
fpc_install: all $(INSTALLTARGET)
ifdef INSTALLEXEFILES
	$(MKDIR) $(INSTALL_BINDIR)
ifdef UPXPROG
	-$(UPXPROG) $(INSTALLEXEFILES)
endif
	$(INSTALLEXE) $(INSTALLEXEFILES) $(INSTALL_BINDIR)
endif
ifdef INSTALL_CREATEPACKAGEFPC
ifdef FPCMAKE
ifdef PACKAGE_VERSION
ifneq ($(wildcard Makefile.fpc),)
	$(FPCMAKE) -p -T$(CPU_TARGET)-$(OS_TARGET) Makefile.fpc
	$(MKDIR) $(INSTALL_UNITDIR)
	$(INSTALL) Package.fpc $(INSTALL_UNITDIR)
endif
endif
endif
endif
ifdef INSTALLPPUFILES
	$(MKDIR) $(INSTALL_UNITDIR)
	$(INSTALL) $(INSTALLPPUFILES) $(INSTALL_UNITDIR)
ifneq ($(INSTALLPPULINKFILES),)
	$(INSTALL) $(INSTALLPPULINKFILES) $(INSTALL_UNITDIR)
endif
ifneq ($(wildcard $(LIB_FULLNAME)),)
	$(MKDIR) $(INSTALL_LIBDIR)
	$(INSTALL) $(LIB_FULLNAME) $(INSTALL_LIBDIR)
ifdef inUnix
	ln -sf $(LIB_FULLNAME) $(INSTALL_LIBDIR)/$(LIB_NAME)
endif
endif
endif
ifdef INSTALL_FILES
	$(MKDIR) $(INSTALL_DATADIR)
	$(INSTALL) $(INSTALL_FILES) $(INSTALL_DATADIR)
endif
fpc_sourceinstall: distclean
	$(MKDIR) $(INSTALL_SOURCEDIR)
	$(COPYTREE) $(BASEDIR)/* $(INSTALL_SOURCEDIR)
fpc_exampleinstall: $(addsuffix _distclean,$(TARGET_EXAMPLEDIRS))
ifdef HASEXAMPLES
	$(MKDIR) $(INSTALL_EXAMPLEDIR)
endif
ifdef EXAMPLESOURCEFILES
	$(COPY) $(EXAMPLESOURCEFILES) $(INSTALL_EXAMPLEDIR)
endif
ifdef TARGET_EXAMPLEDIRS
	$(COPYTREE) $(addsuffix /*,$(TARGET_EXAMPLEDIRS)) $(INSTALL_EXAMPLEDIR)
endif
.PHONY: fpc_distinstall
fpc_distinstall: install exampleinstall
.PHONY: fpc_zipinstall fpc_zipsourceinstall fpc_zipexampleinstall
ifndef PACKDIR
ifndef inUnix
PACKDIR=$(BASEDIR)/../fpc-pack
else
PACKDIR=/tmp/fpc-pack
endif
endif
ifndef ZIPNAME
ifdef DIST_ZIPNAME
ZIPNAME=$(DIST_ZIPNAME)
else
ZIPNAME=$(PACKAGE_NAME)
endif
endif
ifndef FULLZIPNAME
FULLZIPNAME=$(ZIPCROSSPREFIX)$(ZIPPREFIX)$(ZIPNAME)$(ZIPSUFFIX)
endif
ifndef ZIPTARGET
ifdef DIST_ZIPTARGET
ZIPTARGET=DIST_ZIPTARGET
else
ZIPTARGET=install
endif
endif
ifndef USEZIP
ifdef inUnix
USETAR=1
endif
endif
ifndef inUnix
USEZIPWRAPPER=1
endif
ifdef USEZIPWRAPPER
ZIPPATHSEP=$(PATHSEP)
ZIPWRAPPER=$(subst /,$(PATHSEP),$(DIST_DESTDIR)/fpczip$(SRCBATCHEXT))
else
ZIPPATHSEP=/
endif
ZIPCMD_CDPACK:=cd $(subst /,$(ZIPPATHSEP),$(PACKDIR))
ZIPCMD_CDBASE:=cd $(subst /,$(ZIPPATHSEP),$(BASEDIR))
ifdef USETAR
ZIPDESTFILE:=$(DIST_DESTDIR)/$(FULLZIPNAME)$(TAREXT)
ZIPCMD_ZIP:=$(TARPROG) cf$(TAROPT) $(ZIPDESTFILE) *
else
ZIPDESTFILE:=$(DIST_DESTDIR)/$(FULLZIPNAME)$(ZIPEXT)
ZIPCMD_ZIP:=$(subst /,$(ZIPPATHSEP),$(ZIPPROG)) -Dr $(ZIPOPT) $(ZIPDESTFILE) *
endif
fpc_zipinstall:
	$(MAKE) $(ZIPTARGET) INSTALL_PREFIX=$(PACKDIR) ZIPINSTALL=1
	$(MKDIR) $(DIST_DESTDIR)
	$(DEL) $(ZIPDESTFILE)
ifdef USEZIPWRAPPER
ifneq ($(ECHOREDIR),echo)
	$(ECHOREDIR) -e "$(subst \,\\,$(ZIPCMD_CDPACK))" > $(ZIPWRAPPER)
	$(ECHOREDIR) -e "$(subst \,\\,$(ZIPCMD_ZIP))" >> $(ZIPWRAPPER)
	$(ECHOREDIR) -e "$(subst \,\\,$(ZIPCMD_CDBASE))" >> $(ZIPWRAPPER)
else
	echo $(ZIPCMD_CDPACK) > $(ZIPWRAPPER)
	echo $(ZIPCMD_ZIP) >> $(ZIPWRAPPER)
	echo $(ZIPCMD_CDBASE) >> $(ZIPWRAPPER)
endif
ifdef inUnix
	/bin/sh $(ZIPWRAPPER)
else
ifdef RUNBATCH
	$(RUNBATCH) (ZIPWRAPPER)
else
	$(ZIPWRAPPER)
endif
endif
	$(DEL) $(ZIPWRAPPER)
else
	$(ZIPCMD_CDPACK) ; $(ZIPCMD_ZIP) ; $(ZIPCMD_CDBASE)
endif
	$(DELTREE) $(PACKDIR)
fpc_zipsourceinstall:
	$(MAKE) fpc_zipinstall ZIPTARGET=sourceinstall ZIPSUFFIX=$(ZIPSOURCESUFFIX)
fpc_zipexampleinstall:
ifdef HASEXAMPLES
	$(MAKE) fpc_zipinstall ZIPTARGET=exampleinstall ZIPSUFFIX=$(ZIPEXAMPLESUFFIX)
endif
fpc_zipdistinstall:
	$(MAKE) fpc_zipinstall ZIPTARGET=distinstall
.PHONY: fpc_clean fpc_cleanall fpc_distclean
ifdef EXEFILES
override CLEANEXEFILES:=$(addprefix $(TARGETDIRPREFIX),$(CLEANEXEFILES))
endif
ifdef CLEAN_UNITS
override CLEANPPUFILES+=$(addsuffix $(PPUEXT),$(CLEAN_UNITS))
endif
ifdef CLEANPPUFILES
override CLEANPPULINKFILES:=$(subst $(PPUEXT),$(OEXT),$(CLEANPPUFILES)) $(addprefix $(STATICLIBPREFIX),$(subst $(PPUEXT),$(STATICLIBEXT),$(CLEANPPUFILES))) $(addprefix $(IMPORTLIBPREFIX),$(subst $(PPUEXT),$(STATICLIBEXT),$(CLEANPPUFILES)))
ifdef DEBUGSYMEXT
override CLEANPPULINKFILES+=$(subst $(PPUEXT),$(DEBUGSYMEXT),$(CLEANPPUFILES))
endif
override CLEANPPUFILES:=$(addprefix $(UNITTARGETDIRPREFIX),$(CLEANPPUFILES))
override CLEANPPULINKFILES:=$(wildcard $(addprefix $(UNITTARGETDIRPREFIX),$(CLEANPPULINKFILES)))
endif
fpc_clean: $(CLEANTARGET)
ifdef CLEANEXEFILES
	-$(DEL) $(CLEANEXEFILES)
endif
ifdef CLEANPPUFILES
	-$(DEL) $(CLEANPPUFILES)
endif
ifneq ($(CLEANPPULINKFILES),)
	-$(DEL) $(CLEANPPULINKFILES)
endif
ifdef CLEANRSTFILES
	-$(DEL) $(addprefix $(UNITTARGETDIRPREFIX),$(CLEANRSTFILES))
endif
ifdef CLEAN_FILES
	-$(DEL) $(CLEAN_FILES)
endif
ifdef LIB_NAME
	-$(DEL) $(LIB_NAME) $(LIB_FULLNAME)
endif
	-$(DEL) $(FPCMADE) Package.fpc $(PPAS) script.res link.res $(FPCEXTFILE) $(REDIRFILE)
	-$(DEL) *$(ASMEXT) *_ppas$(BATCHEXT)
fpc_cleanall: $(CLEANTARGET)
ifdef CLEANEXEFILES
	-$(DEL) $(CLEANEXEFILES)
endif
ifdef COMPILER_UNITTARGETDIR
ifdef CLEANPPUFILES
	-$(DEL) $(CLEANPPUFILES)
endif
ifneq ($(CLEANPPULINKFILES),)
	-$(DEL) $(CLEANPPULINKFILES)
endif
ifdef CLEANRSTFILES
	-$(DEL) $(addprefix $(UNITTARGETDIRPREFIX),$(CLEANRSTFILES))
endif
endif
	-$(DELTREE) units
	-$(DEL) *$(OEXT) *$(PPUEXT) *$(RSTEXT) *$(ASMEXT) *$(STATICLIBEXT) *$(SHAREDLIBEXT) *$(PPLEXT)
ifneq ($(PPUEXT),.ppu)
	-$(DEL) *.o *.ppu *.a
endif
	-$(DELTREE) *$(SMARTEXT)
	-$(DEL) fpcmade.* Package.fpc $(PPAS) script.res link.res $(FPCEXTFILE) $(REDIRFILE)
	-$(DEL) *_ppas$(BATCHEXT)
ifdef AOUTEXT
	-$(DEL) *$(AOUTEXT)
endif
ifdef DEBUGSYMEXT
	-$(DEL) *$(DEBUGSYMEXT)
endif
fpc_distclean: cleanall
.PHONY: fpc_baseinfo
override INFORULES+=fpc_baseinfo
fpc_baseinfo:
	@$(ECHO)
	@$(ECHO)  == Package info ==
	@$(ECHO)  Package Name..... $(PACKAGE_NAME)
	@$(ECHO)  Package Version.. $(PACKAGE_VERSION)
	@$(ECHO)
	@$(ECHO)  == Configuration info ==
	@$(ECHO)
	@$(ECHO)  FPC.......... $(FPC)
	@$(ECHO)  FPC Version.. $(FPC_VERSION)
	@$(ECHO)  Source CPU... $(CPU_SOURCE)
	@$(ECHO)  Target CPU... $(CPU_TARGET)
	@$(ECHO)  Source OS.... $(OS_SOURCE)
	@$(ECHO)  Target OS.... $(OS_TARGET)
	@$(ECHO)  Full Source.. $(FULL_SOURCE)
	@$(ECHO)  Full Target.. $(FULL_TARGET)
	@$(ECHO)  SourceSuffix. $(SOURCESUFFIX)
	@$(ECHO)  TargetSuffix. $(TARGETSUFFIX)
	@$(ECHO)
	@$(ECHO)  == Directory info ==
	@$(ECHO)
	@$(ECHO)  Required pkgs... $(REQUIRE_PACKAGES)
	@$(ECHO)
	@$(ECHO)  Basedir......... $(BASEDIR)
	@$(ECHO)  FPCDir.......... $(FPCDIR)
	@$(ECHO)  CrossBinDir..... $(CROSSBINDIR)
	@$(ECHO)  UnitsDir........ $(UNITSDIR)
	@$(ECHO)  PackagesDir..... $(PACKAGESDIR)
	@$(ECHO)
	@$(ECHO)  GCC library..... $(GCCLIBDIR)
	@$(ECHO)  Other library... $(OTHERLIBDIR)
	@$(ECHO)
	@$(ECHO)  == Tools info ==
	@$(ECHO)
	@$(ECHO)  As........ $(AS)
	@$(ECHO)  Ld........ $(LD)
	@$(ECHO)  Ar........ $(AR)
	@$(ECHO)  Rc........ $(RC)
	@$(ECHO)
	@$(ECHO)  Mv........ $(MVPROG)
	@$(ECHO)  Cp........ $(CPPROG)
	@$(ECHO)  Rm........ $(RMPROG)
	@$(ECHO)  GInstall.. $(GINSTALL)
	@$(ECHO)  Echo...... $(ECHO)
	@$(ECHO)  Shell..... $(SHELL)
	@$(ECHO)  Date...... $(DATE)
	@$(ECHO)  FPCMake... $(FPCMAKE)
	@$(ECHO)  PPUMove... $(PPUMOVE)
	@$(ECHO)  Upx....... $(UPXPROG)
	@$(ECHO)  Zip....... $(ZIPPROG)
	@$(ECHO)
	@$(ECHO)  == Object info ==
	@$(ECHO)
	@$(ECHO)  Target Loaders........ $(TARGET_LOADERS)
	@$(ECHO)  Target Units.......... $(TARGET_UNITS)
	@$(ECHO)  Target Implicit Units. $(TARGET_IMPLICITUNITS)
	@$(ECHO)  Target Programs....... $(TARGET_PROGRAMS)
	@$(ECHO)  Target Dirs........... $(TARGET_DIRS)
	@$(ECHO)  Target Examples....... $(TARGET_EXAMPLES)
	@$(ECHO)  Target ExampleDirs.... $(TARGET_EXAMPLEDIRS)
	@$(ECHO)
	@$(ECHO)  Clean Units......... $(CLEAN_UNITS)
	@$(ECHO)  Clean Files......... $(CLEAN_FILES)
	@$(ECHO)
	@$(ECHO)  Install Units....... $(INSTALL_UNITS)
	@$(ECHO)  Install Files....... $(INSTALL_FILES)
	@$(ECHO)
	@$(ECHO)  == Install info ==
	@$(ECHO)
	@$(ECHO)  DateStr.............. $(DATESTR)
	@$(ECHO)  ZipName.............. $(ZIPNAME)
	@$(ECHO)  ZipPrefix............ $(ZIPPREFIX)
	@$(ECHO)  ZipCrossPrefix....... $(ZIPCROSSPREFIX)
	@$(ECHO)  ZipSuffix............ $(ZIPSUFFIX)
	@$(ECHO)  FullZipName.......... $(FULLZIPNAME)
	@$(ECHO)  Install FPC Package.. $(INSTALL_FPCPACKAGE)
	@$(ECHO)
	@$(ECHO)  Install base dir..... $(INSTALL_BASEDIR)
	@$(ECHO)  Install binary dir... $(INSTALL_BINDIR)
	@$(ECHO)  Install library dir.. $(INSTALL_LIBDIR)
	@$(ECHO)  Install units dir.... $(INSTALL_UNITDIR)
	@$(ECHO)  Install source dir... $(INSTALL_SOURCEDIR)
	@$(ECHO)  Install doc dir...... $(INSTALL_DOCDIR)
	@$(ECHO)  Install example dir.. $(INSTALL_EXAMPLEDIR)
	@$(ECHO)  Install data dir..... $(INSTALL_DATADIR)
	@$(ECHO)
	@$(ECHO)  Dist destination dir. $(DIST_DESTDIR)
	@$(ECHO)  Dist zip name........ $(DIST_ZIPNAME)
	@$(ECHO)
.PHONY: fpc_info
fpc_info: $(INFORULES)
.PHONY: fpc_makefile fpc_makefiles fpc_makefile_sub1 fpc_makefile_sub2 \
	fpc_makefile_dirs
fpc_makefile:
	$(FPCMAKE) -w -T$(OS_TARGET) Makefile.fpc
fpc_makefile_sub1:
ifdef TARGET_DIRS
	$(FPCMAKE) -w -T$(OS_TARGET) $(addsuffix /Makefile.fpc,$(TARGET_DIRS))
endif
ifdef TARGET_EXAMPLEDIRS
	$(FPCMAKE) -w -T$(OS_TARGET) $(addsuffix /Makefile.fpc,$(TARGET_EXAMPLEDIRS))
endif
fpc_makefile_sub2: $(addsuffix _makefile_dirs,$(TARGET_DIRS) $(TARGET_EXAMPLEDIRS))
fpc_makefile_dirs: fpc_makefile_sub1 fpc_makefile_sub2
fpc_makefiles: fpc_makefile fpc_makefile_dirs
ifeq ($(FULL_TARGET),i386-linux)
TARGET_DIRS_SRC/SDF=1
TARGET_DIRS_SRC/MEMDS=1
TARGET_DIRS_SRC/SQLDB=1
TARGET_DIRS_SRC/BASE=1
TARGET_DIRS_SRC/DBASE=1
TARGET_DIRS_SRC/SQLITE=1
TARGET_DIRS_SRC/PARADOX=1
TARGET_DIRS_SRC/EXPORT=1
TARGET_DIRS_SRC/DATADICT=1
TARGET_DIRS_SRC/CODEGEN=1
endif
ifeq ($(FULL_TARGET),i386-go32v2)
TARGET_DIRS_SRC/SDF=1
TARGET_DIRS_SRC/MEMDS=1
TARGET_DIRS_SRC/SQLDB=1
TARGET_DIRS_SRC/BASE=1
endif
ifeq ($(FULL_TARGET),i386-win32)
TARGET_DIRS_SRC/SDF=1
TARGET_DIRS_SRC/MEMDS=1
TARGET_DIRS_SRC/SQLDB=1
TARGET_DIRS_SRC/BASE=1
TARGET_DIRS_SRC/DBASE=1
TARGET_DIRS_SRC/PARADOX=1
TARGET_DIRS_SRC/SQLITE=1
TARGET_DIRS_SRC/EXPORT=1
TARGET_DIRS_SRC/DATADICT=1
TARGET_DIRS_SRC/CODEGEN=1
endif
ifeq ($(FULL_TARGET),i386-os2)
TARGET_DIRS_SRC/SDF=1
TARGET_DIRS_SRC/MEMDS=1
TARGET_DIRS_SRC/SQLDB=1
TARGET_DIRS_SRC/BASE=1
endif
ifeq ($(FULL_TARGET),i386-freebsd)
TARGET_DIRS_SRC/SDF=1
TARGET_DIRS_SRC/MEMDS=1
TARGET_DIRS_SRC/SQLDB=1
TARGET_DIRS_SRC/BASE=1
TARGET_DIRS_SRC/DBASE=1
TARGET_DIRS_SRC/SQLITE=1
TARGET_DIRS_SRC/PARADOX=1
TARGET_DIRS_SRC/EXPORT=1
TARGET_DIRS_SRC/DATADICT=1
TARGET_DIRS_SRC/CODEGEN=1
endif
ifeq ($(FULL_TARGET),i386-beos)
TARGET_DIRS_SRC/SDF=1
TARGET_DIRS_SRC/MEMDS=1
TARGET_DIRS_SRC/SQLDB=1
TARGET_DIRS_SRC/BASE=1
TARGET_DIRS_SRC/DBASE=1
TARGET_DIRS_SRC/SQLITE=1
TARGET_DIRS_SRC/PARADOX=1
TARGET_DIRS_SRC/EXPORT=1
TARGET_DIRS_SRC/DATADICT=1
TARGET_DIRS_SRC/CODEGEN=1
endif
ifeq ($(FULL_TARGET),i386-netbsd)
TARGET_DIRS_SRC/SDF=1
TARGET_DIRS_SRC/MEMDS=1
TARGET_DIRS_SRC/SQLDB=1
TARGET_DIRS_SRC/BASE=1
TARGET_DIRS_SRC/DBASE=1
TARGET_DIRS_SRC/SQLITE=1
TARGET_DIRS_SRC/PARADOX=1
endif
ifeq ($(FULL_TARGET),i386-solaris)
TARGET_DIRS_SRC/SDF=1
TARGET_DIRS_SRC/MEMDS=1
TARGET_DIRS_SRC/SQLDB=1
TARGET_DIRS_SRC/BASE=1
TARGET_DIRS_SRC/DBASE=1
TARGET_DIRS_SRC/SQLITE=1
endif
ifeq ($(FULL_TARGET),i386-qnx)
TARGET_DIRS_SRC/SDF=1
TARGET_DIRS_SRC/MEMDS=1
TARGET_DIRS_SRC/SQLDB=1
TARGET_DIRS_SRC/BASE=1
endif
ifeq ($(FULL_TARGET),i386-netware)
TARGET_DIRS_SRC/SDF=1
TARGET_DIRS_SRC/MEMDS=1
TARGET_DIRS_SRC/SQLDB=1
TARGET_DIRS_SRC/BASE=1
endif
ifeq ($(FULL_TARGET),i386-openbsd)
TARGET_DIRS_SRC/SDF=1
TARGET_DIRS_SRC/MEMDS=1
TARGET_DIRS_SRC/SQLDB=1
TARGET_DIRS_SRC/BASE=1
TARGET_DIRS_SRC/DBASE=1
TARGET_DIRS_SRC/SQLITE=1
TARGET_DIRS_SRC/PARADOX=1
endif
ifeq ($(FULL_TARGET),i386-wdosx)
TARGET_DIRS_SRC/SDF=1
TARGET_DIRS_SRC/MEMDS=1
TARGET_DIRS_SRC/SQLDB=1
TARGET_DIRS_SRC/BASE=1
endif
ifeq ($(FULL_TARGET),i386-darwin)
TARGET_DIRS_SRC/SDF=1
TARGET_DIRS_SRC/MEMDS=1
TARGET_DIRS_SRC/SQLDB=1
TARGET_DIRS_SRC/BASE=1
TARGET_DIRS_SRC/DBASE=1
TARGET_DIRS_SRC/SQLITE=1
endif
ifeq ($(FULL_TARGET),i386-emx)
TARGET_DIRS_SRC/SDF=1
TARGET_DIRS_SRC/MEMDS=1
TARGET_DIRS_SRC/SQLDB=1
TARGET_DIRS_SRC/BASE=1
endif
ifeq ($(FULL_TARGET),i386-watcom)
TARGET_DIRS_SRC/SDF=1
TARGET_DIRS_SRC/MEMDS=1
TARGET_DIRS_SRC/SQLDB=1
TARGET_DIRS_SRC/BASE=1
endif
ifeq ($(FULL_TARGET),i386-netwlibc)
TARGET_DIRS_SRC/SDF=1
TARGET_DIRS_SRC/MEMDS=1
TARGET_DIRS_SRC/SQLDB=1
TARGET_DIRS_SRC/BASE=1
endif
ifeq ($(FULL_TARGET),i386-wince)
TARGET_DIRS_SRC/SDF=1
TARGET_DIRS_SRC/MEMDS=1
TARGET_DIRS_SRC/SQLDB=1
TARGET_DIRS_SRC/BASE=1
TARGET_DIRS_SRC/DBASE=1
TARGET_DIRS_SRC/SQLITE=1
TARGET_DIRS_SRC/EXPORT=1
TARGET_DIRS_SRC/DATADICT=1
TARGET_DIRS_SRC/CODEGEN=1
endif
ifeq ($(FULL_TARGET),i386-embedded)
TARGET_DIRS_SRC/SDF=1
TARGET_DIRS_SRC/MEMDS=1
TARGET_DIRS_SRC/SQLDB=1
TARGET_DIRS_SRC/BASE=1
endif
ifeq ($(FULL_TARGET),i386-symbian)
TARGET_DIRS_SRC/SDF=1
TARGET_DIRS_SRC/MEMDS=1
TARGET_DIRS_SRC/SQLDB=1
TARGET_DIRS_SRC/BASE=1
endif
ifeq ($(FULL_TARGET),m68k-linux)
TARGET_DIRS_SRC/SDF=1
TARGET_DIRS_SRC/MEMDS=1
TARGET_DIRS_SRC/SQLDB=1
TARGET_DIRS_SRC/BASE=1
TARGET_DIRS_SRC/DBASE=1
TARGET_DIRS_SRC/SQLITE=1
TARGET_DIRS_SRC/PARADOX=1
TARGET_DIRS_SRC/EXPORT=1
TARGET_DIRS_SRC/DATADICT=1
TARGET_DIRS_SRC/CODEGEN=1
endif
ifeq ($(FULL_TARGET),m68k-freebsd)
TARGET_DIRS_SRC/SDF=1
TARGET_DIRS_SRC/MEMDS=1
TARGET_DIRS_SRC/SQLDB=1
TARGET_DIRS_SRC/BASE=1
TARGET_DIRS_SRC/DBASE=1
TARGET_DIRS_SRC/SQLITE=1
TARGET_DIRS_SRC/PARADOX=1
TARGET_DIRS_SRC/EXPORT=1
TARGET_DIRS_SRC/DATADICT=1
TARGET_DIRS_SRC/CODEGEN=1
endif
ifeq ($(FULL_TARGET),m68k-netbsd)
TARGET_DIRS_SRC/SDF=1
TARGET_DIRS_SRC/MEMDS=1
TARGET_DIRS_SRC/SQLDB=1
TARGET_DIRS_SRC/BASE=1
TARGET_DIRS_SRC/DBASE=1
TARGET_DIRS_SRC/SQLITE=1
TARGET_DIRS_SRC/PARADOX=1
endif
ifeq ($(FULL_TARGET),m68k-amiga)
TARGET_DIRS_SRC/SDF=1
TARGET_DIRS_SRC/MEMDS=1
TARGET_DIRS_SRC/SQLDB=1
TARGET_DIRS_SRC/BASE=1
endif
ifeq ($(FULL_TARGET),m68k-atari)
TARGET_DIRS_SRC/SDF=1
TARGET_DIRS_SRC/MEMDS=1
TARGET_DIRS_SRC/SQLDB=1
TARGET_DIRS_SRC/BASE=1
endif
ifeq ($(FULL_TARGET),m68k-openbsd)
TARGET_DIRS_SRC/SDF=1
TARGET_DIRS_SRC/MEMDS=1
TARGET_DIRS_SRC/SQLDB=1
TARGET_DIRS_SRC/BASE=1
TARGET_DIRS_SRC/DBASE=1
TARGET_DIRS_SRC/SQLITE=1
TARGET_DIRS_SRC/PARADOX=1
endif
ifeq ($(FULL_TARGET),m68k-palmos)
TARGET_DIRS_SRC/SDF=1
TARGET_DIRS_SRC/MEMDS=1
TARGET_DIRS_SRC/SQLDB=1
TARGET_DIRS_SRC/BASE=1
endif
ifeq ($(FULL_TARGET),m68k-embedded)
TARGET_DIRS_SRC/SDF=1
TARGET_DIRS_SRC/MEMDS=1
TARGET_DIRS_SRC/SQLDB=1
TARGET_DIRS_SRC/BASE=1
endif
ifeq ($(FULL_TARGET),powerpc-linux)
TARGET_DIRS_SRC/SDF=1
TARGET_DIRS_SRC/MEMDS=1
TARGET_DIRS_SRC/SQLDB=1
TARGET_DIRS_SRC/BASE=1
TARGET_DIRS_SRC/DBASE=1
TARGET_DIRS_SRC/SQLITE=1
TARGET_DIRS_SRC/PARADOX=1
TARGET_DIRS_SRC/EXPORT=1
TARGET_DIRS_SRC/DATADICT=1
TARGET_DIRS_SRC/CODEGEN=1
endif
ifeq ($(FULL_TARGET),powerpc-netbsd)
TARGET_DIRS_SRC/SDF=1
TARGET_DIRS_SRC/MEMDS=1
TARGET_DIRS_SRC/SQLDB=1
TARGET_DIRS_SRC/BASE=1
TARGET_DIRS_SRC/DBASE=1
TARGET_DIRS_SRC/SQLITE=1
TARGET_DIRS_SRC/PARADOX=1
endif
ifeq ($(FULL_TARGET),powerpc-amiga)
TARGET_DIRS_SRC/SDF=1
TARGET_DIRS_SRC/MEMDS=1
TARGET_DIRS_SRC/SQLDB=1
TARGET_DIRS_SRC/BASE=1
endif
ifeq ($(FULL_TARGET),powerpc-macos)
TARGET_DIRS_SRC/SDF=1
TARGET_DIRS_SRC/MEMDS=1
TARGET_DIRS_SRC/SQLDB=1
TARGET_DIRS_SRC/BASE=1
endif
ifeq ($(FULL_TARGET),powerpc-darwin)
TARGET_DIRS_SRC/SDF=1
TARGET_DIRS_SRC/MEMDS=1
TARGET_DIRS_SRC/SQLDB=1
TARGET_DIRS_SRC/BASE=1
TARGET_DIRS_SRC/DBASE=1
TARGET_DIRS_SRC/SQLITE=1
endif
ifeq ($(FULL_TARGET),powerpc-morphos)
TARGET_DIRS_SRC/SDF=1
TARGET_DIRS_SRC/MEMDS=1
TARGET_DIRS_SRC/SQLDB=1
TARGET_DIRS_SRC/BASE=1
endif
ifeq ($(FULL_TARGET),powerpc-embedded)
TARGET_DIRS_SRC/SDF=1
TARGET_DIRS_SRC/MEMDS=1
TARGET_DIRS_SRC/SQLDB=1
TARGET_DIRS_SRC/BASE=1
endif
ifeq ($(FULL_TARGET),sparc-linux)
TARGET_DIRS_SRC/SDF=1
TARGET_DIRS_SRC/MEMDS=1
TARGET_DIRS_SRC/SQLDB=1
TARGET_DIRS_SRC/BASE=1
TARGET_DIRS_SRC/DBASE=1
TARGET_DIRS_SRC/SQLITE=1
TARGET_DIRS_SRC/PARADOX=1
TARGET_DIRS_SRC/EXPORT=1
TARGET_DIRS_SRC/DATADICT=1
TARGET_DIRS_SRC/CODEGEN=1
endif
ifeq ($(FULL_TARGET),sparc-netbsd)
TARGET_DIRS_SRC/SDF=1
TARGET_DIRS_SRC/MEMDS=1
TARGET_DIRS_SRC/SQLDB=1
TARGET_DIRS_SRC/BASE=1
TARGET_DIRS_SRC/DBASE=1
TARGET_DIRS_SRC/SQLITE=1
TARGET_DIRS_SRC/PARADOX=1
endif
ifeq ($(FULL_TARGET),sparc-solaris)
TARGET_DIRS_SRC/SDF=1
TARGET_DIRS_SRC/MEMDS=1
TARGET_DIRS_SRC/SQLDB=1
TARGET_DIRS_SRC/BASE=1
TARGET_DIRS_SRC/DBASE=1
TARGET_DIRS_SRC/SQLITE=1
endif
ifeq ($(FULL_TARGET),sparc-embedded)
TARGET_DIRS_SRC/SDF=1
TARGET_DIRS_SRC/MEMDS=1
TARGET_DIRS_SRC/SQLDB=1
TARGET_DIRS_SRC/BASE=1
endif
ifeq ($(FULL_TARGET),x86_64-linux)
TARGET_DIRS_SRC/SDF=1
TARGET_DIRS_SRC/MEMDS=1
TARGET_DIRS_SRC/SQLDB=1
TARGET_DIRS_SRC/BASE=1
TARGET_DIRS_SRC/DBASE=1
TARGET_DIRS_SRC/SQLITE=1
TARGET_DIRS_SRC/PARADOX=1
TARGET_DIRS_SRC/EXPORT=1
TARGET_DIRS_SRC/DATADICT=1
TARGET_DIRS_SRC/CODEGEN=1
endif
ifeq ($(FULL_TARGET),x86_64-freebsd)
TARGET_DIRS_SRC/SDF=1
TARGET_DIRS_SRC/MEMDS=1
TARGET_DIRS_SRC/SQLDB=1
TARGET_DIRS_SRC/BASE=1
TARGET_DIRS_SRC/DBASE=1
TARGET_DIRS_SRC/SQLITE=1
TARGET_DIRS_SRC/PARADOX=1
TARGET_DIRS_SRC/EXPORT=1
TARGET_DIRS_SRC/DATADICT=1
TARGET_DIRS_SRC/CODEGEN=1
endif
ifeq ($(FULL_TARGET),x86_64-darwin)
TARGET_DIRS_SRC/SDF=1
TARGET_DIRS_SRC/MEMDS=1
TARGET_DIRS_SRC/SQLDB=1
TARGET_DIRS_SRC/BASE=1
TARGET_DIRS_SRC/DBASE=1
TARGET_DIRS_SRC/SQLITE=1
endif
ifeq ($(FULL_TARGET),x86_64-win64)
TARGET_DIRS_SRC/SDF=1
TARGET_DIRS_SRC/MEMDS=1
TARGET_DIRS_SRC/SQLDB=1
TARGET_DIRS_SRC/BASE=1
TARGET_DIRS_SRC/DBASE=1
TARGET_DIRS_SRC/EXPORT=1
TARGET_DIRS_SRC/DATADICT=1
TARGET_DIRS_SRC/CODEGEN=1
endif
ifeq ($(FULL_TARGET),x86_64-embedded)
TARGET_DIRS_SRC/SDF=1
TARGET_DIRS_SRC/MEMDS=1
TARGET_DIRS_SRC/SQLDB=1
TARGET_DIRS_SRC/BASE=1
endif
ifeq ($(FULL_TARGET),arm-linux)
TARGET_DIRS_SRC/SDF=1
TARGET_DIRS_SRC/MEMDS=1
TARGET_DIRS_SRC/SQLDB=1
TARGET_DIRS_SRC/BASE=1
TARGET_DIRS_SRC/DBASE=1
TARGET_DIRS_SRC/SQLITE=1
TARGET_DIRS_SRC/PARADOX=1
TARGET_DIRS_SRC/EXPORT=1
TARGET_DIRS_SRC/DATADICT=1
TARGET_DIRS_SRC/CODEGEN=1
endif
ifeq ($(FULL_TARGET),arm-palmos)
TARGET_DIRS_SRC/SDF=1
TARGET_DIRS_SRC/MEMDS=1
TARGET_DIRS_SRC/SQLDB=1
TARGET_DIRS_SRC/BASE=1
endif
ifeq ($(FULL_TARGET),arm-darwin)
TARGET_DIRS_SRC/SDF=1
TARGET_DIRS_SRC/MEMDS=1
TARGET_DIRS_SRC/SQLDB=1
TARGET_DIRS_SRC/BASE=1
TARGET_DIRS_SRC/DBASE=1
TARGET_DIRS_SRC/SQLITE=1
endif
ifeq ($(FULL_TARGET),arm-wince)
TARGET_DIRS_SRC/SDF=1
TARGET_DIRS_SRC/MEMDS=1
TARGET_DIRS_SRC/SQLDB=1
TARGET_DIRS_SRC/BASE=1
TARGET_DIRS_SRC/DBASE=1
TARGET_DIRS_SRC/SQLITE=1
TARGET_DIRS_SRC/EXPORT=1
TARGET_DIRS_SRC/DATADICT=1
TARGET_DIRS_SRC/CODEGEN=1
endif
ifeq ($(FULL_TARGET),arm-gba)
TARGET_DIRS_SRC/SDF=1
TARGET_DIRS_SRC/MEMDS=1
TARGET_DIRS_SRC/SQLDB=1
TARGET_DIRS_SRC/BASE=1
endif
ifeq ($(FULL_TARGET),arm-nds)
TARGET_DIRS_SRC/SDF=1
TARGET_DIRS_SRC/MEMDS=1
TARGET_DIRS_SRC/SQLDB=1
TARGET_DIRS_SRC/BASE=1
endif
ifeq ($(FULL_TARGET),arm-embedded)
TARGET_DIRS_SRC/SDF=1
TARGET_DIRS_SRC/MEMDS=1
TARGET_DIRS_SRC/SQLDB=1
TARGET_DIRS_SRC/BASE=1
endif
ifeq ($(FULL_TARGET),arm-symbian)
TARGET_DIRS_SRC/SDF=1
TARGET_DIRS_SRC/MEMDS=1
TARGET_DIRS_SRC/SQLDB=1
TARGET_DIRS_SRC/BASE=1
endif
ifeq ($(FULL_TARGET),powerpc64-linux)
TARGET_DIRS_SRC/SDF=1
TARGET_DIRS_SRC/MEMDS=1
TARGET_DIRS_SRC/SQLDB=1
TARGET_DIRS_SRC/BASE=1
TARGET_DIRS_SRC/DBASE=1
TARGET_DIRS_SRC/SQLITE=1
TARGET_DIRS_SRC/PARADOX=1
TARGET_DIRS_SRC/EXPORT=1
TARGET_DIRS_SRC/DATADICT=1
TARGET_DIRS_SRC/CODEGEN=1
endif
ifeq ($(FULL_TARGET),powerpc64-darwin)
TARGET_DIRS_SRC/SDF=1
TARGET_DIRS_SRC/MEMDS=1
TARGET_DIRS_SRC/SQLDB=1
TARGET_DIRS_SRC/BASE=1
TARGET_DIRS_SRC/DBASE=1
TARGET_DIRS_SRC/SQLITE=1
endif
ifeq ($(FULL_TARGET),powerpc64-embedded)
TARGET_DIRS_SRC/SDF=1
TARGET_DIRS_SRC/MEMDS=1
TARGET_DIRS_SRC/SQLDB=1
TARGET_DIRS_SRC/BASE=1
endif
ifeq ($(FULL_TARGET),avr-embedded)
TARGET_DIRS_SRC/SDF=1
TARGET_DIRS_SRC/MEMDS=1
TARGET_DIRS_SRC/SQLDB=1
TARGET_DIRS_SRC/BASE=1
endif
ifeq ($(FULL_TARGET),armeb-linux)
TARGET_DIRS_SRC/SDF=1
TARGET_DIRS_SRC/MEMDS=1
TARGET_DIRS_SRC/SQLDB=1
TARGET_DIRS_SRC/BASE=1
TARGET_DIRS_SRC/DBASE=1
TARGET_DIRS_SRC/SQLITE=1
TARGET_DIRS_SRC/PARADOX=1
TARGET_DIRS_SRC/EXPORT=1
TARGET_DIRS_SRC/DATADICT=1
TARGET_DIRS_SRC/CODEGEN=1
endif
ifeq ($(FULL_TARGET),armeb-embedded)
TARGET_DIRS_SRC/SDF=1
TARGET_DIRS_SRC/MEMDS=1
TARGET_DIRS_SRC/SQLDB=1
TARGET_DIRS_SRC/BASE=1
endif
ifdef TARGET_DIRS_SRC/SDF
src/sdf_all:
	$(MAKE) -C src/sdf all
src/sdf_debug:
	$(MAKE) -C src/sdf debug
src/sdf_smart:
	$(MAKE) -C src/sdf smart
src/sdf_release:
	$(MAKE) -C src/sdf release
src/sdf_units:
	$(MAKE) -C src/sdf units
src/sdf_examples:
	$(MAKE) -C src/sdf examples
src/sdf_shared:
	$(MAKE) -C src/sdf shared
src/sdf_install:
	$(MAKE) -C src/sdf install
src/sdf_sourceinstall:
	$(MAKE) -C src/sdf sourceinstall
src/sdf_exampleinstall:
	$(MAKE) -C src/sdf exampleinstall
src/sdf_distinstall:
	$(MAKE) -C src/sdf distinstall
src/sdf_zipinstall:
	$(MAKE) -C src/sdf zipinstall
src/sdf_zipsourceinstall:
	$(MAKE) -C src/sdf zipsourceinstall
src/sdf_zipexampleinstall:
	$(MAKE) -C src/sdf zipexampleinstall
src/sdf_zipdistinstall:
	$(MAKE) -C src/sdf zipdistinstall
src/sdf_clean:
	$(MAKE) -C src/sdf clean
src/sdf_distclean:
	$(MAKE) -C src/sdf distclean
src/sdf_cleanall:
	$(MAKE) -C src/sdf cleanall
src/sdf_info:
	$(MAKE) -C src/sdf info
src/sdf_makefiles:
	$(MAKE) -C src/sdf makefiles
src/sdf:
	$(MAKE) -C src/sdf all
.PHONY: src/sdf_all src/sdf_debug src/sdf_smart src/sdf_release src/sdf_units src/sdf_examples src/sdf_shared src/sdf_install src/sdf_sourceinstall src/sdf_exampleinstall src/sdf_distinstall src/sdf_zipinstall src/sdf_zipsourceinstall src/sdf_zipexampleinstall src/sdf_zipdistinstall src/sdf_clean src/sdf_distclean src/sdf_cleanall src/sdf_info src/sdf_makefiles src/sdf
endif
ifdef TARGET_DIRS_SRC/MEMDS
src/memds_all:
	$(MAKE) -C src/memds all
src/memds_debug:
	$(MAKE) -C src/memds debug
src/memds_smart:
	$(MAKE) -C src/memds smart
src/memds_release:
	$(MAKE) -C src/memds release
src/memds_units:
	$(MAKE) -C src/memds units
src/memds_examples:
	$(MAKE) -C src/memds examples
src/memds_shared:
	$(MAKE) -C src/memds shared
src/memds_install:
	$(MAKE) -C src/memds install
src/memds_sourceinstall:
	$(MAKE) -C src/memds sourceinstall
src/memds_exampleinstall:
	$(MAKE) -C src/memds exampleinstall
src/memds_distinstall:
	$(MAKE) -C src/memds distinstall
src/memds_zipinstall:
	$(MAKE) -C src/memds zipinstall
src/memds_zipsourceinstall:
	$(MAKE) -C src/memds zipsourceinstall
src/memds_zipexampleinstall:
	$(MAKE) -C src/memds zipexampleinstall
src/memds_zipdistinstall:
	$(MAKE) -C src/memds zipdistinstall
src/memds_clean:
	$(MAKE) -C src/memds clean
src/memds_distclean:
	$(MAKE) -C src/memds distclean
src/memds_cleanall:
	$(MAKE) -C src/memds cleanall
src/memds_info:
	$(MAKE) -C src/memds info
src/memds_makefiles:
	$(MAKE) -C src/memds makefiles
src/memds:
	$(MAKE) -C src/memds all
.PHONY: src/memds_all src/memds_debug src/memds_smart src/memds_release src/memds_units src/memds_examples src/memds_shared src/memds_install src/memds_sourceinstall src/memds_exampleinstall src/memds_distinstall src/memds_zipinstall src/memds_zipsourceinstall src/memds_zipexampleinstall src/memds_zipdistinstall src/memds_clean src/memds_distclean src/memds_cleanall src/memds_info src/memds_makefiles src/memds
endif
ifdef TARGET_DIRS_SRC/SQLDB
src/sqldb_all:
	$(MAKE) -C src/sqldb all
src/sqldb_debug:
	$(MAKE) -C src/sqldb debug
src/sqldb_smart:
	$(MAKE) -C src/sqldb smart
src/sqldb_release:
	$(MAKE) -C src/sqldb release
src/sqldb_units:
	$(MAKE) -C src/sqldb units
src/sqldb_examples:
	$(MAKE) -C src/sqldb examples
src/sqldb_shared:
	$(MAKE) -C src/sqldb shared
src/sqldb_install:
	$(MAKE) -C src/sqldb install
src/sqldb_sourceinstall:
	$(MAKE) -C src/sqldb sourceinstall
src/sqldb_exampleinstall:
	$(MAKE) -C src/sqldb exampleinstall
src/sqldb_distinstall:
	$(MAKE) -C src/sqldb distinstall
src/sqldb_zipinstall:
	$(MAKE) -C src/sqldb zipinstall
src/sqldb_zipsourceinstall:
	$(MAKE) -C src/sqldb zipsourceinstall
src/sqldb_zipexampleinstall:
	$(MAKE) -C src/sqldb zipexampleinstall
src/sqldb_zipdistinstall:
	$(MAKE) -C src/sqldb zipdistinstall
src/sqldb_clean:
	$(MAKE) -C src/sqldb clean
src/sqldb_distclean:
	$(MAKE) -C src/sqldb distclean
src/sqldb_cleanall:
	$(MAKE) -C src/sqldb cleanall
src/sqldb_info:
	$(MAKE) -C src/sqldb info
src/sqldb_makefiles:
	$(MAKE) -C src/sqldb makefiles
src/sqldb:
	$(MAKE) -C src/sqldb all
.PHONY: src/sqldb_all src/sqldb_debug src/sqldb_smart src/sqldb_release src/sqldb_units src/sqldb_examples src/sqldb_shared src/sqldb_install src/sqldb_sourceinstall src/sqldb_exampleinstall src/sqldb_distinstall src/sqldb_zipinstall src/sqldb_zipsourceinstall src/sqldb_zipexampleinstall src/sqldb_zipdistinstall src/sqldb_clean src/sqldb_distclean src/sqldb_cleanall src/sqldb_info src/sqldb_makefiles src/sqldb
endif
ifdef TARGET_DIRS_SRC/BASE
src/base_all:
	$(MAKE) -C src/base all
src/base_debug:
	$(MAKE) -C src/base debug
src/base_smart:
	$(MAKE) -C src/base smart
src/base_release:
	$(MAKE) -C src/base release
src/base_units:
	$(MAKE) -C src/base units
src/base_examples:
	$(MAKE) -C src/base examples
src/base_shared:
	$(MAKE) -C src/base shared
src/base_install:
	$(MAKE) -C src/base install
src/base_sourceinstall:
	$(MAKE) -C src/base sourceinstall
src/base_exampleinstall:
	$(MAKE) -C src/base exampleinstall
src/base_distinstall:
	$(MAKE) -C src/base distinstall
src/base_zipinstall:
	$(MAKE) -C src/base zipinstall
src/base_zipsourceinstall:
	$(MAKE) -C src/base zipsourceinstall
src/base_zipexampleinstall:
	$(MAKE) -C src/base zipexampleinstall
src/base_zipdistinstall:
	$(MAKE) -C src/base zipdistinstall
src/base_clean:
	$(MAKE) -C src/base clean
src/base_distclean:
	$(MAKE) -C src/base distclean
src/base_cleanall:
	$(MAKE) -C src/base cleanall
src/base_info:
	$(MAKE) -C src/base info
src/base_makefiles:
	$(MAKE) -C src/base makefiles
src/base:
	$(MAKE) -C src/base all
.PHONY: src/base_all src/base_debug src/base_smart src/base_release src/base_units src/base_examples src/base_shared src/base_install src/base_sourceinstall src/base_exampleinstall src/base_distinstall src/base_zipinstall src/base_zipsourceinstall src/base_zipexampleinstall src/base_zipdistinstall src/base_clean src/base_distclean src/base_cleanall src/base_info src/base_makefiles src/base
endif
ifdef TARGET_DIRS_SRC/DBASE
src/dbase_all:
	$(MAKE) -C src/dbase all
src/dbase_debug:
	$(MAKE) -C src/dbase debug
src/dbase_smart:
	$(MAKE) -C src/dbase smart
src/dbase_release:
	$(MAKE) -C src/dbase release
src/dbase_units:
	$(MAKE) -C src/dbase units
src/dbase_examples:
	$(MAKE) -C src/dbase examples
src/dbase_shared:
	$(MAKE) -C src/dbase shared
src/dbase_install:
	$(MAKE) -C src/dbase install
src/dbase_sourceinstall:
	$(MAKE) -C src/dbase sourceinstall
src/dbase_exampleinstall:
	$(MAKE) -C src/dbase exampleinstall
src/dbase_distinstall:
	$(MAKE) -C src/dbase distinstall
src/dbase_zipinstall:
	$(MAKE) -C src/dbase zipinstall
src/dbase_zipsourceinstall:
	$(MAKE) -C src/dbase zipsourceinstall
src/dbase_zipexampleinstall:
	$(MAKE) -C src/dbase zipexampleinstall
src/dbase_zipdistinstall:
	$(MAKE) -C src/dbase zipdistinstall
src/dbase_clean:
	$(MAKE) -C src/dbase clean
src/dbase_distclean:
	$(MAKE) -C src/dbase distclean
src/dbase_cleanall:
	$(MAKE) -C src/dbase cleanall
src/dbase_info:
	$(MAKE) -C src/dbase info
src/dbase_makefiles:
	$(MAKE) -C src/dbase makefiles
src/dbase:
	$(MAKE) -C src/dbase all
.PHONY: src/dbase_all src/dbase_debug src/dbase_smart src/dbase_release src/dbase_units src/dbase_examples src/dbase_shared src/dbase_install src/dbase_sourceinstall src/dbase_exampleinstall src/dbase_distinstall src/dbase_zipinstall src/dbase_zipsourceinstall src/dbase_zipexampleinstall src/dbase_zipdistinstall src/dbase_clean src/dbase_distclean src/dbase_cleanall src/dbase_info src/dbase_makefiles src/dbase
endif
ifdef TARGET_DIRS_SRC/SQLITE
src/sqlite_all:
	$(MAKE) -C src/sqlite all
src/sqlite_debug:
	$(MAKE) -C src/sqlite debug
src/sqlite_smart:
	$(MAKE) -C src/sqlite smart
src/sqlite_release:
	$(MAKE) -C src/sqlite release
src/sqlite_units:
	$(MAKE) -C src/sqlite units
src/sqlite_examples:
	$(MAKE) -C src/sqlite examples
src/sqlite_shared:
	$(MAKE) -C src/sqlite shared
src/sqlite_install:
	$(MAKE) -C src/sqlite install
src/sqlite_sourceinstall:
	$(MAKE) -C src/sqlite sourceinstall
src/sqlite_exampleinstall:
	$(MAKE) -C src/sqlite exampleinstall
src/sqlite_distinstall:
	$(MAKE) -C src/sqlite distinstall
src/sqlite_zipinstall:
	$(MAKE) -C src/sqlite zipinstall
src/sqlite_zipsourceinstall:
	$(MAKE) -C src/sqlite zipsourceinstall
src/sqlite_zipexampleinstall:
	$(MAKE) -C src/sqlite zipexampleinstall
src/sqlite_zipdistinstall:
	$(MAKE) -C src/sqlite zipdistinstall
src/sqlite_clean:
	$(MAKE) -C src/sqlite clean
src/sqlite_distclean:
	$(MAKE) -C src/sqlite distclean
src/sqlite_cleanall:
	$(MAKE) -C src/sqlite cleanall
src/sqlite_info:
	$(MAKE) -C src/sqlite info
src/sqlite_makefiles:
	$(MAKE) -C src/sqlite makefiles
src/sqlite:
	$(MAKE) -C src/sqlite all
.PHONY: src/sqlite_all src/sqlite_debug src/sqlite_smart src/sqlite_release src/sqlite_units src/sqlite_examples src/sqlite_shared src/sqlite_install src/sqlite_sourceinstall src/sqlite_exampleinstall src/sqlite_distinstall src/sqlite_zipinstall src/sqlite_zipsourceinstall src/sqlite_zipexampleinstall src/sqlite_zipdistinstall src/sqlite_clean src/sqlite_distclean src/sqlite_cleanall src/sqlite_info src/sqlite_makefiles src/sqlite
endif
ifdef TARGET_DIRS_SRC/PARADOX
src/paradox_all:
	$(MAKE) -C src/paradox all
src/paradox_debug:
	$(MAKE) -C src/paradox debug
src/paradox_smart:
	$(MAKE) -C src/paradox smart
src/paradox_release:
	$(MAKE) -C src/paradox release
src/paradox_units:
	$(MAKE) -C src/paradox units
src/paradox_examples:
	$(MAKE) -C src/paradox examples
src/paradox_shared:
	$(MAKE) -C src/paradox shared
src/paradox_install:
	$(MAKE) -C src/paradox install
src/paradox_sourceinstall:
	$(MAKE) -C src/paradox sourceinstall
src/paradox_exampleinstall:
	$(MAKE) -C src/paradox exampleinstall
src/paradox_distinstall:
	$(MAKE) -C src/paradox distinstall
src/paradox_zipinstall:
	$(MAKE) -C src/paradox zipinstall
src/paradox_zipsourceinstall:
	$(MAKE) -C src/paradox zipsourceinstall
src/paradox_zipexampleinstall:
	$(MAKE) -C src/paradox zipexampleinstall
src/paradox_zipdistinstall:
	$(MAKE) -C src/paradox zipdistinstall
src/paradox_clean:
	$(MAKE) -C src/paradox clean
src/paradox_distclean:
	$(MAKE) -C src/paradox distclean
src/paradox_cleanall:
	$(MAKE) -C src/paradox cleanall
src/paradox_info:
	$(MAKE) -C src/paradox info
src/paradox_makefiles:
	$(MAKE) -C src/paradox makefiles
src/paradox:
	$(MAKE) -C src/paradox all
.PHONY: src/paradox_all src/paradox_debug src/paradox_smart src/paradox_release src/paradox_units src/paradox_examples src/paradox_shared src/paradox_install src/paradox_sourceinstall src/paradox_exampleinstall src/paradox_distinstall src/paradox_zipinstall src/paradox_zipsourceinstall src/paradox_zipexampleinstall src/paradox_zipdistinstall src/paradox_clean src/paradox_distclean src/paradox_cleanall src/paradox_info src/paradox_makefiles src/paradox
endif
ifdef TARGET_DIRS_SRC/EXPORT
src/export_all:
	$(MAKE) -C src/export all
src/export_debug:
	$(MAKE) -C src/export debug
src/export_smart:
	$(MAKE) -C src/export smart
src/export_release:
	$(MAKE) -C src/export release
src/export_units:
	$(MAKE) -C src/export units
src/export_examples:
	$(MAKE) -C src/export examples
src/export_shared:
	$(MAKE) -C src/export shared
src/export_install:
	$(MAKE) -C src/export install
src/export_sourceinstall:
	$(MAKE) -C src/export sourceinstall
src/export_exampleinstall:
	$(MAKE) -C src/export exampleinstall
src/export_distinstall:
	$(MAKE) -C src/export distinstall
src/export_zipinstall:
	$(MAKE) -C src/export zipinstall
src/export_zipsourceinstall:
	$(MAKE) -C src/export zipsourceinstall
src/export_zipexampleinstall:
	$(MAKE) -C src/export zipexampleinstall
src/export_zipdistinstall:
	$(MAKE) -C src/export zipdistinstall
src/export_clean:
	$(MAKE) -C src/export clean
src/export_distclean:
	$(MAKE) -C src/export distclean
src/export_cleanall:
	$(MAKE) -C src/export cleanall
src/export_info:
	$(MAKE) -C src/export info
src/export_makefiles:
	$(MAKE) -C src/export makefiles
src/export:
	$(MAKE) -C src/export all
.PHONY: src/export_all src/export_debug src/export_smart src/export_release src/export_units src/export_examples src/export_shared src/export_install src/export_sourceinstall src/export_exampleinstall src/export_distinstall src/export_zipinstall src/export_zipsourceinstall src/export_zipexampleinstall src/export_zipdistinstall src/export_clean src/export_distclean src/export_cleanall src/export_info src/export_makefiles src/export
endif
ifdef TARGET_DIRS_SRC/DATADICT
src/datadict_all:
	$(MAKE) -C src/datadict all
src/datadict_debug:
	$(MAKE) -C src/datadict debug
src/datadict_smart:
	$(MAKE) -C src/datadict smart
src/datadict_release:
	$(MAKE) -C src/datadict release
src/datadict_units:
	$(MAKE) -C src/datadict units
src/datadict_examples:
	$(MAKE) -C src/datadict examples
src/datadict_shared:
	$(MAKE) -C src/datadict shared
src/datadict_install:
	$(MAKE) -C src/datadict install
src/datadict_sourceinstall:
	$(MAKE) -C src/datadict sourceinstall
src/datadict_exampleinstall:
	$(MAKE) -C src/datadict exampleinstall
src/datadict_distinstall:
	$(MAKE) -C src/datadict distinstall
src/datadict_zipinstall:
	$(MAKE) -C src/datadict zipinstall
src/datadict_zipsourceinstall:
	$(MAKE) -C src/datadict zipsourceinstall
src/datadict_zipexampleinstall:
	$(MAKE) -C src/datadict zipexampleinstall
src/datadict_zipdistinstall:
	$(MAKE) -C src/datadict zipdistinstall
src/datadict_clean:
	$(MAKE) -C src/datadict clean
src/datadict_distclean:
	$(MAKE) -C src/datadict distclean
src/datadict_cleanall:
	$(MAKE) -C src/datadict cleanall
src/datadict_info:
	$(MAKE) -C src/datadict info
src/datadict_makefiles:
	$(MAKE) -C src/datadict makefiles
src/datadict:
	$(MAKE) -C src/datadict all
.PHONY: src/datadict_all src/datadict_debug src/datadict_smart src/datadict_release src/datadict_units src/datadict_examples src/datadict_shared src/datadict_install src/datadict_sourceinstall src/datadict_exampleinstall src/datadict_distinstall src/datadict_zipinstall src/datadict_zipsourceinstall src/datadict_zipexampleinstall src/datadict_zipdistinstall src/datadict_clean src/datadict_distclean src/datadict_cleanall src/datadict_info src/datadict_makefiles src/datadict
endif
ifdef TARGET_DIRS_SRC/CODEGEN
src/codegen_all:
	$(MAKE) -C src/codegen all
src/codegen_debug:
	$(MAKE) -C src/codegen debug
src/codegen_smart:
	$(MAKE) -C src/codegen smart
src/codegen_release:
	$(MAKE) -C src/codegen release
src/codegen_units:
	$(MAKE) -C src/codegen units
src/codegen_examples:
	$(MAKE) -C src/codegen examples
src/codegen_shared:
	$(MAKE) -C src/codegen shared
src/codegen_install:
	$(MAKE) -C src/codegen install
src/codegen_sourceinstall:
	$(MAKE) -C src/codegen sourceinstall
src/codegen_exampleinstall:
	$(MAKE) -C src/codegen exampleinstall
src/codegen_distinstall:
	$(MAKE) -C src/codegen distinstall
src/codegen_zipinstall:
	$(MAKE) -C src/codegen zipinstall
src/codegen_zipsourceinstall:
	$(MAKE) -C src/codegen zipsourceinstall
src/codegen_zipexampleinstall:
	$(MAKE) -C src/codegen zipexampleinstall
src/codegen_zipdistinstall:
	$(MAKE) -C src/codegen zipdistinstall
src/codegen_clean:
	$(MAKE) -C src/codegen clean
src/codegen_distclean:
	$(MAKE) -C src/codegen distclean
src/codegen_cleanall:
	$(MAKE) -C src/codegen cleanall
src/codegen_info:
	$(MAKE) -C src/codegen info
src/codegen_makefiles:
	$(MAKE) -C src/codegen makefiles
src/codegen:
	$(MAKE) -C src/codegen all
.PHONY: src/codegen_all src/codegen_debug src/codegen_smart src/codegen_release src/codegen_units src/codegen_examples src/codegen_shared src/codegen_install src/codegen_sourceinstall src/codegen_exampleinstall src/codegen_distinstall src/codegen_zipinstall src/codegen_zipsourceinstall src/codegen_zipexampleinstall src/codegen_zipdistinstall src/codegen_clean src/codegen_distclean src/codegen_cleanall src/codegen_info src/codegen_makefiles src/codegen
endif
all: $(addsuffix _all,$(TARGET_DIRS))
debug: $(addsuffix _debug,$(TARGET_DIRS))
smart: $(addsuffix _smart,$(TARGET_DIRS))
release: $(addsuffix _release,$(TARGET_DIRS))
units: $(addsuffix _units,$(TARGET_DIRS))
examples: $(addsuffix _examples,$(TARGET_DIRS))
shared: $(addsuffix _shared,$(TARGET_DIRS))
install: fpc_install $(addsuffix _install,$(TARGET_DIRS))
sourceinstall: fpc_sourceinstall
exampleinstall: fpc_exampleinstall $(addsuffix _exampleinstall,$(TARGET_DIRS))
distinstall: fpc_distinstall
zipinstall: fpc_zipinstall
zipsourceinstall: fpc_zipsourceinstall
zipexampleinstall: fpc_zipexampleinstall $(addsuffix _zipexampleinstall,$(TARGET_DIRS))
zipdistinstall: fpc_zipdistinstall
clean: $(addsuffix _clean,$(TARGET_DIRS))
distclean: $(addsuffix _distclean,$(TARGET_DIRS))
cleanall: $(addsuffix _cleanall,$(TARGET_DIRS))
info: fpc_info
makefiles: fpc_makefiles
.PHONY: all debug smart release units examples shared install sourceinstall exampleinstall distinstall zipinstall zipsourceinstall zipexampleinstall zipdistinstall clean distclean cleanall info makefiles
ifneq ($(wildcard fpcmake.loc),)
include fpcmake.loc
endif
.NOTPARALLEL:
src/export_all: src/base_all src/dbase_all
src/export_debug: src/base_debug src/dbase_debug
src/export_smart: src/base_smart src/dbase_smart
src/export_release: src/base_release src/dbase_release
src/export_shared: src/base_shared src/dbase_shared
src/sdf_all: src/base_all
src/sdf_debug: src/base_debug
src/sdf_smart: src/base_smart
src/sdf_release: src/base_release
src/sdf_shared: src/base_shared
src/dbase_all: src/base_all
src/dbase_debug: src/base_debug
src/dbase_smart: src/base_smart
src/dbase_release: src/base_release
src/dbase_shared: src/base_shared
