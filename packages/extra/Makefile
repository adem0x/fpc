#
# Don't edit, this file is generated by FPCMake Version 2.0.0 [2006/01/11]
#
default: all
MAKEFILETARGETS=i386-linux i386-go32v2 i386-win32 i386-os2 i386-freebsd i386-beos i386-netbsd i386-solaris i386-qnx i386-netware i386-openbsd i386-wdosx i386-emx i386-watcom i386-netwlibc i386-wince m68k-linux m68k-freebsd m68k-netbsd m68k-amiga m68k-atari m68k-openbsd m68k-palmos powerpc-linux powerpc-netbsd powerpc-macos powerpc-darwin powerpc-morphos sparc-linux sparc-netbsd sparc-solaris x86_64-linux x86_64-freebsd x86_64-win64 arm-linux arm-wince powerpc64-linux
BSDs = freebsd netbsd openbsd darwin
UNIXs = linux $(BSDs) solaris qnx
LIMIT83fs = go32v2 os2 emx watcom
FORCE:
.PHONY: FORCE
override PATH:=$(patsubst %/,%,$(subst \,/,$(PATH)))
ifneq ($(findstring darwin,$(OSTYPE)),)
inUnix=1 #darwin
SEARCHPATH:=$(filter-out .,$(subst :, ,$(PATH)))
else
ifeq ($(findstring ;,$(PATH)),)
inUnix=1
SEARCHPATH:=$(filter-out .,$(subst :, ,$(PATH)))
else
SEARCHPATH:=$(subst ;, ,$(PATH))
endif
endif
SEARCHPATH+=$(patsubst %/,%,$(subst \,/,$(dir $(MAKE))))
PWD:=$(strip $(wildcard $(addsuffix /pwd.exe,$(SEARCHPATH))))
ifeq ($(PWD),)
PWD:=$(strip $(wildcard $(addsuffix /pwd,$(SEARCHPATH))))
ifeq ($(PWD),)
$(error You need the GNU utils package to use this Makefile)
else
PWD:=$(firstword $(PWD))
SRCEXEEXT=
endif
else
PWD:=$(firstword $(PWD))
SRCEXEEXT=.exe
endif
ifndef inUnix
ifeq ($(OS),Windows_NT)
inWinNT=1
else
ifdef OS2_SHELL
inOS2=1
endif
endif
else
ifneq ($(findstring cygdrive,$(PATH)),)
inCygWin=1
endif
endif
ifdef inUnix
SRCBATCHEXT=.sh
else
ifdef inOS2
SRCBATCHEXT=.cmd
else
SRCBATCHEXT=.bat
endif
endif
ifdef inUnix
PATHSEP=/
else
PATHSEP:=$(subst /,\,/)
ifdef inCygWin
PATHSEP=/
endif
endif
ifdef PWD
BASEDIR:=$(subst \,/,$(shell $(PWD)))
ifdef inCygWin
ifneq ($(findstring /cygdrive/,$(BASEDIR)),)
BASENODIR:=$(patsubst /cygdrive%,%,$(BASEDIR))
BASEDRIVE:=$(firstword $(subst /, ,$(BASENODIR)))
BASEDIR:=$(subst /cygdrive/$(BASEDRIVE)/,$(BASEDRIVE):/,$(BASEDIR))
endif
endif
else
BASEDIR=.
endif
ifdef inOS2
ifndef ECHO
ECHO:=$(strip $(wildcard $(addsuffix /gecho$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(ECHO),)
ECHO:=$(strip $(wildcard $(addsuffix /echo$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(ECHO),)
ECHO=echo
else
ECHO:=$(firstword $(ECHO))
endif
else
ECHO:=$(firstword $(ECHO))
endif
endif
export ECHO
endif
override DEFAULT_FPCDIR=../..
ifndef FPC
ifdef PP
FPC=$(PP)
endif
endif
ifndef FPC
FPCPROG:=$(strip $(wildcard $(addsuffix /fpc$(SRCEXEEXT),$(SEARCHPATH))))
ifneq ($(FPCPROG),)
FPCPROG:=$(firstword $(FPCPROG))
FPC:=$(shell $(FPCPROG) -PB)
ifneq ($(findstring Error,$(FPC)),)
override FPC=$(firstword $(strip $(wildcard $(addsuffix /ppc386$(SRCEXEEXT),$(SEARCHPATH)))))
endif
else
override FPC=$(firstword $(strip $(wildcard $(addsuffix /ppc386$(SRCEXEEXT),$(SEARCHPATH)))))
endif
endif
override FPC:=$(subst $(SRCEXEEXT),,$(FPC))
override FPC:=$(subst \,/,$(FPC))$(SRCEXEEXT)
FOUNDFPC:=$(strip $(wildcard $(FPC)))
ifeq ($(FOUNDFPC),)
FOUNDFPC=$(strip $(wildcard $(addsuffix /$(FPC),$(SEARCHPATH))))
ifeq ($(FOUNDFPC),)
$(error Compiler $(FPC) not found)
endif
endif
ifndef FPC_COMPILERINFO
FPC_COMPILERINFO:=$(shell $(FPC) -iVSPTPSOTO)
endif
ifndef FPC_VERSION
FPC_VERSION:=$(word 1,$(FPC_COMPILERINFO))
endif
export FPC FPC_VERSION FPC_COMPILERINFO
unexport CHECKDEPEND ALLDEPENDENCIES
ifndef CPU_TARGET
ifdef CPU_TARGET_DEFAULT
CPU_TARGET=$(CPU_TARGET_DEFAULT)
endif
endif
ifndef OS_TARGET
ifdef OS_TARGET_DEFAULT
OS_TARGET=$(OS_TARGET_DEFAULT)
endif
endif
ifneq ($(words $(FPC_COMPILERINFO)),5)
FPC_COMPILERINFO+=$(shell $(FPC) -iSP)
FPC_COMPILERINFO+=$(shell $(FPC) -iTP)
FPC_COMPILERINFO+=$(shell $(FPC) -iSO)
FPC_COMPILERINFO+=$(shell $(FPC) -iTO)
endif
ifndef CPU_SOURCE
CPU_SOURCE:=$(word 2,$(FPC_COMPILERINFO))
endif
ifndef CPU_TARGET
CPU_TARGET:=$(word 3,$(FPC_COMPILERINFO))
endif
ifndef OS_SOURCE
OS_SOURCE:=$(word 4,$(FPC_COMPILERINFO))
endif
ifndef OS_TARGET
OS_TARGET:=$(word 5,$(FPC_COMPILERINFO))
endif
FULL_TARGET=$(CPU_TARGET)-$(OS_TARGET)
FULL_SOURCE=$(CPU_SOURCE)-$(OS_SOURCE)
ifneq ($(findstring $(OS_SOURCE),$(LIMIT83fs)),)
TARGETSUFFIX=$(OS_TARGET)
SOURCESUFFIX=$(OS_SOURCE)
else
TARGETSUFFIX=$(FULL_TARGET)
SOURCESUFFIX=$(FULL_SOURCE)
endif
ifneq ($(FULL_TARGET),$(FULL_SOURCE))
CROSSCOMPILE=1
endif
ifeq ($(findstring makefile,$(MAKECMDGOALS)),)
ifeq ($(findstring $(FULL_TARGET),$(MAKEFILETARGETS)),)
$(error The Makefile doesn't support target $(FULL_TARGET), please run fpcmake first)
endif
endif
ifneq ($(findstring $(OS_TARGET),$(BSDs)),)
BSDhier=1
endif
ifeq ($(OS_TARGET),linux)
linuxHier=1
endif
export OS_TARGET OS_SOURCE CPU_TARGET CPU_SOURCE FULL_TARGET FULL_SOURCE TARGETSUFFIX SOURCESUFFIX CROSSCOMPILE
ifdef FPCDIR
override FPCDIR:=$(subst \,/,$(FPCDIR))
ifeq ($(wildcard $(addprefix $(FPCDIR)/,rtl units)),)
override FPCDIR=wrong
endif
else
override FPCDIR=wrong
endif
ifdef DEFAULT_FPCDIR
ifeq ($(FPCDIR),wrong)
override FPCDIR:=$(subst \,/,$(DEFAULT_FPCDIR))
ifeq ($(wildcard $(addprefix $(FPCDIR)/,rtl units)),)
override FPCDIR=wrong
endif
endif
endif
ifeq ($(FPCDIR),wrong)
ifdef inUnix
override FPCDIR=/usr/local/lib/fpc/$(FPC_VERSION)
ifeq ($(wildcard $(FPCDIR)/units),)
override FPCDIR=/usr/lib/fpc/$(FPC_VERSION)
endif
else
override FPCDIR:=$(subst /$(FPC),,$(firstword $(strip $(wildcard $(addsuffix /$(FPC),$(SEARCHPATH))))))
override FPCDIR:=$(FPCDIR)/..
ifeq ($(wildcard $(addprefix $(FPCDIR)/,rtl units)),)
override FPCDIR:=$(FPCDIR)/..
ifeq ($(wildcard $(addprefix $(FPCDIR)/,rtl units)),)
override FPCDIR:=$(BASEDIR)
ifeq ($(wildcard $(addprefix $(FPCDIR)/,rtl units)),)
override FPCDIR=c:/pp
endif
endif
endif
endif
endif
ifndef CROSSBINDIR
CROSSBINDIR:=$(wildcard $(FPCDIR)/bin/$(TARGETSUFFIX))
endif
ifndef BINUTILSPREFIX
ifndef CROSSBINDIR
ifdef CROSSCOMPILE
BINUTILSPREFIX=$(CPU_TARGET)-$(OS_TARGET)-
endif
endif
endif
UNITSDIR:=$(wildcard $(FPCDIR)/units/$(TARGETSUFFIX))
ifeq ($(UNITSDIR),)
UNITSDIR:=$(wildcard $(FPCDIR)/units/$(OS_TARGET))
endif
PACKAGESDIR:=$(wildcard $(FPCDIR) $(FPCDIR)/packages/base $(FPCDIR)/packages/extra)
ifeq ($(FULL_TARGET),i386-linux)
override TARGET_DIRS+=unzip zlib fftw x11 opengl gtk gtk2 syslog forms svgalib ggi libpng libgd utmp bfd gdbm ncurses tcl cdrom imlib gnome1 fpgtk unixutil newt uuid
endif
ifeq ($(FULL_TARGET),i386-go32v2)
override TARGET_DIRS+=unzip
endif
ifeq ($(FULL_TARGET),i386-win32)
override TARGET_DIRS+=unzip opengl gtk gtk2 zlib tcl cdrom fpgtk winunits fftw
endif
ifeq ($(FULL_TARGET),i386-os2)
override TARGET_DIRS+=os2units rexx unzip zlib x11 gtk libpng tcl imlib fpgtk
endif
ifeq ($(FULL_TARGET),i386-freebsd)
override TARGET_DIRS+=unzip zlib fftw x11 opengl gtk gtk2 syslog forms svgalib ggi libpng libgd utmp bfd gdbm ncurses fpgtk tcl imlib gnome1
endif
ifeq ($(FULL_TARGET),i386-netbsd)
override TARGET_DIRS+=unzip zlib x11 opengl gtk syslog forms svgalib ggi libpng libgd utmp bfd gdbm ncurses fpgtk tcl imlib gnome1
endif
ifeq ($(FULL_TARGET),i386-netware)
override TARGET_DIRS+=unzip zlib
endif
ifeq ($(FULL_TARGET),i386-openbsd)
override TARGET_DIRS+=unzip zlib x11 opengl gtk syslog forms svgalib ggi libpng libgd utmp bfd gdbm ncurses fpgtk tcl imlib gnome1
endif
ifeq ($(FULL_TARGET),i386-emx)
override TARGET_DIRS+=os2units rexx unzip zlib x11 gtk libpng tcl imlib fpgtk
endif
ifeq ($(FULL_TARGET),i386-netwlibc)
override TARGET_DIRS+=unzip zlib
endif
ifeq ($(FULL_TARGET),i386-wince)
override TARGET_DIRS+=unzip zlib tcl fftw
endif
ifeq ($(FULL_TARGET),m68k-linux)
override TARGET_DIRS+=unzip zlib fftw x11 opengl gtk gtk2 syslog forms svgalib ggi libpng libgd utmp bfd gdbm ncurses tcl cdrom imlib gnome1 fpgtk unixutil newt uuid
endif
ifeq ($(FULL_TARGET),m68k-freebsd)
override TARGET_DIRS+=unzip zlib fftw x11 opengl gtk gtk2 syslog forms svgalib ggi libpng libgd utmp bfd gdbm ncurses fpgtk tcl imlib gnome1
endif
ifeq ($(FULL_TARGET),m68k-netbsd)
override TARGET_DIRS+=unzip zlib x11 opengl gtk syslog forms svgalib ggi libpng libgd utmp bfd gdbm ncurses fpgtk tcl imlib gnome1
endif
ifeq ($(FULL_TARGET),m68k-amiga)
override TARGET_DIRS+=amunits
endif
ifeq ($(FULL_TARGET),m68k-openbsd)
override TARGET_DIRS+=unzip zlib x11 opengl gtk syslog forms svgalib ggi libpng libgd utmp bfd gdbm ncurses fpgtk tcl imlib gnome1
endif
ifeq ($(FULL_TARGET),m68k-palmos)
override TARGET_DIRS+=palmunits
endif
ifeq ($(FULL_TARGET),powerpc-linux)
override TARGET_DIRS+=unzip zlib fftw x11 opengl gtk gtk2 syslog forms svgalib ggi libpng libgd utmp bfd gdbm ncurses tcl cdrom imlib gnome1 fpgtk unixutil newt uuid
endif
ifeq ($(FULL_TARGET),powerpc-netbsd)
override TARGET_DIRS+=unzip zlib x11 opengl gtk syslog forms svgalib ggi libpng libgd utmp bfd gdbm ncurses fpgtk tcl imlib gnome1
endif
ifeq ($(FULL_TARGET),powerpc-darwin)
override TARGET_DIRS+=unzip zlib fftw x11 opengl gtk gtk2 syslog forms svgalib ggi libpng libgd utmp bfd gdbm ncurses fpgtk tcl imlib gnome1
endif
ifeq ($(FULL_TARGET),sparc-linux)
override TARGET_DIRS+=unzip zlib fftw x11 opengl gtk gtk2 syslog forms svgalib ggi libpng libgd utmp bfd gdbm ncurses tcl cdrom imlib gnome1 fpgtk unixutil newt uuid
endif
ifeq ($(FULL_TARGET),sparc-netbsd)
override TARGET_DIRS+=unzip zlib x11 opengl gtk syslog forms svgalib ggi libpng libgd utmp bfd gdbm ncurses fpgtk tcl imlib gnome1
endif
ifeq ($(FULL_TARGET),x86_64-linux)
override TARGET_DIRS+=unzip zlib fftw x11 opengl gtk gtk2 syslog forms svgalib ggi libpng libgd utmp bfd gdbm ncurses tcl cdrom imlib gnome1 fpgtk unixutil newt uuid
endif
ifeq ($(FULL_TARGET),x86_64-freebsd)
override TARGET_DIRS+=unzip zlib fftw x11 opengl gtk gtk2 syslog forms svgalib ggi libpng libgd utmp bfd gdbm ncurses fpgtk tcl imlib gnome1
endif
ifeq ($(FULL_TARGET),arm-linux)
override TARGET_DIRS+=unzip zlib fftw x11 opengl gtk gtk2 syslog forms svgalib ggi libpng libgd utmp bfd gdbm ncurses tcl cdrom imlib gnome1 fpgtk unixutil newt uuid
endif
ifeq ($(FULL_TARGET),arm-wince)
override TARGET_DIRS+=unzip zlib tcl fftw
endif
ifeq ($(FULL_TARGET),powerpc64-linux)
override TARGET_DIRS+=unzip zlib fftw x11 opengl gtk gtk2 syslog forms svgalib ggi libpng libgd utmp bfd gdbm ncurses tcl cdrom imlib gnome1 fpgtk unixutil newt uuid
endif
override INSTALL_FPCPACKAGE=y
override INSTALL_FPCSUBDIR=packages/extra
ifdef REQUIRE_UNITSDIR
override UNITSDIR+=$(REQUIRE_UNITSDIR)
endif
ifdef REQUIRE_PACKAGESDIR
override PACKAGESDIR+=$(REQUIRE_PACKAGESDIR)
endif
ifdef ZIPINSTALL
ifneq ($(findstring $(OS_TARGET),$(UNIXs)),)
UNIXHier=1
endif
else
ifneq ($(findstring $(OS_SOURCE),$(UNIXs)),)
UNIXHier=1
endif
endif
ifndef INSTALL_PREFIX
ifdef PREFIX
INSTALL_PREFIX=$(PREFIX)
endif
endif
ifndef INSTALL_PREFIX
ifdef UNIXHier
INSTALL_PREFIX=/usr/local
else
ifdef INSTALL_FPCPACKAGE
INSTALL_BASEDIR:=/pp
else
INSTALL_BASEDIR:=/$(PACKAGE_NAME)
endif
endif
endif
export INSTALL_PREFIX
ifdef INSTALL_FPCSUBDIR
export INSTALL_FPCSUBDIR
endif
ifndef DIST_DESTDIR
DIST_DESTDIR:=$(BASEDIR)
endif
export DIST_DESTDIR
ifndef COMPILER_UNITTARGETDIR
ifdef PACKAGEDIR_MAIN
COMPILER_UNITTARGETDIR=$(PACKAGEDIR_MAIN)/units/$(TARGETSUFFIX)
else
COMPILER_UNITTARGETDIR=units/$(TARGETSUFFIX)
endif
endif
ifndef COMPILER_TARGETDIR
COMPILER_TARGETDIR=.
endif
ifndef INSTALL_BASEDIR
ifdef UNIXHier
ifdef INSTALL_FPCPACKAGE
INSTALL_BASEDIR:=$(INSTALL_PREFIX)/lib/fpc/$(FPC_VERSION)
else
INSTALL_BASEDIR:=$(INSTALL_PREFIX)/lib/$(PACKAGE_NAME)
endif
else
INSTALL_BASEDIR:=$(INSTALL_PREFIX)
endif
endif
ifndef INSTALL_BINDIR
ifdef UNIXHier
INSTALL_BINDIR:=$(INSTALL_PREFIX)/bin
else
INSTALL_BINDIR:=$(INSTALL_BASEDIR)/bin
ifdef INSTALL_FPCPACKAGE
ifdef CROSSCOMPILE
ifdef CROSSINSTALL
INSTALL_BINDIR:=$(INSTALL_BINDIR)/$(SOURCESUFFIX)
else
INSTALL_BINDIR:=$(INSTALL_BINDIR)/$(TARGETSUFFIX)
endif
else
INSTALL_BINDIR:=$(INSTALL_BINDIR)/$(TARGETSUFFIX)
endif
endif
endif
endif
ifndef INSTALL_UNITDIR
INSTALL_UNITDIR:=$(INSTALL_BASEDIR)/units/$(TARGETSUFFIX)
ifdef INSTALL_FPCPACKAGE
ifdef PACKAGE_NAME
INSTALL_UNITDIR:=$(INSTALL_UNITDIR)/$(PACKAGE_NAME)
endif
endif
endif
ifndef INSTALL_LIBDIR
ifdef UNIXHier
INSTALL_LIBDIR:=$(INSTALL_PREFIX)/lib
else
INSTALL_LIBDIR:=$(INSTALL_UNITDIR)
endif
endif
ifndef INSTALL_SOURCEDIR
ifdef UNIXHier
ifdef BSDhier
SRCPREFIXDIR=share/src
else
ifdef linuxHier
SRCPREFIXDIR=share/src
else
SRCPREFIXDIR=src
endif
endif
ifdef INSTALL_FPCPACKAGE
ifdef INSTALL_FPCSUBDIR
INSTALL_SOURCEDIR:=$(INSTALL_PREFIX)/$(SRCPREFIXDIR)/fpc-$(FPC_VERSION)/$(INSTALL_FPCSUBDIR)/$(PACKAGE_NAME)
else
INSTALL_SOURCEDIR:=$(INSTALL_PREFIX)/$(SRCPREFIXDIR)/fpc-$(FPC_VERSION)/$(PACKAGE_NAME)
endif
else
INSTALL_SOURCEDIR:=$(INSTALL_PREFIX)/$(SRCPREFIXDIR)/$(PACKAGE_NAME)-$(PACKAGE_VERSION)
endif
else
ifdef INSTALL_FPCPACKAGE
ifdef INSTALL_FPCSUBDIR
INSTALL_SOURCEDIR:=$(INSTALL_BASEDIR)/source/$(INSTALL_FPCSUBDIR)/$(PACKAGE_NAME)
else
INSTALL_SOURCEDIR:=$(INSTALL_BASEDIR)/source/$(PACKAGE_NAME)
endif
else
INSTALL_SOURCEDIR:=$(INSTALL_BASEDIR)/source
endif
endif
endif
ifndef INSTALL_DOCDIR
ifdef UNIXHier
ifdef BSDhier
DOCPREFIXDIR=share/doc
else
ifdef linuxHier
DOCPREFIXDIR=share/doc
else
DOCPREFIXDIR=doc
endif
endif
ifdef INSTALL_FPCPACKAGE
INSTALL_DOCDIR:=$(INSTALL_PREFIX)/$(DOCPREFIXDIR)/fpc-$(FPC_VERSION)/$(PACKAGE_NAME)
else
INSTALL_DOCDIR:=$(INSTALL_PREFIX)/$(DOCPREFIXDIR)/$(PACKAGE_NAME)-$(PACKAGE_VERSION)
endif
else
ifdef INSTALL_FPCPACKAGE
INSTALL_DOCDIR:=$(INSTALL_BASEDIR)/doc/$(PACKAGE_NAME)
else
INSTALL_DOCDIR:=$(INSTALL_BASEDIR)/doc
endif
endif
endif
ifndef INSTALL_EXAMPLEDIR
ifdef UNIXHier
ifdef INSTALL_FPCPACKAGE
ifdef BSDhier
INSTALL_EXAMPLEDIR:=$(INSTALL_PREFIX)/share/examples/fpc-$(FPC_VERSION)/$(PACKAGE_NAME)
else
ifdef linuxHier
INSTALL_EXAMPLEDIR:=$(INSTALL_DOCDIR)/examples
else
INSTALL_EXAMPLEDIR:=$(INSTALL_PREFIX)/doc/fpc-$(FPC_VERSION)/examples/$(PACKAGE_NAME)
endif
endif
else
ifdef BSDhier
INSTALL_EXAMPLEDIR:=$(INSTALL_PREFIX)/share/examples/$(PACKAGE_NAME)-$(PACKAGE_VERSION)
else
ifdef linuxHier
INSTALL_EXAMPLEDIR:=$(INSTALL_DOCDIR)/examples/$(PACKAGE_NAME)-$(PACKAGE_VERSION)
else
INSTALL_EXAMPLEDIR:=$(INSTALL_PREFIX)/doc/$(PACKAGE_NAME)-$(PACKAGE_VERSION)
endif
endif
endif
else
ifdef INSTALL_FPCPACKAGE
INSTALL_EXAMPLEDIR:=$(INSTALL_BASEDIR)/examples/$(PACKAGE_NAME)
else
INSTALL_EXAMPLEDIR:=$(INSTALL_BASEDIR)/examples
endif
endif
endif
ifndef INSTALL_DATADIR
INSTALL_DATADIR=$(INSTALL_BASEDIR)
endif
ifndef INSTALL_SHAREDDIR
INSTALL_SHAREDDIR=$(INSTALL_PREFIX)/lib
endif
ifdef CROSSCOMPILE
ifndef CROSSBINDIR
CROSSBINDIR:=$(wildcard $(CROSSTARGETDIR)/bin/$(SOURCESUFFIX))
ifeq ($(CROSSBINDIR),)
CROSSBINDIR:=$(wildcard $(INSTALL_BASEDIR)/cross/$(TARGETSUFFIX)/bin/$(FULL_SOURCE))
endif
endif
else
CROSSBINDIR=
endif
BATCHEXT=.bat
LOADEREXT=.as
EXEEXT=.exe
PPLEXT=.ppl
PPUEXT=.ppu
OEXT=.o
ASMEXT=.s
SMARTEXT=.sl
STATICLIBEXT=.a
SHAREDLIBEXT=.so
SHAREDLIBPREFIX=libfp
STATICLIBPREFIX=libp
RSTEXT=.rst
ifeq ($(findstring 1.0.,$(FPC_VERSION)),)
ifeq ($(OS_TARGET),go32v1)
STATICLIBPREFIX=
SHORTSUFFIX=v1
endif
ifeq ($(OS_TARGET),go32v2)
STATICLIBPREFIX=
SHORTSUFFIX=dos
endif
ifeq ($(OS_TARGET),watcom)
STATICLIBPREFIX=
OEXT=.obj
ASMEXT=.asm
SHAREDLIBEXT=.dll
SHORTSUFFIX=wat
endif
ifeq ($(OS_TARGET),linux)
BATCHEXT=.sh
EXEEXT=
HASSHAREDLIB=1
SHORTSUFFIX=lnx
endif
ifeq ($(OS_TARGET),freebsd)
BATCHEXT=.sh
EXEEXT=
HASSHAREDLIB=1
SHORTSUFFIX=fbs
endif
ifeq ($(OS_TARGET),netbsd)
BATCHEXT=.sh
EXEEXT=
HASSHAREDLIB=1
SHORTSUFFIX=nbs
endif
ifeq ($(OS_TARGET),openbsd)
BATCHEXT=.sh
EXEEXT=
HASSHAREDLIB=1
SHORTSUFFIX=obs
endif
ifeq ($(OS_TARGET),win32)
SHAREDLIBEXT=.dll
SHORTSUFFIX=w32
endif
ifeq ($(OS_TARGET),os2)
BATCHEXT=.cmd
AOUTEXT=.out
STATICLIBPREFIX=
SHAREDLIBEXT=.dll
SHORTSUFFIX=os2
ECHO=echo
endif
ifeq ($(OS_TARGET),emx)
BATCHEXT=.cmd
AOUTEXT=.out
STATICLIBPREFIX=
SHAREDLIBEXT=.dll
SHORTSUFFIX=emx
ECHO=echo
endif
ifeq ($(OS_TARGET),amiga)
EXEEXT=
SHAREDLIBEXT=.library
SHORTSUFFIX=amg
endif
ifeq ($(OS_TARGET),morphos)
EXEEXT=
SHAREDLIBEXT=.library
SHORTSUFFIX=mos
endif
ifeq ($(OS_TARGET),atari)
EXEEXT=.ttp
SHORTSUFFIX=ata
endif
ifeq ($(OS_TARGET),beos)
BATCHEXT=.sh
EXEEXT=
SHORTSUFFIX=be
endif
ifeq ($(OS_TARGET),solaris)
BATCHEXT=.sh
EXEEXT=
SHORTSUFFIX=sun
endif
ifeq ($(OS_TARGET),qnx)
BATCHEXT=.sh
EXEEXT=
SHORTSUFFIX=qnx
endif
ifeq ($(OS_TARGET),netware)
EXEEXT=.nlm
STATICLIBPREFIX=
SHORTSUFFIX=nw
endif
ifeq ($(OS_TARGET),netwlibc)
EXEEXT=.nlm
STATICLIBPREFIX=
SHORTSUFFIX=nwl
endif
ifeq ($(OS_TARGET),macos)
BATCHEXT=
EXEEXT=
DEBUGSYMEXT=.xcoff
SHORTSUFFIX=mac
endif
ifeq ($(OS_TARGET),darwin)
BATCHEXT=.sh
EXEEXT=
HASSHAREDLIB=1
SHORTSUFFIX=dwn
endif
else
ifeq ($(OS_TARGET),go32v1)
PPUEXT=.pp1
OEXT=.o1
ASMEXT=.s1
SMARTEXT=.sl1
STATICLIBEXT=.a1
SHAREDLIBEXT=.so1
STATICLIBPREFIX=
SHORTSUFFIX=v1
endif
ifeq ($(OS_TARGET),go32v2)
STATICLIBPREFIX=
SHORTSUFFIX=dos
endif
ifeq ($(OS_TARGET),watcom)
STATICLIBPREFIX=
SHORTSUFFIX=wat
endif
ifeq ($(OS_TARGET),linux)
BATCHEXT=.sh
EXEEXT=
HASSHAREDLIB=1
SHORTSUFFIX=lnx
endif
ifeq ($(OS_TARGET),freebsd)
BATCHEXT=.sh
EXEEXT=
HASSHAREDLIB=1
SHORTSUFFIX=fbs
endif
ifeq ($(OS_TARGET),netbsd)
BATCHEXT=.sh
EXEEXT=
HASSHAREDLIB=1
SHORTSUFFIX=nbs
endif
ifeq ($(OS_TARGET),openbsd)
BATCHEXT=.sh
EXEEXT=
HASSHAREDLIB=1
SHORTSUFFIX=obs
endif
ifeq ($(OS_TARGET),win32)
PPUEXT=.ppw
OEXT=.ow
ASMEXT=.sw
SMARTEXT=.slw
STATICLIBEXT=.aw
SHAREDLIBEXT=.dll
SHORTSUFFIX=w32
endif
ifeq ($(OS_TARGET),os2)
BATCHEXT=.cmd
PPUEXT=.ppo
ASMEXT=.so2
OEXT=.oo2
AOUTEXT=.out
SMARTEXT=.sl2
STATICLIBPREFIX=
STATICLIBEXT=.ao2
SHAREDLIBEXT=.dll
SHORTSUFFIX=os2
ECHO=echo
endif
ifeq ($(OS_TARGET),amiga)
EXEEXT=
PPUEXT=.ppu
ASMEXT=.asm
OEXT=.o
SMARTEXT=.sl
STATICLIBEXT=.a
SHAREDLIBEXT=.library
SHORTSUFFIX=amg
endif
ifeq ($(OS_TARGET),atari)
PPUEXT=.ppu
ASMEXT=.s
OEXT=.o
SMARTEXT=.sl
STATICLIBEXT=.a
EXEEXT=.ttp
SHORTSUFFIX=ata
endif
ifeq ($(OS_TARGET),beos)
BATCHEXT=.sh
PPUEXT=.ppu
ASMEXT=.s
OEXT=.o
SMARTEXT=.sl
STATICLIBEXT=.a
EXEEXT=
SHORTSUFFIX=be
endif
ifeq ($(OS_TARGET),solaris)
BATCHEXT=.sh
PPUEXT=.ppu
ASMEXT=.s
OEXT=.o
SMARTEXT=.sl
STATICLIBEXT=.a
EXEEXT=
SHORTSUFFIX=sun
endif
ifeq ($(OS_TARGET),qnx)
BATCHEXT=.sh
PPUEXT=.ppu
ASMEXT=.s
OEXT=.o
SMARTEXT=.sl
STATICLIBEXT=.a
EXEEXT=
SHORTSUFFIX=qnx
endif
ifeq ($(OS_TARGET),netware)
STATICLIBPREFIX=
PPUEXT=.ppu
OEXT=.o
ASMEXT=.s
SMARTEXT=.sl
STATICLIBEXT=.a
SHAREDLIBEXT=.nlm
EXEEXT=.nlm
SHORTSUFFIX=nw
endif
ifeq ($(OS_TARGET),netwlibc)
STATICLIBPREFIX=
PPUEXT=.ppu
OEXT=.o
ASMEXT=.s
SMARTEXT=.sl
STATICLIBEXT=.a
SHAREDLIBEXT=.nlm
EXEEXT=.nlm
SHORTSUFFIX=nwl
endif
ifeq ($(OS_TARGET),macos)
BATCHEXT=
PPUEXT=.ppu
ASMEXT=.s
OEXT=.o
SMARTEXT=.sl
STATICLIBEXT=.a
EXEEXT=
DEBUGSYMEXT=.xcoff
SHORTSUFFIX=mac
endif
endif
ifneq ($(findstring $(OS_SOURCE),$(LIMIT83fs)),)
FPCMADE=fpcmade.$(SHORTSUFFIX)
ZIPSUFFIX=$(SHORTSUFFIX)
ZIPCROSSPREFIX=
ZIPSOURCESUFFIX=src
ZIPEXAMPLESUFFIX=exm
else
FPCMADE=fpcmade.$(TARGETSUFFIX)
ZIPSOURCESUFFIX=.source
ZIPEXAMPLESUFFIX=.examples
ifdef CROSSCOMPILE
ZIPSUFFIX=.$(SOURCESUFFIX)
ZIPCROSSPREFIX=$(TARGETSUFFIX)-
else
ZIPSUFFIX=.$(TARGETSUFFIX)
ZIPCROSSPREFIX=
endif
endif
ifndef ECHO
ECHO:=$(strip $(wildcard $(addsuffix /gecho$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(ECHO),)
ECHO:=$(strip $(wildcard $(addsuffix /echo$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(ECHO),)
ECHO= __missing_command_ECHO
else
ECHO:=$(firstword $(ECHO))
endif
else
ECHO:=$(firstword $(ECHO))
endif
endif
export ECHO
ifndef DATE
DATE:=$(strip $(wildcard $(addsuffix /gdate$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(DATE),)
DATE:=$(strip $(wildcard $(addsuffix /date$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(DATE),)
DATE= __missing_command_DATE
else
DATE:=$(firstword $(DATE))
endif
else
DATE:=$(firstword $(DATE))
endif
endif
export DATE
ifndef GINSTALL
GINSTALL:=$(strip $(wildcard $(addsuffix /ginstall$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(GINSTALL),)
GINSTALL:=$(strip $(wildcard $(addsuffix /install$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(GINSTALL),)
GINSTALL= __missing_command_GINSTALL
else
GINSTALL:=$(firstword $(GINSTALL))
endif
else
GINSTALL:=$(firstword $(GINSTALL))
endif
endif
export GINSTALL
ifndef CPPROG
CPPROG:=$(strip $(wildcard $(addsuffix /cp$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(CPPROG),)
CPPROG= __missing_command_CPPROG
else
CPPROG:=$(firstword $(CPPROG))
endif
endif
export CPPROG
ifndef RMPROG
RMPROG:=$(strip $(wildcard $(addsuffix /rm$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(RMPROG),)
RMPROG= __missing_command_RMPROG
else
RMPROG:=$(firstword $(RMPROG))
endif
endif
export RMPROG
ifndef MVPROG
MVPROG:=$(strip $(wildcard $(addsuffix /mv$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(MVPROG),)
MVPROG= __missing_command_MVPROG
else
MVPROG:=$(firstword $(MVPROG))
endif
endif
export MVPROG
ifndef MKDIRPROG
MKDIRPROG:=$(strip $(wildcard $(addsuffix /gmkdir$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(MKDIRPROG),)
MKDIRPROG:=$(strip $(wildcard $(addsuffix /mkdir$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(MKDIRPROG),)
MKDIRPROG= __missing_command_MKDIRPROG
else
MKDIRPROG:=$(firstword $(MKDIRPROG))
endif
else
MKDIRPROG:=$(firstword $(MKDIRPROG))
endif
endif
export MKDIRPROG
ifndef ECHOREDIR
ifndef inUnix
ECHOREDIR=echo
else
ECHOREDIR=$(ECHO)
endif
endif
ifndef COPY
COPY:=$(CPPROG) -fp
endif
ifndef COPYTREE
COPYTREE:=$(CPPROG) -Rfp
endif
ifndef MKDIRTREE
MKDIRTREE:=$(MKDIRPROG) -p
endif
ifndef MOVE
MOVE:=$(MVPROG) -f
endif
ifndef DEL
DEL:=$(RMPROG) -f
endif
ifndef DELTREE
DELTREE:=$(RMPROG) -rf
endif
ifndef INSTALL
ifdef inUnix
INSTALL:=$(GINSTALL) -c -m 644
else
INSTALL:=$(COPY)
endif
endif
ifndef INSTALLEXE
ifdef inUnix
INSTALLEXE:=$(GINSTALL) -c -m 755
else
INSTALLEXE:=$(COPY)
endif
endif
ifndef MKDIR
MKDIR:=$(GINSTALL) -m 755 -d
endif
export ECHOREDIR COPY COPYTREE MOVE DEL DELTREE INSTALL INSTALLEXE MKDIR
ifndef PPUMOVE
PPUMOVE:=$(strip $(wildcard $(addsuffix /ppumove$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(PPUMOVE),)
PPUMOVE= __missing_command_PPUMOVE
else
PPUMOVE:=$(firstword $(PPUMOVE))
endif
endif
export PPUMOVE
ifndef FPCMAKE
FPCMAKE:=$(strip $(wildcard $(addsuffix /fpcmake$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(FPCMAKE),)
FPCMAKE= __missing_command_FPCMAKE
else
FPCMAKE:=$(firstword $(FPCMAKE))
endif
endif
export FPCMAKE
ifndef ZIPPROG
ZIPPROG:=$(strip $(wildcard $(addsuffix /zip$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(ZIPPROG),)
ZIPPROG= __missing_command_ZIPPROG
else
ZIPPROG:=$(firstword $(ZIPPROG))
endif
endif
export ZIPPROG
ifndef TARPROG
TARPROG:=$(strip $(wildcard $(addsuffix /tar$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(TARPROG),)
TARPROG= __missing_command_TARPROG
else
TARPROG:=$(firstword $(TARPROG))
endif
endif
export TARPROG
ASNAME=$(BINUTILSPREFIX)as
LDNAME=$(BINUTILSPREFIX)ld
ARNAME=$(BINUTILSPREFIX)ar
RCNAME=$(BINUTILSPREFIX)rc
ifneq ($(findstring 1.0.,$(FPC_VERSION)),)
ifeq ($(OS_TARGET),win32)
ifeq ($(CROSSBINDIR),)
ASNAME=asw
LDNAME=ldw
ARNAME=arw
endif
endif
endif
ifndef ASPROG
ifdef CROSSBINDIR
ASPROG=$(CROSSBINDIR)/$(ASNAME)$(SRCEXEEXT)
else
ASPROG=$(ASNAME)
endif
endif
ifndef LDPROG
ifdef CROSSBINDIR
LDPROG=$(CROSSBINDIR)/$(LDNAME)$(SRCEXEEXT)
else
LDPROG=$(LDNAME)
endif
endif
ifndef RCPROG
ifdef CROSSBINDIR
RCPROG=$(CROSSBINDIR)/$(RCNAME)$(SRCEXEEXT)
else
RCPROG=$(RCNAME)
endif
endif
ifndef ARPROG
ifdef CROSSBINDIR
ARPROG=$(CROSSBINDIR)/$(ARNAME)$(SRCEXEEXT)
else
ARPROG=$(ARNAME)
endif
endif
AS=$(ASPROG)
LD=$(LDPROG)
RC=$(RCPROG)
AR=$(ARPROG)
PPAS=ppas$(SRCBATCHEXT)
ifdef inUnix
LDCONFIG=ldconfig
else
LDCONFIG=
endif
ifdef DATE
DATESTR:=$(shell $(DATE) +%Y%m%d)
else
DATESTR=
endif
ifndef UPXPROG
ifeq ($(OS_TARGET),go32v2)
UPXPROG:=1
endif
ifeq ($(OS_TARGET),win32)
UPXPROG:=1
endif
ifdef UPXPROG
UPXPROG:=$(strip $(wildcard $(addsuffix /upx$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(UPXPROG),)
UPXPROG=
else
UPXPROG:=$(firstword $(UPXPROG))
endif
else
UPXPROG=
endif
endif
export UPXPROG
ZIPOPT=-9
ZIPEXT=.zip
ifeq ($(USETAR),bz2)
TAROPT=vj
TAREXT=.tar.bz2
else
TAROPT=vz
TAREXT=.tar.gz
endif
ifndef NOCPUDEF
override FPCOPTDEF=$(CPU_TARGET)
endif
ifneq ($(OS_TARGET),$(OS_SOURCE))
override FPCOPT+=-T$(OS_TARGET)
endif
ifeq ($(OS_SOURCE),openbsd)
override FPCOPT+=-FD$(NEW_BINUTILS_PATH)
endif
ifndef CROSSBOOTSTRAP
ifneq ($(BINUTILSPREFIX),)
override FPCOPT+=-XP$(BINUTILSPREFIX) -Xc
endif
ifneq ($(BINUTILSPREFIX),)
override FPCOPT+=-Xr$(RLINKPATH)
endif
endif
ifdef UNITDIR
override FPCOPT+=$(addprefix -Fu,$(UNITDIR))
endif
ifdef LIBDIR
override FPCOPT+=$(addprefix -Fl,$(LIBDIR))
endif
ifdef OBJDIR
override FPCOPT+=$(addprefix -Fo,$(OBJDIR))
endif
ifdef INCDIR
override FPCOPT+=$(addprefix -Fi,$(INCDIR))
endif
ifdef LINKSMART
override FPCOPT+=-XX
endif
ifdef CREATESMART
override FPCOPT+=-CX
endif
ifdef DEBUG
override FPCOPT+=-gl
override FPCOPTDEF+=DEBUG
endif
ifdef RELEASE
ifeq ($(CPU_TARGET),i386)
FPCCPUOPT:=-OG2p3
else
ifeq ($(CPU_TARGET),powerpc)
FPCCPUOPT:=-O1r
else
FPCCPUOPT:=
endif
endif
override FPCOPT+=-Ur -Xs $(FPCCPUOPT) -n
override FPCOPTDEF+=RELEASE
endif
ifdef STRIP
override FPCOPT+=-Xs
endif
ifdef OPTIMIZE
ifeq ($(CPU_TARGET),i386)
override FPCOPT+=-OG2p3
endif
endif
ifdef VERBOSE
override FPCOPT+=-vwni
endif
ifdef COMPILER_OPTIONS
override FPCOPT+=$(COMPILER_OPTIONS)
endif
ifdef COMPILER_UNITDIR
override FPCOPT+=$(addprefix -Fu,$(COMPILER_UNITDIR))
endif
ifdef COMPILER_LIBRARYDIR
override FPCOPT+=$(addprefix -Fl,$(COMPILER_LIBRARYDIR))
endif
ifdef COMPILER_OBJECTDIR
override FPCOPT+=$(addprefix -Fo,$(COMPILER_OBJECTDIR))
endif
ifdef COMPILER_INCLUDEDIR
override FPCOPT+=$(addprefix -Fi,$(COMPILER_INCLUDEDIR))
endif
ifdef CROSSBINDIR
override FPCOPT+=-FD$(CROSSBINDIR)
endif
ifdef COMPILER_TARGETDIR
override FPCOPT+=-FE$(COMPILER_TARGETDIR)
ifeq ($(COMPILER_TARGETDIR),.)
override TARGETDIRPREFIX=
else
override TARGETDIRPREFIX=$(COMPILER_TARGETDIR)/
endif
endif
ifdef COMPILER_UNITTARGETDIR
override FPCOPT+=-FU$(COMPILER_UNITTARGETDIR)
ifeq ($(COMPILER_UNITTARGETDIR),.)
override UNITTARGETDIRPREFIX=
else
override UNITTARGETDIRPREFIX=$(COMPILER_UNITTARGETDIR)/
endif
else
ifdef COMPILER_TARGETDIR
override COMPILER_UNITTARGETDIR=$(COMPILER_TARGETDIR)
override UNITTARGETDIRPREFIX=$(TARGETDIRPREFIX)
endif
endif
ifeq ($(OS_TARGET),linux)
ifeq ($(FPC_VERSION),1.0.6)
override FPCOPTDEF+=HASUNIX
endif
endif
ifdef CREATESHARED
override FPCOPT+=-Cg
ifeq ($(CPU_TARGET),i386)
override FPCOPT+=-Aas
endif
endif
ifdef LINKSHARED
endif
ifdef OPT
override FPCOPT+=$(OPT)
endif
ifdef FPCOPTDEF
override FPCOPT+=$(addprefix -d,$(FPCOPTDEF))
endif
ifdef CFGFILE
override FPCOPT+=@$(CFGFILE)
endif
ifdef USEENV
override FPCEXTCMD:=$(FPCOPT)
override FPCOPT:=!FPCEXTCMD
export FPCEXTCMD
endif
override AFULL_TARGET=$(CPU_TARGET)-$(OS_TARGET)
override AFULL_SOURCE=$(CPU_SOURCE)-$(OS_SOURCE)
ifneq ($(AFULL_TARGET),$(AFULL_SOURCE))
override ACROSSCOMPILE=1
endif
ifdef ACROSSCOMPILE
override FPCOPT+=$(CROSSOPT)
endif
override COMPILER:=$(FPC) $(FPCOPT)
ifeq (,$(findstring -s ,$(COMPILER)))
EXECPPAS=
else
ifeq ($(FULL_SOURCE),$(FULL_TARGET))
EXECPPAS:=@$(PPAS)
endif
endif
ifdef TARGET_RSTS
override RSTFILES=$(addsuffix $(RSTEXT),$(TARGET_RSTS))
override CLEANRSTFILES+=$(RSTFILES)
endif
.PHONY: fpc_clean fpc_cleanall fpc_distclean
ifdef EXEFILES
override CLEANEXEFILES:=$(addprefix $(TARGETDIRPREFIX),$(CLEANEXEFILES))
endif
ifdef CLEAN_UNITS
override CLEANPPUFILES+=$(addsuffix $(PPUEXT),$(CLEAN_UNITS))
endif
ifdef CLEANPPUFILES
override CLEANPPULINKFILES:=$(subst $(PPUEXT),$(OEXT),$(CLEANPPUFILES)) $(addprefix $(STATICLIBPREFIX),$(subst $(PPUEXT),$(STATICLIBEXT),$(CLEANPPUFILES)))
ifdef DEBUGSYMEXT
override CLEANPPULINKFILES+=$(subst $(PPUEXT),$(DEBUGSYMEXT),$(CLEANPPUFILES))
endif
override CLEANPPUFILES:=$(addprefix $(UNITTARGETDIRPREFIX),$(CLEANPPUFILES))
override CLEANPPULINKFILES:=$(wildcard $(addprefix $(UNITTARGETDIRPREFIX),$(CLEANPPULINKFILES)))
endif
fpc_clean: $(CLEANTARGET)
ifdef CLEANEXEFILES
	-$(DEL) $(CLEANEXEFILES)
endif
ifdef CLEANPPUFILES
	-$(DEL) $(CLEANPPUFILES)
endif
ifneq ($(CLEANPPULINKFILES),)
	-$(DEL) $(CLEANPPULINKFILES)
endif
ifdef CLEANRSTFILES
	-$(DEL) $(addprefix $(UNITTARGETDIRPREFIX),$(CLEANRSTFILES))
endif
ifdef CLEAN_FILES
	-$(DEL) $(CLEAN_FILES)
endif
ifdef LIB_NAME
	-$(DEL) $(LIB_NAME) $(LIB_FULLNAME)
endif
	-$(DEL) $(FPCMADE) Package.fpc $(PPAS) script.res link.res $(FPCEXTFILE) $(REDIRFILE)
	-$(DEL) *$(ASMEXT) *_ppas$(BATCHEXT)
fpc_cleanall: $(CLEANTARGET)
ifdef CLEANEXEFILES
	-$(DEL) $(CLEANEXEFILES)
endif
ifdef COMPILER_UNITTARGETDIR
ifdef CLEANPPUFILES
	-$(DEL) $(CLEANPPUFILES)
endif
ifneq ($(CLEANPPULINKFILES),)
	-$(DEL) $(CLEANPPULINKFILES)
endif
ifdef CLEANRSTFILES
	-$(DEL) $(addprefix $(UNITTARGETDIRPREFIX),$(CLEANRSTFILES))
endif
endif
	-$(DELTREE) units
	-$(DEL) *$(OEXT) *$(PPUEXT) *$(RSTEXT) *$(ASMEXT) *$(STATICLIBEXT) *$(SHAREDLIBEXT) *$(PPLEXT)
ifneq ($(PPUEXT),.ppu)
	-$(DEL) *.o *.ppu *.a
endif
	-$(DELTREE) *$(SMARTEXT)
	-$(DEL) fpcmade.* Package.fpc $(PPAS) script.res link.res $(FPCEXTFILE) $(REDIRFILE)
	-$(DEL) *_ppas$(BATCHEXT)
ifdef AOUTEXT
	-$(DEL) *$(AOUTEXT)
endif
ifdef DEBUGSYMEXT
	-$(DEL) *$(DEBUGSYMEXT)
endif
fpc_distclean: cleanall
.PHONY: fpc_baseinfo
override INFORULES+=fpc_baseinfo
fpc_baseinfo:
	@$(ECHO)
	@$(ECHO)  == Package info ==
	@$(ECHO)  Package Name..... $(PACKAGE_NAME)
	@$(ECHO)  Package Version.. $(PACKAGE_VERSION)
	@$(ECHO)
	@$(ECHO)  == Configuration info ==
	@$(ECHO)
	@$(ECHO)  FPC.......... $(FPC)
	@$(ECHO)  FPC Version.. $(FPC_VERSION)
	@$(ECHO)  Source CPU... $(CPU_SOURCE)
	@$(ECHO)  Target CPU... $(CPU_TARGET)
	@$(ECHO)  Source OS.... $(OS_SOURCE)
	@$(ECHO)  Target OS.... $(OS_TARGET)
	@$(ECHO)  Full Source.. $(FULL_SOURCE)
	@$(ECHO)  Full Target.. $(FULL_TARGET)
	@$(ECHO)  SourceSuffix. $(SOURCESUFFIX)
	@$(ECHO)  TargetSuffix. $(TARGETSUFFIX)
	@$(ECHO)
	@$(ECHO)  == Directory info ==
	@$(ECHO)
	@$(ECHO)  Required pkgs... $(REQUIRE_PACKAGES)
	@$(ECHO)
	@$(ECHO)  Basedir......... $(BASEDIR)
	@$(ECHO)  FPCDir.......... $(FPCDIR)
	@$(ECHO)  CrossBinDir..... $(CROSSBINDIR)
	@$(ECHO)  UnitsDir........ $(UNITSDIR)
	@$(ECHO)  PackagesDir..... $(PACKAGESDIR)
	@$(ECHO)
	@$(ECHO)  GCC library..... $(GCCLIBDIR)
	@$(ECHO)  Other library... $(OTHERLIBDIR)
	@$(ECHO)
	@$(ECHO)  == Tools info ==
	@$(ECHO)
	@$(ECHO)  As........ $(AS)
	@$(ECHO)  Ld........ $(LD)
	@$(ECHO)  Ar........ $(AR)
	@$(ECHO)  Rc........ $(RC)
	@$(ECHO)
	@$(ECHO)  Mv........ $(MVPROG)
	@$(ECHO)  Cp........ $(CPPROG)
	@$(ECHO)  Rm........ $(RMPROG)
	@$(ECHO)  GInstall.. $(GINSTALL)
	@$(ECHO)  Echo...... $(ECHO)
	@$(ECHO)  Shell..... $(SHELL)
	@$(ECHO)  Date...... $(DATE)
	@$(ECHO)  FPCMake... $(FPCMAKE)
	@$(ECHO)  PPUMove... $(PPUMOVE)
	@$(ECHO)  Upx....... $(UPXPROG)
	@$(ECHO)  Zip....... $(ZIPPROG)
	@$(ECHO)
	@$(ECHO)  == Object info ==
	@$(ECHO)
	@$(ECHO)  Target Loaders........ $(TARGET_LOADERS)
	@$(ECHO)  Target Units.......... $(TARGET_UNITS)
	@$(ECHO)  Target Implicit Units. $(TARGET_IMPLICITUNITS)
	@$(ECHO)  Target Programs....... $(TARGET_PROGRAMS)
	@$(ECHO)  Target Dirs........... $(TARGET_DIRS)
	@$(ECHO)  Target Examples....... $(TARGET_EXAMPLES)
	@$(ECHO)  Target ExampleDirs.... $(TARGET_EXAMPLEDIRS)
	@$(ECHO)
	@$(ECHO)  Clean Units......... $(CLEAN_UNITS)
	@$(ECHO)  Clean Files......... $(CLEAN_FILES)
	@$(ECHO)
	@$(ECHO)  Install Units....... $(INSTALL_UNITS)
	@$(ECHO)  Install Files....... $(INSTALL_FILES)
	@$(ECHO)
	@$(ECHO)  == Install info ==
	@$(ECHO)
	@$(ECHO)  DateStr.............. $(DATESTR)
	@$(ECHO)  ZipName.............. $(ZIPNAME)
	@$(ECHO)  ZipPrefix............ $(ZIPPREFIX)
	@$(ECHO)  ZipCrossPrefix....... $(ZIPCROSSPREFIX)
	@$(ECHO)  ZipSuffix............ $(ZIPSUFFIX)
	@$(ECHO)  FullZipName.......... $(FULLZIPNAME)
	@$(ECHO)  Install FPC Package.. $(INSTALL_FPCPACKAGE)
	@$(ECHO)
	@$(ECHO)  Install base dir..... $(INSTALL_BASEDIR)
	@$(ECHO)  Install binary dir... $(INSTALL_BINDIR)
	@$(ECHO)  Install library dir.. $(INSTALL_LIBDIR)
	@$(ECHO)  Install units dir.... $(INSTALL_UNITDIR)
	@$(ECHO)  Install source dir... $(INSTALL_SOURCEDIR)
	@$(ECHO)  Install doc dir...... $(INSTALL_DOCDIR)
	@$(ECHO)  Install example dir.. $(INSTALL_EXAMPLEDIR)
	@$(ECHO)  Install data dir..... $(INSTALL_DATADIR)
	@$(ECHO)
	@$(ECHO)  Dist destination dir. $(DIST_DESTDIR)
	@$(ECHO)  Dist zip name........ $(DIST_ZIPNAME)
	@$(ECHO)
.PHONY: fpc_info
fpc_info: $(INFORULES)
.PHONY: fpc_makefile fpc_makefiles fpc_makefile_sub1 fpc_makefile_sub2 \
	fpc_makefile_dirs
fpc_makefile:
	$(FPCMAKE) -w -T$(OS_TARGET) Makefile.fpc
fpc_makefile_sub1:
ifdef TARGET_DIRS
	$(FPCMAKE) -w -T$(OS_TARGET) $(addsuffix /Makefile.fpc,$(TARGET_DIRS))
endif
ifdef TARGET_EXAMPLEDIRS
	$(FPCMAKE) -w -T$(OS_TARGET) $(addsuffix /Makefile.fpc,$(TARGET_EXAMPLEDIRS))
endif
fpc_makefile_sub2: $(addsuffix _makefile_dirs,$(TARGET_DIRS) $(TARGET_EXAMPLEDIRS))
fpc_makefile_dirs: fpc_makefile_sub1 fpc_makefile_sub2
fpc_makefiles: fpc_makefile fpc_makefile_dirs
ifeq ($(FULL_TARGET),i386-linux)
TARGET_DIRS_UNZIP=1
TARGET_DIRS_ZLIB=1
TARGET_DIRS_FFTW=1
TARGET_DIRS_X11=1
TARGET_DIRS_OPENGL=1
TARGET_DIRS_GTK=1
TARGET_DIRS_GTK2=1
TARGET_DIRS_SYSLOG=1
TARGET_DIRS_FORMS=1
TARGET_DIRS_SVGALIB=1
TARGET_DIRS_GGI=1
TARGET_DIRS_LIBPNG=1
TARGET_DIRS_LIBGD=1
TARGET_DIRS_UTMP=1
TARGET_DIRS_BFD=1
TARGET_DIRS_GDBM=1
TARGET_DIRS_NCURSES=1
TARGET_DIRS_TCL=1
TARGET_DIRS_CDROM=1
TARGET_DIRS_IMLIB=1
TARGET_DIRS_GNOME1=1
TARGET_DIRS_FPGTK=1
TARGET_DIRS_UNIXUTIL=1
TARGET_DIRS_NEWT=1
TARGET_DIRS_UUID=1
endif
ifeq ($(FULL_TARGET),i386-go32v2)
TARGET_DIRS_UNZIP=1
endif
ifeq ($(FULL_TARGET),i386-win32)
TARGET_DIRS_UNZIP=1
TARGET_DIRS_OPENGL=1
TARGET_DIRS_GTK=1
TARGET_DIRS_GTK2=1
TARGET_DIRS_ZLIB=1
TARGET_DIRS_TCL=1
TARGET_DIRS_CDROM=1
TARGET_DIRS_FPGTK=1
TARGET_DIRS_WINUNITS=1
TARGET_DIRS_FFTW=1
endif
ifeq ($(FULL_TARGET),i386-os2)
TARGET_DIRS_OS2UNITS=1
TARGET_DIRS_REXX=1
TARGET_DIRS_UNZIP=1
TARGET_DIRS_ZLIB=1
TARGET_DIRS_X11=1
TARGET_DIRS_GTK=1
TARGET_DIRS_LIBPNG=1
TARGET_DIRS_TCL=1
TARGET_DIRS_IMLIB=1
TARGET_DIRS_FPGTK=1
endif
ifeq ($(FULL_TARGET),i386-freebsd)
TARGET_DIRS_UNZIP=1
TARGET_DIRS_ZLIB=1
TARGET_DIRS_FFTW=1
TARGET_DIRS_X11=1
TARGET_DIRS_OPENGL=1
TARGET_DIRS_GTK=1
TARGET_DIRS_GTK2=1
TARGET_DIRS_SYSLOG=1
TARGET_DIRS_FORMS=1
TARGET_DIRS_SVGALIB=1
TARGET_DIRS_GGI=1
TARGET_DIRS_LIBPNG=1
TARGET_DIRS_LIBGD=1
TARGET_DIRS_UTMP=1
TARGET_DIRS_BFD=1
TARGET_DIRS_GDBM=1
TARGET_DIRS_NCURSES=1
TARGET_DIRS_FPGTK=1
TARGET_DIRS_TCL=1
TARGET_DIRS_IMLIB=1
TARGET_DIRS_GNOME1=1
endif
ifeq ($(FULL_TARGET),i386-netbsd)
TARGET_DIRS_UNZIP=1
TARGET_DIRS_ZLIB=1
TARGET_DIRS_X11=1
TARGET_DIRS_OPENGL=1
TARGET_DIRS_GTK=1
TARGET_DIRS_SYSLOG=1
TARGET_DIRS_FORMS=1
TARGET_DIRS_SVGALIB=1
TARGET_DIRS_GGI=1
TARGET_DIRS_LIBPNG=1
TARGET_DIRS_LIBGD=1
TARGET_DIRS_UTMP=1
TARGET_DIRS_BFD=1
TARGET_DIRS_GDBM=1
TARGET_DIRS_NCURSES=1
TARGET_DIRS_FPGTK=1
TARGET_DIRS_TCL=1
TARGET_DIRS_IMLIB=1
TARGET_DIRS_GNOME1=1
endif
ifeq ($(FULL_TARGET),i386-netware)
TARGET_DIRS_UNZIP=1
TARGET_DIRS_ZLIB=1
endif
ifeq ($(FULL_TARGET),i386-openbsd)
TARGET_DIRS_UNZIP=1
TARGET_DIRS_ZLIB=1
TARGET_DIRS_X11=1
TARGET_DIRS_OPENGL=1
TARGET_DIRS_GTK=1
TARGET_DIRS_SYSLOG=1
TARGET_DIRS_FORMS=1
TARGET_DIRS_SVGALIB=1
TARGET_DIRS_GGI=1
TARGET_DIRS_LIBPNG=1
TARGET_DIRS_LIBGD=1
TARGET_DIRS_UTMP=1
TARGET_DIRS_BFD=1
TARGET_DIRS_GDBM=1
TARGET_DIRS_NCURSES=1
TARGET_DIRS_FPGTK=1
TARGET_DIRS_TCL=1
TARGET_DIRS_IMLIB=1
TARGET_DIRS_GNOME1=1
endif
ifeq ($(FULL_TARGET),i386-emx)
TARGET_DIRS_OS2UNITS=1
TARGET_DIRS_REXX=1
TARGET_DIRS_UNZIP=1
TARGET_DIRS_ZLIB=1
TARGET_DIRS_X11=1
TARGET_DIRS_GTK=1
TARGET_DIRS_LIBPNG=1
TARGET_DIRS_TCL=1
TARGET_DIRS_IMLIB=1
TARGET_DIRS_FPGTK=1
endif
ifeq ($(FULL_TARGET),i386-netwlibc)
TARGET_DIRS_UNZIP=1
TARGET_DIRS_ZLIB=1
endif
ifeq ($(FULL_TARGET),i386-wince)
TARGET_DIRS_UNZIP=1
TARGET_DIRS_ZLIB=1
TARGET_DIRS_TCL=1
TARGET_DIRS_FFTW=1
endif
ifeq ($(FULL_TARGET),m68k-linux)
TARGET_DIRS_UNZIP=1
TARGET_DIRS_ZLIB=1
TARGET_DIRS_FFTW=1
TARGET_DIRS_X11=1
TARGET_DIRS_OPENGL=1
TARGET_DIRS_GTK=1
TARGET_DIRS_GTK2=1
TARGET_DIRS_SYSLOG=1
TARGET_DIRS_FORMS=1
TARGET_DIRS_SVGALIB=1
TARGET_DIRS_GGI=1
TARGET_DIRS_LIBPNG=1
TARGET_DIRS_LIBGD=1
TARGET_DIRS_UTMP=1
TARGET_DIRS_BFD=1
TARGET_DIRS_GDBM=1
TARGET_DIRS_NCURSES=1
TARGET_DIRS_TCL=1
TARGET_DIRS_CDROM=1
TARGET_DIRS_IMLIB=1
TARGET_DIRS_GNOME1=1
TARGET_DIRS_FPGTK=1
TARGET_DIRS_UNIXUTIL=1
TARGET_DIRS_NEWT=1
TARGET_DIRS_UUID=1
endif
ifeq ($(FULL_TARGET),m68k-freebsd)
TARGET_DIRS_UNZIP=1
TARGET_DIRS_ZLIB=1
TARGET_DIRS_FFTW=1
TARGET_DIRS_X11=1
TARGET_DIRS_OPENGL=1
TARGET_DIRS_GTK=1
TARGET_DIRS_GTK2=1
TARGET_DIRS_SYSLOG=1
TARGET_DIRS_FORMS=1
TARGET_DIRS_SVGALIB=1
TARGET_DIRS_GGI=1
TARGET_DIRS_LIBPNG=1
TARGET_DIRS_LIBGD=1
TARGET_DIRS_UTMP=1
TARGET_DIRS_BFD=1
TARGET_DIRS_GDBM=1
TARGET_DIRS_NCURSES=1
TARGET_DIRS_FPGTK=1
TARGET_DIRS_TCL=1
TARGET_DIRS_IMLIB=1
TARGET_DIRS_GNOME1=1
endif
ifeq ($(FULL_TARGET),m68k-netbsd)
TARGET_DIRS_UNZIP=1
TARGET_DIRS_ZLIB=1
TARGET_DIRS_X11=1
TARGET_DIRS_OPENGL=1
TARGET_DIRS_GTK=1
TARGET_DIRS_SYSLOG=1
TARGET_DIRS_FORMS=1
TARGET_DIRS_SVGALIB=1
TARGET_DIRS_GGI=1
TARGET_DIRS_LIBPNG=1
TARGET_DIRS_LIBGD=1
TARGET_DIRS_UTMP=1
TARGET_DIRS_BFD=1
TARGET_DIRS_GDBM=1
TARGET_DIRS_NCURSES=1
TARGET_DIRS_FPGTK=1
TARGET_DIRS_TCL=1
TARGET_DIRS_IMLIB=1
TARGET_DIRS_GNOME1=1
endif
ifeq ($(FULL_TARGET),m68k-amiga)
TARGET_DIRS_AMUNITS=1
endif
ifeq ($(FULL_TARGET),m68k-openbsd)
TARGET_DIRS_UNZIP=1
TARGET_DIRS_ZLIB=1
TARGET_DIRS_X11=1
TARGET_DIRS_OPENGL=1
TARGET_DIRS_GTK=1
TARGET_DIRS_SYSLOG=1
TARGET_DIRS_FORMS=1
TARGET_DIRS_SVGALIB=1
TARGET_DIRS_GGI=1
TARGET_DIRS_LIBPNG=1
TARGET_DIRS_LIBGD=1
TARGET_DIRS_UTMP=1
TARGET_DIRS_BFD=1
TARGET_DIRS_GDBM=1
TARGET_DIRS_NCURSES=1
TARGET_DIRS_FPGTK=1
TARGET_DIRS_TCL=1
TARGET_DIRS_IMLIB=1
TARGET_DIRS_GNOME1=1
endif
ifeq ($(FULL_TARGET),m68k-palmos)
TARGET_DIRS_PALMUNITS=1
endif
ifeq ($(FULL_TARGET),powerpc-linux)
TARGET_DIRS_UNZIP=1
TARGET_DIRS_ZLIB=1
TARGET_DIRS_FFTW=1
TARGET_DIRS_X11=1
TARGET_DIRS_OPENGL=1
TARGET_DIRS_GTK=1
TARGET_DIRS_GTK2=1
TARGET_DIRS_SYSLOG=1
TARGET_DIRS_FORMS=1
TARGET_DIRS_SVGALIB=1
TARGET_DIRS_GGI=1
TARGET_DIRS_LIBPNG=1
TARGET_DIRS_LIBGD=1
TARGET_DIRS_UTMP=1
TARGET_DIRS_BFD=1
TARGET_DIRS_GDBM=1
TARGET_DIRS_NCURSES=1
TARGET_DIRS_TCL=1
TARGET_DIRS_CDROM=1
TARGET_DIRS_IMLIB=1
TARGET_DIRS_GNOME1=1
TARGET_DIRS_FPGTK=1
TARGET_DIRS_UNIXUTIL=1
TARGET_DIRS_NEWT=1
TARGET_DIRS_UUID=1
endif
ifeq ($(FULL_TARGET),powerpc-netbsd)
TARGET_DIRS_UNZIP=1
TARGET_DIRS_ZLIB=1
TARGET_DIRS_X11=1
TARGET_DIRS_OPENGL=1
TARGET_DIRS_GTK=1
TARGET_DIRS_SYSLOG=1
TARGET_DIRS_FORMS=1
TARGET_DIRS_SVGALIB=1
TARGET_DIRS_GGI=1
TARGET_DIRS_LIBPNG=1
TARGET_DIRS_LIBGD=1
TARGET_DIRS_UTMP=1
TARGET_DIRS_BFD=1
TARGET_DIRS_GDBM=1
TARGET_DIRS_NCURSES=1
TARGET_DIRS_FPGTK=1
TARGET_DIRS_TCL=1
TARGET_DIRS_IMLIB=1
TARGET_DIRS_GNOME1=1
endif
ifeq ($(FULL_TARGET),powerpc-darwin)
TARGET_DIRS_UNZIP=1
TARGET_DIRS_ZLIB=1
TARGET_DIRS_FFTW=1
TARGET_DIRS_X11=1
TARGET_DIRS_OPENGL=1
TARGET_DIRS_GTK=1
TARGET_DIRS_GTK2=1
TARGET_DIRS_SYSLOG=1
TARGET_DIRS_FORMS=1
TARGET_DIRS_SVGALIB=1
TARGET_DIRS_GGI=1
TARGET_DIRS_LIBPNG=1
TARGET_DIRS_LIBGD=1
TARGET_DIRS_UTMP=1
TARGET_DIRS_BFD=1
TARGET_DIRS_GDBM=1
TARGET_DIRS_NCURSES=1
TARGET_DIRS_FPGTK=1
TARGET_DIRS_TCL=1
TARGET_DIRS_IMLIB=1
TARGET_DIRS_GNOME1=1
endif
ifeq ($(FULL_TARGET),sparc-linux)
TARGET_DIRS_UNZIP=1
TARGET_DIRS_ZLIB=1
TARGET_DIRS_FFTW=1
TARGET_DIRS_X11=1
TARGET_DIRS_OPENGL=1
TARGET_DIRS_GTK=1
TARGET_DIRS_GTK2=1
TARGET_DIRS_SYSLOG=1
TARGET_DIRS_FORMS=1
TARGET_DIRS_SVGALIB=1
TARGET_DIRS_GGI=1
TARGET_DIRS_LIBPNG=1
TARGET_DIRS_LIBGD=1
TARGET_DIRS_UTMP=1
TARGET_DIRS_BFD=1
TARGET_DIRS_GDBM=1
TARGET_DIRS_NCURSES=1
TARGET_DIRS_TCL=1
TARGET_DIRS_CDROM=1
TARGET_DIRS_IMLIB=1
TARGET_DIRS_GNOME1=1
TARGET_DIRS_FPGTK=1
TARGET_DIRS_UNIXUTIL=1
TARGET_DIRS_NEWT=1
TARGET_DIRS_UUID=1
endif
ifeq ($(FULL_TARGET),sparc-netbsd)
TARGET_DIRS_UNZIP=1
TARGET_DIRS_ZLIB=1
TARGET_DIRS_X11=1
TARGET_DIRS_OPENGL=1
TARGET_DIRS_GTK=1
TARGET_DIRS_SYSLOG=1
TARGET_DIRS_FORMS=1
TARGET_DIRS_SVGALIB=1
TARGET_DIRS_GGI=1
TARGET_DIRS_LIBPNG=1
TARGET_DIRS_LIBGD=1
TARGET_DIRS_UTMP=1
TARGET_DIRS_BFD=1
TARGET_DIRS_GDBM=1
TARGET_DIRS_NCURSES=1
TARGET_DIRS_FPGTK=1
TARGET_DIRS_TCL=1
TARGET_DIRS_IMLIB=1
TARGET_DIRS_GNOME1=1
endif
ifeq ($(FULL_TARGET),x86_64-linux)
TARGET_DIRS_UNZIP=1
TARGET_DIRS_ZLIB=1
TARGET_DIRS_FFTW=1
TARGET_DIRS_X11=1
TARGET_DIRS_OPENGL=1
TARGET_DIRS_GTK=1
TARGET_DIRS_GTK2=1
TARGET_DIRS_SYSLOG=1
TARGET_DIRS_FORMS=1
TARGET_DIRS_SVGALIB=1
TARGET_DIRS_GGI=1
TARGET_DIRS_LIBPNG=1
TARGET_DIRS_LIBGD=1
TARGET_DIRS_UTMP=1
TARGET_DIRS_BFD=1
TARGET_DIRS_GDBM=1
TARGET_DIRS_NCURSES=1
TARGET_DIRS_TCL=1
TARGET_DIRS_CDROM=1
TARGET_DIRS_IMLIB=1
TARGET_DIRS_GNOME1=1
TARGET_DIRS_FPGTK=1
TARGET_DIRS_UNIXUTIL=1
TARGET_DIRS_NEWT=1
TARGET_DIRS_UUID=1
endif
ifeq ($(FULL_TARGET),x86_64-freebsd)
TARGET_DIRS_UNZIP=1
TARGET_DIRS_ZLIB=1
TARGET_DIRS_FFTW=1
TARGET_DIRS_X11=1
TARGET_DIRS_OPENGL=1
TARGET_DIRS_GTK=1
TARGET_DIRS_GTK2=1
TARGET_DIRS_SYSLOG=1
TARGET_DIRS_FORMS=1
TARGET_DIRS_SVGALIB=1
TARGET_DIRS_GGI=1
TARGET_DIRS_LIBPNG=1
TARGET_DIRS_LIBGD=1
TARGET_DIRS_UTMP=1
TARGET_DIRS_BFD=1
TARGET_DIRS_GDBM=1
TARGET_DIRS_NCURSES=1
TARGET_DIRS_FPGTK=1
TARGET_DIRS_TCL=1
TARGET_DIRS_IMLIB=1
TARGET_DIRS_GNOME1=1
endif
ifeq ($(FULL_TARGET),arm-linux)
TARGET_DIRS_UNZIP=1
TARGET_DIRS_ZLIB=1
TARGET_DIRS_FFTW=1
TARGET_DIRS_X11=1
TARGET_DIRS_OPENGL=1
TARGET_DIRS_GTK=1
TARGET_DIRS_GTK2=1
TARGET_DIRS_SYSLOG=1
TARGET_DIRS_FORMS=1
TARGET_DIRS_SVGALIB=1
TARGET_DIRS_GGI=1
TARGET_DIRS_LIBPNG=1
TARGET_DIRS_LIBGD=1
TARGET_DIRS_UTMP=1
TARGET_DIRS_BFD=1
TARGET_DIRS_GDBM=1
TARGET_DIRS_NCURSES=1
TARGET_DIRS_TCL=1
TARGET_DIRS_CDROM=1
TARGET_DIRS_IMLIB=1
TARGET_DIRS_GNOME1=1
TARGET_DIRS_FPGTK=1
TARGET_DIRS_UNIXUTIL=1
TARGET_DIRS_NEWT=1
TARGET_DIRS_UUID=1
endif
ifeq ($(FULL_TARGET),arm-wince)
TARGET_DIRS_UNZIP=1
TARGET_DIRS_ZLIB=1
TARGET_DIRS_TCL=1
TARGET_DIRS_FFTW=1
endif
ifeq ($(FULL_TARGET),powerpc64-linux)
TARGET_DIRS_UNZIP=1
TARGET_DIRS_ZLIB=1
TARGET_DIRS_FFTW=1
TARGET_DIRS_X11=1
TARGET_DIRS_OPENGL=1
TARGET_DIRS_GTK=1
TARGET_DIRS_GTK2=1
TARGET_DIRS_SYSLOG=1
TARGET_DIRS_FORMS=1
TARGET_DIRS_SVGALIB=1
TARGET_DIRS_GGI=1
TARGET_DIRS_LIBPNG=1
TARGET_DIRS_LIBGD=1
TARGET_DIRS_UTMP=1
TARGET_DIRS_BFD=1
TARGET_DIRS_GDBM=1
TARGET_DIRS_NCURSES=1
TARGET_DIRS_TCL=1
TARGET_DIRS_CDROM=1
TARGET_DIRS_IMLIB=1
TARGET_DIRS_GNOME1=1
TARGET_DIRS_FPGTK=1
TARGET_DIRS_UNIXUTIL=1
TARGET_DIRS_NEWT=1
TARGET_DIRS_UUID=1
endif
ifdef TARGET_DIRS_UNZIP
unzip_all:
	$(MAKE) -C unzip all
unzip_debug:
	$(MAKE) -C unzip debug
unzip_smart:
	$(MAKE) -C unzip smart
unzip_release:
	$(MAKE) -C unzip release
unzip_units:
	$(MAKE) -C unzip units
unzip_examples:
	$(MAKE) -C unzip examples
unzip_shared:
	$(MAKE) -C unzip shared
unzip_install:
	$(MAKE) -C unzip install
unzip_sourceinstall:
	$(MAKE) -C unzip sourceinstall
unzip_exampleinstall:
	$(MAKE) -C unzip exampleinstall
unzip_distinstall:
	$(MAKE) -C unzip distinstall
unzip_zipinstall:
	$(MAKE) -C unzip zipinstall
unzip_zipsourceinstall:
	$(MAKE) -C unzip zipsourceinstall
unzip_zipexampleinstall:
	$(MAKE) -C unzip zipexampleinstall
unzip_zipdistinstall:
	$(MAKE) -C unzip zipdistinstall
unzip_clean:
	$(MAKE) -C unzip clean
unzip_distclean:
	$(MAKE) -C unzip distclean
unzip_cleanall:
	$(MAKE) -C unzip cleanall
unzip_info:
	$(MAKE) -C unzip info
unzip_makefiles:
	$(MAKE) -C unzip makefiles
unzip:
	$(MAKE) -C unzip all
.PHONY: unzip_all unzip_debug unzip_smart unzip_release unzip_units unzip_examples unzip_shared unzip_install unzip_sourceinstall unzip_exampleinstall unzip_distinstall unzip_zipinstall unzip_zipsourceinstall unzip_zipexampleinstall unzip_zipdistinstall unzip_clean unzip_distclean unzip_cleanall unzip_info unzip_makefiles unzip
endif
ifdef TARGET_DIRS_ZLIB
zlib_all:
	$(MAKE) -C zlib all
zlib_debug:
	$(MAKE) -C zlib debug
zlib_smart:
	$(MAKE) -C zlib smart
zlib_release:
	$(MAKE) -C zlib release
zlib_units:
	$(MAKE) -C zlib units
zlib_examples:
	$(MAKE) -C zlib examples
zlib_shared:
	$(MAKE) -C zlib shared
zlib_install:
	$(MAKE) -C zlib install
zlib_sourceinstall:
	$(MAKE) -C zlib sourceinstall
zlib_exampleinstall:
	$(MAKE) -C zlib exampleinstall
zlib_distinstall:
	$(MAKE) -C zlib distinstall
zlib_zipinstall:
	$(MAKE) -C zlib zipinstall
zlib_zipsourceinstall:
	$(MAKE) -C zlib zipsourceinstall
zlib_zipexampleinstall:
	$(MAKE) -C zlib zipexampleinstall
zlib_zipdistinstall:
	$(MAKE) -C zlib zipdistinstall
zlib_clean:
	$(MAKE) -C zlib clean
zlib_distclean:
	$(MAKE) -C zlib distclean
zlib_cleanall:
	$(MAKE) -C zlib cleanall
zlib_info:
	$(MAKE) -C zlib info
zlib_makefiles:
	$(MAKE) -C zlib makefiles
zlib:
	$(MAKE) -C zlib all
.PHONY: zlib_all zlib_debug zlib_smart zlib_release zlib_units zlib_examples zlib_shared zlib_install zlib_sourceinstall zlib_exampleinstall zlib_distinstall zlib_zipinstall zlib_zipsourceinstall zlib_zipexampleinstall zlib_zipdistinstall zlib_clean zlib_distclean zlib_cleanall zlib_info zlib_makefiles zlib
endif
ifdef TARGET_DIRS_FFTW
fftw_all:
	$(MAKE) -C fftw all
fftw_debug:
	$(MAKE) -C fftw debug
fftw_smart:
	$(MAKE) -C fftw smart
fftw_release:
	$(MAKE) -C fftw release
fftw_units:
	$(MAKE) -C fftw units
fftw_examples:
	$(MAKE) -C fftw examples
fftw_shared:
	$(MAKE) -C fftw shared
fftw_install:
	$(MAKE) -C fftw install
fftw_sourceinstall:
	$(MAKE) -C fftw sourceinstall
fftw_exampleinstall:
	$(MAKE) -C fftw exampleinstall
fftw_distinstall:
	$(MAKE) -C fftw distinstall
fftw_zipinstall:
	$(MAKE) -C fftw zipinstall
fftw_zipsourceinstall:
	$(MAKE) -C fftw zipsourceinstall
fftw_zipexampleinstall:
	$(MAKE) -C fftw zipexampleinstall
fftw_zipdistinstall:
	$(MAKE) -C fftw zipdistinstall
fftw_clean:
	$(MAKE) -C fftw clean
fftw_distclean:
	$(MAKE) -C fftw distclean
fftw_cleanall:
	$(MAKE) -C fftw cleanall
fftw_info:
	$(MAKE) -C fftw info
fftw_makefiles:
	$(MAKE) -C fftw makefiles
fftw:
	$(MAKE) -C fftw all
.PHONY: fftw_all fftw_debug fftw_smart fftw_release fftw_units fftw_examples fftw_shared fftw_install fftw_sourceinstall fftw_exampleinstall fftw_distinstall fftw_zipinstall fftw_zipsourceinstall fftw_zipexampleinstall fftw_zipdistinstall fftw_clean fftw_distclean fftw_cleanall fftw_info fftw_makefiles fftw
endif
ifdef TARGET_DIRS_X11
x11_all:
	$(MAKE) -C x11 all
x11_debug:
	$(MAKE) -C x11 debug
x11_smart:
	$(MAKE) -C x11 smart
x11_release:
	$(MAKE) -C x11 release
x11_units:
	$(MAKE) -C x11 units
x11_examples:
	$(MAKE) -C x11 examples
x11_shared:
	$(MAKE) -C x11 shared
x11_install:
	$(MAKE) -C x11 install
x11_sourceinstall:
	$(MAKE) -C x11 sourceinstall
x11_exampleinstall:
	$(MAKE) -C x11 exampleinstall
x11_distinstall:
	$(MAKE) -C x11 distinstall
x11_zipinstall:
	$(MAKE) -C x11 zipinstall
x11_zipsourceinstall:
	$(MAKE) -C x11 zipsourceinstall
x11_zipexampleinstall:
	$(MAKE) -C x11 zipexampleinstall
x11_zipdistinstall:
	$(MAKE) -C x11 zipdistinstall
x11_clean:
	$(MAKE) -C x11 clean
x11_distclean:
	$(MAKE) -C x11 distclean
x11_cleanall:
	$(MAKE) -C x11 cleanall
x11_info:
	$(MAKE) -C x11 info
x11_makefiles:
	$(MAKE) -C x11 makefiles
x11:
	$(MAKE) -C x11 all
.PHONY: x11_all x11_debug x11_smart x11_release x11_units x11_examples x11_shared x11_install x11_sourceinstall x11_exampleinstall x11_distinstall x11_zipinstall x11_zipsourceinstall x11_zipexampleinstall x11_zipdistinstall x11_clean x11_distclean x11_cleanall x11_info x11_makefiles x11
endif
ifdef TARGET_DIRS_OPENGL
opengl_all:
	$(MAKE) -C opengl all
opengl_debug:
	$(MAKE) -C opengl debug
opengl_smart:
	$(MAKE) -C opengl smart
opengl_release:
	$(MAKE) -C opengl release
opengl_units:
	$(MAKE) -C opengl units
opengl_examples:
	$(MAKE) -C opengl examples
opengl_shared:
	$(MAKE) -C opengl shared
opengl_install:
	$(MAKE) -C opengl install
opengl_sourceinstall:
	$(MAKE) -C opengl sourceinstall
opengl_exampleinstall:
	$(MAKE) -C opengl exampleinstall
opengl_distinstall:
	$(MAKE) -C opengl distinstall
opengl_zipinstall:
	$(MAKE) -C opengl zipinstall
opengl_zipsourceinstall:
	$(MAKE) -C opengl zipsourceinstall
opengl_zipexampleinstall:
	$(MAKE) -C opengl zipexampleinstall
opengl_zipdistinstall:
	$(MAKE) -C opengl zipdistinstall
opengl_clean:
	$(MAKE) -C opengl clean
opengl_distclean:
	$(MAKE) -C opengl distclean
opengl_cleanall:
	$(MAKE) -C opengl cleanall
opengl_info:
	$(MAKE) -C opengl info
opengl_makefiles:
	$(MAKE) -C opengl makefiles
opengl:
	$(MAKE) -C opengl all
.PHONY: opengl_all opengl_debug opengl_smart opengl_release opengl_units opengl_examples opengl_shared opengl_install opengl_sourceinstall opengl_exampleinstall opengl_distinstall opengl_zipinstall opengl_zipsourceinstall opengl_zipexampleinstall opengl_zipdistinstall opengl_clean opengl_distclean opengl_cleanall opengl_info opengl_makefiles opengl
endif
ifdef TARGET_DIRS_GTK
gtk_all:
	$(MAKE) -C gtk all
gtk_debug:
	$(MAKE) -C gtk debug
gtk_smart:
	$(MAKE) -C gtk smart
gtk_release:
	$(MAKE) -C gtk release
gtk_units:
	$(MAKE) -C gtk units
gtk_examples:
	$(MAKE) -C gtk examples
gtk_shared:
	$(MAKE) -C gtk shared
gtk_install:
	$(MAKE) -C gtk install
gtk_sourceinstall:
	$(MAKE) -C gtk sourceinstall
gtk_exampleinstall:
	$(MAKE) -C gtk exampleinstall
gtk_distinstall:
	$(MAKE) -C gtk distinstall
gtk_zipinstall:
	$(MAKE) -C gtk zipinstall
gtk_zipsourceinstall:
	$(MAKE) -C gtk zipsourceinstall
gtk_zipexampleinstall:
	$(MAKE) -C gtk zipexampleinstall
gtk_zipdistinstall:
	$(MAKE) -C gtk zipdistinstall
gtk_clean:
	$(MAKE) -C gtk clean
gtk_distclean:
	$(MAKE) -C gtk distclean
gtk_cleanall:
	$(MAKE) -C gtk cleanall
gtk_info:
	$(MAKE) -C gtk info
gtk_makefiles:
	$(MAKE) -C gtk makefiles
gtk:
	$(MAKE) -C gtk all
.PHONY: gtk_all gtk_debug gtk_smart gtk_release gtk_units gtk_examples gtk_shared gtk_install gtk_sourceinstall gtk_exampleinstall gtk_distinstall gtk_zipinstall gtk_zipsourceinstall gtk_zipexampleinstall gtk_zipdistinstall gtk_clean gtk_distclean gtk_cleanall gtk_info gtk_makefiles gtk
endif
ifdef TARGET_DIRS_GTK2
gtk2_all:
	$(MAKE) -C gtk2 all
gtk2_debug:
	$(MAKE) -C gtk2 debug
gtk2_smart:
	$(MAKE) -C gtk2 smart
gtk2_release:
	$(MAKE) -C gtk2 release
gtk2_units:
	$(MAKE) -C gtk2 units
gtk2_examples:
	$(MAKE) -C gtk2 examples
gtk2_shared:
	$(MAKE) -C gtk2 shared
gtk2_install:
	$(MAKE) -C gtk2 install
gtk2_sourceinstall:
	$(MAKE) -C gtk2 sourceinstall
gtk2_exampleinstall:
	$(MAKE) -C gtk2 exampleinstall
gtk2_distinstall:
	$(MAKE) -C gtk2 distinstall
gtk2_zipinstall:
	$(MAKE) -C gtk2 zipinstall
gtk2_zipsourceinstall:
	$(MAKE) -C gtk2 zipsourceinstall
gtk2_zipexampleinstall:
	$(MAKE) -C gtk2 zipexampleinstall
gtk2_zipdistinstall:
	$(MAKE) -C gtk2 zipdistinstall
gtk2_clean:
	$(MAKE) -C gtk2 clean
gtk2_distclean:
	$(MAKE) -C gtk2 distclean
gtk2_cleanall:
	$(MAKE) -C gtk2 cleanall
gtk2_info:
	$(MAKE) -C gtk2 info
gtk2_makefiles:
	$(MAKE) -C gtk2 makefiles
gtk2:
	$(MAKE) -C gtk2 all
.PHONY: gtk2_all gtk2_debug gtk2_smart gtk2_release gtk2_units gtk2_examples gtk2_shared gtk2_install gtk2_sourceinstall gtk2_exampleinstall gtk2_distinstall gtk2_zipinstall gtk2_zipsourceinstall gtk2_zipexampleinstall gtk2_zipdistinstall gtk2_clean gtk2_distclean gtk2_cleanall gtk2_info gtk2_makefiles gtk2
endif
ifdef TARGET_DIRS_SYSLOG
syslog_all:
	$(MAKE) -C syslog all
syslog_debug:
	$(MAKE) -C syslog debug
syslog_smart:
	$(MAKE) -C syslog smart
syslog_release:
	$(MAKE) -C syslog release
syslog_units:
	$(MAKE) -C syslog units
syslog_examples:
	$(MAKE) -C syslog examples
syslog_shared:
	$(MAKE) -C syslog shared
syslog_install:
	$(MAKE) -C syslog install
syslog_sourceinstall:
	$(MAKE) -C syslog sourceinstall
syslog_exampleinstall:
	$(MAKE) -C syslog exampleinstall
syslog_distinstall:
	$(MAKE) -C syslog distinstall
syslog_zipinstall:
	$(MAKE) -C syslog zipinstall
syslog_zipsourceinstall:
	$(MAKE) -C syslog zipsourceinstall
syslog_zipexampleinstall:
	$(MAKE) -C syslog zipexampleinstall
syslog_zipdistinstall:
	$(MAKE) -C syslog zipdistinstall
syslog_clean:
	$(MAKE) -C syslog clean
syslog_distclean:
	$(MAKE) -C syslog distclean
syslog_cleanall:
	$(MAKE) -C syslog cleanall
syslog_info:
	$(MAKE) -C syslog info
syslog_makefiles:
	$(MAKE) -C syslog makefiles
syslog:
	$(MAKE) -C syslog all
.PHONY: syslog_all syslog_debug syslog_smart syslog_release syslog_units syslog_examples syslog_shared syslog_install syslog_sourceinstall syslog_exampleinstall syslog_distinstall syslog_zipinstall syslog_zipsourceinstall syslog_zipexampleinstall syslog_zipdistinstall syslog_clean syslog_distclean syslog_cleanall syslog_info syslog_makefiles syslog
endif
ifdef TARGET_DIRS_FORMS
forms_all:
	$(MAKE) -C forms all
forms_debug:
	$(MAKE) -C forms debug
forms_smart:
	$(MAKE) -C forms smart
forms_release:
	$(MAKE) -C forms release
forms_units:
	$(MAKE) -C forms units
forms_examples:
	$(MAKE) -C forms examples
forms_shared:
	$(MAKE) -C forms shared
forms_install:
	$(MAKE) -C forms install
forms_sourceinstall:
	$(MAKE) -C forms sourceinstall
forms_exampleinstall:
	$(MAKE) -C forms exampleinstall
forms_distinstall:
	$(MAKE) -C forms distinstall
forms_zipinstall:
	$(MAKE) -C forms zipinstall
forms_zipsourceinstall:
	$(MAKE) -C forms zipsourceinstall
forms_zipexampleinstall:
	$(MAKE) -C forms zipexampleinstall
forms_zipdistinstall:
	$(MAKE) -C forms zipdistinstall
forms_clean:
	$(MAKE) -C forms clean
forms_distclean:
	$(MAKE) -C forms distclean
forms_cleanall:
	$(MAKE) -C forms cleanall
forms_info:
	$(MAKE) -C forms info
forms_makefiles:
	$(MAKE) -C forms makefiles
forms:
	$(MAKE) -C forms all
.PHONY: forms_all forms_debug forms_smart forms_release forms_units forms_examples forms_shared forms_install forms_sourceinstall forms_exampleinstall forms_distinstall forms_zipinstall forms_zipsourceinstall forms_zipexampleinstall forms_zipdistinstall forms_clean forms_distclean forms_cleanall forms_info forms_makefiles forms
endif
ifdef TARGET_DIRS_SVGALIB
svgalib_all:
	$(MAKE) -C svgalib all
svgalib_debug:
	$(MAKE) -C svgalib debug
svgalib_smart:
	$(MAKE) -C svgalib smart
svgalib_release:
	$(MAKE) -C svgalib release
svgalib_units:
	$(MAKE) -C svgalib units
svgalib_examples:
	$(MAKE) -C svgalib examples
svgalib_shared:
	$(MAKE) -C svgalib shared
svgalib_install:
	$(MAKE) -C svgalib install
svgalib_sourceinstall:
	$(MAKE) -C svgalib sourceinstall
svgalib_exampleinstall:
	$(MAKE) -C svgalib exampleinstall
svgalib_distinstall:
	$(MAKE) -C svgalib distinstall
svgalib_zipinstall:
	$(MAKE) -C svgalib zipinstall
svgalib_zipsourceinstall:
	$(MAKE) -C svgalib zipsourceinstall
svgalib_zipexampleinstall:
	$(MAKE) -C svgalib zipexampleinstall
svgalib_zipdistinstall:
	$(MAKE) -C svgalib zipdistinstall
svgalib_clean:
	$(MAKE) -C svgalib clean
svgalib_distclean:
	$(MAKE) -C svgalib distclean
svgalib_cleanall:
	$(MAKE) -C svgalib cleanall
svgalib_info:
	$(MAKE) -C svgalib info
svgalib_makefiles:
	$(MAKE) -C svgalib makefiles
svgalib:
	$(MAKE) -C svgalib all
.PHONY: svgalib_all svgalib_debug svgalib_smart svgalib_release svgalib_units svgalib_examples svgalib_shared svgalib_install svgalib_sourceinstall svgalib_exampleinstall svgalib_distinstall svgalib_zipinstall svgalib_zipsourceinstall svgalib_zipexampleinstall svgalib_zipdistinstall svgalib_clean svgalib_distclean svgalib_cleanall svgalib_info svgalib_makefiles svgalib
endif
ifdef TARGET_DIRS_GGI
ggi_all:
	$(MAKE) -C ggi all
ggi_debug:
	$(MAKE) -C ggi debug
ggi_smart:
	$(MAKE) -C ggi smart
ggi_release:
	$(MAKE) -C ggi release
ggi_units:
	$(MAKE) -C ggi units
ggi_examples:
	$(MAKE) -C ggi examples
ggi_shared:
	$(MAKE) -C ggi shared
ggi_install:
	$(MAKE) -C ggi install
ggi_sourceinstall:
	$(MAKE) -C ggi sourceinstall
ggi_exampleinstall:
	$(MAKE) -C ggi exampleinstall
ggi_distinstall:
	$(MAKE) -C ggi distinstall
ggi_zipinstall:
	$(MAKE) -C ggi zipinstall
ggi_zipsourceinstall:
	$(MAKE) -C ggi zipsourceinstall
ggi_zipexampleinstall:
	$(MAKE) -C ggi zipexampleinstall
ggi_zipdistinstall:
	$(MAKE) -C ggi zipdistinstall
ggi_clean:
	$(MAKE) -C ggi clean
ggi_distclean:
	$(MAKE) -C ggi distclean
ggi_cleanall:
	$(MAKE) -C ggi cleanall
ggi_info:
	$(MAKE) -C ggi info
ggi_makefiles:
	$(MAKE) -C ggi makefiles
ggi:
	$(MAKE) -C ggi all
.PHONY: ggi_all ggi_debug ggi_smart ggi_release ggi_units ggi_examples ggi_shared ggi_install ggi_sourceinstall ggi_exampleinstall ggi_distinstall ggi_zipinstall ggi_zipsourceinstall ggi_zipexampleinstall ggi_zipdistinstall ggi_clean ggi_distclean ggi_cleanall ggi_info ggi_makefiles ggi
endif
ifdef TARGET_DIRS_LIBPNG
libpng_all:
	$(MAKE) -C libpng all
libpng_debug:
	$(MAKE) -C libpng debug
libpng_smart:
	$(MAKE) -C libpng smart
libpng_release:
	$(MAKE) -C libpng release
libpng_units:
	$(MAKE) -C libpng units
libpng_examples:
	$(MAKE) -C libpng examples
libpng_shared:
	$(MAKE) -C libpng shared
libpng_install:
	$(MAKE) -C libpng install
libpng_sourceinstall:
	$(MAKE) -C libpng sourceinstall
libpng_exampleinstall:
	$(MAKE) -C libpng exampleinstall
libpng_distinstall:
	$(MAKE) -C libpng distinstall
libpng_zipinstall:
	$(MAKE) -C libpng zipinstall
libpng_zipsourceinstall:
	$(MAKE) -C libpng zipsourceinstall
libpng_zipexampleinstall:
	$(MAKE) -C libpng zipexampleinstall
libpng_zipdistinstall:
	$(MAKE) -C libpng zipdistinstall
libpng_clean:
	$(MAKE) -C libpng clean
libpng_distclean:
	$(MAKE) -C libpng distclean
libpng_cleanall:
	$(MAKE) -C libpng cleanall
libpng_info:
	$(MAKE) -C libpng info
libpng_makefiles:
	$(MAKE) -C libpng makefiles
libpng:
	$(MAKE) -C libpng all
.PHONY: libpng_all libpng_debug libpng_smart libpng_release libpng_units libpng_examples libpng_shared libpng_install libpng_sourceinstall libpng_exampleinstall libpng_distinstall libpng_zipinstall libpng_zipsourceinstall libpng_zipexampleinstall libpng_zipdistinstall libpng_clean libpng_distclean libpng_cleanall libpng_info libpng_makefiles libpng
endif
ifdef TARGET_DIRS_LIBGD
libgd_all:
	$(MAKE) -C libgd all
libgd_debug:
	$(MAKE) -C libgd debug
libgd_smart:
	$(MAKE) -C libgd smart
libgd_release:
	$(MAKE) -C libgd release
libgd_units:
	$(MAKE) -C libgd units
libgd_examples:
	$(MAKE) -C libgd examples
libgd_shared:
	$(MAKE) -C libgd shared
libgd_install:
	$(MAKE) -C libgd install
libgd_sourceinstall:
	$(MAKE) -C libgd sourceinstall
libgd_exampleinstall:
	$(MAKE) -C libgd exampleinstall
libgd_distinstall:
	$(MAKE) -C libgd distinstall
libgd_zipinstall:
	$(MAKE) -C libgd zipinstall
libgd_zipsourceinstall:
	$(MAKE) -C libgd zipsourceinstall
libgd_zipexampleinstall:
	$(MAKE) -C libgd zipexampleinstall
libgd_zipdistinstall:
	$(MAKE) -C libgd zipdistinstall
libgd_clean:
	$(MAKE) -C libgd clean
libgd_distclean:
	$(MAKE) -C libgd distclean
libgd_cleanall:
	$(MAKE) -C libgd cleanall
libgd_info:
	$(MAKE) -C libgd info
libgd_makefiles:
	$(MAKE) -C libgd makefiles
libgd:
	$(MAKE) -C libgd all
.PHONY: libgd_all libgd_debug libgd_smart libgd_release libgd_units libgd_examples libgd_shared libgd_install libgd_sourceinstall libgd_exampleinstall libgd_distinstall libgd_zipinstall libgd_zipsourceinstall libgd_zipexampleinstall libgd_zipdistinstall libgd_clean libgd_distclean libgd_cleanall libgd_info libgd_makefiles libgd
endif
ifdef TARGET_DIRS_UTMP
utmp_all:
	$(MAKE) -C utmp all
utmp_debug:
	$(MAKE) -C utmp debug
utmp_smart:
	$(MAKE) -C utmp smart
utmp_release:
	$(MAKE) -C utmp release
utmp_units:
	$(MAKE) -C utmp units
utmp_examples:
	$(MAKE) -C utmp examples
utmp_shared:
	$(MAKE) -C utmp shared
utmp_install:
	$(MAKE) -C utmp install
utmp_sourceinstall:
	$(MAKE) -C utmp sourceinstall
utmp_exampleinstall:
	$(MAKE) -C utmp exampleinstall
utmp_distinstall:
	$(MAKE) -C utmp distinstall
utmp_zipinstall:
	$(MAKE) -C utmp zipinstall
utmp_zipsourceinstall:
	$(MAKE) -C utmp zipsourceinstall
utmp_zipexampleinstall:
	$(MAKE) -C utmp zipexampleinstall
utmp_zipdistinstall:
	$(MAKE) -C utmp zipdistinstall
utmp_clean:
	$(MAKE) -C utmp clean
utmp_distclean:
	$(MAKE) -C utmp distclean
utmp_cleanall:
	$(MAKE) -C utmp cleanall
utmp_info:
	$(MAKE) -C utmp info
utmp_makefiles:
	$(MAKE) -C utmp makefiles
utmp:
	$(MAKE) -C utmp all
.PHONY: utmp_all utmp_debug utmp_smart utmp_release utmp_units utmp_examples utmp_shared utmp_install utmp_sourceinstall utmp_exampleinstall utmp_distinstall utmp_zipinstall utmp_zipsourceinstall utmp_zipexampleinstall utmp_zipdistinstall utmp_clean utmp_distclean utmp_cleanall utmp_info utmp_makefiles utmp
endif
ifdef TARGET_DIRS_BFD
bfd_all:
	$(MAKE) -C bfd all
bfd_debug:
	$(MAKE) -C bfd debug
bfd_smart:
	$(MAKE) -C bfd smart
bfd_release:
	$(MAKE) -C bfd release
bfd_units:
	$(MAKE) -C bfd units
bfd_examples:
	$(MAKE) -C bfd examples
bfd_shared:
	$(MAKE) -C bfd shared
bfd_install:
	$(MAKE) -C bfd install
bfd_sourceinstall:
	$(MAKE) -C bfd sourceinstall
bfd_exampleinstall:
	$(MAKE) -C bfd exampleinstall
bfd_distinstall:
	$(MAKE) -C bfd distinstall
bfd_zipinstall:
	$(MAKE) -C bfd zipinstall
bfd_zipsourceinstall:
	$(MAKE) -C bfd zipsourceinstall
bfd_zipexampleinstall:
	$(MAKE) -C bfd zipexampleinstall
bfd_zipdistinstall:
	$(MAKE) -C bfd zipdistinstall
bfd_clean:
	$(MAKE) -C bfd clean
bfd_distclean:
	$(MAKE) -C bfd distclean
bfd_cleanall:
	$(MAKE) -C bfd cleanall
bfd_info:
	$(MAKE) -C bfd info
bfd_makefiles:
	$(MAKE) -C bfd makefiles
bfd:
	$(MAKE) -C bfd all
.PHONY: bfd_all bfd_debug bfd_smart bfd_release bfd_units bfd_examples bfd_shared bfd_install bfd_sourceinstall bfd_exampleinstall bfd_distinstall bfd_zipinstall bfd_zipsourceinstall bfd_zipexampleinstall bfd_zipdistinstall bfd_clean bfd_distclean bfd_cleanall bfd_info bfd_makefiles bfd
endif
ifdef TARGET_DIRS_GDBM
gdbm_all:
	$(MAKE) -C gdbm all
gdbm_debug:
	$(MAKE) -C gdbm debug
gdbm_smart:
	$(MAKE) -C gdbm smart
gdbm_release:
	$(MAKE) -C gdbm release
gdbm_units:
	$(MAKE) -C gdbm units
gdbm_examples:
	$(MAKE) -C gdbm examples
gdbm_shared:
	$(MAKE) -C gdbm shared
gdbm_install:
	$(MAKE) -C gdbm install
gdbm_sourceinstall:
	$(MAKE) -C gdbm sourceinstall
gdbm_exampleinstall:
	$(MAKE) -C gdbm exampleinstall
gdbm_distinstall:
	$(MAKE) -C gdbm distinstall
gdbm_zipinstall:
	$(MAKE) -C gdbm zipinstall
gdbm_zipsourceinstall:
	$(MAKE) -C gdbm zipsourceinstall
gdbm_zipexampleinstall:
	$(MAKE) -C gdbm zipexampleinstall
gdbm_zipdistinstall:
	$(MAKE) -C gdbm zipdistinstall
gdbm_clean:
	$(MAKE) -C gdbm clean
gdbm_distclean:
	$(MAKE) -C gdbm distclean
gdbm_cleanall:
	$(MAKE) -C gdbm cleanall
gdbm_info:
	$(MAKE) -C gdbm info
gdbm_makefiles:
	$(MAKE) -C gdbm makefiles
gdbm:
	$(MAKE) -C gdbm all
.PHONY: gdbm_all gdbm_debug gdbm_smart gdbm_release gdbm_units gdbm_examples gdbm_shared gdbm_install gdbm_sourceinstall gdbm_exampleinstall gdbm_distinstall gdbm_zipinstall gdbm_zipsourceinstall gdbm_zipexampleinstall gdbm_zipdistinstall gdbm_clean gdbm_distclean gdbm_cleanall gdbm_info gdbm_makefiles gdbm
endif
ifdef TARGET_DIRS_NCURSES
ncurses_all:
	$(MAKE) -C ncurses all
ncurses_debug:
	$(MAKE) -C ncurses debug
ncurses_smart:
	$(MAKE) -C ncurses smart
ncurses_release:
	$(MAKE) -C ncurses release
ncurses_units:
	$(MAKE) -C ncurses units
ncurses_examples:
	$(MAKE) -C ncurses examples
ncurses_shared:
	$(MAKE) -C ncurses shared
ncurses_install:
	$(MAKE) -C ncurses install
ncurses_sourceinstall:
	$(MAKE) -C ncurses sourceinstall
ncurses_exampleinstall:
	$(MAKE) -C ncurses exampleinstall
ncurses_distinstall:
	$(MAKE) -C ncurses distinstall
ncurses_zipinstall:
	$(MAKE) -C ncurses zipinstall
ncurses_zipsourceinstall:
	$(MAKE) -C ncurses zipsourceinstall
ncurses_zipexampleinstall:
	$(MAKE) -C ncurses zipexampleinstall
ncurses_zipdistinstall:
	$(MAKE) -C ncurses zipdistinstall
ncurses_clean:
	$(MAKE) -C ncurses clean
ncurses_distclean:
	$(MAKE) -C ncurses distclean
ncurses_cleanall:
	$(MAKE) -C ncurses cleanall
ncurses_info:
	$(MAKE) -C ncurses info
ncurses_makefiles:
	$(MAKE) -C ncurses makefiles
ncurses:
	$(MAKE) -C ncurses all
.PHONY: ncurses_all ncurses_debug ncurses_smart ncurses_release ncurses_units ncurses_examples ncurses_shared ncurses_install ncurses_sourceinstall ncurses_exampleinstall ncurses_distinstall ncurses_zipinstall ncurses_zipsourceinstall ncurses_zipexampleinstall ncurses_zipdistinstall ncurses_clean ncurses_distclean ncurses_cleanall ncurses_info ncurses_makefiles ncurses
endif
ifdef TARGET_DIRS_TCL
tcl_all:
	$(MAKE) -C tcl all
tcl_debug:
	$(MAKE) -C tcl debug
tcl_smart:
	$(MAKE) -C tcl smart
tcl_release:
	$(MAKE) -C tcl release
tcl_units:
	$(MAKE) -C tcl units
tcl_examples:
	$(MAKE) -C tcl examples
tcl_shared:
	$(MAKE) -C tcl shared
tcl_install:
	$(MAKE) -C tcl install
tcl_sourceinstall:
	$(MAKE) -C tcl sourceinstall
tcl_exampleinstall:
	$(MAKE) -C tcl exampleinstall
tcl_distinstall:
	$(MAKE) -C tcl distinstall
tcl_zipinstall:
	$(MAKE) -C tcl zipinstall
tcl_zipsourceinstall:
	$(MAKE) -C tcl zipsourceinstall
tcl_zipexampleinstall:
	$(MAKE) -C tcl zipexampleinstall
tcl_zipdistinstall:
	$(MAKE) -C tcl zipdistinstall
tcl_clean:
	$(MAKE) -C tcl clean
tcl_distclean:
	$(MAKE) -C tcl distclean
tcl_cleanall:
	$(MAKE) -C tcl cleanall
tcl_info:
	$(MAKE) -C tcl info
tcl_makefiles:
	$(MAKE) -C tcl makefiles
tcl:
	$(MAKE) -C tcl all
.PHONY: tcl_all tcl_debug tcl_smart tcl_release tcl_units tcl_examples tcl_shared tcl_install tcl_sourceinstall tcl_exampleinstall tcl_distinstall tcl_zipinstall tcl_zipsourceinstall tcl_zipexampleinstall tcl_zipdistinstall tcl_clean tcl_distclean tcl_cleanall tcl_info tcl_makefiles tcl
endif
ifdef TARGET_DIRS_CDROM
cdrom_all:
	$(MAKE) -C cdrom all
cdrom_debug:
	$(MAKE) -C cdrom debug
cdrom_smart:
	$(MAKE) -C cdrom smart
cdrom_release:
	$(MAKE) -C cdrom release
cdrom_units:
	$(MAKE) -C cdrom units
cdrom_examples:
	$(MAKE) -C cdrom examples
cdrom_shared:
	$(MAKE) -C cdrom shared
cdrom_install:
	$(MAKE) -C cdrom install
cdrom_sourceinstall:
	$(MAKE) -C cdrom sourceinstall
cdrom_exampleinstall:
	$(MAKE) -C cdrom exampleinstall
cdrom_distinstall:
	$(MAKE) -C cdrom distinstall
cdrom_zipinstall:
	$(MAKE) -C cdrom zipinstall
cdrom_zipsourceinstall:
	$(MAKE) -C cdrom zipsourceinstall
cdrom_zipexampleinstall:
	$(MAKE) -C cdrom zipexampleinstall
cdrom_zipdistinstall:
	$(MAKE) -C cdrom zipdistinstall
cdrom_clean:
	$(MAKE) -C cdrom clean
cdrom_distclean:
	$(MAKE) -C cdrom distclean
cdrom_cleanall:
	$(MAKE) -C cdrom cleanall
cdrom_info:
	$(MAKE) -C cdrom info
cdrom_makefiles:
	$(MAKE) -C cdrom makefiles
cdrom:
	$(MAKE) -C cdrom all
.PHONY: cdrom_all cdrom_debug cdrom_smart cdrom_release cdrom_units cdrom_examples cdrom_shared cdrom_install cdrom_sourceinstall cdrom_exampleinstall cdrom_distinstall cdrom_zipinstall cdrom_zipsourceinstall cdrom_zipexampleinstall cdrom_zipdistinstall cdrom_clean cdrom_distclean cdrom_cleanall cdrom_info cdrom_makefiles cdrom
endif
ifdef TARGET_DIRS_IMLIB
imlib_all:
	$(MAKE) -C imlib all
imlib_debug:
	$(MAKE) -C imlib debug
imlib_smart:
	$(MAKE) -C imlib smart
imlib_release:
	$(MAKE) -C imlib release
imlib_units:
	$(MAKE) -C imlib units
imlib_examples:
	$(MAKE) -C imlib examples
imlib_shared:
	$(MAKE) -C imlib shared
imlib_install:
	$(MAKE) -C imlib install
imlib_sourceinstall:
	$(MAKE) -C imlib sourceinstall
imlib_exampleinstall:
	$(MAKE) -C imlib exampleinstall
imlib_distinstall:
	$(MAKE) -C imlib distinstall
imlib_zipinstall:
	$(MAKE) -C imlib zipinstall
imlib_zipsourceinstall:
	$(MAKE) -C imlib zipsourceinstall
imlib_zipexampleinstall:
	$(MAKE) -C imlib zipexampleinstall
imlib_zipdistinstall:
	$(MAKE) -C imlib zipdistinstall
imlib_clean:
	$(MAKE) -C imlib clean
imlib_distclean:
	$(MAKE) -C imlib distclean
imlib_cleanall:
	$(MAKE) -C imlib cleanall
imlib_info:
	$(MAKE) -C imlib info
imlib_makefiles:
	$(MAKE) -C imlib makefiles
imlib:
	$(MAKE) -C imlib all
.PHONY: imlib_all imlib_debug imlib_smart imlib_release imlib_units imlib_examples imlib_shared imlib_install imlib_sourceinstall imlib_exampleinstall imlib_distinstall imlib_zipinstall imlib_zipsourceinstall imlib_zipexampleinstall imlib_zipdistinstall imlib_clean imlib_distclean imlib_cleanall imlib_info imlib_makefiles imlib
endif
ifdef TARGET_DIRS_GNOME1
gnome1_all:
	$(MAKE) -C gnome1 all
gnome1_debug:
	$(MAKE) -C gnome1 debug
gnome1_smart:
	$(MAKE) -C gnome1 smart
gnome1_release:
	$(MAKE) -C gnome1 release
gnome1_units:
	$(MAKE) -C gnome1 units
gnome1_examples:
	$(MAKE) -C gnome1 examples
gnome1_shared:
	$(MAKE) -C gnome1 shared
gnome1_install:
	$(MAKE) -C gnome1 install
gnome1_sourceinstall:
	$(MAKE) -C gnome1 sourceinstall
gnome1_exampleinstall:
	$(MAKE) -C gnome1 exampleinstall
gnome1_distinstall:
	$(MAKE) -C gnome1 distinstall
gnome1_zipinstall:
	$(MAKE) -C gnome1 zipinstall
gnome1_zipsourceinstall:
	$(MAKE) -C gnome1 zipsourceinstall
gnome1_zipexampleinstall:
	$(MAKE) -C gnome1 zipexampleinstall
gnome1_zipdistinstall:
	$(MAKE) -C gnome1 zipdistinstall
gnome1_clean:
	$(MAKE) -C gnome1 clean
gnome1_distclean:
	$(MAKE) -C gnome1 distclean
gnome1_cleanall:
	$(MAKE) -C gnome1 cleanall
gnome1_info:
	$(MAKE) -C gnome1 info
gnome1_makefiles:
	$(MAKE) -C gnome1 makefiles
gnome1:
	$(MAKE) -C gnome1 all
.PHONY: gnome1_all gnome1_debug gnome1_smart gnome1_release gnome1_units gnome1_examples gnome1_shared gnome1_install gnome1_sourceinstall gnome1_exampleinstall gnome1_distinstall gnome1_zipinstall gnome1_zipsourceinstall gnome1_zipexampleinstall gnome1_zipdistinstall gnome1_clean gnome1_distclean gnome1_cleanall gnome1_info gnome1_makefiles gnome1
endif
ifdef TARGET_DIRS_FPGTK
fpgtk_all:
	$(MAKE) -C fpgtk all
fpgtk_debug:
	$(MAKE) -C fpgtk debug
fpgtk_smart:
	$(MAKE) -C fpgtk smart
fpgtk_release:
	$(MAKE) -C fpgtk release
fpgtk_units:
	$(MAKE) -C fpgtk units
fpgtk_examples:
	$(MAKE) -C fpgtk examples
fpgtk_shared:
	$(MAKE) -C fpgtk shared
fpgtk_install:
	$(MAKE) -C fpgtk install
fpgtk_sourceinstall:
	$(MAKE) -C fpgtk sourceinstall
fpgtk_exampleinstall:
	$(MAKE) -C fpgtk exampleinstall
fpgtk_distinstall:
	$(MAKE) -C fpgtk distinstall
fpgtk_zipinstall:
	$(MAKE) -C fpgtk zipinstall
fpgtk_zipsourceinstall:
	$(MAKE) -C fpgtk zipsourceinstall
fpgtk_zipexampleinstall:
	$(MAKE) -C fpgtk zipexampleinstall
fpgtk_zipdistinstall:
	$(MAKE) -C fpgtk zipdistinstall
fpgtk_clean:
	$(MAKE) -C fpgtk clean
fpgtk_distclean:
	$(MAKE) -C fpgtk distclean
fpgtk_cleanall:
	$(MAKE) -C fpgtk cleanall
fpgtk_info:
	$(MAKE) -C fpgtk info
fpgtk_makefiles:
	$(MAKE) -C fpgtk makefiles
fpgtk:
	$(MAKE) -C fpgtk all
.PHONY: fpgtk_all fpgtk_debug fpgtk_smart fpgtk_release fpgtk_units fpgtk_examples fpgtk_shared fpgtk_install fpgtk_sourceinstall fpgtk_exampleinstall fpgtk_distinstall fpgtk_zipinstall fpgtk_zipsourceinstall fpgtk_zipexampleinstall fpgtk_zipdistinstall fpgtk_clean fpgtk_distclean fpgtk_cleanall fpgtk_info fpgtk_makefiles fpgtk
endif
ifdef TARGET_DIRS_UNIXUTIL
unixutil_all:
	$(MAKE) -C unixutil all
unixutil_debug:
	$(MAKE) -C unixutil debug
unixutil_smart:
	$(MAKE) -C unixutil smart
unixutil_release:
	$(MAKE) -C unixutil release
unixutil_units:
	$(MAKE) -C unixutil units
unixutil_examples:
	$(MAKE) -C unixutil examples
unixutil_shared:
	$(MAKE) -C unixutil shared
unixutil_install:
	$(MAKE) -C unixutil install
unixutil_sourceinstall:
	$(MAKE) -C unixutil sourceinstall
unixutil_exampleinstall:
	$(MAKE) -C unixutil exampleinstall
unixutil_distinstall:
	$(MAKE) -C unixutil distinstall
unixutil_zipinstall:
	$(MAKE) -C unixutil zipinstall
unixutil_zipsourceinstall:
	$(MAKE) -C unixutil zipsourceinstall
unixutil_zipexampleinstall:
	$(MAKE) -C unixutil zipexampleinstall
unixutil_zipdistinstall:
	$(MAKE) -C unixutil zipdistinstall
unixutil_clean:
	$(MAKE) -C unixutil clean
unixutil_distclean:
	$(MAKE) -C unixutil distclean
unixutil_cleanall:
	$(MAKE) -C unixutil cleanall
unixutil_info:
	$(MAKE) -C unixutil info
unixutil_makefiles:
	$(MAKE) -C unixutil makefiles
unixutil:
	$(MAKE) -C unixutil all
.PHONY: unixutil_all unixutil_debug unixutil_smart unixutil_release unixutil_units unixutil_examples unixutil_shared unixutil_install unixutil_sourceinstall unixutil_exampleinstall unixutil_distinstall unixutil_zipinstall unixutil_zipsourceinstall unixutil_zipexampleinstall unixutil_zipdistinstall unixutil_clean unixutil_distclean unixutil_cleanall unixutil_info unixutil_makefiles unixutil
endif
ifdef TARGET_DIRS_NEWT
newt_all:
	$(MAKE) -C newt all
newt_debug:
	$(MAKE) -C newt debug
newt_smart:
	$(MAKE) -C newt smart
newt_release:
	$(MAKE) -C newt release
newt_units:
	$(MAKE) -C newt units
newt_examples:
	$(MAKE) -C newt examples
newt_shared:
	$(MAKE) -C newt shared
newt_install:
	$(MAKE) -C newt install
newt_sourceinstall:
	$(MAKE) -C newt sourceinstall
newt_exampleinstall:
	$(MAKE) -C newt exampleinstall
newt_distinstall:
	$(MAKE) -C newt distinstall
newt_zipinstall:
	$(MAKE) -C newt zipinstall
newt_zipsourceinstall:
	$(MAKE) -C newt zipsourceinstall
newt_zipexampleinstall:
	$(MAKE) -C newt zipexampleinstall
newt_zipdistinstall:
	$(MAKE) -C newt zipdistinstall
newt_clean:
	$(MAKE) -C newt clean
newt_distclean:
	$(MAKE) -C newt distclean
newt_cleanall:
	$(MAKE) -C newt cleanall
newt_info:
	$(MAKE) -C newt info
newt_makefiles:
	$(MAKE) -C newt makefiles
newt:
	$(MAKE) -C newt all
.PHONY: newt_all newt_debug newt_smart newt_release newt_units newt_examples newt_shared newt_install newt_sourceinstall newt_exampleinstall newt_distinstall newt_zipinstall newt_zipsourceinstall newt_zipexampleinstall newt_zipdistinstall newt_clean newt_distclean newt_cleanall newt_info newt_makefiles newt
endif
ifdef TARGET_DIRS_UUID
uuid_all:
	$(MAKE) -C uuid all
uuid_debug:
	$(MAKE) -C uuid debug
uuid_smart:
	$(MAKE) -C uuid smart
uuid_release:
	$(MAKE) -C uuid release
uuid_units:
	$(MAKE) -C uuid units
uuid_examples:
	$(MAKE) -C uuid examples
uuid_shared:
	$(MAKE) -C uuid shared
uuid_install:
	$(MAKE) -C uuid install
uuid_sourceinstall:
	$(MAKE) -C uuid sourceinstall
uuid_exampleinstall:
	$(MAKE) -C uuid exampleinstall
uuid_distinstall:
	$(MAKE) -C uuid distinstall
uuid_zipinstall:
	$(MAKE) -C uuid zipinstall
uuid_zipsourceinstall:
	$(MAKE) -C uuid zipsourceinstall
uuid_zipexampleinstall:
	$(MAKE) -C uuid zipexampleinstall
uuid_zipdistinstall:
	$(MAKE) -C uuid zipdistinstall
uuid_clean:
	$(MAKE) -C uuid clean
uuid_distclean:
	$(MAKE) -C uuid distclean
uuid_cleanall:
	$(MAKE) -C uuid cleanall
uuid_info:
	$(MAKE) -C uuid info
uuid_makefiles:
	$(MAKE) -C uuid makefiles
uuid:
	$(MAKE) -C uuid all
.PHONY: uuid_all uuid_debug uuid_smart uuid_release uuid_units uuid_examples uuid_shared uuid_install uuid_sourceinstall uuid_exampleinstall uuid_distinstall uuid_zipinstall uuid_zipsourceinstall uuid_zipexampleinstall uuid_zipdistinstall uuid_clean uuid_distclean uuid_cleanall uuid_info uuid_makefiles uuid
endif
ifdef TARGET_DIRS_WINUNITS
winunits_all:
	$(MAKE) -C winunits all
winunits_debug:
	$(MAKE) -C winunits debug
winunits_smart:
	$(MAKE) -C winunits smart
winunits_release:
	$(MAKE) -C winunits release
winunits_units:
	$(MAKE) -C winunits units
winunits_examples:
	$(MAKE) -C winunits examples
winunits_shared:
	$(MAKE) -C winunits shared
winunits_install:
	$(MAKE) -C winunits install
winunits_sourceinstall:
	$(MAKE) -C winunits sourceinstall
winunits_exampleinstall:
	$(MAKE) -C winunits exampleinstall
winunits_distinstall:
	$(MAKE) -C winunits distinstall
winunits_zipinstall:
	$(MAKE) -C winunits zipinstall
winunits_zipsourceinstall:
	$(MAKE) -C winunits zipsourceinstall
winunits_zipexampleinstall:
	$(MAKE) -C winunits zipexampleinstall
winunits_zipdistinstall:
	$(MAKE) -C winunits zipdistinstall
winunits_clean:
	$(MAKE) -C winunits clean
winunits_distclean:
	$(MAKE) -C winunits distclean
winunits_cleanall:
	$(MAKE) -C winunits cleanall
winunits_info:
	$(MAKE) -C winunits info
winunits_makefiles:
	$(MAKE) -C winunits makefiles
winunits:
	$(MAKE) -C winunits all
.PHONY: winunits_all winunits_debug winunits_smart winunits_release winunits_units winunits_examples winunits_shared winunits_install winunits_sourceinstall winunits_exampleinstall winunits_distinstall winunits_zipinstall winunits_zipsourceinstall winunits_zipexampleinstall winunits_zipdistinstall winunits_clean winunits_distclean winunits_cleanall winunits_info winunits_makefiles winunits
endif
ifdef TARGET_DIRS_OS2UNITS
os2units_all:
	$(MAKE) -C os2units all
os2units_debug:
	$(MAKE) -C os2units debug
os2units_smart:
	$(MAKE) -C os2units smart
os2units_release:
	$(MAKE) -C os2units release
os2units_units:
	$(MAKE) -C os2units units
os2units_examples:
	$(MAKE) -C os2units examples
os2units_shared:
	$(MAKE) -C os2units shared
os2units_install:
	$(MAKE) -C os2units install
os2units_sourceinstall:
	$(MAKE) -C os2units sourceinstall
os2units_exampleinstall:
	$(MAKE) -C os2units exampleinstall
os2units_distinstall:
	$(MAKE) -C os2units distinstall
os2units_zipinstall:
	$(MAKE) -C os2units zipinstall
os2units_zipsourceinstall:
	$(MAKE) -C os2units zipsourceinstall
os2units_zipexampleinstall:
	$(MAKE) -C os2units zipexampleinstall
os2units_zipdistinstall:
	$(MAKE) -C os2units zipdistinstall
os2units_clean:
	$(MAKE) -C os2units clean
os2units_distclean:
	$(MAKE) -C os2units distclean
os2units_cleanall:
	$(MAKE) -C os2units cleanall
os2units_info:
	$(MAKE) -C os2units info
os2units_makefiles:
	$(MAKE) -C os2units makefiles
os2units:
	$(MAKE) -C os2units all
.PHONY: os2units_all os2units_debug os2units_smart os2units_release os2units_units os2units_examples os2units_shared os2units_install os2units_sourceinstall os2units_exampleinstall os2units_distinstall os2units_zipinstall os2units_zipsourceinstall os2units_zipexampleinstall os2units_zipdistinstall os2units_clean os2units_distclean os2units_cleanall os2units_info os2units_makefiles os2units
endif
ifdef TARGET_DIRS_REXX
rexx_all:
	$(MAKE) -C rexx all
rexx_debug:
	$(MAKE) -C rexx debug
rexx_smart:
	$(MAKE) -C rexx smart
rexx_release:
	$(MAKE) -C rexx release
rexx_units:
	$(MAKE) -C rexx units
rexx_examples:
	$(MAKE) -C rexx examples
rexx_shared:
	$(MAKE) -C rexx shared
rexx_install:
	$(MAKE) -C rexx install
rexx_sourceinstall:
	$(MAKE) -C rexx sourceinstall
rexx_exampleinstall:
	$(MAKE) -C rexx exampleinstall
rexx_distinstall:
	$(MAKE) -C rexx distinstall
rexx_zipinstall:
	$(MAKE) -C rexx zipinstall
rexx_zipsourceinstall:
	$(MAKE) -C rexx zipsourceinstall
rexx_zipexampleinstall:
	$(MAKE) -C rexx zipexampleinstall
rexx_zipdistinstall:
	$(MAKE) -C rexx zipdistinstall
rexx_clean:
	$(MAKE) -C rexx clean
rexx_distclean:
	$(MAKE) -C rexx distclean
rexx_cleanall:
	$(MAKE) -C rexx cleanall
rexx_info:
	$(MAKE) -C rexx info
rexx_makefiles:
	$(MAKE) -C rexx makefiles
rexx:
	$(MAKE) -C rexx all
.PHONY: rexx_all rexx_debug rexx_smart rexx_release rexx_units rexx_examples rexx_shared rexx_install rexx_sourceinstall rexx_exampleinstall rexx_distinstall rexx_zipinstall rexx_zipsourceinstall rexx_zipexampleinstall rexx_zipdistinstall rexx_clean rexx_distclean rexx_cleanall rexx_info rexx_makefiles rexx
endif
ifdef TARGET_DIRS_AMUNITS
amunits_all:
	$(MAKE) -C amunits all
amunits_debug:
	$(MAKE) -C amunits debug
amunits_smart:
	$(MAKE) -C amunits smart
amunits_release:
	$(MAKE) -C amunits release
amunits_units:
	$(MAKE) -C amunits units
amunits_examples:
	$(MAKE) -C amunits examples
amunits_shared:
	$(MAKE) -C amunits shared
amunits_install:
	$(MAKE) -C amunits install
amunits_sourceinstall:
	$(MAKE) -C amunits sourceinstall
amunits_exampleinstall:
	$(MAKE) -C amunits exampleinstall
amunits_distinstall:
	$(MAKE) -C amunits distinstall
amunits_zipinstall:
	$(MAKE) -C amunits zipinstall
amunits_zipsourceinstall:
	$(MAKE) -C amunits zipsourceinstall
amunits_zipexampleinstall:
	$(MAKE) -C amunits zipexampleinstall
amunits_zipdistinstall:
	$(MAKE) -C amunits zipdistinstall
amunits_clean:
	$(MAKE) -C amunits clean
amunits_distclean:
	$(MAKE) -C amunits distclean
amunits_cleanall:
	$(MAKE) -C amunits cleanall
amunits_info:
	$(MAKE) -C amunits info
amunits_makefiles:
	$(MAKE) -C amunits makefiles
amunits:
	$(MAKE) -C amunits all
.PHONY: amunits_all amunits_debug amunits_smart amunits_release amunits_units amunits_examples amunits_shared amunits_install amunits_sourceinstall amunits_exampleinstall amunits_distinstall amunits_zipinstall amunits_zipsourceinstall amunits_zipexampleinstall amunits_zipdistinstall amunits_clean amunits_distclean amunits_cleanall amunits_info amunits_makefiles amunits
endif
ifdef TARGET_DIRS_PALMUNITS
palmunits_all:
	$(MAKE) -C palmunits all
palmunits_debug:
	$(MAKE) -C palmunits debug
palmunits_smart:
	$(MAKE) -C palmunits smart
palmunits_release:
	$(MAKE) -C palmunits release
palmunits_units:
	$(MAKE) -C palmunits units
palmunits_examples:
	$(MAKE) -C palmunits examples
palmunits_shared:
	$(MAKE) -C palmunits shared
palmunits_install:
	$(MAKE) -C palmunits install
palmunits_sourceinstall:
	$(MAKE) -C palmunits sourceinstall
palmunits_exampleinstall:
	$(MAKE) -C palmunits exampleinstall
palmunits_distinstall:
	$(MAKE) -C palmunits distinstall
palmunits_zipinstall:
	$(MAKE) -C palmunits zipinstall
palmunits_zipsourceinstall:
	$(MAKE) -C palmunits zipsourceinstall
palmunits_zipexampleinstall:
	$(MAKE) -C palmunits zipexampleinstall
palmunits_zipdistinstall:
	$(MAKE) -C palmunits zipdistinstall
palmunits_clean:
	$(MAKE) -C palmunits clean
palmunits_distclean:
	$(MAKE) -C palmunits distclean
palmunits_cleanall:
	$(MAKE) -C palmunits cleanall
palmunits_info:
	$(MAKE) -C palmunits info
palmunits_makefiles:
	$(MAKE) -C palmunits makefiles
palmunits:
	$(MAKE) -C palmunits all
.PHONY: palmunits_all palmunits_debug palmunits_smart palmunits_release palmunits_units palmunits_examples palmunits_shared palmunits_install palmunits_sourceinstall palmunits_exampleinstall palmunits_distinstall palmunits_zipinstall palmunits_zipsourceinstall palmunits_zipexampleinstall palmunits_zipdistinstall palmunits_clean palmunits_distclean palmunits_cleanall palmunits_info palmunits_makefiles palmunits
endif
all: $(addsuffix _all,$(TARGET_DIRS))
debug: $(addsuffix _debug,$(TARGET_DIRS))
smart: $(addsuffix _smart,$(TARGET_DIRS))
release: $(addsuffix _release,$(TARGET_DIRS))
units: $(addsuffix _units,$(TARGET_DIRS))
examples: $(addsuffix _examples,$(TARGET_DIRS))
shared: $(addsuffix _shared,$(TARGET_DIRS))
install: $(addsuffix _install,$(TARGET_DIRS))
sourceinstall: $(addsuffix _sourceinstall,$(TARGET_DIRS))
exampleinstall: $(addsuffix _exampleinstall,$(TARGET_DIRS))
distinstall: $(addsuffix _distinstall,$(TARGET_DIRS))
zipinstall: $(addsuffix _zipinstall,$(TARGET_DIRS))
zipsourceinstall: $(addsuffix _zipsourceinstall,$(TARGET_DIRS))
zipexampleinstall: $(addsuffix _zipexampleinstall,$(TARGET_DIRS))
zipdistinstall: $(addsuffix _zipdistinstall,$(TARGET_DIRS))
clean: $(addsuffix _clean,$(TARGET_DIRS))
distclean: $(addsuffix _distclean,$(TARGET_DIRS))
cleanall: $(addsuffix _cleanall,$(TARGET_DIRS))
info: fpc_info
makefiles: fpc_makefiles $(addsuffix _makefiles,$(TARGET_DIRS))
.PHONY: all debug smart release units examples shared install sourceinstall exampleinstall distinstall zipinstall zipsourceinstall zipexampleinstall zipdistinstall clean distclean cleanall info makefiles
ifneq ($(wildcard fpcmake.loc),)
include fpcmake.loc
endif
