(*
 * Summary: interface for all global variables of the library
 * Description: all the global variables and thread handling for
 *              those variables is handled by this module.
 *
 * The bottom of this file is automatically generated by build_glob.py
 * based on the description file global.data
 *
 * Copy: See Copyright for the status of this software.
 *
 * Author: Gary Pennington <Gary.Pennington@uk.sun.com>, Daniel Veillard
 *)

{$IFDEF POINTER}
  xmlGlobalStatePtr = ^xmlGlobalState;
  xmlRegisterNodeFuncPtr = ^xmlRegisterNodeFunc;
  xmlDeregisterNodeFuncPtr = ^xmlDeregisterNodeFunc;
  xmlParserInputBufferCreateFilenameFuncPtr = ^xmlParserInputBufferCreateFilenameFunc;
  xmlOutputBufferCreateFilenameFuncPtr = ^xmlOutputBufferCreateFilenameFunc;
{$ENDIF}

{$IFDEF FUNCTION}
procedure xmlInitGlobals; XMLCALL; XMLPUBFUN;
procedure xmlCleanupGlobals; XMLCALL; XMLPUBFUN;
{$ENDIF}

{$IFDEF TYPE}
  xmlParserInputBufferCreateFilenameFunc = function(URI: pchar; enc: xmlCharEncoding): xmlParserInputBufferPtr; XMLCALL;
  xmlOutputBufferCreateFilenameFunc = function(URI: pchar; encoder: xmlCharEncodingHandlerPtr; compression: cint): xmlOutputBufferPtr; XMLCALL;
{$ENDIF}

{$IFDEF FUNCTION}
function xmlParserInputBufferCreateFilenameDefault(func: xmlParserInputBufferCreateFilenameFunc): xmlParserInputBufferCreateFilenameFunc; XMLCALL; XMLPUBFUN;
function xmlOutputBufferCreateFilenameDefault(func: xmlOutputBufferCreateFilenameFunc): xmlOutputBufferCreateFilenameFunc; XMLCALL; XMLPUBFUN;
{$ENDIF}

(*
 * Externally global symbols which need to be protected for backwards
 * compatibility support.
 *)

{$IFDEF TYPE}
  xmlRegisterNodeFunc = procedure(node: xmlNodePtr); XMLCALL;
  xmlDeregisterNodeFunc = procedure(node: xmlNodePtr); XMLCALL;

  xmlGlobalState = record
    xmlParserVersion                        : pchar;

    xmlDefaultSAXLocator                    : xmlSAXLocator;
    xmlDefaultSAXHandler                    : xmlSAXHandlerV1;
    docbDefaultSAXHandler                   : xmlSAXHandlerV1;
    htmlDefaultSAXHandler                   : xmlSAXHandlerV1;

    xmlFree                                 : xmlFreeFunc;
    xmlMalloc                               : xmlMallocFunc;
    xmlMemStrdup                            : xmlStrdupFunc;
    xmlRealloc                              : xmlReallocFunc;

    xmlGenericError                         : xmlGenericErrorFunc;
    xmlStructuredError                      : xmlStructuredErrorFunc;
    xmlGenericErrorContext                  : pointer;

    oldXMLWDcompatibility                   : cint;

    xmlBufferAllocScheme                    : xmlBufferAllocationScheme;
    xmlDefaultBufferSize                    : cint;

    xmlSubstituteEntitiesDefaultValue       : cint;
    xmlDoValidityCheckingDefaultValue       : cint;
    xmlGetWarningsDefaultValue              : cint;
    xmlKeepBlanksDefaultValue               : cint;
    xmlLineNumbersDefaultValue              : cint;
    xmlLoadExtDtdDefaultValue               : cint;
    xmlParserDebugEntities                  : cint;
    xmlPedanticParserDefaultValue           : cint;

    xmlSaveNoEmptyTags                      : cint;
    xmlIndentTreeOutput                     : cint;
    xmlTreeIndentString                     : pchar;

    xmlRegisterNodeDefaultValue             : xmlRegisterNodeFunc;
    xmlDeregisterNodeDefaultValue           : xmlDeregisterNodeFunc;

    xmlMallocAtomic                         : xmlMallocFunc;
    xmlLastError                            : xmlError;

    xmlParserInputBufferCreateFilenameValue : xmlParserInputBufferCreateFilenameFunc;
    xmlOutputBufferCreateFilenameValue      : xmlOutputBufferCreateFilenameFunc;
  end;
{$ENDIF}

{$IFDEF FUNCTION}
procedure xmlInitializeGlobalState(gs: xmlGlobalStatePtr); XMLCALL; XMLPUBFUN;
procedure xmlThrDefSetGenericErrorFunc(ctx: pointer; handler: xmlGenericErrorFunc); XMLCALL; XMLPUBFUN;
procedure xmlThrDefSetStructuredErrorFunc(ctx: pointer; handler: xmlStructuredErrorFunc); XMLCALL; XMLPUBFUN;

function xmlRegisterNodeDefault(func: xmlRegisterNodeFunc): xmlRegisterNodeFunc; XMLCALL; XMLPUBFUN;
function xmlThrDefRegisterNodeDefault(func: xmlRegisterNodeFunc): xmlRegisterNodeFunc; XMLCALL; XMLPUBFUN;
function xmlDeregisterNodeDefault(func: xmlRegisterNodeFunc): xmlDeregisterNodeFunc; XMLCALL; XMLPUBFUN;
function xmlThrDefDeregisterNodeDefault(func: xmlRegisterNodeFunc): xmlDeregisterNodeFunc; XMLCALL; XMLPUBFUN;

function xmlDeregisterNodeDefault(func: xmlOutputBufferCreateFilenameFunc): xmlOutputBufferCreateFilenameFunc; XMLCALL; XMLPUBFUN;
function xmlThrDefDeregisterNodeDefault(func: xmlParserInputBufferCreateFilenameFunc): xmlParserInputBufferCreateFilenameFunc; XMLCALL; XMLPUBFUN;

(** DOC_DISABLE *)
(*
 * In general the memory allocation entry points are not kept
 * thread specific but this can be overridden by LIBXML_THREAD_ALLOC_ENABLED
 *    - xmlMalloc
 *    - xmlMallocAtomic
 *    - xmlRealloc
 *    - xmlMemStrdup
 *    - xmlFree
 *)

{$IFDEF LIBXML_THREAD_ALLOC_ENABLED}
{$IFDEF LIBXML_THREAD_ENABLED}
function __xmlMalloc: xmlMallocFuncPtr; XMLCALL; XMLPUBFUN;
{$DEFINE xmlMalloc := __xmlMalloc()^ }
{$ELSE}
var
  xmlMalloc: xmlMallocFunc; {$IFNDEF NO_EXTERNAL_VARS}XMLPUBVAR;{$ENDIF}
{$ENDIF}

{$IFDEF LIBXML_THREAD_ENABLED}
function __xmlMallocAtomic: xmlMallocFuncPtr; XMLCALL; XMLPUBFUN;
#define xmlMallocAtomic ( *(__xmlMallocAtomic()))
{$ELSE}
var
  xmlMallocAtomic: xmlMallocFunc; {$IFNDEF NO_EXTERNAL_VARS}XMLPUBVAR;{$ENDIF}
{$ENDIF}

{$IFDEF LIBXML_THREAD_ENABLED}
function __xmlRealloc: xmlReallocFuncPtr; XMLCALL; XMLPUBFUN;
#define xmlRealloc ( *(__xmlRealloc()))
{$ELSE}
var
  xmlRealloc: xmlReallocFunc; {$IFNDEF NO_EXTERNAL_VARS}XMLPUBVAR;{$ENDIF}
{$ENDIF}

{$IFDEF LIBXML_THREAD_ENABLED}
function __xmlFree: xmlFreeFuncPtr; XMLCALL; XMLPUBFUN;
#define xmlFree ( *(__xmlFree()))
{$ELSE}
var
  xmlFree: xmlFreeFunc; {$IFNDEF NO_EXTERNAL_VARS}XMLPUBVAR;{$ENDIF}
{$ENDIF}

{$IFDEF LIBXML_THREAD_ENABLED}
function __xmlMemStrdup: xmlStrdupFuncPtr; XMLCALL; XMLPUBFUN;
#define xmlMemStrdup ( *(__xmlMemStrdup()))
{$ELSE}
var
  xmlMemStrdup: xmlStrdupFunc; {$IFNDEF NO_EXTERNAL_VARS}XMLPUBVAR;{$ENDIF}
{$ENDIF}

{$ELSE} (* !LIBXML_THREAD_ALLOC_ENABLED *)
var
  xmlMalloc: xmlMallocFunc; {$IFNDEF NO_EXTERNAL_VARS}XMLPUBVAR;{$ENDIF}
  xmlMallocAtomic: xmlMallocFunc; {$IFNDEF NO_EXTERNAL_VARS}XMLPUBVAR;{$ENDIF}
  xmlRealloc: xmlReallocFunc; {$IFNDEF NO_EXTERNAL_VARS}XMLPUBVAR;{$ENDIF}
  xmlFree: xmlFreeFunc; {$IFNDEF NO_EXTERNAL_VARS}XMLPUBVAR;{$ENDIF}
  xmlMemStrdup: xmlStrdupFunc; {$IFNDEF NO_EXTERNAL_VARS}XMLPUBVAR;{$ENDIF}
{$ENDIF} (* LIBXML_THREAD_ALLOC_ENABLED *)

{$IFDEF LIBXML_DOCB_ENABLED}
function __docbDefaultSAXHandler: xmlSAXHandlerV1Ptr; XMLCALL; XMLPUBFUN;
{$IFDEF LIBXML_THREAD_ENABLED}
{$DEFINE docbDefaultSAXHandler := __docbDefaultSAXHandler()^ }
{$ELSE}
{$IFNDEF NO_EXTERNAL_VARS}
var
  docbDefaultSAXHandler: xmlSAXHandlerV1; XMLPUBVAR;
{$ENDIF}
{$ENDIF}
{$ENDIF}

{$IFDEF LIBXML_HTML_ENABLED}
function __htmlDefaultSAXHandler: xmlSAXHandlerV1Ptr; XMLCALL; XMLPUBFUN;
{$IFDEF LIBXML_THREAD_ENABLED}
{$DEFINE htmlDefaultSAXHandler := __htmlDefaultSAXHandler()^ }
{$ELSE}
{$IFNDEF NO_EXTERNAL_VARS}
var
  htmlDefaultSAXHandler: xmlSAXHandlerV1; XMLPUBVAR;
{$ENDIF}
{$ENDIF}
{$ENDIF}

function __xmlLastError: xmlErrorPtr; XMLCALL; XMLPUBFUN;
{$IFDEF LIBXML_THREAD_ENABLED}
{$DEFINE xmlLastError := __xmlLastError()^ }
{$ELSE}
{$IFNDEF NO_EXTERNAL_VARS}
var
  xmlLastError: xmlError; XMLPUBVAR;
{$ENDIF}
{$ENDIF}

(*
 * Everything starting from the line below is
 * Automatically generated by build_glob.py.
 * Do not modify the previous line.
 *)

function __oldXMLWDcompatibility: pcint; XMLCALL; XMLPUBFUN;
{$IFDEF LIBXML_THREAD_ENABLED}
{$DEFINE oldXMLWDcompatibility := __oldXMLWDcompatibility()^ }
{$ELSE}
{$IFNDEF NO_EXTERNAL_VARS}
var
  oldXMLWDcompatibility: cint; XMLPUBVAR;
  {$ENDIF}
{$ENDIF}

function __xmlBufferAllocScheme: xmlBufferAllocationSchemePtr; XMLCALL; XMLPUBFUN;
{$IFDEF LIBXML_THREAD_ENABLED}
{$DEFINE xmlBufferAllocScheme := __xmlBufferAllocScheme()^ }
{$ELSE}
{$IFNDEF NO_EXTERNAL_VARS}
var
  xmlBufferAllocScheme: xmlBufferAllocationScheme; XMLPUBVAR;
{$ENDIF}
{$ENDIF}
function xmlThrDefBufferAllocScheme(v: xmlBufferAllocationScheme): xmlBufferAllocationScheme; XMLCALL; XMLPUBFUN;

function __xmlDefaultBufferSize: pcint; XMLCALL; XMLPUBFUN;
{$IFDEF LIBXML_THREAD_ENABLED}
{$DEFINE xmlDefaultBufferSize := __xmlDefaultBufferSize()^ }
{$ELSE}
{$IFNDEF NO_EXTERNAL_VARS}
var
  xmlDefaultBufferSize: cint; XMLPUBVAR;
{$ENDIF}
{$ENDIF}
function xmlThrDefDefaultBufferSize(v: cint): cint; XMLCALL; XMLPUBFUN;

function __xmlDefaultSAXHandler: xmlSAXHandlerV1Ptr; XMLCALL; XMLPUBFUN;
{$IFDEF LIBXML_THREAD_ENABLED}
{$DEFINE xmlDefaultSAXHandler := __xmlDefaultSAXHandler()^ }
{$ELSE}
{$IFNDEF NO_EXTERNAL_VARS}
var
  xmlDefaultSAXHandler: xmlSAXHandlerV1; XMLPUBVAR;
{$ENDIF}
{$ENDIF}

function __xmlDefaultSAXLocator: xmlSAXLocatorPtr; XMLCALL; XMLPUBFUN;
{$IFDEF LIBXML_THREAD_ENABLED}
{$DEFINE xmlDefaultSAXLocator := __xmlDefaultSAXLocator()^ }
{$ELSE}
{$IFNDEF NO_EXTERNAL_VARS}
var
  xmlDefaultSAXLocator: xmlSAXLocator; XMLPUBVAR;
{$ENDIF}
{$ENDIF}

function __xmlDoValidityCheckingDefaultValue: pcint; XMLCALL; XMLPUBFUN;
{$IFDEF LIBXML_THREAD_ENABLED}
{$DEFINE xmlDoValidityCheckingDefaultValue := __xmlDoValidityCheckingDefaultValue()^ }
{$ELSE}
{$IFNDEF NO_EXTERNAL_VARS}
var
  xmlDoValidityCheckingDefaultValue: cint; XMLPUBVAR;
{$ENDIF}
{$ENDIF}
function xmlThrDefDoValidityCheckingDefaultValue(v: cint): cint; XMLCALL; XMLPUBFUN;

function __xmlGenericError: xmlGenericErrorFuncPtr; XMLCALL; XMLPUBFUN;
{$IFDEF LIBXML_THREAD_ENABLED}
{$DEFINE xmlGenericError := __xmlGenericError()^ }
{$ELSE}
{$IFNDEF NO_EXTERNAL_VARS}
var
  xmlGenericError: xmlGenericErrorFunc; XMLPUBVAR;
{$ENDIF}
{$ENDIF}

function __xmlStructuredError: xmlStructuredErrorFuncPtr; XMLCALL; XMLPUBFUN;
{$IFDEF LIBXML_THREAD_ENABLED}
{$DEFINE xmlStructuredError := __xmlStructuredError()^ }
{$ELSE}
{$IFNDEF NO_EXTERNAL_VARS}
var
  xmlStructuredError: xmlStructuredErrorFunc; XMLPUBVAR;
{$ENDIF}
{$ENDIF}

function __xmlGenericErrorContext: ppointer; XMLCALL; XMLPUBFUN;
{$IFDEF LIBXML_THREAD_ENABLED}
{$DEFINE xmlGenericErrorContext := __xmlGenericErrorContext()^ }
{$ELSE}
{$IFNDEF NO_EXTERNAL_VARS}
var
  xmlGenericErrorContext: pointer; XMLPUBVAR;
{$ENDIF}
{$ENDIF}

function __xmlGetWarningsDefaultValue: pcint; XMLCALL; XMLPUBFUN;
{$IFDEF LIBXML_THREAD_ENABLED}
{$DEFINE xmlGetWarningsDefaultValue := __xmlGetWarningsDefaultValue()^ }
{$ELSE}
{$IFNDEF NO_EXTERNAL_VARS}
var
  xmlGetWarningsDefaultValue: cint; XMLPUBVAR;
{$ENDIF}
{$ENDIF}
function xmlThrDefGetWarningsDefaultValue(v: cint): cint; XMLCALL; XMLPUBFUN;

function __xmlIndentTreeOutput: pcint; XMLCALL; XMLPUBFUN;
{$IFDEF LIBXML_THREAD_ENABLED}
{$DEFINE xmlIndentTreeOutput := __xmlIndentTreeOutput()^ }
{$ELSE}
{$IFNDEF NO_EXTERNAL_VARS}
var
  xmlIndentTreeOutput: cint; XMLPUBVAR;
{$ENDIF}
{$ENDIF}
function xmlThrDefIndentTreeOutput(v: cint): cint; XMLCALL; XMLPUBFUN;

function __xmlTreeIndentString: ppchar; XMLCALL; XMLPUBFUN;
{$IFDEF LIBXML_THREAD_ENABLED}
{$DEFINE xmlTreeIndentString := __xmlTreeIndentString()^ }
{$ELSE}
{$IFNDEF NO_EXTERNAL_VARS}
var
  xmlTreeIndentString: pchar; XMLPUBVAR;
{$ENDIF}
{$ENDIF}
function xmlThrDefTreeIndentString(v: pchar): pchar; XMLCALL; XMLPUBFUN;

function __xmlKeepBlanksDefaultValue: pcint; XMLCALL; XMLPUBFUN;
{$IFDEF LIBXML_THREAD_ENABLED}
{$DEFINE xmlKeepBlanksDefaultValue := __xmlKeepBlanksDefaultValue()^ }
{$ELSE}
{$IFNDEF NO_EXTERNAL_VARS}
var
  xmlKeepBlanksDefaultValue: cint; XMLPUBVAR;
{$ENDIF}
{$ENDIF}
function xmlThrDefKeepBlanksDefaultValue(v: cint): cint; XMLCALL; XMLPUBFUN;

function __xmlLineNumbersDefaultValue: pcint; XMLCALL; XMLPUBFUN;
{$IFDEF LIBXML_THREAD_ENABLED}
{$DEFINE xmlLineNumbersDefaultValue := __xmlLineNumbersDefaultValue()^ }
{$ELSE}
{$IFNDEF NO_EXTERNAL_VARS}
var
  xmlLineNumbersDefaultValue: cint; XMLPUBVAR;
{$ENDIF}
{$ENDIF}
function xmlThrDefLineNumbersDefaultValue(v: cint): cint; XMLCALL; XMLPUBFUN;

function __xmlLoadExtDtdDefaultValue: pcint; XMLCALL; XMLPUBFUN;
{$IFDEF LIBXML_THREAD_ENABLED}
{$DEFINE xmlLoadExtDtdDefaultValue := __xmlLoadExtDtdDefaultValue()^ }
{$ELSE}
{$IFNDEF NO_EXTERNAL_VARS}
var
  xmlLoadExtDtdDefaultValue: cint; XMLPUBVAR;
{$ENDIF}
{$ENDIF}
function xmlThrDefLoadExtDtdDefaultValue(v: cint): cint; XMLCALL; XMLPUBFUN;

function __xmlParserDebugEntities: pcint; XMLCALL; XMLPUBFUN;
{$IFDEF LIBXML_THREAD_ENABLED}
{$DEFINE xmlParserDebugEntities := __xmlParserDebugEntities()^ }
{$ELSE}
{$IFNDEF NO_EXTERNAL_VARS}
var
  xmlParserDebugEntities: cint; XMLPUBVAR;
{$ENDIF}
{$ENDIF}
function xmlThrDefParserDebugEntities(v: cint): cint; XMLCALL; XMLPUBFUN;

function __xmlParserVersion: ppchar; XMLCALL; XMLPUBFUN;
{$IFDEF LIBXML_THREAD_ENABLED}
{$DEFINE xmlParserVersion := __xmlParserVersion()^ }
{$ELSE}
{$IFNDEF NO_EXTERNAL_VARS}
var
  xmlParserVersion: pchar; XMLPUBVAR;
{$ENDIF}
{$ENDIF}

function __xmlPedanticParserDefaultValue: pcint; XMLCALL; XMLPUBFUN;
{$IFDEF LIBXML_THREAD_ENABLED}
{$DEFINE xmlPedanticParserDefaultValue := __xmlPedanticParserDefaultValue()^ }
{$ELSE}
{$IFNDEF NO_EXTERNAL_VARS}
var
  xmlPedanticParserDefaultValue: cint; XMLPUBVAR;
{$ENDIF}
{$ENDIF}
function xmlThrDefPedanticParserDefaultValue(v: cint): cint; XMLCALL; XMLPUBFUN;

function __xmlSaveNoEmptyTags: pcint; XMLCALL; XMLPUBFUN;
{$IFDEF LIBXML_THREAD_ENABLED}
{$DEFINE xmlSaveNoEmptyTags := __xmlSaveNoEmptyTags()^ }
{$ELSE}
{$IFNDEF NO_EXTERNAL_VARS}
var
  xmlSaveNoEmptyTags: cint; XMLPUBVAR;
{$ENDIF}
{$ENDIF}
function xmlThrDefSaveNoEmptyTags(v: cint): cint; XMLCALL; XMLPUBFUN;

function __xmlSubstituteEntitiesDefaultValue: pcint; XMLCALL; XMLPUBFUN;
{$IFDEF LIBXML_THREAD_ENABLED}
{$DEFINE xmlSubstituteEntitiesDefaultValue := __xmlSubstituteEntitiesDefaultValue()^ }
{$ELSE}
{$IFNDEF NO_EXTERNAL_VARS}
var
  xmlSubstituteEntitiesDefaultValue: cint; XMLPUBVAR;
{$ENDIF}
{$ENDIF}
function xmlThrDefSubstituteEntitiesDefaultValue(v: cint): cint; XMLCALL; XMLPUBFUN;

function __xmlRegisterNodeDefaultValue: xmlRegisterNodeFuncPtr; XMLCALL; XMLPUBFUN;
{$IFDEF LIBXML_THREAD_ENABLED}
{$DEFINE xmlRegisterNodeDefaultValue := __xmlRegisterNodeDefaultValue()^ }
{$ELSE}
{$IFNDEF NO_EXTERNAL_VARS}
var
  xmlRegisterNodeDefaultValue: xmlRegisterNodeFunc; XMLPUBVAR;
{$ENDIF}
{$ENDIF}

function __xmlDeregisterNodeDefaultValue: xmlDeregisterNodeFuncPtr; XMLCALL; XMLPUBFUN;
{$IFDEF LIBXML_THREAD_ENABLED}
{$DEFINE xmlDeregisterNodeDefaultValue := __xmlDeregisterNodeDefaultValue()^ }
{$ELSE}
{$IFNDEF NO_EXTERNAL_VARS}
var
  xmlDeregisterNodeDefaultValue: xmlDeregisterNodeFunc; XMLPUBVAR;
{$ENDIF}
{$ENDIF}

function __xmlParserInputBufferCreateFilenameValue: xmlParserInputBufferCreateFilenameFuncPtr; XMLCALL; XMLPUBFUN;
{$IFDEF LIBXML_THREAD_ENABLED}
{$DEFINE xmlParserInputBufferCreateFilenameValue := __xmlParserInputBufferCreateFilenameValue()^ }
{$ELSE}
{$IFNDEF NO_EXTERNAL_VARS}
var
  xmlParserInputBufferCreateFilenameValue: xmlParserInputBufferCreateFilenameFunc; XMLPUBVAR;
{$ENDIF}
{$ENDIF}

function __xmlOutputBufferCreateFilenameValue: xmlOutputBufferCreateFilenameFuncPtr; XMLCALL; XMLPUBFUN;
{$IFDEF LIBXML_THREAD_ENABLED}
{$DEFINE xmlOutputBufferCreateFilenameValue := __xmlOutputBufferCreateFilenameValue()^ }
{$ELSE}
{$IFNDEF NO_EXTERNAL_VARS}
var
  xmlOutputBufferCreateFilenameValue: xmlOutputBufferCreateFilenameFunc; XMLPUBVAR;
{$ENDIF}
{$ENDIF}

{$ENDIF}
