(*
 * Summary: interface for all global variables of the library
 * Description: all the global variables and thread handling for
 *              those variables is handled by this module.
 *
 * The bottom of this file is automatically generated by build_glob.py
 * based on the description file global.data
 *
 * Copy: See Copyright for the status of this software.
 *
 * Author: Gary Pennington <Gary.Pennington@uk.sun.com>, Daniel Veillard
 *)

{$IFDEF FUNCTION}
procedure xmlInitGlobals; cdecl; external;
procedure xmlCleanupGlobals; cdecl; external;
{$ENDIF}

{$IFDEF TYPE}
  xmlParserInputBufferCreateFilenameFunc = function(URI: pchar; enc: xmlCharEncoding): xmlParserInputBufferPtr; cdecl;
  xmlOutputBufferCreateFilenameFunc = function(URI: pchar; encoder: xmlCharEncodingHandlerPtr; compression: cint): xmlOutputBufferPtr; cdecl;
{$ENDIF}

{$IFDEF FUNCTION}
function xmlParserInputBufferCreateFilenameDefault(func: xmlParserInputBufferCreateFilenameFunc): xmlParserInputBufferCreateFilenameFunc; cdecl; external;
function xmlOutputBufferCreateFilenameDefault(func: xmlOutputBufferCreateFilenameFunc): xmlOutputBufferCreateFilenameFunc; cdecl; external;
{$ENDIF}

(*
 * Externally global symbols which need to be protected for backwards
 * compatibility support.
 *)

{$IFDEF TYPE}
  xmlRegisterNodeFunc = procedure(node: xmlNodePtr);
  xmlDeregisterNodeFunc = procedure(node: xmlNodePtr);

  xmlGlobalState = record
    xmlParserVersion                        : pchar;

    xmlDefaultSAXLocator                    : xmlSAXLocator;
    xmlDefaultSAXHandler                    : xmlSAXHandlerV1;
    docbDefaultSAXHandler                   : xmlSAXHandlerV1;
    htmlDefaultSAXHandler                   : xmlSAXHandlerV1;

    xmlFree                                 : xmlFreeFunc;
    xmlMalloc                               : xmlMallocFunc;
    xmlMemStrdup                            : xmlStrdupFunc;
    xmlRealloc                              : xmlReallocFunc;

    xmlGenericError                         : xmlGenericErrorFunc;
    xmlStructuredError                      : xmlStructuredErrorFunc;
    xmlGenericErrorContext                  : pointer;

    oldXMLWDcompatibility                   : cint;

    xmlBufferAllocScheme                    : xmlBufferAllocationScheme;
    xmlDefaultBufferSize                    : cint;

    xmlSubstituteEntitiesDefaultValue       : cint;
    xmlDoValidityCheckingDefaultValue       : cint;
    xmlGetWarningsDefaultValue              : cint;
    xmlKeepBlanksDefaultValue               : cint;
    xmlLineNumbersDefaultValue              : cint;
    xmlLoadExtDtdDefaultValue               : cint;
    xmlParserDebugEntities                  : cint;
    xmlPedanticParserDefaultValue           : cint;

    xmlSaveNoEmptyTags                      : cint;
    xmlIndentTreeOutput                     : cint;
    xmlTreeIndentString                     : pchar;

    xmlRegisterNodeDefaultValue             : xmlRegisterNodeFunc;
    xmlDeregisterNodeDefaultValue           : xmlDeregisterNodeFunc;

    xmlMallocAtomic                         : xmlMallocFunc;
    xmlLastError                            : xmlError;

    xmlParserInputBufferCreateFilenameValue : xmlParserInputBufferCreateFilenameFunc;
    xmlOutputBufferCreateFilenameValue      : xmlOutputBufferCreateFilenameFunc;
  end;
{$ENDIF}

{$IFDEF FUNCTION}
procedure xmlInitializeGlobalState(gs: xmlGlobalStatePtr); cdecl; external;
procedure xmlThrDefSetGenericErrorFunc(ctx: pointer; handler: xmlGenericErrorFunc); cdecl; external;
procedure xmlThrDefSetStructuredErrorFunc(ctx: pointer; handler: xmlStructuredErrorFunc); cdecl; external;

function xmlRegisterNodeDefault(func: xmlRegisterNodeFunc): xmlRegisterNodeFunc; cdecl; external;
function xmlThrDefRegisterNodeDefault(func: xmlRegisterNodeFunc): xmlRegisterNodeFunc; cdecl; external;
function xmlDeregisterNodeDefault(func: xmlRegisterNodeFunc): xmlDeregisterNodeFunc; cdecl; external;
function xmlThrDefDeregisterNodeDefault(func: xmlRegisterNodeFunc): xmlDeregisterNodeFunc; cdecl; external;

function xmlDeregisterNodeDefault(func: xmlOutputBufferCreateFilenameFunc): xmlOutputBufferCreateFilenameFunc; cdecl; external;
function xmlThrDefDeregisterNodeDefault(func: xmlParserInputBufferCreateFilenameFunc): xmlParserInputBufferCreateFilenameFunc; cdecl; external;

{$IFDEF 0}
(** DOC_DISABLE *)
(*
 * In general the memory allocation entry points are not kept
 * thread specific but this can be overridden by LIBXML_THREAD_ALLOC_ENABLED
 *    - xmlMalloc
 *    - xmlMallocAtomic
 *    - xmlRealloc
 *    - xmlMemStrdup
 *    - xmlFree
 *)

{$IFDEF LIBXML_THREAD_ALLOC_ENABLED}
{$IFDEF LIBXML_THREAD_ENABLED}
XMLPUBFUN  xmlMallocFunc * XMLCALL __xmlMalloc(void);
#define xmlMalloc ( *(__xmlMalloc()))
{$ELSE}
XMLPUBVAR xmlMallocFunc xmlMalloc;
{$ENDIF}

{$IFDEF LIBXML_THREAD_ENABLED}
XMLPUBFUN  xmlMallocFunc * XMLCALL __xmlMallocAtomic(void);
#define xmlMallocAtomic ( *(__xmlMallocAtomic()))
{$ELSE}
XMLPUBVAR xmlMallocFunc xmlMallocAtomic;
{$ENDIF}

{$IFDEF LIBXML_THREAD_ENABLED}
XMLPUBFUN  xmlReallocFunc * XMLCALL __xmlRealloc(void);
#define xmlRealloc ( *(__xmlRealloc()))
{$ELSE}
XMLPUBVAR xmlReallocFunc xmlRealloc;
{$ENDIF}

{$IFDEF LIBXML_THREAD_ENABLED}
XMLPUBFUN  xmlFreeFunc * XMLCALL __xmlFree(void);
#define xmlFree ( *(__xmlFree()))
{$ELSE}
XMLPUBVAR xmlFreeFunc xmlFree;
{$ENDIF}

{$IFDEF LIBXML_THREAD_ENABLED}
XMLPUBFUN  xmlStrdupFunc * XMLCALL __xmlMemStrdup(void);
#define xmlMemStrdup ( *(__xmlMemStrdup()))
{$ELSE}
XMLPUBVAR xmlStrdupFunc xmlMemStrdup;
{$ENDIF}

{$ELSE} (* !LIBXML_THREAD_ALLOC_ENABLED *)
XMLPUBVAR xmlMallocFunc xmlMalloc;
XMLPUBVAR xmlMallocFunc xmlMallocAtomic;
XMLPUBVAR xmlReallocFunc xmlRealloc;
XMLPUBVAR xmlFreeFunc xmlFree;
XMLPUBVAR xmlStrdupFunc xmlMemStrdup;
{$ENDIF} (* LIBXML_THREAD_ALLOC_ENABLED *)

{$IFDEF LIBXML_DOCB_ENABLED}
XMLPUBFUN  xmlSAXHandlerV1 * XMLCALL __docbDefaultSAXHandler(void);
{$IFDEF LIBXML_THREAD_ENABLED}
#define docbDefaultSAXHandler ( *(__docbDefaultSAXHandler()))
{$ELSE}
XMLPUBVAR xmlSAXHandlerV1 docbDefaultSAXHandler;
{$ENDIF}
{$ENDIF}

{$IFDEF LIBXML_HTML_ENABLED}
XMLPUBFUN xmlSAXHandlerV1 * XMLCALL __htmlDefaultSAXHandler(void);
{$IFDEF LIBXML_THREAD_ENABLED}
#define htmlDefaultSAXHandler ( *(__htmlDefaultSAXHandler()))
{$ELSE}
XMLPUBVAR xmlSAXHandlerV1 htmlDefaultSAXHandler;
{$ENDIF}
{$ENDIF}

XMLPUBFUN xmlError * XMLCALL __xmlLastError(void);
{$IFDEF LIBXML_THREAD_ENABLED}
#define xmlLastError ( *(__xmlLastError()))
{$ELSE}
XMLPUBVAR xmlError xmlLastError;
{$ENDIF}

(*
 * Everything starting from the line below is
 * Automatically generated by build_glob.py.
 * Do not modify the previous line.
 *)


XMLPUBFUN int * XMLCALL __oldXMLWDcompatibility(void);
{$IFDEF LIBXML_THREAD_ENABLED}
#define oldXMLWDcompatibility ( *(__oldXMLWDcompatibility()))
{$ELSE}
XMLPUBVAR int oldXMLWDcompatibility;
{$ENDIF}

XMLPUBFUN xmlBufferAllocationScheme * XMLCALL __xmlBufferAllocScheme(void);
{$IFDEF LIBXML_THREAD_ENABLED}
#define xmlBufferAllocScheme ( *(__xmlBufferAllocScheme()))
{$ELSE}
XMLPUBVAR xmlBufferAllocationScheme xmlBufferAllocScheme;
{$ENDIF}
XMLPUBFUN xmlBufferAllocationScheme XMLCALL xmlThrDefBufferAllocScheme(xmlBufferAllocationScheme v);

XMLPUBFUN int * XMLCALL __xmlDefaultBufferSize(void);
{$IFDEF LIBXML_THREAD_ENABLED}
#define xmlDefaultBufferSize ( *(__xmlDefaultBufferSize()))
{$ELSE}
XMLPUBVAR int xmlDefaultBufferSize;
{$ENDIF}
XMLPUBFUN int XMLCALL xmlThrDefDefaultBufferSize(int v);

XMLPUBFUN xmlSAXHandlerV1 * XMLCALL __xmlDefaultSAXHandler(void);
{$IFDEF LIBXML_THREAD_ENABLED}
#define xmlDefaultSAXHandler ( *(__xmlDefaultSAXHandler()))
{$ELSE}
XMLPUBVAR xmlSAXHandlerV1 xmlDefaultSAXHandler;
{$ENDIF}

XMLPUBFUN xmlSAXLocator * XMLCALL __xmlDefaultSAXLocator(void);
{$IFDEF LIBXML_THREAD_ENABLED}
#define xmlDefaultSAXLocator ( *(__xmlDefaultSAXLocator()))
{$ELSE}
XMLPUBVAR xmlSAXLocator xmlDefaultSAXLocator;
{$ENDIF}

XMLPUBFUN int * XMLCALL __xmlDoValidityCheckingDefaultValue(void);
{$IFDEF LIBXML_THREAD_ENABLED}
#define xmlDoValidityCheckingDefaultValue ( *(__xmlDoValidityCheckingDefaultValue()))
{$ELSE}
XMLPUBVAR int xmlDoValidityCheckingDefaultValue;
{$ENDIF}
XMLPUBFUN int XMLCALL xmlThrDefDoValidityCheckingDefaultValue(int v);

XMLPUBFUN xmlGenericErrorFunc * XMLCALL __xmlGenericError(void);
{$IFDEF LIBXML_THREAD_ENABLED}
#define xmlGenericError ( *(__xmlGenericError()))
{$ELSE}
XMLPUBVAR xmlGenericErrorFunc xmlGenericError;
{$ENDIF}

XMLPUBFUN xmlStructuredErrorFunc * XMLCALL __xmlStructuredError(void);
{$IFDEF LIBXML_THREAD_ENABLED}
#define xmlStructuredError ( *(__xmlStructuredError()))
{$ELSE}
XMLPUBVAR xmlStructuredErrorFunc xmlStructuredError;
{$ENDIF}

XMLPUBFUN void * * XMLCALL __xmlGenericErrorContext(void);
{$IFDEF LIBXML_THREAD_ENABLED}
#define xmlGenericErrorContext ( *(__xmlGenericErrorContext()))
{$ELSE}
XMLPUBVAR void * xmlGenericErrorContext;
{$ENDIF}

XMLPUBFUN int * XMLCALL __xmlGetWarningsDefaultValue(void);
{$IFDEF LIBXML_THREAD_ENABLED}
#define xmlGetWarningsDefaultValue ( *(__xmlGetWarningsDefaultValue()))
{$ELSE}
XMLPUBVAR int xmlGetWarningsDefaultValue;
{$ENDIF}
XMLPUBFUN int XMLCALL xmlThrDefGetWarningsDefaultValue(int v);

XMLPUBFUN int * XMLCALL __xmlIndentTreeOutput(void);
{$IFDEF LIBXML_THREAD_ENABLED}
#define xmlIndentTreeOutput ( *(__xmlIndentTreeOutput()))
{$ELSE}
XMLPUBVAR int xmlIndentTreeOutput;
{$ENDIF}
XMLPUBFUN int XMLCALL xmlThrDefIndentTreeOutput(int v);

XMLPUBFUN char * * XMLCALL __xmlTreeIndentString(void);
{$IFDEF LIBXML_THREAD_ENABLED}
#define xmlTreeIndentString ( *(__xmlTreeIndentString()))
{$ELSE}
XMLPUBVAR char * xmlTreeIndentString;
{$ENDIF}
XMLPUBFUN char * XMLCALL xmlThrDefTreeIndentString(char * v);

XMLPUBFUN int * XMLCALL __xmlKeepBlanksDefaultValue(void);
{$IFDEF LIBXML_THREAD_ENABLED}
#define xmlKeepBlanksDefaultValue ( *(__xmlKeepBlanksDefaultValue()))
{$ELSE}
XMLPUBVAR int xmlKeepBlanksDefaultValue;
{$ENDIF}
XMLPUBFUN int XMLCALL xmlThrDefKeepBlanksDefaultValue(int v);

XMLPUBFUN int * XMLCALL __xmlLineNumbersDefaultValue(void);
{$IFDEF LIBXML_THREAD_ENABLED}
#define xmlLineNumbersDefaultValue ( *(__xmlLineNumbersDefaultValue()))
{$ELSE}
XMLPUBVAR int xmlLineNumbersDefaultValue;
{$ENDIF}
XMLPUBFUN int XMLCALL xmlThrDefLineNumbersDefaultValue(int v);

XMLPUBFUN int * XMLCALL __xmlLoadExtDtdDefaultValue(void);
{$IFDEF LIBXML_THREAD_ENABLED}
#define xmlLoadExtDtdDefaultValue ( *(__xmlLoadExtDtdDefaultValue()))
{$ELSE}
XMLPUBVAR int xmlLoadExtDtdDefaultValue;
{$ENDIF}
XMLPUBFUN int XMLCALL xmlThrDefLoadExtDtdDefaultValue(int v);

XMLPUBFUN int * XMLCALL __xmlParserDebugEntities(void);
{$IFDEF LIBXML_THREAD_ENABLED}
#define xmlParserDebugEntities ( *(__xmlParserDebugEntities()))
{$ELSE}
XMLPUBVAR int xmlParserDebugEntities;
{$ENDIF}
XMLPUBFUN int XMLCALL xmlThrDefParserDebugEntities(int v);

XMLPUBFUN char * * XMLCALL __xmlParserVersion(void);
{$IFDEF LIBXML_THREAD_ENABLED}
#define xmlParserVersion ( *(__xmlParserVersion()))
{$ELSE}
XMLPUBVAR char * xmlParserVersion;
{$ENDIF}

XMLPUBFUN int * XMLCALL __xmlPedanticParserDefaultValue(void);
{$IFDEF LIBXML_THREAD_ENABLED}
#define xmlPedanticParserDefaultValue ( *(__xmlPedanticParserDefaultValue()))
{$ELSE}
XMLPUBVAR int xmlPedanticParserDefaultValue;
{$ENDIF}
XMLPUBFUN int XMLCALL xmlThrDefPedanticParserDefaultValue(int v);

XMLPUBFUN int * XMLCALL __xmlSaveNoEmptyTags(void);
{$IFDEF LIBXML_THREAD_ENABLED}
#define xmlSaveNoEmptyTags ( *(__xmlSaveNoEmptyTags()))
{$ELSE}
XMLPUBVAR int xmlSaveNoEmptyTags;
{$ENDIF}
XMLPUBFUN int XMLCALL xmlThrDefSaveNoEmptyTags(int v);

XMLPUBFUN int * XMLCALL __xmlSubstituteEntitiesDefaultValue(void);
{$IFDEF LIBXML_THREAD_ENABLED}
#define xmlSubstituteEntitiesDefaultValue ( *(__xmlSubstituteEntitiesDefaultValue()))
{$ELSE}
XMLPUBVAR int xmlSubstituteEntitiesDefaultValue;
{$ENDIF}
XMLPUBFUN int XMLCALL xmlThrDefSubstituteEntitiesDefaultValue(int v);

XMLPUBFUN xmlRegisterNodeFunc * XMLCALL __xmlRegisterNodeDefaultValue(void);
{$IFDEF LIBXML_THREAD_ENABLED}
#define xmlRegisterNodeDefaultValue ( *(__xmlRegisterNodeDefaultValue()))
{$ELSE}
XMLPUBVAR xmlRegisterNodeFunc xmlRegisterNodeDefaultValue;
{$ENDIF}

XMLPUBFUN xmlDeregisterNodeFunc * XMLCALL __xmlDeregisterNodeDefaultValue(void);
{$IFDEF LIBXML_THREAD_ENABLED}
#define xmlDeregisterNodeDefaultValue ( *(__xmlDeregisterNodeDefaultValue()))
{$ELSE}
XMLPUBVAR xmlDeregisterNodeFunc xmlDeregisterNodeDefaultValue;
{$ENDIF}

XMLPUBFUN xmlParserInputBufferCreateFilenameFunc * XMLCALL __xmlParserInputBufferCreateFilenameValue(void);
{$IFDEF LIBXML_THREAD_ENABLED}
#define xmlParserInputBufferCreateFilenameValue ( *(__xmlParserInputBufferCreateFilenameValue()))
{$ELSE}
XMLPUBVAR xmlParserInputBufferCreateFilenameFunc xmlParserInputBufferCreateFilenameValue;
{$ENDIF}

XMLPUBFUN xmlOutputBufferCreateFilenameFunc * XMLCALL __xmlOutputBufferCreateFilenameValue(void);
{$IFDEF LIBXML_THREAD_ENABLED}
#define xmlOutputBufferCreateFilenameValue ( *(__xmlOutputBufferCreateFilenameValue()))
{$ELSE}
XMLPUBVAR xmlOutputBufferCreateFilenameFunc xmlOutputBufferCreateFilenameValue;
{$ENDIF}
{$ENDIF} (* 0 *)

{$ENDIF}
