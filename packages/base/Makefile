#
# Don't edit, this file is generated by FPCMake Version 2.0.0 [2005/05/15]
#
default: all
MAKEFILETARGETS=i386-linux i386-go32v2 i386-win32 i386-os2 i386-freebsd i386-beos i386-netbsd i386-solaris i386-qnx i386-netware i386-openbsd i386-wdosx i386-emx i386-watcom i386-netwlibc m68k-linux m68k-freebsd m68k-netbsd m68k-amiga m68k-atari m68k-openbsd m68k-palmos powerpc-linux powerpc-netbsd powerpc-macos powerpc-darwin powerpc-morphos sparc-linux sparc-netbsd sparc-solaris x86_64-linux x86_64-freebsd arm-linux
BSDs = freebsd netbsd openbsd darwin
UNIXs = linux $(BSDs) solaris qnx
LIMIT83fs = go32v2 os2 emx watcom
FORCE:
.PHONY: FORCE
override PATH:=$(patsubst %/,%,$(subst \,/,$(PATH)))
ifneq ($(findstring darwin,$(OSTYPE)),)
inUnix=1 #darwin
SEARCHPATH:=$(filter-out .,$(subst :, ,$(PATH)))
else
ifeq ($(findstring ;,$(PATH)),)
inUnix=1
SEARCHPATH:=$(filter-out .,$(subst :, ,$(PATH)))
else
SEARCHPATH:=$(subst ;, ,$(PATH))
endif
endif
SEARCHPATH+=$(patsubst %/,%,$(subst \,/,$(dir $(MAKE))))
PWD:=$(strip $(wildcard $(addsuffix /pwd.exe,$(SEARCHPATH))))
ifeq ($(PWD),)
PWD:=$(strip $(wildcard $(addsuffix /pwd,$(SEARCHPATH))))
ifeq ($(PWD),)
$(error You need the GNU utils package to use this Makefile)
else
PWD:=$(firstword $(PWD))
SRCEXEEXT=
endif
else
PWD:=$(firstword $(PWD))
SRCEXEEXT=.exe
endif
ifndef inUnix
ifeq ($(OS),Windows_NT)
inWinNT=1
else
ifdef OS2_SHELL
inOS2=1
endif
endif
else
ifneq ($(findstring cygdrive,$(PATH)),)
inCygWin=1
endif
endif
ifdef inUnix
SRCBATCHEXT=.sh
else
ifdef inOS2
SRCBATCHEXT=.cmd
else
SRCBATCHEXT=.bat
endif
endif
ifdef inUnix
PATHSEP=/
else
PATHSEP:=$(subst /,\,/)
ifdef inCygWin
PATHSEP=/
endif
endif
ifdef PWD
BASEDIR:=$(subst \,/,$(shell $(PWD)))
ifdef inCygWin
ifneq ($(findstring /cygdrive/,$(BASEDIR)),)
BASENODIR:=$(patsubst /cygdrive%,%,$(BASEDIR))
BASEDRIVE:=$(firstword $(subst /, ,$(BASENODIR)))
BASEDIR:=$(subst /cygdrive/$(BASEDRIVE)/,$(BASEDRIVE):/,$(BASEDIR))
endif
endif
else
BASEDIR=.
endif
ifdef inOS2
ifndef ECHO
ECHO:=$(strip $(wildcard $(addsuffix /gecho$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(ECHO),)
ECHO:=$(strip $(wildcard $(addsuffix /echo$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(ECHO),)
ECHO=echo
else
ECHO:=$(firstword $(ECHO))
endif
else
ECHO:=$(firstword $(ECHO))
endif
endif
export ECHO
endif
override DEFAULT_FPCDIR=../..
ifndef FPC
ifdef PP
FPC=$(PP)
endif
endif
ifndef FPC
FPCPROG:=$(strip $(wildcard $(addsuffix /fpc$(SRCEXEEXT),$(SEARCHPATH))))
ifneq ($(FPCPROG),)
FPCPROG:=$(firstword $(FPCPROG))
FPC:=$(shell $(FPCPROG) -PB)
ifneq ($(findstring Error,$(FPC)),)
override FPC=$(firstword $(strip $(wildcard $(addsuffix /ppc386$(SRCEXEEXT),$(SEARCHPATH)))))
endif
else
override FPC=$(firstword $(strip $(wildcard $(addsuffix /ppc386$(SRCEXEEXT),$(SEARCHPATH)))))
endif
endif
override FPC:=$(subst $(SRCEXEEXT),,$(FPC))
override FPC:=$(subst \,/,$(FPC))$(SRCEXEEXT)
FOUNDFPC:=$(strip $(wildcard $(FPC)))
ifeq ($(FOUNDFPC),)
FOUNDFPC=$(strip $(wildcard $(addsuffix /$(FPC),$(SEARCHPATH))))
ifeq ($(FOUNDFPC),)
$(error Compiler $(FPC) not found)
endif
endif
ifndef FPC_COMPILERINFO
FPC_COMPILERINFO:=$(shell $(FPC) -iVSPTPSOTO)
endif
ifndef FPC_VERSION
FPC_VERSION:=$(word 1,$(FPC_COMPILERINFO))
endif
export FPC FPC_VERSION FPC_COMPILERINFO
unexport CHECKDEPEND ALLDEPENDENCIES
ifndef CPU_TARGET
ifdef CPU_TARGET_DEFAULT
CPU_TARGET=$(CPU_TARGET_DEFAULT)
endif
endif
ifndef OS_TARGET
ifdef OS_TARGET_DEFAULT
OS_TARGET=$(OS_TARGET_DEFAULT)
endif
endif
ifneq ($(words $(FPC_COMPILERINFO)),5)
FPC_COMPILERINFO+=$(shell $(FPC) -iSP)
FPC_COMPILERINFO+=$(shell $(FPC) -iTP)
FPC_COMPILERINFO+=$(shell $(FPC) -iSO)
FPC_COMPILERINFO+=$(shell $(FPC) -iTO)
endif
ifndef CPU_SOURCE
CPU_SOURCE:=$(word 2,$(FPC_COMPILERINFO))
endif
ifndef CPU_TARGET
CPU_TARGET:=$(word 3,$(FPC_COMPILERINFO))
endif
ifndef OS_SOURCE
OS_SOURCE:=$(word 4,$(FPC_COMPILERINFO))
endif
ifndef OS_TARGET
OS_TARGET:=$(word 5,$(FPC_COMPILERINFO))
endif
FULL_TARGET=$(CPU_TARGET)-$(OS_TARGET)
FULL_SOURCE=$(CPU_SOURCE)-$(OS_SOURCE)
ifneq ($(findstring $(OS_SOURCE),$(LIMIT83fs)),)
TARGETSUFFIX=$(OS_TARGET)
SOURCESUFFIX=$(OS_SOURCE)
else
TARGETSUFFIX=$(FULL_TARGET)
SOURCESUFFIX=$(FULL_SOURCE)
endif
ifneq ($(FULL_TARGET),$(FULL_SOURCE))
CROSSCOMPILE=1
endif
ifeq ($(findstring makefile,$(MAKECMDGOALS)),)
ifeq ($(findstring $(FULL_TARGET),$(MAKEFILETARGETS)),)
$(error The Makefile doesn't support target $(FULL_TARGET), please run fpcmake first)
endif
endif
ifneq ($(findstring $(OS_TARGET),$(BSDs)),)
BSDhier=1
endif
ifeq ($(OS_TARGET),linux)
linuxHier=1
endif
export OS_TARGET OS_SOURCE CPU_TARGET CPU_SOURCE FULL_TARGET FULL_SOURCE TARGETSUFFIX SOURCESUFFIX CROSSCOMPILE
ifdef FPCDIR
override FPCDIR:=$(subst \,/,$(FPCDIR))
ifeq ($(wildcard $(addprefix $(FPCDIR)/,rtl units)),)
override FPCDIR=wrong
endif
else
override FPCDIR=wrong
endif
ifdef DEFAULT_FPCDIR
ifeq ($(FPCDIR),wrong)
override FPCDIR:=$(subst \,/,$(DEFAULT_FPCDIR))
ifeq ($(wildcard $(addprefix $(FPCDIR)/,rtl units)),)
override FPCDIR=wrong
endif
endif
endif
ifeq ($(FPCDIR),wrong)
ifdef inUnix
override FPCDIR=/usr/local/lib/fpc/$(FPC_VERSION)
ifeq ($(wildcard $(FPCDIR)/units),)
override FPCDIR=/usr/lib/fpc/$(FPC_VERSION)
endif
else
override FPCDIR:=$(subst /$(FPC),,$(firstword $(strip $(wildcard $(addsuffix /$(FPC),$(SEARCHPATH))))))
override FPCDIR:=$(FPCDIR)/..
ifeq ($(wildcard $(addprefix $(FPCDIR)/,rtl units)),)
override FPCDIR:=$(FPCDIR)/..
ifeq ($(wildcard $(addprefix $(FPCDIR)/,rtl units)),)
override FPCDIR:=$(BASEDIR)
ifeq ($(wildcard $(addprefix $(FPCDIR)/,rtl units)),)
override FPCDIR=c:/pp
endif
endif
endif
endif
endif
ifndef CROSSBINDIR
CROSSBINDIR:=$(wildcard $(FPCDIR)/bin/$(TARGETSUFFIX))
endif
ifndef BINUTILSPREFIX
ifndef CROSSBINDIR
ifdef CROSSCOMPILE
BINUTILSPREFIX=$(CPU_TARGET)-$(OS_TARGET)-
endif
endif
endif
UNITSDIR:=$(wildcard $(FPCDIR)/units/$(TARGETSUFFIX))
ifeq ($(UNITSDIR),)
UNITSDIR:=$(wildcard $(FPCDIR)/units/$(OS_TARGET))
endif
PACKAGESDIR:=$(wildcard $(FPCDIR) $(FPCDIR)/packages/base $(FPCDIR)/packages/extra)
ifeq ($(FULL_TARGET),i386-linux)
override TARGET_DIRS+=paszlib pasjpeg regexpr netdb hash  gdbint libasync mysql ibase postgres oracle odbc pthreads sqlite libc
endif
ifeq ($(FULL_TARGET),i386-go32v2)
override TARGET_DIRS+=paszlib pasjpeg regexpr netdb hash  gdbint
endif
ifeq ($(FULL_TARGET),i386-win32)
override TARGET_DIRS+=paszlib pasjpeg regexpr netdb hash  gdbint mysql ibase odbc sqlite postgres
endif
ifeq ($(FULL_TARGET),i386-os2)
override TARGET_DIRS+=paszlib pasjpeg regexpr netdb hash
endif
ifeq ($(FULL_TARGET),i386-freebsd)
override TARGET_DIRS+=paszlib pasjpeg regexpr netdb hash  gdbint libasync mysql ibase postgres oracle odbc sqlite pthreads
endif
ifeq ($(FULL_TARGET),i386-beos)
override TARGET_DIRS+=paszlib pasjpeg regexpr netdb hash
endif
ifeq ($(FULL_TARGET),i386-netbsd)
override TARGET_DIRS+=paszlib pasjpeg regexpr netdb hash  gdbint libasync mysql ibase postgres oracle odbc
endif
ifeq ($(FULL_TARGET),i386-solaris)
override TARGET_DIRS+=paszlib pasjpeg regexpr netdb hash
endif
ifeq ($(FULL_TARGET),i386-qnx)
override TARGET_DIRS+=paszlib pasjpeg regexpr netdb hash
endif
ifeq ($(FULL_TARGET),i386-netware)
override TARGET_DIRS+=paszlib pasjpeg regexpr netdb hash
endif
ifeq ($(FULL_TARGET),i386-openbsd)
override TARGET_DIRS+=paszlib pasjpeg regexpr netdb hash  gdbint libasync mysql ibase postgres oracle odbc
endif
ifeq ($(FULL_TARGET),i386-wdosx)
override TARGET_DIRS+=paszlib pasjpeg regexpr netdb hash
endif
ifeq ($(FULL_TARGET),i386-emx)
override TARGET_DIRS+=paszlib pasjpeg regexpr netdb hash
endif
ifeq ($(FULL_TARGET),i386-watcom)
override TARGET_DIRS+=paszlib pasjpeg regexpr netdb hash
endif
ifeq ($(FULL_TARGET),i386-netwlibc)
override TARGET_DIRS+=paszlib pasjpeg regexpr netdb hash
endif
ifeq ($(FULL_TARGET),m68k-linux)
override TARGET_DIRS+=paszlib pasjpeg regexpr netdb hash  gdbint libasync mysql ibase postgres oracle odbc pthreads sqlite libc
endif
ifeq ($(FULL_TARGET),m68k-freebsd)
override TARGET_DIRS+=paszlib pasjpeg regexpr netdb hash  gdbint libasync mysql ibase postgres oracle odbc sqlite pthreads
endif
ifeq ($(FULL_TARGET),m68k-netbsd)
override TARGET_DIRS+=paszlib pasjpeg regexpr netdb hash  gdbint libasync mysql ibase postgres oracle odbc
endif
ifeq ($(FULL_TARGET),m68k-amiga)
override TARGET_DIRS+=paszlib pasjpeg regexpr netdb hash
endif
ifeq ($(FULL_TARGET),m68k-atari)
override TARGET_DIRS+=paszlib pasjpeg regexpr netdb hash
endif
ifeq ($(FULL_TARGET),m68k-openbsd)
override TARGET_DIRS+=paszlib pasjpeg regexpr netdb hash  gdbint libasync mysql ibase postgres oracle odbc
endif
ifeq ($(FULL_TARGET),m68k-palmos)
override TARGET_DIRS+=paszlib pasjpeg regexpr netdb hash
endif
ifeq ($(FULL_TARGET),powerpc-linux)
override TARGET_DIRS+=paszlib pasjpeg regexpr netdb hash  gdbint libasync mysql ibase postgres oracle odbc pthreads sqlite libc
endif
ifeq ($(FULL_TARGET),powerpc-netbsd)
override TARGET_DIRS+=paszlib pasjpeg regexpr netdb hash  gdbint libasync mysql ibase postgres oracle odbc
endif
ifeq ($(FULL_TARGET),powerpc-macos)
override TARGET_DIRS+=paszlib pasjpeg regexpr netdb hash
endif
ifeq ($(FULL_TARGET),powerpc-darwin)
override TARGET_DIRS+=paszlib pasjpeg regexpr netdb hash  libasync mysql ibase postgres oracle odbc sqlite pthreads
endif
ifeq ($(FULL_TARGET),powerpc-morphos)
override TARGET_DIRS+=paszlib pasjpeg regexpr netdb hash
endif
ifeq ($(FULL_TARGET),sparc-linux)
override TARGET_DIRS+=paszlib pasjpeg regexpr netdb hash  gdbint libasync mysql ibase postgres oracle odbc pthreads sqlite libc
endif
ifeq ($(FULL_TARGET),sparc-netbsd)
override TARGET_DIRS+=paszlib pasjpeg regexpr netdb hash  gdbint libasync mysql ibase postgres oracle odbc
endif
ifeq ($(FULL_TARGET),sparc-solaris)
override TARGET_DIRS+=paszlib pasjpeg regexpr netdb hash
endif
ifeq ($(FULL_TARGET),x86_64-linux)
override TARGET_DIRS+=paszlib pasjpeg regexpr netdb hash  gdbint libasync mysql ibase postgres oracle odbc pthreads sqlite libc
endif
ifeq ($(FULL_TARGET),x86_64-freebsd)
override TARGET_DIRS+=paszlib pasjpeg regexpr netdb hash  gdbint libasync mysql ibase postgres oracle odbc sqlite pthreads
endif
ifeq ($(FULL_TARGET),arm-linux)
override TARGET_DIRS+=paszlib pasjpeg regexpr netdb hash  gdbint libasync mysql ibase postgres oracle odbc pthreads sqlite libc
endif
override INSTALL_FPCPACKAGE=y
override INSTALL_FPCSUBDIR=packages/base
ifdef REQUIRE_UNITSDIR
override UNITSDIR+=$(REQUIRE_UNITSDIR)
endif
ifdef REQUIRE_PACKAGESDIR
override PACKAGESDIR+=$(REQUIRE_PACKAGESDIR)
endif
ifdef ZIPINSTALL
ifneq ($(findstring $(OS_TARGET),$(UNIXs)),)
UNIXHier=1
endif
else
ifneq ($(findstring $(OS_SOURCE),$(UNIXs)),)
UNIXHier=1
endif
endif
ifndef INSTALL_PREFIX
ifdef PREFIX
INSTALL_PREFIX=$(PREFIX)
endif
endif
ifndef INSTALL_PREFIX
ifdef UNIXHier
INSTALL_PREFIX=/usr/local
else
ifdef INSTALL_FPCPACKAGE
INSTALL_BASEDIR:=/pp
else
INSTALL_BASEDIR:=/$(PACKAGE_NAME)
endif
endif
endif
export INSTALL_PREFIX
ifdef INSTALL_FPCSUBDIR
export INSTALL_FPCSUBDIR
endif
ifndef DIST_DESTDIR
DIST_DESTDIR:=$(BASEDIR)
endif
export DIST_DESTDIR
ifndef COMPILER_UNITTARGETDIR
ifdef PACKAGEDIR_MAIN
COMPILER_UNITTARGETDIR=$(PACKAGEDIR_MAIN)/units/$(TARGETSUFFIX)
else
COMPILER_UNITTARGETDIR=units/$(TARGETSUFFIX)
endif
endif
ifndef COMPILER_TARGETDIR
COMPILER_TARGETDIR=.
endif
ifndef INSTALL_BASEDIR
ifdef UNIXHier
ifdef INSTALL_FPCPACKAGE
INSTALL_BASEDIR:=$(INSTALL_PREFIX)/lib/fpc/$(FPC_VERSION)
else
INSTALL_BASEDIR:=$(INSTALL_PREFIX)/lib/$(PACKAGE_NAME)
endif
else
INSTALL_BASEDIR:=$(INSTALL_PREFIX)
endif
endif
ifndef INSTALL_BINDIR
ifdef UNIXHier
INSTALL_BINDIR:=$(INSTALL_PREFIX)/bin
else
INSTALL_BINDIR:=$(INSTALL_BASEDIR)/bin
ifdef INSTALL_FPCPACKAGE
ifdef CROSSCOMPILE
ifdef CROSSINSTALL
INSTALL_BINDIR:=$(INSTALL_BINDIR)/$(SOURCESUFFIX)
else
INSTALL_BINDIR:=$(INSTALL_BINDIR)/$(TARGETSUFFIX)
endif
else
INSTALL_BINDIR:=$(INSTALL_BINDIR)/$(TARGETSUFFIX)
endif
endif
endif
endif
ifndef INSTALL_UNITDIR
INSTALL_UNITDIR:=$(INSTALL_BASEDIR)/units/$(TARGETSUFFIX)
ifdef INSTALL_FPCPACKAGE
ifdef PACKAGE_NAME
INSTALL_UNITDIR:=$(INSTALL_UNITDIR)/$(PACKAGE_NAME)
endif
endif
endif
ifndef INSTALL_LIBDIR
ifdef UNIXHier
INSTALL_LIBDIR:=$(INSTALL_PREFIX)/lib
else
INSTALL_LIBDIR:=$(INSTALL_UNITDIR)
endif
endif
ifndef INSTALL_SOURCEDIR
ifdef UNIXHier
ifdef BSDhier
SRCPREFIXDIR=share/src
else
ifdef linuxHier
SRCPREFIXDIR=share/src
else
SRCPREFIXDIR=src
endif
endif
ifdef INSTALL_FPCPACKAGE
ifdef INSTALL_FPCSUBDIR
INSTALL_SOURCEDIR:=$(INSTALL_PREFIX)/$(SRCPREFIXDIR)/fpc-$(FPC_VERSION)/$(INSTALL_FPCSUBDIR)/$(PACKAGE_NAME)
else
INSTALL_SOURCEDIR:=$(INSTALL_PREFIX)/$(SRCPREFIXDIR)/fpc-$(FPC_VERSION)/$(PACKAGE_NAME)
endif
else
INSTALL_SOURCEDIR:=$(INSTALL_PREFIX)/$(SRCPREFIXDIR)/$(PACKAGE_NAME)-$(PACKAGE_VERSION)
endif
else
ifdef INSTALL_FPCPACKAGE
ifdef INSTALL_FPCSUBDIR
INSTALL_SOURCEDIR:=$(INSTALL_BASEDIR)/source/$(INSTALL_FPCSUBDIR)/$(PACKAGE_NAME)
else
INSTALL_SOURCEDIR:=$(INSTALL_BASEDIR)/source/$(PACKAGE_NAME)
endif
else
INSTALL_SOURCEDIR:=$(INSTALL_BASEDIR)/source
endif
endif
endif
ifndef INSTALL_DOCDIR
ifdef UNIXHier
ifdef BSDhier
DOCPREFIXDIR=share/doc
else
ifdef linuxHier
DOCPREFIXDIR=share/doc
else
DOCPREFIXDIR=doc
endif
endif
ifdef INSTALL_FPCPACKAGE
INSTALL_DOCDIR:=$(INSTALL_PREFIX)/$(DOCPREFIXDIR)/fpc-$(FPC_VERSION)/$(PACKAGE_NAME)
else
INSTALL_DOCDIR:=$(INSTALL_PREFIX)/$(DOCPREFIXDIR)/$(PACKAGE_NAME)-$(PACKAGE_VERSION)
endif
else
ifdef INSTALL_FPCPACKAGE
INSTALL_DOCDIR:=$(INSTALL_BASEDIR)/doc/$(PACKAGE_NAME)
else
INSTALL_DOCDIR:=$(INSTALL_BASEDIR)/doc
endif
endif
endif
ifndef INSTALL_EXAMPLEDIR
ifdef UNIXHier
ifdef INSTALL_FPCPACKAGE
ifdef BSDhier
INSTALL_EXAMPLEDIR:=$(INSTALL_PREFIX)/share/examples/fpc-$(FPC_VERSION)/$(PACKAGE_NAME)
else
ifdef linuxHier
INSTALL_EXAMPLEDIR:=$(INSTALL_DOCDIR)/examples
else
INSTALL_EXAMPLEDIR:=$(INSTALL_PREFIX)/doc/fpc-$(FPC_VERSION)/examples/$(PACKAGE_NAME)
endif
endif
else
ifdef BSDhier
INSTALL_EXAMPLEDIR:=$(INSTALL_PREFIX)/share/examples/$(PACKAGE_NAME)-$(PACKAGE_VERSION)
else
ifdef linuxHier
INSTALL_EXAMPLEDIR:=$(INSTALL_DOCDIR)/examples/$(PACKAGE_NAME)-$(PACKAGE_VERSION)
else
INSTALL_EXAMPLEDIR:=$(INSTALL_PREFIX)/doc/$(PACKAGE_NAME)-$(PACKAGE_VERSION)
endif
endif
endif
else
ifdef INSTALL_FPCPACKAGE
INSTALL_EXAMPLEDIR:=$(INSTALL_BASEDIR)/examples/$(PACKAGE_NAME)
else
INSTALL_EXAMPLEDIR:=$(INSTALL_BASEDIR)/examples
endif
endif
endif
ifndef INSTALL_DATADIR
INSTALL_DATADIR=$(INSTALL_BASEDIR)
endif
ifdef CROSSCOMPILE
ifndef CROSSBINDIR
CROSSBINDIR:=$(wildcard $(CROSSTARGETDIR)/bin/$(SOURCESUFFIX))
ifeq ($(CROSSBINDIR),)
CROSSBINDIR:=$(wildcard $(INSTALL_BASEDIR)/cross/$(TARGETSUFFIX)/bin/$(FULL_SOURCE))
endif
endif
else
CROSSBINDIR=
endif
BATCHEXT=.bat
LOADEREXT=.as
EXEEXT=.exe
PPLEXT=.ppl
PPUEXT=.ppu
OEXT=.o
ASMEXT=.s
SMARTEXT=.sl
STATICLIBEXT=.a
SHAREDLIBEXT=.so
STATICLIBPREFIX=libp
RSTEXT=.rst
ifeq ($(findstring 1.0.,$(FPC_VERSION)),)
ifeq ($(OS_TARGET),go32v1)
STATICLIBPREFIX=
SHORTSUFFIX=v1
endif
ifeq ($(OS_TARGET),go32v2)
STATICLIBPREFIX=
SHORTSUFFIX=dos
endif
ifeq ($(OS_TARGET),watcom)
STATICLIBPREFIX=
OEXT=.obj
ASMEXT=.asm
SHAREDLIBEXT=.dll
SHORTSUFFIX=wat
endif
ifeq ($(OS_TARGET),linux)
BATCHEXT=.sh
EXEEXT=
HASSHAREDLIB=1
SHORTSUFFIX=lnx
endif
ifeq ($(OS_TARGET),freebsd)
BATCHEXT=.sh
EXEEXT=
HASSHAREDLIB=1
SHORTSUFFIX=fbs
endif
ifeq ($(OS_TARGET),netbsd)
BATCHEXT=.sh
EXEEXT=
HASSHAREDLIB=1
SHORTSUFFIX=nbs
endif
ifeq ($(OS_TARGET),openbsd)
BATCHEXT=.sh
EXEEXT=
HASSHAREDLIB=1
SHORTSUFFIX=obs
endif
ifeq ($(OS_TARGET),win32)
SHAREDLIBEXT=.dll
SHORTSUFFIX=w32
endif
ifeq ($(OS_TARGET),os2)
BATCHEXT=.cmd
AOUTEXT=.out
STATICLIBPREFIX=
SHAREDLIBEXT=.dll
SHORTSUFFIX=os2
ECHO=echo
endif
ifeq ($(OS_TARGET),emx)
BATCHEXT=.cmd
AOUTEXT=.out
STATICLIBPREFIX=
SHAREDLIBEXT=.dll
SHORTSUFFIX=emx
ECHO=echo
endif
ifeq ($(OS_TARGET),amiga)
EXEEXT=
SHAREDLIBEXT=.library
SHORTSUFFIX=amg
endif
ifeq ($(OS_TARGET),morphos)
EXEEXT=
SHAREDLIBEXT=.library
SHORTSUFFIX=mos
endif
ifeq ($(OS_TARGET),atari)
EXEEXT=.ttp
SHORTSUFFIX=ata
endif
ifeq ($(OS_TARGET),beos)
BATCHEXT=.sh
EXEEXT=
SHORTSUFFIX=be
endif
ifeq ($(OS_TARGET),solaris)
BATCHEXT=.sh
EXEEXT=
SHORTSUFFIX=sun
endif
ifeq ($(OS_TARGET),qnx)
BATCHEXT=.sh
EXEEXT=
SHORTSUFFIX=qnx
endif
ifeq ($(OS_TARGET),netware)
EXEEXT=.nlm
STATICLIBPREFIX=
SHORTSUFFIX=nw
endif
ifeq ($(OS_TARGET),netwlibc)
EXEEXT=.nlm
STATICLIBPREFIX=
SHORTSUFFIX=nwl
endif
ifeq ($(OS_TARGET),macos)
BATCHEXT=
EXEEXT=
DEBUGSYMEXT=.xcoff
SHORTSUFFIX=mac
endif
ifeq ($(OS_TARGET),darwin)
BATCHEXT=.sh
EXEEXT=
HASSHAREDLIB=1
SHORTSUFFIX=dwn
endif
else
ifeq ($(OS_TARGET),go32v1)
PPUEXT=.pp1
OEXT=.o1
ASMEXT=.s1
SMARTEXT=.sl1
STATICLIBEXT=.a1
SHAREDLIBEXT=.so1
STATICLIBPREFIX=
SHORTSUFFIX=v1
endif
ifeq ($(OS_TARGET),go32v2)
STATICLIBPREFIX=
SHORTSUFFIX=dos
endif
ifeq ($(OS_TARGET),watcom)
STATICLIBPREFIX=
SHORTSUFFIX=wat
endif
ifeq ($(OS_TARGET),linux)
BATCHEXT=.sh
EXEEXT=
HASSHAREDLIB=1
SHORTSUFFIX=lnx
endif
ifeq ($(OS_TARGET),freebsd)
BATCHEXT=.sh
EXEEXT=
HASSHAREDLIB=1
SHORTSUFFIX=fbs
endif
ifeq ($(OS_TARGET),netbsd)
BATCHEXT=.sh
EXEEXT=
HASSHAREDLIB=1
SHORTSUFFIX=nbs
endif
ifeq ($(OS_TARGET),openbsd)
BATCHEXT=.sh
EXEEXT=
HASSHAREDLIB=1
SHORTSUFFIX=obs
endif
ifeq ($(OS_TARGET),win32)
PPUEXT=.ppw
OEXT=.ow
ASMEXT=.sw
SMARTEXT=.slw
STATICLIBEXT=.aw
SHAREDLIBEXT=.dll
SHORTSUFFIX=w32
endif
ifeq ($(OS_TARGET),os2)
BATCHEXT=.cmd
PPUEXT=.ppo
ASMEXT=.so2
OEXT=.oo2
AOUTEXT=.out
SMARTEXT=.sl2
STATICLIBPREFIX=
STATICLIBEXT=.ao2
SHAREDLIBEXT=.dll
SHORTSUFFIX=os2
ECHO=echo
endif
ifeq ($(OS_TARGET),amiga)
EXEEXT=
PPUEXT=.ppu
ASMEXT=.asm
OEXT=.o
SMARTEXT=.sl
STATICLIBEXT=.a
SHAREDLIBEXT=.library
SHORTSUFFIX=amg
endif
ifeq ($(OS_TARGET),atari)
PPUEXT=.ppu
ASMEXT=.s
OEXT=.o
SMARTEXT=.sl
STATICLIBEXT=.a
EXEEXT=.ttp
SHORTSUFFIX=ata
endif
ifeq ($(OS_TARGET),beos)
BATCHEXT=.sh
PPUEXT=.ppu
ASMEXT=.s
OEXT=.o
SMARTEXT=.sl
STATICLIBEXT=.a
EXEEXT=
SHORTSUFFIX=be
endif
ifeq ($(OS_TARGET),solaris)
BATCHEXT=.sh
PPUEXT=.ppu
ASMEXT=.s
OEXT=.o
SMARTEXT=.sl
STATICLIBEXT=.a
EXEEXT=
SHORTSUFFIX=sun
endif
ifeq ($(OS_TARGET),qnx)
BATCHEXT=.sh
PPUEXT=.ppu
ASMEXT=.s
OEXT=.o
SMARTEXT=.sl
STATICLIBEXT=.a
EXEEXT=
SHORTSUFFIX=qnx
endif
ifeq ($(OS_TARGET),netware)
STATICLIBPREFIX=
PPUEXT=.ppu
OEXT=.o
ASMEXT=.s
SMARTEXT=.sl
STATICLIBEXT=.a
SHAREDLIBEXT=.nlm
EXEEXT=.nlm
SHORTSUFFIX=nw
endif
ifeq ($(OS_TARGET),netwlibc)
STATICLIBPREFIX=
PPUEXT=.ppu
OEXT=.o
ASMEXT=.s
SMARTEXT=.sl
STATICLIBEXT=.a
SHAREDLIBEXT=.nlm
EXEEXT=.nlm
SHORTSUFFIX=nwl
endif
ifeq ($(OS_TARGET),macos)
BATCHEXT=
PPUEXT=.ppu
ASMEXT=.s
OEXT=.o
SMARTEXT=.sl
STATICLIBEXT=.a
EXEEXT=
DEBUGSYMEXT=.xcoff
SHORTSUFFIX=mac
endif
endif
ifneq ($(findstring $(OS_SOURCE),$(LIMIT83fs)),)
FPCMADE=fpcmade.$(SHORTSUFFIX)
ZIPSUFFIX=$(SHORTSUFFIX)
ZIPCROSSPREFIX=
ZIPSOURCESUFFIX=src
ZIPEXAMPLESUFFIX=exm
else
FPCMADE=fpcmade.$(TARGETSUFFIX)
ZIPSOURCESUFFIX=.source
ZIPEXAMPLESUFFIX=.examples
ifdef CROSSCOMPILE
ZIPSUFFIX=.$(SOURCESUFFIX)
ZIPCROSSPREFIX=$(TARGETSUFFIX)-
else
ZIPSUFFIX=.$(TARGETSUFFIX)
ZIPCROSSPREFIX=
endif
endif
ifndef ECHO
ECHO:=$(strip $(wildcard $(addsuffix /gecho$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(ECHO),)
ECHO:=$(strip $(wildcard $(addsuffix /echo$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(ECHO),)
ECHO= __missing_command_ECHO
else
ECHO:=$(firstword $(ECHO))
endif
else
ECHO:=$(firstword $(ECHO))
endif
endif
export ECHO
ifndef DATE
DATE:=$(strip $(wildcard $(addsuffix /gdate$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(DATE),)
DATE:=$(strip $(wildcard $(addsuffix /date$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(DATE),)
DATE= __missing_command_DATE
else
DATE:=$(firstword $(DATE))
endif
else
DATE:=$(firstword $(DATE))
endif
endif
export DATE
ifndef GINSTALL
GINSTALL:=$(strip $(wildcard $(addsuffix /ginstall$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(GINSTALL),)
GINSTALL:=$(strip $(wildcard $(addsuffix /install$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(GINSTALL),)
GINSTALL= __missing_command_GINSTALL
else
GINSTALL:=$(firstword $(GINSTALL))
endif
else
GINSTALL:=$(firstword $(GINSTALL))
endif
endif
export GINSTALL
ifndef CPPROG
CPPROG:=$(strip $(wildcard $(addsuffix /cp$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(CPPROG),)
CPPROG= __missing_command_CPPROG
else
CPPROG:=$(firstword $(CPPROG))
endif
endif
export CPPROG
ifndef RMPROG
RMPROG:=$(strip $(wildcard $(addsuffix /rm$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(RMPROG),)
RMPROG= __missing_command_RMPROG
else
RMPROG:=$(firstword $(RMPROG))
endif
endif
export RMPROG
ifndef MVPROG
MVPROG:=$(strip $(wildcard $(addsuffix /mv$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(MVPROG),)
MVPROG= __missing_command_MVPROG
else
MVPROG:=$(firstword $(MVPROG))
endif
endif
export MVPROG
ifndef MKDIRPROG
MKDIRPROG:=$(strip $(wildcard $(addsuffix /gmkdir$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(MKDIRPROG),)
MKDIRPROG:=$(strip $(wildcard $(addsuffix /mkdir$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(MKDIRPROG),)
MKDIRPROG= __missing_command_MKDIRPROG
else
MKDIRPROG:=$(firstword $(MKDIRPROG))
endif
else
MKDIRPROG:=$(firstword $(MKDIRPROG))
endif
endif
export MKDIRPROG
ifndef ECHOREDIR
ifndef inUnix
ECHOREDIR=echo
else
ECHOREDIR=$(ECHO)
endif
endif
ifndef COPY
COPY:=$(CPPROG) -fp
endif
ifndef COPYTREE
COPYTREE:=$(CPPROG) -Rfp
endif
ifndef MKDIRTREE
MKDIRTREE:=$(MKDIRPROG) -p
endif
ifndef MOVE
MOVE:=$(MVPROG) -f
endif
ifndef DEL
DEL:=$(RMPROG) -f
endif
ifndef DELTREE
DELTREE:=$(RMPROG) -rf
endif
ifndef INSTALL
ifdef inUnix
INSTALL:=$(GINSTALL) -c -m 644
else
INSTALL:=$(COPY)
endif
endif
ifndef INSTALLEXE
ifdef inUnix
INSTALLEXE:=$(GINSTALL) -c -m 755
else
INSTALLEXE:=$(COPY)
endif
endif
ifndef MKDIR
MKDIR:=$(GINSTALL) -m 755 -d
endif
export ECHOREDIR COPY COPYTREE MOVE DEL DELTREE INSTALL INSTALLEXE MKDIR
ifndef PPUMOVE
PPUMOVE:=$(strip $(wildcard $(addsuffix /ppumove$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(PPUMOVE),)
PPUMOVE= __missing_command_PPUMOVE
else
PPUMOVE:=$(firstword $(PPUMOVE))
endif
endif
export PPUMOVE
ifndef FPCMAKE
FPCMAKE:=$(strip $(wildcard $(addsuffix /fpcmake$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(FPCMAKE),)
FPCMAKE= __missing_command_FPCMAKE
else
FPCMAKE:=$(firstword $(FPCMAKE))
endif
endif
export FPCMAKE
ifndef ZIPPROG
ZIPPROG:=$(strip $(wildcard $(addsuffix /zip$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(ZIPPROG),)
ZIPPROG= __missing_command_ZIPPROG
else
ZIPPROG:=$(firstword $(ZIPPROG))
endif
endif
export ZIPPROG
ifndef TARPROG
TARPROG:=$(strip $(wildcard $(addsuffix /tar$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(TARPROG),)
TARPROG= __missing_command_TARPROG
else
TARPROG:=$(firstword $(TARPROG))
endif
endif
export TARPROG
ASNAME=$(BINUTILSPREFIX)as
LDNAME=$(BINUTILSPREFIX)ld
ARNAME=$(BINUTILSPREFIX)ar
RCNAME=$(BINUTILSPREFIX)rc
ifneq ($(findstring 1.0.,$(FPC_VERSION)),)
ifeq ($(OS_TARGET),win32)
ifeq ($(CROSSBINDIR),)
ASNAME=asw
LDNAME=ldw
ARNAME=arw
endif
endif
endif
ifndef ASPROG
ifdef CROSSBINDIR
ASPROG=$(CROSSBINDIR)/$(ASNAME)$(SRCEXEEXT)
else
ASPROG=$(ASNAME)
endif
endif
ifndef LDPROG
ifdef CROSSBINDIR
LDPROG=$(CROSSBINDIR)/$(LDNAME)$(SRCEXEEXT)
else
LDPROG=$(LDNAME)
endif
endif
ifndef RCPROG
ifdef CROSSBINDIR
RCPROG=$(CROSSBINDIR)/$(RCNAME)$(SRCEXEEXT)
else
RCPROG=$(RCNAME)
endif
endif
ifndef ARPROG
ifdef CROSSBINDIR
ARPROG=$(CROSSBINDIR)/$(ARNAME)$(SRCEXEEXT)
else
ARPROG=$(ARNAME)
endif
endif
AS=$(ASPROG)
LD=$(LDPROG)
RC=$(RCPROG)
AR=$(ARPROG)
PPAS=ppas$(SRCBATCHEXT)
ifdef inUnix
LDCONFIG=ldconfig
else
LDCONFIG=
endif
ifdef DATE
DATESTR:=$(shell $(DATE) +%Y%m%d)
else
DATESTR=
endif
ifndef UPXPROG
ifeq ($(OS_TARGET),go32v2)
UPXPROG:=1
endif
ifeq ($(OS_TARGET),win32)
UPXPROG:=1
endif
ifdef UPXPROG
UPXPROG:=$(strip $(wildcard $(addsuffix /upx$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(UPXPROG),)
UPXPROG=
else
UPXPROG:=$(firstword $(UPXPROG))
endif
else
UPXPROG=
endif
endif
export UPXPROG
ZIPOPT=-9
ZIPEXT=.zip
ifeq ($(USETAR),bz2)
TAROPT=vj
TAREXT=.tar.bz2
else
TAROPT=vz
TAREXT=.tar.gz
endif
ifndef NOCPUDEF
override FPCOPTDEF=$(CPU_TARGET)
endif
ifneq ($(OS_TARGET),$(OS_SOURCE))
override FPCOPT+=-T$(OS_TARGET)
endif
ifeq ($(OS_SOURCE),openbsd)
override FPCOPT+=-FD$(NEW_BINUTILS_PATH)
endif
ifndef CROSSBOOTSTRAP
ifneq ($(BINUTILSPREFIX),)
override FPCOPT+=-XP$(BINUTILSPREFIX) -Xc
endif
ifneq ($(BINUTILSPREFIX),)
override FPCOPT+=-Xr$(RLINKPATH)
endif
endif
ifdef UNITDIR
override FPCOPT+=$(addprefix -Fu,$(UNITDIR))
endif
ifdef LIBDIR
override FPCOPT+=$(addprefix -Fl,$(LIBDIR))
endif
ifdef OBJDIR
override FPCOPT+=$(addprefix -Fo,$(OBJDIR))
endif
ifdef INCDIR
override FPCOPT+=$(addprefix -Fi,$(INCDIR))
endif
ifdef LINKSMART
override FPCOPT+=-XX
endif
ifdef CREATESMART
override FPCOPT+=-CX
endif
ifdef DEBUG
override FPCOPT+=-gl
override FPCOPTDEF+=DEBUG
endif
ifdef RELEASE
ifeq ($(CPU_TARGET),i386)
FPCCPUOPT:=-OG2p3
else
ifeq ($(CPU_TARGET),powerpc)
FPCCPUOPT:=-O1
else
FPCCPUOPT:=
endif
endif
override FPCOPT+=-Xs $(FPCCPUOPT) -n
override FPCOPTDEF+=RELEASE
endif
ifdef STRIP
override FPCOPT+=-Xs
endif
ifdef OPTIMIZE
ifeq ($(CPU_TARGET),i386)
override FPCOPT+=-OG2p3
endif
endif
ifdef VERBOSE
override FPCOPT+=-vwni
endif
ifdef COMPILER_OPTIONS
override FPCOPT+=$(COMPILER_OPTIONS)
endif
ifdef COMPILER_UNITDIR
override FPCOPT+=$(addprefix -Fu,$(COMPILER_UNITDIR))
endif
ifdef COMPILER_LIBRARYDIR
override FPCOPT+=$(addprefix -Fl,$(COMPILER_LIBRARYDIR))
endif
ifdef COMPILER_OBJECTDIR
override FPCOPT+=$(addprefix -Fo,$(COMPILER_OBJECTDIR))
endif
ifdef COMPILER_INCLUDEDIR
override FPCOPT+=$(addprefix -Fi,$(COMPILER_INCLUDEDIR))
endif
ifdef CROSSBINDIR
override FPCOPT+=-FD$(CROSSBINDIR)
endif
ifdef COMPILER_TARGETDIR
override FPCOPT+=-FE$(COMPILER_TARGETDIR)
ifeq ($(COMPILER_TARGETDIR),.)
override TARGETDIRPREFIX=
else
override TARGETDIRPREFIX=$(COMPILER_TARGETDIR)/
endif
endif
ifdef COMPILER_UNITTARGETDIR
override FPCOPT+=-FU$(COMPILER_UNITTARGETDIR)
ifeq ($(COMPILER_UNITTARGETDIR),.)
override UNITTARGETDIRPREFIX=
else
override UNITTARGETDIRPREFIX=$(COMPILER_UNITTARGETDIR)/
endif
else
ifdef COMPILER_TARGETDIR
override COMPILER_UNITTARGETDIR=$(COMPILER_TARGETDIR)
override UNITTARGETDIRPREFIX=$(TARGETDIRPREFIX)
endif
endif
ifeq ($(OS_TARGET),linux)
ifeq ($(FPC_VERSION),1.0.6)
override FPCOPTDEF+=HASUNIX
endif
endif
ifdef OPT
override FPCOPT+=$(OPT)
endif
ifdef FPCOPTDEF
override FPCOPT+=$(addprefix -d,$(FPCOPTDEF))
endif
ifdef CFGFILE
override FPCOPT+=@$(CFGFILE)
endif
ifdef USEENV
override FPCEXTCMD:=$(FPCOPT)
override FPCOPT:=!FPCEXTCMD
export FPCEXTCMD
endif
override COMPILER:=$(FPC) $(FPCOPT)
ifeq (,$(findstring -s ,$(COMPILER)))
EXECPPAS=
else
ifeq ($(FULL_SOURCE),$(FULL_TARGET))
EXECPPAS:=@$(PPAS)
endif
endif
ifdef TARGET_RSTS
override RSTFILES=$(addsuffix $(RSTEXT),$(TARGET_RSTS))
override CLEANRSTFILES+=$(RSTFILES)
endif
.PHONY: fpc_clean fpc_cleanall fpc_distclean
ifdef EXEFILES
override CLEANEXEFILES:=$(addprefix $(TARGETDIRPREFIX),$(CLEANEXEFILES))
endif
ifdef CLEAN_UNITS
override CLEANPPUFILES+=$(addsuffix $(PPUEXT),$(CLEAN_UNITS))
endif
ifdef CLEANPPUFILES
override CLEANPPULINKFILES:=$(subst $(PPUEXT),$(OEXT),$(CLEANPPUFILES)) $(addprefix $(STATICLIBPREFIX),$(subst $(PPUEXT),$(STATICLIBEXT),$(CLEANPPUFILES)))
ifdef DEBUGSYMEXT
override CLEANPPULINKFILES+=$(subst $(PPUEXT),$(DEBUGSYMEXT),$(CLEANPPUFILES))
endif
override CLEANPPUFILES:=$(addprefix $(UNITTARGETDIRPREFIX),$(CLEANPPUFILES))
override CLEANPPULINKFILES:=$(wildcard $(addprefix $(UNITTARGETDIRPREFIX),$(CLEANPPULINKFILES)))
endif
fpc_clean: $(CLEANTARGET)
ifdef CLEANEXEFILES
	-$(DEL) $(CLEANEXEFILES)
endif
ifdef CLEANPPUFILES
	-$(DEL) $(CLEANPPUFILES)
endif
ifneq ($(CLEANPPULINKFILES),)
	-$(DEL) $(CLEANPPULINKFILES)
endif
ifdef CLEANRSTFILES
	-$(DEL) $(addprefix $(UNITTARGETDIRPREFIX),$(CLEANRSTFILES))
endif
ifdef CLEAN_FILES
	-$(DEL) $(CLEAN_FILES)
endif
ifdef LIB_NAME
	-$(DEL) $(LIB_NAME) $(LIB_FULLNAME)
endif
	-$(DEL) $(FPCMADE) Package.fpc $(PPAS) script.res link.res $(FPCEXTFILE) $(REDIRFILE)
	-$(DEL) *$(ASMEXT) *_ppas$(BATCHEXT)
fpc_cleanall: $(CLEANTARGET)
ifdef CLEANEXEFILES
	-$(DEL) $(CLEANEXEFILES)
endif
ifdef COMPILER_UNITTARGETDIR
ifdef CLEANPPUFILES
	-$(DEL) $(CLEANPPUFILES)
endif
ifneq ($(CLEANPPULINKFILES),)
	-$(DEL) $(CLEANPPULINKFILES)
endif
ifdef CLEANRSTFILES
	-$(DEL) $(addprefix $(UNITTARGETDIRPREFIX),$(CLEANRSTFILES))
endif
endif
	-$(DELTREE) units
	-$(DEL) *$(OEXT) *$(PPUEXT) *$(RSTEXT) *$(ASMEXT) *$(STATICLIBEXT) *$(SHAREDLIBEXT) *$(PPLEXT)
ifneq ($(PPUEXT),.ppu)
	-$(DEL) *.o *.ppu *.a
endif
	-$(DELTREE) *$(SMARTEXT)
	-$(DEL) fpcmade.* Package.fpc $(PPAS) script.res link.res $(FPCEXTFILE) $(REDIRFILE)
	-$(DEL) *_ppas$(BATCHEXT)
ifdef AOUTEXT
	-$(DEL) *$(AOUTEXT)
endif
ifdef DEBUGSYMEXT
	-$(DEL) *$(DEBUGSYMEXT)
endif
fpc_distclean: cleanall
.PHONY: fpc_baseinfo
override INFORULES+=fpc_baseinfo
fpc_baseinfo:
	@$(ECHO)
	@$(ECHO)  == Package info ==
	@$(ECHO)  Package Name..... $(PACKAGE_NAME)
	@$(ECHO)  Package Version.. $(PACKAGE_VERSION)
	@$(ECHO)
	@$(ECHO)  == Configuration info ==
	@$(ECHO)
	@$(ECHO)  FPC.......... $(FPC)
	@$(ECHO)  FPC Version.. $(FPC_VERSION)
	@$(ECHO)  Source CPU... $(CPU_SOURCE)
	@$(ECHO)  Target CPU... $(CPU_TARGET)
	@$(ECHO)  Source OS.... $(OS_SOURCE)
	@$(ECHO)  Target OS.... $(OS_TARGET)
	@$(ECHO)  Full Source.. $(FULL_SOURCE)
	@$(ECHO)  Full Target.. $(FULL_TARGET)
	@$(ECHO)  SourceSuffix. $(SOURCESUFFIX)
	@$(ECHO)  TargetSuffix. $(TARGETSUFFIX)
	@$(ECHO)
	@$(ECHO)  == Directory info ==
	@$(ECHO)
	@$(ECHO)  Required pkgs... $(REQUIRE_PACKAGES)
	@$(ECHO)
	@$(ECHO)  Basedir......... $(BASEDIR)
	@$(ECHO)  FPCDir.......... $(FPCDIR)
	@$(ECHO)  CrossBinDir..... $(CROSSBINDIR)
	@$(ECHO)  UnitsDir........ $(UNITSDIR)
	@$(ECHO)  PackagesDir..... $(PACKAGESDIR)
	@$(ECHO)
	@$(ECHO)  GCC library..... $(GCCLIBDIR)
	@$(ECHO)  Other library... $(OTHERLIBDIR)
	@$(ECHO)
	@$(ECHO)  == Tools info ==
	@$(ECHO)
	@$(ECHO)  As........ $(AS)
	@$(ECHO)  Ld........ $(LD)
	@$(ECHO)  Ar........ $(AR)
	@$(ECHO)  Rc........ $(RC)
	@$(ECHO)
	@$(ECHO)  Mv........ $(MVPROG)
	@$(ECHO)  Cp........ $(CPPROG)
	@$(ECHO)  Rm........ $(RMPROG)
	@$(ECHO)  GInstall.. $(GINSTALL)
	@$(ECHO)  Echo...... $(ECHO)
	@$(ECHO)  Shell..... $(SHELL)
	@$(ECHO)  Date...... $(DATE)
	@$(ECHO)  FPCMake... $(FPCMAKE)
	@$(ECHO)  PPUMove... $(PPUMOVE)
	@$(ECHO)  Upx....... $(UPXPROG)
	@$(ECHO)  Zip....... $(ZIPPROG)
	@$(ECHO)
	@$(ECHO)  == Object info ==
	@$(ECHO)
	@$(ECHO)  Target Loaders........ $(TARGET_LOADERS)
	@$(ECHO)  Target Units.......... $(TARGET_UNITS)
	@$(ECHO)  Target Implicit Units. $(TARGET_IMPLICITUNITS)
	@$(ECHO)  Target Programs....... $(TARGET_PROGRAMS)
	@$(ECHO)  Target Dirs........... $(TARGET_DIRS)
	@$(ECHO)  Target Examples....... $(TARGET_EXAMPLES)
	@$(ECHO)  Target ExampleDirs.... $(TARGET_EXAMPLEDIRS)
	@$(ECHO)
	@$(ECHO)  Clean Units......... $(CLEAN_UNITS)
	@$(ECHO)  Clean Files......... $(CLEAN_FILES)
	@$(ECHO)
	@$(ECHO)  Install Units....... $(INSTALL_UNITS)
	@$(ECHO)  Install Files....... $(INSTALL_FILES)
	@$(ECHO)
	@$(ECHO)  == Install info ==
	@$(ECHO)
	@$(ECHO)  DateStr.............. $(DATESTR)
	@$(ECHO)  ZipName.............. $(ZIPNAME)
	@$(ECHO)  ZipPrefix............ $(ZIPPREFIX)
	@$(ECHO)  ZipCrossPrefix....... $(ZIPCROSSPREFIX)
	@$(ECHO)  ZipSuffix............ $(ZIPSUFFIX)
	@$(ECHO)  FullZipName.......... $(FULLZIPNAME)
	@$(ECHO)  Install FPC Package.. $(INSTALL_FPCPACKAGE)
	@$(ECHO)
	@$(ECHO)  Install base dir..... $(INSTALL_BASEDIR)
	@$(ECHO)  Install binary dir... $(INSTALL_BINDIR)
	@$(ECHO)  Install library dir.. $(INSTALL_LIBDIR)
	@$(ECHO)  Install units dir.... $(INSTALL_UNITDIR)
	@$(ECHO)  Install source dir... $(INSTALL_SOURCEDIR)
	@$(ECHO)  Install doc dir...... $(INSTALL_DOCDIR)
	@$(ECHO)  Install example dir.. $(INSTALL_EXAMPLEDIR)
	@$(ECHO)  Install data dir..... $(INSTALL_DATADIR)
	@$(ECHO)
	@$(ECHO)  Dist destination dir. $(DIST_DESTDIR)
	@$(ECHO)  Dist zip name........ $(DIST_ZIPNAME)
	@$(ECHO)
.PHONY: fpc_info
fpc_info: $(INFORULES)
.PHONY: fpc_makefile fpc_makefiles fpc_makefile_sub1 fpc_makefile_sub2 \
	fpc_makefile_dirs
fpc_makefile:
	$(FPCMAKE) -w -T$(OS_TARGET) Makefile.fpc
fpc_makefile_sub1:
ifdef TARGET_DIRS
	$(FPCMAKE) -w -T$(OS_TARGET) $(addsuffix /Makefile.fpc,$(TARGET_DIRS))
endif
ifdef TARGET_EXAMPLEDIRS
	$(FPCMAKE) -w -T$(OS_TARGET) $(addsuffix /Makefile.fpc,$(TARGET_EXAMPLEDIRS))
endif
fpc_makefile_sub2: $(addsuffix _makefile_dirs,$(TARGET_DIRS) $(TARGET_EXAMPLEDIRS))
fpc_makefile_dirs: fpc_makefile_sub1 fpc_makefile_sub2
fpc_makefiles: fpc_makefile fpc_makefile_dirs
ifeq ($(FULL_TARGET),i386-linux)
TARGET_DIRS_PASZLIB=1
TARGET_DIRS_PASJPEG=1
TARGET_DIRS_REGEXPR=1
TARGET_DIRS_NETDB=1
TARGET_DIRS_HASH=1
TARGET_DIRS_GDBINT=1
TARGET_DIRS_LIBASYNC=1
TARGET_DIRS_MYSQL=1
TARGET_DIRS_IBASE=1
TARGET_DIRS_POSTGRES=1
TARGET_DIRS_ORACLE=1
TARGET_DIRS_ODBC=1
TARGET_DIRS_PTHREADS=1
TARGET_DIRS_SQLITE=1
TARGET_DIRS_LIBC=1
endif
ifeq ($(FULL_TARGET),i386-go32v2)
TARGET_DIRS_PASZLIB=1
TARGET_DIRS_PASJPEG=1
TARGET_DIRS_REGEXPR=1
TARGET_DIRS_NETDB=1
TARGET_DIRS_HASH=1
TARGET_DIRS_GDBINT=1
endif
ifeq ($(FULL_TARGET),i386-win32)
TARGET_DIRS_PASZLIB=1
TARGET_DIRS_PASJPEG=1
TARGET_DIRS_REGEXPR=1
TARGET_DIRS_NETDB=1
TARGET_DIRS_HASH=1
TARGET_DIRS_GDBINT=1
TARGET_DIRS_MYSQL=1
TARGET_DIRS_IBASE=1
TARGET_DIRS_ODBC=1
TARGET_DIRS_SQLITE=1
TARGET_DIRS_POSTGRES=1
endif
ifeq ($(FULL_TARGET),i386-os2)
TARGET_DIRS_PASZLIB=1
TARGET_DIRS_PASJPEG=1
TARGET_DIRS_REGEXPR=1
TARGET_DIRS_NETDB=1
TARGET_DIRS_HASH=1
endif
ifeq ($(FULL_TARGET),i386-freebsd)
TARGET_DIRS_PASZLIB=1
TARGET_DIRS_PASJPEG=1
TARGET_DIRS_REGEXPR=1
TARGET_DIRS_NETDB=1
TARGET_DIRS_HASH=1
TARGET_DIRS_GDBINT=1
TARGET_DIRS_LIBASYNC=1
TARGET_DIRS_MYSQL=1
TARGET_DIRS_IBASE=1
TARGET_DIRS_POSTGRES=1
TARGET_DIRS_ORACLE=1
TARGET_DIRS_ODBC=1
TARGET_DIRS_SQLITE=1
TARGET_DIRS_PTHREADS=1
endif
ifeq ($(FULL_TARGET),i386-beos)
TARGET_DIRS_PASZLIB=1
TARGET_DIRS_PASJPEG=1
TARGET_DIRS_REGEXPR=1
TARGET_DIRS_NETDB=1
TARGET_DIRS_HASH=1
endif
ifeq ($(FULL_TARGET),i386-netbsd)
TARGET_DIRS_PASZLIB=1
TARGET_DIRS_PASJPEG=1
TARGET_DIRS_REGEXPR=1
TARGET_DIRS_NETDB=1
TARGET_DIRS_HASH=1
TARGET_DIRS_GDBINT=1
TARGET_DIRS_LIBASYNC=1
TARGET_DIRS_MYSQL=1
TARGET_DIRS_IBASE=1
TARGET_DIRS_POSTGRES=1
TARGET_DIRS_ORACLE=1
TARGET_DIRS_ODBC=1
endif
ifeq ($(FULL_TARGET),i386-solaris)
TARGET_DIRS_PASZLIB=1
TARGET_DIRS_PASJPEG=1
TARGET_DIRS_REGEXPR=1
TARGET_DIRS_NETDB=1
TARGET_DIRS_HASH=1
endif
ifeq ($(FULL_TARGET),i386-qnx)
TARGET_DIRS_PASZLIB=1
TARGET_DIRS_PASJPEG=1
TARGET_DIRS_REGEXPR=1
TARGET_DIRS_NETDB=1
TARGET_DIRS_HASH=1
endif
ifeq ($(FULL_TARGET),i386-netware)
TARGET_DIRS_PASZLIB=1
TARGET_DIRS_PASJPEG=1
TARGET_DIRS_REGEXPR=1
TARGET_DIRS_NETDB=1
TARGET_DIRS_HASH=1
endif
ifeq ($(FULL_TARGET),i386-openbsd)
TARGET_DIRS_PASZLIB=1
TARGET_DIRS_PASJPEG=1
TARGET_DIRS_REGEXPR=1
TARGET_DIRS_NETDB=1
TARGET_DIRS_HASH=1
TARGET_DIRS_GDBINT=1
TARGET_DIRS_LIBASYNC=1
TARGET_DIRS_MYSQL=1
TARGET_DIRS_IBASE=1
TARGET_DIRS_POSTGRES=1
TARGET_DIRS_ORACLE=1
TARGET_DIRS_ODBC=1
endif
ifeq ($(FULL_TARGET),i386-wdosx)
TARGET_DIRS_PASZLIB=1
TARGET_DIRS_PASJPEG=1
TARGET_DIRS_REGEXPR=1
TARGET_DIRS_NETDB=1
TARGET_DIRS_HASH=1
endif
ifeq ($(FULL_TARGET),i386-emx)
TARGET_DIRS_PASZLIB=1
TARGET_DIRS_PASJPEG=1
TARGET_DIRS_REGEXPR=1
TARGET_DIRS_NETDB=1
TARGET_DIRS_HASH=1
endif
ifeq ($(FULL_TARGET),i386-watcom)
TARGET_DIRS_PASZLIB=1
TARGET_DIRS_PASJPEG=1
TARGET_DIRS_REGEXPR=1
TARGET_DIRS_NETDB=1
TARGET_DIRS_HASH=1
endif
ifeq ($(FULL_TARGET),i386-netwlibc)
TARGET_DIRS_PASZLIB=1
TARGET_DIRS_PASJPEG=1
TARGET_DIRS_REGEXPR=1
TARGET_DIRS_NETDB=1
TARGET_DIRS_HASH=1
endif
ifeq ($(FULL_TARGET),m68k-linux)
TARGET_DIRS_PASZLIB=1
TARGET_DIRS_PASJPEG=1
TARGET_DIRS_REGEXPR=1
TARGET_DIRS_NETDB=1
TARGET_DIRS_HASH=1
TARGET_DIRS_GDBINT=1
TARGET_DIRS_LIBASYNC=1
TARGET_DIRS_MYSQL=1
TARGET_DIRS_IBASE=1
TARGET_DIRS_POSTGRES=1
TARGET_DIRS_ORACLE=1
TARGET_DIRS_ODBC=1
TARGET_DIRS_PTHREADS=1
TARGET_DIRS_SQLITE=1
TARGET_DIRS_LIBC=1
endif
ifeq ($(FULL_TARGET),m68k-freebsd)
TARGET_DIRS_PASZLIB=1
TARGET_DIRS_PASJPEG=1
TARGET_DIRS_REGEXPR=1
TARGET_DIRS_NETDB=1
TARGET_DIRS_HASH=1
TARGET_DIRS_GDBINT=1
TARGET_DIRS_LIBASYNC=1
TARGET_DIRS_MYSQL=1
TARGET_DIRS_IBASE=1
TARGET_DIRS_POSTGRES=1
TARGET_DIRS_ORACLE=1
TARGET_DIRS_ODBC=1
TARGET_DIRS_SQLITE=1
TARGET_DIRS_PTHREADS=1
endif
ifeq ($(FULL_TARGET),m68k-netbsd)
TARGET_DIRS_PASZLIB=1
TARGET_DIRS_PASJPEG=1
TARGET_DIRS_REGEXPR=1
TARGET_DIRS_NETDB=1
TARGET_DIRS_HASH=1
TARGET_DIRS_GDBINT=1
TARGET_DIRS_LIBASYNC=1
TARGET_DIRS_MYSQL=1
TARGET_DIRS_IBASE=1
TARGET_DIRS_POSTGRES=1
TARGET_DIRS_ORACLE=1
TARGET_DIRS_ODBC=1
endif
ifeq ($(FULL_TARGET),m68k-amiga)
TARGET_DIRS_PASZLIB=1
TARGET_DIRS_PASJPEG=1
TARGET_DIRS_REGEXPR=1
TARGET_DIRS_NETDB=1
TARGET_DIRS_HASH=1
endif
ifeq ($(FULL_TARGET),m68k-atari)
TARGET_DIRS_PASZLIB=1
TARGET_DIRS_PASJPEG=1
TARGET_DIRS_REGEXPR=1
TARGET_DIRS_NETDB=1
TARGET_DIRS_HASH=1
endif
ifeq ($(FULL_TARGET),m68k-openbsd)
TARGET_DIRS_PASZLIB=1
TARGET_DIRS_PASJPEG=1
TARGET_DIRS_REGEXPR=1
TARGET_DIRS_NETDB=1
TARGET_DIRS_HASH=1
TARGET_DIRS_GDBINT=1
TARGET_DIRS_LIBASYNC=1
TARGET_DIRS_MYSQL=1
TARGET_DIRS_IBASE=1
TARGET_DIRS_POSTGRES=1
TARGET_DIRS_ORACLE=1
TARGET_DIRS_ODBC=1
endif
ifeq ($(FULL_TARGET),m68k-palmos)
TARGET_DIRS_PASZLIB=1
TARGET_DIRS_PASJPEG=1
TARGET_DIRS_REGEXPR=1
TARGET_DIRS_NETDB=1
TARGET_DIRS_HASH=1
endif
ifeq ($(FULL_TARGET),powerpc-linux)
TARGET_DIRS_PASZLIB=1
TARGET_DIRS_PASJPEG=1
TARGET_DIRS_REGEXPR=1
TARGET_DIRS_NETDB=1
TARGET_DIRS_HASH=1
TARGET_DIRS_GDBINT=1
TARGET_DIRS_LIBASYNC=1
TARGET_DIRS_MYSQL=1
TARGET_DIRS_IBASE=1
TARGET_DIRS_POSTGRES=1
TARGET_DIRS_ORACLE=1
TARGET_DIRS_ODBC=1
TARGET_DIRS_PTHREADS=1
TARGET_DIRS_SQLITE=1
TARGET_DIRS_LIBC=1
endif
ifeq ($(FULL_TARGET),powerpc-netbsd)
TARGET_DIRS_PASZLIB=1
TARGET_DIRS_PASJPEG=1
TARGET_DIRS_REGEXPR=1
TARGET_DIRS_NETDB=1
TARGET_DIRS_HASH=1
TARGET_DIRS_GDBINT=1
TARGET_DIRS_LIBASYNC=1
TARGET_DIRS_MYSQL=1
TARGET_DIRS_IBASE=1
TARGET_DIRS_POSTGRES=1
TARGET_DIRS_ORACLE=1
TARGET_DIRS_ODBC=1
endif
ifeq ($(FULL_TARGET),powerpc-macos)
TARGET_DIRS_PASZLIB=1
TARGET_DIRS_PASJPEG=1
TARGET_DIRS_REGEXPR=1
TARGET_DIRS_NETDB=1
TARGET_DIRS_HASH=1
endif
ifeq ($(FULL_TARGET),powerpc-darwin)
TARGET_DIRS_PASZLIB=1
TARGET_DIRS_PASJPEG=1
TARGET_DIRS_REGEXPR=1
TARGET_DIRS_NETDB=1
TARGET_DIRS_HASH=1
TARGET_DIRS_LIBASYNC=1
TARGET_DIRS_MYSQL=1
TARGET_DIRS_IBASE=1
TARGET_DIRS_POSTGRES=1
TARGET_DIRS_ORACLE=1
TARGET_DIRS_ODBC=1
TARGET_DIRS_SQLITE=1
TARGET_DIRS_PTHREADS=1
endif
ifeq ($(FULL_TARGET),powerpc-morphos)
TARGET_DIRS_PASZLIB=1
TARGET_DIRS_PASJPEG=1
TARGET_DIRS_REGEXPR=1
TARGET_DIRS_NETDB=1
TARGET_DIRS_HASH=1
endif
ifeq ($(FULL_TARGET),sparc-linux)
TARGET_DIRS_PASZLIB=1
TARGET_DIRS_PASJPEG=1
TARGET_DIRS_REGEXPR=1
TARGET_DIRS_NETDB=1
TARGET_DIRS_HASH=1
TARGET_DIRS_GDBINT=1
TARGET_DIRS_LIBASYNC=1
TARGET_DIRS_MYSQL=1
TARGET_DIRS_IBASE=1
TARGET_DIRS_POSTGRES=1
TARGET_DIRS_ORACLE=1
TARGET_DIRS_ODBC=1
TARGET_DIRS_PTHREADS=1
TARGET_DIRS_SQLITE=1
TARGET_DIRS_LIBC=1
endif
ifeq ($(FULL_TARGET),sparc-netbsd)
TARGET_DIRS_PASZLIB=1
TARGET_DIRS_PASJPEG=1
TARGET_DIRS_REGEXPR=1
TARGET_DIRS_NETDB=1
TARGET_DIRS_HASH=1
TARGET_DIRS_GDBINT=1
TARGET_DIRS_LIBASYNC=1
TARGET_DIRS_MYSQL=1
TARGET_DIRS_IBASE=1
TARGET_DIRS_POSTGRES=1
TARGET_DIRS_ORACLE=1
TARGET_DIRS_ODBC=1
endif
ifeq ($(FULL_TARGET),sparc-solaris)
TARGET_DIRS_PASZLIB=1
TARGET_DIRS_PASJPEG=1
TARGET_DIRS_REGEXPR=1
TARGET_DIRS_NETDB=1
TARGET_DIRS_HASH=1
endif
ifeq ($(FULL_TARGET),x86_64-linux)
TARGET_DIRS_PASZLIB=1
TARGET_DIRS_PASJPEG=1
TARGET_DIRS_REGEXPR=1
TARGET_DIRS_NETDB=1
TARGET_DIRS_HASH=1
TARGET_DIRS_GDBINT=1
TARGET_DIRS_LIBASYNC=1
TARGET_DIRS_MYSQL=1
TARGET_DIRS_IBASE=1
TARGET_DIRS_POSTGRES=1
TARGET_DIRS_ORACLE=1
TARGET_DIRS_ODBC=1
TARGET_DIRS_PTHREADS=1
TARGET_DIRS_SQLITE=1
TARGET_DIRS_LIBC=1
endif
ifeq ($(FULL_TARGET),x86_64-freebsd)
TARGET_DIRS_PASZLIB=1
TARGET_DIRS_PASJPEG=1
TARGET_DIRS_REGEXPR=1
TARGET_DIRS_NETDB=1
TARGET_DIRS_HASH=1
TARGET_DIRS_GDBINT=1
TARGET_DIRS_LIBASYNC=1
TARGET_DIRS_MYSQL=1
TARGET_DIRS_IBASE=1
TARGET_DIRS_POSTGRES=1
TARGET_DIRS_ORACLE=1
TARGET_DIRS_ODBC=1
TARGET_DIRS_SQLITE=1
TARGET_DIRS_PTHREADS=1
endif
ifeq ($(FULL_TARGET),arm-linux)
TARGET_DIRS_PASZLIB=1
TARGET_DIRS_PASJPEG=1
TARGET_DIRS_REGEXPR=1
TARGET_DIRS_NETDB=1
TARGET_DIRS_HASH=1
TARGET_DIRS_GDBINT=1
TARGET_DIRS_LIBASYNC=1
TARGET_DIRS_MYSQL=1
TARGET_DIRS_IBASE=1
TARGET_DIRS_POSTGRES=1
TARGET_DIRS_ORACLE=1
TARGET_DIRS_ODBC=1
TARGET_DIRS_PTHREADS=1
TARGET_DIRS_SQLITE=1
TARGET_DIRS_LIBC=1
endif
ifdef TARGET_DIRS_PASZLIB
paszlib_all:
	$(MAKE) -C paszlib all
paszlib_debug:
	$(MAKE) -C paszlib debug
paszlib_smart:
	$(MAKE) -C paszlib smart
paszlib_release:
	$(MAKE) -C paszlib release
paszlib_units:
	$(MAKE) -C paszlib units
paszlib_examples:
	$(MAKE) -C paszlib examples
paszlib_shared:
	$(MAKE) -C paszlib shared
paszlib_install:
	$(MAKE) -C paszlib install
paszlib_sourceinstall:
	$(MAKE) -C paszlib sourceinstall
paszlib_exampleinstall:
	$(MAKE) -C paszlib exampleinstall
paszlib_distinstall:
	$(MAKE) -C paszlib distinstall
paszlib_zipinstall:
	$(MAKE) -C paszlib zipinstall
paszlib_zipsourceinstall:
	$(MAKE) -C paszlib zipsourceinstall
paszlib_zipexampleinstall:
	$(MAKE) -C paszlib zipexampleinstall
paszlib_zipdistinstall:
	$(MAKE) -C paszlib zipdistinstall
paszlib_clean:
	$(MAKE) -C paszlib clean
paszlib_distclean:
	$(MAKE) -C paszlib distclean
paszlib_cleanall:
	$(MAKE) -C paszlib cleanall
paszlib_info:
	$(MAKE) -C paszlib info
paszlib_makefiles:
	$(MAKE) -C paszlib makefiles
paszlib:
	$(MAKE) -C paszlib all
.PHONY: paszlib_all paszlib_debug paszlib_smart paszlib_release paszlib_units paszlib_examples paszlib_shared paszlib_install paszlib_sourceinstall paszlib_exampleinstall paszlib_distinstall paszlib_zipinstall paszlib_zipsourceinstall paszlib_zipexampleinstall paszlib_zipdistinstall paszlib_clean paszlib_distclean paszlib_cleanall paszlib_info paszlib_makefiles paszlib
endif
ifdef TARGET_DIRS_PASJPEG
pasjpeg_all:
	$(MAKE) -C pasjpeg all
pasjpeg_debug:
	$(MAKE) -C pasjpeg debug
pasjpeg_smart:
	$(MAKE) -C pasjpeg smart
pasjpeg_release:
	$(MAKE) -C pasjpeg release
pasjpeg_units:
	$(MAKE) -C pasjpeg units
pasjpeg_examples:
	$(MAKE) -C pasjpeg examples
pasjpeg_shared:
	$(MAKE) -C pasjpeg shared
pasjpeg_install:
	$(MAKE) -C pasjpeg install
pasjpeg_sourceinstall:
	$(MAKE) -C pasjpeg sourceinstall
pasjpeg_exampleinstall:
	$(MAKE) -C pasjpeg exampleinstall
pasjpeg_distinstall:
	$(MAKE) -C pasjpeg distinstall
pasjpeg_zipinstall:
	$(MAKE) -C pasjpeg zipinstall
pasjpeg_zipsourceinstall:
	$(MAKE) -C pasjpeg zipsourceinstall
pasjpeg_zipexampleinstall:
	$(MAKE) -C pasjpeg zipexampleinstall
pasjpeg_zipdistinstall:
	$(MAKE) -C pasjpeg zipdistinstall
pasjpeg_clean:
	$(MAKE) -C pasjpeg clean
pasjpeg_distclean:
	$(MAKE) -C pasjpeg distclean
pasjpeg_cleanall:
	$(MAKE) -C pasjpeg cleanall
pasjpeg_info:
	$(MAKE) -C pasjpeg info
pasjpeg_makefiles:
	$(MAKE) -C pasjpeg makefiles
pasjpeg:
	$(MAKE) -C pasjpeg all
.PHONY: pasjpeg_all pasjpeg_debug pasjpeg_smart pasjpeg_release pasjpeg_units pasjpeg_examples pasjpeg_shared pasjpeg_install pasjpeg_sourceinstall pasjpeg_exampleinstall pasjpeg_distinstall pasjpeg_zipinstall pasjpeg_zipsourceinstall pasjpeg_zipexampleinstall pasjpeg_zipdistinstall pasjpeg_clean pasjpeg_distclean pasjpeg_cleanall pasjpeg_info pasjpeg_makefiles pasjpeg
endif
ifdef TARGET_DIRS_REGEXPR
regexpr_all:
	$(MAKE) -C regexpr all
regexpr_debug:
	$(MAKE) -C regexpr debug
regexpr_smart:
	$(MAKE) -C regexpr smart
regexpr_release:
	$(MAKE) -C regexpr release
regexpr_units:
	$(MAKE) -C regexpr units
regexpr_examples:
	$(MAKE) -C regexpr examples
regexpr_shared:
	$(MAKE) -C regexpr shared
regexpr_install:
	$(MAKE) -C regexpr install
regexpr_sourceinstall:
	$(MAKE) -C regexpr sourceinstall
regexpr_exampleinstall:
	$(MAKE) -C regexpr exampleinstall
regexpr_distinstall:
	$(MAKE) -C regexpr distinstall
regexpr_zipinstall:
	$(MAKE) -C regexpr zipinstall
regexpr_zipsourceinstall:
	$(MAKE) -C regexpr zipsourceinstall
regexpr_zipexampleinstall:
	$(MAKE) -C regexpr zipexampleinstall
regexpr_zipdistinstall:
	$(MAKE) -C regexpr zipdistinstall
regexpr_clean:
	$(MAKE) -C regexpr clean
regexpr_distclean:
	$(MAKE) -C regexpr distclean
regexpr_cleanall:
	$(MAKE) -C regexpr cleanall
regexpr_info:
	$(MAKE) -C regexpr info
regexpr_makefiles:
	$(MAKE) -C regexpr makefiles
regexpr:
	$(MAKE) -C regexpr all
.PHONY: regexpr_all regexpr_debug regexpr_smart regexpr_release regexpr_units regexpr_examples regexpr_shared regexpr_install regexpr_sourceinstall regexpr_exampleinstall regexpr_distinstall regexpr_zipinstall regexpr_zipsourceinstall regexpr_zipexampleinstall regexpr_zipdistinstall regexpr_clean regexpr_distclean regexpr_cleanall regexpr_info regexpr_makefiles regexpr
endif
ifdef TARGET_DIRS_NETDB
netdb_all:
	$(MAKE) -C netdb all
netdb_debug:
	$(MAKE) -C netdb debug
netdb_smart:
	$(MAKE) -C netdb smart
netdb_release:
	$(MAKE) -C netdb release
netdb_units:
	$(MAKE) -C netdb units
netdb_examples:
	$(MAKE) -C netdb examples
netdb_shared:
	$(MAKE) -C netdb shared
netdb_install:
	$(MAKE) -C netdb install
netdb_sourceinstall:
	$(MAKE) -C netdb sourceinstall
netdb_exampleinstall:
	$(MAKE) -C netdb exampleinstall
netdb_distinstall:
	$(MAKE) -C netdb distinstall
netdb_zipinstall:
	$(MAKE) -C netdb zipinstall
netdb_zipsourceinstall:
	$(MAKE) -C netdb zipsourceinstall
netdb_zipexampleinstall:
	$(MAKE) -C netdb zipexampleinstall
netdb_zipdistinstall:
	$(MAKE) -C netdb zipdistinstall
netdb_clean:
	$(MAKE) -C netdb clean
netdb_distclean:
	$(MAKE) -C netdb distclean
netdb_cleanall:
	$(MAKE) -C netdb cleanall
netdb_info:
	$(MAKE) -C netdb info
netdb_makefiles:
	$(MAKE) -C netdb makefiles
netdb:
	$(MAKE) -C netdb all
.PHONY: netdb_all netdb_debug netdb_smart netdb_release netdb_units netdb_examples netdb_shared netdb_install netdb_sourceinstall netdb_exampleinstall netdb_distinstall netdb_zipinstall netdb_zipsourceinstall netdb_zipexampleinstall netdb_zipdistinstall netdb_clean netdb_distclean netdb_cleanall netdb_info netdb_makefiles netdb
endif
ifdef TARGET_DIRS_HASH
hash_all:
	$(MAKE) -C hash all
hash_debug:
	$(MAKE) -C hash debug
hash_smart:
	$(MAKE) -C hash smart
hash_release:
	$(MAKE) -C hash release
hash_units:
	$(MAKE) -C hash units
hash_examples:
	$(MAKE) -C hash examples
hash_shared:
	$(MAKE) -C hash shared
hash_install:
	$(MAKE) -C hash install
hash_sourceinstall:
	$(MAKE) -C hash sourceinstall
hash_exampleinstall:
	$(MAKE) -C hash exampleinstall
hash_distinstall:
	$(MAKE) -C hash distinstall
hash_zipinstall:
	$(MAKE) -C hash zipinstall
hash_zipsourceinstall:
	$(MAKE) -C hash zipsourceinstall
hash_zipexampleinstall:
	$(MAKE) -C hash zipexampleinstall
hash_zipdistinstall:
	$(MAKE) -C hash zipdistinstall
hash_clean:
	$(MAKE) -C hash clean
hash_distclean:
	$(MAKE) -C hash distclean
hash_cleanall:
	$(MAKE) -C hash cleanall
hash_info:
	$(MAKE) -C hash info
hash_makefiles:
	$(MAKE) -C hash makefiles
hash:
	$(MAKE) -C hash all
.PHONY: hash_all hash_debug hash_smart hash_release hash_units hash_examples hash_shared hash_install hash_sourceinstall hash_exampleinstall hash_distinstall hash_zipinstall hash_zipsourceinstall hash_zipexampleinstall hash_zipdistinstall hash_clean hash_distclean hash_cleanall hash_info hash_makefiles hash
endif
ifdef TARGET_DIRS_GDBINT
gdbint_all:
	$(MAKE) -C gdbint all
gdbint_debug:
	$(MAKE) -C gdbint debug
gdbint_smart:
	$(MAKE) -C gdbint smart
gdbint_release:
	$(MAKE) -C gdbint release
gdbint_units:
	$(MAKE) -C gdbint units
gdbint_examples:
	$(MAKE) -C gdbint examples
gdbint_shared:
	$(MAKE) -C gdbint shared
gdbint_install:
	$(MAKE) -C gdbint install
gdbint_sourceinstall:
	$(MAKE) -C gdbint sourceinstall
gdbint_exampleinstall:
	$(MAKE) -C gdbint exampleinstall
gdbint_distinstall:
	$(MAKE) -C gdbint distinstall
gdbint_zipinstall:
	$(MAKE) -C gdbint zipinstall
gdbint_zipsourceinstall:
	$(MAKE) -C gdbint zipsourceinstall
gdbint_zipexampleinstall:
	$(MAKE) -C gdbint zipexampleinstall
gdbint_zipdistinstall:
	$(MAKE) -C gdbint zipdistinstall
gdbint_clean:
	$(MAKE) -C gdbint clean
gdbint_distclean:
	$(MAKE) -C gdbint distclean
gdbint_cleanall:
	$(MAKE) -C gdbint cleanall
gdbint_info:
	$(MAKE) -C gdbint info
gdbint_makefiles:
	$(MAKE) -C gdbint makefiles
gdbint:
	$(MAKE) -C gdbint all
.PHONY: gdbint_all gdbint_debug gdbint_smart gdbint_release gdbint_units gdbint_examples gdbint_shared gdbint_install gdbint_sourceinstall gdbint_exampleinstall gdbint_distinstall gdbint_zipinstall gdbint_zipsourceinstall gdbint_zipexampleinstall gdbint_zipdistinstall gdbint_clean gdbint_distclean gdbint_cleanall gdbint_info gdbint_makefiles gdbint
endif
ifdef TARGET_DIRS_LIBASYNC
libasync_all:
	$(MAKE) -C libasync all
libasync_debug:
	$(MAKE) -C libasync debug
libasync_smart:
	$(MAKE) -C libasync smart
libasync_release:
	$(MAKE) -C libasync release
libasync_units:
	$(MAKE) -C libasync units
libasync_examples:
	$(MAKE) -C libasync examples
libasync_shared:
	$(MAKE) -C libasync shared
libasync_install:
	$(MAKE) -C libasync install
libasync_sourceinstall:
	$(MAKE) -C libasync sourceinstall
libasync_exampleinstall:
	$(MAKE) -C libasync exampleinstall
libasync_distinstall:
	$(MAKE) -C libasync distinstall
libasync_zipinstall:
	$(MAKE) -C libasync zipinstall
libasync_zipsourceinstall:
	$(MAKE) -C libasync zipsourceinstall
libasync_zipexampleinstall:
	$(MAKE) -C libasync zipexampleinstall
libasync_zipdistinstall:
	$(MAKE) -C libasync zipdistinstall
libasync_clean:
	$(MAKE) -C libasync clean
libasync_distclean:
	$(MAKE) -C libasync distclean
libasync_cleanall:
	$(MAKE) -C libasync cleanall
libasync_info:
	$(MAKE) -C libasync info
libasync_makefiles:
	$(MAKE) -C libasync makefiles
libasync:
	$(MAKE) -C libasync all
.PHONY: libasync_all libasync_debug libasync_smart libasync_release libasync_units libasync_examples libasync_shared libasync_install libasync_sourceinstall libasync_exampleinstall libasync_distinstall libasync_zipinstall libasync_zipsourceinstall libasync_zipexampleinstall libasync_zipdistinstall libasync_clean libasync_distclean libasync_cleanall libasync_info libasync_makefiles libasync
endif
ifdef TARGET_DIRS_MYSQL
mysql_all:
	$(MAKE) -C mysql all
mysql_debug:
	$(MAKE) -C mysql debug
mysql_smart:
	$(MAKE) -C mysql smart
mysql_release:
	$(MAKE) -C mysql release
mysql_units:
	$(MAKE) -C mysql units
mysql_examples:
	$(MAKE) -C mysql examples
mysql_shared:
	$(MAKE) -C mysql shared
mysql_install:
	$(MAKE) -C mysql install
mysql_sourceinstall:
	$(MAKE) -C mysql sourceinstall
mysql_exampleinstall:
	$(MAKE) -C mysql exampleinstall
mysql_distinstall:
	$(MAKE) -C mysql distinstall
mysql_zipinstall:
	$(MAKE) -C mysql zipinstall
mysql_zipsourceinstall:
	$(MAKE) -C mysql zipsourceinstall
mysql_zipexampleinstall:
	$(MAKE) -C mysql zipexampleinstall
mysql_zipdistinstall:
	$(MAKE) -C mysql zipdistinstall
mysql_clean:
	$(MAKE) -C mysql clean
mysql_distclean:
	$(MAKE) -C mysql distclean
mysql_cleanall:
	$(MAKE) -C mysql cleanall
mysql_info:
	$(MAKE) -C mysql info
mysql_makefiles:
	$(MAKE) -C mysql makefiles
mysql:
	$(MAKE) -C mysql all
.PHONY: mysql_all mysql_debug mysql_smart mysql_release mysql_units mysql_examples mysql_shared mysql_install mysql_sourceinstall mysql_exampleinstall mysql_distinstall mysql_zipinstall mysql_zipsourceinstall mysql_zipexampleinstall mysql_zipdistinstall mysql_clean mysql_distclean mysql_cleanall mysql_info mysql_makefiles mysql
endif
ifdef TARGET_DIRS_IBASE
ibase_all:
	$(MAKE) -C ibase all
ibase_debug:
	$(MAKE) -C ibase debug
ibase_smart:
	$(MAKE) -C ibase smart
ibase_release:
	$(MAKE) -C ibase release
ibase_units:
	$(MAKE) -C ibase units
ibase_examples:
	$(MAKE) -C ibase examples
ibase_shared:
	$(MAKE) -C ibase shared
ibase_install:
	$(MAKE) -C ibase install
ibase_sourceinstall:
	$(MAKE) -C ibase sourceinstall
ibase_exampleinstall:
	$(MAKE) -C ibase exampleinstall
ibase_distinstall:
	$(MAKE) -C ibase distinstall
ibase_zipinstall:
	$(MAKE) -C ibase zipinstall
ibase_zipsourceinstall:
	$(MAKE) -C ibase zipsourceinstall
ibase_zipexampleinstall:
	$(MAKE) -C ibase zipexampleinstall
ibase_zipdistinstall:
	$(MAKE) -C ibase zipdistinstall
ibase_clean:
	$(MAKE) -C ibase clean
ibase_distclean:
	$(MAKE) -C ibase distclean
ibase_cleanall:
	$(MAKE) -C ibase cleanall
ibase_info:
	$(MAKE) -C ibase info
ibase_makefiles:
	$(MAKE) -C ibase makefiles
ibase:
	$(MAKE) -C ibase all
.PHONY: ibase_all ibase_debug ibase_smart ibase_release ibase_units ibase_examples ibase_shared ibase_install ibase_sourceinstall ibase_exampleinstall ibase_distinstall ibase_zipinstall ibase_zipsourceinstall ibase_zipexampleinstall ibase_zipdistinstall ibase_clean ibase_distclean ibase_cleanall ibase_info ibase_makefiles ibase
endif
ifdef TARGET_DIRS_POSTGRES
postgres_all:
	$(MAKE) -C postgres all
postgres_debug:
	$(MAKE) -C postgres debug
postgres_smart:
	$(MAKE) -C postgres smart
postgres_release:
	$(MAKE) -C postgres release
postgres_units:
	$(MAKE) -C postgres units
postgres_examples:
	$(MAKE) -C postgres examples
postgres_shared:
	$(MAKE) -C postgres shared
postgres_install:
	$(MAKE) -C postgres install
postgres_sourceinstall:
	$(MAKE) -C postgres sourceinstall
postgres_exampleinstall:
	$(MAKE) -C postgres exampleinstall
postgres_distinstall:
	$(MAKE) -C postgres distinstall
postgres_zipinstall:
	$(MAKE) -C postgres zipinstall
postgres_zipsourceinstall:
	$(MAKE) -C postgres zipsourceinstall
postgres_zipexampleinstall:
	$(MAKE) -C postgres zipexampleinstall
postgres_zipdistinstall:
	$(MAKE) -C postgres zipdistinstall
postgres_clean:
	$(MAKE) -C postgres clean
postgres_distclean:
	$(MAKE) -C postgres distclean
postgres_cleanall:
	$(MAKE) -C postgres cleanall
postgres_info:
	$(MAKE) -C postgres info
postgres_makefiles:
	$(MAKE) -C postgres makefiles
postgres:
	$(MAKE) -C postgres all
.PHONY: postgres_all postgres_debug postgres_smart postgres_release postgres_units postgres_examples postgres_shared postgres_install postgres_sourceinstall postgres_exampleinstall postgres_distinstall postgres_zipinstall postgres_zipsourceinstall postgres_zipexampleinstall postgres_zipdistinstall postgres_clean postgres_distclean postgres_cleanall postgres_info postgres_makefiles postgres
endif
ifdef TARGET_DIRS_ORACLE
oracle_all:
	$(MAKE) -C oracle all
oracle_debug:
	$(MAKE) -C oracle debug
oracle_smart:
	$(MAKE) -C oracle smart
oracle_release:
	$(MAKE) -C oracle release
oracle_units:
	$(MAKE) -C oracle units
oracle_examples:
	$(MAKE) -C oracle examples
oracle_shared:
	$(MAKE) -C oracle shared
oracle_install:
	$(MAKE) -C oracle install
oracle_sourceinstall:
	$(MAKE) -C oracle sourceinstall
oracle_exampleinstall:
	$(MAKE) -C oracle exampleinstall
oracle_distinstall:
	$(MAKE) -C oracle distinstall
oracle_zipinstall:
	$(MAKE) -C oracle zipinstall
oracle_zipsourceinstall:
	$(MAKE) -C oracle zipsourceinstall
oracle_zipexampleinstall:
	$(MAKE) -C oracle zipexampleinstall
oracle_zipdistinstall:
	$(MAKE) -C oracle zipdistinstall
oracle_clean:
	$(MAKE) -C oracle clean
oracle_distclean:
	$(MAKE) -C oracle distclean
oracle_cleanall:
	$(MAKE) -C oracle cleanall
oracle_info:
	$(MAKE) -C oracle info
oracle_makefiles:
	$(MAKE) -C oracle makefiles
oracle:
	$(MAKE) -C oracle all
.PHONY: oracle_all oracle_debug oracle_smart oracle_release oracle_units oracle_examples oracle_shared oracle_install oracle_sourceinstall oracle_exampleinstall oracle_distinstall oracle_zipinstall oracle_zipsourceinstall oracle_zipexampleinstall oracle_zipdistinstall oracle_clean oracle_distclean oracle_cleanall oracle_info oracle_makefiles oracle
endif
ifdef TARGET_DIRS_ODBC
odbc_all:
	$(MAKE) -C odbc all
odbc_debug:
	$(MAKE) -C odbc debug
odbc_smart:
	$(MAKE) -C odbc smart
odbc_release:
	$(MAKE) -C odbc release
odbc_units:
	$(MAKE) -C odbc units
odbc_examples:
	$(MAKE) -C odbc examples
odbc_shared:
	$(MAKE) -C odbc shared
odbc_install:
	$(MAKE) -C odbc install
odbc_sourceinstall:
	$(MAKE) -C odbc sourceinstall
odbc_exampleinstall:
	$(MAKE) -C odbc exampleinstall
odbc_distinstall:
	$(MAKE) -C odbc distinstall
odbc_zipinstall:
	$(MAKE) -C odbc zipinstall
odbc_zipsourceinstall:
	$(MAKE) -C odbc zipsourceinstall
odbc_zipexampleinstall:
	$(MAKE) -C odbc zipexampleinstall
odbc_zipdistinstall:
	$(MAKE) -C odbc zipdistinstall
odbc_clean:
	$(MAKE) -C odbc clean
odbc_distclean:
	$(MAKE) -C odbc distclean
odbc_cleanall:
	$(MAKE) -C odbc cleanall
odbc_info:
	$(MAKE) -C odbc info
odbc_makefiles:
	$(MAKE) -C odbc makefiles
odbc:
	$(MAKE) -C odbc all
.PHONY: odbc_all odbc_debug odbc_smart odbc_release odbc_units odbc_examples odbc_shared odbc_install odbc_sourceinstall odbc_exampleinstall odbc_distinstall odbc_zipinstall odbc_zipsourceinstall odbc_zipexampleinstall odbc_zipdistinstall odbc_clean odbc_distclean odbc_cleanall odbc_info odbc_makefiles odbc
endif
ifdef TARGET_DIRS_PTHREADS
pthreads_all:
	$(MAKE) -C pthreads all
pthreads_debug:
	$(MAKE) -C pthreads debug
pthreads_smart:
	$(MAKE) -C pthreads smart
pthreads_release:
	$(MAKE) -C pthreads release
pthreads_units:
	$(MAKE) -C pthreads units
pthreads_examples:
	$(MAKE) -C pthreads examples
pthreads_shared:
	$(MAKE) -C pthreads shared
pthreads_install:
	$(MAKE) -C pthreads install
pthreads_sourceinstall:
	$(MAKE) -C pthreads sourceinstall
pthreads_exampleinstall:
	$(MAKE) -C pthreads exampleinstall
pthreads_distinstall:
	$(MAKE) -C pthreads distinstall
pthreads_zipinstall:
	$(MAKE) -C pthreads zipinstall
pthreads_zipsourceinstall:
	$(MAKE) -C pthreads zipsourceinstall
pthreads_zipexampleinstall:
	$(MAKE) -C pthreads zipexampleinstall
pthreads_zipdistinstall:
	$(MAKE) -C pthreads zipdistinstall
pthreads_clean:
	$(MAKE) -C pthreads clean
pthreads_distclean:
	$(MAKE) -C pthreads distclean
pthreads_cleanall:
	$(MAKE) -C pthreads cleanall
pthreads_info:
	$(MAKE) -C pthreads info
pthreads_makefiles:
	$(MAKE) -C pthreads makefiles
pthreads:
	$(MAKE) -C pthreads all
.PHONY: pthreads_all pthreads_debug pthreads_smart pthreads_release pthreads_units pthreads_examples pthreads_shared pthreads_install pthreads_sourceinstall pthreads_exampleinstall pthreads_distinstall pthreads_zipinstall pthreads_zipsourceinstall pthreads_zipexampleinstall pthreads_zipdistinstall pthreads_clean pthreads_distclean pthreads_cleanall pthreads_info pthreads_makefiles pthreads
endif
ifdef TARGET_DIRS_SQLITE
sqlite_all:
	$(MAKE) -C sqlite all
sqlite_debug:
	$(MAKE) -C sqlite debug
sqlite_smart:
	$(MAKE) -C sqlite smart
sqlite_release:
	$(MAKE) -C sqlite release
sqlite_units:
	$(MAKE) -C sqlite units
sqlite_examples:
	$(MAKE) -C sqlite examples
sqlite_shared:
	$(MAKE) -C sqlite shared
sqlite_install:
	$(MAKE) -C sqlite install
sqlite_sourceinstall:
	$(MAKE) -C sqlite sourceinstall
sqlite_exampleinstall:
	$(MAKE) -C sqlite exampleinstall
sqlite_distinstall:
	$(MAKE) -C sqlite distinstall
sqlite_zipinstall:
	$(MAKE) -C sqlite zipinstall
sqlite_zipsourceinstall:
	$(MAKE) -C sqlite zipsourceinstall
sqlite_zipexampleinstall:
	$(MAKE) -C sqlite zipexampleinstall
sqlite_zipdistinstall:
	$(MAKE) -C sqlite zipdistinstall
sqlite_clean:
	$(MAKE) -C sqlite clean
sqlite_distclean:
	$(MAKE) -C sqlite distclean
sqlite_cleanall:
	$(MAKE) -C sqlite cleanall
sqlite_info:
	$(MAKE) -C sqlite info
sqlite_makefiles:
	$(MAKE) -C sqlite makefiles
sqlite:
	$(MAKE) -C sqlite all
.PHONY: sqlite_all sqlite_debug sqlite_smart sqlite_release sqlite_units sqlite_examples sqlite_shared sqlite_install sqlite_sourceinstall sqlite_exampleinstall sqlite_distinstall sqlite_zipinstall sqlite_zipsourceinstall sqlite_zipexampleinstall sqlite_zipdistinstall sqlite_clean sqlite_distclean sqlite_cleanall sqlite_info sqlite_makefiles sqlite
endif
ifdef TARGET_DIRS_LIBC
libc_all:
	$(MAKE) -C libc all
libc_debug:
	$(MAKE) -C libc debug
libc_smart:
	$(MAKE) -C libc smart
libc_release:
	$(MAKE) -C libc release
libc_units:
	$(MAKE) -C libc units
libc_examples:
	$(MAKE) -C libc examples
libc_shared:
	$(MAKE) -C libc shared
libc_install:
	$(MAKE) -C libc install
libc_sourceinstall:
	$(MAKE) -C libc sourceinstall
libc_exampleinstall:
	$(MAKE) -C libc exampleinstall
libc_distinstall:
	$(MAKE) -C libc distinstall
libc_zipinstall:
	$(MAKE) -C libc zipinstall
libc_zipsourceinstall:
	$(MAKE) -C libc zipsourceinstall
libc_zipexampleinstall:
	$(MAKE) -C libc zipexampleinstall
libc_zipdistinstall:
	$(MAKE) -C libc zipdistinstall
libc_clean:
	$(MAKE) -C libc clean
libc_distclean:
	$(MAKE) -C libc distclean
libc_cleanall:
	$(MAKE) -C libc cleanall
libc_info:
	$(MAKE) -C libc info
libc_makefiles:
	$(MAKE) -C libc makefiles
libc:
	$(MAKE) -C libc all
.PHONY: libc_all libc_debug libc_smart libc_release libc_units libc_examples libc_shared libc_install libc_sourceinstall libc_exampleinstall libc_distinstall libc_zipinstall libc_zipsourceinstall libc_zipexampleinstall libc_zipdistinstall libc_clean libc_distclean libc_cleanall libc_info libc_makefiles libc
endif
all: $(addsuffix _all,$(TARGET_DIRS))
debug: $(addsuffix _debug,$(TARGET_DIRS))
smart: $(addsuffix _smart,$(TARGET_DIRS))
release: $(addsuffix _release,$(TARGET_DIRS))
units: $(addsuffix _units,$(TARGET_DIRS))
examples: $(addsuffix _examples,$(TARGET_DIRS))
shared: $(addsuffix _shared,$(TARGET_DIRS))
install: $(addsuffix _install,$(TARGET_DIRS))
sourceinstall: $(addsuffix _sourceinstall,$(TARGET_DIRS))
exampleinstall: $(addsuffix _exampleinstall,$(TARGET_DIRS))
distinstall: $(addsuffix _distinstall,$(TARGET_DIRS))
zipinstall: $(addsuffix _zipinstall,$(TARGET_DIRS))
zipsourceinstall: $(addsuffix _zipsourceinstall,$(TARGET_DIRS))
zipexampleinstall: $(addsuffix _zipexampleinstall,$(TARGET_DIRS))
zipdistinstall: $(addsuffix _zipdistinstall,$(TARGET_DIRS))
clean: $(addsuffix _clean,$(TARGET_DIRS))
distclean: $(addsuffix _distclean,$(TARGET_DIRS))
cleanall: $(addsuffix _cleanall,$(TARGET_DIRS))
info: fpc_info
makefiles: fpc_makefiles $(addsuffix _makefiles,$(TARGET_DIRS))
.PHONY: all debug smart release units examples shared install sourceinstall exampleinstall distinstall zipinstall zipsourceinstall zipexampleinstall zipdistinstall clean distclean cleanall info makefiles
ifneq ($(wildcard fpcmake.loc),)
include fpcmake.loc
endif
