unit pic32mx575f512l;
interface
{$goto on}
{$modeswitch advancedrecords}
{$L startup.o}
{$PACKRECORDS 2}
type
  TBits_1 = 0..1;
  TBits_2 = 0..3;
  TBits_3 = 0..7;
  TBits_4 = 0..15;
  TBits_5 = 0..31;
  TBits_6 = 0..63;
  TBits_7 = 0..127;
  TBits_8 = 0..255;
  TBits_9 = 0..511;
  TBits_10 = 0..1023;
  TBits_11 = 0..2047;
  TBits_12 = 0..4095;
  TBits_13 = 0..8191;
  TBits_14 = 0..16383;
  TBits_15 = 0..32767;
  TBits_16 = 0..65535;
  TBits_17 = 0..131071;
  TBits_18 = 0..262143;
  TBits_19 = 0..524287;
  TBits_20 = 0..1048575;
  TBits_21 = 0..2097151;
  TBits_22 = 0..4194303;
  TBits_23 = 0..8388607;
  TBits_24 = 0..16777215;
  TBits_25 = 0..33554431;
  TBits_26 = 0..67108863;
  TBits_27 = 0..134217727;
  TBits_28 = 0..268435455;
  TBits_29 = 0..536870911;
  TBits_30 = 0..1073741823;
  TBits_31 = 0..2147483647;
  TBits_32 = 0..4294967295;
  TWDT_WDTCON = record
  private
    function  getON : TBits_1; assembler; nostackframe; inline;
    function  getSWDTPS : TBits_5; assembler; nostackframe; inline;
    function  getSWDTPS0 : TBits_1; assembler; nostackframe; inline;
    function  getSWDTPS1 : TBits_1; assembler; nostackframe; inline;
    function  getSWDTPS2 : TBits_1; assembler; nostackframe; inline;
    function  getSWDTPS3 : TBits_1; assembler; nostackframe; inline;
    function  getSWDTPS4 : TBits_1; assembler; nostackframe; inline;
    function  getWDTCLR : TBits_1; assembler; nostackframe; inline;
    function  getWDTPS : TBits_5; assembler; nostackframe; inline;
    function  getWDTPSTA : TBits_5; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setON(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSWDTPS(thebits : TBits_5); assembler; nostackframe; inline;
    procedure setSWDTPS0(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSWDTPS1(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSWDTPS2(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSWDTPS3(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSWDTPS4(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setWDTCLR(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setWDTPS(thebits : TBits_5); assembler; nostackframe; inline;
    procedure setWDTPSTA(thebits : TBits_5); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearON;
    procedure clearSWDTPS0;
    procedure clearSWDTPS1;
    procedure clearSWDTPS2;
    procedure clearSWDTPS3;
    procedure clearSWDTPS4;
    procedure clearWDTCLR;
    procedure setON;
    procedure setSWDTPS0;
    procedure setSWDTPS1;
    procedure setSWDTPS2;
    procedure setSWDTPS3;
    procedure setSWDTPS4;
    procedure setWDTCLR;
    property ON : TBits_1 read getON write setON;
    property SWDTPS : TBits_5 read getSWDTPS write setSWDTPS;
    property SWDTPS0 : TBits_1 read getSWDTPS0 write setSWDTPS0;
    property SWDTPS1 : TBits_1 read getSWDTPS1 write setSWDTPS1;
    property SWDTPS2 : TBits_1 read getSWDTPS2 write setSWDTPS2;
    property SWDTPS3 : TBits_1 read getSWDTPS3 write setSWDTPS3;
    property SWDTPS4 : TBits_1 read getSWDTPS4 write setSWDTPS4;
    property WDTCLR : TBits_1 read getWDTCLR write setWDTCLR;
    property WDTPS : TBits_5 read getWDTPS write setWDTPS;
    property WDTPSTA : TBits_5 read getWDTPSTA write setWDTPSTA;
    property w : TBits_32 read getw write setw;
  end;
type
  TWDTRegisters = record
    WDTCONbits : TWDT_WDTCON;
    WDTCON : longWord;
    WDTCONCLR : longWord;
    WDTCONSET : longWord;
    WDTCONINV : longWord;
  end;
  TRTCC_RTCCON = record
  private
    function  getCAL : TBits_10; assembler; nostackframe; inline;
    function  getHALFSEC : TBits_1; assembler; nostackframe; inline;
    function  getON : TBits_1; assembler; nostackframe; inline;
    function  getRTCCLKON : TBits_1; assembler; nostackframe; inline;
    function  getRTCOE : TBits_1; assembler; nostackframe; inline;
    function  getRTCSYNC : TBits_1; assembler; nostackframe; inline;
    function  getRTCWREN : TBits_1; assembler; nostackframe; inline;
    function  getRTSECSEL : TBits_1; assembler; nostackframe; inline;
    function  getSIDL : TBits_1; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setCAL(thebits : TBits_10); assembler; nostackframe; inline;
    procedure setHALFSEC(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setON(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRTCCLKON(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRTCOE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRTCSYNC(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRTCWREN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRTSECSEL(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSIDL(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearHALFSEC;
    procedure clearON;
    procedure clearRTCCLKON;
    procedure clearRTCOE;
    procedure clearRTCSYNC;
    procedure clearRTCWREN;
    procedure clearRTSECSEL;
    procedure clearSIDL;
    procedure setHALFSEC;
    procedure setON;
    procedure setRTCCLKON;
    procedure setRTCOE;
    procedure setRTCSYNC;
    procedure setRTCWREN;
    procedure setRTSECSEL;
    procedure setSIDL;
    property CAL : TBits_10 read getCAL write setCAL;
    property HALFSEC : TBits_1 read getHALFSEC write setHALFSEC;
    property ON : TBits_1 read getON write setON;
    property RTCCLKON : TBits_1 read getRTCCLKON write setRTCCLKON;
    property RTCOE : TBits_1 read getRTCOE write setRTCOE;
    property RTCSYNC : TBits_1 read getRTCSYNC write setRTCSYNC;
    property RTCWREN : TBits_1 read getRTCWREN write setRTCWREN;
    property RTSECSEL : TBits_1 read getRTSECSEL write setRTSECSEL;
    property SIDL : TBits_1 read getSIDL write setSIDL;
    property w : TBits_32 read getw write setw;
  end;
  TRTCC_RTCALRM = record
  private
    function  getALRMEN : TBits_1; assembler; nostackframe; inline;
    function  getALRMSYNC : TBits_1; assembler; nostackframe; inline;
    function  getAMASK : TBits_4; assembler; nostackframe; inline;
    function  getARPT : TBits_8; assembler; nostackframe; inline;
    function  getCHIME : TBits_1; assembler; nostackframe; inline;
    function  getPIV : TBits_1; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setALRMEN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setALRMSYNC(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setAMASK(thebits : TBits_4); assembler; nostackframe; inline;
    procedure setARPT(thebits : TBits_8); assembler; nostackframe; inline;
    procedure setCHIME(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setPIV(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearALRMEN;
    procedure clearALRMSYNC;
    procedure clearCHIME;
    procedure clearPIV;
    procedure setALRMEN;
    procedure setALRMSYNC;
    procedure setCHIME;
    procedure setPIV;
    property ALRMEN : TBits_1 read getALRMEN write setALRMEN;
    property ALRMSYNC : TBits_1 read getALRMSYNC write setALRMSYNC;
    property AMASK : TBits_4 read getAMASK write setAMASK;
    property ARPT : TBits_8 read getARPT write setARPT;
    property CHIME : TBits_1 read getCHIME write setCHIME;
    property PIV : TBits_1 read getPIV write setPIV;
    property w : TBits_32 read getw write setw;
  end;
  TRTCC_RTCTIME = record
  private
    function  getHR01 : TBits_4; assembler; nostackframe; inline;
    function  getHR10 : TBits_4; assembler; nostackframe; inline;
    function  getMIN01 : TBits_4; assembler; nostackframe; inline;
    function  getMIN10 : TBits_4; assembler; nostackframe; inline;
    function  getSEC01 : TBits_4; assembler; nostackframe; inline;
    function  getSEC10 : TBits_4; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setHR01(thebits : TBits_4); assembler; nostackframe; inline;
    procedure setHR10(thebits : TBits_4); assembler; nostackframe; inline;
    procedure setMIN01(thebits : TBits_4); assembler; nostackframe; inline;
    procedure setMIN10(thebits : TBits_4); assembler; nostackframe; inline;
    procedure setSEC01(thebits : TBits_4); assembler; nostackframe; inline;
    procedure setSEC10(thebits : TBits_4); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    property HR01 : TBits_4 read getHR01 write setHR01;
    property HR10 : TBits_4 read getHR10 write setHR10;
    property MIN01 : TBits_4 read getMIN01 write setMIN01;
    property MIN10 : TBits_4 read getMIN10 write setMIN10;
    property SEC01 : TBits_4 read getSEC01 write setSEC01;
    property SEC10 : TBits_4 read getSEC10 write setSEC10;
    property w : TBits_32 read getw write setw;
  end;
  TRTCC_RTCDATE = record
  private
    function  getDAY01 : TBits_4; assembler; nostackframe; inline;
    function  getDAY10 : TBits_4; assembler; nostackframe; inline;
    function  getMONTH01 : TBits_4; assembler; nostackframe; inline;
    function  getMONTH10 : TBits_4; assembler; nostackframe; inline;
    function  getWDAY01 : TBits_4; assembler; nostackframe; inline;
    function  getYEAR01 : TBits_4; assembler; nostackframe; inline;
    function  getYEAR10 : TBits_4; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setDAY01(thebits : TBits_4); assembler; nostackframe; inline;
    procedure setDAY10(thebits : TBits_4); assembler; nostackframe; inline;
    procedure setMONTH01(thebits : TBits_4); assembler; nostackframe; inline;
    procedure setMONTH10(thebits : TBits_4); assembler; nostackframe; inline;
    procedure setWDAY01(thebits : TBits_4); assembler; nostackframe; inline;
    procedure setYEAR01(thebits : TBits_4); assembler; nostackframe; inline;
    procedure setYEAR10(thebits : TBits_4); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    property DAY01 : TBits_4 read getDAY01 write setDAY01;
    property DAY10 : TBits_4 read getDAY10 write setDAY10;
    property MONTH01 : TBits_4 read getMONTH01 write setMONTH01;
    property MONTH10 : TBits_4 read getMONTH10 write setMONTH10;
    property WDAY01 : TBits_4 read getWDAY01 write setWDAY01;
    property YEAR01 : TBits_4 read getYEAR01 write setYEAR01;
    property YEAR10 : TBits_4 read getYEAR10 write setYEAR10;
    property w : TBits_32 read getw write setw;
  end;
  TRTCC_ALRMTIME = record
  private
    function  getHR01 : TBits_4; assembler; nostackframe; inline;
    function  getHR10 : TBits_4; assembler; nostackframe; inline;
    function  getMIN01 : TBits_4; assembler; nostackframe; inline;
    function  getMIN10 : TBits_4; assembler; nostackframe; inline;
    function  getSEC01 : TBits_4; assembler; nostackframe; inline;
    function  getSEC10 : TBits_4; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setHR01(thebits : TBits_4); assembler; nostackframe; inline;
    procedure setHR10(thebits : TBits_4); assembler; nostackframe; inline;
    procedure setMIN01(thebits : TBits_4); assembler; nostackframe; inline;
    procedure setMIN10(thebits : TBits_4); assembler; nostackframe; inline;
    procedure setSEC01(thebits : TBits_4); assembler; nostackframe; inline;
    procedure setSEC10(thebits : TBits_4); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    property HR01 : TBits_4 read getHR01 write setHR01;
    property HR10 : TBits_4 read getHR10 write setHR10;
    property MIN01 : TBits_4 read getMIN01 write setMIN01;
    property MIN10 : TBits_4 read getMIN10 write setMIN10;
    property SEC01 : TBits_4 read getSEC01 write setSEC01;
    property SEC10 : TBits_4 read getSEC10 write setSEC10;
    property w : TBits_32 read getw write setw;
  end;
  TRTCC_ALRMDATE = record
  private
    function  getDAY01 : TBits_4; assembler; nostackframe; inline;
    function  getDAY10 : TBits_4; assembler; nostackframe; inline;
    function  getMONTH01 : TBits_4; assembler; nostackframe; inline;
    function  getMONTH10 : TBits_4; assembler; nostackframe; inline;
    function  getWDAY01 : TBits_4; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setDAY01(thebits : TBits_4); assembler; nostackframe; inline;
    procedure setDAY10(thebits : TBits_4); assembler; nostackframe; inline;
    procedure setMONTH01(thebits : TBits_4); assembler; nostackframe; inline;
    procedure setMONTH10(thebits : TBits_4); assembler; nostackframe; inline;
    procedure setWDAY01(thebits : TBits_4); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    property DAY01 : TBits_4 read getDAY01 write setDAY01;
    property DAY10 : TBits_4 read getDAY10 write setDAY10;
    property MONTH01 : TBits_4 read getMONTH01 write setMONTH01;
    property MONTH10 : TBits_4 read getMONTH10 write setMONTH10;
    property WDAY01 : TBits_4 read getWDAY01 write setWDAY01;
    property w : TBits_32 read getw write setw;
  end;
type
  TRTCCRegisters = record
    RTCCONbits : TRTCC_RTCCON;
    RTCCON : longWord;
    RTCCONCLR : longWord;
    RTCCONSET : longWord;
    RTCCONINV : longWord;
    RTCALRMbits : TRTCC_RTCALRM;
    RTCALRM : longWord;
    RTCALRMCLR : longWord;
    RTCALRMSET : longWord;
    RTCALRMINV : longWord;
    RTCTIMEbits : TRTCC_RTCTIME;
    RTCTIME : longWord;
    RTCTIMECLR : longWord;
    RTCTIMESET : longWord;
    RTCTIMEINV : longWord;
    RTCDATEbits : TRTCC_RTCDATE;
    RTCDATE : longWord;
    RTCDATECLR : longWord;
    RTCDATESET : longWord;
    RTCDATEINV : longWord;
    ALRMTIMEbits : TRTCC_ALRMTIME;
    ALRMTIME : longWord;
    ALRMTIMECLR : longWord;
    ALRMTIMESET : longWord;
    ALRMTIMEINV : longWord;
    ALRMDATEbits : TRTCC_ALRMDATE;
    ALRMDATE : longWord;
    ALRMDATECLR : longWord;
    ALRMDATESET : longWord;
    ALRMDATEINV : longWord;
  end;
  TTMR1_T1CON = record
  private
    function  getON : TBits_1; assembler; nostackframe; inline;
    function  getSIDL : TBits_1; assembler; nostackframe; inline;
    function  getTCKPS : TBits_2; assembler; nostackframe; inline;
    function  getTCKPS0 : TBits_1; assembler; nostackframe; inline;
    function  getTCKPS1 : TBits_1; assembler; nostackframe; inline;
    function  getTCS : TBits_1; assembler; nostackframe; inline;
    function  getTGATE : TBits_1; assembler; nostackframe; inline;
    function  getTON : TBits_1; assembler; nostackframe; inline;
    function  getTSIDL : TBits_1; assembler; nostackframe; inline;
    function  getTSYNC : TBits_1; assembler; nostackframe; inline;
    function  getTWDIS : TBits_1; assembler; nostackframe; inline;
    function  getTWIP : TBits_1; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setON(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSIDL(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTCKPS(thebits : TBits_2); assembler; nostackframe; inline;
    procedure setTCKPS0(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTCKPS1(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTCS(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTGATE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTON(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTSIDL(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTSYNC(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTWDIS(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTWIP(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearON;
    procedure clearSIDL;
    procedure clearTCKPS0;
    procedure clearTCKPS1;
    procedure clearTCS;
    procedure clearTGATE;
    procedure clearTON;
    procedure clearTSIDL;
    procedure clearTSYNC;
    procedure clearTWDIS;
    procedure clearTWIP;
    procedure setON;
    procedure setSIDL;
    procedure setTCKPS0;
    procedure setTCKPS1;
    procedure setTCS;
    procedure setTGATE;
    procedure setTON;
    procedure setTSIDL;
    procedure setTSYNC;
    procedure setTWDIS;
    procedure setTWIP;
    property ON : TBits_1 read getON write setON;
    property SIDL : TBits_1 read getSIDL write setSIDL;
    property TCKPS : TBits_2 read getTCKPS write setTCKPS;
    property TCKPS0 : TBits_1 read getTCKPS0 write setTCKPS0;
    property TCKPS1 : TBits_1 read getTCKPS1 write setTCKPS1;
    property TCS : TBits_1 read getTCS write setTCS;
    property TGATE : TBits_1 read getTGATE write setTGATE;
    property TON : TBits_1 read getTON write setTON;
    property TSIDL : TBits_1 read getTSIDL write setTSIDL;
    property TSYNC : TBits_1 read getTSYNC write setTSYNC;
    property TWDIS : TBits_1 read getTWDIS write setTWDIS;
    property TWIP : TBits_1 read getTWIP write setTWIP;
    property w : TBits_32 read getw write setw;
  end;
type
  TTMR1Registers = record
    T1CONbits : TTMR1_T1CON;
    T1CON : longWord;
    T1CONCLR : longWord;
    T1CONSET : longWord;
    T1CONINV : longWord;
    TMR1 : longWord;
    TMR1CLR : longWord;
    TMR1SET : longWord;
    TMR1INV : longWord;
    PR1 : longWord;
    PR1CLR : longWord;
    PR1SET : longWord;
    PR1INV : longWord;
  end;
  TTMR2_T2CON = record
  private
    function  getON : TBits_1; assembler; nostackframe; inline;
    function  getSIDL : TBits_1; assembler; nostackframe; inline;
    function  getT32 : TBits_1; assembler; nostackframe; inline;
    function  getTCKPS : TBits_3; assembler; nostackframe; inline;
    function  getTCKPS0 : TBits_1; assembler; nostackframe; inline;
    function  getTCKPS1 : TBits_1; assembler; nostackframe; inline;
    function  getTCKPS2 : TBits_1; assembler; nostackframe; inline;
    function  getTCS : TBits_1; assembler; nostackframe; inline;
    function  getTGATE : TBits_1; assembler; nostackframe; inline;
    function  getTON : TBits_1; assembler; nostackframe; inline;
    function  getTSIDL : TBits_1; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setON(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSIDL(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setT32(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTCKPS(thebits : TBits_3); assembler; nostackframe; inline;
    procedure setTCKPS0(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTCKPS1(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTCKPS2(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTCS(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTGATE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTON(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTSIDL(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearON;
    procedure clearSIDL;
    procedure clearT32;
    procedure clearTCKPS0;
    procedure clearTCKPS1;
    procedure clearTCKPS2;
    procedure clearTCS;
    procedure clearTGATE;
    procedure clearTON;
    procedure clearTSIDL;
    procedure setON;
    procedure setSIDL;
    procedure setT32;
    procedure setTCKPS0;
    procedure setTCKPS1;
    procedure setTCKPS2;
    procedure setTCS;
    procedure setTGATE;
    procedure setTON;
    procedure setTSIDL;
    property ON : TBits_1 read getON write setON;
    property SIDL : TBits_1 read getSIDL write setSIDL;
    property T32 : TBits_1 read getT32 write setT32;
    property TCKPS : TBits_3 read getTCKPS write setTCKPS;
    property TCKPS0 : TBits_1 read getTCKPS0 write setTCKPS0;
    property TCKPS1 : TBits_1 read getTCKPS1 write setTCKPS1;
    property TCKPS2 : TBits_1 read getTCKPS2 write setTCKPS2;
    property TCS : TBits_1 read getTCS write setTCS;
    property TGATE : TBits_1 read getTGATE write setTGATE;
    property TON : TBits_1 read getTON write setTON;
    property TSIDL : TBits_1 read getTSIDL write setTSIDL;
    property w : TBits_32 read getw write setw;
  end;
type
  TTMR2Registers = record
    T2CONbits : TTMR2_T2CON;
    T2CON : longWord;
    T2CONCLR : longWord;
    T2CONSET : longWord;
    T2CONINV : longWord;
    TMR2 : longWord;
    TMR2CLR : longWord;
    TMR2SET : longWord;
    TMR2INV : longWord;
    PR2 : longWord;
    PR2CLR : longWord;
    PR2SET : longWord;
    PR2INV : longWord;
  end;
  TTMR3_T3CON = record
  private
    function  getON : TBits_1; assembler; nostackframe; inline;
    function  getSIDL : TBits_1; assembler; nostackframe; inline;
    function  getTCKPS : TBits_3; assembler; nostackframe; inline;
    function  getTCKPS0 : TBits_1; assembler; nostackframe; inline;
    function  getTCKPS1 : TBits_1; assembler; nostackframe; inline;
    function  getTCKPS2 : TBits_1; assembler; nostackframe; inline;
    function  getTCS : TBits_1; assembler; nostackframe; inline;
    function  getTGATE : TBits_1; assembler; nostackframe; inline;
    function  getTON : TBits_1; assembler; nostackframe; inline;
    function  getTSIDL : TBits_1; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setON(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSIDL(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTCKPS(thebits : TBits_3); assembler; nostackframe; inline;
    procedure setTCKPS0(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTCKPS1(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTCKPS2(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTCS(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTGATE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTON(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTSIDL(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearON;
    procedure clearSIDL;
    procedure clearTCKPS0;
    procedure clearTCKPS1;
    procedure clearTCKPS2;
    procedure clearTCS;
    procedure clearTGATE;
    procedure clearTON;
    procedure clearTSIDL;
    procedure setON;
    procedure setSIDL;
    procedure setTCKPS0;
    procedure setTCKPS1;
    procedure setTCKPS2;
    procedure setTCS;
    procedure setTGATE;
    procedure setTON;
    procedure setTSIDL;
    property ON : TBits_1 read getON write setON;
    property SIDL : TBits_1 read getSIDL write setSIDL;
    property TCKPS : TBits_3 read getTCKPS write setTCKPS;
    property TCKPS0 : TBits_1 read getTCKPS0 write setTCKPS0;
    property TCKPS1 : TBits_1 read getTCKPS1 write setTCKPS1;
    property TCKPS2 : TBits_1 read getTCKPS2 write setTCKPS2;
    property TCS : TBits_1 read getTCS write setTCS;
    property TGATE : TBits_1 read getTGATE write setTGATE;
    property TON : TBits_1 read getTON write setTON;
    property TSIDL : TBits_1 read getTSIDL write setTSIDL;
    property w : TBits_32 read getw write setw;
  end;
type
  TTMR3Registers = record
    T3CONbits : TTMR3_T3CON;
    T3CON : longWord;
    T3CONCLR : longWord;
    T3CONSET : longWord;
    T3CONINV : longWord;
    TMR3 : longWord;
    TMR3CLR : longWord;
    TMR3SET : longWord;
    TMR3INV : longWord;
    PR3 : longWord;
    PR3CLR : longWord;
    PR3SET : longWord;
    PR3INV : longWord;
  end;
  TTMR4_T4CON = record
  private
    function  getON : TBits_1; assembler; nostackframe; inline;
    function  getSIDL : TBits_1; assembler; nostackframe; inline;
    function  getT32 : TBits_1; assembler; nostackframe; inline;
    function  getTCKPS : TBits_3; assembler; nostackframe; inline;
    function  getTCKPS0 : TBits_1; assembler; nostackframe; inline;
    function  getTCKPS1 : TBits_1; assembler; nostackframe; inline;
    function  getTCKPS2 : TBits_1; assembler; nostackframe; inline;
    function  getTCS : TBits_1; assembler; nostackframe; inline;
    function  getTGATE : TBits_1; assembler; nostackframe; inline;
    function  getTON : TBits_1; assembler; nostackframe; inline;
    function  getTSIDL : TBits_1; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setON(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSIDL(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setT32(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTCKPS(thebits : TBits_3); assembler; nostackframe; inline;
    procedure setTCKPS0(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTCKPS1(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTCKPS2(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTCS(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTGATE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTON(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTSIDL(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearON;
    procedure clearSIDL;
    procedure clearT32;
    procedure clearTCKPS0;
    procedure clearTCKPS1;
    procedure clearTCKPS2;
    procedure clearTCS;
    procedure clearTGATE;
    procedure clearTON;
    procedure clearTSIDL;
    procedure setON;
    procedure setSIDL;
    procedure setT32;
    procedure setTCKPS0;
    procedure setTCKPS1;
    procedure setTCKPS2;
    procedure setTCS;
    procedure setTGATE;
    procedure setTON;
    procedure setTSIDL;
    property ON : TBits_1 read getON write setON;
    property SIDL : TBits_1 read getSIDL write setSIDL;
    property T32 : TBits_1 read getT32 write setT32;
    property TCKPS : TBits_3 read getTCKPS write setTCKPS;
    property TCKPS0 : TBits_1 read getTCKPS0 write setTCKPS0;
    property TCKPS1 : TBits_1 read getTCKPS1 write setTCKPS1;
    property TCKPS2 : TBits_1 read getTCKPS2 write setTCKPS2;
    property TCS : TBits_1 read getTCS write setTCS;
    property TGATE : TBits_1 read getTGATE write setTGATE;
    property TON : TBits_1 read getTON write setTON;
    property TSIDL : TBits_1 read getTSIDL write setTSIDL;
    property w : TBits_32 read getw write setw;
  end;
type
  TTMR4Registers = record
    T4CONbits : TTMR4_T4CON;
    T4CON : longWord;
    T4CONCLR : longWord;
    T4CONSET : longWord;
    T4CONINV : longWord;
    TMR4 : longWord;
    TMR4CLR : longWord;
    TMR4SET : longWord;
    TMR4INV : longWord;
    PR4 : longWord;
    PR4CLR : longWord;
    PR4SET : longWord;
    PR4INV : longWord;
  end;
  TTMR5_T5CON = record
  private
    function  getON : TBits_1; assembler; nostackframe; inline;
    function  getSIDL : TBits_1; assembler; nostackframe; inline;
    function  getTCKPS : TBits_3; assembler; nostackframe; inline;
    function  getTCKPS0 : TBits_1; assembler; nostackframe; inline;
    function  getTCKPS1 : TBits_1; assembler; nostackframe; inline;
    function  getTCKPS2 : TBits_1; assembler; nostackframe; inline;
    function  getTCS : TBits_1; assembler; nostackframe; inline;
    function  getTGATE : TBits_1; assembler; nostackframe; inline;
    function  getTON : TBits_1; assembler; nostackframe; inline;
    function  getTSIDL : TBits_1; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setON(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSIDL(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTCKPS(thebits : TBits_3); assembler; nostackframe; inline;
    procedure setTCKPS0(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTCKPS1(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTCKPS2(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTCS(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTGATE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTON(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTSIDL(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearON;
    procedure clearSIDL;
    procedure clearTCKPS0;
    procedure clearTCKPS1;
    procedure clearTCKPS2;
    procedure clearTCS;
    procedure clearTGATE;
    procedure clearTON;
    procedure clearTSIDL;
    procedure setON;
    procedure setSIDL;
    procedure setTCKPS0;
    procedure setTCKPS1;
    procedure setTCKPS2;
    procedure setTCS;
    procedure setTGATE;
    procedure setTON;
    procedure setTSIDL;
    property ON : TBits_1 read getON write setON;
    property SIDL : TBits_1 read getSIDL write setSIDL;
    property TCKPS : TBits_3 read getTCKPS write setTCKPS;
    property TCKPS0 : TBits_1 read getTCKPS0 write setTCKPS0;
    property TCKPS1 : TBits_1 read getTCKPS1 write setTCKPS1;
    property TCKPS2 : TBits_1 read getTCKPS2 write setTCKPS2;
    property TCS : TBits_1 read getTCS write setTCS;
    property TGATE : TBits_1 read getTGATE write setTGATE;
    property TON : TBits_1 read getTON write setTON;
    property TSIDL : TBits_1 read getTSIDL write setTSIDL;
    property w : TBits_32 read getw write setw;
  end;
type
  TTMR5Registers = record
    T5CONbits : TTMR5_T5CON;
    T5CON : longWord;
    T5CONCLR : longWord;
    T5CONSET : longWord;
    T5CONINV : longWord;
    TMR5 : longWord;
    TMR5CLR : longWord;
    TMR5SET : longWord;
    TMR5INV : longWord;
    PR5 : longWord;
    PR5CLR : longWord;
    PR5SET : longWord;
    PR5INV : longWord;
  end;
  TICAP1_IC1CON = record
  private
    function  getC32 : TBits_1; assembler; nostackframe; inline;
    function  getFEDGE : TBits_1; assembler; nostackframe; inline;
    function  getICBNE : TBits_1; assembler; nostackframe; inline;
    function  getICI : TBits_2; assembler; nostackframe; inline;
    function  getICI0 : TBits_1; assembler; nostackframe; inline;
    function  getICI1 : TBits_1; assembler; nostackframe; inline;
    function  getICM : TBits_3; assembler; nostackframe; inline;
    function  getICM0 : TBits_1; assembler; nostackframe; inline;
    function  getICM1 : TBits_1; assembler; nostackframe; inline;
    function  getICM2 : TBits_1; assembler; nostackframe; inline;
    function  getICOV : TBits_1; assembler; nostackframe; inline;
    function  getICSIDL : TBits_1; assembler; nostackframe; inline;
    function  getICTMR : TBits_1; assembler; nostackframe; inline;
    function  getON : TBits_1; assembler; nostackframe; inline;
    function  getSIDL : TBits_1; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setC32(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setFEDGE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setICBNE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setICI(thebits : TBits_2); assembler; nostackframe; inline;
    procedure setICI0(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setICI1(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setICM(thebits : TBits_3); assembler; nostackframe; inline;
    procedure setICM0(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setICM1(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setICM2(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setICOV(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setICSIDL(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setICTMR(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setON(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSIDL(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearC32;
    procedure clearFEDGE;
    procedure clearICBNE;
    procedure clearICI0;
    procedure clearICI1;
    procedure clearICM0;
    procedure clearICM1;
    procedure clearICM2;
    procedure clearICOV;
    procedure clearICSIDL;
    procedure clearICTMR;
    procedure clearON;
    procedure clearSIDL;
    procedure setC32;
    procedure setFEDGE;
    procedure setICBNE;
    procedure setICI0;
    procedure setICI1;
    procedure setICM0;
    procedure setICM1;
    procedure setICM2;
    procedure setICOV;
    procedure setICSIDL;
    procedure setICTMR;
    procedure setON;
    procedure setSIDL;
    property C32 : TBits_1 read getC32 write setC32;
    property FEDGE : TBits_1 read getFEDGE write setFEDGE;
    property ICBNE : TBits_1 read getICBNE write setICBNE;
    property ICI : TBits_2 read getICI write setICI;
    property ICI0 : TBits_1 read getICI0 write setICI0;
    property ICI1 : TBits_1 read getICI1 write setICI1;
    property ICM : TBits_3 read getICM write setICM;
    property ICM0 : TBits_1 read getICM0 write setICM0;
    property ICM1 : TBits_1 read getICM1 write setICM1;
    property ICM2 : TBits_1 read getICM2 write setICM2;
    property ICOV : TBits_1 read getICOV write setICOV;
    property ICSIDL : TBits_1 read getICSIDL write setICSIDL;
    property ICTMR : TBits_1 read getICTMR write setICTMR;
    property ON : TBits_1 read getON write setON;
    property SIDL : TBits_1 read getSIDL write setSIDL;
    property w : TBits_32 read getw write setw;
  end;
type
  TICAP1Registers = record
    IC1CONbits : TICAP1_IC1CON;
    IC1CON : longWord;
    IC1CONCLR : longWord;
    IC1CONSET : longWord;
    IC1CONINV : longWord;
    IC1BUF : longWord;
  end;
  TICAP2_IC2CON = record
  private
    function  getC32 : TBits_1; assembler; nostackframe; inline;
    function  getFEDGE : TBits_1; assembler; nostackframe; inline;
    function  getICBNE : TBits_1; assembler; nostackframe; inline;
    function  getICI : TBits_2; assembler; nostackframe; inline;
    function  getICI0 : TBits_1; assembler; nostackframe; inline;
    function  getICI1 : TBits_1; assembler; nostackframe; inline;
    function  getICM : TBits_3; assembler; nostackframe; inline;
    function  getICM0 : TBits_1; assembler; nostackframe; inline;
    function  getICM1 : TBits_1; assembler; nostackframe; inline;
    function  getICM2 : TBits_1; assembler; nostackframe; inline;
    function  getICOV : TBits_1; assembler; nostackframe; inline;
    function  getICSIDL : TBits_1; assembler; nostackframe; inline;
    function  getICTMR : TBits_1; assembler; nostackframe; inline;
    function  getON : TBits_1; assembler; nostackframe; inline;
    function  getSIDL : TBits_1; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setC32(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setFEDGE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setICBNE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setICI(thebits : TBits_2); assembler; nostackframe; inline;
    procedure setICI0(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setICI1(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setICM(thebits : TBits_3); assembler; nostackframe; inline;
    procedure setICM0(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setICM1(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setICM2(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setICOV(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setICSIDL(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setICTMR(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setON(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSIDL(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearC32;
    procedure clearFEDGE;
    procedure clearICBNE;
    procedure clearICI0;
    procedure clearICI1;
    procedure clearICM0;
    procedure clearICM1;
    procedure clearICM2;
    procedure clearICOV;
    procedure clearICSIDL;
    procedure clearICTMR;
    procedure clearON;
    procedure clearSIDL;
    procedure setC32;
    procedure setFEDGE;
    procedure setICBNE;
    procedure setICI0;
    procedure setICI1;
    procedure setICM0;
    procedure setICM1;
    procedure setICM2;
    procedure setICOV;
    procedure setICSIDL;
    procedure setICTMR;
    procedure setON;
    procedure setSIDL;
    property C32 : TBits_1 read getC32 write setC32;
    property FEDGE : TBits_1 read getFEDGE write setFEDGE;
    property ICBNE : TBits_1 read getICBNE write setICBNE;
    property ICI : TBits_2 read getICI write setICI;
    property ICI0 : TBits_1 read getICI0 write setICI0;
    property ICI1 : TBits_1 read getICI1 write setICI1;
    property ICM : TBits_3 read getICM write setICM;
    property ICM0 : TBits_1 read getICM0 write setICM0;
    property ICM1 : TBits_1 read getICM1 write setICM1;
    property ICM2 : TBits_1 read getICM2 write setICM2;
    property ICOV : TBits_1 read getICOV write setICOV;
    property ICSIDL : TBits_1 read getICSIDL write setICSIDL;
    property ICTMR : TBits_1 read getICTMR write setICTMR;
    property ON : TBits_1 read getON write setON;
    property SIDL : TBits_1 read getSIDL write setSIDL;
    property w : TBits_32 read getw write setw;
  end;
type
  TICAP2Registers = record
    IC2CONbits : TICAP2_IC2CON;
    IC2CON : longWord;
    IC2CONCLR : longWord;
    IC2CONSET : longWord;
    IC2CONINV : longWord;
    IC2BUF : longWord;
  end;
  TICAP3_IC3CON = record
  private
    function  getC32 : TBits_1; assembler; nostackframe; inline;
    function  getFEDGE : TBits_1; assembler; nostackframe; inline;
    function  getICBNE : TBits_1; assembler; nostackframe; inline;
    function  getICI : TBits_2; assembler; nostackframe; inline;
    function  getICI0 : TBits_1; assembler; nostackframe; inline;
    function  getICI1 : TBits_1; assembler; nostackframe; inline;
    function  getICM : TBits_3; assembler; nostackframe; inline;
    function  getICM0 : TBits_1; assembler; nostackframe; inline;
    function  getICM1 : TBits_1; assembler; nostackframe; inline;
    function  getICM2 : TBits_1; assembler; nostackframe; inline;
    function  getICOV : TBits_1; assembler; nostackframe; inline;
    function  getICSIDL : TBits_1; assembler; nostackframe; inline;
    function  getICTMR : TBits_1; assembler; nostackframe; inline;
    function  getON : TBits_1; assembler; nostackframe; inline;
    function  getSIDL : TBits_1; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setC32(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setFEDGE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setICBNE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setICI(thebits : TBits_2); assembler; nostackframe; inline;
    procedure setICI0(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setICI1(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setICM(thebits : TBits_3); assembler; nostackframe; inline;
    procedure setICM0(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setICM1(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setICM2(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setICOV(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setICSIDL(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setICTMR(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setON(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSIDL(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearC32;
    procedure clearFEDGE;
    procedure clearICBNE;
    procedure clearICI0;
    procedure clearICI1;
    procedure clearICM0;
    procedure clearICM1;
    procedure clearICM2;
    procedure clearICOV;
    procedure clearICSIDL;
    procedure clearICTMR;
    procedure clearON;
    procedure clearSIDL;
    procedure setC32;
    procedure setFEDGE;
    procedure setICBNE;
    procedure setICI0;
    procedure setICI1;
    procedure setICM0;
    procedure setICM1;
    procedure setICM2;
    procedure setICOV;
    procedure setICSIDL;
    procedure setICTMR;
    procedure setON;
    procedure setSIDL;
    property C32 : TBits_1 read getC32 write setC32;
    property FEDGE : TBits_1 read getFEDGE write setFEDGE;
    property ICBNE : TBits_1 read getICBNE write setICBNE;
    property ICI : TBits_2 read getICI write setICI;
    property ICI0 : TBits_1 read getICI0 write setICI0;
    property ICI1 : TBits_1 read getICI1 write setICI1;
    property ICM : TBits_3 read getICM write setICM;
    property ICM0 : TBits_1 read getICM0 write setICM0;
    property ICM1 : TBits_1 read getICM1 write setICM1;
    property ICM2 : TBits_1 read getICM2 write setICM2;
    property ICOV : TBits_1 read getICOV write setICOV;
    property ICSIDL : TBits_1 read getICSIDL write setICSIDL;
    property ICTMR : TBits_1 read getICTMR write setICTMR;
    property ON : TBits_1 read getON write setON;
    property SIDL : TBits_1 read getSIDL write setSIDL;
    property w : TBits_32 read getw write setw;
  end;
type
  TICAP3Registers = record
    IC3CONbits : TICAP3_IC3CON;
    IC3CON : longWord;
    IC3CONCLR : longWord;
    IC3CONSET : longWord;
    IC3CONINV : longWord;
    IC3BUF : longWord;
  end;
  TICAP4_IC4CON = record
  private
    function  getC32 : TBits_1; assembler; nostackframe; inline;
    function  getFEDGE : TBits_1; assembler; nostackframe; inline;
    function  getICBNE : TBits_1; assembler; nostackframe; inline;
    function  getICI : TBits_2; assembler; nostackframe; inline;
    function  getICI0 : TBits_1; assembler; nostackframe; inline;
    function  getICI1 : TBits_1; assembler; nostackframe; inline;
    function  getICM : TBits_3; assembler; nostackframe; inline;
    function  getICM0 : TBits_1; assembler; nostackframe; inline;
    function  getICM1 : TBits_1; assembler; nostackframe; inline;
    function  getICM2 : TBits_1; assembler; nostackframe; inline;
    function  getICOV : TBits_1; assembler; nostackframe; inline;
    function  getICSIDL : TBits_1; assembler; nostackframe; inline;
    function  getICTMR : TBits_1; assembler; nostackframe; inline;
    function  getON : TBits_1; assembler; nostackframe; inline;
    function  getSIDL : TBits_1; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setC32(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setFEDGE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setICBNE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setICI(thebits : TBits_2); assembler; nostackframe; inline;
    procedure setICI0(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setICI1(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setICM(thebits : TBits_3); assembler; nostackframe; inline;
    procedure setICM0(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setICM1(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setICM2(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setICOV(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setICSIDL(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setICTMR(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setON(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSIDL(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearC32;
    procedure clearFEDGE;
    procedure clearICBNE;
    procedure clearICI0;
    procedure clearICI1;
    procedure clearICM0;
    procedure clearICM1;
    procedure clearICM2;
    procedure clearICOV;
    procedure clearICSIDL;
    procedure clearICTMR;
    procedure clearON;
    procedure clearSIDL;
    procedure setC32;
    procedure setFEDGE;
    procedure setICBNE;
    procedure setICI0;
    procedure setICI1;
    procedure setICM0;
    procedure setICM1;
    procedure setICM2;
    procedure setICOV;
    procedure setICSIDL;
    procedure setICTMR;
    procedure setON;
    procedure setSIDL;
    property C32 : TBits_1 read getC32 write setC32;
    property FEDGE : TBits_1 read getFEDGE write setFEDGE;
    property ICBNE : TBits_1 read getICBNE write setICBNE;
    property ICI : TBits_2 read getICI write setICI;
    property ICI0 : TBits_1 read getICI0 write setICI0;
    property ICI1 : TBits_1 read getICI1 write setICI1;
    property ICM : TBits_3 read getICM write setICM;
    property ICM0 : TBits_1 read getICM0 write setICM0;
    property ICM1 : TBits_1 read getICM1 write setICM1;
    property ICM2 : TBits_1 read getICM2 write setICM2;
    property ICOV : TBits_1 read getICOV write setICOV;
    property ICSIDL : TBits_1 read getICSIDL write setICSIDL;
    property ICTMR : TBits_1 read getICTMR write setICTMR;
    property ON : TBits_1 read getON write setON;
    property SIDL : TBits_1 read getSIDL write setSIDL;
    property w : TBits_32 read getw write setw;
  end;
type
  TICAP4Registers = record
    IC4CONbits : TICAP4_IC4CON;
    IC4CON : longWord;
    IC4CONCLR : longWord;
    IC4CONSET : longWord;
    IC4CONINV : longWord;
    IC4BUF : longWord;
  end;
  TICAP5_IC5CON = record
  private
    function  getC32 : TBits_1; assembler; nostackframe; inline;
    function  getFEDGE : TBits_1; assembler; nostackframe; inline;
    function  getICBNE : TBits_1; assembler; nostackframe; inline;
    function  getICI : TBits_2; assembler; nostackframe; inline;
    function  getICI0 : TBits_1; assembler; nostackframe; inline;
    function  getICI1 : TBits_1; assembler; nostackframe; inline;
    function  getICM : TBits_3; assembler; nostackframe; inline;
    function  getICM0 : TBits_1; assembler; nostackframe; inline;
    function  getICM1 : TBits_1; assembler; nostackframe; inline;
    function  getICM2 : TBits_1; assembler; nostackframe; inline;
    function  getICOV : TBits_1; assembler; nostackframe; inline;
    function  getICSIDL : TBits_1; assembler; nostackframe; inline;
    function  getICTMR : TBits_1; assembler; nostackframe; inline;
    function  getON : TBits_1; assembler; nostackframe; inline;
    function  getSIDL : TBits_1; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setC32(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setFEDGE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setICBNE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setICI(thebits : TBits_2); assembler; nostackframe; inline;
    procedure setICI0(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setICI1(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setICM(thebits : TBits_3); assembler; nostackframe; inline;
    procedure setICM0(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setICM1(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setICM2(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setICOV(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setICSIDL(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setICTMR(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setON(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSIDL(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearC32;
    procedure clearFEDGE;
    procedure clearICBNE;
    procedure clearICI0;
    procedure clearICI1;
    procedure clearICM0;
    procedure clearICM1;
    procedure clearICM2;
    procedure clearICOV;
    procedure clearICSIDL;
    procedure clearICTMR;
    procedure clearON;
    procedure clearSIDL;
    procedure setC32;
    procedure setFEDGE;
    procedure setICBNE;
    procedure setICI0;
    procedure setICI1;
    procedure setICM0;
    procedure setICM1;
    procedure setICM2;
    procedure setICOV;
    procedure setICSIDL;
    procedure setICTMR;
    procedure setON;
    procedure setSIDL;
    property C32 : TBits_1 read getC32 write setC32;
    property FEDGE : TBits_1 read getFEDGE write setFEDGE;
    property ICBNE : TBits_1 read getICBNE write setICBNE;
    property ICI : TBits_2 read getICI write setICI;
    property ICI0 : TBits_1 read getICI0 write setICI0;
    property ICI1 : TBits_1 read getICI1 write setICI1;
    property ICM : TBits_3 read getICM write setICM;
    property ICM0 : TBits_1 read getICM0 write setICM0;
    property ICM1 : TBits_1 read getICM1 write setICM1;
    property ICM2 : TBits_1 read getICM2 write setICM2;
    property ICOV : TBits_1 read getICOV write setICOV;
    property ICSIDL : TBits_1 read getICSIDL write setICSIDL;
    property ICTMR : TBits_1 read getICTMR write setICTMR;
    property ON : TBits_1 read getON write setON;
    property SIDL : TBits_1 read getSIDL write setSIDL;
    property w : TBits_32 read getw write setw;
  end;
type
  TICAP5Registers = record
    IC5CONbits : TICAP5_IC5CON;
    IC5CON : longWord;
    IC5CONCLR : longWord;
    IC5CONSET : longWord;
    IC5CONINV : longWord;
    IC5BUF : longWord;
  end;
  TOCMP1_OC1CON = record
  private
    function  getOC32 : TBits_1; assembler; nostackframe; inline;
    function  getOCFLT : TBits_1; assembler; nostackframe; inline;
    function  getOCM : TBits_3; assembler; nostackframe; inline;
    function  getOCM0 : TBits_1; assembler; nostackframe; inline;
    function  getOCM1 : TBits_1; assembler; nostackframe; inline;
    function  getOCM2 : TBits_1; assembler; nostackframe; inline;
    function  getOCSIDL : TBits_1; assembler; nostackframe; inline;
    function  getOCTSEL : TBits_1; assembler; nostackframe; inline;
    function  getON : TBits_1; assembler; nostackframe; inline;
    function  getSIDL : TBits_1; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setOC32(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setOCFLT(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setOCM(thebits : TBits_3); assembler; nostackframe; inline;
    procedure setOCM0(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setOCM1(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setOCM2(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setOCSIDL(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setOCTSEL(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setON(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSIDL(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearOC32;
    procedure clearOCFLT;
    procedure clearOCM0;
    procedure clearOCM1;
    procedure clearOCM2;
    procedure clearOCSIDL;
    procedure clearOCTSEL;
    procedure clearON;
    procedure clearSIDL;
    procedure setOC32;
    procedure setOCFLT;
    procedure setOCM0;
    procedure setOCM1;
    procedure setOCM2;
    procedure setOCSIDL;
    procedure setOCTSEL;
    procedure setON;
    procedure setSIDL;
    property OC32 : TBits_1 read getOC32 write setOC32;
    property OCFLT : TBits_1 read getOCFLT write setOCFLT;
    property OCM : TBits_3 read getOCM write setOCM;
    property OCM0 : TBits_1 read getOCM0 write setOCM0;
    property OCM1 : TBits_1 read getOCM1 write setOCM1;
    property OCM2 : TBits_1 read getOCM2 write setOCM2;
    property OCSIDL : TBits_1 read getOCSIDL write setOCSIDL;
    property OCTSEL : TBits_1 read getOCTSEL write setOCTSEL;
    property ON : TBits_1 read getON write setON;
    property SIDL : TBits_1 read getSIDL write setSIDL;
    property w : TBits_32 read getw write setw;
  end;
type
  TOCMP1Registers = record
    OC1CONbits : TOCMP1_OC1CON;
    OC1CON : longWord;
    OC1CONCLR : longWord;
    OC1CONSET : longWord;
    OC1CONINV : longWord;
    OC1R : longWord;
    OC1RCLR : longWord;
    OC1RSET : longWord;
    OC1RINV : longWord;
    OC1RS : longWord;
    OC1RSCLR : longWord;
    OC1RSSET : longWord;
    OC1RSINV : longWord;
  end;
  TOCMP2_OC2CON = record
  private
    function  getOC32 : TBits_1; assembler; nostackframe; inline;
    function  getOCFLT : TBits_1; assembler; nostackframe; inline;
    function  getOCM : TBits_3; assembler; nostackframe; inline;
    function  getOCM0 : TBits_1; assembler; nostackframe; inline;
    function  getOCM1 : TBits_1; assembler; nostackframe; inline;
    function  getOCM2 : TBits_1; assembler; nostackframe; inline;
    function  getOCSIDL : TBits_1; assembler; nostackframe; inline;
    function  getOCTSEL : TBits_1; assembler; nostackframe; inline;
    function  getON : TBits_1; assembler; nostackframe; inline;
    function  getSIDL : TBits_1; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setOC32(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setOCFLT(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setOCM(thebits : TBits_3); assembler; nostackframe; inline;
    procedure setOCM0(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setOCM1(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setOCM2(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setOCSIDL(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setOCTSEL(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setON(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSIDL(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearOC32;
    procedure clearOCFLT;
    procedure clearOCM0;
    procedure clearOCM1;
    procedure clearOCM2;
    procedure clearOCSIDL;
    procedure clearOCTSEL;
    procedure clearON;
    procedure clearSIDL;
    procedure setOC32;
    procedure setOCFLT;
    procedure setOCM0;
    procedure setOCM1;
    procedure setOCM2;
    procedure setOCSIDL;
    procedure setOCTSEL;
    procedure setON;
    procedure setSIDL;
    property OC32 : TBits_1 read getOC32 write setOC32;
    property OCFLT : TBits_1 read getOCFLT write setOCFLT;
    property OCM : TBits_3 read getOCM write setOCM;
    property OCM0 : TBits_1 read getOCM0 write setOCM0;
    property OCM1 : TBits_1 read getOCM1 write setOCM1;
    property OCM2 : TBits_1 read getOCM2 write setOCM2;
    property OCSIDL : TBits_1 read getOCSIDL write setOCSIDL;
    property OCTSEL : TBits_1 read getOCTSEL write setOCTSEL;
    property ON : TBits_1 read getON write setON;
    property SIDL : TBits_1 read getSIDL write setSIDL;
    property w : TBits_32 read getw write setw;
  end;
type
  TOCMP2Registers = record
    OC2CONbits : TOCMP2_OC2CON;
    OC2CON : longWord;
    OC2CONCLR : longWord;
    OC2CONSET : longWord;
    OC2CONINV : longWord;
    OC2R : longWord;
    OC2RCLR : longWord;
    OC2RSET : longWord;
    OC2RINV : longWord;
    OC2RS : longWord;
    OC2RSCLR : longWord;
    OC2RSSET : longWord;
    OC2RSINV : longWord;
  end;
  TOCMP3_OC3CON = record
  private
    function  getOC32 : TBits_1; assembler; nostackframe; inline;
    function  getOCFLT : TBits_1; assembler; nostackframe; inline;
    function  getOCM : TBits_3; assembler; nostackframe; inline;
    function  getOCM0 : TBits_1; assembler; nostackframe; inline;
    function  getOCM1 : TBits_1; assembler; nostackframe; inline;
    function  getOCM2 : TBits_1; assembler; nostackframe; inline;
    function  getOCSIDL : TBits_1; assembler; nostackframe; inline;
    function  getOCTSEL : TBits_1; assembler; nostackframe; inline;
    function  getON : TBits_1; assembler; nostackframe; inline;
    function  getSIDL : TBits_1; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setOC32(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setOCFLT(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setOCM(thebits : TBits_3); assembler; nostackframe; inline;
    procedure setOCM0(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setOCM1(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setOCM2(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setOCSIDL(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setOCTSEL(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setON(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSIDL(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearOC32;
    procedure clearOCFLT;
    procedure clearOCM0;
    procedure clearOCM1;
    procedure clearOCM2;
    procedure clearOCSIDL;
    procedure clearOCTSEL;
    procedure clearON;
    procedure clearSIDL;
    procedure setOC32;
    procedure setOCFLT;
    procedure setOCM0;
    procedure setOCM1;
    procedure setOCM2;
    procedure setOCSIDL;
    procedure setOCTSEL;
    procedure setON;
    procedure setSIDL;
    property OC32 : TBits_1 read getOC32 write setOC32;
    property OCFLT : TBits_1 read getOCFLT write setOCFLT;
    property OCM : TBits_3 read getOCM write setOCM;
    property OCM0 : TBits_1 read getOCM0 write setOCM0;
    property OCM1 : TBits_1 read getOCM1 write setOCM1;
    property OCM2 : TBits_1 read getOCM2 write setOCM2;
    property OCSIDL : TBits_1 read getOCSIDL write setOCSIDL;
    property OCTSEL : TBits_1 read getOCTSEL write setOCTSEL;
    property ON : TBits_1 read getON write setON;
    property SIDL : TBits_1 read getSIDL write setSIDL;
    property w : TBits_32 read getw write setw;
  end;
type
  TOCMP3Registers = record
    OC3CONbits : TOCMP3_OC3CON;
    OC3CON : longWord;
    OC3CONCLR : longWord;
    OC3CONSET : longWord;
    OC3CONINV : longWord;
    OC3R : longWord;
    OC3RCLR : longWord;
    OC3RSET : longWord;
    OC3RINV : longWord;
    OC3RS : longWord;
    OC3RSCLR : longWord;
    OC3RSSET : longWord;
    OC3RSINV : longWord;
  end;
  TOCMP4_OC4CON = record
  private
    function  getOC32 : TBits_1; assembler; nostackframe; inline;
    function  getOCFLT : TBits_1; assembler; nostackframe; inline;
    function  getOCM : TBits_3; assembler; nostackframe; inline;
    function  getOCM0 : TBits_1; assembler; nostackframe; inline;
    function  getOCM1 : TBits_1; assembler; nostackframe; inline;
    function  getOCM2 : TBits_1; assembler; nostackframe; inline;
    function  getOCSIDL : TBits_1; assembler; nostackframe; inline;
    function  getOCTSEL : TBits_1; assembler; nostackframe; inline;
    function  getON : TBits_1; assembler; nostackframe; inline;
    function  getSIDL : TBits_1; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setOC32(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setOCFLT(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setOCM(thebits : TBits_3); assembler; nostackframe; inline;
    procedure setOCM0(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setOCM1(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setOCM2(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setOCSIDL(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setOCTSEL(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setON(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSIDL(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearOC32;
    procedure clearOCFLT;
    procedure clearOCM0;
    procedure clearOCM1;
    procedure clearOCM2;
    procedure clearOCSIDL;
    procedure clearOCTSEL;
    procedure clearON;
    procedure clearSIDL;
    procedure setOC32;
    procedure setOCFLT;
    procedure setOCM0;
    procedure setOCM1;
    procedure setOCM2;
    procedure setOCSIDL;
    procedure setOCTSEL;
    procedure setON;
    procedure setSIDL;
    property OC32 : TBits_1 read getOC32 write setOC32;
    property OCFLT : TBits_1 read getOCFLT write setOCFLT;
    property OCM : TBits_3 read getOCM write setOCM;
    property OCM0 : TBits_1 read getOCM0 write setOCM0;
    property OCM1 : TBits_1 read getOCM1 write setOCM1;
    property OCM2 : TBits_1 read getOCM2 write setOCM2;
    property OCSIDL : TBits_1 read getOCSIDL write setOCSIDL;
    property OCTSEL : TBits_1 read getOCTSEL write setOCTSEL;
    property ON : TBits_1 read getON write setON;
    property SIDL : TBits_1 read getSIDL write setSIDL;
    property w : TBits_32 read getw write setw;
  end;
type
  TOCMP4Registers = record
    OC4CONbits : TOCMP4_OC4CON;
    OC4CON : longWord;
    OC4CONCLR : longWord;
    OC4CONSET : longWord;
    OC4CONINV : longWord;
    OC4R : longWord;
    OC4RCLR : longWord;
    OC4RSET : longWord;
    OC4RINV : longWord;
    OC4RS : longWord;
    OC4RSCLR : longWord;
    OC4RSSET : longWord;
    OC4RSINV : longWord;
  end;
  TOCMP5_OC5CON = record
  private
    function  getOC32 : TBits_1; assembler; nostackframe; inline;
    function  getOCFLT : TBits_1; assembler; nostackframe; inline;
    function  getOCM : TBits_3; assembler; nostackframe; inline;
    function  getOCM0 : TBits_1; assembler; nostackframe; inline;
    function  getOCM1 : TBits_1; assembler; nostackframe; inline;
    function  getOCM2 : TBits_1; assembler; nostackframe; inline;
    function  getOCSIDL : TBits_1; assembler; nostackframe; inline;
    function  getOCTSEL : TBits_1; assembler; nostackframe; inline;
    function  getON : TBits_1; assembler; nostackframe; inline;
    function  getSIDL : TBits_1; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setOC32(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setOCFLT(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setOCM(thebits : TBits_3); assembler; nostackframe; inline;
    procedure setOCM0(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setOCM1(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setOCM2(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setOCSIDL(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setOCTSEL(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setON(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSIDL(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearOC32;
    procedure clearOCFLT;
    procedure clearOCM0;
    procedure clearOCM1;
    procedure clearOCM2;
    procedure clearOCSIDL;
    procedure clearOCTSEL;
    procedure clearON;
    procedure clearSIDL;
    procedure setOC32;
    procedure setOCFLT;
    procedure setOCM0;
    procedure setOCM1;
    procedure setOCM2;
    procedure setOCSIDL;
    procedure setOCTSEL;
    procedure setON;
    procedure setSIDL;
    property OC32 : TBits_1 read getOC32 write setOC32;
    property OCFLT : TBits_1 read getOCFLT write setOCFLT;
    property OCM : TBits_3 read getOCM write setOCM;
    property OCM0 : TBits_1 read getOCM0 write setOCM0;
    property OCM1 : TBits_1 read getOCM1 write setOCM1;
    property OCM2 : TBits_1 read getOCM2 write setOCM2;
    property OCSIDL : TBits_1 read getOCSIDL write setOCSIDL;
    property OCTSEL : TBits_1 read getOCTSEL write setOCTSEL;
    property ON : TBits_1 read getON write setON;
    property SIDL : TBits_1 read getSIDL write setSIDL;
    property w : TBits_32 read getw write setw;
  end;
type
  TOCMP5Registers = record
    OC5CONbits : TOCMP5_OC5CON;
    OC5CON : longWord;
    OC5CONCLR : longWord;
    OC5CONSET : longWord;
    OC5CONINV : longWord;
    OC5R : longWord;
    OC5RCLR : longWord;
    OC5RSET : longWord;
    OC5RINV : longWord;
    OC5RS : longWord;
    OC5RSCLR : longWord;
    OC5RSSET : longWord;
    OC5RSINV : longWord;
  end;
  TI2C3_I2C1ACON = record
  private
    function  getA10M : TBits_1; assembler; nostackframe; inline;
    function  getACKDT : TBits_1; assembler; nostackframe; inline;
    function  getACKEN : TBits_1; assembler; nostackframe; inline;
    function  getDISSLW : TBits_1; assembler; nostackframe; inline;
    function  getGCEN : TBits_1; assembler; nostackframe; inline;
    function  getI2CEN : TBits_1; assembler; nostackframe; inline;
    function  getI2CSIDL : TBits_1; assembler; nostackframe; inline;
    function  getIPMIEN : TBits_1; assembler; nostackframe; inline;
    function  getON : TBits_1; assembler; nostackframe; inline;
    function  getPEN : TBits_1; assembler; nostackframe; inline;
    function  getRCEN : TBits_1; assembler; nostackframe; inline;
    function  getRSEN : TBits_1; assembler; nostackframe; inline;
    function  getSCLREL : TBits_1; assembler; nostackframe; inline;
    function  getSEN : TBits_1; assembler; nostackframe; inline;
    function  getSIDL : TBits_1; assembler; nostackframe; inline;
    function  getSMEN : TBits_1; assembler; nostackframe; inline;
    function  getSTREN : TBits_1; assembler; nostackframe; inline;
    function  getSTRICT : TBits_1; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setA10M(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setACKDT(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setACKEN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setDISSLW(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setGCEN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setI2CEN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setI2CSIDL(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setIPMIEN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setON(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setPEN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRCEN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRSEN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSCLREL(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSEN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSIDL(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSMEN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSTREN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSTRICT(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearA10M;
    procedure clearACKDT;
    procedure clearACKEN;
    procedure clearDISSLW;
    procedure clearGCEN;
    procedure clearI2CEN;
    procedure clearI2CSIDL;
    procedure clearIPMIEN;
    procedure clearON;
    procedure clearPEN;
    procedure clearRCEN;
    procedure clearRSEN;
    procedure clearSCLREL;
    procedure clearSEN;
    procedure clearSIDL;
    procedure clearSMEN;
    procedure clearSTREN;
    procedure clearSTRICT;
    procedure setA10M;
    procedure setACKDT;
    procedure setACKEN;
    procedure setDISSLW;
    procedure setGCEN;
    procedure setI2CEN;
    procedure setI2CSIDL;
    procedure setIPMIEN;
    procedure setON;
    procedure setPEN;
    procedure setRCEN;
    procedure setRSEN;
    procedure setSCLREL;
    procedure setSEN;
    procedure setSIDL;
    procedure setSMEN;
    procedure setSTREN;
    procedure setSTRICT;
    property A10M : TBits_1 read getA10M write setA10M;
    property ACKDT : TBits_1 read getACKDT write setACKDT;
    property ACKEN : TBits_1 read getACKEN write setACKEN;
    property DISSLW : TBits_1 read getDISSLW write setDISSLW;
    property GCEN : TBits_1 read getGCEN write setGCEN;
    property I2CEN : TBits_1 read getI2CEN write setI2CEN;
    property I2CSIDL : TBits_1 read getI2CSIDL write setI2CSIDL;
    property IPMIEN : TBits_1 read getIPMIEN write setIPMIEN;
    property ON : TBits_1 read getON write setON;
    property PEN : TBits_1 read getPEN write setPEN;
    property RCEN : TBits_1 read getRCEN write setRCEN;
    property RSEN : TBits_1 read getRSEN write setRSEN;
    property SCLREL : TBits_1 read getSCLREL write setSCLREL;
    property SEN : TBits_1 read getSEN write setSEN;
    property SIDL : TBits_1 read getSIDL write setSIDL;
    property SMEN : TBits_1 read getSMEN write setSMEN;
    property STREN : TBits_1 read getSTREN write setSTREN;
    property STRICT : TBits_1 read getSTRICT write setSTRICT;
    property w : TBits_32 read getw write setw;
  end;
  TI2C3_I2C3CON = record
  private
    function  getA10M : TBits_1; assembler; nostackframe; inline;
    function  getACKDT : TBits_1; assembler; nostackframe; inline;
    function  getACKEN : TBits_1; assembler; nostackframe; inline;
    function  getDISSLW : TBits_1; assembler; nostackframe; inline;
    function  getGCEN : TBits_1; assembler; nostackframe; inline;
    function  getI2CEN : TBits_1; assembler; nostackframe; inline;
    function  getI2CSIDL : TBits_1; assembler; nostackframe; inline;
    function  getIPMIEN : TBits_1; assembler; nostackframe; inline;
    function  getON : TBits_1; assembler; nostackframe; inline;
    function  getPEN : TBits_1; assembler; nostackframe; inline;
    function  getRCEN : TBits_1; assembler; nostackframe; inline;
    function  getRSEN : TBits_1; assembler; nostackframe; inline;
    function  getSCLREL : TBits_1; assembler; nostackframe; inline;
    function  getSEN : TBits_1; assembler; nostackframe; inline;
    function  getSIDL : TBits_1; assembler; nostackframe; inline;
    function  getSMEN : TBits_1; assembler; nostackframe; inline;
    function  getSTREN : TBits_1; assembler; nostackframe; inline;
    function  getSTRICT : TBits_1; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setA10M(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setACKDT(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setACKEN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setDISSLW(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setGCEN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setI2CEN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setI2CSIDL(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setIPMIEN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setON(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setPEN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRCEN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRSEN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSCLREL(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSEN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSIDL(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSMEN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSTREN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSTRICT(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearA10M;
    procedure clearACKDT;
    procedure clearACKEN;
    procedure clearDISSLW;
    procedure clearGCEN;
    procedure clearI2CEN;
    procedure clearI2CSIDL;
    procedure clearIPMIEN;
    procedure clearON;
    procedure clearPEN;
    procedure clearRCEN;
    procedure clearRSEN;
    procedure clearSCLREL;
    procedure clearSEN;
    procedure clearSIDL;
    procedure clearSMEN;
    procedure clearSTREN;
    procedure clearSTRICT;
    procedure setA10M;
    procedure setACKDT;
    procedure setACKEN;
    procedure setDISSLW;
    procedure setGCEN;
    procedure setI2CEN;
    procedure setI2CSIDL;
    procedure setIPMIEN;
    procedure setON;
    procedure setPEN;
    procedure setRCEN;
    procedure setRSEN;
    procedure setSCLREL;
    procedure setSEN;
    procedure setSIDL;
    procedure setSMEN;
    procedure setSTREN;
    procedure setSTRICT;
    property A10M : TBits_1 read getA10M write setA10M;
    property ACKDT : TBits_1 read getACKDT write setACKDT;
    property ACKEN : TBits_1 read getACKEN write setACKEN;
    property DISSLW : TBits_1 read getDISSLW write setDISSLW;
    property GCEN : TBits_1 read getGCEN write setGCEN;
    property I2CEN : TBits_1 read getI2CEN write setI2CEN;
    property I2CSIDL : TBits_1 read getI2CSIDL write setI2CSIDL;
    property IPMIEN : TBits_1 read getIPMIEN write setIPMIEN;
    property ON : TBits_1 read getON write setON;
    property PEN : TBits_1 read getPEN write setPEN;
    property RCEN : TBits_1 read getRCEN write setRCEN;
    property RSEN : TBits_1 read getRSEN write setRSEN;
    property SCLREL : TBits_1 read getSCLREL write setSCLREL;
    property SEN : TBits_1 read getSEN write setSEN;
    property SIDL : TBits_1 read getSIDL write setSIDL;
    property SMEN : TBits_1 read getSMEN write setSMEN;
    property STREN : TBits_1 read getSTREN write setSTREN;
    property STRICT : TBits_1 read getSTRICT write setSTRICT;
    property w : TBits_32 read getw write setw;
  end;
  TI2C3_I2C1ASTAT = record
  private
    function  getACKSTAT : TBits_1; assembler; nostackframe; inline;
    function  getADD10 : TBits_1; assembler; nostackframe; inline;
    function  getBCL : TBits_1; assembler; nostackframe; inline;
    function  getD_A : TBits_1; assembler; nostackframe; inline;
    function  getGCSTAT : TBits_1; assembler; nostackframe; inline;
    function  getI2COV : TBits_1; assembler; nostackframe; inline;
    function  getI2CPOV : TBits_1; assembler; nostackframe; inline;
    function  getIWCOL : TBits_1; assembler; nostackframe; inline;
    function  getP : TBits_1; assembler; nostackframe; inline;
    function  getRBF : TBits_1; assembler; nostackframe; inline;
    function  getR_W : TBits_1; assembler; nostackframe; inline;
    function  getS : TBits_1; assembler; nostackframe; inline;
    function  getTBF : TBits_1; assembler; nostackframe; inline;
    function  getTRSTAT : TBits_1; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setACKSTAT(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setADD10(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setBCL(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setD_A(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setGCSTAT(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setI2COV(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setI2CPOV(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setIWCOL(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setP(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRBF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setR_W(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setS(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTBF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTRSTAT(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearACKSTAT;
    procedure clearADD10;
    procedure clearBCL;
    procedure clearD_A;
    procedure clearGCSTAT;
    procedure clearI2COV;
    procedure clearI2CPOV;
    procedure clearIWCOL;
    procedure clearP;
    procedure clearRBF;
    procedure clearR_W;
    procedure clearS;
    procedure clearTBF;
    procedure clearTRSTAT;
    procedure setACKSTAT;
    procedure setADD10;
    procedure setBCL;
    procedure setD_A;
    procedure setGCSTAT;
    procedure setI2COV;
    procedure setI2CPOV;
    procedure setIWCOL;
    procedure setP;
    procedure setRBF;
    procedure setR_W;
    procedure setS;
    procedure setTBF;
    procedure setTRSTAT;
    property ACKSTAT : TBits_1 read getACKSTAT write setACKSTAT;
    property ADD10 : TBits_1 read getADD10 write setADD10;
    property BCL : TBits_1 read getBCL write setBCL;
    property D_A : TBits_1 read getD_A write setD_A;
    property GCSTAT : TBits_1 read getGCSTAT write setGCSTAT;
    property I2COV : TBits_1 read getI2COV write setI2COV;
    property I2CPOV : TBits_1 read getI2CPOV write setI2CPOV;
    property IWCOL : TBits_1 read getIWCOL write setIWCOL;
    property P : TBits_1 read getP write setP;
    property RBF : TBits_1 read getRBF write setRBF;
    property R_W : TBits_1 read getR_W write setR_W;
    property S : TBits_1 read getS write setS;
    property TBF : TBits_1 read getTBF write setTBF;
    property TRSTAT : TBits_1 read getTRSTAT write setTRSTAT;
    property w : TBits_32 read getw write setw;
  end;
  TI2C3_I2C3STAT = record
  private
    function  getACKSTAT : TBits_1; assembler; nostackframe; inline;
    function  getADD10 : TBits_1; assembler; nostackframe; inline;
    function  getBCL : TBits_1; assembler; nostackframe; inline;
    function  getD_A : TBits_1; assembler; nostackframe; inline;
    function  getGCSTAT : TBits_1; assembler; nostackframe; inline;
    function  getI2COV : TBits_1; assembler; nostackframe; inline;
    function  getI2CPOV : TBits_1; assembler; nostackframe; inline;
    function  getIWCOL : TBits_1; assembler; nostackframe; inline;
    function  getP : TBits_1; assembler; nostackframe; inline;
    function  getRBF : TBits_1; assembler; nostackframe; inline;
    function  getR_W : TBits_1; assembler; nostackframe; inline;
    function  getS : TBits_1; assembler; nostackframe; inline;
    function  getTBF : TBits_1; assembler; nostackframe; inline;
    function  getTRSTAT : TBits_1; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setACKSTAT(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setADD10(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setBCL(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setD_A(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setGCSTAT(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setI2COV(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setI2CPOV(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setIWCOL(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setP(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRBF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setR_W(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setS(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTBF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTRSTAT(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearACKSTAT;
    procedure clearADD10;
    procedure clearBCL;
    procedure clearD_A;
    procedure clearGCSTAT;
    procedure clearI2COV;
    procedure clearI2CPOV;
    procedure clearIWCOL;
    procedure clearP;
    procedure clearRBF;
    procedure clearR_W;
    procedure clearS;
    procedure clearTBF;
    procedure clearTRSTAT;
    procedure setACKSTAT;
    procedure setADD10;
    procedure setBCL;
    procedure setD_A;
    procedure setGCSTAT;
    procedure setI2COV;
    procedure setI2CPOV;
    procedure setIWCOL;
    procedure setP;
    procedure setRBF;
    procedure setR_W;
    procedure setS;
    procedure setTBF;
    procedure setTRSTAT;
    property ACKSTAT : TBits_1 read getACKSTAT write setACKSTAT;
    property ADD10 : TBits_1 read getADD10 write setADD10;
    property BCL : TBits_1 read getBCL write setBCL;
    property D_A : TBits_1 read getD_A write setD_A;
    property GCSTAT : TBits_1 read getGCSTAT write setGCSTAT;
    property I2COV : TBits_1 read getI2COV write setI2COV;
    property I2CPOV : TBits_1 read getI2CPOV write setI2CPOV;
    property IWCOL : TBits_1 read getIWCOL write setIWCOL;
    property P : TBits_1 read getP write setP;
    property RBF : TBits_1 read getRBF write setRBF;
    property R_W : TBits_1 read getR_W write setR_W;
    property S : TBits_1 read getS write setS;
    property TBF : TBits_1 read getTBF write setTBF;
    property TRSTAT : TBits_1 read getTRSTAT write setTRSTAT;
    property w : TBits_32 read getw write setw;
  end;
type
  TI2C3Registers = record
    I2C1ACONbits : TI2C3_I2C1ACON;
    I2C1ACON : longWord;
    I2C3CONbits : TI2C3_I2C3CON;
    I2C3CON : longWord;
    I2C1ACONCLR : longWord;
    I2C3CONCLR : longWord;
    I2C1ACONSET : longWord;
    I2C3CONSET : longWord;
    I2C1ACONINV : longWord;
    I2C3CONINV : longWord;
    I2C1ASTATbits : TI2C3_I2C1ASTAT;
    I2C1ASTAT : longWord;
    I2C3STATbits : TI2C3_I2C3STAT;
    I2C3STAT : longWord;
    I2C1ASTATCLR : longWord;
    I2C3STATCLR : longWord;
    I2C1ASTATSET : longWord;
    I2C3STATSET : longWord;
    I2C1ASTATINV : longWord;
    I2C3STATINV : longWord;
    I2C1AADD : longWord;
    I2C3ADD : longWord;
    I2C1AADDCLR : longWord;
    I2C3ADDCLR : longWord;
    I2C1AADDSET : longWord;
    I2C3ADDSET : longWord;
    I2C1AADDINV : longWord;
    I2C3ADDINV : longWord;
    I2C1AMSK : longWord;
    I2C3MSK : longWord;
    I2C1AMSKCLR : longWord;
    I2C3MSKCLR : longWord;
    I2C1AMSKSET : longWord;
    I2C3MSKSET : longWord;
    I2C1AMSKINV : longWord;
    I2C3MSKINV : longWord;
    I2C1ABRG : longWord;
    I2C3BRG : longWord;
    I2C1ABRGCLR : longWord;
    I2C3BRGCLR : longWord;
    I2C1ABRGSET : longWord;
    I2C3BRGSET : longWord;
    I2C1ABRGINV : longWord;
    I2C3BRGINV : longWord;
    I2C1ATRN : longWord;
    I2C3TRN : longWord;
    I2C1ATRNCLR : longWord;
    I2C3TRNCLR : longWord;
    I2C1ATRNSET : longWord;
    I2C3TRNSET : longWord;
    I2C1ATRNINV : longWord;
    I2C3TRNINV : longWord;
    I2C1ARCV : longWord;
    I2C3RCV : longWord;
  end;
  TI2C4_I2C2ACON = record
  private
    function  getA10M : TBits_1; assembler; nostackframe; inline;
    function  getACKDT : TBits_1; assembler; nostackframe; inline;
    function  getACKEN : TBits_1; assembler; nostackframe; inline;
    function  getDISSLW : TBits_1; assembler; nostackframe; inline;
    function  getGCEN : TBits_1; assembler; nostackframe; inline;
    function  getI2CEN : TBits_1; assembler; nostackframe; inline;
    function  getI2CSIDL : TBits_1; assembler; nostackframe; inline;
    function  getIPMIEN : TBits_1; assembler; nostackframe; inline;
    function  getON : TBits_1; assembler; nostackframe; inline;
    function  getPEN : TBits_1; assembler; nostackframe; inline;
    function  getRCEN : TBits_1; assembler; nostackframe; inline;
    function  getRSEN : TBits_1; assembler; nostackframe; inline;
    function  getSCLREL : TBits_1; assembler; nostackframe; inline;
    function  getSEN : TBits_1; assembler; nostackframe; inline;
    function  getSIDL : TBits_1; assembler; nostackframe; inline;
    function  getSMEN : TBits_1; assembler; nostackframe; inline;
    function  getSTREN : TBits_1; assembler; nostackframe; inline;
    function  getSTRICT : TBits_1; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setA10M(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setACKDT(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setACKEN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setDISSLW(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setGCEN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setI2CEN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setI2CSIDL(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setIPMIEN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setON(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setPEN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRCEN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRSEN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSCLREL(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSEN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSIDL(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSMEN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSTREN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSTRICT(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearA10M;
    procedure clearACKDT;
    procedure clearACKEN;
    procedure clearDISSLW;
    procedure clearGCEN;
    procedure clearI2CEN;
    procedure clearI2CSIDL;
    procedure clearIPMIEN;
    procedure clearON;
    procedure clearPEN;
    procedure clearRCEN;
    procedure clearRSEN;
    procedure clearSCLREL;
    procedure clearSEN;
    procedure clearSIDL;
    procedure clearSMEN;
    procedure clearSTREN;
    procedure clearSTRICT;
    procedure setA10M;
    procedure setACKDT;
    procedure setACKEN;
    procedure setDISSLW;
    procedure setGCEN;
    procedure setI2CEN;
    procedure setI2CSIDL;
    procedure setIPMIEN;
    procedure setON;
    procedure setPEN;
    procedure setRCEN;
    procedure setRSEN;
    procedure setSCLREL;
    procedure setSEN;
    procedure setSIDL;
    procedure setSMEN;
    procedure setSTREN;
    procedure setSTRICT;
    property A10M : TBits_1 read getA10M write setA10M;
    property ACKDT : TBits_1 read getACKDT write setACKDT;
    property ACKEN : TBits_1 read getACKEN write setACKEN;
    property DISSLW : TBits_1 read getDISSLW write setDISSLW;
    property GCEN : TBits_1 read getGCEN write setGCEN;
    property I2CEN : TBits_1 read getI2CEN write setI2CEN;
    property I2CSIDL : TBits_1 read getI2CSIDL write setI2CSIDL;
    property IPMIEN : TBits_1 read getIPMIEN write setIPMIEN;
    property ON : TBits_1 read getON write setON;
    property PEN : TBits_1 read getPEN write setPEN;
    property RCEN : TBits_1 read getRCEN write setRCEN;
    property RSEN : TBits_1 read getRSEN write setRSEN;
    property SCLREL : TBits_1 read getSCLREL write setSCLREL;
    property SEN : TBits_1 read getSEN write setSEN;
    property SIDL : TBits_1 read getSIDL write setSIDL;
    property SMEN : TBits_1 read getSMEN write setSMEN;
    property STREN : TBits_1 read getSTREN write setSTREN;
    property STRICT : TBits_1 read getSTRICT write setSTRICT;
    property w : TBits_32 read getw write setw;
  end;
  TI2C4_I2C4CON = record
  private
    function  getA10M : TBits_1; assembler; nostackframe; inline;
    function  getACKDT : TBits_1; assembler; nostackframe; inline;
    function  getACKEN : TBits_1; assembler; nostackframe; inline;
    function  getDISSLW : TBits_1; assembler; nostackframe; inline;
    function  getGCEN : TBits_1; assembler; nostackframe; inline;
    function  getI2CEN : TBits_1; assembler; nostackframe; inline;
    function  getI2CSIDL : TBits_1; assembler; nostackframe; inline;
    function  getIPMIEN : TBits_1; assembler; nostackframe; inline;
    function  getON : TBits_1; assembler; nostackframe; inline;
    function  getPEN : TBits_1; assembler; nostackframe; inline;
    function  getRCEN : TBits_1; assembler; nostackframe; inline;
    function  getRSEN : TBits_1; assembler; nostackframe; inline;
    function  getSCLREL : TBits_1; assembler; nostackframe; inline;
    function  getSEN : TBits_1; assembler; nostackframe; inline;
    function  getSIDL : TBits_1; assembler; nostackframe; inline;
    function  getSMEN : TBits_1; assembler; nostackframe; inline;
    function  getSTREN : TBits_1; assembler; nostackframe; inline;
    function  getSTRICT : TBits_1; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setA10M(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setACKDT(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setACKEN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setDISSLW(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setGCEN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setI2CEN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setI2CSIDL(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setIPMIEN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setON(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setPEN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRCEN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRSEN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSCLREL(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSEN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSIDL(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSMEN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSTREN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSTRICT(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearA10M;
    procedure clearACKDT;
    procedure clearACKEN;
    procedure clearDISSLW;
    procedure clearGCEN;
    procedure clearI2CEN;
    procedure clearI2CSIDL;
    procedure clearIPMIEN;
    procedure clearON;
    procedure clearPEN;
    procedure clearRCEN;
    procedure clearRSEN;
    procedure clearSCLREL;
    procedure clearSEN;
    procedure clearSIDL;
    procedure clearSMEN;
    procedure clearSTREN;
    procedure clearSTRICT;
    procedure setA10M;
    procedure setACKDT;
    procedure setACKEN;
    procedure setDISSLW;
    procedure setGCEN;
    procedure setI2CEN;
    procedure setI2CSIDL;
    procedure setIPMIEN;
    procedure setON;
    procedure setPEN;
    procedure setRCEN;
    procedure setRSEN;
    procedure setSCLREL;
    procedure setSEN;
    procedure setSIDL;
    procedure setSMEN;
    procedure setSTREN;
    procedure setSTRICT;
    property A10M : TBits_1 read getA10M write setA10M;
    property ACKDT : TBits_1 read getACKDT write setACKDT;
    property ACKEN : TBits_1 read getACKEN write setACKEN;
    property DISSLW : TBits_1 read getDISSLW write setDISSLW;
    property GCEN : TBits_1 read getGCEN write setGCEN;
    property I2CEN : TBits_1 read getI2CEN write setI2CEN;
    property I2CSIDL : TBits_1 read getI2CSIDL write setI2CSIDL;
    property IPMIEN : TBits_1 read getIPMIEN write setIPMIEN;
    property ON : TBits_1 read getON write setON;
    property PEN : TBits_1 read getPEN write setPEN;
    property RCEN : TBits_1 read getRCEN write setRCEN;
    property RSEN : TBits_1 read getRSEN write setRSEN;
    property SCLREL : TBits_1 read getSCLREL write setSCLREL;
    property SEN : TBits_1 read getSEN write setSEN;
    property SIDL : TBits_1 read getSIDL write setSIDL;
    property SMEN : TBits_1 read getSMEN write setSMEN;
    property STREN : TBits_1 read getSTREN write setSTREN;
    property STRICT : TBits_1 read getSTRICT write setSTRICT;
    property w : TBits_32 read getw write setw;
  end;
  TI2C4_I2C2ASTAT = record
  private
    function  getACKSTAT : TBits_1; assembler; nostackframe; inline;
    function  getADD10 : TBits_1; assembler; nostackframe; inline;
    function  getBCL : TBits_1; assembler; nostackframe; inline;
    function  getD_A : TBits_1; assembler; nostackframe; inline;
    function  getGCSTAT : TBits_1; assembler; nostackframe; inline;
    function  getI2COV : TBits_1; assembler; nostackframe; inline;
    function  getI2CPOV : TBits_1; assembler; nostackframe; inline;
    function  getIWCOL : TBits_1; assembler; nostackframe; inline;
    function  getP : TBits_1; assembler; nostackframe; inline;
    function  getRBF : TBits_1; assembler; nostackframe; inline;
    function  getR_W : TBits_1; assembler; nostackframe; inline;
    function  getS : TBits_1; assembler; nostackframe; inline;
    function  getTBF : TBits_1; assembler; nostackframe; inline;
    function  getTRSTAT : TBits_1; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setACKSTAT(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setADD10(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setBCL(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setD_A(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setGCSTAT(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setI2COV(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setI2CPOV(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setIWCOL(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setP(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRBF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setR_W(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setS(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTBF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTRSTAT(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearACKSTAT;
    procedure clearADD10;
    procedure clearBCL;
    procedure clearD_A;
    procedure clearGCSTAT;
    procedure clearI2COV;
    procedure clearI2CPOV;
    procedure clearIWCOL;
    procedure clearP;
    procedure clearRBF;
    procedure clearR_W;
    procedure clearS;
    procedure clearTBF;
    procedure clearTRSTAT;
    procedure setACKSTAT;
    procedure setADD10;
    procedure setBCL;
    procedure setD_A;
    procedure setGCSTAT;
    procedure setI2COV;
    procedure setI2CPOV;
    procedure setIWCOL;
    procedure setP;
    procedure setRBF;
    procedure setR_W;
    procedure setS;
    procedure setTBF;
    procedure setTRSTAT;
    property ACKSTAT : TBits_1 read getACKSTAT write setACKSTAT;
    property ADD10 : TBits_1 read getADD10 write setADD10;
    property BCL : TBits_1 read getBCL write setBCL;
    property D_A : TBits_1 read getD_A write setD_A;
    property GCSTAT : TBits_1 read getGCSTAT write setGCSTAT;
    property I2COV : TBits_1 read getI2COV write setI2COV;
    property I2CPOV : TBits_1 read getI2CPOV write setI2CPOV;
    property IWCOL : TBits_1 read getIWCOL write setIWCOL;
    property P : TBits_1 read getP write setP;
    property RBF : TBits_1 read getRBF write setRBF;
    property R_W : TBits_1 read getR_W write setR_W;
    property S : TBits_1 read getS write setS;
    property TBF : TBits_1 read getTBF write setTBF;
    property TRSTAT : TBits_1 read getTRSTAT write setTRSTAT;
    property w : TBits_32 read getw write setw;
  end;
  TI2C4_I2C4STAT = record
  private
    function  getACKSTAT : TBits_1; assembler; nostackframe; inline;
    function  getADD10 : TBits_1; assembler; nostackframe; inline;
    function  getBCL : TBits_1; assembler; nostackframe; inline;
    function  getD_A : TBits_1; assembler; nostackframe; inline;
    function  getGCSTAT : TBits_1; assembler; nostackframe; inline;
    function  getI2COV : TBits_1; assembler; nostackframe; inline;
    function  getI2CPOV : TBits_1; assembler; nostackframe; inline;
    function  getIWCOL : TBits_1; assembler; nostackframe; inline;
    function  getP : TBits_1; assembler; nostackframe; inline;
    function  getRBF : TBits_1; assembler; nostackframe; inline;
    function  getR_W : TBits_1; assembler; nostackframe; inline;
    function  getS : TBits_1; assembler; nostackframe; inline;
    function  getTBF : TBits_1; assembler; nostackframe; inline;
    function  getTRSTAT : TBits_1; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setACKSTAT(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setADD10(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setBCL(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setD_A(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setGCSTAT(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setI2COV(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setI2CPOV(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setIWCOL(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setP(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRBF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setR_W(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setS(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTBF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTRSTAT(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearACKSTAT;
    procedure clearADD10;
    procedure clearBCL;
    procedure clearD_A;
    procedure clearGCSTAT;
    procedure clearI2COV;
    procedure clearI2CPOV;
    procedure clearIWCOL;
    procedure clearP;
    procedure clearRBF;
    procedure clearR_W;
    procedure clearS;
    procedure clearTBF;
    procedure clearTRSTAT;
    procedure setACKSTAT;
    procedure setADD10;
    procedure setBCL;
    procedure setD_A;
    procedure setGCSTAT;
    procedure setI2COV;
    procedure setI2CPOV;
    procedure setIWCOL;
    procedure setP;
    procedure setRBF;
    procedure setR_W;
    procedure setS;
    procedure setTBF;
    procedure setTRSTAT;
    property ACKSTAT : TBits_1 read getACKSTAT write setACKSTAT;
    property ADD10 : TBits_1 read getADD10 write setADD10;
    property BCL : TBits_1 read getBCL write setBCL;
    property D_A : TBits_1 read getD_A write setD_A;
    property GCSTAT : TBits_1 read getGCSTAT write setGCSTAT;
    property I2COV : TBits_1 read getI2COV write setI2COV;
    property I2CPOV : TBits_1 read getI2CPOV write setI2CPOV;
    property IWCOL : TBits_1 read getIWCOL write setIWCOL;
    property P : TBits_1 read getP write setP;
    property RBF : TBits_1 read getRBF write setRBF;
    property R_W : TBits_1 read getR_W write setR_W;
    property S : TBits_1 read getS write setS;
    property TBF : TBits_1 read getTBF write setTBF;
    property TRSTAT : TBits_1 read getTRSTAT write setTRSTAT;
    property w : TBits_32 read getw write setw;
  end;
type
  TI2C4Registers = record
    I2C2ACONbits : TI2C4_I2C2ACON;
    I2C2ACON : longWord;
    I2C4CONbits : TI2C4_I2C4CON;
    I2C4CON : longWord;
    I2C2ACONCLR : longWord;
    I2C4CONCLR : longWord;
    I2C2ACONSET : longWord;
    I2C4CONSET : longWord;
    I2C2ACONINV : longWord;
    I2C4CONINV : longWord;
    I2C2ASTATbits : TI2C4_I2C2ASTAT;
    I2C2ASTAT : longWord;
    I2C4STATbits : TI2C4_I2C4STAT;
    I2C4STAT : longWord;
    I2C2ASTATCLR : longWord;
    I2C4STATCLR : longWord;
    I2C2ASTATSET : longWord;
    I2C4STATSET : longWord;
    I2C2ASTATINV : longWord;
    I2C4STATINV : longWord;
    I2C2AADD : longWord;
    I2C4ADD : longWord;
    I2C2AADDCLR : longWord;
    I2C4ADDCLR : longWord;
    I2C2AADDSET : longWord;
    I2C4ADDSET : longWord;
    I2C2AADDINV : longWord;
    I2C4ADDINV : longWord;
    I2C2AMSK : longWord;
    I2C4MSK : longWord;
    I2C2AMSKCLR : longWord;
    I2C4MSKCLR : longWord;
    I2C2AMSKSET : longWord;
    I2C4MSKSET : longWord;
    I2C2AMSKINV : longWord;
    I2C4MSKINV : longWord;
    I2C2ABRG : longWord;
    I2C4BRG : longWord;
    I2C2ABRGCLR : longWord;
    I2C4BRGCLR : longWord;
    I2C2ABRGSET : longWord;
    I2C4BRGSET : longWord;
    I2C2ABRGINV : longWord;
    I2C4BRGINV : longWord;
    I2C2ATRN : longWord;
    I2C4TRN : longWord;
    I2C2ATRNCLR : longWord;
    I2C4TRNCLR : longWord;
    I2C2ATRNSET : longWord;
    I2C4TRNSET : longWord;
    I2C2ATRNINV : longWord;
    I2C4TRNINV : longWord;
    I2C2ARCV : longWord;
    I2C4RCV : longWord;
  end;
  TI2C5_I2C3ACON = record
  private
    function  getA10M : TBits_1; assembler; nostackframe; inline;
    function  getACKDT : TBits_1; assembler; nostackframe; inline;
    function  getACKEN : TBits_1; assembler; nostackframe; inline;
    function  getDISSLW : TBits_1; assembler; nostackframe; inline;
    function  getGCEN : TBits_1; assembler; nostackframe; inline;
    function  getI2CEN : TBits_1; assembler; nostackframe; inline;
    function  getI2CSIDL : TBits_1; assembler; nostackframe; inline;
    function  getIPMIEN : TBits_1; assembler; nostackframe; inline;
    function  getON : TBits_1; assembler; nostackframe; inline;
    function  getPEN : TBits_1; assembler; nostackframe; inline;
    function  getRCEN : TBits_1; assembler; nostackframe; inline;
    function  getRSEN : TBits_1; assembler; nostackframe; inline;
    function  getSCLREL : TBits_1; assembler; nostackframe; inline;
    function  getSEN : TBits_1; assembler; nostackframe; inline;
    function  getSIDL : TBits_1; assembler; nostackframe; inline;
    function  getSMEN : TBits_1; assembler; nostackframe; inline;
    function  getSTREN : TBits_1; assembler; nostackframe; inline;
    function  getSTRICT : TBits_1; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setA10M(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setACKDT(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setACKEN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setDISSLW(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setGCEN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setI2CEN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setI2CSIDL(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setIPMIEN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setON(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setPEN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRCEN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRSEN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSCLREL(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSEN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSIDL(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSMEN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSTREN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSTRICT(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearA10M;
    procedure clearACKDT;
    procedure clearACKEN;
    procedure clearDISSLW;
    procedure clearGCEN;
    procedure clearI2CEN;
    procedure clearI2CSIDL;
    procedure clearIPMIEN;
    procedure clearON;
    procedure clearPEN;
    procedure clearRCEN;
    procedure clearRSEN;
    procedure clearSCLREL;
    procedure clearSEN;
    procedure clearSIDL;
    procedure clearSMEN;
    procedure clearSTREN;
    procedure clearSTRICT;
    procedure setA10M;
    procedure setACKDT;
    procedure setACKEN;
    procedure setDISSLW;
    procedure setGCEN;
    procedure setI2CEN;
    procedure setI2CSIDL;
    procedure setIPMIEN;
    procedure setON;
    procedure setPEN;
    procedure setRCEN;
    procedure setRSEN;
    procedure setSCLREL;
    procedure setSEN;
    procedure setSIDL;
    procedure setSMEN;
    procedure setSTREN;
    procedure setSTRICT;
    property A10M : TBits_1 read getA10M write setA10M;
    property ACKDT : TBits_1 read getACKDT write setACKDT;
    property ACKEN : TBits_1 read getACKEN write setACKEN;
    property DISSLW : TBits_1 read getDISSLW write setDISSLW;
    property GCEN : TBits_1 read getGCEN write setGCEN;
    property I2CEN : TBits_1 read getI2CEN write setI2CEN;
    property I2CSIDL : TBits_1 read getI2CSIDL write setI2CSIDL;
    property IPMIEN : TBits_1 read getIPMIEN write setIPMIEN;
    property ON : TBits_1 read getON write setON;
    property PEN : TBits_1 read getPEN write setPEN;
    property RCEN : TBits_1 read getRCEN write setRCEN;
    property RSEN : TBits_1 read getRSEN write setRSEN;
    property SCLREL : TBits_1 read getSCLREL write setSCLREL;
    property SEN : TBits_1 read getSEN write setSEN;
    property SIDL : TBits_1 read getSIDL write setSIDL;
    property SMEN : TBits_1 read getSMEN write setSMEN;
    property STREN : TBits_1 read getSTREN write setSTREN;
    property STRICT : TBits_1 read getSTRICT write setSTRICT;
    property w : TBits_32 read getw write setw;
  end;
  TI2C5_I2C5CON = record
  private
    function  getA10M : TBits_1; assembler; nostackframe; inline;
    function  getACKDT : TBits_1; assembler; nostackframe; inline;
    function  getACKEN : TBits_1; assembler; nostackframe; inline;
    function  getDISSLW : TBits_1; assembler; nostackframe; inline;
    function  getGCEN : TBits_1; assembler; nostackframe; inline;
    function  getI2CEN : TBits_1; assembler; nostackframe; inline;
    function  getI2CSIDL : TBits_1; assembler; nostackframe; inline;
    function  getIPMIEN : TBits_1; assembler; nostackframe; inline;
    function  getON : TBits_1; assembler; nostackframe; inline;
    function  getPEN : TBits_1; assembler; nostackframe; inline;
    function  getRCEN : TBits_1; assembler; nostackframe; inline;
    function  getRSEN : TBits_1; assembler; nostackframe; inline;
    function  getSCLREL : TBits_1; assembler; nostackframe; inline;
    function  getSEN : TBits_1; assembler; nostackframe; inline;
    function  getSIDL : TBits_1; assembler; nostackframe; inline;
    function  getSMEN : TBits_1; assembler; nostackframe; inline;
    function  getSTREN : TBits_1; assembler; nostackframe; inline;
    function  getSTRICT : TBits_1; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setA10M(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setACKDT(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setACKEN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setDISSLW(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setGCEN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setI2CEN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setI2CSIDL(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setIPMIEN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setON(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setPEN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRCEN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRSEN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSCLREL(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSEN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSIDL(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSMEN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSTREN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSTRICT(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearA10M;
    procedure clearACKDT;
    procedure clearACKEN;
    procedure clearDISSLW;
    procedure clearGCEN;
    procedure clearI2CEN;
    procedure clearI2CSIDL;
    procedure clearIPMIEN;
    procedure clearON;
    procedure clearPEN;
    procedure clearRCEN;
    procedure clearRSEN;
    procedure clearSCLREL;
    procedure clearSEN;
    procedure clearSIDL;
    procedure clearSMEN;
    procedure clearSTREN;
    procedure clearSTRICT;
    procedure setA10M;
    procedure setACKDT;
    procedure setACKEN;
    procedure setDISSLW;
    procedure setGCEN;
    procedure setI2CEN;
    procedure setI2CSIDL;
    procedure setIPMIEN;
    procedure setON;
    procedure setPEN;
    procedure setRCEN;
    procedure setRSEN;
    procedure setSCLREL;
    procedure setSEN;
    procedure setSIDL;
    procedure setSMEN;
    procedure setSTREN;
    procedure setSTRICT;
    property A10M : TBits_1 read getA10M write setA10M;
    property ACKDT : TBits_1 read getACKDT write setACKDT;
    property ACKEN : TBits_1 read getACKEN write setACKEN;
    property DISSLW : TBits_1 read getDISSLW write setDISSLW;
    property GCEN : TBits_1 read getGCEN write setGCEN;
    property I2CEN : TBits_1 read getI2CEN write setI2CEN;
    property I2CSIDL : TBits_1 read getI2CSIDL write setI2CSIDL;
    property IPMIEN : TBits_1 read getIPMIEN write setIPMIEN;
    property ON : TBits_1 read getON write setON;
    property PEN : TBits_1 read getPEN write setPEN;
    property RCEN : TBits_1 read getRCEN write setRCEN;
    property RSEN : TBits_1 read getRSEN write setRSEN;
    property SCLREL : TBits_1 read getSCLREL write setSCLREL;
    property SEN : TBits_1 read getSEN write setSEN;
    property SIDL : TBits_1 read getSIDL write setSIDL;
    property SMEN : TBits_1 read getSMEN write setSMEN;
    property STREN : TBits_1 read getSTREN write setSTREN;
    property STRICT : TBits_1 read getSTRICT write setSTRICT;
    property w : TBits_32 read getw write setw;
  end;
  TI2C5_I2C3ASTAT = record
  private
    function  getACKSTAT : TBits_1; assembler; nostackframe; inline;
    function  getADD10 : TBits_1; assembler; nostackframe; inline;
    function  getBCL : TBits_1; assembler; nostackframe; inline;
    function  getD_A : TBits_1; assembler; nostackframe; inline;
    function  getGCSTAT : TBits_1; assembler; nostackframe; inline;
    function  getI2COV : TBits_1; assembler; nostackframe; inline;
    function  getI2CPOV : TBits_1; assembler; nostackframe; inline;
    function  getIWCOL : TBits_1; assembler; nostackframe; inline;
    function  getP : TBits_1; assembler; nostackframe; inline;
    function  getRBF : TBits_1; assembler; nostackframe; inline;
    function  getR_W : TBits_1; assembler; nostackframe; inline;
    function  getS : TBits_1; assembler; nostackframe; inline;
    function  getTBF : TBits_1; assembler; nostackframe; inline;
    function  getTRSTAT : TBits_1; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setACKSTAT(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setADD10(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setBCL(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setD_A(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setGCSTAT(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setI2COV(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setI2CPOV(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setIWCOL(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setP(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRBF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setR_W(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setS(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTBF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTRSTAT(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearACKSTAT;
    procedure clearADD10;
    procedure clearBCL;
    procedure clearD_A;
    procedure clearGCSTAT;
    procedure clearI2COV;
    procedure clearI2CPOV;
    procedure clearIWCOL;
    procedure clearP;
    procedure clearRBF;
    procedure clearR_W;
    procedure clearS;
    procedure clearTBF;
    procedure clearTRSTAT;
    procedure setACKSTAT;
    procedure setADD10;
    procedure setBCL;
    procedure setD_A;
    procedure setGCSTAT;
    procedure setI2COV;
    procedure setI2CPOV;
    procedure setIWCOL;
    procedure setP;
    procedure setRBF;
    procedure setR_W;
    procedure setS;
    procedure setTBF;
    procedure setTRSTAT;
    property ACKSTAT : TBits_1 read getACKSTAT write setACKSTAT;
    property ADD10 : TBits_1 read getADD10 write setADD10;
    property BCL : TBits_1 read getBCL write setBCL;
    property D_A : TBits_1 read getD_A write setD_A;
    property GCSTAT : TBits_1 read getGCSTAT write setGCSTAT;
    property I2COV : TBits_1 read getI2COV write setI2COV;
    property I2CPOV : TBits_1 read getI2CPOV write setI2CPOV;
    property IWCOL : TBits_1 read getIWCOL write setIWCOL;
    property P : TBits_1 read getP write setP;
    property RBF : TBits_1 read getRBF write setRBF;
    property R_W : TBits_1 read getR_W write setR_W;
    property S : TBits_1 read getS write setS;
    property TBF : TBits_1 read getTBF write setTBF;
    property TRSTAT : TBits_1 read getTRSTAT write setTRSTAT;
    property w : TBits_32 read getw write setw;
  end;
  TI2C5_I2C5STAT = record
  private
    function  getACKSTAT : TBits_1; assembler; nostackframe; inline;
    function  getADD10 : TBits_1; assembler; nostackframe; inline;
    function  getBCL : TBits_1; assembler; nostackframe; inline;
    function  getD_A : TBits_1; assembler; nostackframe; inline;
    function  getGCSTAT : TBits_1; assembler; nostackframe; inline;
    function  getI2COV : TBits_1; assembler; nostackframe; inline;
    function  getI2CPOV : TBits_1; assembler; nostackframe; inline;
    function  getIWCOL : TBits_1; assembler; nostackframe; inline;
    function  getP : TBits_1; assembler; nostackframe; inline;
    function  getRBF : TBits_1; assembler; nostackframe; inline;
    function  getR_W : TBits_1; assembler; nostackframe; inline;
    function  getS : TBits_1; assembler; nostackframe; inline;
    function  getTBF : TBits_1; assembler; nostackframe; inline;
    function  getTRSTAT : TBits_1; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setACKSTAT(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setADD10(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setBCL(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setD_A(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setGCSTAT(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setI2COV(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setI2CPOV(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setIWCOL(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setP(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRBF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setR_W(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setS(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTBF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTRSTAT(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearACKSTAT;
    procedure clearADD10;
    procedure clearBCL;
    procedure clearD_A;
    procedure clearGCSTAT;
    procedure clearI2COV;
    procedure clearI2CPOV;
    procedure clearIWCOL;
    procedure clearP;
    procedure clearRBF;
    procedure clearR_W;
    procedure clearS;
    procedure clearTBF;
    procedure clearTRSTAT;
    procedure setACKSTAT;
    procedure setADD10;
    procedure setBCL;
    procedure setD_A;
    procedure setGCSTAT;
    procedure setI2COV;
    procedure setI2CPOV;
    procedure setIWCOL;
    procedure setP;
    procedure setRBF;
    procedure setR_W;
    procedure setS;
    procedure setTBF;
    procedure setTRSTAT;
    property ACKSTAT : TBits_1 read getACKSTAT write setACKSTAT;
    property ADD10 : TBits_1 read getADD10 write setADD10;
    property BCL : TBits_1 read getBCL write setBCL;
    property D_A : TBits_1 read getD_A write setD_A;
    property GCSTAT : TBits_1 read getGCSTAT write setGCSTAT;
    property I2COV : TBits_1 read getI2COV write setI2COV;
    property I2CPOV : TBits_1 read getI2CPOV write setI2CPOV;
    property IWCOL : TBits_1 read getIWCOL write setIWCOL;
    property P : TBits_1 read getP write setP;
    property RBF : TBits_1 read getRBF write setRBF;
    property R_W : TBits_1 read getR_W write setR_W;
    property S : TBits_1 read getS write setS;
    property TBF : TBits_1 read getTBF write setTBF;
    property TRSTAT : TBits_1 read getTRSTAT write setTRSTAT;
    property w : TBits_32 read getw write setw;
  end;
type
  TI2C5Registers = record
    I2C3ACONbits : TI2C5_I2C3ACON;
    I2C3ACON : longWord;
    I2C5CONbits : TI2C5_I2C5CON;
    I2C5CON : longWord;
    I2C3ACONCLR : longWord;
    I2C5CONCLR : longWord;
    I2C3ACONSET : longWord;
    I2C5CONSET : longWord;
    I2C3ACONINV : longWord;
    I2C5CONINV : longWord;
    I2C3ASTATbits : TI2C5_I2C3ASTAT;
    I2C3ASTAT : longWord;
    I2C5STATbits : TI2C5_I2C5STAT;
    I2C5STAT : longWord;
    I2C3ASTATCLR : longWord;
    I2C5STATCLR : longWord;
    I2C3ASTATSET : longWord;
    I2C5STATSET : longWord;
    I2C3ASTATINV : longWord;
    I2C5STATINV : longWord;
    I2C3AADD : longWord;
    I2C5ADD : longWord;
    I2C3AADDCLR : longWord;
    I2C5ADDCLR : longWord;
    I2C3AADDSET : longWord;
    I2C5ADDSET : longWord;
    I2C3AADDINV : longWord;
    I2C5ADDINV : longWord;
    I2C3AMSK : longWord;
    I2C5MSK : longWord;
    I2C3AMSKCLR : longWord;
    I2C5MSKCLR : longWord;
    I2C3AMSKSET : longWord;
    I2C5MSKSET : longWord;
    I2C3AMSKINV : longWord;
    I2C5MSKINV : longWord;
    I2C3ABRG : longWord;
    I2C5BRG : longWord;
    I2C3ABRGCLR : longWord;
    I2C5BRGCLR : longWord;
    I2C3ABRGSET : longWord;
    I2C5BRGSET : longWord;
    I2C3ABRGINV : longWord;
    I2C5BRGINV : longWord;
    I2C3ATRN : longWord;
    I2C5TRN : longWord;
    I2C3ATRNCLR : longWord;
    I2C5TRNCLR : longWord;
    I2C3ATRNSET : longWord;
    I2C5TRNSET : longWord;
    I2C3ATRNINV : longWord;
    I2C5TRNINV : longWord;
    I2C3ARCV : longWord;
    I2C5RCV : longWord;
  end;
  TI2C1_I2C1CON = record
  private
    function  getA10M : TBits_1; assembler; nostackframe; inline;
    function  getACKDT : TBits_1; assembler; nostackframe; inline;
    function  getACKEN : TBits_1; assembler; nostackframe; inline;
    function  getDISSLW : TBits_1; assembler; nostackframe; inline;
    function  getGCEN : TBits_1; assembler; nostackframe; inline;
    function  getI2CEN : TBits_1; assembler; nostackframe; inline;
    function  getI2CSIDL : TBits_1; assembler; nostackframe; inline;
    function  getIPMIEN : TBits_1; assembler; nostackframe; inline;
    function  getON : TBits_1; assembler; nostackframe; inline;
    function  getPEN : TBits_1; assembler; nostackframe; inline;
    function  getRCEN : TBits_1; assembler; nostackframe; inline;
    function  getRSEN : TBits_1; assembler; nostackframe; inline;
    function  getSCLREL : TBits_1; assembler; nostackframe; inline;
    function  getSEN : TBits_1; assembler; nostackframe; inline;
    function  getSIDL : TBits_1; assembler; nostackframe; inline;
    function  getSMEN : TBits_1; assembler; nostackframe; inline;
    function  getSTREN : TBits_1; assembler; nostackframe; inline;
    function  getSTRICT : TBits_1; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setA10M(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setACKDT(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setACKEN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setDISSLW(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setGCEN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setI2CEN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setI2CSIDL(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setIPMIEN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setON(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setPEN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRCEN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRSEN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSCLREL(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSEN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSIDL(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSMEN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSTREN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSTRICT(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearA10M;
    procedure clearACKDT;
    procedure clearACKEN;
    procedure clearDISSLW;
    procedure clearGCEN;
    procedure clearI2CEN;
    procedure clearI2CSIDL;
    procedure clearIPMIEN;
    procedure clearON;
    procedure clearPEN;
    procedure clearRCEN;
    procedure clearRSEN;
    procedure clearSCLREL;
    procedure clearSEN;
    procedure clearSIDL;
    procedure clearSMEN;
    procedure clearSTREN;
    procedure clearSTRICT;
    procedure setA10M;
    procedure setACKDT;
    procedure setACKEN;
    procedure setDISSLW;
    procedure setGCEN;
    procedure setI2CEN;
    procedure setI2CSIDL;
    procedure setIPMIEN;
    procedure setON;
    procedure setPEN;
    procedure setRCEN;
    procedure setRSEN;
    procedure setSCLREL;
    procedure setSEN;
    procedure setSIDL;
    procedure setSMEN;
    procedure setSTREN;
    procedure setSTRICT;
    property A10M : TBits_1 read getA10M write setA10M;
    property ACKDT : TBits_1 read getACKDT write setACKDT;
    property ACKEN : TBits_1 read getACKEN write setACKEN;
    property DISSLW : TBits_1 read getDISSLW write setDISSLW;
    property GCEN : TBits_1 read getGCEN write setGCEN;
    property I2CEN : TBits_1 read getI2CEN write setI2CEN;
    property I2CSIDL : TBits_1 read getI2CSIDL write setI2CSIDL;
    property IPMIEN : TBits_1 read getIPMIEN write setIPMIEN;
    property ON : TBits_1 read getON write setON;
    property PEN : TBits_1 read getPEN write setPEN;
    property RCEN : TBits_1 read getRCEN write setRCEN;
    property RSEN : TBits_1 read getRSEN write setRSEN;
    property SCLREL : TBits_1 read getSCLREL write setSCLREL;
    property SEN : TBits_1 read getSEN write setSEN;
    property SIDL : TBits_1 read getSIDL write setSIDL;
    property SMEN : TBits_1 read getSMEN write setSMEN;
    property STREN : TBits_1 read getSTREN write setSTREN;
    property STRICT : TBits_1 read getSTRICT write setSTRICT;
    property w : TBits_32 read getw write setw;
  end;
  TI2C1_I2C1STAT = record
  private
    function  getACKSTAT : TBits_1; assembler; nostackframe; inline;
    function  getADD10 : TBits_1; assembler; nostackframe; inline;
    function  getBCL : TBits_1; assembler; nostackframe; inline;
    function  getD_A : TBits_1; assembler; nostackframe; inline;
    function  getGCSTAT : TBits_1; assembler; nostackframe; inline;
    function  getI2COV : TBits_1; assembler; nostackframe; inline;
    function  getI2CPOV : TBits_1; assembler; nostackframe; inline;
    function  getIWCOL : TBits_1; assembler; nostackframe; inline;
    function  getP : TBits_1; assembler; nostackframe; inline;
    function  getRBF : TBits_1; assembler; nostackframe; inline;
    function  getR_W : TBits_1; assembler; nostackframe; inline;
    function  getS : TBits_1; assembler; nostackframe; inline;
    function  getTBF : TBits_1; assembler; nostackframe; inline;
    function  getTRSTAT : TBits_1; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setACKSTAT(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setADD10(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setBCL(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setD_A(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setGCSTAT(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setI2COV(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setI2CPOV(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setIWCOL(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setP(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRBF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setR_W(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setS(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTBF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTRSTAT(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearACKSTAT;
    procedure clearADD10;
    procedure clearBCL;
    procedure clearD_A;
    procedure clearGCSTAT;
    procedure clearI2COV;
    procedure clearI2CPOV;
    procedure clearIWCOL;
    procedure clearP;
    procedure clearRBF;
    procedure clearR_W;
    procedure clearS;
    procedure clearTBF;
    procedure clearTRSTAT;
    procedure setACKSTAT;
    procedure setADD10;
    procedure setBCL;
    procedure setD_A;
    procedure setGCSTAT;
    procedure setI2COV;
    procedure setI2CPOV;
    procedure setIWCOL;
    procedure setP;
    procedure setRBF;
    procedure setR_W;
    procedure setS;
    procedure setTBF;
    procedure setTRSTAT;
    property ACKSTAT : TBits_1 read getACKSTAT write setACKSTAT;
    property ADD10 : TBits_1 read getADD10 write setADD10;
    property BCL : TBits_1 read getBCL write setBCL;
    property D_A : TBits_1 read getD_A write setD_A;
    property GCSTAT : TBits_1 read getGCSTAT write setGCSTAT;
    property I2COV : TBits_1 read getI2COV write setI2COV;
    property I2CPOV : TBits_1 read getI2CPOV write setI2CPOV;
    property IWCOL : TBits_1 read getIWCOL write setIWCOL;
    property P : TBits_1 read getP write setP;
    property RBF : TBits_1 read getRBF write setRBF;
    property R_W : TBits_1 read getR_W write setR_W;
    property S : TBits_1 read getS write setS;
    property TBF : TBits_1 read getTBF write setTBF;
    property TRSTAT : TBits_1 read getTRSTAT write setTRSTAT;
    property w : TBits_32 read getw write setw;
  end;
type
  TI2C1Registers = record
    I2C1CONbits : TI2C1_I2C1CON;
    I2C1CON : longWord;
    I2C1CONCLR : longWord;
    I2C1CONSET : longWord;
    I2C1CONINV : longWord;
    I2C1STATbits : TI2C1_I2C1STAT;
    I2C1STAT : longWord;
    I2C1STATCLR : longWord;
    I2C1STATSET : longWord;
    I2C1STATINV : longWord;
    I2C1ADD : longWord;
    I2C1ADDCLR : longWord;
    I2C1ADDSET : longWord;
    I2C1ADDINV : longWord;
    I2C1MSK : longWord;
    I2C1MSKCLR : longWord;
    I2C1MSKSET : longWord;
    I2C1MSKINV : longWord;
    I2C1BRG : longWord;
    I2C1BRGCLR : longWord;
    I2C1BRGSET : longWord;
    I2C1BRGINV : longWord;
    I2C1TRN : longWord;
    I2C1TRNCLR : longWord;
    I2C1TRNSET : longWord;
    I2C1TRNINV : longWord;
    I2C1RCV : longWord;
  end;
  TI2C2_I2C2CON = record
  private
    function  getA10M : TBits_1; assembler; nostackframe; inline;
    function  getACKDT : TBits_1; assembler; nostackframe; inline;
    function  getACKEN : TBits_1; assembler; nostackframe; inline;
    function  getDISSLW : TBits_1; assembler; nostackframe; inline;
    function  getGCEN : TBits_1; assembler; nostackframe; inline;
    function  getI2CEN : TBits_1; assembler; nostackframe; inline;
    function  getI2CSIDL : TBits_1; assembler; nostackframe; inline;
    function  getIPMIEN : TBits_1; assembler; nostackframe; inline;
    function  getON : TBits_1; assembler; nostackframe; inline;
    function  getPEN : TBits_1; assembler; nostackframe; inline;
    function  getRCEN : TBits_1; assembler; nostackframe; inline;
    function  getRSEN : TBits_1; assembler; nostackframe; inline;
    function  getSCLREL : TBits_1; assembler; nostackframe; inline;
    function  getSEN : TBits_1; assembler; nostackframe; inline;
    function  getSIDL : TBits_1; assembler; nostackframe; inline;
    function  getSMEN : TBits_1; assembler; nostackframe; inline;
    function  getSTREN : TBits_1; assembler; nostackframe; inline;
    function  getSTRICT : TBits_1; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setA10M(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setACKDT(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setACKEN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setDISSLW(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setGCEN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setI2CEN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setI2CSIDL(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setIPMIEN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setON(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setPEN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRCEN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRSEN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSCLREL(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSEN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSIDL(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSMEN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSTREN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSTRICT(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearA10M;
    procedure clearACKDT;
    procedure clearACKEN;
    procedure clearDISSLW;
    procedure clearGCEN;
    procedure clearI2CEN;
    procedure clearI2CSIDL;
    procedure clearIPMIEN;
    procedure clearON;
    procedure clearPEN;
    procedure clearRCEN;
    procedure clearRSEN;
    procedure clearSCLREL;
    procedure clearSEN;
    procedure clearSIDL;
    procedure clearSMEN;
    procedure clearSTREN;
    procedure clearSTRICT;
    procedure setA10M;
    procedure setACKDT;
    procedure setACKEN;
    procedure setDISSLW;
    procedure setGCEN;
    procedure setI2CEN;
    procedure setI2CSIDL;
    procedure setIPMIEN;
    procedure setON;
    procedure setPEN;
    procedure setRCEN;
    procedure setRSEN;
    procedure setSCLREL;
    procedure setSEN;
    procedure setSIDL;
    procedure setSMEN;
    procedure setSTREN;
    procedure setSTRICT;
    property A10M : TBits_1 read getA10M write setA10M;
    property ACKDT : TBits_1 read getACKDT write setACKDT;
    property ACKEN : TBits_1 read getACKEN write setACKEN;
    property DISSLW : TBits_1 read getDISSLW write setDISSLW;
    property GCEN : TBits_1 read getGCEN write setGCEN;
    property I2CEN : TBits_1 read getI2CEN write setI2CEN;
    property I2CSIDL : TBits_1 read getI2CSIDL write setI2CSIDL;
    property IPMIEN : TBits_1 read getIPMIEN write setIPMIEN;
    property ON : TBits_1 read getON write setON;
    property PEN : TBits_1 read getPEN write setPEN;
    property RCEN : TBits_1 read getRCEN write setRCEN;
    property RSEN : TBits_1 read getRSEN write setRSEN;
    property SCLREL : TBits_1 read getSCLREL write setSCLREL;
    property SEN : TBits_1 read getSEN write setSEN;
    property SIDL : TBits_1 read getSIDL write setSIDL;
    property SMEN : TBits_1 read getSMEN write setSMEN;
    property STREN : TBits_1 read getSTREN write setSTREN;
    property STRICT : TBits_1 read getSTRICT write setSTRICT;
    property w : TBits_32 read getw write setw;
  end;
  TI2C2_I2C2STAT = record
  private
    function  getACKSTAT : TBits_1; assembler; nostackframe; inline;
    function  getADD10 : TBits_1; assembler; nostackframe; inline;
    function  getBCL : TBits_1; assembler; nostackframe; inline;
    function  getD_A : TBits_1; assembler; nostackframe; inline;
    function  getGCSTAT : TBits_1; assembler; nostackframe; inline;
    function  getI2COV : TBits_1; assembler; nostackframe; inline;
    function  getI2CPOV : TBits_1; assembler; nostackframe; inline;
    function  getIWCOL : TBits_1; assembler; nostackframe; inline;
    function  getP : TBits_1; assembler; nostackframe; inline;
    function  getRBF : TBits_1; assembler; nostackframe; inline;
    function  getR_W : TBits_1; assembler; nostackframe; inline;
    function  getS : TBits_1; assembler; nostackframe; inline;
    function  getTBF : TBits_1; assembler; nostackframe; inline;
    function  getTRSTAT : TBits_1; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setACKSTAT(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setADD10(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setBCL(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setD_A(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setGCSTAT(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setI2COV(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setI2CPOV(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setIWCOL(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setP(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRBF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setR_W(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setS(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTBF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTRSTAT(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearACKSTAT;
    procedure clearADD10;
    procedure clearBCL;
    procedure clearD_A;
    procedure clearGCSTAT;
    procedure clearI2COV;
    procedure clearI2CPOV;
    procedure clearIWCOL;
    procedure clearP;
    procedure clearRBF;
    procedure clearR_W;
    procedure clearS;
    procedure clearTBF;
    procedure clearTRSTAT;
    procedure setACKSTAT;
    procedure setADD10;
    procedure setBCL;
    procedure setD_A;
    procedure setGCSTAT;
    procedure setI2COV;
    procedure setI2CPOV;
    procedure setIWCOL;
    procedure setP;
    procedure setRBF;
    procedure setR_W;
    procedure setS;
    procedure setTBF;
    procedure setTRSTAT;
    property ACKSTAT : TBits_1 read getACKSTAT write setACKSTAT;
    property ADD10 : TBits_1 read getADD10 write setADD10;
    property BCL : TBits_1 read getBCL write setBCL;
    property D_A : TBits_1 read getD_A write setD_A;
    property GCSTAT : TBits_1 read getGCSTAT write setGCSTAT;
    property I2COV : TBits_1 read getI2COV write setI2COV;
    property I2CPOV : TBits_1 read getI2CPOV write setI2CPOV;
    property IWCOL : TBits_1 read getIWCOL write setIWCOL;
    property P : TBits_1 read getP write setP;
    property RBF : TBits_1 read getRBF write setRBF;
    property R_W : TBits_1 read getR_W write setR_W;
    property S : TBits_1 read getS write setS;
    property TBF : TBits_1 read getTBF write setTBF;
    property TRSTAT : TBits_1 read getTRSTAT write setTRSTAT;
    property w : TBits_32 read getw write setw;
  end;
type
  TI2C2Registers = record
    I2C2CONbits : TI2C2_I2C2CON;
    I2C2CON : longWord;
    I2C2CONCLR : longWord;
    I2C2CONSET : longWord;
    I2C2CONINV : longWord;
    I2C2STATbits : TI2C2_I2C2STAT;
    I2C2STAT : longWord;
    I2C2STATCLR : longWord;
    I2C2STATSET : longWord;
    I2C2STATINV : longWord;
    I2C2ADD : longWord;
    I2C2ADDCLR : longWord;
    I2C2ADDSET : longWord;
    I2C2ADDINV : longWord;
    I2C2MSK : longWord;
    I2C2MSKCLR : longWord;
    I2C2MSKSET : longWord;
    I2C2MSKINV : longWord;
    I2C2BRG : longWord;
    I2C2BRGCLR : longWord;
    I2C2BRGSET : longWord;
    I2C2BRGINV : longWord;
    I2C2TRN : longWord;
    I2C2TRNCLR : longWord;
    I2C2TRNSET : longWord;
    I2C2TRNINV : longWord;
    I2C2RCV : longWord;
  end;
  TSPI3_SPI1ACON = record
  private
    function  getCKE : TBits_1; assembler; nostackframe; inline;
    function  getCKP : TBits_1; assembler; nostackframe; inline;
    function  getDISSDO : TBits_1; assembler; nostackframe; inline;
    function  getENHBUF : TBits_1; assembler; nostackframe; inline;
    function  getFRMCNT : TBits_3; assembler; nostackframe; inline;
    function  getFRMEN : TBits_1; assembler; nostackframe; inline;
    function  getFRMPOL : TBits_1; assembler; nostackframe; inline;
    function  getFRMSYNC : TBits_1; assembler; nostackframe; inline;
    function  getFRMSYPW : TBits_1; assembler; nostackframe; inline;
    function  getMODE16 : TBits_1; assembler; nostackframe; inline;
    function  getMODE32 : TBits_1; assembler; nostackframe; inline;
    function  getMSSEN : TBits_1; assembler; nostackframe; inline;
    function  getMSTEN : TBits_1; assembler; nostackframe; inline;
    function  getON : TBits_1; assembler; nostackframe; inline;
    function  getSIDL : TBits_1; assembler; nostackframe; inline;
    function  getSMP : TBits_1; assembler; nostackframe; inline;
    function  getSPIFE : TBits_1; assembler; nostackframe; inline;
    function  getSRXISEL : TBits_2; assembler; nostackframe; inline;
    function  getSSEN : TBits_1; assembler; nostackframe; inline;
    function  getSTXISEL : TBits_2; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setCKE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCKP(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setDISSDO(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setENHBUF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setFRMCNT(thebits : TBits_3); assembler; nostackframe; inline;
    procedure setFRMEN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setFRMPOL(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setFRMSYNC(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setFRMSYPW(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setMODE16(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setMODE32(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setMSSEN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setMSTEN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setON(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSIDL(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSMP(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSPIFE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSRXISEL(thebits : TBits_2); assembler; nostackframe; inline;
    procedure setSSEN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSTXISEL(thebits : TBits_2); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearCKE;
    procedure clearCKP;
    procedure clearDISSDO;
    procedure clearENHBUF;
    procedure clearFRMEN;
    procedure clearFRMPOL;
    procedure clearFRMSYNC;
    procedure clearFRMSYPW;
    procedure clearMODE16;
    procedure clearMODE32;
    procedure clearMSSEN;
    procedure clearMSTEN;
    procedure clearON;
    procedure clearSIDL;
    procedure clearSMP;
    procedure clearSPIFE;
    procedure clearSSEN;
    procedure setCKE;
    procedure setCKP;
    procedure setDISSDO;
    procedure setENHBUF;
    procedure setFRMEN;
    procedure setFRMPOL;
    procedure setFRMSYNC;
    procedure setFRMSYPW;
    procedure setMODE16;
    procedure setMODE32;
    procedure setMSSEN;
    procedure setMSTEN;
    procedure setON;
    procedure setSIDL;
    procedure setSMP;
    procedure setSPIFE;
    procedure setSSEN;
    property CKE : TBits_1 read getCKE write setCKE;
    property CKP : TBits_1 read getCKP write setCKP;
    property DISSDO : TBits_1 read getDISSDO write setDISSDO;
    property ENHBUF : TBits_1 read getENHBUF write setENHBUF;
    property FRMCNT : TBits_3 read getFRMCNT write setFRMCNT;
    property FRMEN : TBits_1 read getFRMEN write setFRMEN;
    property FRMPOL : TBits_1 read getFRMPOL write setFRMPOL;
    property FRMSYNC : TBits_1 read getFRMSYNC write setFRMSYNC;
    property FRMSYPW : TBits_1 read getFRMSYPW write setFRMSYPW;
    property MODE16 : TBits_1 read getMODE16 write setMODE16;
    property MODE32 : TBits_1 read getMODE32 write setMODE32;
    property MSSEN : TBits_1 read getMSSEN write setMSSEN;
    property MSTEN : TBits_1 read getMSTEN write setMSTEN;
    property ON : TBits_1 read getON write setON;
    property SIDL : TBits_1 read getSIDL write setSIDL;
    property SMP : TBits_1 read getSMP write setSMP;
    property SPIFE : TBits_1 read getSPIFE write setSPIFE;
    property SRXISEL : TBits_2 read getSRXISEL write setSRXISEL;
    property SSEN : TBits_1 read getSSEN write setSSEN;
    property STXISEL : TBits_2 read getSTXISEL write setSTXISEL;
    property w : TBits_32 read getw write setw;
  end;
  TSPI3_SPI3CON = record
  private
    function  getCKE : TBits_1; assembler; nostackframe; inline;
    function  getCKP : TBits_1; assembler; nostackframe; inline;
    function  getDISSDO : TBits_1; assembler; nostackframe; inline;
    function  getENHBUF : TBits_1; assembler; nostackframe; inline;
    function  getFRMCNT : TBits_3; assembler; nostackframe; inline;
    function  getFRMEN : TBits_1; assembler; nostackframe; inline;
    function  getFRMPOL : TBits_1; assembler; nostackframe; inline;
    function  getFRMSYNC : TBits_1; assembler; nostackframe; inline;
    function  getFRMSYPW : TBits_1; assembler; nostackframe; inline;
    function  getMODE16 : TBits_1; assembler; nostackframe; inline;
    function  getMODE32 : TBits_1; assembler; nostackframe; inline;
    function  getMSSEN : TBits_1; assembler; nostackframe; inline;
    function  getMSTEN : TBits_1; assembler; nostackframe; inline;
    function  getON : TBits_1; assembler; nostackframe; inline;
    function  getSIDL : TBits_1; assembler; nostackframe; inline;
    function  getSMP : TBits_1; assembler; nostackframe; inline;
    function  getSPIFE : TBits_1; assembler; nostackframe; inline;
    function  getSRXISEL : TBits_2; assembler; nostackframe; inline;
    function  getSSEN : TBits_1; assembler; nostackframe; inline;
    function  getSTXISEL : TBits_2; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setCKE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCKP(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setDISSDO(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setENHBUF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setFRMCNT(thebits : TBits_3); assembler; nostackframe; inline;
    procedure setFRMEN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setFRMPOL(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setFRMSYNC(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setFRMSYPW(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setMODE16(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setMODE32(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setMSSEN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setMSTEN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setON(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSIDL(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSMP(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSPIFE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSRXISEL(thebits : TBits_2); assembler; nostackframe; inline;
    procedure setSSEN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSTXISEL(thebits : TBits_2); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearCKE;
    procedure clearCKP;
    procedure clearDISSDO;
    procedure clearENHBUF;
    procedure clearFRMEN;
    procedure clearFRMPOL;
    procedure clearFRMSYNC;
    procedure clearFRMSYPW;
    procedure clearMODE16;
    procedure clearMODE32;
    procedure clearMSSEN;
    procedure clearMSTEN;
    procedure clearON;
    procedure clearSIDL;
    procedure clearSMP;
    procedure clearSPIFE;
    procedure clearSSEN;
    procedure setCKE;
    procedure setCKP;
    procedure setDISSDO;
    procedure setENHBUF;
    procedure setFRMEN;
    procedure setFRMPOL;
    procedure setFRMSYNC;
    procedure setFRMSYPW;
    procedure setMODE16;
    procedure setMODE32;
    procedure setMSSEN;
    procedure setMSTEN;
    procedure setON;
    procedure setSIDL;
    procedure setSMP;
    procedure setSPIFE;
    procedure setSSEN;
    property CKE : TBits_1 read getCKE write setCKE;
    property CKP : TBits_1 read getCKP write setCKP;
    property DISSDO : TBits_1 read getDISSDO write setDISSDO;
    property ENHBUF : TBits_1 read getENHBUF write setENHBUF;
    property FRMCNT : TBits_3 read getFRMCNT write setFRMCNT;
    property FRMEN : TBits_1 read getFRMEN write setFRMEN;
    property FRMPOL : TBits_1 read getFRMPOL write setFRMPOL;
    property FRMSYNC : TBits_1 read getFRMSYNC write setFRMSYNC;
    property FRMSYPW : TBits_1 read getFRMSYPW write setFRMSYPW;
    property MODE16 : TBits_1 read getMODE16 write setMODE16;
    property MODE32 : TBits_1 read getMODE32 write setMODE32;
    property MSSEN : TBits_1 read getMSSEN write setMSSEN;
    property MSTEN : TBits_1 read getMSTEN write setMSTEN;
    property ON : TBits_1 read getON write setON;
    property SIDL : TBits_1 read getSIDL write setSIDL;
    property SMP : TBits_1 read getSMP write setSMP;
    property SPIFE : TBits_1 read getSPIFE write setSPIFE;
    property SRXISEL : TBits_2 read getSRXISEL write setSRXISEL;
    property SSEN : TBits_1 read getSSEN write setSSEN;
    property STXISEL : TBits_2 read getSTXISEL write setSTXISEL;
    property w : TBits_32 read getw write setw;
  end;
  TSPI3_SPI1ASTAT = record
  private
    function  getRXBUFELM : TBits_5; assembler; nostackframe; inline;
    function  getSPIBUSY : TBits_1; assembler; nostackframe; inline;
    function  getSPIRBE : TBits_1; assembler; nostackframe; inline;
    function  getSPIRBF : TBits_1; assembler; nostackframe; inline;
    function  getSPIROV : TBits_1; assembler; nostackframe; inline;
    function  getSPITBE : TBits_1; assembler; nostackframe; inline;
    function  getSPITBF : TBits_1; assembler; nostackframe; inline;
    function  getSPITUR : TBits_1; assembler; nostackframe; inline;
    function  getSRMT : TBits_1; assembler; nostackframe; inline;
    function  getTXBUFELM : TBits_5; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setRXBUFELM(thebits : TBits_5); assembler; nostackframe; inline;
    procedure setSPIBUSY(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSPIRBE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSPIRBF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSPIROV(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSPITBE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSPITBF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSPITUR(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSRMT(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXBUFELM(thebits : TBits_5); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearSPIBUSY;
    procedure clearSPIRBE;
    procedure clearSPIRBF;
    procedure clearSPIROV;
    procedure clearSPITBE;
    procedure clearSPITBF;
    procedure clearSPITUR;
    procedure clearSRMT;
    procedure setSPIBUSY;
    procedure setSPIRBE;
    procedure setSPIRBF;
    procedure setSPIROV;
    procedure setSPITBE;
    procedure setSPITBF;
    procedure setSPITUR;
    procedure setSRMT;
    property RXBUFELM : TBits_5 read getRXBUFELM write setRXBUFELM;
    property SPIBUSY : TBits_1 read getSPIBUSY write setSPIBUSY;
    property SPIRBE : TBits_1 read getSPIRBE write setSPIRBE;
    property SPIRBF : TBits_1 read getSPIRBF write setSPIRBF;
    property SPIROV : TBits_1 read getSPIROV write setSPIROV;
    property SPITBE : TBits_1 read getSPITBE write setSPITBE;
    property SPITBF : TBits_1 read getSPITBF write setSPITBF;
    property SPITUR : TBits_1 read getSPITUR write setSPITUR;
    property SRMT : TBits_1 read getSRMT write setSRMT;
    property TXBUFELM : TBits_5 read getTXBUFELM write setTXBUFELM;
    property w : TBits_32 read getw write setw;
  end;
  TSPI3_SPI3STAT = record
  private
    function  getRXBUFELM : TBits_5; assembler; nostackframe; inline;
    function  getSPIBUSY : TBits_1; assembler; nostackframe; inline;
    function  getSPIRBE : TBits_1; assembler; nostackframe; inline;
    function  getSPIRBF : TBits_1; assembler; nostackframe; inline;
    function  getSPIROV : TBits_1; assembler; nostackframe; inline;
    function  getSPITBE : TBits_1; assembler; nostackframe; inline;
    function  getSPITBF : TBits_1; assembler; nostackframe; inline;
    function  getSPITUR : TBits_1; assembler; nostackframe; inline;
    function  getSRMT : TBits_1; assembler; nostackframe; inline;
    function  getTXBUFELM : TBits_5; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setRXBUFELM(thebits : TBits_5); assembler; nostackframe; inline;
    procedure setSPIBUSY(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSPIRBE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSPIRBF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSPIROV(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSPITBE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSPITBF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSPITUR(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSRMT(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXBUFELM(thebits : TBits_5); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearSPIBUSY;
    procedure clearSPIRBE;
    procedure clearSPIRBF;
    procedure clearSPIROV;
    procedure clearSPITBE;
    procedure clearSPITBF;
    procedure clearSPITUR;
    procedure clearSRMT;
    procedure setSPIBUSY;
    procedure setSPIRBE;
    procedure setSPIRBF;
    procedure setSPIROV;
    procedure setSPITBE;
    procedure setSPITBF;
    procedure setSPITUR;
    procedure setSRMT;
    property RXBUFELM : TBits_5 read getRXBUFELM write setRXBUFELM;
    property SPIBUSY : TBits_1 read getSPIBUSY write setSPIBUSY;
    property SPIRBE : TBits_1 read getSPIRBE write setSPIRBE;
    property SPIRBF : TBits_1 read getSPIRBF write setSPIRBF;
    property SPIROV : TBits_1 read getSPIROV write setSPIROV;
    property SPITBE : TBits_1 read getSPITBE write setSPITBE;
    property SPITBF : TBits_1 read getSPITBF write setSPITBF;
    property SPITUR : TBits_1 read getSPITUR write setSPITUR;
    property SRMT : TBits_1 read getSRMT write setSRMT;
    property TXBUFELM : TBits_5 read getTXBUFELM write setTXBUFELM;
    property w : TBits_32 read getw write setw;
  end;
type
  TSPI3Registers = record
    SPI1ACONbits : TSPI3_SPI1ACON;
    SPI1ACON : longWord;
    SPI3CONbits : TSPI3_SPI3CON;
    SPI3CON : longWord;
    SPI1ACONCLR : longWord;
    SPI3CONCLR : longWord;
    SPI1ACONSET : longWord;
    SPI3CONSET : longWord;
    SPI1ACONINV : longWord;
    SPI3CONINV : longWord;
    SPI1ASTATbits : TSPI3_SPI1ASTAT;
    SPI1ASTAT : longWord;
    SPI3STATbits : TSPI3_SPI3STAT;
    SPI3STAT : longWord;
    SPI1ASTATCLR : longWord;
    SPI3STATCLR : longWord;
    SPI1ASTATSET : longWord;
    SPI3STATSET : longWord;
    SPI1ASTATINV : longWord;
    SPI3STATINV : longWord;
    SPI1ABUF : longWord;
    SPI3BUF : longWord;
    SPI1ABRG : longWord;
    SPI3BRG : longWord;
    SPI1ABRGCLR : longWord;
    SPI3BRGCLR : longWord;
    SPI1ABRGSET : longWord;
    SPI3BRGSET : longWord;
    SPI1ABRGINV : longWord;
    SPI3BRGINV : longWord;
  end;
  TSPI2A_SPI2ACON = record
  private
    function  getCKE : TBits_1; assembler; nostackframe; inline;
    function  getCKP : TBits_1; assembler; nostackframe; inline;
    function  getDISSDO : TBits_1; assembler; nostackframe; inline;
    function  getENHBUF : TBits_1; assembler; nostackframe; inline;
    function  getFRMCNT : TBits_3; assembler; nostackframe; inline;
    function  getFRMEN : TBits_1; assembler; nostackframe; inline;
    function  getFRMPOL : TBits_1; assembler; nostackframe; inline;
    function  getFRMSYNC : TBits_1; assembler; nostackframe; inline;
    function  getFRMSYPW : TBits_1; assembler; nostackframe; inline;
    function  getMODE16 : TBits_1; assembler; nostackframe; inline;
    function  getMODE32 : TBits_1; assembler; nostackframe; inline;
    function  getMSSEN : TBits_1; assembler; nostackframe; inline;
    function  getMSTEN : TBits_1; assembler; nostackframe; inline;
    function  getON : TBits_1; assembler; nostackframe; inline;
    function  getSIDL : TBits_1; assembler; nostackframe; inline;
    function  getSMP : TBits_1; assembler; nostackframe; inline;
    function  getSPIFE : TBits_1; assembler; nostackframe; inline;
    function  getSRXISEL : TBits_2; assembler; nostackframe; inline;
    function  getSSEN : TBits_1; assembler; nostackframe; inline;
    function  getSTXISEL : TBits_2; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setCKE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCKP(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setDISSDO(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setENHBUF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setFRMCNT(thebits : TBits_3); assembler; nostackframe; inline;
    procedure setFRMEN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setFRMPOL(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setFRMSYNC(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setFRMSYPW(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setMODE16(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setMODE32(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setMSSEN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setMSTEN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setON(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSIDL(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSMP(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSPIFE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSRXISEL(thebits : TBits_2); assembler; nostackframe; inline;
    procedure setSSEN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSTXISEL(thebits : TBits_2); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearCKE;
    procedure clearCKP;
    procedure clearDISSDO;
    procedure clearENHBUF;
    procedure clearFRMEN;
    procedure clearFRMPOL;
    procedure clearFRMSYNC;
    procedure clearFRMSYPW;
    procedure clearMODE16;
    procedure clearMODE32;
    procedure clearMSSEN;
    procedure clearMSTEN;
    procedure clearON;
    procedure clearSIDL;
    procedure clearSMP;
    procedure clearSPIFE;
    procedure clearSSEN;
    procedure setCKE;
    procedure setCKP;
    procedure setDISSDO;
    procedure setENHBUF;
    procedure setFRMEN;
    procedure setFRMPOL;
    procedure setFRMSYNC;
    procedure setFRMSYPW;
    procedure setMODE16;
    procedure setMODE32;
    procedure setMSSEN;
    procedure setMSTEN;
    procedure setON;
    procedure setSIDL;
    procedure setSMP;
    procedure setSPIFE;
    procedure setSSEN;
    property CKE : TBits_1 read getCKE write setCKE;
    property CKP : TBits_1 read getCKP write setCKP;
    property DISSDO : TBits_1 read getDISSDO write setDISSDO;
    property ENHBUF : TBits_1 read getENHBUF write setENHBUF;
    property FRMCNT : TBits_3 read getFRMCNT write setFRMCNT;
    property FRMEN : TBits_1 read getFRMEN write setFRMEN;
    property FRMPOL : TBits_1 read getFRMPOL write setFRMPOL;
    property FRMSYNC : TBits_1 read getFRMSYNC write setFRMSYNC;
    property FRMSYPW : TBits_1 read getFRMSYPW write setFRMSYPW;
    property MODE16 : TBits_1 read getMODE16 write setMODE16;
    property MODE32 : TBits_1 read getMODE32 write setMODE32;
    property MSSEN : TBits_1 read getMSSEN write setMSSEN;
    property MSTEN : TBits_1 read getMSTEN write setMSTEN;
    property ON : TBits_1 read getON write setON;
    property SIDL : TBits_1 read getSIDL write setSIDL;
    property SMP : TBits_1 read getSMP write setSMP;
    property SPIFE : TBits_1 read getSPIFE write setSPIFE;
    property SRXISEL : TBits_2 read getSRXISEL write setSRXISEL;
    property SSEN : TBits_1 read getSSEN write setSSEN;
    property STXISEL : TBits_2 read getSTXISEL write setSTXISEL;
    property w : TBits_32 read getw write setw;
  end;
  TSPI2A_SPI2CON = record
  private
    function  getCKE : TBits_1; assembler; nostackframe; inline;
    function  getCKP : TBits_1; assembler; nostackframe; inline;
    function  getDISSDO : TBits_1; assembler; nostackframe; inline;
    function  getENHBUF : TBits_1; assembler; nostackframe; inline;
    function  getFRMCNT : TBits_3; assembler; nostackframe; inline;
    function  getFRMEN : TBits_1; assembler; nostackframe; inline;
    function  getFRMPOL : TBits_1; assembler; nostackframe; inline;
    function  getFRMSYNC : TBits_1; assembler; nostackframe; inline;
    function  getFRMSYPW : TBits_1; assembler; nostackframe; inline;
    function  getMODE16 : TBits_1; assembler; nostackframe; inline;
    function  getMODE32 : TBits_1; assembler; nostackframe; inline;
    function  getMSSEN : TBits_1; assembler; nostackframe; inline;
    function  getMSTEN : TBits_1; assembler; nostackframe; inline;
    function  getON : TBits_1; assembler; nostackframe; inline;
    function  getSIDL : TBits_1; assembler; nostackframe; inline;
    function  getSMP : TBits_1; assembler; nostackframe; inline;
    function  getSPIFE : TBits_1; assembler; nostackframe; inline;
    function  getSRXISEL : TBits_2; assembler; nostackframe; inline;
    function  getSSEN : TBits_1; assembler; nostackframe; inline;
    function  getSTXISEL : TBits_2; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setCKE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCKP(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setDISSDO(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setENHBUF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setFRMCNT(thebits : TBits_3); assembler; nostackframe; inline;
    procedure setFRMEN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setFRMPOL(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setFRMSYNC(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setFRMSYPW(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setMODE16(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setMODE32(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setMSSEN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setMSTEN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setON(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSIDL(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSMP(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSPIFE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSRXISEL(thebits : TBits_2); assembler; nostackframe; inline;
    procedure setSSEN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSTXISEL(thebits : TBits_2); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearCKE;
    procedure clearCKP;
    procedure clearDISSDO;
    procedure clearENHBUF;
    procedure clearFRMEN;
    procedure clearFRMPOL;
    procedure clearFRMSYNC;
    procedure clearFRMSYPW;
    procedure clearMODE16;
    procedure clearMODE32;
    procedure clearMSSEN;
    procedure clearMSTEN;
    procedure clearON;
    procedure clearSIDL;
    procedure clearSMP;
    procedure clearSPIFE;
    procedure clearSSEN;
    procedure setCKE;
    procedure setCKP;
    procedure setDISSDO;
    procedure setENHBUF;
    procedure setFRMEN;
    procedure setFRMPOL;
    procedure setFRMSYNC;
    procedure setFRMSYPW;
    procedure setMODE16;
    procedure setMODE32;
    procedure setMSSEN;
    procedure setMSTEN;
    procedure setON;
    procedure setSIDL;
    procedure setSMP;
    procedure setSPIFE;
    procedure setSSEN;
    property CKE : TBits_1 read getCKE write setCKE;
    property CKP : TBits_1 read getCKP write setCKP;
    property DISSDO : TBits_1 read getDISSDO write setDISSDO;
    property ENHBUF : TBits_1 read getENHBUF write setENHBUF;
    property FRMCNT : TBits_3 read getFRMCNT write setFRMCNT;
    property FRMEN : TBits_1 read getFRMEN write setFRMEN;
    property FRMPOL : TBits_1 read getFRMPOL write setFRMPOL;
    property FRMSYNC : TBits_1 read getFRMSYNC write setFRMSYNC;
    property FRMSYPW : TBits_1 read getFRMSYPW write setFRMSYPW;
    property MODE16 : TBits_1 read getMODE16 write setMODE16;
    property MODE32 : TBits_1 read getMODE32 write setMODE32;
    property MSSEN : TBits_1 read getMSSEN write setMSSEN;
    property MSTEN : TBits_1 read getMSTEN write setMSTEN;
    property ON : TBits_1 read getON write setON;
    property SIDL : TBits_1 read getSIDL write setSIDL;
    property SMP : TBits_1 read getSMP write setSMP;
    property SPIFE : TBits_1 read getSPIFE write setSPIFE;
    property SRXISEL : TBits_2 read getSRXISEL write setSRXISEL;
    property SSEN : TBits_1 read getSSEN write setSSEN;
    property STXISEL : TBits_2 read getSTXISEL write setSTXISEL;
    property w : TBits_32 read getw write setw;
  end;
  TSPI2A_SPI2ASTAT = record
  private
    function  getRXBUFELM : TBits_5; assembler; nostackframe; inline;
    function  getSPIBUSY : TBits_1; assembler; nostackframe; inline;
    function  getSPIRBE : TBits_1; assembler; nostackframe; inline;
    function  getSPIRBF : TBits_1; assembler; nostackframe; inline;
    function  getSPIROV : TBits_1; assembler; nostackframe; inline;
    function  getSPITBE : TBits_1; assembler; nostackframe; inline;
    function  getSPITBF : TBits_1; assembler; nostackframe; inline;
    function  getSPITUR : TBits_1; assembler; nostackframe; inline;
    function  getSRMT : TBits_1; assembler; nostackframe; inline;
    function  getTXBUFELM : TBits_5; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setRXBUFELM(thebits : TBits_5); assembler; nostackframe; inline;
    procedure setSPIBUSY(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSPIRBE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSPIRBF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSPIROV(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSPITBE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSPITBF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSPITUR(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSRMT(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXBUFELM(thebits : TBits_5); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearSPIBUSY;
    procedure clearSPIRBE;
    procedure clearSPIRBF;
    procedure clearSPIROV;
    procedure clearSPITBE;
    procedure clearSPITBF;
    procedure clearSPITUR;
    procedure clearSRMT;
    procedure setSPIBUSY;
    procedure setSPIRBE;
    procedure setSPIRBF;
    procedure setSPIROV;
    procedure setSPITBE;
    procedure setSPITBF;
    procedure setSPITUR;
    procedure setSRMT;
    property RXBUFELM : TBits_5 read getRXBUFELM write setRXBUFELM;
    property SPIBUSY : TBits_1 read getSPIBUSY write setSPIBUSY;
    property SPIRBE : TBits_1 read getSPIRBE write setSPIRBE;
    property SPIRBF : TBits_1 read getSPIRBF write setSPIRBF;
    property SPIROV : TBits_1 read getSPIROV write setSPIROV;
    property SPITBE : TBits_1 read getSPITBE write setSPITBE;
    property SPITBF : TBits_1 read getSPITBF write setSPITBF;
    property SPITUR : TBits_1 read getSPITUR write setSPITUR;
    property SRMT : TBits_1 read getSRMT write setSRMT;
    property TXBUFELM : TBits_5 read getTXBUFELM write setTXBUFELM;
    property w : TBits_32 read getw write setw;
  end;
  TSPI2A_SPI2STAT = record
  private
    function  getRXBUFELM : TBits_5; assembler; nostackframe; inline;
    function  getSPIBUSY : TBits_1; assembler; nostackframe; inline;
    function  getSPIRBE : TBits_1; assembler; nostackframe; inline;
    function  getSPIRBF : TBits_1; assembler; nostackframe; inline;
    function  getSPIROV : TBits_1; assembler; nostackframe; inline;
    function  getSPITBE : TBits_1; assembler; nostackframe; inline;
    function  getSPITBF : TBits_1; assembler; nostackframe; inline;
    function  getSPITUR : TBits_1; assembler; nostackframe; inline;
    function  getSRMT : TBits_1; assembler; nostackframe; inline;
    function  getTXBUFELM : TBits_5; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setRXBUFELM(thebits : TBits_5); assembler; nostackframe; inline;
    procedure setSPIBUSY(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSPIRBE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSPIRBF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSPIROV(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSPITBE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSPITBF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSPITUR(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSRMT(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXBUFELM(thebits : TBits_5); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearSPIBUSY;
    procedure clearSPIRBE;
    procedure clearSPIRBF;
    procedure clearSPIROV;
    procedure clearSPITBE;
    procedure clearSPITBF;
    procedure clearSPITUR;
    procedure clearSRMT;
    procedure setSPIBUSY;
    procedure setSPIRBE;
    procedure setSPIRBF;
    procedure setSPIROV;
    procedure setSPITBE;
    procedure setSPITBF;
    procedure setSPITUR;
    procedure setSRMT;
    property RXBUFELM : TBits_5 read getRXBUFELM write setRXBUFELM;
    property SPIBUSY : TBits_1 read getSPIBUSY write setSPIBUSY;
    property SPIRBE : TBits_1 read getSPIRBE write setSPIRBE;
    property SPIRBF : TBits_1 read getSPIRBF write setSPIRBF;
    property SPIROV : TBits_1 read getSPIROV write setSPIROV;
    property SPITBE : TBits_1 read getSPITBE write setSPITBE;
    property SPITBF : TBits_1 read getSPITBF write setSPITBF;
    property SPITUR : TBits_1 read getSPITUR write setSPITUR;
    property SRMT : TBits_1 read getSRMT write setSRMT;
    property TXBUFELM : TBits_5 read getTXBUFELM write setTXBUFELM;
    property w : TBits_32 read getw write setw;
  end;
type
  TSPI2ARegisters = record
    SPI2ACONbits : TSPI2A_SPI2ACON;
    SPI2ACON : longWord;
    SPI2CONbits : TSPI2A_SPI2CON;
    SPI2CON : longWord;
    SPI2ACONCLR : longWord;
    SPI2CONCLR : longWord;
    SPI2ACONSET : longWord;
    SPI2CONSET : longWord;
    SPI2ACONINV : longWord;
    SPI2CONINV : longWord;
    SPI2ASTATbits : TSPI2A_SPI2ASTAT;
    SPI2ASTAT : longWord;
    SPI2STATbits : TSPI2A_SPI2STAT;
    SPI2STAT : longWord;
    SPI2ASTATCLR : longWord;
    SPI2STATCLR : longWord;
    SPI2ASTATSET : longWord;
    SPI2STATSET : longWord;
    SPI2ASTATINV : longWord;
    SPI2STATINV : longWord;
    SPI2ABUF : longWord;
    SPI2BUF : longWord;
    SPI2ABRG : longWord;
    SPI2BRG : longWord;
    SPI2ABRGCLR : longWord;
    SPI2BRGCLR : longWord;
    SPI2ABRGSET : longWord;
    SPI2BRGSET : longWord;
    SPI2ABRGINV : longWord;
    SPI2BRGINV : longWord;
  end;
  TSPI3A_SPI3ACON = record
  private
    function  getCKE : TBits_1; assembler; nostackframe; inline;
    function  getCKP : TBits_1; assembler; nostackframe; inline;
    function  getDISSDO : TBits_1; assembler; nostackframe; inline;
    function  getENHBUF : TBits_1; assembler; nostackframe; inline;
    function  getFRMCNT : TBits_3; assembler; nostackframe; inline;
    function  getFRMEN : TBits_1; assembler; nostackframe; inline;
    function  getFRMPOL : TBits_1; assembler; nostackframe; inline;
    function  getFRMSYNC : TBits_1; assembler; nostackframe; inline;
    function  getFRMSYPW : TBits_1; assembler; nostackframe; inline;
    function  getMODE16 : TBits_1; assembler; nostackframe; inline;
    function  getMODE32 : TBits_1; assembler; nostackframe; inline;
    function  getMSSEN : TBits_1; assembler; nostackframe; inline;
    function  getMSTEN : TBits_1; assembler; nostackframe; inline;
    function  getON : TBits_1; assembler; nostackframe; inline;
    function  getSIDL : TBits_1; assembler; nostackframe; inline;
    function  getSMP : TBits_1; assembler; nostackframe; inline;
    function  getSPIFE : TBits_1; assembler; nostackframe; inline;
    function  getSRXISEL : TBits_2; assembler; nostackframe; inline;
    function  getSSEN : TBits_1; assembler; nostackframe; inline;
    function  getSTXISEL : TBits_2; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setCKE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCKP(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setDISSDO(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setENHBUF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setFRMCNT(thebits : TBits_3); assembler; nostackframe; inline;
    procedure setFRMEN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setFRMPOL(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setFRMSYNC(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setFRMSYPW(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setMODE16(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setMODE32(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setMSSEN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setMSTEN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setON(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSIDL(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSMP(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSPIFE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSRXISEL(thebits : TBits_2); assembler; nostackframe; inline;
    procedure setSSEN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSTXISEL(thebits : TBits_2); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearCKE;
    procedure clearCKP;
    procedure clearDISSDO;
    procedure clearENHBUF;
    procedure clearFRMEN;
    procedure clearFRMPOL;
    procedure clearFRMSYNC;
    procedure clearFRMSYPW;
    procedure clearMODE16;
    procedure clearMODE32;
    procedure clearMSSEN;
    procedure clearMSTEN;
    procedure clearON;
    procedure clearSIDL;
    procedure clearSMP;
    procedure clearSPIFE;
    procedure clearSSEN;
    procedure setCKE;
    procedure setCKP;
    procedure setDISSDO;
    procedure setENHBUF;
    procedure setFRMEN;
    procedure setFRMPOL;
    procedure setFRMSYNC;
    procedure setFRMSYPW;
    procedure setMODE16;
    procedure setMODE32;
    procedure setMSSEN;
    procedure setMSTEN;
    procedure setON;
    procedure setSIDL;
    procedure setSMP;
    procedure setSPIFE;
    procedure setSSEN;
    property CKE : TBits_1 read getCKE write setCKE;
    property CKP : TBits_1 read getCKP write setCKP;
    property DISSDO : TBits_1 read getDISSDO write setDISSDO;
    property ENHBUF : TBits_1 read getENHBUF write setENHBUF;
    property FRMCNT : TBits_3 read getFRMCNT write setFRMCNT;
    property FRMEN : TBits_1 read getFRMEN write setFRMEN;
    property FRMPOL : TBits_1 read getFRMPOL write setFRMPOL;
    property FRMSYNC : TBits_1 read getFRMSYNC write setFRMSYNC;
    property FRMSYPW : TBits_1 read getFRMSYPW write setFRMSYPW;
    property MODE16 : TBits_1 read getMODE16 write setMODE16;
    property MODE32 : TBits_1 read getMODE32 write setMODE32;
    property MSSEN : TBits_1 read getMSSEN write setMSSEN;
    property MSTEN : TBits_1 read getMSTEN write setMSTEN;
    property ON : TBits_1 read getON write setON;
    property SIDL : TBits_1 read getSIDL write setSIDL;
    property SMP : TBits_1 read getSMP write setSMP;
    property SPIFE : TBits_1 read getSPIFE write setSPIFE;
    property SRXISEL : TBits_2 read getSRXISEL write setSRXISEL;
    property SSEN : TBits_1 read getSSEN write setSSEN;
    property STXISEL : TBits_2 read getSTXISEL write setSTXISEL;
    property w : TBits_32 read getw write setw;
  end;
  TSPI3A_SPI4CON = record
  private
    function  getCKE : TBits_1; assembler; nostackframe; inline;
    function  getCKP : TBits_1; assembler; nostackframe; inline;
    function  getDISSDO : TBits_1; assembler; nostackframe; inline;
    function  getENHBUF : TBits_1; assembler; nostackframe; inline;
    function  getFRMCNT : TBits_3; assembler; nostackframe; inline;
    function  getFRMEN : TBits_1; assembler; nostackframe; inline;
    function  getFRMPOL : TBits_1; assembler; nostackframe; inline;
    function  getFRMSYNC : TBits_1; assembler; nostackframe; inline;
    function  getFRMSYPW : TBits_1; assembler; nostackframe; inline;
    function  getMODE16 : TBits_1; assembler; nostackframe; inline;
    function  getMODE32 : TBits_1; assembler; nostackframe; inline;
    function  getMSSEN : TBits_1; assembler; nostackframe; inline;
    function  getMSTEN : TBits_1; assembler; nostackframe; inline;
    function  getON : TBits_1; assembler; nostackframe; inline;
    function  getSIDL : TBits_1; assembler; nostackframe; inline;
    function  getSMP : TBits_1; assembler; nostackframe; inline;
    function  getSPIFE : TBits_1; assembler; nostackframe; inline;
    function  getSRXISEL : TBits_2; assembler; nostackframe; inline;
    function  getSSEN : TBits_1; assembler; nostackframe; inline;
    function  getSTXISEL : TBits_2; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setCKE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCKP(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setDISSDO(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setENHBUF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setFRMCNT(thebits : TBits_3); assembler; nostackframe; inline;
    procedure setFRMEN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setFRMPOL(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setFRMSYNC(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setFRMSYPW(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setMODE16(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setMODE32(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setMSSEN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setMSTEN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setON(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSIDL(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSMP(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSPIFE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSRXISEL(thebits : TBits_2); assembler; nostackframe; inline;
    procedure setSSEN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSTXISEL(thebits : TBits_2); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearCKE;
    procedure clearCKP;
    procedure clearDISSDO;
    procedure clearENHBUF;
    procedure clearFRMEN;
    procedure clearFRMPOL;
    procedure clearFRMSYNC;
    procedure clearFRMSYPW;
    procedure clearMODE16;
    procedure clearMODE32;
    procedure clearMSSEN;
    procedure clearMSTEN;
    procedure clearON;
    procedure clearSIDL;
    procedure clearSMP;
    procedure clearSPIFE;
    procedure clearSSEN;
    procedure setCKE;
    procedure setCKP;
    procedure setDISSDO;
    procedure setENHBUF;
    procedure setFRMEN;
    procedure setFRMPOL;
    procedure setFRMSYNC;
    procedure setFRMSYPW;
    procedure setMODE16;
    procedure setMODE32;
    procedure setMSSEN;
    procedure setMSTEN;
    procedure setON;
    procedure setSIDL;
    procedure setSMP;
    procedure setSPIFE;
    procedure setSSEN;
    property CKE : TBits_1 read getCKE write setCKE;
    property CKP : TBits_1 read getCKP write setCKP;
    property DISSDO : TBits_1 read getDISSDO write setDISSDO;
    property ENHBUF : TBits_1 read getENHBUF write setENHBUF;
    property FRMCNT : TBits_3 read getFRMCNT write setFRMCNT;
    property FRMEN : TBits_1 read getFRMEN write setFRMEN;
    property FRMPOL : TBits_1 read getFRMPOL write setFRMPOL;
    property FRMSYNC : TBits_1 read getFRMSYNC write setFRMSYNC;
    property FRMSYPW : TBits_1 read getFRMSYPW write setFRMSYPW;
    property MODE16 : TBits_1 read getMODE16 write setMODE16;
    property MODE32 : TBits_1 read getMODE32 write setMODE32;
    property MSSEN : TBits_1 read getMSSEN write setMSSEN;
    property MSTEN : TBits_1 read getMSTEN write setMSTEN;
    property ON : TBits_1 read getON write setON;
    property SIDL : TBits_1 read getSIDL write setSIDL;
    property SMP : TBits_1 read getSMP write setSMP;
    property SPIFE : TBits_1 read getSPIFE write setSPIFE;
    property SRXISEL : TBits_2 read getSRXISEL write setSRXISEL;
    property SSEN : TBits_1 read getSSEN write setSSEN;
    property STXISEL : TBits_2 read getSTXISEL write setSTXISEL;
    property w : TBits_32 read getw write setw;
  end;
  TSPI3A_SPI3ASTAT = record
  private
    function  getRXBUFELM : TBits_5; assembler; nostackframe; inline;
    function  getSPIBUSY : TBits_1; assembler; nostackframe; inline;
    function  getSPIRBE : TBits_1; assembler; nostackframe; inline;
    function  getSPIRBF : TBits_1; assembler; nostackframe; inline;
    function  getSPIROV : TBits_1; assembler; nostackframe; inline;
    function  getSPITBE : TBits_1; assembler; nostackframe; inline;
    function  getSPITBF : TBits_1; assembler; nostackframe; inline;
    function  getSPITUR : TBits_1; assembler; nostackframe; inline;
    function  getSRMT : TBits_1; assembler; nostackframe; inline;
    function  getTXBUFELM : TBits_5; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setRXBUFELM(thebits : TBits_5); assembler; nostackframe; inline;
    procedure setSPIBUSY(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSPIRBE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSPIRBF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSPIROV(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSPITBE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSPITBF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSPITUR(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSRMT(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXBUFELM(thebits : TBits_5); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearSPIBUSY;
    procedure clearSPIRBE;
    procedure clearSPIRBF;
    procedure clearSPIROV;
    procedure clearSPITBE;
    procedure clearSPITBF;
    procedure clearSPITUR;
    procedure clearSRMT;
    procedure setSPIBUSY;
    procedure setSPIRBE;
    procedure setSPIRBF;
    procedure setSPIROV;
    procedure setSPITBE;
    procedure setSPITBF;
    procedure setSPITUR;
    procedure setSRMT;
    property RXBUFELM : TBits_5 read getRXBUFELM write setRXBUFELM;
    property SPIBUSY : TBits_1 read getSPIBUSY write setSPIBUSY;
    property SPIRBE : TBits_1 read getSPIRBE write setSPIRBE;
    property SPIRBF : TBits_1 read getSPIRBF write setSPIRBF;
    property SPIROV : TBits_1 read getSPIROV write setSPIROV;
    property SPITBE : TBits_1 read getSPITBE write setSPITBE;
    property SPITBF : TBits_1 read getSPITBF write setSPITBF;
    property SPITUR : TBits_1 read getSPITUR write setSPITUR;
    property SRMT : TBits_1 read getSRMT write setSRMT;
    property TXBUFELM : TBits_5 read getTXBUFELM write setTXBUFELM;
    property w : TBits_32 read getw write setw;
  end;
  TSPI3A_SPI4STAT = record
  private
    function  getRXBUFELM : TBits_5; assembler; nostackframe; inline;
    function  getSPIBUSY : TBits_1; assembler; nostackframe; inline;
    function  getSPIRBE : TBits_1; assembler; nostackframe; inline;
    function  getSPIRBF : TBits_1; assembler; nostackframe; inline;
    function  getSPIROV : TBits_1; assembler; nostackframe; inline;
    function  getSPITBE : TBits_1; assembler; nostackframe; inline;
    function  getSPITBF : TBits_1; assembler; nostackframe; inline;
    function  getSPITUR : TBits_1; assembler; nostackframe; inline;
    function  getSRMT : TBits_1; assembler; nostackframe; inline;
    function  getTXBUFELM : TBits_5; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setRXBUFELM(thebits : TBits_5); assembler; nostackframe; inline;
    procedure setSPIBUSY(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSPIRBE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSPIRBF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSPIROV(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSPITBE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSPITBF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSPITUR(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSRMT(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXBUFELM(thebits : TBits_5); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearSPIBUSY;
    procedure clearSPIRBE;
    procedure clearSPIRBF;
    procedure clearSPIROV;
    procedure clearSPITBE;
    procedure clearSPITBF;
    procedure clearSPITUR;
    procedure clearSRMT;
    procedure setSPIBUSY;
    procedure setSPIRBE;
    procedure setSPIRBF;
    procedure setSPIROV;
    procedure setSPITBE;
    procedure setSPITBF;
    procedure setSPITUR;
    procedure setSRMT;
    property RXBUFELM : TBits_5 read getRXBUFELM write setRXBUFELM;
    property SPIBUSY : TBits_1 read getSPIBUSY write setSPIBUSY;
    property SPIRBE : TBits_1 read getSPIRBE write setSPIRBE;
    property SPIRBF : TBits_1 read getSPIRBF write setSPIRBF;
    property SPIROV : TBits_1 read getSPIROV write setSPIROV;
    property SPITBE : TBits_1 read getSPITBE write setSPITBE;
    property SPITBF : TBits_1 read getSPITBF write setSPITBF;
    property SPITUR : TBits_1 read getSPITUR write setSPITUR;
    property SRMT : TBits_1 read getSRMT write setSRMT;
    property TXBUFELM : TBits_5 read getTXBUFELM write setTXBUFELM;
    property w : TBits_32 read getw write setw;
  end;
type
  TSPI3ARegisters = record
    SPI3ACONbits : TSPI3A_SPI3ACON;
    SPI3ACON : longWord;
    SPI4CONbits : TSPI3A_SPI4CON;
    SPI4CON : longWord;
    SPI3ACONCLR : longWord;
    SPI4CONCLR : longWord;
    SPI3ACONSET : longWord;
    SPI4CONSET : longWord;
    SPI3ACONINV : longWord;
    SPI4CONINV : longWord;
    SPI3ASTATbits : TSPI3A_SPI3ASTAT;
    SPI3ASTAT : longWord;
    SPI4STATbits : TSPI3A_SPI4STAT;
    SPI4STAT : longWord;
    SPI3ASTATCLR : longWord;
    SPI4STATCLR : longWord;
    SPI3ASTATSET : longWord;
    SPI4STATSET : longWord;
    SPI3ASTATINV : longWord;
    SPI4STATINV : longWord;
    SPI3ABUF : longWord;
    SPI4BUF : longWord;
    SPI3ABRG : longWord;
    SPI4BRG : longWord;
    SPI3ABRGCLR : longWord;
    SPI4BRGCLR : longWord;
    SPI3ABRGSET : longWord;
    SPI4BRGSET : longWord;
    SPI3ABRGINV : longWord;
    SPI4BRGINV : longWord;
  end;
  TSPI1_SPI1CON = record
  private
    function  getCKE : TBits_1; assembler; nostackframe; inline;
    function  getCKP : TBits_1; assembler; nostackframe; inline;
    function  getDISSDO : TBits_1; assembler; nostackframe; inline;
    function  getENHBUF : TBits_1; assembler; nostackframe; inline;
    function  getFRMCNT : TBits_3; assembler; nostackframe; inline;
    function  getFRMEN : TBits_1; assembler; nostackframe; inline;
    function  getFRMPOL : TBits_1; assembler; nostackframe; inline;
    function  getFRMSYNC : TBits_1; assembler; nostackframe; inline;
    function  getFRMSYPW : TBits_1; assembler; nostackframe; inline;
    function  getMODE16 : TBits_1; assembler; nostackframe; inline;
    function  getMODE32 : TBits_1; assembler; nostackframe; inline;
    function  getMSSEN : TBits_1; assembler; nostackframe; inline;
    function  getMSTEN : TBits_1; assembler; nostackframe; inline;
    function  getON : TBits_1; assembler; nostackframe; inline;
    function  getSIDL : TBits_1; assembler; nostackframe; inline;
    function  getSMP : TBits_1; assembler; nostackframe; inline;
    function  getSPIFE : TBits_1; assembler; nostackframe; inline;
    function  getSRXISEL : TBits_2; assembler; nostackframe; inline;
    function  getSSEN : TBits_1; assembler; nostackframe; inline;
    function  getSTXISEL : TBits_2; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setCKE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCKP(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setDISSDO(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setENHBUF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setFRMCNT(thebits : TBits_3); assembler; nostackframe; inline;
    procedure setFRMEN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setFRMPOL(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setFRMSYNC(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setFRMSYPW(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setMODE16(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setMODE32(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setMSSEN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setMSTEN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setON(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSIDL(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSMP(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSPIFE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSRXISEL(thebits : TBits_2); assembler; nostackframe; inline;
    procedure setSSEN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSTXISEL(thebits : TBits_2); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearCKE;
    procedure clearCKP;
    procedure clearDISSDO;
    procedure clearENHBUF;
    procedure clearFRMEN;
    procedure clearFRMPOL;
    procedure clearFRMSYNC;
    procedure clearFRMSYPW;
    procedure clearMODE16;
    procedure clearMODE32;
    procedure clearMSSEN;
    procedure clearMSTEN;
    procedure clearON;
    procedure clearSIDL;
    procedure clearSMP;
    procedure clearSPIFE;
    procedure clearSSEN;
    procedure setCKE;
    procedure setCKP;
    procedure setDISSDO;
    procedure setENHBUF;
    procedure setFRMEN;
    procedure setFRMPOL;
    procedure setFRMSYNC;
    procedure setFRMSYPW;
    procedure setMODE16;
    procedure setMODE32;
    procedure setMSSEN;
    procedure setMSTEN;
    procedure setON;
    procedure setSIDL;
    procedure setSMP;
    procedure setSPIFE;
    procedure setSSEN;
    property CKE : TBits_1 read getCKE write setCKE;
    property CKP : TBits_1 read getCKP write setCKP;
    property DISSDO : TBits_1 read getDISSDO write setDISSDO;
    property ENHBUF : TBits_1 read getENHBUF write setENHBUF;
    property FRMCNT : TBits_3 read getFRMCNT write setFRMCNT;
    property FRMEN : TBits_1 read getFRMEN write setFRMEN;
    property FRMPOL : TBits_1 read getFRMPOL write setFRMPOL;
    property FRMSYNC : TBits_1 read getFRMSYNC write setFRMSYNC;
    property FRMSYPW : TBits_1 read getFRMSYPW write setFRMSYPW;
    property MODE16 : TBits_1 read getMODE16 write setMODE16;
    property MODE32 : TBits_1 read getMODE32 write setMODE32;
    property MSSEN : TBits_1 read getMSSEN write setMSSEN;
    property MSTEN : TBits_1 read getMSTEN write setMSTEN;
    property ON : TBits_1 read getON write setON;
    property SIDL : TBits_1 read getSIDL write setSIDL;
    property SMP : TBits_1 read getSMP write setSMP;
    property SPIFE : TBits_1 read getSPIFE write setSPIFE;
    property SRXISEL : TBits_2 read getSRXISEL write setSRXISEL;
    property SSEN : TBits_1 read getSSEN write setSSEN;
    property STXISEL : TBits_2 read getSTXISEL write setSTXISEL;
    property w : TBits_32 read getw write setw;
  end;
  TSPI1_SPI1STAT = record
  private
    function  getRXBUFELM : TBits_5; assembler; nostackframe; inline;
    function  getSPIBUSY : TBits_1; assembler; nostackframe; inline;
    function  getSPIRBE : TBits_1; assembler; nostackframe; inline;
    function  getSPIRBF : TBits_1; assembler; nostackframe; inline;
    function  getSPIROV : TBits_1; assembler; nostackframe; inline;
    function  getSPITBE : TBits_1; assembler; nostackframe; inline;
    function  getSPITBF : TBits_1; assembler; nostackframe; inline;
    function  getSPITUR : TBits_1; assembler; nostackframe; inline;
    function  getSRMT : TBits_1; assembler; nostackframe; inline;
    function  getTXBUFELM : TBits_5; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setRXBUFELM(thebits : TBits_5); assembler; nostackframe; inline;
    procedure setSPIBUSY(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSPIRBE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSPIRBF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSPIROV(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSPITBE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSPITBF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSPITUR(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSRMT(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXBUFELM(thebits : TBits_5); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearSPIBUSY;
    procedure clearSPIRBE;
    procedure clearSPIRBF;
    procedure clearSPIROV;
    procedure clearSPITBE;
    procedure clearSPITBF;
    procedure clearSPITUR;
    procedure clearSRMT;
    procedure setSPIBUSY;
    procedure setSPIRBE;
    procedure setSPIRBF;
    procedure setSPIROV;
    procedure setSPITBE;
    procedure setSPITBF;
    procedure setSPITUR;
    procedure setSRMT;
    property RXBUFELM : TBits_5 read getRXBUFELM write setRXBUFELM;
    property SPIBUSY : TBits_1 read getSPIBUSY write setSPIBUSY;
    property SPIRBE : TBits_1 read getSPIRBE write setSPIRBE;
    property SPIRBF : TBits_1 read getSPIRBF write setSPIRBF;
    property SPIROV : TBits_1 read getSPIROV write setSPIROV;
    property SPITBE : TBits_1 read getSPITBE write setSPITBE;
    property SPITBF : TBits_1 read getSPITBF write setSPITBF;
    property SPITUR : TBits_1 read getSPITUR write setSPITUR;
    property SRMT : TBits_1 read getSRMT write setSRMT;
    property TXBUFELM : TBits_5 read getTXBUFELM write setTXBUFELM;
    property w : TBits_32 read getw write setw;
  end;
type
  TSPI1Registers = record
    SPI1CONbits : TSPI1_SPI1CON;
    SPI1CON : longWord;
    SPI1CONCLR : longWord;
    SPI1CONSET : longWord;
    SPI1CONINV : longWord;
    SPI1STATbits : TSPI1_SPI1STAT;
    SPI1STAT : longWord;
    SPI1STATCLR : longWord;
    SPI1STATSET : longWord;
    SPI1STATINV : longWord;
    SPI1BUF : longWord;
    SPI1BRG : longWord;
    SPI1BRGCLR : longWord;
    SPI1BRGSET : longWord;
    SPI1BRGINV : longWord;
  end;
  TUART1A_U1AMODE = record
  private
    function  getABAUD : TBits_1; assembler; nostackframe; inline;
    function  getBRGH : TBits_1; assembler; nostackframe; inline;
    function  getIREN : TBits_1; assembler; nostackframe; inline;
    function  getLPBACK : TBits_1; assembler; nostackframe; inline;
    function  getON : TBits_1; assembler; nostackframe; inline;
    function  getPDSEL : TBits_2; assembler; nostackframe; inline;
    function  getPDSEL0 : TBits_1; assembler; nostackframe; inline;
    function  getPDSEL1 : TBits_1; assembler; nostackframe; inline;
    function  getRTSMD : TBits_1; assembler; nostackframe; inline;
    function  getRXINV : TBits_1; assembler; nostackframe; inline;
    function  getSIDL : TBits_1; assembler; nostackframe; inline;
    function  getSTSEL : TBits_1; assembler; nostackframe; inline;
    function  getUARTEN : TBits_1; assembler; nostackframe; inline;
    function  getUEN : TBits_2; assembler; nostackframe; inline;
    function  getUEN0 : TBits_1; assembler; nostackframe; inline;
    function  getUEN1 : TBits_1; assembler; nostackframe; inline;
    function  getUSIDL : TBits_1; assembler; nostackframe; inline;
    function  getWAKE : TBits_1; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setABAUD(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setBRGH(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setIREN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setLPBACK(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setON(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setPDSEL(thebits : TBits_2); assembler; nostackframe; inline;
    procedure setPDSEL0(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setPDSEL1(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRTSMD(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXINV(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSIDL(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSTSEL(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setUARTEN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setUEN(thebits : TBits_2); assembler; nostackframe; inline;
    procedure setUEN0(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setUEN1(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setUSIDL(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setWAKE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearABAUD;
    procedure clearBRGH;
    procedure clearIREN;
    procedure clearLPBACK;
    procedure clearON;
    procedure clearPDSEL0;
    procedure clearPDSEL1;
    procedure clearRTSMD;
    procedure clearRXINV;
    procedure clearSIDL;
    procedure clearSTSEL;
    procedure clearUARTEN;
    procedure clearUEN0;
    procedure clearUEN1;
    procedure clearUSIDL;
    procedure clearWAKE;
    procedure setABAUD;
    procedure setBRGH;
    procedure setIREN;
    procedure setLPBACK;
    procedure setON;
    procedure setPDSEL0;
    procedure setPDSEL1;
    procedure setRTSMD;
    procedure setRXINV;
    procedure setSIDL;
    procedure setSTSEL;
    procedure setUARTEN;
    procedure setUEN0;
    procedure setUEN1;
    procedure setUSIDL;
    procedure setWAKE;
    property ABAUD : TBits_1 read getABAUD write setABAUD;
    property BRGH : TBits_1 read getBRGH write setBRGH;
    property IREN : TBits_1 read getIREN write setIREN;
    property LPBACK : TBits_1 read getLPBACK write setLPBACK;
    property ON : TBits_1 read getON write setON;
    property PDSEL : TBits_2 read getPDSEL write setPDSEL;
    property PDSEL0 : TBits_1 read getPDSEL0 write setPDSEL0;
    property PDSEL1 : TBits_1 read getPDSEL1 write setPDSEL1;
    property RTSMD : TBits_1 read getRTSMD write setRTSMD;
    property RXINV : TBits_1 read getRXINV write setRXINV;
    property SIDL : TBits_1 read getSIDL write setSIDL;
    property STSEL : TBits_1 read getSTSEL write setSTSEL;
    property UARTEN : TBits_1 read getUARTEN write setUARTEN;
    property UEN : TBits_2 read getUEN write setUEN;
    property UEN0 : TBits_1 read getUEN0 write setUEN0;
    property UEN1 : TBits_1 read getUEN1 write setUEN1;
    property USIDL : TBits_1 read getUSIDL write setUSIDL;
    property WAKE : TBits_1 read getWAKE write setWAKE;
    property w : TBits_32 read getw write setw;
  end;
  TUART1A_U1MODE = record
  private
    function  getABAUD : TBits_1; assembler; nostackframe; inline;
    function  getBRGH : TBits_1; assembler; nostackframe; inline;
    function  getIREN : TBits_1; assembler; nostackframe; inline;
    function  getLPBACK : TBits_1; assembler; nostackframe; inline;
    function  getON : TBits_1; assembler; nostackframe; inline;
    function  getPDSEL : TBits_2; assembler; nostackframe; inline;
    function  getPDSEL0 : TBits_1; assembler; nostackframe; inline;
    function  getPDSEL1 : TBits_1; assembler; nostackframe; inline;
    function  getRTSMD : TBits_1; assembler; nostackframe; inline;
    function  getRXINV : TBits_1; assembler; nostackframe; inline;
    function  getSIDL : TBits_1; assembler; nostackframe; inline;
    function  getSTSEL : TBits_1; assembler; nostackframe; inline;
    function  getUARTEN : TBits_1; assembler; nostackframe; inline;
    function  getUEN : TBits_2; assembler; nostackframe; inline;
    function  getUEN0 : TBits_1; assembler; nostackframe; inline;
    function  getUEN1 : TBits_1; assembler; nostackframe; inline;
    function  getUSIDL : TBits_1; assembler; nostackframe; inline;
    function  getWAKE : TBits_1; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setABAUD(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setBRGH(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setIREN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setLPBACK(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setON(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setPDSEL(thebits : TBits_2); assembler; nostackframe; inline;
    procedure setPDSEL0(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setPDSEL1(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRTSMD(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXINV(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSIDL(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSTSEL(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setUARTEN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setUEN(thebits : TBits_2); assembler; nostackframe; inline;
    procedure setUEN0(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setUEN1(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setUSIDL(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setWAKE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearABAUD;
    procedure clearBRGH;
    procedure clearIREN;
    procedure clearLPBACK;
    procedure clearON;
    procedure clearPDSEL0;
    procedure clearPDSEL1;
    procedure clearRTSMD;
    procedure clearRXINV;
    procedure clearSIDL;
    procedure clearSTSEL;
    procedure clearUARTEN;
    procedure clearUEN0;
    procedure clearUEN1;
    procedure clearUSIDL;
    procedure clearWAKE;
    procedure setABAUD;
    procedure setBRGH;
    procedure setIREN;
    procedure setLPBACK;
    procedure setON;
    procedure setPDSEL0;
    procedure setPDSEL1;
    procedure setRTSMD;
    procedure setRXINV;
    procedure setSIDL;
    procedure setSTSEL;
    procedure setUARTEN;
    procedure setUEN0;
    procedure setUEN1;
    procedure setUSIDL;
    procedure setWAKE;
    property ABAUD : TBits_1 read getABAUD write setABAUD;
    property BRGH : TBits_1 read getBRGH write setBRGH;
    property IREN : TBits_1 read getIREN write setIREN;
    property LPBACK : TBits_1 read getLPBACK write setLPBACK;
    property ON : TBits_1 read getON write setON;
    property PDSEL : TBits_2 read getPDSEL write setPDSEL;
    property PDSEL0 : TBits_1 read getPDSEL0 write setPDSEL0;
    property PDSEL1 : TBits_1 read getPDSEL1 write setPDSEL1;
    property RTSMD : TBits_1 read getRTSMD write setRTSMD;
    property RXINV : TBits_1 read getRXINV write setRXINV;
    property SIDL : TBits_1 read getSIDL write setSIDL;
    property STSEL : TBits_1 read getSTSEL write setSTSEL;
    property UARTEN : TBits_1 read getUARTEN write setUARTEN;
    property UEN : TBits_2 read getUEN write setUEN;
    property UEN0 : TBits_1 read getUEN0 write setUEN0;
    property UEN1 : TBits_1 read getUEN1 write setUEN1;
    property USIDL : TBits_1 read getUSIDL write setUSIDL;
    property WAKE : TBits_1 read getWAKE write setWAKE;
    property w : TBits_32 read getw write setw;
  end;
  TUART1A_U1ASTA = record
  private
    function  getADDEN : TBits_1; assembler; nostackframe; inline;
    function  getADDR : TBits_8; assembler; nostackframe; inline;
    function  getADM_EN : TBits_1; assembler; nostackframe; inline;
    function  getFERR : TBits_1; assembler; nostackframe; inline;
    function  getOERR : TBits_1; assembler; nostackframe; inline;
    function  getPERR : TBits_1; assembler; nostackframe; inline;
    function  getRIDLE : TBits_1; assembler; nostackframe; inline;
    function  getTRMT : TBits_1; assembler; nostackframe; inline;
    function  getURXDA : TBits_1; assembler; nostackframe; inline;
    function  getURXEN : TBits_1; assembler; nostackframe; inline;
    function  getURXISEL : TBits_2; assembler; nostackframe; inline;
    function  getURXISEL0 : TBits_1; assembler; nostackframe; inline;
    function  getURXISEL1 : TBits_1; assembler; nostackframe; inline;
    function  getUTXBF : TBits_1; assembler; nostackframe; inline;
    function  getUTXBRK : TBits_1; assembler; nostackframe; inline;
    function  getUTXEN : TBits_1; assembler; nostackframe; inline;
    function  getUTXINV : TBits_1; assembler; nostackframe; inline;
    function  getUTXISEL : TBits_2; assembler; nostackframe; inline;
    function  getUTXISEL0 : TBits_1; assembler; nostackframe; inline;
    function  getUTXISEL1 : TBits_1; assembler; nostackframe; inline;
    function  getUTXSEL : TBits_2; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setADDEN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setADDR(thebits : TBits_8); assembler; nostackframe; inline;
    procedure setADM_EN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setFERR(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setOERR(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setPERR(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRIDLE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTRMT(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setURXDA(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setURXEN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setURXISEL(thebits : TBits_2); assembler; nostackframe; inline;
    procedure setURXISEL0(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setURXISEL1(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setUTXBF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setUTXBRK(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setUTXEN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setUTXINV(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setUTXISEL(thebits : TBits_2); assembler; nostackframe; inline;
    procedure setUTXISEL0(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setUTXISEL1(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setUTXSEL(thebits : TBits_2); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearADDEN;
    procedure clearADM_EN;
    procedure clearFERR;
    procedure clearOERR;
    procedure clearPERR;
    procedure clearRIDLE;
    procedure clearTRMT;
    procedure clearURXDA;
    procedure clearURXEN;
    procedure clearURXISEL0;
    procedure clearURXISEL1;
    procedure clearUTXBF;
    procedure clearUTXBRK;
    procedure clearUTXEN;
    procedure clearUTXINV;
    procedure clearUTXISEL0;
    procedure clearUTXISEL1;
    procedure setADDEN;
    procedure setADM_EN;
    procedure setFERR;
    procedure setOERR;
    procedure setPERR;
    procedure setRIDLE;
    procedure setTRMT;
    procedure setURXDA;
    procedure setURXEN;
    procedure setURXISEL0;
    procedure setURXISEL1;
    procedure setUTXBF;
    procedure setUTXBRK;
    procedure setUTXEN;
    procedure setUTXINV;
    procedure setUTXISEL0;
    procedure setUTXISEL1;
    property ADDEN : TBits_1 read getADDEN write setADDEN;
    property ADDR : TBits_8 read getADDR write setADDR;
    property ADM_EN : TBits_1 read getADM_EN write setADM_EN;
    property FERR : TBits_1 read getFERR write setFERR;
    property OERR : TBits_1 read getOERR write setOERR;
    property PERR : TBits_1 read getPERR write setPERR;
    property RIDLE : TBits_1 read getRIDLE write setRIDLE;
    property TRMT : TBits_1 read getTRMT write setTRMT;
    property URXDA : TBits_1 read getURXDA write setURXDA;
    property URXEN : TBits_1 read getURXEN write setURXEN;
    property URXISEL : TBits_2 read getURXISEL write setURXISEL;
    property URXISEL0 : TBits_1 read getURXISEL0 write setURXISEL0;
    property URXISEL1 : TBits_1 read getURXISEL1 write setURXISEL1;
    property UTXBF : TBits_1 read getUTXBF write setUTXBF;
    property UTXBRK : TBits_1 read getUTXBRK write setUTXBRK;
    property UTXEN : TBits_1 read getUTXEN write setUTXEN;
    property UTXINV : TBits_1 read getUTXINV write setUTXINV;
    property UTXISEL : TBits_2 read getUTXISEL write setUTXISEL;
    property UTXISEL0 : TBits_1 read getUTXISEL0 write setUTXISEL0;
    property UTXISEL1 : TBits_1 read getUTXISEL1 write setUTXISEL1;
    property UTXSEL : TBits_2 read getUTXSEL write setUTXSEL;
    property w : TBits_32 read getw write setw;
  end;
  TUART1A_U1STA = record
  private
    function  getADDEN : TBits_1; assembler; nostackframe; inline;
    function  getADDR : TBits_8; assembler; nostackframe; inline;
    function  getADM_EN : TBits_1; assembler; nostackframe; inline;
    function  getFERR : TBits_1; assembler; nostackframe; inline;
    function  getOERR : TBits_1; assembler; nostackframe; inline;
    function  getPERR : TBits_1; assembler; nostackframe; inline;
    function  getRIDLE : TBits_1; assembler; nostackframe; inline;
    function  getTRMT : TBits_1; assembler; nostackframe; inline;
    function  getURXDA : TBits_1; assembler; nostackframe; inline;
    function  getURXEN : TBits_1; assembler; nostackframe; inline;
    function  getURXISEL : TBits_2; assembler; nostackframe; inline;
    function  getURXISEL0 : TBits_1; assembler; nostackframe; inline;
    function  getURXISEL1 : TBits_1; assembler; nostackframe; inline;
    function  getUTXBF : TBits_1; assembler; nostackframe; inline;
    function  getUTXBRK : TBits_1; assembler; nostackframe; inline;
    function  getUTXEN : TBits_1; assembler; nostackframe; inline;
    function  getUTXINV : TBits_1; assembler; nostackframe; inline;
    function  getUTXISEL : TBits_2; assembler; nostackframe; inline;
    function  getUTXISEL0 : TBits_1; assembler; nostackframe; inline;
    function  getUTXISEL1 : TBits_1; assembler; nostackframe; inline;
    function  getUTXSEL : TBits_2; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setADDEN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setADDR(thebits : TBits_8); assembler; nostackframe; inline;
    procedure setADM_EN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setFERR(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setOERR(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setPERR(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRIDLE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTRMT(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setURXDA(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setURXEN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setURXISEL(thebits : TBits_2); assembler; nostackframe; inline;
    procedure setURXISEL0(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setURXISEL1(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setUTXBF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setUTXBRK(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setUTXEN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setUTXINV(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setUTXISEL(thebits : TBits_2); assembler; nostackframe; inline;
    procedure setUTXISEL0(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setUTXISEL1(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setUTXSEL(thebits : TBits_2); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearADDEN;
    procedure clearADM_EN;
    procedure clearFERR;
    procedure clearOERR;
    procedure clearPERR;
    procedure clearRIDLE;
    procedure clearTRMT;
    procedure clearURXDA;
    procedure clearURXEN;
    procedure clearURXISEL0;
    procedure clearURXISEL1;
    procedure clearUTXBF;
    procedure clearUTXBRK;
    procedure clearUTXEN;
    procedure clearUTXINV;
    procedure clearUTXISEL0;
    procedure clearUTXISEL1;
    procedure setADDEN;
    procedure setADM_EN;
    procedure setFERR;
    procedure setOERR;
    procedure setPERR;
    procedure setRIDLE;
    procedure setTRMT;
    procedure setURXDA;
    procedure setURXEN;
    procedure setURXISEL0;
    procedure setURXISEL1;
    procedure setUTXBF;
    procedure setUTXBRK;
    procedure setUTXEN;
    procedure setUTXINV;
    procedure setUTXISEL0;
    procedure setUTXISEL1;
    property ADDEN : TBits_1 read getADDEN write setADDEN;
    property ADDR : TBits_8 read getADDR write setADDR;
    property ADM_EN : TBits_1 read getADM_EN write setADM_EN;
    property FERR : TBits_1 read getFERR write setFERR;
    property OERR : TBits_1 read getOERR write setOERR;
    property PERR : TBits_1 read getPERR write setPERR;
    property RIDLE : TBits_1 read getRIDLE write setRIDLE;
    property TRMT : TBits_1 read getTRMT write setTRMT;
    property URXDA : TBits_1 read getURXDA write setURXDA;
    property URXEN : TBits_1 read getURXEN write setURXEN;
    property URXISEL : TBits_2 read getURXISEL write setURXISEL;
    property URXISEL0 : TBits_1 read getURXISEL0 write setURXISEL0;
    property URXISEL1 : TBits_1 read getURXISEL1 write setURXISEL1;
    property UTXBF : TBits_1 read getUTXBF write setUTXBF;
    property UTXBRK : TBits_1 read getUTXBRK write setUTXBRK;
    property UTXEN : TBits_1 read getUTXEN write setUTXEN;
    property UTXINV : TBits_1 read getUTXINV write setUTXINV;
    property UTXISEL : TBits_2 read getUTXISEL write setUTXISEL;
    property UTXISEL0 : TBits_1 read getUTXISEL0 write setUTXISEL0;
    property UTXISEL1 : TBits_1 read getUTXISEL1 write setUTXISEL1;
    property UTXSEL : TBits_2 read getUTXSEL write setUTXSEL;
    property w : TBits_32 read getw write setw;
  end;
type
  TUART1ARegisters = record
    U1AMODEbits : TUART1A_U1AMODE;
    U1AMODE : longWord;
    U1MODEbits : TUART1A_U1MODE;
    U1MODE : longWord;
    U1AMODECLR : longWord;
    U1MODECLR : longWord;
    U1AMODESET : longWord;
    U1MODESET : longWord;
    U1AMODEINV : longWord;
    U1MODEINV : longWord;
    U1ASTAbits : TUART1A_U1ASTA;
    U1ASTA : longWord;
    U1STAbits : TUART1A_U1STA;
    U1STA : longWord;
    U1ASTACLR : longWord;
    U1STACLR : longWord;
    U1ASTASET : longWord;
    U1STASET : longWord;
    U1ASTAINV : longWord;
    U1STAINV : longWord;
    U1ATXREG : longWord;
    U1TXREG : longWord;
    U1ARXREG : longWord;
    U1RXREG : longWord;
    U1ABRG : longWord;
    U1BRG : longWord;
    U1ABRGCLR : longWord;
    U1BRGCLR : longWord;
    U1ABRGSET : longWord;
    U1BRGSET : longWord;
    U1ABRGINV : longWord;
    U1BRGINV : longWord;
  end;
  TUART1B_U1BMODE = record
  private
    function  getABAUD : TBits_1; assembler; nostackframe; inline;
    function  getBRGH : TBits_1; assembler; nostackframe; inline;
    function  getIREN : TBits_1; assembler; nostackframe; inline;
    function  getLPBACK : TBits_1; assembler; nostackframe; inline;
    function  getON : TBits_1; assembler; nostackframe; inline;
    function  getPDSEL : TBits_2; assembler; nostackframe; inline;
    function  getPDSEL0 : TBits_1; assembler; nostackframe; inline;
    function  getPDSEL1 : TBits_1; assembler; nostackframe; inline;
    function  getRXINV : TBits_1; assembler; nostackframe; inline;
    function  getSIDL : TBits_1; assembler; nostackframe; inline;
    function  getSTSEL : TBits_1; assembler; nostackframe; inline;
    function  getUARTEN : TBits_1; assembler; nostackframe; inline;
    function  getUSIDL : TBits_1; assembler; nostackframe; inline;
    function  getWAKE : TBits_1; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setABAUD(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setBRGH(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setIREN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setLPBACK(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setON(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setPDSEL(thebits : TBits_2); assembler; nostackframe; inline;
    procedure setPDSEL0(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setPDSEL1(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXINV(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSIDL(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSTSEL(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setUARTEN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setUSIDL(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setWAKE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearABAUD;
    procedure clearBRGH;
    procedure clearIREN;
    procedure clearLPBACK;
    procedure clearON;
    procedure clearPDSEL0;
    procedure clearPDSEL1;
    procedure clearRXINV;
    procedure clearSIDL;
    procedure clearSTSEL;
    procedure clearUARTEN;
    procedure clearUSIDL;
    procedure clearWAKE;
    procedure setABAUD;
    procedure setBRGH;
    procedure setIREN;
    procedure setLPBACK;
    procedure setON;
    procedure setPDSEL0;
    procedure setPDSEL1;
    procedure setRXINV;
    procedure setSIDL;
    procedure setSTSEL;
    procedure setUARTEN;
    procedure setUSIDL;
    procedure setWAKE;
    property ABAUD : TBits_1 read getABAUD write setABAUD;
    property BRGH : TBits_1 read getBRGH write setBRGH;
    property IREN : TBits_1 read getIREN write setIREN;
    property LPBACK : TBits_1 read getLPBACK write setLPBACK;
    property ON : TBits_1 read getON write setON;
    property PDSEL : TBits_2 read getPDSEL write setPDSEL;
    property PDSEL0 : TBits_1 read getPDSEL0 write setPDSEL0;
    property PDSEL1 : TBits_1 read getPDSEL1 write setPDSEL1;
    property RXINV : TBits_1 read getRXINV write setRXINV;
    property SIDL : TBits_1 read getSIDL write setSIDL;
    property STSEL : TBits_1 read getSTSEL write setSTSEL;
    property UARTEN : TBits_1 read getUARTEN write setUARTEN;
    property USIDL : TBits_1 read getUSIDL write setUSIDL;
    property WAKE : TBits_1 read getWAKE write setWAKE;
    property w : TBits_32 read getw write setw;
  end;
  TUART1B_U4MODE = record
  private
    function  getABAUD : TBits_1; assembler; nostackframe; inline;
    function  getBRGH : TBits_1; assembler; nostackframe; inline;
    function  getIREN : TBits_1; assembler; nostackframe; inline;
    function  getLPBACK : TBits_1; assembler; nostackframe; inline;
    function  getON : TBits_1; assembler; nostackframe; inline;
    function  getPDSEL : TBits_2; assembler; nostackframe; inline;
    function  getPDSEL0 : TBits_1; assembler; nostackframe; inline;
    function  getPDSEL1 : TBits_1; assembler; nostackframe; inline;
    function  getRXINV : TBits_1; assembler; nostackframe; inline;
    function  getSIDL : TBits_1; assembler; nostackframe; inline;
    function  getSTSEL : TBits_1; assembler; nostackframe; inline;
    function  getUARTEN : TBits_1; assembler; nostackframe; inline;
    function  getUSIDL : TBits_1; assembler; nostackframe; inline;
    function  getWAKE : TBits_1; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setABAUD(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setBRGH(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setIREN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setLPBACK(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setON(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setPDSEL(thebits : TBits_2); assembler; nostackframe; inline;
    procedure setPDSEL0(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setPDSEL1(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXINV(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSIDL(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSTSEL(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setUARTEN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setUSIDL(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setWAKE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearABAUD;
    procedure clearBRGH;
    procedure clearIREN;
    procedure clearLPBACK;
    procedure clearON;
    procedure clearPDSEL0;
    procedure clearPDSEL1;
    procedure clearRXINV;
    procedure clearSIDL;
    procedure clearSTSEL;
    procedure clearUARTEN;
    procedure clearUSIDL;
    procedure clearWAKE;
    procedure setABAUD;
    procedure setBRGH;
    procedure setIREN;
    procedure setLPBACK;
    procedure setON;
    procedure setPDSEL0;
    procedure setPDSEL1;
    procedure setRXINV;
    procedure setSIDL;
    procedure setSTSEL;
    procedure setUARTEN;
    procedure setUSIDL;
    procedure setWAKE;
    property ABAUD : TBits_1 read getABAUD write setABAUD;
    property BRGH : TBits_1 read getBRGH write setBRGH;
    property IREN : TBits_1 read getIREN write setIREN;
    property LPBACK : TBits_1 read getLPBACK write setLPBACK;
    property ON : TBits_1 read getON write setON;
    property PDSEL : TBits_2 read getPDSEL write setPDSEL;
    property PDSEL0 : TBits_1 read getPDSEL0 write setPDSEL0;
    property PDSEL1 : TBits_1 read getPDSEL1 write setPDSEL1;
    property RXINV : TBits_1 read getRXINV write setRXINV;
    property SIDL : TBits_1 read getSIDL write setSIDL;
    property STSEL : TBits_1 read getSTSEL write setSTSEL;
    property UARTEN : TBits_1 read getUARTEN write setUARTEN;
    property USIDL : TBits_1 read getUSIDL write setUSIDL;
    property WAKE : TBits_1 read getWAKE write setWAKE;
    property w : TBits_32 read getw write setw;
  end;
  TUART1B_U1BSTA = record
  private
    function  getADDEN : TBits_1; assembler; nostackframe; inline;
    function  getADDR : TBits_8; assembler; nostackframe; inline;
    function  getADM_EN : TBits_1; assembler; nostackframe; inline;
    function  getFERR : TBits_1; assembler; nostackframe; inline;
    function  getOERR : TBits_1; assembler; nostackframe; inline;
    function  getPERR : TBits_1; assembler; nostackframe; inline;
    function  getRIDLE : TBits_1; assembler; nostackframe; inline;
    function  getTRMT : TBits_1; assembler; nostackframe; inline;
    function  getURXDA : TBits_1; assembler; nostackframe; inline;
    function  getURXEN : TBits_1; assembler; nostackframe; inline;
    function  getURXISEL : TBits_2; assembler; nostackframe; inline;
    function  getURXISEL0 : TBits_1; assembler; nostackframe; inline;
    function  getURXISEL1 : TBits_1; assembler; nostackframe; inline;
    function  getUTXBF : TBits_1; assembler; nostackframe; inline;
    function  getUTXBRK : TBits_1; assembler; nostackframe; inline;
    function  getUTXEN : TBits_1; assembler; nostackframe; inline;
    function  getUTXINV : TBits_1; assembler; nostackframe; inline;
    function  getUTXISEL : TBits_2; assembler; nostackframe; inline;
    function  getUTXISEL0 : TBits_1; assembler; nostackframe; inline;
    function  getUTXISEL1 : TBits_1; assembler; nostackframe; inline;
    function  getUTXSEL : TBits_2; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setADDEN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setADDR(thebits : TBits_8); assembler; nostackframe; inline;
    procedure setADM_EN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setFERR(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setOERR(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setPERR(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRIDLE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTRMT(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setURXDA(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setURXEN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setURXISEL(thebits : TBits_2); assembler; nostackframe; inline;
    procedure setURXISEL0(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setURXISEL1(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setUTXBF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setUTXBRK(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setUTXEN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setUTXINV(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setUTXISEL(thebits : TBits_2); assembler; nostackframe; inline;
    procedure setUTXISEL0(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setUTXISEL1(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setUTXSEL(thebits : TBits_2); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearADDEN;
    procedure clearADM_EN;
    procedure clearFERR;
    procedure clearOERR;
    procedure clearPERR;
    procedure clearRIDLE;
    procedure clearTRMT;
    procedure clearURXDA;
    procedure clearURXEN;
    procedure clearURXISEL0;
    procedure clearURXISEL1;
    procedure clearUTXBF;
    procedure clearUTXBRK;
    procedure clearUTXEN;
    procedure clearUTXINV;
    procedure clearUTXISEL0;
    procedure clearUTXISEL1;
    procedure setADDEN;
    procedure setADM_EN;
    procedure setFERR;
    procedure setOERR;
    procedure setPERR;
    procedure setRIDLE;
    procedure setTRMT;
    procedure setURXDA;
    procedure setURXEN;
    procedure setURXISEL0;
    procedure setURXISEL1;
    procedure setUTXBF;
    procedure setUTXBRK;
    procedure setUTXEN;
    procedure setUTXINV;
    procedure setUTXISEL0;
    procedure setUTXISEL1;
    property ADDEN : TBits_1 read getADDEN write setADDEN;
    property ADDR : TBits_8 read getADDR write setADDR;
    property ADM_EN : TBits_1 read getADM_EN write setADM_EN;
    property FERR : TBits_1 read getFERR write setFERR;
    property OERR : TBits_1 read getOERR write setOERR;
    property PERR : TBits_1 read getPERR write setPERR;
    property RIDLE : TBits_1 read getRIDLE write setRIDLE;
    property TRMT : TBits_1 read getTRMT write setTRMT;
    property URXDA : TBits_1 read getURXDA write setURXDA;
    property URXEN : TBits_1 read getURXEN write setURXEN;
    property URXISEL : TBits_2 read getURXISEL write setURXISEL;
    property URXISEL0 : TBits_1 read getURXISEL0 write setURXISEL0;
    property URXISEL1 : TBits_1 read getURXISEL1 write setURXISEL1;
    property UTXBF : TBits_1 read getUTXBF write setUTXBF;
    property UTXBRK : TBits_1 read getUTXBRK write setUTXBRK;
    property UTXEN : TBits_1 read getUTXEN write setUTXEN;
    property UTXINV : TBits_1 read getUTXINV write setUTXINV;
    property UTXISEL : TBits_2 read getUTXISEL write setUTXISEL;
    property UTXISEL0 : TBits_1 read getUTXISEL0 write setUTXISEL0;
    property UTXISEL1 : TBits_1 read getUTXISEL1 write setUTXISEL1;
    property UTXSEL : TBits_2 read getUTXSEL write setUTXSEL;
    property w : TBits_32 read getw write setw;
  end;
  TUART1B_U4STA = record
  private
    function  getADDEN : TBits_1; assembler; nostackframe; inline;
    function  getADDR : TBits_8; assembler; nostackframe; inline;
    function  getADM_EN : TBits_1; assembler; nostackframe; inline;
    function  getFERR : TBits_1; assembler; nostackframe; inline;
    function  getOERR : TBits_1; assembler; nostackframe; inline;
    function  getPERR : TBits_1; assembler; nostackframe; inline;
    function  getRIDLE : TBits_1; assembler; nostackframe; inline;
    function  getTRMT : TBits_1; assembler; nostackframe; inline;
    function  getURXDA : TBits_1; assembler; nostackframe; inline;
    function  getURXEN : TBits_1; assembler; nostackframe; inline;
    function  getURXISEL : TBits_2; assembler; nostackframe; inline;
    function  getURXISEL0 : TBits_1; assembler; nostackframe; inline;
    function  getURXISEL1 : TBits_1; assembler; nostackframe; inline;
    function  getUTXBF : TBits_1; assembler; nostackframe; inline;
    function  getUTXBRK : TBits_1; assembler; nostackframe; inline;
    function  getUTXEN : TBits_1; assembler; nostackframe; inline;
    function  getUTXINV : TBits_1; assembler; nostackframe; inline;
    function  getUTXISEL : TBits_2; assembler; nostackframe; inline;
    function  getUTXISEL0 : TBits_1; assembler; nostackframe; inline;
    function  getUTXISEL1 : TBits_1; assembler; nostackframe; inline;
    function  getUTXSEL : TBits_2; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setADDEN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setADDR(thebits : TBits_8); assembler; nostackframe; inline;
    procedure setADM_EN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setFERR(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setOERR(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setPERR(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRIDLE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTRMT(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setURXDA(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setURXEN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setURXISEL(thebits : TBits_2); assembler; nostackframe; inline;
    procedure setURXISEL0(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setURXISEL1(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setUTXBF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setUTXBRK(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setUTXEN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setUTXINV(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setUTXISEL(thebits : TBits_2); assembler; nostackframe; inline;
    procedure setUTXISEL0(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setUTXISEL1(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setUTXSEL(thebits : TBits_2); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearADDEN;
    procedure clearADM_EN;
    procedure clearFERR;
    procedure clearOERR;
    procedure clearPERR;
    procedure clearRIDLE;
    procedure clearTRMT;
    procedure clearURXDA;
    procedure clearURXEN;
    procedure clearURXISEL0;
    procedure clearURXISEL1;
    procedure clearUTXBF;
    procedure clearUTXBRK;
    procedure clearUTXEN;
    procedure clearUTXINV;
    procedure clearUTXISEL0;
    procedure clearUTXISEL1;
    procedure setADDEN;
    procedure setADM_EN;
    procedure setFERR;
    procedure setOERR;
    procedure setPERR;
    procedure setRIDLE;
    procedure setTRMT;
    procedure setURXDA;
    procedure setURXEN;
    procedure setURXISEL0;
    procedure setURXISEL1;
    procedure setUTXBF;
    procedure setUTXBRK;
    procedure setUTXEN;
    procedure setUTXINV;
    procedure setUTXISEL0;
    procedure setUTXISEL1;
    property ADDEN : TBits_1 read getADDEN write setADDEN;
    property ADDR : TBits_8 read getADDR write setADDR;
    property ADM_EN : TBits_1 read getADM_EN write setADM_EN;
    property FERR : TBits_1 read getFERR write setFERR;
    property OERR : TBits_1 read getOERR write setOERR;
    property PERR : TBits_1 read getPERR write setPERR;
    property RIDLE : TBits_1 read getRIDLE write setRIDLE;
    property TRMT : TBits_1 read getTRMT write setTRMT;
    property URXDA : TBits_1 read getURXDA write setURXDA;
    property URXEN : TBits_1 read getURXEN write setURXEN;
    property URXISEL : TBits_2 read getURXISEL write setURXISEL;
    property URXISEL0 : TBits_1 read getURXISEL0 write setURXISEL0;
    property URXISEL1 : TBits_1 read getURXISEL1 write setURXISEL1;
    property UTXBF : TBits_1 read getUTXBF write setUTXBF;
    property UTXBRK : TBits_1 read getUTXBRK write setUTXBRK;
    property UTXEN : TBits_1 read getUTXEN write setUTXEN;
    property UTXINV : TBits_1 read getUTXINV write setUTXINV;
    property UTXISEL : TBits_2 read getUTXISEL write setUTXISEL;
    property UTXISEL0 : TBits_1 read getUTXISEL0 write setUTXISEL0;
    property UTXISEL1 : TBits_1 read getUTXISEL1 write setUTXISEL1;
    property UTXSEL : TBits_2 read getUTXSEL write setUTXSEL;
    property w : TBits_32 read getw write setw;
  end;
type
  TUART1BRegisters = record
    U1BMODEbits : TUART1B_U1BMODE;
    U1BMODE : longWord;
    U4MODEbits : TUART1B_U4MODE;
    U4MODE : longWord;
    U1BMODECLR : longWord;
    U4MODECLR : longWord;
    U1BMODESET : longWord;
    U4MODESET : longWord;
    U1BMODEINV : longWord;
    U4MODEINV : longWord;
    U1BSTAbits : TUART1B_U1BSTA;
    U1BSTA : longWord;
    U4STAbits : TUART1B_U4STA;
    U4STA : longWord;
    U1BSTACLR : longWord;
    U4STACLR : longWord;
    U1BSTASET : longWord;
    U4STASET : longWord;
    U1BSTAINV : longWord;
    U4STAINV : longWord;
    U1BTXREG : longWord;
    U4TXREG : longWord;
    U1BRXREG : longWord;
    U4RXREG : longWord;
    U1BBRG : longWord;
    U4BRG : longWord;
    U1BBRGCLR : longWord;
    U4BRGCLR : longWord;
    U1BBRGSET : longWord;
    U4BRGSET : longWord;
    U1BBRGINV : longWord;
    U4BRGINV : longWord;
  end;
  TUART2A_U2AMODE = record
  private
    function  getABAUD : TBits_1; assembler; nostackframe; inline;
    function  getBRGH : TBits_1; assembler; nostackframe; inline;
    function  getIREN : TBits_1; assembler; nostackframe; inline;
    function  getLPBACK : TBits_1; assembler; nostackframe; inline;
    function  getON : TBits_1; assembler; nostackframe; inline;
    function  getPDSEL : TBits_2; assembler; nostackframe; inline;
    function  getPDSEL0 : TBits_1; assembler; nostackframe; inline;
    function  getPDSEL1 : TBits_1; assembler; nostackframe; inline;
    function  getRTSMD : TBits_1; assembler; nostackframe; inline;
    function  getRXINV : TBits_1; assembler; nostackframe; inline;
    function  getSIDL : TBits_1; assembler; nostackframe; inline;
    function  getSTSEL : TBits_1; assembler; nostackframe; inline;
    function  getUARTEN : TBits_1; assembler; nostackframe; inline;
    function  getUEN : TBits_2; assembler; nostackframe; inline;
    function  getUEN0 : TBits_1; assembler; nostackframe; inline;
    function  getUEN1 : TBits_1; assembler; nostackframe; inline;
    function  getUSIDL : TBits_1; assembler; nostackframe; inline;
    function  getWAKE : TBits_1; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setABAUD(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setBRGH(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setIREN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setLPBACK(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setON(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setPDSEL(thebits : TBits_2); assembler; nostackframe; inline;
    procedure setPDSEL0(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setPDSEL1(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRTSMD(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXINV(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSIDL(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSTSEL(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setUARTEN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setUEN(thebits : TBits_2); assembler; nostackframe; inline;
    procedure setUEN0(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setUEN1(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setUSIDL(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setWAKE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearABAUD;
    procedure clearBRGH;
    procedure clearIREN;
    procedure clearLPBACK;
    procedure clearON;
    procedure clearPDSEL0;
    procedure clearPDSEL1;
    procedure clearRTSMD;
    procedure clearRXINV;
    procedure clearSIDL;
    procedure clearSTSEL;
    procedure clearUARTEN;
    procedure clearUEN0;
    procedure clearUEN1;
    procedure clearUSIDL;
    procedure clearWAKE;
    procedure setABAUD;
    procedure setBRGH;
    procedure setIREN;
    procedure setLPBACK;
    procedure setON;
    procedure setPDSEL0;
    procedure setPDSEL1;
    procedure setRTSMD;
    procedure setRXINV;
    procedure setSIDL;
    procedure setSTSEL;
    procedure setUARTEN;
    procedure setUEN0;
    procedure setUEN1;
    procedure setUSIDL;
    procedure setWAKE;
    property ABAUD : TBits_1 read getABAUD write setABAUD;
    property BRGH : TBits_1 read getBRGH write setBRGH;
    property IREN : TBits_1 read getIREN write setIREN;
    property LPBACK : TBits_1 read getLPBACK write setLPBACK;
    property ON : TBits_1 read getON write setON;
    property PDSEL : TBits_2 read getPDSEL write setPDSEL;
    property PDSEL0 : TBits_1 read getPDSEL0 write setPDSEL0;
    property PDSEL1 : TBits_1 read getPDSEL1 write setPDSEL1;
    property RTSMD : TBits_1 read getRTSMD write setRTSMD;
    property RXINV : TBits_1 read getRXINV write setRXINV;
    property SIDL : TBits_1 read getSIDL write setSIDL;
    property STSEL : TBits_1 read getSTSEL write setSTSEL;
    property UARTEN : TBits_1 read getUARTEN write setUARTEN;
    property UEN : TBits_2 read getUEN write setUEN;
    property UEN0 : TBits_1 read getUEN0 write setUEN0;
    property UEN1 : TBits_1 read getUEN1 write setUEN1;
    property USIDL : TBits_1 read getUSIDL write setUSIDL;
    property WAKE : TBits_1 read getWAKE write setWAKE;
    property w : TBits_32 read getw write setw;
  end;
  TUART2A_U3MODE = record
  private
    function  getABAUD : TBits_1; assembler; nostackframe; inline;
    function  getBRGH : TBits_1; assembler; nostackframe; inline;
    function  getIREN : TBits_1; assembler; nostackframe; inline;
    function  getLPBACK : TBits_1; assembler; nostackframe; inline;
    function  getON : TBits_1; assembler; nostackframe; inline;
    function  getPDSEL : TBits_2; assembler; nostackframe; inline;
    function  getPDSEL0 : TBits_1; assembler; nostackframe; inline;
    function  getPDSEL1 : TBits_1; assembler; nostackframe; inline;
    function  getRTSMD : TBits_1; assembler; nostackframe; inline;
    function  getRXINV : TBits_1; assembler; nostackframe; inline;
    function  getSIDL : TBits_1; assembler; nostackframe; inline;
    function  getSTSEL : TBits_1; assembler; nostackframe; inline;
    function  getUARTEN : TBits_1; assembler; nostackframe; inline;
    function  getUEN : TBits_2; assembler; nostackframe; inline;
    function  getUEN0 : TBits_1; assembler; nostackframe; inline;
    function  getUEN1 : TBits_1; assembler; nostackframe; inline;
    function  getUSIDL : TBits_1; assembler; nostackframe; inline;
    function  getWAKE : TBits_1; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setABAUD(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setBRGH(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setIREN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setLPBACK(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setON(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setPDSEL(thebits : TBits_2); assembler; nostackframe; inline;
    procedure setPDSEL0(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setPDSEL1(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRTSMD(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXINV(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSIDL(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSTSEL(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setUARTEN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setUEN(thebits : TBits_2); assembler; nostackframe; inline;
    procedure setUEN0(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setUEN1(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setUSIDL(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setWAKE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearABAUD;
    procedure clearBRGH;
    procedure clearIREN;
    procedure clearLPBACK;
    procedure clearON;
    procedure clearPDSEL0;
    procedure clearPDSEL1;
    procedure clearRTSMD;
    procedure clearRXINV;
    procedure clearSIDL;
    procedure clearSTSEL;
    procedure clearUARTEN;
    procedure clearUEN0;
    procedure clearUEN1;
    procedure clearUSIDL;
    procedure clearWAKE;
    procedure setABAUD;
    procedure setBRGH;
    procedure setIREN;
    procedure setLPBACK;
    procedure setON;
    procedure setPDSEL0;
    procedure setPDSEL1;
    procedure setRTSMD;
    procedure setRXINV;
    procedure setSIDL;
    procedure setSTSEL;
    procedure setUARTEN;
    procedure setUEN0;
    procedure setUEN1;
    procedure setUSIDL;
    procedure setWAKE;
    property ABAUD : TBits_1 read getABAUD write setABAUD;
    property BRGH : TBits_1 read getBRGH write setBRGH;
    property IREN : TBits_1 read getIREN write setIREN;
    property LPBACK : TBits_1 read getLPBACK write setLPBACK;
    property ON : TBits_1 read getON write setON;
    property PDSEL : TBits_2 read getPDSEL write setPDSEL;
    property PDSEL0 : TBits_1 read getPDSEL0 write setPDSEL0;
    property PDSEL1 : TBits_1 read getPDSEL1 write setPDSEL1;
    property RTSMD : TBits_1 read getRTSMD write setRTSMD;
    property RXINV : TBits_1 read getRXINV write setRXINV;
    property SIDL : TBits_1 read getSIDL write setSIDL;
    property STSEL : TBits_1 read getSTSEL write setSTSEL;
    property UARTEN : TBits_1 read getUARTEN write setUARTEN;
    property UEN : TBits_2 read getUEN write setUEN;
    property UEN0 : TBits_1 read getUEN0 write setUEN0;
    property UEN1 : TBits_1 read getUEN1 write setUEN1;
    property USIDL : TBits_1 read getUSIDL write setUSIDL;
    property WAKE : TBits_1 read getWAKE write setWAKE;
    property w : TBits_32 read getw write setw;
  end;
  TUART2A_U2ASTA = record
  private
    function  getADDEN : TBits_1; assembler; nostackframe; inline;
    function  getADDR : TBits_8; assembler; nostackframe; inline;
    function  getADM_EN : TBits_1; assembler; nostackframe; inline;
    function  getFERR : TBits_1; assembler; nostackframe; inline;
    function  getOERR : TBits_1; assembler; nostackframe; inline;
    function  getPERR : TBits_1; assembler; nostackframe; inline;
    function  getRIDLE : TBits_1; assembler; nostackframe; inline;
    function  getTRMT : TBits_1; assembler; nostackframe; inline;
    function  getURXDA : TBits_1; assembler; nostackframe; inline;
    function  getURXEN : TBits_1; assembler; nostackframe; inline;
    function  getURXISEL : TBits_2; assembler; nostackframe; inline;
    function  getURXISEL0 : TBits_1; assembler; nostackframe; inline;
    function  getURXISEL1 : TBits_1; assembler; nostackframe; inline;
    function  getUTXBF : TBits_1; assembler; nostackframe; inline;
    function  getUTXBRK : TBits_1; assembler; nostackframe; inline;
    function  getUTXEN : TBits_1; assembler; nostackframe; inline;
    function  getUTXINV : TBits_1; assembler; nostackframe; inline;
    function  getUTXISEL : TBits_2; assembler; nostackframe; inline;
    function  getUTXISEL0 : TBits_1; assembler; nostackframe; inline;
    function  getUTXISEL1 : TBits_1; assembler; nostackframe; inline;
    function  getUTXSEL : TBits_2; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setADDEN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setADDR(thebits : TBits_8); assembler; nostackframe; inline;
    procedure setADM_EN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setFERR(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setOERR(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setPERR(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRIDLE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTRMT(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setURXDA(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setURXEN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setURXISEL(thebits : TBits_2); assembler; nostackframe; inline;
    procedure setURXISEL0(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setURXISEL1(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setUTXBF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setUTXBRK(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setUTXEN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setUTXINV(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setUTXISEL(thebits : TBits_2); assembler; nostackframe; inline;
    procedure setUTXISEL0(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setUTXISEL1(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setUTXSEL(thebits : TBits_2); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearADDEN;
    procedure clearADM_EN;
    procedure clearFERR;
    procedure clearOERR;
    procedure clearPERR;
    procedure clearRIDLE;
    procedure clearTRMT;
    procedure clearURXDA;
    procedure clearURXEN;
    procedure clearURXISEL0;
    procedure clearURXISEL1;
    procedure clearUTXBF;
    procedure clearUTXBRK;
    procedure clearUTXEN;
    procedure clearUTXINV;
    procedure clearUTXISEL0;
    procedure clearUTXISEL1;
    procedure setADDEN;
    procedure setADM_EN;
    procedure setFERR;
    procedure setOERR;
    procedure setPERR;
    procedure setRIDLE;
    procedure setTRMT;
    procedure setURXDA;
    procedure setURXEN;
    procedure setURXISEL0;
    procedure setURXISEL1;
    procedure setUTXBF;
    procedure setUTXBRK;
    procedure setUTXEN;
    procedure setUTXINV;
    procedure setUTXISEL0;
    procedure setUTXISEL1;
    property ADDEN : TBits_1 read getADDEN write setADDEN;
    property ADDR : TBits_8 read getADDR write setADDR;
    property ADM_EN : TBits_1 read getADM_EN write setADM_EN;
    property FERR : TBits_1 read getFERR write setFERR;
    property OERR : TBits_1 read getOERR write setOERR;
    property PERR : TBits_1 read getPERR write setPERR;
    property RIDLE : TBits_1 read getRIDLE write setRIDLE;
    property TRMT : TBits_1 read getTRMT write setTRMT;
    property URXDA : TBits_1 read getURXDA write setURXDA;
    property URXEN : TBits_1 read getURXEN write setURXEN;
    property URXISEL : TBits_2 read getURXISEL write setURXISEL;
    property URXISEL0 : TBits_1 read getURXISEL0 write setURXISEL0;
    property URXISEL1 : TBits_1 read getURXISEL1 write setURXISEL1;
    property UTXBF : TBits_1 read getUTXBF write setUTXBF;
    property UTXBRK : TBits_1 read getUTXBRK write setUTXBRK;
    property UTXEN : TBits_1 read getUTXEN write setUTXEN;
    property UTXINV : TBits_1 read getUTXINV write setUTXINV;
    property UTXISEL : TBits_2 read getUTXISEL write setUTXISEL;
    property UTXISEL0 : TBits_1 read getUTXISEL0 write setUTXISEL0;
    property UTXISEL1 : TBits_1 read getUTXISEL1 write setUTXISEL1;
    property UTXSEL : TBits_2 read getUTXSEL write setUTXSEL;
    property w : TBits_32 read getw write setw;
  end;
  TUART2A_U3STA = record
  private
    function  getADDEN : TBits_1; assembler; nostackframe; inline;
    function  getADDR : TBits_8; assembler; nostackframe; inline;
    function  getADM_EN : TBits_1; assembler; nostackframe; inline;
    function  getFERR : TBits_1; assembler; nostackframe; inline;
    function  getOERR : TBits_1; assembler; nostackframe; inline;
    function  getPERR : TBits_1; assembler; nostackframe; inline;
    function  getRIDLE : TBits_1; assembler; nostackframe; inline;
    function  getTRMT : TBits_1; assembler; nostackframe; inline;
    function  getURXDA : TBits_1; assembler; nostackframe; inline;
    function  getURXEN : TBits_1; assembler; nostackframe; inline;
    function  getURXISEL : TBits_2; assembler; nostackframe; inline;
    function  getURXISEL0 : TBits_1; assembler; nostackframe; inline;
    function  getURXISEL1 : TBits_1; assembler; nostackframe; inline;
    function  getUTXBF : TBits_1; assembler; nostackframe; inline;
    function  getUTXBRK : TBits_1; assembler; nostackframe; inline;
    function  getUTXEN : TBits_1; assembler; nostackframe; inline;
    function  getUTXINV : TBits_1; assembler; nostackframe; inline;
    function  getUTXISEL : TBits_2; assembler; nostackframe; inline;
    function  getUTXISEL0 : TBits_1; assembler; nostackframe; inline;
    function  getUTXISEL1 : TBits_1; assembler; nostackframe; inline;
    function  getUTXSEL : TBits_2; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setADDEN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setADDR(thebits : TBits_8); assembler; nostackframe; inline;
    procedure setADM_EN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setFERR(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setOERR(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setPERR(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRIDLE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTRMT(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setURXDA(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setURXEN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setURXISEL(thebits : TBits_2); assembler; nostackframe; inline;
    procedure setURXISEL0(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setURXISEL1(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setUTXBF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setUTXBRK(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setUTXEN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setUTXINV(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setUTXISEL(thebits : TBits_2); assembler; nostackframe; inline;
    procedure setUTXISEL0(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setUTXISEL1(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setUTXSEL(thebits : TBits_2); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearADDEN;
    procedure clearADM_EN;
    procedure clearFERR;
    procedure clearOERR;
    procedure clearPERR;
    procedure clearRIDLE;
    procedure clearTRMT;
    procedure clearURXDA;
    procedure clearURXEN;
    procedure clearURXISEL0;
    procedure clearURXISEL1;
    procedure clearUTXBF;
    procedure clearUTXBRK;
    procedure clearUTXEN;
    procedure clearUTXINV;
    procedure clearUTXISEL0;
    procedure clearUTXISEL1;
    procedure setADDEN;
    procedure setADM_EN;
    procedure setFERR;
    procedure setOERR;
    procedure setPERR;
    procedure setRIDLE;
    procedure setTRMT;
    procedure setURXDA;
    procedure setURXEN;
    procedure setURXISEL0;
    procedure setURXISEL1;
    procedure setUTXBF;
    procedure setUTXBRK;
    procedure setUTXEN;
    procedure setUTXINV;
    procedure setUTXISEL0;
    procedure setUTXISEL1;
    property ADDEN : TBits_1 read getADDEN write setADDEN;
    property ADDR : TBits_8 read getADDR write setADDR;
    property ADM_EN : TBits_1 read getADM_EN write setADM_EN;
    property FERR : TBits_1 read getFERR write setFERR;
    property OERR : TBits_1 read getOERR write setOERR;
    property PERR : TBits_1 read getPERR write setPERR;
    property RIDLE : TBits_1 read getRIDLE write setRIDLE;
    property TRMT : TBits_1 read getTRMT write setTRMT;
    property URXDA : TBits_1 read getURXDA write setURXDA;
    property URXEN : TBits_1 read getURXEN write setURXEN;
    property URXISEL : TBits_2 read getURXISEL write setURXISEL;
    property URXISEL0 : TBits_1 read getURXISEL0 write setURXISEL0;
    property URXISEL1 : TBits_1 read getURXISEL1 write setURXISEL1;
    property UTXBF : TBits_1 read getUTXBF write setUTXBF;
    property UTXBRK : TBits_1 read getUTXBRK write setUTXBRK;
    property UTXEN : TBits_1 read getUTXEN write setUTXEN;
    property UTXINV : TBits_1 read getUTXINV write setUTXINV;
    property UTXISEL : TBits_2 read getUTXISEL write setUTXISEL;
    property UTXISEL0 : TBits_1 read getUTXISEL0 write setUTXISEL0;
    property UTXISEL1 : TBits_1 read getUTXISEL1 write setUTXISEL1;
    property UTXSEL : TBits_2 read getUTXSEL write setUTXSEL;
    property w : TBits_32 read getw write setw;
  end;
type
  TUART2ARegisters = record
    U2AMODEbits : TUART2A_U2AMODE;
    U2AMODE : longWord;
    U3MODEbits : TUART2A_U3MODE;
    U3MODE : longWord;
    U2AMODECLR : longWord;
    U3MODECLR : longWord;
    U2AMODESET : longWord;
    U3MODESET : longWord;
    U2AMODEINV : longWord;
    U3MODEINV : longWord;
    U2ASTAbits : TUART2A_U2ASTA;
    U2ASTA : longWord;
    U3STAbits : TUART2A_U3STA;
    U3STA : longWord;
    U2ASTACLR : longWord;
    U3STACLR : longWord;
    U2ASTASET : longWord;
    U3STASET : longWord;
    U2ASTAINV : longWord;
    U3STAINV : longWord;
    U2ATXREG : longWord;
    U3TXREG : longWord;
    U2ARXREG : longWord;
    U3RXREG : longWord;
    U2ABRG : longWord;
    U3BRG : longWord;
    U2ABRGCLR : longWord;
    U3BRGCLR : longWord;
    U2ABRGSET : longWord;
    U3BRGSET : longWord;
    U2ABRGINV : longWord;
    U3BRGINV : longWord;
  end;
  TUART2B_U2BMODE = record
  private
    function  getABAUD : TBits_1; assembler; nostackframe; inline;
    function  getBRGH : TBits_1; assembler; nostackframe; inline;
    function  getIREN : TBits_1; assembler; nostackframe; inline;
    function  getLPBACK : TBits_1; assembler; nostackframe; inline;
    function  getON : TBits_1; assembler; nostackframe; inline;
    function  getPDSEL : TBits_2; assembler; nostackframe; inline;
    function  getPDSEL0 : TBits_1; assembler; nostackframe; inline;
    function  getPDSEL1 : TBits_1; assembler; nostackframe; inline;
    function  getRXINV : TBits_1; assembler; nostackframe; inline;
    function  getSIDL : TBits_1; assembler; nostackframe; inline;
    function  getSTSEL : TBits_1; assembler; nostackframe; inline;
    function  getUARTEN : TBits_1; assembler; nostackframe; inline;
    function  getUSIDL : TBits_1; assembler; nostackframe; inline;
    function  getWAKE : TBits_1; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setABAUD(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setBRGH(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setIREN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setLPBACK(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setON(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setPDSEL(thebits : TBits_2); assembler; nostackframe; inline;
    procedure setPDSEL0(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setPDSEL1(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXINV(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSIDL(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSTSEL(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setUARTEN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setUSIDL(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setWAKE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearABAUD;
    procedure clearBRGH;
    procedure clearIREN;
    procedure clearLPBACK;
    procedure clearON;
    procedure clearPDSEL0;
    procedure clearPDSEL1;
    procedure clearRXINV;
    procedure clearSIDL;
    procedure clearSTSEL;
    procedure clearUARTEN;
    procedure clearUSIDL;
    procedure clearWAKE;
    procedure setABAUD;
    procedure setBRGH;
    procedure setIREN;
    procedure setLPBACK;
    procedure setON;
    procedure setPDSEL0;
    procedure setPDSEL1;
    procedure setRXINV;
    procedure setSIDL;
    procedure setSTSEL;
    procedure setUARTEN;
    procedure setUSIDL;
    procedure setWAKE;
    property ABAUD : TBits_1 read getABAUD write setABAUD;
    property BRGH : TBits_1 read getBRGH write setBRGH;
    property IREN : TBits_1 read getIREN write setIREN;
    property LPBACK : TBits_1 read getLPBACK write setLPBACK;
    property ON : TBits_1 read getON write setON;
    property PDSEL : TBits_2 read getPDSEL write setPDSEL;
    property PDSEL0 : TBits_1 read getPDSEL0 write setPDSEL0;
    property PDSEL1 : TBits_1 read getPDSEL1 write setPDSEL1;
    property RXINV : TBits_1 read getRXINV write setRXINV;
    property SIDL : TBits_1 read getSIDL write setSIDL;
    property STSEL : TBits_1 read getSTSEL write setSTSEL;
    property UARTEN : TBits_1 read getUARTEN write setUARTEN;
    property USIDL : TBits_1 read getUSIDL write setUSIDL;
    property WAKE : TBits_1 read getWAKE write setWAKE;
    property w : TBits_32 read getw write setw;
  end;
  TUART2B_U6MODE = record
  private
    function  getABAUD : TBits_1; assembler; nostackframe; inline;
    function  getBRGH : TBits_1; assembler; nostackframe; inline;
    function  getIREN : TBits_1; assembler; nostackframe; inline;
    function  getLPBACK : TBits_1; assembler; nostackframe; inline;
    function  getON : TBits_1; assembler; nostackframe; inline;
    function  getPDSEL : TBits_2; assembler; nostackframe; inline;
    function  getPDSEL0 : TBits_1; assembler; nostackframe; inline;
    function  getPDSEL1 : TBits_1; assembler; nostackframe; inline;
    function  getRXINV : TBits_1; assembler; nostackframe; inline;
    function  getSIDL : TBits_1; assembler; nostackframe; inline;
    function  getSTSEL : TBits_1; assembler; nostackframe; inline;
    function  getUARTEN : TBits_1; assembler; nostackframe; inline;
    function  getUSIDL : TBits_1; assembler; nostackframe; inline;
    function  getWAKE : TBits_1; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setABAUD(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setBRGH(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setIREN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setLPBACK(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setON(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setPDSEL(thebits : TBits_2); assembler; nostackframe; inline;
    procedure setPDSEL0(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setPDSEL1(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXINV(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSIDL(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSTSEL(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setUARTEN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setUSIDL(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setWAKE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearABAUD;
    procedure clearBRGH;
    procedure clearIREN;
    procedure clearLPBACK;
    procedure clearON;
    procedure clearPDSEL0;
    procedure clearPDSEL1;
    procedure clearRXINV;
    procedure clearSIDL;
    procedure clearSTSEL;
    procedure clearUARTEN;
    procedure clearUSIDL;
    procedure clearWAKE;
    procedure setABAUD;
    procedure setBRGH;
    procedure setIREN;
    procedure setLPBACK;
    procedure setON;
    procedure setPDSEL0;
    procedure setPDSEL1;
    procedure setRXINV;
    procedure setSIDL;
    procedure setSTSEL;
    procedure setUARTEN;
    procedure setUSIDL;
    procedure setWAKE;
    property ABAUD : TBits_1 read getABAUD write setABAUD;
    property BRGH : TBits_1 read getBRGH write setBRGH;
    property IREN : TBits_1 read getIREN write setIREN;
    property LPBACK : TBits_1 read getLPBACK write setLPBACK;
    property ON : TBits_1 read getON write setON;
    property PDSEL : TBits_2 read getPDSEL write setPDSEL;
    property PDSEL0 : TBits_1 read getPDSEL0 write setPDSEL0;
    property PDSEL1 : TBits_1 read getPDSEL1 write setPDSEL1;
    property RXINV : TBits_1 read getRXINV write setRXINV;
    property SIDL : TBits_1 read getSIDL write setSIDL;
    property STSEL : TBits_1 read getSTSEL write setSTSEL;
    property UARTEN : TBits_1 read getUARTEN write setUARTEN;
    property USIDL : TBits_1 read getUSIDL write setUSIDL;
    property WAKE : TBits_1 read getWAKE write setWAKE;
    property w : TBits_32 read getw write setw;
  end;
  TUART2B_U2BSTA = record
  private
    function  getADDEN : TBits_1; assembler; nostackframe; inline;
    function  getADDR : TBits_8; assembler; nostackframe; inline;
    function  getADM_EN : TBits_1; assembler; nostackframe; inline;
    function  getFERR : TBits_1; assembler; nostackframe; inline;
    function  getOERR : TBits_1; assembler; nostackframe; inline;
    function  getPERR : TBits_1; assembler; nostackframe; inline;
    function  getRIDLE : TBits_1; assembler; nostackframe; inline;
    function  getTRMT : TBits_1; assembler; nostackframe; inline;
    function  getURXDA : TBits_1; assembler; nostackframe; inline;
    function  getURXEN : TBits_1; assembler; nostackframe; inline;
    function  getURXISEL : TBits_2; assembler; nostackframe; inline;
    function  getURXISEL0 : TBits_1; assembler; nostackframe; inline;
    function  getURXISEL1 : TBits_1; assembler; nostackframe; inline;
    function  getUTXBF : TBits_1; assembler; nostackframe; inline;
    function  getUTXBRK : TBits_1; assembler; nostackframe; inline;
    function  getUTXEN : TBits_1; assembler; nostackframe; inline;
    function  getUTXINV : TBits_1; assembler; nostackframe; inline;
    function  getUTXISEL : TBits_2; assembler; nostackframe; inline;
    function  getUTXISEL0 : TBits_1; assembler; nostackframe; inline;
    function  getUTXISEL1 : TBits_1; assembler; nostackframe; inline;
    function  getUTXSEL : TBits_2; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setADDEN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setADDR(thebits : TBits_8); assembler; nostackframe; inline;
    procedure setADM_EN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setFERR(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setOERR(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setPERR(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRIDLE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTRMT(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setURXDA(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setURXEN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setURXISEL(thebits : TBits_2); assembler; nostackframe; inline;
    procedure setURXISEL0(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setURXISEL1(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setUTXBF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setUTXBRK(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setUTXEN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setUTXINV(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setUTXISEL(thebits : TBits_2); assembler; nostackframe; inline;
    procedure setUTXISEL0(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setUTXISEL1(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setUTXSEL(thebits : TBits_2); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearADDEN;
    procedure clearADM_EN;
    procedure clearFERR;
    procedure clearOERR;
    procedure clearPERR;
    procedure clearRIDLE;
    procedure clearTRMT;
    procedure clearURXDA;
    procedure clearURXEN;
    procedure clearURXISEL0;
    procedure clearURXISEL1;
    procedure clearUTXBF;
    procedure clearUTXBRK;
    procedure clearUTXEN;
    procedure clearUTXINV;
    procedure clearUTXISEL0;
    procedure clearUTXISEL1;
    procedure setADDEN;
    procedure setADM_EN;
    procedure setFERR;
    procedure setOERR;
    procedure setPERR;
    procedure setRIDLE;
    procedure setTRMT;
    procedure setURXDA;
    procedure setURXEN;
    procedure setURXISEL0;
    procedure setURXISEL1;
    procedure setUTXBF;
    procedure setUTXBRK;
    procedure setUTXEN;
    procedure setUTXINV;
    procedure setUTXISEL0;
    procedure setUTXISEL1;
    property ADDEN : TBits_1 read getADDEN write setADDEN;
    property ADDR : TBits_8 read getADDR write setADDR;
    property ADM_EN : TBits_1 read getADM_EN write setADM_EN;
    property FERR : TBits_1 read getFERR write setFERR;
    property OERR : TBits_1 read getOERR write setOERR;
    property PERR : TBits_1 read getPERR write setPERR;
    property RIDLE : TBits_1 read getRIDLE write setRIDLE;
    property TRMT : TBits_1 read getTRMT write setTRMT;
    property URXDA : TBits_1 read getURXDA write setURXDA;
    property URXEN : TBits_1 read getURXEN write setURXEN;
    property URXISEL : TBits_2 read getURXISEL write setURXISEL;
    property URXISEL0 : TBits_1 read getURXISEL0 write setURXISEL0;
    property URXISEL1 : TBits_1 read getURXISEL1 write setURXISEL1;
    property UTXBF : TBits_1 read getUTXBF write setUTXBF;
    property UTXBRK : TBits_1 read getUTXBRK write setUTXBRK;
    property UTXEN : TBits_1 read getUTXEN write setUTXEN;
    property UTXINV : TBits_1 read getUTXINV write setUTXINV;
    property UTXISEL : TBits_2 read getUTXISEL write setUTXISEL;
    property UTXISEL0 : TBits_1 read getUTXISEL0 write setUTXISEL0;
    property UTXISEL1 : TBits_1 read getUTXISEL1 write setUTXISEL1;
    property UTXSEL : TBits_2 read getUTXSEL write setUTXSEL;
    property w : TBits_32 read getw write setw;
  end;
  TUART2B_U6STA = record
  private
    function  getADDEN : TBits_1; assembler; nostackframe; inline;
    function  getADDR : TBits_8; assembler; nostackframe; inline;
    function  getADM_EN : TBits_1; assembler; nostackframe; inline;
    function  getFERR : TBits_1; assembler; nostackframe; inline;
    function  getOERR : TBits_1; assembler; nostackframe; inline;
    function  getPERR : TBits_1; assembler; nostackframe; inline;
    function  getRIDLE : TBits_1; assembler; nostackframe; inline;
    function  getTRMT : TBits_1; assembler; nostackframe; inline;
    function  getURXDA : TBits_1; assembler; nostackframe; inline;
    function  getURXEN : TBits_1; assembler; nostackframe; inline;
    function  getURXISEL : TBits_2; assembler; nostackframe; inline;
    function  getURXISEL0 : TBits_1; assembler; nostackframe; inline;
    function  getURXISEL1 : TBits_1; assembler; nostackframe; inline;
    function  getUTXBF : TBits_1; assembler; nostackframe; inline;
    function  getUTXBRK : TBits_1; assembler; nostackframe; inline;
    function  getUTXEN : TBits_1; assembler; nostackframe; inline;
    function  getUTXINV : TBits_1; assembler; nostackframe; inline;
    function  getUTXISEL : TBits_2; assembler; nostackframe; inline;
    function  getUTXISEL0 : TBits_1; assembler; nostackframe; inline;
    function  getUTXISEL1 : TBits_1; assembler; nostackframe; inline;
    function  getUTXSEL : TBits_2; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setADDEN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setADDR(thebits : TBits_8); assembler; nostackframe; inline;
    procedure setADM_EN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setFERR(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setOERR(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setPERR(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRIDLE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTRMT(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setURXDA(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setURXEN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setURXISEL(thebits : TBits_2); assembler; nostackframe; inline;
    procedure setURXISEL0(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setURXISEL1(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setUTXBF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setUTXBRK(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setUTXEN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setUTXINV(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setUTXISEL(thebits : TBits_2); assembler; nostackframe; inline;
    procedure setUTXISEL0(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setUTXISEL1(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setUTXSEL(thebits : TBits_2); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearADDEN;
    procedure clearADM_EN;
    procedure clearFERR;
    procedure clearOERR;
    procedure clearPERR;
    procedure clearRIDLE;
    procedure clearTRMT;
    procedure clearURXDA;
    procedure clearURXEN;
    procedure clearURXISEL0;
    procedure clearURXISEL1;
    procedure clearUTXBF;
    procedure clearUTXBRK;
    procedure clearUTXEN;
    procedure clearUTXINV;
    procedure clearUTXISEL0;
    procedure clearUTXISEL1;
    procedure setADDEN;
    procedure setADM_EN;
    procedure setFERR;
    procedure setOERR;
    procedure setPERR;
    procedure setRIDLE;
    procedure setTRMT;
    procedure setURXDA;
    procedure setURXEN;
    procedure setURXISEL0;
    procedure setURXISEL1;
    procedure setUTXBF;
    procedure setUTXBRK;
    procedure setUTXEN;
    procedure setUTXINV;
    procedure setUTXISEL0;
    procedure setUTXISEL1;
    property ADDEN : TBits_1 read getADDEN write setADDEN;
    property ADDR : TBits_8 read getADDR write setADDR;
    property ADM_EN : TBits_1 read getADM_EN write setADM_EN;
    property FERR : TBits_1 read getFERR write setFERR;
    property OERR : TBits_1 read getOERR write setOERR;
    property PERR : TBits_1 read getPERR write setPERR;
    property RIDLE : TBits_1 read getRIDLE write setRIDLE;
    property TRMT : TBits_1 read getTRMT write setTRMT;
    property URXDA : TBits_1 read getURXDA write setURXDA;
    property URXEN : TBits_1 read getURXEN write setURXEN;
    property URXISEL : TBits_2 read getURXISEL write setURXISEL;
    property URXISEL0 : TBits_1 read getURXISEL0 write setURXISEL0;
    property URXISEL1 : TBits_1 read getURXISEL1 write setURXISEL1;
    property UTXBF : TBits_1 read getUTXBF write setUTXBF;
    property UTXBRK : TBits_1 read getUTXBRK write setUTXBRK;
    property UTXEN : TBits_1 read getUTXEN write setUTXEN;
    property UTXINV : TBits_1 read getUTXINV write setUTXINV;
    property UTXISEL : TBits_2 read getUTXISEL write setUTXISEL;
    property UTXISEL0 : TBits_1 read getUTXISEL0 write setUTXISEL0;
    property UTXISEL1 : TBits_1 read getUTXISEL1 write setUTXISEL1;
    property UTXSEL : TBits_2 read getUTXSEL write setUTXSEL;
    property w : TBits_32 read getw write setw;
  end;
type
  TUART2BRegisters = record
    U2BMODEbits : TUART2B_U2BMODE;
    U2BMODE : longWord;
    U6MODEbits : TUART2B_U6MODE;
    U6MODE : longWord;
    U2BMODECLR : longWord;
    U6MODECLR : longWord;
    U2BMODESET : longWord;
    U6MODESET : longWord;
    U2BMODEINV : longWord;
    U6MODEINV : longWord;
    U2BSTAbits : TUART2B_U2BSTA;
    U2BSTA : longWord;
    U6STAbits : TUART2B_U6STA;
    U6STA : longWord;
    U2BSTACLR : longWord;
    U6STACLR : longWord;
    U2BSTASET : longWord;
    U6STASET : longWord;
    U2BSTAINV : longWord;
    U6STAINV : longWord;
    U2BTXREG : longWord;
    U6TXREG : longWord;
    U2BRXREG : longWord;
    U6RXREG : longWord;
    U2BBRG : longWord;
    U6BRG : longWord;
    U2BBRGCLR : longWord;
    U6BRGCLR : longWord;
    U2BBRGSET : longWord;
    U6BRGSET : longWord;
    U2BBRGINV : longWord;
    U6BRGINV : longWord;
  end;
  TUART3A_U2MODE = record
  private
    function  getABAUD : TBits_1; assembler; nostackframe; inline;
    function  getBRGH : TBits_1; assembler; nostackframe; inline;
    function  getIREN : TBits_1; assembler; nostackframe; inline;
    function  getLPBACK : TBits_1; assembler; nostackframe; inline;
    function  getON : TBits_1; assembler; nostackframe; inline;
    function  getPDSEL : TBits_2; assembler; nostackframe; inline;
    function  getPDSEL0 : TBits_1; assembler; nostackframe; inline;
    function  getPDSEL1 : TBits_1; assembler; nostackframe; inline;
    function  getRTSMD : TBits_1; assembler; nostackframe; inline;
    function  getRXINV : TBits_1; assembler; nostackframe; inline;
    function  getSIDL : TBits_1; assembler; nostackframe; inline;
    function  getSTSEL : TBits_1; assembler; nostackframe; inline;
    function  getUARTEN : TBits_1; assembler; nostackframe; inline;
    function  getUEN : TBits_2; assembler; nostackframe; inline;
    function  getUEN0 : TBits_1; assembler; nostackframe; inline;
    function  getUEN1 : TBits_1; assembler; nostackframe; inline;
    function  getUSIDL : TBits_1; assembler; nostackframe; inline;
    function  getWAKE : TBits_1; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setABAUD(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setBRGH(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setIREN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setLPBACK(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setON(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setPDSEL(thebits : TBits_2); assembler; nostackframe; inline;
    procedure setPDSEL0(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setPDSEL1(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRTSMD(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXINV(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSIDL(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSTSEL(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setUARTEN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setUEN(thebits : TBits_2); assembler; nostackframe; inline;
    procedure setUEN0(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setUEN1(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setUSIDL(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setWAKE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearABAUD;
    procedure clearBRGH;
    procedure clearIREN;
    procedure clearLPBACK;
    procedure clearON;
    procedure clearPDSEL0;
    procedure clearPDSEL1;
    procedure clearRTSMD;
    procedure clearRXINV;
    procedure clearSIDL;
    procedure clearSTSEL;
    procedure clearUARTEN;
    procedure clearUEN0;
    procedure clearUEN1;
    procedure clearUSIDL;
    procedure clearWAKE;
    procedure setABAUD;
    procedure setBRGH;
    procedure setIREN;
    procedure setLPBACK;
    procedure setON;
    procedure setPDSEL0;
    procedure setPDSEL1;
    procedure setRTSMD;
    procedure setRXINV;
    procedure setSIDL;
    procedure setSTSEL;
    procedure setUARTEN;
    procedure setUEN0;
    procedure setUEN1;
    procedure setUSIDL;
    procedure setWAKE;
    property ABAUD : TBits_1 read getABAUD write setABAUD;
    property BRGH : TBits_1 read getBRGH write setBRGH;
    property IREN : TBits_1 read getIREN write setIREN;
    property LPBACK : TBits_1 read getLPBACK write setLPBACK;
    property ON : TBits_1 read getON write setON;
    property PDSEL : TBits_2 read getPDSEL write setPDSEL;
    property PDSEL0 : TBits_1 read getPDSEL0 write setPDSEL0;
    property PDSEL1 : TBits_1 read getPDSEL1 write setPDSEL1;
    property RTSMD : TBits_1 read getRTSMD write setRTSMD;
    property RXINV : TBits_1 read getRXINV write setRXINV;
    property SIDL : TBits_1 read getSIDL write setSIDL;
    property STSEL : TBits_1 read getSTSEL write setSTSEL;
    property UARTEN : TBits_1 read getUARTEN write setUARTEN;
    property UEN : TBits_2 read getUEN write setUEN;
    property UEN0 : TBits_1 read getUEN0 write setUEN0;
    property UEN1 : TBits_1 read getUEN1 write setUEN1;
    property USIDL : TBits_1 read getUSIDL write setUSIDL;
    property WAKE : TBits_1 read getWAKE write setWAKE;
    property w : TBits_32 read getw write setw;
  end;
  TUART3A_U3AMODE = record
  private
    function  getABAUD : TBits_1; assembler; nostackframe; inline;
    function  getBRGH : TBits_1; assembler; nostackframe; inline;
    function  getIREN : TBits_1; assembler; nostackframe; inline;
    function  getLPBACK : TBits_1; assembler; nostackframe; inline;
    function  getON : TBits_1; assembler; nostackframe; inline;
    function  getPDSEL : TBits_2; assembler; nostackframe; inline;
    function  getPDSEL0 : TBits_1; assembler; nostackframe; inline;
    function  getPDSEL1 : TBits_1; assembler; nostackframe; inline;
    function  getRTSMD : TBits_1; assembler; nostackframe; inline;
    function  getRXINV : TBits_1; assembler; nostackframe; inline;
    function  getSIDL : TBits_1; assembler; nostackframe; inline;
    function  getSTSEL : TBits_1; assembler; nostackframe; inline;
    function  getUARTEN : TBits_1; assembler; nostackframe; inline;
    function  getUEN : TBits_2; assembler; nostackframe; inline;
    function  getUEN0 : TBits_1; assembler; nostackframe; inline;
    function  getUEN1 : TBits_1; assembler; nostackframe; inline;
    function  getUSIDL : TBits_1; assembler; nostackframe; inline;
    function  getWAKE : TBits_1; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setABAUD(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setBRGH(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setIREN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setLPBACK(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setON(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setPDSEL(thebits : TBits_2); assembler; nostackframe; inline;
    procedure setPDSEL0(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setPDSEL1(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRTSMD(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXINV(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSIDL(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSTSEL(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setUARTEN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setUEN(thebits : TBits_2); assembler; nostackframe; inline;
    procedure setUEN0(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setUEN1(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setUSIDL(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setWAKE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearABAUD;
    procedure clearBRGH;
    procedure clearIREN;
    procedure clearLPBACK;
    procedure clearON;
    procedure clearPDSEL0;
    procedure clearPDSEL1;
    procedure clearRTSMD;
    procedure clearRXINV;
    procedure clearSIDL;
    procedure clearSTSEL;
    procedure clearUARTEN;
    procedure clearUEN0;
    procedure clearUEN1;
    procedure clearUSIDL;
    procedure clearWAKE;
    procedure setABAUD;
    procedure setBRGH;
    procedure setIREN;
    procedure setLPBACK;
    procedure setON;
    procedure setPDSEL0;
    procedure setPDSEL1;
    procedure setRTSMD;
    procedure setRXINV;
    procedure setSIDL;
    procedure setSTSEL;
    procedure setUARTEN;
    procedure setUEN0;
    procedure setUEN1;
    procedure setUSIDL;
    procedure setWAKE;
    property ABAUD : TBits_1 read getABAUD write setABAUD;
    property BRGH : TBits_1 read getBRGH write setBRGH;
    property IREN : TBits_1 read getIREN write setIREN;
    property LPBACK : TBits_1 read getLPBACK write setLPBACK;
    property ON : TBits_1 read getON write setON;
    property PDSEL : TBits_2 read getPDSEL write setPDSEL;
    property PDSEL0 : TBits_1 read getPDSEL0 write setPDSEL0;
    property PDSEL1 : TBits_1 read getPDSEL1 write setPDSEL1;
    property RTSMD : TBits_1 read getRTSMD write setRTSMD;
    property RXINV : TBits_1 read getRXINV write setRXINV;
    property SIDL : TBits_1 read getSIDL write setSIDL;
    property STSEL : TBits_1 read getSTSEL write setSTSEL;
    property UARTEN : TBits_1 read getUARTEN write setUARTEN;
    property UEN : TBits_2 read getUEN write setUEN;
    property UEN0 : TBits_1 read getUEN0 write setUEN0;
    property UEN1 : TBits_1 read getUEN1 write setUEN1;
    property USIDL : TBits_1 read getUSIDL write setUSIDL;
    property WAKE : TBits_1 read getWAKE write setWAKE;
    property w : TBits_32 read getw write setw;
  end;
  TUART3A_U2STA = record
  private
    function  getADDEN : TBits_1; assembler; nostackframe; inline;
    function  getADDR : TBits_8; assembler; nostackframe; inline;
    function  getADM_EN : TBits_1; assembler; nostackframe; inline;
    function  getFERR : TBits_1; assembler; nostackframe; inline;
    function  getOERR : TBits_1; assembler; nostackframe; inline;
    function  getPERR : TBits_1; assembler; nostackframe; inline;
    function  getRIDLE : TBits_1; assembler; nostackframe; inline;
    function  getTRMT : TBits_1; assembler; nostackframe; inline;
    function  getURXDA : TBits_1; assembler; nostackframe; inline;
    function  getURXEN : TBits_1; assembler; nostackframe; inline;
    function  getURXISEL : TBits_2; assembler; nostackframe; inline;
    function  getURXISEL0 : TBits_1; assembler; nostackframe; inline;
    function  getURXISEL1 : TBits_1; assembler; nostackframe; inline;
    function  getUTXBF : TBits_1; assembler; nostackframe; inline;
    function  getUTXBRK : TBits_1; assembler; nostackframe; inline;
    function  getUTXEN : TBits_1; assembler; nostackframe; inline;
    function  getUTXINV : TBits_1; assembler; nostackframe; inline;
    function  getUTXISEL : TBits_2; assembler; nostackframe; inline;
    function  getUTXISEL0 : TBits_1; assembler; nostackframe; inline;
    function  getUTXISEL1 : TBits_1; assembler; nostackframe; inline;
    function  getUTXSEL : TBits_2; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setADDEN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setADDR(thebits : TBits_8); assembler; nostackframe; inline;
    procedure setADM_EN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setFERR(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setOERR(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setPERR(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRIDLE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTRMT(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setURXDA(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setURXEN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setURXISEL(thebits : TBits_2); assembler; nostackframe; inline;
    procedure setURXISEL0(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setURXISEL1(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setUTXBF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setUTXBRK(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setUTXEN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setUTXINV(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setUTXISEL(thebits : TBits_2); assembler; nostackframe; inline;
    procedure setUTXISEL0(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setUTXISEL1(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setUTXSEL(thebits : TBits_2); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearADDEN;
    procedure clearADM_EN;
    procedure clearFERR;
    procedure clearOERR;
    procedure clearPERR;
    procedure clearRIDLE;
    procedure clearTRMT;
    procedure clearURXDA;
    procedure clearURXEN;
    procedure clearURXISEL0;
    procedure clearURXISEL1;
    procedure clearUTXBF;
    procedure clearUTXBRK;
    procedure clearUTXEN;
    procedure clearUTXINV;
    procedure clearUTXISEL0;
    procedure clearUTXISEL1;
    procedure setADDEN;
    procedure setADM_EN;
    procedure setFERR;
    procedure setOERR;
    procedure setPERR;
    procedure setRIDLE;
    procedure setTRMT;
    procedure setURXDA;
    procedure setURXEN;
    procedure setURXISEL0;
    procedure setURXISEL1;
    procedure setUTXBF;
    procedure setUTXBRK;
    procedure setUTXEN;
    procedure setUTXINV;
    procedure setUTXISEL0;
    procedure setUTXISEL1;
    property ADDEN : TBits_1 read getADDEN write setADDEN;
    property ADDR : TBits_8 read getADDR write setADDR;
    property ADM_EN : TBits_1 read getADM_EN write setADM_EN;
    property FERR : TBits_1 read getFERR write setFERR;
    property OERR : TBits_1 read getOERR write setOERR;
    property PERR : TBits_1 read getPERR write setPERR;
    property RIDLE : TBits_1 read getRIDLE write setRIDLE;
    property TRMT : TBits_1 read getTRMT write setTRMT;
    property URXDA : TBits_1 read getURXDA write setURXDA;
    property URXEN : TBits_1 read getURXEN write setURXEN;
    property URXISEL : TBits_2 read getURXISEL write setURXISEL;
    property URXISEL0 : TBits_1 read getURXISEL0 write setURXISEL0;
    property URXISEL1 : TBits_1 read getURXISEL1 write setURXISEL1;
    property UTXBF : TBits_1 read getUTXBF write setUTXBF;
    property UTXBRK : TBits_1 read getUTXBRK write setUTXBRK;
    property UTXEN : TBits_1 read getUTXEN write setUTXEN;
    property UTXINV : TBits_1 read getUTXINV write setUTXINV;
    property UTXISEL : TBits_2 read getUTXISEL write setUTXISEL;
    property UTXISEL0 : TBits_1 read getUTXISEL0 write setUTXISEL0;
    property UTXISEL1 : TBits_1 read getUTXISEL1 write setUTXISEL1;
    property UTXSEL : TBits_2 read getUTXSEL write setUTXSEL;
    property w : TBits_32 read getw write setw;
  end;
  TUART3A_U3ASTA = record
  private
    function  getADDEN : TBits_1; assembler; nostackframe; inline;
    function  getADDR : TBits_8; assembler; nostackframe; inline;
    function  getADM_EN : TBits_1; assembler; nostackframe; inline;
    function  getFERR : TBits_1; assembler; nostackframe; inline;
    function  getOERR : TBits_1; assembler; nostackframe; inline;
    function  getPERR : TBits_1; assembler; nostackframe; inline;
    function  getRIDLE : TBits_1; assembler; nostackframe; inline;
    function  getTRMT : TBits_1; assembler; nostackframe; inline;
    function  getURXDA : TBits_1; assembler; nostackframe; inline;
    function  getURXEN : TBits_1; assembler; nostackframe; inline;
    function  getURXISEL : TBits_2; assembler; nostackframe; inline;
    function  getURXISEL0 : TBits_1; assembler; nostackframe; inline;
    function  getURXISEL1 : TBits_1; assembler; nostackframe; inline;
    function  getUTXBF : TBits_1; assembler; nostackframe; inline;
    function  getUTXBRK : TBits_1; assembler; nostackframe; inline;
    function  getUTXEN : TBits_1; assembler; nostackframe; inline;
    function  getUTXINV : TBits_1; assembler; nostackframe; inline;
    function  getUTXISEL : TBits_2; assembler; nostackframe; inline;
    function  getUTXISEL0 : TBits_1; assembler; nostackframe; inline;
    function  getUTXISEL1 : TBits_1; assembler; nostackframe; inline;
    function  getUTXSEL : TBits_2; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setADDEN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setADDR(thebits : TBits_8); assembler; nostackframe; inline;
    procedure setADM_EN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setFERR(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setOERR(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setPERR(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRIDLE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTRMT(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setURXDA(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setURXEN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setURXISEL(thebits : TBits_2); assembler; nostackframe; inline;
    procedure setURXISEL0(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setURXISEL1(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setUTXBF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setUTXBRK(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setUTXEN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setUTXINV(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setUTXISEL(thebits : TBits_2); assembler; nostackframe; inline;
    procedure setUTXISEL0(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setUTXISEL1(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setUTXSEL(thebits : TBits_2); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearADDEN;
    procedure clearADM_EN;
    procedure clearFERR;
    procedure clearOERR;
    procedure clearPERR;
    procedure clearRIDLE;
    procedure clearTRMT;
    procedure clearURXDA;
    procedure clearURXEN;
    procedure clearURXISEL0;
    procedure clearURXISEL1;
    procedure clearUTXBF;
    procedure clearUTXBRK;
    procedure clearUTXEN;
    procedure clearUTXINV;
    procedure clearUTXISEL0;
    procedure clearUTXISEL1;
    procedure setADDEN;
    procedure setADM_EN;
    procedure setFERR;
    procedure setOERR;
    procedure setPERR;
    procedure setRIDLE;
    procedure setTRMT;
    procedure setURXDA;
    procedure setURXEN;
    procedure setURXISEL0;
    procedure setURXISEL1;
    procedure setUTXBF;
    procedure setUTXBRK;
    procedure setUTXEN;
    procedure setUTXINV;
    procedure setUTXISEL0;
    procedure setUTXISEL1;
    property ADDEN : TBits_1 read getADDEN write setADDEN;
    property ADDR : TBits_8 read getADDR write setADDR;
    property ADM_EN : TBits_1 read getADM_EN write setADM_EN;
    property FERR : TBits_1 read getFERR write setFERR;
    property OERR : TBits_1 read getOERR write setOERR;
    property PERR : TBits_1 read getPERR write setPERR;
    property RIDLE : TBits_1 read getRIDLE write setRIDLE;
    property TRMT : TBits_1 read getTRMT write setTRMT;
    property URXDA : TBits_1 read getURXDA write setURXDA;
    property URXEN : TBits_1 read getURXEN write setURXEN;
    property URXISEL : TBits_2 read getURXISEL write setURXISEL;
    property URXISEL0 : TBits_1 read getURXISEL0 write setURXISEL0;
    property URXISEL1 : TBits_1 read getURXISEL1 write setURXISEL1;
    property UTXBF : TBits_1 read getUTXBF write setUTXBF;
    property UTXBRK : TBits_1 read getUTXBRK write setUTXBRK;
    property UTXEN : TBits_1 read getUTXEN write setUTXEN;
    property UTXINV : TBits_1 read getUTXINV write setUTXINV;
    property UTXISEL : TBits_2 read getUTXISEL write setUTXISEL;
    property UTXISEL0 : TBits_1 read getUTXISEL0 write setUTXISEL0;
    property UTXISEL1 : TBits_1 read getUTXISEL1 write setUTXISEL1;
    property UTXSEL : TBits_2 read getUTXSEL write setUTXSEL;
    property w : TBits_32 read getw write setw;
  end;
type
  TUART3ARegisters = record
    U2MODEbits : TUART3A_U2MODE;
    U2MODE : longWord;
    U3AMODEbits : TUART3A_U3AMODE;
    U3AMODE : longWord;
    U2MODECLR : longWord;
    U3AMODECLR : longWord;
    U2MODESET : longWord;
    U3AMODESET : longWord;
    U2MODEINV : longWord;
    U3AMODEINV : longWord;
    U2STAbits : TUART3A_U2STA;
    U2STA : longWord;
    U3ASTAbits : TUART3A_U3ASTA;
    U3ASTA : longWord;
    U2STACLR : longWord;
    U3ASTACLR : longWord;
    U2STASET : longWord;
    U3ASTASET : longWord;
    U2STAINV : longWord;
    U3ASTAINV : longWord;
    U2TXREG : longWord;
    U3ATXREG : longWord;
    U2RXREG : longWord;
    U3ARXREG : longWord;
    U2BRG : longWord;
    U3ABRG : longWord;
    U2BRGCLR : longWord;
    U3ABRGCLR : longWord;
    U2BRGSET : longWord;
    U3ABRGSET : longWord;
    U2BRGINV : longWord;
    U3ABRGINV : longWord;
  end;
  TUART5_U3BMODE = record
  private
    function  getABAUD : TBits_1; assembler; nostackframe; inline;
    function  getBRGH : TBits_1; assembler; nostackframe; inline;
    function  getIREN : TBits_1; assembler; nostackframe; inline;
    function  getLPBACK : TBits_1; assembler; nostackframe; inline;
    function  getON : TBits_1; assembler; nostackframe; inline;
    function  getPDSEL : TBits_2; assembler; nostackframe; inline;
    function  getPDSEL0 : TBits_1; assembler; nostackframe; inline;
    function  getPDSEL1 : TBits_1; assembler; nostackframe; inline;
    function  getRXINV : TBits_1; assembler; nostackframe; inline;
    function  getSIDL : TBits_1; assembler; nostackframe; inline;
    function  getSTSEL : TBits_1; assembler; nostackframe; inline;
    function  getUARTEN : TBits_1; assembler; nostackframe; inline;
    function  getUSIDL : TBits_1; assembler; nostackframe; inline;
    function  getWAKE : TBits_1; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setABAUD(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setBRGH(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setIREN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setLPBACK(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setON(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setPDSEL(thebits : TBits_2); assembler; nostackframe; inline;
    procedure setPDSEL0(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setPDSEL1(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXINV(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSIDL(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSTSEL(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setUARTEN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setUSIDL(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setWAKE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearABAUD;
    procedure clearBRGH;
    procedure clearIREN;
    procedure clearLPBACK;
    procedure clearON;
    procedure clearPDSEL0;
    procedure clearPDSEL1;
    procedure clearRXINV;
    procedure clearSIDL;
    procedure clearSTSEL;
    procedure clearUARTEN;
    procedure clearUSIDL;
    procedure clearWAKE;
    procedure setABAUD;
    procedure setBRGH;
    procedure setIREN;
    procedure setLPBACK;
    procedure setON;
    procedure setPDSEL0;
    procedure setPDSEL1;
    procedure setRXINV;
    procedure setSIDL;
    procedure setSTSEL;
    procedure setUARTEN;
    procedure setUSIDL;
    procedure setWAKE;
    property ABAUD : TBits_1 read getABAUD write setABAUD;
    property BRGH : TBits_1 read getBRGH write setBRGH;
    property IREN : TBits_1 read getIREN write setIREN;
    property LPBACK : TBits_1 read getLPBACK write setLPBACK;
    property ON : TBits_1 read getON write setON;
    property PDSEL : TBits_2 read getPDSEL write setPDSEL;
    property PDSEL0 : TBits_1 read getPDSEL0 write setPDSEL0;
    property PDSEL1 : TBits_1 read getPDSEL1 write setPDSEL1;
    property RXINV : TBits_1 read getRXINV write setRXINV;
    property SIDL : TBits_1 read getSIDL write setSIDL;
    property STSEL : TBits_1 read getSTSEL write setSTSEL;
    property UARTEN : TBits_1 read getUARTEN write setUARTEN;
    property USIDL : TBits_1 read getUSIDL write setUSIDL;
    property WAKE : TBits_1 read getWAKE write setWAKE;
    property w : TBits_32 read getw write setw;
  end;
  TUART5_U5MODE = record
  private
    function  getABAUD : TBits_1; assembler; nostackframe; inline;
    function  getBRGH : TBits_1; assembler; nostackframe; inline;
    function  getIREN : TBits_1; assembler; nostackframe; inline;
    function  getLPBACK : TBits_1; assembler; nostackframe; inline;
    function  getON : TBits_1; assembler; nostackframe; inline;
    function  getPDSEL : TBits_2; assembler; nostackframe; inline;
    function  getPDSEL0 : TBits_1; assembler; nostackframe; inline;
    function  getPDSEL1 : TBits_1; assembler; nostackframe; inline;
    function  getRXINV : TBits_1; assembler; nostackframe; inline;
    function  getSIDL : TBits_1; assembler; nostackframe; inline;
    function  getSTSEL : TBits_1; assembler; nostackframe; inline;
    function  getUARTEN : TBits_1; assembler; nostackframe; inline;
    function  getUSIDL : TBits_1; assembler; nostackframe; inline;
    function  getWAKE : TBits_1; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setABAUD(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setBRGH(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setIREN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setLPBACK(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setON(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setPDSEL(thebits : TBits_2); assembler; nostackframe; inline;
    procedure setPDSEL0(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setPDSEL1(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXINV(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSIDL(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSTSEL(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setUARTEN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setUSIDL(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setWAKE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearABAUD;
    procedure clearBRGH;
    procedure clearIREN;
    procedure clearLPBACK;
    procedure clearON;
    procedure clearPDSEL0;
    procedure clearPDSEL1;
    procedure clearRXINV;
    procedure clearSIDL;
    procedure clearSTSEL;
    procedure clearUARTEN;
    procedure clearUSIDL;
    procedure clearWAKE;
    procedure setABAUD;
    procedure setBRGH;
    procedure setIREN;
    procedure setLPBACK;
    procedure setON;
    procedure setPDSEL0;
    procedure setPDSEL1;
    procedure setRXINV;
    procedure setSIDL;
    procedure setSTSEL;
    procedure setUARTEN;
    procedure setUSIDL;
    procedure setWAKE;
    property ABAUD : TBits_1 read getABAUD write setABAUD;
    property BRGH : TBits_1 read getBRGH write setBRGH;
    property IREN : TBits_1 read getIREN write setIREN;
    property LPBACK : TBits_1 read getLPBACK write setLPBACK;
    property ON : TBits_1 read getON write setON;
    property PDSEL : TBits_2 read getPDSEL write setPDSEL;
    property PDSEL0 : TBits_1 read getPDSEL0 write setPDSEL0;
    property PDSEL1 : TBits_1 read getPDSEL1 write setPDSEL1;
    property RXINV : TBits_1 read getRXINV write setRXINV;
    property SIDL : TBits_1 read getSIDL write setSIDL;
    property STSEL : TBits_1 read getSTSEL write setSTSEL;
    property UARTEN : TBits_1 read getUARTEN write setUARTEN;
    property USIDL : TBits_1 read getUSIDL write setUSIDL;
    property WAKE : TBits_1 read getWAKE write setWAKE;
    property w : TBits_32 read getw write setw;
  end;
  TUART5_U3BSTA = record
  private
    function  getADDEN : TBits_1; assembler; nostackframe; inline;
    function  getADDR : TBits_8; assembler; nostackframe; inline;
    function  getADM_EN : TBits_1; assembler; nostackframe; inline;
    function  getFERR : TBits_1; assembler; nostackframe; inline;
    function  getOERR : TBits_1; assembler; nostackframe; inline;
    function  getPERR : TBits_1; assembler; nostackframe; inline;
    function  getRIDLE : TBits_1; assembler; nostackframe; inline;
    function  getTRMT : TBits_1; assembler; nostackframe; inline;
    function  getURXDA : TBits_1; assembler; nostackframe; inline;
    function  getURXEN : TBits_1; assembler; nostackframe; inline;
    function  getURXISEL : TBits_2; assembler; nostackframe; inline;
    function  getURXISEL0 : TBits_1; assembler; nostackframe; inline;
    function  getURXISEL1 : TBits_1; assembler; nostackframe; inline;
    function  getUTXBF : TBits_1; assembler; nostackframe; inline;
    function  getUTXBRK : TBits_1; assembler; nostackframe; inline;
    function  getUTXEN : TBits_1; assembler; nostackframe; inline;
    function  getUTXINV : TBits_1; assembler; nostackframe; inline;
    function  getUTXISEL : TBits_2; assembler; nostackframe; inline;
    function  getUTXISEL0 : TBits_1; assembler; nostackframe; inline;
    function  getUTXISEL1 : TBits_1; assembler; nostackframe; inline;
    function  getUTXSEL : TBits_2; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setADDEN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setADDR(thebits : TBits_8); assembler; nostackframe; inline;
    procedure setADM_EN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setFERR(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setOERR(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setPERR(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRIDLE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTRMT(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setURXDA(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setURXEN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setURXISEL(thebits : TBits_2); assembler; nostackframe; inline;
    procedure setURXISEL0(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setURXISEL1(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setUTXBF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setUTXBRK(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setUTXEN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setUTXINV(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setUTXISEL(thebits : TBits_2); assembler; nostackframe; inline;
    procedure setUTXISEL0(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setUTXISEL1(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setUTXSEL(thebits : TBits_2); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearADDEN;
    procedure clearADM_EN;
    procedure clearFERR;
    procedure clearOERR;
    procedure clearPERR;
    procedure clearRIDLE;
    procedure clearTRMT;
    procedure clearURXDA;
    procedure clearURXEN;
    procedure clearURXISEL0;
    procedure clearURXISEL1;
    procedure clearUTXBF;
    procedure clearUTXBRK;
    procedure clearUTXEN;
    procedure clearUTXINV;
    procedure clearUTXISEL0;
    procedure clearUTXISEL1;
    procedure setADDEN;
    procedure setADM_EN;
    procedure setFERR;
    procedure setOERR;
    procedure setPERR;
    procedure setRIDLE;
    procedure setTRMT;
    procedure setURXDA;
    procedure setURXEN;
    procedure setURXISEL0;
    procedure setURXISEL1;
    procedure setUTXBF;
    procedure setUTXBRK;
    procedure setUTXEN;
    procedure setUTXINV;
    procedure setUTXISEL0;
    procedure setUTXISEL1;
    property ADDEN : TBits_1 read getADDEN write setADDEN;
    property ADDR : TBits_8 read getADDR write setADDR;
    property ADM_EN : TBits_1 read getADM_EN write setADM_EN;
    property FERR : TBits_1 read getFERR write setFERR;
    property OERR : TBits_1 read getOERR write setOERR;
    property PERR : TBits_1 read getPERR write setPERR;
    property RIDLE : TBits_1 read getRIDLE write setRIDLE;
    property TRMT : TBits_1 read getTRMT write setTRMT;
    property URXDA : TBits_1 read getURXDA write setURXDA;
    property URXEN : TBits_1 read getURXEN write setURXEN;
    property URXISEL : TBits_2 read getURXISEL write setURXISEL;
    property URXISEL0 : TBits_1 read getURXISEL0 write setURXISEL0;
    property URXISEL1 : TBits_1 read getURXISEL1 write setURXISEL1;
    property UTXBF : TBits_1 read getUTXBF write setUTXBF;
    property UTXBRK : TBits_1 read getUTXBRK write setUTXBRK;
    property UTXEN : TBits_1 read getUTXEN write setUTXEN;
    property UTXINV : TBits_1 read getUTXINV write setUTXINV;
    property UTXISEL : TBits_2 read getUTXISEL write setUTXISEL;
    property UTXISEL0 : TBits_1 read getUTXISEL0 write setUTXISEL0;
    property UTXISEL1 : TBits_1 read getUTXISEL1 write setUTXISEL1;
    property UTXSEL : TBits_2 read getUTXSEL write setUTXSEL;
    property w : TBits_32 read getw write setw;
  end;
  TUART5_U5STA = record
  private
    function  getADDEN : TBits_1; assembler; nostackframe; inline;
    function  getADDR : TBits_8; assembler; nostackframe; inline;
    function  getADM_EN : TBits_1; assembler; nostackframe; inline;
    function  getFERR : TBits_1; assembler; nostackframe; inline;
    function  getOERR : TBits_1; assembler; nostackframe; inline;
    function  getPERR : TBits_1; assembler; nostackframe; inline;
    function  getRIDLE : TBits_1; assembler; nostackframe; inline;
    function  getTRMT : TBits_1; assembler; nostackframe; inline;
    function  getURXDA : TBits_1; assembler; nostackframe; inline;
    function  getURXEN : TBits_1; assembler; nostackframe; inline;
    function  getURXISEL : TBits_2; assembler; nostackframe; inline;
    function  getURXISEL0 : TBits_1; assembler; nostackframe; inline;
    function  getURXISEL1 : TBits_1; assembler; nostackframe; inline;
    function  getUTXBF : TBits_1; assembler; nostackframe; inline;
    function  getUTXBRK : TBits_1; assembler; nostackframe; inline;
    function  getUTXEN : TBits_1; assembler; nostackframe; inline;
    function  getUTXINV : TBits_1; assembler; nostackframe; inline;
    function  getUTXISEL : TBits_2; assembler; nostackframe; inline;
    function  getUTXISEL0 : TBits_1; assembler; nostackframe; inline;
    function  getUTXISEL1 : TBits_1; assembler; nostackframe; inline;
    function  getUTXSEL : TBits_2; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setADDEN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setADDR(thebits : TBits_8); assembler; nostackframe; inline;
    procedure setADM_EN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setFERR(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setOERR(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setPERR(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRIDLE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTRMT(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setURXDA(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setURXEN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setURXISEL(thebits : TBits_2); assembler; nostackframe; inline;
    procedure setURXISEL0(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setURXISEL1(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setUTXBF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setUTXBRK(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setUTXEN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setUTXINV(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setUTXISEL(thebits : TBits_2); assembler; nostackframe; inline;
    procedure setUTXISEL0(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setUTXISEL1(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setUTXSEL(thebits : TBits_2); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearADDEN;
    procedure clearADM_EN;
    procedure clearFERR;
    procedure clearOERR;
    procedure clearPERR;
    procedure clearRIDLE;
    procedure clearTRMT;
    procedure clearURXDA;
    procedure clearURXEN;
    procedure clearURXISEL0;
    procedure clearURXISEL1;
    procedure clearUTXBF;
    procedure clearUTXBRK;
    procedure clearUTXEN;
    procedure clearUTXINV;
    procedure clearUTXISEL0;
    procedure clearUTXISEL1;
    procedure setADDEN;
    procedure setADM_EN;
    procedure setFERR;
    procedure setOERR;
    procedure setPERR;
    procedure setRIDLE;
    procedure setTRMT;
    procedure setURXDA;
    procedure setURXEN;
    procedure setURXISEL0;
    procedure setURXISEL1;
    procedure setUTXBF;
    procedure setUTXBRK;
    procedure setUTXEN;
    procedure setUTXINV;
    procedure setUTXISEL0;
    procedure setUTXISEL1;
    property ADDEN : TBits_1 read getADDEN write setADDEN;
    property ADDR : TBits_8 read getADDR write setADDR;
    property ADM_EN : TBits_1 read getADM_EN write setADM_EN;
    property FERR : TBits_1 read getFERR write setFERR;
    property OERR : TBits_1 read getOERR write setOERR;
    property PERR : TBits_1 read getPERR write setPERR;
    property RIDLE : TBits_1 read getRIDLE write setRIDLE;
    property TRMT : TBits_1 read getTRMT write setTRMT;
    property URXDA : TBits_1 read getURXDA write setURXDA;
    property URXEN : TBits_1 read getURXEN write setURXEN;
    property URXISEL : TBits_2 read getURXISEL write setURXISEL;
    property URXISEL0 : TBits_1 read getURXISEL0 write setURXISEL0;
    property URXISEL1 : TBits_1 read getURXISEL1 write setURXISEL1;
    property UTXBF : TBits_1 read getUTXBF write setUTXBF;
    property UTXBRK : TBits_1 read getUTXBRK write setUTXBRK;
    property UTXEN : TBits_1 read getUTXEN write setUTXEN;
    property UTXINV : TBits_1 read getUTXINV write setUTXINV;
    property UTXISEL : TBits_2 read getUTXISEL write setUTXISEL;
    property UTXISEL0 : TBits_1 read getUTXISEL0 write setUTXISEL0;
    property UTXISEL1 : TBits_1 read getUTXISEL1 write setUTXISEL1;
    property UTXSEL : TBits_2 read getUTXSEL write setUTXSEL;
    property w : TBits_32 read getw write setw;
  end;
type
  TUART5Registers = record
    U3BMODEbits : TUART5_U3BMODE;
    U3BMODE : longWord;
    U5MODEbits : TUART5_U5MODE;
    U5MODE : longWord;
    U3BMODECLR : longWord;
    U5MODECLR : longWord;
    U3BMODESET : longWord;
    U5MODESET : longWord;
    U3BMODEINV : longWord;
    U5MODEINV : longWord;
    U3BSTAbits : TUART5_U3BSTA;
    U3BSTA : longWord;
    U5STAbits : TUART5_U5STA;
    U5STA : longWord;
    U3BSTACLR : longWord;
    U5STACLR : longWord;
    U3BSTASET : longWord;
    U5STASET : longWord;
    U3BSTAINV : longWord;
    U5STAINV : longWord;
    U3BTXREG : longWord;
    U5TXREG : longWord;
    U3BRXREG : longWord;
    U5RXREG : longWord;
    U3BBRG : longWord;
    U5BRG : longWord;
    U3BBRGCLR : longWord;
    U5BRGCLR : longWord;
    U3BBRGSET : longWord;
    U5BRGSET : longWord;
    U3BBRGINV : longWord;
    U5BRGINV : longWord;
  end;
  TPMP_PMCON = record
  private
    function  getADRMUX : TBits_2; assembler; nostackframe; inline;
    function  getADRMUX0 : TBits_1; assembler; nostackframe; inline;
    function  getADRMUX1 : TBits_1; assembler; nostackframe; inline;
    function  getALP : TBits_1; assembler; nostackframe; inline;
    function  getCS1P : TBits_1; assembler; nostackframe; inline;
    function  getCS2P : TBits_1; assembler; nostackframe; inline;
    function  getCSF : TBits_2; assembler; nostackframe; inline;
    function  getCSF0 : TBits_1; assembler; nostackframe; inline;
    function  getCSF1 : TBits_1; assembler; nostackframe; inline;
    function  getON : TBits_1; assembler; nostackframe; inline;
    function  getPMPEN : TBits_1; assembler; nostackframe; inline;
    function  getPMPTTL : TBits_1; assembler; nostackframe; inline;
    function  getPSIDL : TBits_1; assembler; nostackframe; inline;
    function  getPTRDEN : TBits_1; assembler; nostackframe; inline;
    function  getPTWREN : TBits_1; assembler; nostackframe; inline;
    function  getRDSP : TBits_1; assembler; nostackframe; inline;
    function  getSIDL : TBits_1; assembler; nostackframe; inline;
    function  getWRSP : TBits_1; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setADRMUX(thebits : TBits_2); assembler; nostackframe; inline;
    procedure setADRMUX0(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setADRMUX1(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setALP(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCS1P(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCS2P(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCSF(thebits : TBits_2); assembler; nostackframe; inline;
    procedure setCSF0(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCSF1(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setON(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setPMPEN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setPMPTTL(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setPSIDL(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setPTRDEN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setPTWREN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRDSP(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSIDL(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setWRSP(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearADRMUX0;
    procedure clearADRMUX1;
    procedure clearALP;
    procedure clearCS1P;
    procedure clearCS2P;
    procedure clearCSF0;
    procedure clearCSF1;
    procedure clearON;
    procedure clearPMPEN;
    procedure clearPMPTTL;
    procedure clearPSIDL;
    procedure clearPTRDEN;
    procedure clearPTWREN;
    procedure clearRDSP;
    procedure clearSIDL;
    procedure clearWRSP;
    procedure setADRMUX0;
    procedure setADRMUX1;
    procedure setALP;
    procedure setCS1P;
    procedure setCS2P;
    procedure setCSF0;
    procedure setCSF1;
    procedure setON;
    procedure setPMPEN;
    procedure setPMPTTL;
    procedure setPSIDL;
    procedure setPTRDEN;
    procedure setPTWREN;
    procedure setRDSP;
    procedure setSIDL;
    procedure setWRSP;
    property ADRMUX : TBits_2 read getADRMUX write setADRMUX;
    property ADRMUX0 : TBits_1 read getADRMUX0 write setADRMUX0;
    property ADRMUX1 : TBits_1 read getADRMUX1 write setADRMUX1;
    property ALP : TBits_1 read getALP write setALP;
    property CS1P : TBits_1 read getCS1P write setCS1P;
    property CS2P : TBits_1 read getCS2P write setCS2P;
    property CSF : TBits_2 read getCSF write setCSF;
    property CSF0 : TBits_1 read getCSF0 write setCSF0;
    property CSF1 : TBits_1 read getCSF1 write setCSF1;
    property ON : TBits_1 read getON write setON;
    property PMPEN : TBits_1 read getPMPEN write setPMPEN;
    property PMPTTL : TBits_1 read getPMPTTL write setPMPTTL;
    property PSIDL : TBits_1 read getPSIDL write setPSIDL;
    property PTRDEN : TBits_1 read getPTRDEN write setPTRDEN;
    property PTWREN : TBits_1 read getPTWREN write setPTWREN;
    property RDSP : TBits_1 read getRDSP write setRDSP;
    property SIDL : TBits_1 read getSIDL write setSIDL;
    property WRSP : TBits_1 read getWRSP write setWRSP;
    property w : TBits_32 read getw write setw;
  end;
  TPMP_PMMODE = record
  private
    function  getBUSY : TBits_1; assembler; nostackframe; inline;
    function  getINCM : TBits_2; assembler; nostackframe; inline;
    function  getINCM0 : TBits_1; assembler; nostackframe; inline;
    function  getINCM1 : TBits_1; assembler; nostackframe; inline;
    function  getIRQM : TBits_2; assembler; nostackframe; inline;
    function  getIRQM0 : TBits_1; assembler; nostackframe; inline;
    function  getIRQM1 : TBits_1; assembler; nostackframe; inline;
    function  getMODE : TBits_2; assembler; nostackframe; inline;
    function  getMODE0 : TBits_1; assembler; nostackframe; inline;
    function  getMODE1 : TBits_1; assembler; nostackframe; inline;
    function  getMODE16 : TBits_1; assembler; nostackframe; inline;
    function  getWAITB : TBits_2; assembler; nostackframe; inline;
    function  getWAITB0 : TBits_1; assembler; nostackframe; inline;
    function  getWAITB1 : TBits_1; assembler; nostackframe; inline;
    function  getWAITE : TBits_2; assembler; nostackframe; inline;
    function  getWAITE0 : TBits_1; assembler; nostackframe; inline;
    function  getWAITE1 : TBits_1; assembler; nostackframe; inline;
    function  getWAITM : TBits_4; assembler; nostackframe; inline;
    function  getWAITM0 : TBits_1; assembler; nostackframe; inline;
    function  getWAITM1 : TBits_1; assembler; nostackframe; inline;
    function  getWAITM2 : TBits_1; assembler; nostackframe; inline;
    function  getWAITM3 : TBits_1; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setBUSY(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setINCM(thebits : TBits_2); assembler; nostackframe; inline;
    procedure setINCM0(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setINCM1(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setIRQM(thebits : TBits_2); assembler; nostackframe; inline;
    procedure setIRQM0(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setIRQM1(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setMODE(thebits : TBits_2); assembler; nostackframe; inline;
    procedure setMODE0(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setMODE1(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setMODE16(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setWAITB(thebits : TBits_2); assembler; nostackframe; inline;
    procedure setWAITB0(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setWAITB1(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setWAITE(thebits : TBits_2); assembler; nostackframe; inline;
    procedure setWAITE0(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setWAITE1(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setWAITM(thebits : TBits_4); assembler; nostackframe; inline;
    procedure setWAITM0(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setWAITM1(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setWAITM2(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setWAITM3(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearBUSY;
    procedure clearINCM0;
    procedure clearINCM1;
    procedure clearIRQM0;
    procedure clearIRQM1;
    procedure clearMODE0;
    procedure clearMODE16;
    procedure clearMODE1;
    procedure clearWAITB0;
    procedure clearWAITB1;
    procedure clearWAITE0;
    procedure clearWAITE1;
    procedure clearWAITM0;
    procedure clearWAITM1;
    procedure clearWAITM2;
    procedure clearWAITM3;
    procedure setBUSY;
    procedure setINCM0;
    procedure setINCM1;
    procedure setIRQM0;
    procedure setIRQM1;
    procedure setMODE0;
    procedure setMODE16;
    procedure setMODE1;
    procedure setWAITB0;
    procedure setWAITB1;
    procedure setWAITE0;
    procedure setWAITE1;
    procedure setWAITM0;
    procedure setWAITM1;
    procedure setWAITM2;
    procedure setWAITM3;
    property BUSY : TBits_1 read getBUSY write setBUSY;
    property INCM : TBits_2 read getINCM write setINCM;
    property INCM0 : TBits_1 read getINCM0 write setINCM0;
    property INCM1 : TBits_1 read getINCM1 write setINCM1;
    property IRQM : TBits_2 read getIRQM write setIRQM;
    property IRQM0 : TBits_1 read getIRQM0 write setIRQM0;
    property IRQM1 : TBits_1 read getIRQM1 write setIRQM1;
    property MODE : TBits_2 read getMODE write setMODE;
    property MODE0 : TBits_1 read getMODE0 write setMODE0;
    property MODE1 : TBits_1 read getMODE1 write setMODE1;
    property MODE16 : TBits_1 read getMODE16 write setMODE16;
    property WAITB : TBits_2 read getWAITB write setWAITB;
    property WAITB0 : TBits_1 read getWAITB0 write setWAITB0;
    property WAITB1 : TBits_1 read getWAITB1 write setWAITB1;
    property WAITE : TBits_2 read getWAITE write setWAITE;
    property WAITE0 : TBits_1 read getWAITE0 write setWAITE0;
    property WAITE1 : TBits_1 read getWAITE1 write setWAITE1;
    property WAITM : TBits_4 read getWAITM write setWAITM;
    property WAITM0 : TBits_1 read getWAITM0 write setWAITM0;
    property WAITM1 : TBits_1 read getWAITM1 write setWAITM1;
    property WAITM2 : TBits_1 read getWAITM2 write setWAITM2;
    property WAITM3 : TBits_1 read getWAITM3 write setWAITM3;
    property w : TBits_32 read getw write setw;
  end;
  TPMP_PMADDR = record
  private
    function  getADDR : TBits_14; assembler; nostackframe; inline;
    function  getCS : TBits_2; assembler; nostackframe; inline;
    function  getCS1 : TBits_1; assembler; nostackframe; inline;
    function  getCS2 : TBits_1; assembler; nostackframe; inline;
    function  getPADDR : TBits_14; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setADDR(thebits : TBits_14); assembler; nostackframe; inline;
    procedure setCS(thebits : TBits_2); assembler; nostackframe; inline;
    procedure setCS1(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCS2(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setPADDR(thebits : TBits_14); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearCS1;
    procedure clearCS2;
    procedure setCS1;
    procedure setCS2;
    property ADDR : TBits_14 read getADDR write setADDR;
    property CS : TBits_2 read getCS write setCS;
    property CS1 : TBits_1 read getCS1 write setCS1;
    property CS2 : TBits_1 read getCS2 write setCS2;
    property PADDR : TBits_14 read getPADDR write setPADDR;
    property w : TBits_32 read getw write setw;
  end;
  TPMP_PMDOUT = record
  private
    function  getDATAOUT : TBits_32; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setDATAOUT(thebits : TBits_32); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    property DATAOUT : TBits_32 read getDATAOUT write setDATAOUT;
    property w : TBits_32 read getw write setw;
  end;
  TPMP_PMDIN = record
  private
    function  getDATAIN : TBits_32; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setDATAIN(thebits : TBits_32); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    property DATAIN : TBits_32 read getDATAIN write setDATAIN;
    property w : TBits_32 read getw write setw;
  end;
  TPMP_PMAEN = record
  private
    function  getPTEN : TBits_16; assembler; nostackframe; inline;
    function  getPTEN0 : TBits_1; assembler; nostackframe; inline;
    function  getPTEN1 : TBits_1; assembler; nostackframe; inline;
    function  getPTEN10 : TBits_1; assembler; nostackframe; inline;
    function  getPTEN11 : TBits_1; assembler; nostackframe; inline;
    function  getPTEN12 : TBits_1; assembler; nostackframe; inline;
    function  getPTEN13 : TBits_1; assembler; nostackframe; inline;
    function  getPTEN14 : TBits_1; assembler; nostackframe; inline;
    function  getPTEN15 : TBits_1; assembler; nostackframe; inline;
    function  getPTEN2 : TBits_1; assembler; nostackframe; inline;
    function  getPTEN3 : TBits_1; assembler; nostackframe; inline;
    function  getPTEN4 : TBits_1; assembler; nostackframe; inline;
    function  getPTEN5 : TBits_1; assembler; nostackframe; inline;
    function  getPTEN6 : TBits_1; assembler; nostackframe; inline;
    function  getPTEN7 : TBits_1; assembler; nostackframe; inline;
    function  getPTEN8 : TBits_1; assembler; nostackframe; inline;
    function  getPTEN9 : TBits_1; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setPTEN(thebits : TBits_16); assembler; nostackframe; inline;
    procedure setPTEN0(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setPTEN1(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setPTEN10(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setPTEN11(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setPTEN12(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setPTEN13(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setPTEN14(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setPTEN15(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setPTEN2(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setPTEN3(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setPTEN4(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setPTEN5(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setPTEN6(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setPTEN7(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setPTEN8(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setPTEN9(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearPTEN0;
    procedure clearPTEN10;
    procedure clearPTEN11;
    procedure clearPTEN12;
    procedure clearPTEN13;
    procedure clearPTEN14;
    procedure clearPTEN15;
    procedure clearPTEN1;
    procedure clearPTEN2;
    procedure clearPTEN3;
    procedure clearPTEN4;
    procedure clearPTEN5;
    procedure clearPTEN6;
    procedure clearPTEN7;
    procedure clearPTEN8;
    procedure clearPTEN9;
    procedure setPTEN0;
    procedure setPTEN10;
    procedure setPTEN11;
    procedure setPTEN12;
    procedure setPTEN13;
    procedure setPTEN14;
    procedure setPTEN15;
    procedure setPTEN1;
    procedure setPTEN2;
    procedure setPTEN3;
    procedure setPTEN4;
    procedure setPTEN5;
    procedure setPTEN6;
    procedure setPTEN7;
    procedure setPTEN8;
    procedure setPTEN9;
    property PTEN : TBits_16 read getPTEN write setPTEN;
    property PTEN0 : TBits_1 read getPTEN0 write setPTEN0;
    property PTEN1 : TBits_1 read getPTEN1 write setPTEN1;
    property PTEN10 : TBits_1 read getPTEN10 write setPTEN10;
    property PTEN11 : TBits_1 read getPTEN11 write setPTEN11;
    property PTEN12 : TBits_1 read getPTEN12 write setPTEN12;
    property PTEN13 : TBits_1 read getPTEN13 write setPTEN13;
    property PTEN14 : TBits_1 read getPTEN14 write setPTEN14;
    property PTEN15 : TBits_1 read getPTEN15 write setPTEN15;
    property PTEN2 : TBits_1 read getPTEN2 write setPTEN2;
    property PTEN3 : TBits_1 read getPTEN3 write setPTEN3;
    property PTEN4 : TBits_1 read getPTEN4 write setPTEN4;
    property PTEN5 : TBits_1 read getPTEN5 write setPTEN5;
    property PTEN6 : TBits_1 read getPTEN6 write setPTEN6;
    property PTEN7 : TBits_1 read getPTEN7 write setPTEN7;
    property PTEN8 : TBits_1 read getPTEN8 write setPTEN8;
    property PTEN9 : TBits_1 read getPTEN9 write setPTEN9;
    property w : TBits_32 read getw write setw;
  end;
  TPMP_PMSTAT = record
  private
    function  getIB0F : TBits_1; assembler; nostackframe; inline;
    function  getIB1F : TBits_1; assembler; nostackframe; inline;
    function  getIB2F : TBits_1; assembler; nostackframe; inline;
    function  getIB3F : TBits_1; assembler; nostackframe; inline;
    function  getIBF : TBits_1; assembler; nostackframe; inline;
    function  getIBOV : TBits_1; assembler; nostackframe; inline;
    function  getOB0E : TBits_1; assembler; nostackframe; inline;
    function  getOB1E : TBits_1; assembler; nostackframe; inline;
    function  getOB2E : TBits_1; assembler; nostackframe; inline;
    function  getOB3E : TBits_1; assembler; nostackframe; inline;
    function  getOBE : TBits_1; assembler; nostackframe; inline;
    function  getOBUF : TBits_1; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setIB0F(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setIB1F(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setIB2F(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setIB3F(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setIBF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setIBOV(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setOB0E(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setOB1E(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setOB2E(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setOB3E(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setOBE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setOBUF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearIB0F;
    procedure clearIB1F;
    procedure clearIB2F;
    procedure clearIB3F;
    procedure clearIBF;
    procedure clearIBOV;
    procedure clearOB0E;
    procedure clearOB1E;
    procedure clearOB2E;
    procedure clearOB3E;
    procedure clearOBE;
    procedure clearOBUF;
    procedure setIB0F;
    procedure setIB1F;
    procedure setIB2F;
    procedure setIB3F;
    procedure setIBF;
    procedure setIBOV;
    procedure setOB0E;
    procedure setOB1E;
    procedure setOB2E;
    procedure setOB3E;
    procedure setOBE;
    procedure setOBUF;
    property IB0F : TBits_1 read getIB0F write setIB0F;
    property IB1F : TBits_1 read getIB1F write setIB1F;
    property IB2F : TBits_1 read getIB2F write setIB2F;
    property IB3F : TBits_1 read getIB3F write setIB3F;
    property IBF : TBits_1 read getIBF write setIBF;
    property IBOV : TBits_1 read getIBOV write setIBOV;
    property OB0E : TBits_1 read getOB0E write setOB0E;
    property OB1E : TBits_1 read getOB1E write setOB1E;
    property OB2E : TBits_1 read getOB2E write setOB2E;
    property OB3E : TBits_1 read getOB3E write setOB3E;
    property OBE : TBits_1 read getOBE write setOBE;
    property OBUF : TBits_1 read getOBUF write setOBUF;
    property w : TBits_32 read getw write setw;
  end;
type
  TPMPRegisters = record
    PMCONbits : TPMP_PMCON;
    PMCON : longWord;
    PMCONCLR : longWord;
    PMCONSET : longWord;
    PMCONINV : longWord;
    PMMODEbits : TPMP_PMMODE;
    PMMODE : longWord;
    PMMODECLR : longWord;
    PMMODESET : longWord;
    PMMODEINV : longWord;
    PMADDRbits : TPMP_PMADDR;
    PMADDR : longWord;
    PMADDRCLR : longWord;
    PMADDRSET : longWord;
    PMADDRINV : longWord;
    PMDOUTbits : TPMP_PMDOUT;
    PMDOUT : longWord;
    PMDOUTCLR : longWord;
    PMDOUTSET : longWord;
    PMDOUTINV : longWord;
    PMDINbits : TPMP_PMDIN;
    PMDIN : longWord;
    PMDINCLR : longWord;
    PMDINSET : longWord;
    PMDININV : longWord;
    PMAENbits : TPMP_PMAEN;
    PMAEN : longWord;
    PMAENCLR : longWord;
    PMAENSET : longWord;
    PMAENINV : longWord;
    PMSTATbits : TPMP_PMSTAT;
    PMSTAT : longWord;
    PMSTATCLR : longWord;
    PMSTATSET : longWord;
    PMSTATINV : longWord;
  end;
  TADC10_AD1CON1 = record
  private
    function  getADON : TBits_1; assembler; nostackframe; inline;
    function  getADSIDL : TBits_1; assembler; nostackframe; inline;
    function  getASAM : TBits_1; assembler; nostackframe; inline;
    function  getCLRASAM : TBits_1; assembler; nostackframe; inline;
    function  getDONE : TBits_1; assembler; nostackframe; inline;
    function  getFORM : TBits_3; assembler; nostackframe; inline;
    function  getFORM0 : TBits_1; assembler; nostackframe; inline;
    function  getFORM1 : TBits_1; assembler; nostackframe; inline;
    function  getFORM2 : TBits_1; assembler; nostackframe; inline;
    function  getON : TBits_1; assembler; nostackframe; inline;
    function  getSAMP : TBits_1; assembler; nostackframe; inline;
    function  getSIDL : TBits_1; assembler; nostackframe; inline;
    function  getSSRC : TBits_3; assembler; nostackframe; inline;
    function  getSSRC0 : TBits_1; assembler; nostackframe; inline;
    function  getSSRC1 : TBits_1; assembler; nostackframe; inline;
    function  getSSRC2 : TBits_1; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setADON(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setADSIDL(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setASAM(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCLRASAM(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setDONE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setFORM(thebits : TBits_3); assembler; nostackframe; inline;
    procedure setFORM0(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setFORM1(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setFORM2(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setON(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSAMP(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSIDL(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSSRC(thebits : TBits_3); assembler; nostackframe; inline;
    procedure setSSRC0(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSSRC1(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSSRC2(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearADON;
    procedure clearADSIDL;
    procedure clearASAM;
    procedure clearCLRASAM;
    procedure clearDONE;
    procedure clearFORM0;
    procedure clearFORM1;
    procedure clearFORM2;
    procedure clearON;
    procedure clearSAMP;
    procedure clearSIDL;
    procedure clearSSRC0;
    procedure clearSSRC1;
    procedure clearSSRC2;
    procedure setADON;
    procedure setADSIDL;
    procedure setASAM;
    procedure setCLRASAM;
    procedure setDONE;
    procedure setFORM0;
    procedure setFORM1;
    procedure setFORM2;
    procedure setON;
    procedure setSAMP;
    procedure setSIDL;
    procedure setSSRC0;
    procedure setSSRC1;
    procedure setSSRC2;
    property ADON : TBits_1 read getADON write setADON;
    property ADSIDL : TBits_1 read getADSIDL write setADSIDL;
    property ASAM : TBits_1 read getASAM write setASAM;
    property CLRASAM : TBits_1 read getCLRASAM write setCLRASAM;
    property DONE : TBits_1 read getDONE write setDONE;
    property FORM : TBits_3 read getFORM write setFORM;
    property FORM0 : TBits_1 read getFORM0 write setFORM0;
    property FORM1 : TBits_1 read getFORM1 write setFORM1;
    property FORM2 : TBits_1 read getFORM2 write setFORM2;
    property ON : TBits_1 read getON write setON;
    property SAMP : TBits_1 read getSAMP write setSAMP;
    property SIDL : TBits_1 read getSIDL write setSIDL;
    property SSRC : TBits_3 read getSSRC write setSSRC;
    property SSRC0 : TBits_1 read getSSRC0 write setSSRC0;
    property SSRC1 : TBits_1 read getSSRC1 write setSSRC1;
    property SSRC2 : TBits_1 read getSSRC2 write setSSRC2;
    property w : TBits_32 read getw write setw;
  end;
  TADC10_AD1CON2 = record
  private
    function  getALTS : TBits_1; assembler; nostackframe; inline;
    function  getBUFM : TBits_1; assembler; nostackframe; inline;
    function  getBUFS : TBits_1; assembler; nostackframe; inline;
    function  getCSCNA : TBits_1; assembler; nostackframe; inline;
    function  getOFFCAL : TBits_1; assembler; nostackframe; inline;
    function  getSMPI : TBits_4; assembler; nostackframe; inline;
    function  getSMPI0 : TBits_1; assembler; nostackframe; inline;
    function  getSMPI1 : TBits_1; assembler; nostackframe; inline;
    function  getSMPI2 : TBits_1; assembler; nostackframe; inline;
    function  getSMPI3 : TBits_1; assembler; nostackframe; inline;
    function  getVCFG : TBits_3; assembler; nostackframe; inline;
    function  getVCFG0 : TBits_1; assembler; nostackframe; inline;
    function  getVCFG1 : TBits_1; assembler; nostackframe; inline;
    function  getVCFG2 : TBits_1; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setALTS(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setBUFM(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setBUFS(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCSCNA(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setOFFCAL(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSMPI(thebits : TBits_4); assembler; nostackframe; inline;
    procedure setSMPI0(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSMPI1(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSMPI2(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSMPI3(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setVCFG(thebits : TBits_3); assembler; nostackframe; inline;
    procedure setVCFG0(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setVCFG1(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setVCFG2(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearALTS;
    procedure clearBUFM;
    procedure clearBUFS;
    procedure clearCSCNA;
    procedure clearOFFCAL;
    procedure clearSMPI0;
    procedure clearSMPI1;
    procedure clearSMPI2;
    procedure clearSMPI3;
    procedure clearVCFG0;
    procedure clearVCFG1;
    procedure clearVCFG2;
    procedure setALTS;
    procedure setBUFM;
    procedure setBUFS;
    procedure setCSCNA;
    procedure setOFFCAL;
    procedure setSMPI0;
    procedure setSMPI1;
    procedure setSMPI2;
    procedure setSMPI3;
    procedure setVCFG0;
    procedure setVCFG1;
    procedure setVCFG2;
    property ALTS : TBits_1 read getALTS write setALTS;
    property BUFM : TBits_1 read getBUFM write setBUFM;
    property BUFS : TBits_1 read getBUFS write setBUFS;
    property CSCNA : TBits_1 read getCSCNA write setCSCNA;
    property OFFCAL : TBits_1 read getOFFCAL write setOFFCAL;
    property SMPI : TBits_4 read getSMPI write setSMPI;
    property SMPI0 : TBits_1 read getSMPI0 write setSMPI0;
    property SMPI1 : TBits_1 read getSMPI1 write setSMPI1;
    property SMPI2 : TBits_1 read getSMPI2 write setSMPI2;
    property SMPI3 : TBits_1 read getSMPI3 write setSMPI3;
    property VCFG : TBits_3 read getVCFG write setVCFG;
    property VCFG0 : TBits_1 read getVCFG0 write setVCFG0;
    property VCFG1 : TBits_1 read getVCFG1 write setVCFG1;
    property VCFG2 : TBits_1 read getVCFG2 write setVCFG2;
    property w : TBits_32 read getw write setw;
  end;
  TADC10_AD1CON3 = record
  private
    function  getADCS : TBits_8; assembler; nostackframe; inline;
    function  getADCS0 : TBits_1; assembler; nostackframe; inline;
    function  getADCS1 : TBits_1; assembler; nostackframe; inline;
    function  getADCS2 : TBits_1; assembler; nostackframe; inline;
    function  getADCS3 : TBits_1; assembler; nostackframe; inline;
    function  getADCS4 : TBits_1; assembler; nostackframe; inline;
    function  getADCS5 : TBits_1; assembler; nostackframe; inline;
    function  getADCS6 : TBits_1; assembler; nostackframe; inline;
    function  getADCS7 : TBits_1; assembler; nostackframe; inline;
    function  getADRC : TBits_1; assembler; nostackframe; inline;
    function  getSAMC : TBits_5; assembler; nostackframe; inline;
    function  getSAMC0 : TBits_1; assembler; nostackframe; inline;
    function  getSAMC1 : TBits_1; assembler; nostackframe; inline;
    function  getSAMC2 : TBits_1; assembler; nostackframe; inline;
    function  getSAMC3 : TBits_1; assembler; nostackframe; inline;
    function  getSAMC4 : TBits_1; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setADCS(thebits : TBits_8); assembler; nostackframe; inline;
    procedure setADCS0(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setADCS1(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setADCS2(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setADCS3(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setADCS4(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setADCS5(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setADCS6(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setADCS7(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setADRC(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSAMC(thebits : TBits_5); assembler; nostackframe; inline;
    procedure setSAMC0(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSAMC1(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSAMC2(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSAMC3(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSAMC4(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearADCS0;
    procedure clearADCS1;
    procedure clearADCS2;
    procedure clearADCS3;
    procedure clearADCS4;
    procedure clearADCS5;
    procedure clearADCS6;
    procedure clearADCS7;
    procedure clearADRC;
    procedure clearSAMC0;
    procedure clearSAMC1;
    procedure clearSAMC2;
    procedure clearSAMC3;
    procedure clearSAMC4;
    procedure setADCS0;
    procedure setADCS1;
    procedure setADCS2;
    procedure setADCS3;
    procedure setADCS4;
    procedure setADCS5;
    procedure setADCS6;
    procedure setADCS7;
    procedure setADRC;
    procedure setSAMC0;
    procedure setSAMC1;
    procedure setSAMC2;
    procedure setSAMC3;
    procedure setSAMC4;
    property ADCS : TBits_8 read getADCS write setADCS;
    property ADCS0 : TBits_1 read getADCS0 write setADCS0;
    property ADCS1 : TBits_1 read getADCS1 write setADCS1;
    property ADCS2 : TBits_1 read getADCS2 write setADCS2;
    property ADCS3 : TBits_1 read getADCS3 write setADCS3;
    property ADCS4 : TBits_1 read getADCS4 write setADCS4;
    property ADCS5 : TBits_1 read getADCS5 write setADCS5;
    property ADCS6 : TBits_1 read getADCS6 write setADCS6;
    property ADCS7 : TBits_1 read getADCS7 write setADCS7;
    property ADRC : TBits_1 read getADRC write setADRC;
    property SAMC : TBits_5 read getSAMC write setSAMC;
    property SAMC0 : TBits_1 read getSAMC0 write setSAMC0;
    property SAMC1 : TBits_1 read getSAMC1 write setSAMC1;
    property SAMC2 : TBits_1 read getSAMC2 write setSAMC2;
    property SAMC3 : TBits_1 read getSAMC3 write setSAMC3;
    property SAMC4 : TBits_1 read getSAMC4 write setSAMC4;
    property w : TBits_32 read getw write setw;
  end;
  TADC10_AD1CHS = record
  private
    function  getCH0NA : TBits_1; assembler; nostackframe; inline;
    function  getCH0NB : TBits_1; assembler; nostackframe; inline;
    function  getCH0SA : TBits_4; assembler; nostackframe; inline;
    function  getCH0SA0 : TBits_1; assembler; nostackframe; inline;
    function  getCH0SA1 : TBits_1; assembler; nostackframe; inline;
    function  getCH0SA2 : TBits_1; assembler; nostackframe; inline;
    function  getCH0SA3 : TBits_1; assembler; nostackframe; inline;
    function  getCH0SB : TBits_4; assembler; nostackframe; inline;
    function  getCH0SB0 : TBits_1; assembler; nostackframe; inline;
    function  getCH0SB1 : TBits_1; assembler; nostackframe; inline;
    function  getCH0SB2 : TBits_1; assembler; nostackframe; inline;
    function  getCH0SB3 : TBits_1; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setCH0NA(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCH0NB(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCH0SA(thebits : TBits_4); assembler; nostackframe; inline;
    procedure setCH0SA0(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCH0SA1(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCH0SA2(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCH0SA3(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCH0SB(thebits : TBits_4); assembler; nostackframe; inline;
    procedure setCH0SB0(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCH0SB1(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCH0SB2(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCH0SB3(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearCH0NA;
    procedure clearCH0NB;
    procedure clearCH0SA0;
    procedure clearCH0SA1;
    procedure clearCH0SA2;
    procedure clearCH0SA3;
    procedure clearCH0SB0;
    procedure clearCH0SB1;
    procedure clearCH0SB2;
    procedure clearCH0SB3;
    procedure setCH0NA;
    procedure setCH0NB;
    procedure setCH0SA0;
    procedure setCH0SA1;
    procedure setCH0SA2;
    procedure setCH0SA3;
    procedure setCH0SB0;
    procedure setCH0SB1;
    procedure setCH0SB2;
    procedure setCH0SB3;
    property CH0NA : TBits_1 read getCH0NA write setCH0NA;
    property CH0NB : TBits_1 read getCH0NB write setCH0NB;
    property CH0SA : TBits_4 read getCH0SA write setCH0SA;
    property CH0SA0 : TBits_1 read getCH0SA0 write setCH0SA0;
    property CH0SA1 : TBits_1 read getCH0SA1 write setCH0SA1;
    property CH0SA2 : TBits_1 read getCH0SA2 write setCH0SA2;
    property CH0SA3 : TBits_1 read getCH0SA3 write setCH0SA3;
    property CH0SB : TBits_4 read getCH0SB write setCH0SB;
    property CH0SB0 : TBits_1 read getCH0SB0 write setCH0SB0;
    property CH0SB1 : TBits_1 read getCH0SB1 write setCH0SB1;
    property CH0SB2 : TBits_1 read getCH0SB2 write setCH0SB2;
    property CH0SB3 : TBits_1 read getCH0SB3 write setCH0SB3;
    property w : TBits_32 read getw write setw;
  end;
  TADC10_AD1CSSL = record
  private
    function  getCSSL : TBits_16; assembler; nostackframe; inline;
    function  getCSSL0 : TBits_1; assembler; nostackframe; inline;
    function  getCSSL1 : TBits_1; assembler; nostackframe; inline;
    function  getCSSL10 : TBits_1; assembler; nostackframe; inline;
    function  getCSSL11 : TBits_1; assembler; nostackframe; inline;
    function  getCSSL12 : TBits_1; assembler; nostackframe; inline;
    function  getCSSL13 : TBits_1; assembler; nostackframe; inline;
    function  getCSSL14 : TBits_1; assembler; nostackframe; inline;
    function  getCSSL15 : TBits_1; assembler; nostackframe; inline;
    function  getCSSL2 : TBits_1; assembler; nostackframe; inline;
    function  getCSSL3 : TBits_1; assembler; nostackframe; inline;
    function  getCSSL4 : TBits_1; assembler; nostackframe; inline;
    function  getCSSL5 : TBits_1; assembler; nostackframe; inline;
    function  getCSSL6 : TBits_1; assembler; nostackframe; inline;
    function  getCSSL7 : TBits_1; assembler; nostackframe; inline;
    function  getCSSL8 : TBits_1; assembler; nostackframe; inline;
    function  getCSSL9 : TBits_1; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setCSSL(thebits : TBits_16); assembler; nostackframe; inline;
    procedure setCSSL0(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCSSL1(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCSSL10(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCSSL11(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCSSL12(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCSSL13(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCSSL14(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCSSL15(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCSSL2(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCSSL3(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCSSL4(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCSSL5(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCSSL6(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCSSL7(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCSSL8(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCSSL9(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearCSSL0;
    procedure clearCSSL10;
    procedure clearCSSL11;
    procedure clearCSSL12;
    procedure clearCSSL13;
    procedure clearCSSL14;
    procedure clearCSSL15;
    procedure clearCSSL1;
    procedure clearCSSL2;
    procedure clearCSSL3;
    procedure clearCSSL4;
    procedure clearCSSL5;
    procedure clearCSSL6;
    procedure clearCSSL7;
    procedure clearCSSL8;
    procedure clearCSSL9;
    procedure setCSSL0;
    procedure setCSSL10;
    procedure setCSSL11;
    procedure setCSSL12;
    procedure setCSSL13;
    procedure setCSSL14;
    procedure setCSSL15;
    procedure setCSSL1;
    procedure setCSSL2;
    procedure setCSSL3;
    procedure setCSSL4;
    procedure setCSSL5;
    procedure setCSSL6;
    procedure setCSSL7;
    procedure setCSSL8;
    procedure setCSSL9;
    property CSSL : TBits_16 read getCSSL write setCSSL;
    property CSSL0 : TBits_1 read getCSSL0 write setCSSL0;
    property CSSL1 : TBits_1 read getCSSL1 write setCSSL1;
    property CSSL10 : TBits_1 read getCSSL10 write setCSSL10;
    property CSSL11 : TBits_1 read getCSSL11 write setCSSL11;
    property CSSL12 : TBits_1 read getCSSL12 write setCSSL12;
    property CSSL13 : TBits_1 read getCSSL13 write setCSSL13;
    property CSSL14 : TBits_1 read getCSSL14 write setCSSL14;
    property CSSL15 : TBits_1 read getCSSL15 write setCSSL15;
    property CSSL2 : TBits_1 read getCSSL2 write setCSSL2;
    property CSSL3 : TBits_1 read getCSSL3 write setCSSL3;
    property CSSL4 : TBits_1 read getCSSL4 write setCSSL4;
    property CSSL5 : TBits_1 read getCSSL5 write setCSSL5;
    property CSSL6 : TBits_1 read getCSSL6 write setCSSL6;
    property CSSL7 : TBits_1 read getCSSL7 write setCSSL7;
    property CSSL8 : TBits_1 read getCSSL8 write setCSSL8;
    property CSSL9 : TBits_1 read getCSSL9 write setCSSL9;
    property w : TBits_32 read getw write setw;
  end;
  TADC10_AD1PCFG = record
  private
    function  getPCFG : TBits_16; assembler; nostackframe; inline;
    function  getPCFG0 : TBits_1; assembler; nostackframe; inline;
    function  getPCFG1 : TBits_1; assembler; nostackframe; inline;
    function  getPCFG10 : TBits_1; assembler; nostackframe; inline;
    function  getPCFG11 : TBits_1; assembler; nostackframe; inline;
    function  getPCFG12 : TBits_1; assembler; nostackframe; inline;
    function  getPCFG13 : TBits_1; assembler; nostackframe; inline;
    function  getPCFG14 : TBits_1; assembler; nostackframe; inline;
    function  getPCFG15 : TBits_1; assembler; nostackframe; inline;
    function  getPCFG2 : TBits_1; assembler; nostackframe; inline;
    function  getPCFG3 : TBits_1; assembler; nostackframe; inline;
    function  getPCFG4 : TBits_1; assembler; nostackframe; inline;
    function  getPCFG5 : TBits_1; assembler; nostackframe; inline;
    function  getPCFG6 : TBits_1; assembler; nostackframe; inline;
    function  getPCFG7 : TBits_1; assembler; nostackframe; inline;
    function  getPCFG8 : TBits_1; assembler; nostackframe; inline;
    function  getPCFG9 : TBits_1; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setPCFG(thebits : TBits_16); assembler; nostackframe; inline;
    procedure setPCFG0(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setPCFG1(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setPCFG10(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setPCFG11(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setPCFG12(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setPCFG13(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setPCFG14(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setPCFG15(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setPCFG2(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setPCFG3(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setPCFG4(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setPCFG5(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setPCFG6(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setPCFG7(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setPCFG8(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setPCFG9(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearPCFG0;
    procedure clearPCFG10;
    procedure clearPCFG11;
    procedure clearPCFG12;
    procedure clearPCFG13;
    procedure clearPCFG14;
    procedure clearPCFG15;
    procedure clearPCFG1;
    procedure clearPCFG2;
    procedure clearPCFG3;
    procedure clearPCFG4;
    procedure clearPCFG5;
    procedure clearPCFG6;
    procedure clearPCFG7;
    procedure clearPCFG8;
    procedure clearPCFG9;
    procedure setPCFG0;
    procedure setPCFG10;
    procedure setPCFG11;
    procedure setPCFG12;
    procedure setPCFG13;
    procedure setPCFG14;
    procedure setPCFG15;
    procedure setPCFG1;
    procedure setPCFG2;
    procedure setPCFG3;
    procedure setPCFG4;
    procedure setPCFG5;
    procedure setPCFG6;
    procedure setPCFG7;
    procedure setPCFG8;
    procedure setPCFG9;
    property PCFG : TBits_16 read getPCFG write setPCFG;
    property PCFG0 : TBits_1 read getPCFG0 write setPCFG0;
    property PCFG1 : TBits_1 read getPCFG1 write setPCFG1;
    property PCFG10 : TBits_1 read getPCFG10 write setPCFG10;
    property PCFG11 : TBits_1 read getPCFG11 write setPCFG11;
    property PCFG12 : TBits_1 read getPCFG12 write setPCFG12;
    property PCFG13 : TBits_1 read getPCFG13 write setPCFG13;
    property PCFG14 : TBits_1 read getPCFG14 write setPCFG14;
    property PCFG15 : TBits_1 read getPCFG15 write setPCFG15;
    property PCFG2 : TBits_1 read getPCFG2 write setPCFG2;
    property PCFG3 : TBits_1 read getPCFG3 write setPCFG3;
    property PCFG4 : TBits_1 read getPCFG4 write setPCFG4;
    property PCFG5 : TBits_1 read getPCFG5 write setPCFG5;
    property PCFG6 : TBits_1 read getPCFG6 write setPCFG6;
    property PCFG7 : TBits_1 read getPCFG7 write setPCFG7;
    property PCFG8 : TBits_1 read getPCFG8 write setPCFG8;
    property PCFG9 : TBits_1 read getPCFG9 write setPCFG9;
    property w : TBits_32 read getw write setw;
  end;
type
  TADC10Registers = record
    AD1CON1bits : TADC10_AD1CON1;
    AD1CON1 : longWord;
    AD1CON1CLR : longWord;
    AD1CON1SET : longWord;
    AD1CON1INV : longWord;
    AD1CON2bits : TADC10_AD1CON2;
    AD1CON2 : longWord;
    AD1CON2CLR : longWord;
    AD1CON2SET : longWord;
    AD1CON2INV : longWord;
    AD1CON3bits : TADC10_AD1CON3;
    AD1CON3 : longWord;
    AD1CON3CLR : longWord;
    AD1CON3SET : longWord;
    AD1CON3INV : longWord;
    AD1CHSbits : TADC10_AD1CHS;
    AD1CHS : longWord;
    AD1CHSCLR : longWord;
    AD1CHSSET : longWord;
    AD1CHSINV : longWord;
    AD1CSSLbits : TADC10_AD1CSSL;
    AD1CSSL : longWord;
    AD1CSSLCLR : longWord;
    AD1CSSLSET : longWord;
    AD1CSSLINV : longWord;
    AD1PCFGbits : TADC10_AD1PCFG;
    AD1PCFG : longWord;
    AD1PCFGCLR : longWord;
    AD1PCFGSET : longWord;
    AD1PCFGINV : longWord;
    ADC1BUF0 : longWord;
    ADC1BUF1 : longWord;
    ADC1BUF2 : longWord;
    ADC1BUF3 : longWord;
    ADC1BUF4 : longWord;
    ADC1BUF5 : longWord;
    ADC1BUF6 : longWord;
    ADC1BUF7 : longWord;
    ADC1BUF8 : longWord;
    ADC1BUF9 : longWord;
    ADC1BUFA : longWord;
    ADC1BUFB : longWord;
    ADC1BUFC : longWord;
    ADC1BUFD : longWord;
    ADC1BUFE : longWord;
    ADC1BUFF : longWord;
  end;
  TCVR_CVRCON = record
  private
    function  getCVR : TBits_4; assembler; nostackframe; inline;
    function  getCVR0 : TBits_1; assembler; nostackframe; inline;
    function  getCVR1 : TBits_1; assembler; nostackframe; inline;
    function  getCVR2 : TBits_1; assembler; nostackframe; inline;
    function  getCVR3 : TBits_1; assembler; nostackframe; inline;
    function  getCVROE : TBits_1; assembler; nostackframe; inline;
    function  getCVRR : TBits_1; assembler; nostackframe; inline;
    function  getCVRSS : TBits_1; assembler; nostackframe; inline;
    function  getON : TBits_1; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setCVR(thebits : TBits_4); assembler; nostackframe; inline;
    procedure setCVR0(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCVR1(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCVR2(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCVR3(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCVROE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCVRR(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCVRSS(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setON(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearCVR0;
    procedure clearCVR1;
    procedure clearCVR2;
    procedure clearCVR3;
    procedure clearCVROE;
    procedure clearCVRR;
    procedure clearCVRSS;
    procedure clearON;
    procedure setCVR0;
    procedure setCVR1;
    procedure setCVR2;
    procedure setCVR3;
    procedure setCVROE;
    procedure setCVRR;
    procedure setCVRSS;
    procedure setON;
    property CVR : TBits_4 read getCVR write setCVR;
    property CVR0 : TBits_1 read getCVR0 write setCVR0;
    property CVR1 : TBits_1 read getCVR1 write setCVR1;
    property CVR2 : TBits_1 read getCVR2 write setCVR2;
    property CVR3 : TBits_1 read getCVR3 write setCVR3;
    property CVROE : TBits_1 read getCVROE write setCVROE;
    property CVRR : TBits_1 read getCVRR write setCVRR;
    property CVRSS : TBits_1 read getCVRSS write setCVRSS;
    property ON : TBits_1 read getON write setON;
    property w : TBits_32 read getw write setw;
  end;
type
  TCVRRegisters = record
    CVRCONbits : TCVR_CVRCON;
    CVRCON : longWord;
    CVRCONCLR : longWord;
    CVRCONSET : longWord;
    CVRCONINV : longWord;
  end;
  TCMP_CM1CON = record
  private
    function  getCCH : TBits_2; assembler; nostackframe; inline;
    function  getCCH0 : TBits_1; assembler; nostackframe; inline;
    function  getCCH1 : TBits_1; assembler; nostackframe; inline;
    function  getCOE : TBits_1; assembler; nostackframe; inline;
    function  getCOUT : TBits_1; assembler; nostackframe; inline;
    function  getCPOL : TBits_1; assembler; nostackframe; inline;
    function  getCREF : TBits_1; assembler; nostackframe; inline;
    function  getEVPOL : TBits_2; assembler; nostackframe; inline;
    function  getEVPOL0 : TBits_1; assembler; nostackframe; inline;
    function  getEVPOL1 : TBits_1; assembler; nostackframe; inline;
    function  getON : TBits_1; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setCCH(thebits : TBits_2); assembler; nostackframe; inline;
    procedure setCCH0(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCCH1(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCOE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCOUT(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCPOL(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCREF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setEVPOL(thebits : TBits_2); assembler; nostackframe; inline;
    procedure setEVPOL0(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setEVPOL1(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setON(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearCCH0;
    procedure clearCCH1;
    procedure clearCOE;
    procedure clearCOUT;
    procedure clearCPOL;
    procedure clearCREF;
    procedure clearEVPOL0;
    procedure clearEVPOL1;
    procedure clearON;
    procedure setCCH0;
    procedure setCCH1;
    procedure setCOE;
    procedure setCOUT;
    procedure setCPOL;
    procedure setCREF;
    procedure setEVPOL0;
    procedure setEVPOL1;
    procedure setON;
    property CCH : TBits_2 read getCCH write setCCH;
    property CCH0 : TBits_1 read getCCH0 write setCCH0;
    property CCH1 : TBits_1 read getCCH1 write setCCH1;
    property COE : TBits_1 read getCOE write setCOE;
    property COUT : TBits_1 read getCOUT write setCOUT;
    property CPOL : TBits_1 read getCPOL write setCPOL;
    property CREF : TBits_1 read getCREF write setCREF;
    property EVPOL : TBits_2 read getEVPOL write setEVPOL;
    property EVPOL0 : TBits_1 read getEVPOL0 write setEVPOL0;
    property EVPOL1 : TBits_1 read getEVPOL1 write setEVPOL1;
    property ON : TBits_1 read getON write setON;
    property w : TBits_32 read getw write setw;
  end;
  TCMP_CM2CON = record
  private
    function  getCCH : TBits_2; assembler; nostackframe; inline;
    function  getCCH0 : TBits_1; assembler; nostackframe; inline;
    function  getCCH1 : TBits_1; assembler; nostackframe; inline;
    function  getCOE : TBits_1; assembler; nostackframe; inline;
    function  getCOUT : TBits_1; assembler; nostackframe; inline;
    function  getCPOL : TBits_1; assembler; nostackframe; inline;
    function  getCREF : TBits_1; assembler; nostackframe; inline;
    function  getEVPOL : TBits_2; assembler; nostackframe; inline;
    function  getEVPOL0 : TBits_1; assembler; nostackframe; inline;
    function  getEVPOL1 : TBits_1; assembler; nostackframe; inline;
    function  getON : TBits_1; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setCCH(thebits : TBits_2); assembler; nostackframe; inline;
    procedure setCCH0(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCCH1(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCOE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCOUT(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCPOL(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCREF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setEVPOL(thebits : TBits_2); assembler; nostackframe; inline;
    procedure setEVPOL0(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setEVPOL1(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setON(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearCCH0;
    procedure clearCCH1;
    procedure clearCOE;
    procedure clearCOUT;
    procedure clearCPOL;
    procedure clearCREF;
    procedure clearEVPOL0;
    procedure clearEVPOL1;
    procedure clearON;
    procedure setCCH0;
    procedure setCCH1;
    procedure setCOE;
    procedure setCOUT;
    procedure setCPOL;
    procedure setCREF;
    procedure setEVPOL0;
    procedure setEVPOL1;
    procedure setON;
    property CCH : TBits_2 read getCCH write setCCH;
    property CCH0 : TBits_1 read getCCH0 write setCCH0;
    property CCH1 : TBits_1 read getCCH1 write setCCH1;
    property COE : TBits_1 read getCOE write setCOE;
    property COUT : TBits_1 read getCOUT write setCOUT;
    property CPOL : TBits_1 read getCPOL write setCPOL;
    property CREF : TBits_1 read getCREF write setCREF;
    property EVPOL : TBits_2 read getEVPOL write setEVPOL;
    property EVPOL0 : TBits_1 read getEVPOL0 write setEVPOL0;
    property EVPOL1 : TBits_1 read getEVPOL1 write setEVPOL1;
    property ON : TBits_1 read getON write setON;
    property w : TBits_32 read getw write setw;
  end;
  TCMP_CMSTAT = record
  private
    function  getC1OUT : TBits_1; assembler; nostackframe; inline;
    function  getC2OUT : TBits_1; assembler; nostackframe; inline;
    function  getSIDL : TBits_1; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setC1OUT(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setC2OUT(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSIDL(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearC1OUT;
    procedure clearC2OUT;
    procedure clearSIDL;
    procedure setC1OUT;
    procedure setC2OUT;
    procedure setSIDL;
    property C1OUT : TBits_1 read getC1OUT write setC1OUT;
    property C2OUT : TBits_1 read getC2OUT write setC2OUT;
    property SIDL : TBits_1 read getSIDL write setSIDL;
    property w : TBits_32 read getw write setw;
  end;
type
  TCMPRegisters = record
    CM1CONbits : TCMP_CM1CON;
    CM1CON : longWord;
    CM1CONCLR : longWord;
    CM1CONSET : longWord;
    CM1CONINV : longWord;
    CM2CONbits : TCMP_CM2CON;
    CM2CON : longWord;
    CM2CONCLR : longWord;
    CM2CONSET : longWord;
    CM2CONINV : longWord;
    CMSTATbits : TCMP_CMSTAT;
    CMSTAT : longWord;
    CMSTATCLR : longWord;
    CMSTATSET : longWord;
    CMSTATINV : longWord;
  end;
  TOSC_OSCCON = record
  private
    function  getCF : TBits_1; assembler; nostackframe; inline;
    function  getCLKLOCK : TBits_1; assembler; nostackframe; inline;
    function  getCOSC : TBits_3; assembler; nostackframe; inline;
    function  getCOSC0 : TBits_1; assembler; nostackframe; inline;
    function  getCOSC1 : TBits_1; assembler; nostackframe; inline;
    function  getCOSC2 : TBits_1; assembler; nostackframe; inline;
    function  getFRCDIV : TBits_3; assembler; nostackframe; inline;
    function  getFRCDIV0 : TBits_1; assembler; nostackframe; inline;
    function  getFRCDIV1 : TBits_1; assembler; nostackframe; inline;
    function  getFRCDIV2 : TBits_1; assembler; nostackframe; inline;
    function  getNOSC : TBits_3; assembler; nostackframe; inline;
    function  getNOSC0 : TBits_1; assembler; nostackframe; inline;
    function  getNOSC1 : TBits_1; assembler; nostackframe; inline;
    function  getNOSC2 : TBits_1; assembler; nostackframe; inline;
    function  getOSWEN : TBits_1; assembler; nostackframe; inline;
    function  getPBDIV : TBits_2; assembler; nostackframe; inline;
    function  getPBDIV0 : TBits_1; assembler; nostackframe; inline;
    function  getPBDIV1 : TBits_1; assembler; nostackframe; inline;
    function  getPLLMULT : TBits_3; assembler; nostackframe; inline;
    function  getPLLMULT0 : TBits_1; assembler; nostackframe; inline;
    function  getPLLMULT1 : TBits_1; assembler; nostackframe; inline;
    function  getPLLMULT2 : TBits_1; assembler; nostackframe; inline;
    function  getPLLODIV : TBits_3; assembler; nostackframe; inline;
    function  getPLLODIV0 : TBits_1; assembler; nostackframe; inline;
    function  getPLLODIV1 : TBits_1; assembler; nostackframe; inline;
    function  getPLLODIV2 : TBits_1; assembler; nostackframe; inline;
    function  getSLOCK : TBits_1; assembler; nostackframe; inline;
    function  getSLPEN : TBits_1; assembler; nostackframe; inline;
    function  getSOSCEN : TBits_1; assembler; nostackframe; inline;
    function  getSOSCRDY : TBits_1; assembler; nostackframe; inline;
    function  getUFRCEN : TBits_1; assembler; nostackframe; inline;
    function  getULOCK : TBits_1; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setCF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCLKLOCK(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCOSC(thebits : TBits_3); assembler; nostackframe; inline;
    procedure setCOSC0(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCOSC1(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCOSC2(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setFRCDIV(thebits : TBits_3); assembler; nostackframe; inline;
    procedure setFRCDIV0(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setFRCDIV1(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setFRCDIV2(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setNOSC(thebits : TBits_3); assembler; nostackframe; inline;
    procedure setNOSC0(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setNOSC1(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setNOSC2(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setOSWEN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setPBDIV(thebits : TBits_2); assembler; nostackframe; inline;
    procedure setPBDIV0(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setPBDIV1(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setPLLMULT(thebits : TBits_3); assembler; nostackframe; inline;
    procedure setPLLMULT0(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setPLLMULT1(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setPLLMULT2(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setPLLODIV(thebits : TBits_3); assembler; nostackframe; inline;
    procedure setPLLODIV0(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setPLLODIV1(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setPLLODIV2(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSLOCK(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSLPEN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSOSCEN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSOSCRDY(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setUFRCEN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setULOCK(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearCF;
    procedure clearCLKLOCK;
    procedure clearCOSC0;
    procedure clearCOSC1;
    procedure clearCOSC2;
    procedure clearFRCDIV0;
    procedure clearFRCDIV1;
    procedure clearFRCDIV2;
    procedure clearNOSC0;
    procedure clearNOSC1;
    procedure clearNOSC2;
    procedure clearOSWEN;
    procedure clearPBDIV0;
    procedure clearPBDIV1;
    procedure clearPLLMULT0;
    procedure clearPLLMULT1;
    procedure clearPLLMULT2;
    procedure clearPLLODIV0;
    procedure clearPLLODIV1;
    procedure clearPLLODIV2;
    procedure clearSLOCK;
    procedure clearSLPEN;
    procedure clearSOSCEN;
    procedure clearSOSCRDY;
    procedure clearUFRCEN;
    procedure clearULOCK;
    procedure setCF;
    procedure setCLKLOCK;
    procedure setCOSC0;
    procedure setCOSC1;
    procedure setCOSC2;
    procedure setFRCDIV0;
    procedure setFRCDIV1;
    procedure setFRCDIV2;
    procedure setNOSC0;
    procedure setNOSC1;
    procedure setNOSC2;
    procedure setOSWEN;
    procedure setPBDIV0;
    procedure setPBDIV1;
    procedure setPLLMULT0;
    procedure setPLLMULT1;
    procedure setPLLMULT2;
    procedure setPLLODIV0;
    procedure setPLLODIV1;
    procedure setPLLODIV2;
    procedure setSLOCK;
    procedure setSLPEN;
    procedure setSOSCEN;
    procedure setSOSCRDY;
    procedure setUFRCEN;
    procedure setULOCK;
    property CF : TBits_1 read getCF write setCF;
    property CLKLOCK : TBits_1 read getCLKLOCK write setCLKLOCK;
    property COSC : TBits_3 read getCOSC write setCOSC;
    property COSC0 : TBits_1 read getCOSC0 write setCOSC0;
    property COSC1 : TBits_1 read getCOSC1 write setCOSC1;
    property COSC2 : TBits_1 read getCOSC2 write setCOSC2;
    property FRCDIV : TBits_3 read getFRCDIV write setFRCDIV;
    property FRCDIV0 : TBits_1 read getFRCDIV0 write setFRCDIV0;
    property FRCDIV1 : TBits_1 read getFRCDIV1 write setFRCDIV1;
    property FRCDIV2 : TBits_1 read getFRCDIV2 write setFRCDIV2;
    property NOSC : TBits_3 read getNOSC write setNOSC;
    property NOSC0 : TBits_1 read getNOSC0 write setNOSC0;
    property NOSC1 : TBits_1 read getNOSC1 write setNOSC1;
    property NOSC2 : TBits_1 read getNOSC2 write setNOSC2;
    property OSWEN : TBits_1 read getOSWEN write setOSWEN;
    property PBDIV : TBits_2 read getPBDIV write setPBDIV;
    property PBDIV0 : TBits_1 read getPBDIV0 write setPBDIV0;
    property PBDIV1 : TBits_1 read getPBDIV1 write setPBDIV1;
    property PLLMULT : TBits_3 read getPLLMULT write setPLLMULT;
    property PLLMULT0 : TBits_1 read getPLLMULT0 write setPLLMULT0;
    property PLLMULT1 : TBits_1 read getPLLMULT1 write setPLLMULT1;
    property PLLMULT2 : TBits_1 read getPLLMULT2 write setPLLMULT2;
    property PLLODIV : TBits_3 read getPLLODIV write setPLLODIV;
    property PLLODIV0 : TBits_1 read getPLLODIV0 write setPLLODIV0;
    property PLLODIV1 : TBits_1 read getPLLODIV1 write setPLLODIV1;
    property PLLODIV2 : TBits_1 read getPLLODIV2 write setPLLODIV2;
    property SLOCK : TBits_1 read getSLOCK write setSLOCK;
    property SLPEN : TBits_1 read getSLPEN write setSLPEN;
    property SOSCEN : TBits_1 read getSOSCEN write setSOSCEN;
    property SOSCRDY : TBits_1 read getSOSCRDY write setSOSCRDY;
    property UFRCEN : TBits_1 read getUFRCEN write setUFRCEN;
    property ULOCK : TBits_1 read getULOCK write setULOCK;
    property w : TBits_32 read getw write setw;
  end;
  TOSC_OSCTUN = record
  private
    function  getTUN : TBits_6; assembler; nostackframe; inline;
    function  getTUN0 : TBits_1; assembler; nostackframe; inline;
    function  getTUN1 : TBits_1; assembler; nostackframe; inline;
    function  getTUN2 : TBits_1; assembler; nostackframe; inline;
    function  getTUN3 : TBits_1; assembler; nostackframe; inline;
    function  getTUN4 : TBits_1; assembler; nostackframe; inline;
    function  getTUN5 : TBits_1; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setTUN(thebits : TBits_6); assembler; nostackframe; inline;
    procedure setTUN0(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTUN1(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTUN2(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTUN3(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTUN4(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTUN5(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearTUN0;
    procedure clearTUN1;
    procedure clearTUN2;
    procedure clearTUN3;
    procedure clearTUN4;
    procedure clearTUN5;
    procedure setTUN0;
    procedure setTUN1;
    procedure setTUN2;
    procedure setTUN3;
    procedure setTUN4;
    procedure setTUN5;
    property TUN : TBits_6 read getTUN write setTUN;
    property TUN0 : TBits_1 read getTUN0 write setTUN0;
    property TUN1 : TBits_1 read getTUN1 write setTUN1;
    property TUN2 : TBits_1 read getTUN2 write setTUN2;
    property TUN3 : TBits_1 read getTUN3 write setTUN3;
    property TUN4 : TBits_1 read getTUN4 write setTUN4;
    property TUN5 : TBits_1 read getTUN5 write setTUN5;
    property w : TBits_32 read getw write setw;
  end;
type
  TOSCRegisters = record
    OSCCONbits : TOSC_OSCCON;
    OSCCON : longWord;
    OSCCONCLR : longWord;
    OSCCONSET : longWord;
    OSCCONINV : longWord;
    OSCTUNbits : TOSC_OSCTUN;
    OSCTUN : longWord;
    OSCTUNCLR : longWord;
    OSCTUNSET : longWord;
    OSCTUNINV : longWord;
  end;
type
  TCFGRegisters = record
    DDPCON : longWord;
    DEVID : longWord;
    SYSKEY : longWord;
    SYSKEYCLR : longWord;
    SYSKEYSET : longWord;
    SYSKEYINV : longWord;
  end;
  TNVM_NVMCON = record
  private
    function  getLVDERR : TBits_1; assembler; nostackframe; inline;
    function  getLVDSTAT : TBits_1; assembler; nostackframe; inline;
    function  getNVMOP : TBits_4; assembler; nostackframe; inline;
    function  getNVMOP0 : TBits_1; assembler; nostackframe; inline;
    function  getNVMOP1 : TBits_1; assembler; nostackframe; inline;
    function  getNVMOP2 : TBits_1; assembler; nostackframe; inline;
    function  getNVMOP3 : TBits_1; assembler; nostackframe; inline;
    function  getPROGOP : TBits_4; assembler; nostackframe; inline;
    function  getPROGOP0 : TBits_1; assembler; nostackframe; inline;
    function  getPROGOP1 : TBits_1; assembler; nostackframe; inline;
    function  getPROGOP2 : TBits_1; assembler; nostackframe; inline;
    function  getPROGOP3 : TBits_1; assembler; nostackframe; inline;
    function  getWR : TBits_1; assembler; nostackframe; inline;
    function  getWREN : TBits_1; assembler; nostackframe; inline;
    function  getWRERR : TBits_1; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setLVDERR(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setLVDSTAT(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setNVMOP(thebits : TBits_4); assembler; nostackframe; inline;
    procedure setNVMOP0(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setNVMOP1(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setNVMOP2(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setNVMOP3(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setPROGOP(thebits : TBits_4); assembler; nostackframe; inline;
    procedure setPROGOP0(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setPROGOP1(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setPROGOP2(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setPROGOP3(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setWR(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setWREN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setWRERR(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearLVDERR;
    procedure clearLVDSTAT;
    procedure clearNVMOP0;
    procedure clearNVMOP1;
    procedure clearNVMOP2;
    procedure clearNVMOP3;
    procedure clearPROGOP0;
    procedure clearPROGOP1;
    procedure clearPROGOP2;
    procedure clearPROGOP3;
    procedure clearWR;
    procedure clearWREN;
    procedure clearWRERR;
    procedure setLVDERR;
    procedure setLVDSTAT;
    procedure setNVMOP0;
    procedure setNVMOP1;
    procedure setNVMOP2;
    procedure setNVMOP3;
    procedure setPROGOP0;
    procedure setPROGOP1;
    procedure setPROGOP2;
    procedure setPROGOP3;
    procedure setWR;
    procedure setWREN;
    procedure setWRERR;
    property LVDERR : TBits_1 read getLVDERR write setLVDERR;
    property LVDSTAT : TBits_1 read getLVDSTAT write setLVDSTAT;
    property NVMOP : TBits_4 read getNVMOP write setNVMOP;
    property NVMOP0 : TBits_1 read getNVMOP0 write setNVMOP0;
    property NVMOP1 : TBits_1 read getNVMOP1 write setNVMOP1;
    property NVMOP2 : TBits_1 read getNVMOP2 write setNVMOP2;
    property NVMOP3 : TBits_1 read getNVMOP3 write setNVMOP3;
    property PROGOP : TBits_4 read getPROGOP write setPROGOP;
    property PROGOP0 : TBits_1 read getPROGOP0 write setPROGOP0;
    property PROGOP1 : TBits_1 read getPROGOP1 write setPROGOP1;
    property PROGOP2 : TBits_1 read getPROGOP2 write setPROGOP2;
    property PROGOP3 : TBits_1 read getPROGOP3 write setPROGOP3;
    property WR : TBits_1 read getWR write setWR;
    property WREN : TBits_1 read getWREN write setWREN;
    property WRERR : TBits_1 read getWRERR write setWRERR;
    property w : TBits_32 read getw write setw;
  end;
type
  TNVMRegisters = record
    NVMCONbits : TNVM_NVMCON;
    NVMCON : longWord;
    NVMCONCLR : longWord;
    NVMCONSET : longWord;
    NVMCONINV : longWord;
    NVMKEY : longWord;
    NVMADDR : longWord;
    NVMADDRCLR : longWord;
    NVMADDRSET : longWord;
    NVMADDRINV : longWord;
    NVMDATA : longWord;
    NVMSRCADDR : longWord;
  end;
  TRCON_RCON = record
  private
    function  getBOR : TBits_1; assembler; nostackframe; inline;
    function  getCMR : TBits_1; assembler; nostackframe; inline;
    function  getEXTR : TBits_1; assembler; nostackframe; inline;
    function  getIDLE : TBits_1; assembler; nostackframe; inline;
    function  getPOR : TBits_1; assembler; nostackframe; inline;
    function  getSLEEP : TBits_1; assembler; nostackframe; inline;
    function  getSWR : TBits_1; assembler; nostackframe; inline;
    function  getVREGS : TBits_1; assembler; nostackframe; inline;
    function  getWDTO : TBits_1; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setBOR(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCMR(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setEXTR(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setIDLE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setPOR(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSLEEP(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSWR(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setVREGS(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setWDTO(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearBOR;
    procedure clearCMR;
    procedure clearEXTR;
    procedure clearIDLE;
    procedure clearPOR;
    procedure clearSLEEP;
    procedure clearSWR;
    procedure clearVREGS;
    procedure clearWDTO;
    procedure setBOR;
    procedure setCMR;
    procedure setEXTR;
    procedure setIDLE;
    procedure setPOR;
    procedure setSLEEP;
    procedure setSWR;
    procedure setVREGS;
    procedure setWDTO;
    property BOR : TBits_1 read getBOR write setBOR;
    property CMR : TBits_1 read getCMR write setCMR;
    property EXTR : TBits_1 read getEXTR write setEXTR;
    property IDLE : TBits_1 read getIDLE write setIDLE;
    property POR : TBits_1 read getPOR write setPOR;
    property SLEEP : TBits_1 read getSLEEP write setSLEEP;
    property SWR : TBits_1 read getSWR write setSWR;
    property VREGS : TBits_1 read getVREGS write setVREGS;
    property WDTO : TBits_1 read getWDTO write setWDTO;
    property w : TBits_32 read getw write setw;
  end;
  TRCON_RSWRST = record
  private
    function  getSWRST : TBits_1; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setSWRST(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearSWRST;
    procedure setSWRST;
    property SWRST : TBits_1 read getSWRST write setSWRST;
    property w : TBits_32 read getw write setw;
  end;
type
  TRCONRegisters = record
    RCONbits : TRCON_RCON;
    RCON : longWord;
    RCONCLR : longWord;
    RCONSET : longWord;
    RCONINV : longWord;
    RSWRSTbits : TRCON_RSWRST;
    RSWRST : longWord;
    RSWRSTCLR : longWord;
    RSWRSTSET : longWord;
    RSWRSTINV : longWord;
  end;
type
  T_DDPSTATRegisters = record
    _DDPSTAT : longWord;
  end;
type
  T_STRORegisters = record
    _STRO : longWord;
    _STROCLR : longWord;
    _STROSET : longWord;
    _STROINV : longWord;
  end;
type
  T_APPORegisters = record
    _APPO : longWord;
    _APPOCLR : longWord;
    _APPOSET : longWord;
    _APPOINV : longWord;
  end;
type
  T_APPIRegisters = record
    _APPI : longWord;
  end;
  TINT_INTCON = record
  private
    function  getFRZ : TBits_1; assembler; nostackframe; inline;
    function  getINT0EP : TBits_1; assembler; nostackframe; inline;
    function  getINT1EP : TBits_1; assembler; nostackframe; inline;
    function  getINT2EP : TBits_1; assembler; nostackframe; inline;
    function  getINT3EP : TBits_1; assembler; nostackframe; inline;
    function  getINT4EP : TBits_1; assembler; nostackframe; inline;
    function  getMVEC : TBits_1; assembler; nostackframe; inline;
    function  getSS0 : TBits_1; assembler; nostackframe; inline;
    function  getTPC : TBits_3; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setFRZ(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setINT0EP(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setINT1EP(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setINT2EP(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setINT3EP(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setINT4EP(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setMVEC(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSS0(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTPC(thebits : TBits_3); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearFRZ;
    procedure clearINT0EP;
    procedure clearINT1EP;
    procedure clearINT2EP;
    procedure clearINT3EP;
    procedure clearINT4EP;
    procedure clearMVEC;
    procedure clearSS0;
    procedure setFRZ;
    procedure setINT0EP;
    procedure setINT1EP;
    procedure setINT2EP;
    procedure setINT3EP;
    procedure setINT4EP;
    procedure setMVEC;
    procedure setSS0;
    property FRZ : TBits_1 read getFRZ write setFRZ;
    property INT0EP : TBits_1 read getINT0EP write setINT0EP;
    property INT1EP : TBits_1 read getINT1EP write setINT1EP;
    property INT2EP : TBits_1 read getINT2EP write setINT2EP;
    property INT3EP : TBits_1 read getINT3EP write setINT3EP;
    property INT4EP : TBits_1 read getINT4EP write setINT4EP;
    property MVEC : TBits_1 read getMVEC write setMVEC;
    property SS0 : TBits_1 read getSS0 write setSS0;
    property TPC : TBits_3 read getTPC write setTPC;
    property w : TBits_32 read getw write setw;
  end;
  TINT_IFS0 = record
  private
    function  getCS0IF : TBits_1; assembler; nostackframe; inline;
    function  getCS1IF : TBits_1; assembler; nostackframe; inline;
    function  getCTIF : TBits_1; assembler; nostackframe; inline;
    function  getI2C1ABIF : TBits_1; assembler; nostackframe; inline;
    function  getI2C1AMIF : TBits_1; assembler; nostackframe; inline;
    function  getI2C1ASIF : TBits_1; assembler; nostackframe; inline;
    function  getI2C1BIF : TBits_1; assembler; nostackframe; inline;
    function  getI2C1MIF : TBits_1; assembler; nostackframe; inline;
    function  getI2C1SIF : TBits_1; assembler; nostackframe; inline;
    function  getI2C3BIF : TBits_1; assembler; nostackframe; inline;
    function  getI2C3MIF : TBits_1; assembler; nostackframe; inline;
    function  getI2C3SIF : TBits_1; assembler; nostackframe; inline;
    function  getIC1IF : TBits_1; assembler; nostackframe; inline;
    function  getIC2IF : TBits_1; assembler; nostackframe; inline;
    function  getIC3IF : TBits_1; assembler; nostackframe; inline;
    function  getIC4IF : TBits_1; assembler; nostackframe; inline;
    function  getIC5IF : TBits_1; assembler; nostackframe; inline;
    function  getINT0IF : TBits_1; assembler; nostackframe; inline;
    function  getINT1IF : TBits_1; assembler; nostackframe; inline;
    function  getINT2IF : TBits_1; assembler; nostackframe; inline;
    function  getINT3IF : TBits_1; assembler; nostackframe; inline;
    function  getINT4IF : TBits_1; assembler; nostackframe; inline;
    function  getOC1IF : TBits_1; assembler; nostackframe; inline;
    function  getOC2IF : TBits_1; assembler; nostackframe; inline;
    function  getOC3IF : TBits_1; assembler; nostackframe; inline;
    function  getOC4IF : TBits_1; assembler; nostackframe; inline;
    function  getOC5IF : TBits_1; assembler; nostackframe; inline;
    function  getSPI1AEIF : TBits_1; assembler; nostackframe; inline;
    function  getSPI1ARXIF : TBits_1; assembler; nostackframe; inline;
    function  getSPI1ATXIF : TBits_1; assembler; nostackframe; inline;
    function  getSPI1EIF : TBits_1; assembler; nostackframe; inline;
    function  getSPI1RXIF : TBits_1; assembler; nostackframe; inline;
    function  getSPI1TXIF : TBits_1; assembler; nostackframe; inline;
    function  getSPI3EIF : TBits_1; assembler; nostackframe; inline;
    function  getSPI3RXIF : TBits_1; assembler; nostackframe; inline;
    function  getSPI3TXIF : TBits_1; assembler; nostackframe; inline;
    function  getT1IF : TBits_1; assembler; nostackframe; inline;
    function  getT2IF : TBits_1; assembler; nostackframe; inline;
    function  getT3IF : TBits_1; assembler; nostackframe; inline;
    function  getT4IF : TBits_1; assembler; nostackframe; inline;
    function  getT5IF : TBits_1; assembler; nostackframe; inline;
    function  getU1AEIF : TBits_1; assembler; nostackframe; inline;
    function  getU1ARXIF : TBits_1; assembler; nostackframe; inline;
    function  getU1ATXIF : TBits_1; assembler; nostackframe; inline;
    function  getU1EIF : TBits_1; assembler; nostackframe; inline;
    function  getU1RXIF : TBits_1; assembler; nostackframe; inline;
    function  getU1TXIF : TBits_1; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setCS0IF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCS1IF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCTIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setI2C1ABIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setI2C1AMIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setI2C1ASIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setI2C1BIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setI2C1MIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setI2C1SIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setI2C3BIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setI2C3MIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setI2C3SIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setIC1IF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setIC2IF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setIC3IF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setIC4IF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setIC5IF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setINT0IF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setINT1IF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setINT2IF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setINT3IF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setINT4IF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setOC1IF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setOC2IF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setOC3IF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setOC4IF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setOC5IF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSPI1AEIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSPI1ARXIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSPI1ATXIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSPI1EIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSPI1RXIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSPI1TXIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSPI3EIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSPI3RXIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSPI3TXIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setT1IF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setT2IF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setT3IF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setT4IF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setT5IF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setU1AEIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setU1ARXIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setU1ATXIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setU1EIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setU1RXIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setU1TXIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearCS0IF;
    procedure clearCS1IF;
    procedure clearCTIF;
    procedure clearI2C1ABIF;
    procedure clearI2C1AMIF;
    procedure clearI2C1ASIF;
    procedure clearI2C1BIF;
    procedure clearI2C1MIF;
    procedure clearI2C1SIF;
    procedure clearI2C3BIF;
    procedure clearI2C3MIF;
    procedure clearI2C3SIF;
    procedure clearIC1IF;
    procedure clearIC2IF;
    procedure clearIC3IF;
    procedure clearIC4IF;
    procedure clearIC5IF;
    procedure clearINT0IF;
    procedure clearINT1IF;
    procedure clearINT2IF;
    procedure clearINT3IF;
    procedure clearINT4IF;
    procedure clearOC1IF;
    procedure clearOC2IF;
    procedure clearOC3IF;
    procedure clearOC4IF;
    procedure clearOC5IF;
    procedure clearSPI1AEIF;
    procedure clearSPI1ARXIF;
    procedure clearSPI1ATXIF;
    procedure clearSPI1EIF;
    procedure clearSPI1RXIF;
    procedure clearSPI1TXIF;
    procedure clearSPI3EIF;
    procedure clearSPI3RXIF;
    procedure clearSPI3TXIF;
    procedure clearT1IF;
    procedure clearT2IF;
    procedure clearT3IF;
    procedure clearT4IF;
    procedure clearT5IF;
    procedure clearU1AEIF;
    procedure clearU1ARXIF;
    procedure clearU1ATXIF;
    procedure clearU1EIF;
    procedure clearU1RXIF;
    procedure clearU1TXIF;
    procedure setCS0IF;
    procedure setCS1IF;
    procedure setCTIF;
    procedure setI2C1ABIF;
    procedure setI2C1AMIF;
    procedure setI2C1ASIF;
    procedure setI2C1BIF;
    procedure setI2C1MIF;
    procedure setI2C1SIF;
    procedure setI2C3BIF;
    procedure setI2C3MIF;
    procedure setI2C3SIF;
    procedure setIC1IF;
    procedure setIC2IF;
    procedure setIC3IF;
    procedure setIC4IF;
    procedure setIC5IF;
    procedure setINT0IF;
    procedure setINT1IF;
    procedure setINT2IF;
    procedure setINT3IF;
    procedure setINT4IF;
    procedure setOC1IF;
    procedure setOC2IF;
    procedure setOC3IF;
    procedure setOC4IF;
    procedure setOC5IF;
    procedure setSPI1AEIF;
    procedure setSPI1ARXIF;
    procedure setSPI1ATXIF;
    procedure setSPI1EIF;
    procedure setSPI1RXIF;
    procedure setSPI1TXIF;
    procedure setSPI3EIF;
    procedure setSPI3RXIF;
    procedure setSPI3TXIF;
    procedure setT1IF;
    procedure setT2IF;
    procedure setT3IF;
    procedure setT4IF;
    procedure setT5IF;
    procedure setU1AEIF;
    procedure setU1ARXIF;
    procedure setU1ATXIF;
    procedure setU1EIF;
    procedure setU1RXIF;
    procedure setU1TXIF;
    property CS0IF : TBits_1 read getCS0IF write setCS0IF;
    property CS1IF : TBits_1 read getCS1IF write setCS1IF;
    property CTIF : TBits_1 read getCTIF write setCTIF;
    property I2C1ABIF : TBits_1 read getI2C1ABIF write setI2C1ABIF;
    property I2C1AMIF : TBits_1 read getI2C1AMIF write setI2C1AMIF;
    property I2C1ASIF : TBits_1 read getI2C1ASIF write setI2C1ASIF;
    property I2C1BIF : TBits_1 read getI2C1BIF write setI2C1BIF;
    property I2C1MIF : TBits_1 read getI2C1MIF write setI2C1MIF;
    property I2C1SIF : TBits_1 read getI2C1SIF write setI2C1SIF;
    property I2C3BIF : TBits_1 read getI2C3BIF write setI2C3BIF;
    property I2C3MIF : TBits_1 read getI2C3MIF write setI2C3MIF;
    property I2C3SIF : TBits_1 read getI2C3SIF write setI2C3SIF;
    property IC1IF : TBits_1 read getIC1IF write setIC1IF;
    property IC2IF : TBits_1 read getIC2IF write setIC2IF;
    property IC3IF : TBits_1 read getIC3IF write setIC3IF;
    property IC4IF : TBits_1 read getIC4IF write setIC4IF;
    property IC5IF : TBits_1 read getIC5IF write setIC5IF;
    property INT0IF : TBits_1 read getINT0IF write setINT0IF;
    property INT1IF : TBits_1 read getINT1IF write setINT1IF;
    property INT2IF : TBits_1 read getINT2IF write setINT2IF;
    property INT3IF : TBits_1 read getINT3IF write setINT3IF;
    property INT4IF : TBits_1 read getINT4IF write setINT4IF;
    property OC1IF : TBits_1 read getOC1IF write setOC1IF;
    property OC2IF : TBits_1 read getOC2IF write setOC2IF;
    property OC3IF : TBits_1 read getOC3IF write setOC3IF;
    property OC4IF : TBits_1 read getOC4IF write setOC4IF;
    property OC5IF : TBits_1 read getOC5IF write setOC5IF;
    property SPI1AEIF : TBits_1 read getSPI1AEIF write setSPI1AEIF;
    property SPI1ARXIF : TBits_1 read getSPI1ARXIF write setSPI1ARXIF;
    property SPI1ATXIF : TBits_1 read getSPI1ATXIF write setSPI1ATXIF;
    property SPI1EIF : TBits_1 read getSPI1EIF write setSPI1EIF;
    property SPI1RXIF : TBits_1 read getSPI1RXIF write setSPI1RXIF;
    property SPI1TXIF : TBits_1 read getSPI1TXIF write setSPI1TXIF;
    property SPI3EIF : TBits_1 read getSPI3EIF write setSPI3EIF;
    property SPI3RXIF : TBits_1 read getSPI3RXIF write setSPI3RXIF;
    property SPI3TXIF : TBits_1 read getSPI3TXIF write setSPI3TXIF;
    property T1IF : TBits_1 read getT1IF write setT1IF;
    property T2IF : TBits_1 read getT2IF write setT2IF;
    property T3IF : TBits_1 read getT3IF write setT3IF;
    property T4IF : TBits_1 read getT4IF write setT4IF;
    property T5IF : TBits_1 read getT5IF write setT5IF;
    property U1AEIF : TBits_1 read getU1AEIF write setU1AEIF;
    property U1ARXIF : TBits_1 read getU1ARXIF write setU1ARXIF;
    property U1ATXIF : TBits_1 read getU1ATXIF write setU1ATXIF;
    property U1EIF : TBits_1 read getU1EIF write setU1EIF;
    property U1RXIF : TBits_1 read getU1RXIF write setU1RXIF;
    property U1TXIF : TBits_1 read getU1TXIF write setU1TXIF;
    property w : TBits_32 read getw write setw;
  end;
  TINT_IFS1 = record
  private
    function  getAD1IF : TBits_1; assembler; nostackframe; inline;
    function  getCAN1IF : TBits_1; assembler; nostackframe; inline;
    function  getCMP1IF : TBits_1; assembler; nostackframe; inline;
    function  getCMP2IF : TBits_1; assembler; nostackframe; inline;
    function  getCNIF : TBits_1; assembler; nostackframe; inline;
    function  getDMA0IF : TBits_1; assembler; nostackframe; inline;
    function  getDMA1IF : TBits_1; assembler; nostackframe; inline;
    function  getDMA2IF : TBits_1; assembler; nostackframe; inline;
    function  getDMA3IF : TBits_1; assembler; nostackframe; inline;
    function  getDMA4IF : TBits_1; assembler; nostackframe; inline;
    function  getDMA5IF : TBits_1; assembler; nostackframe; inline;
    function  getDMA6IF : TBits_1; assembler; nostackframe; inline;
    function  getDMA7IF : TBits_1; assembler; nostackframe; inline;
    function  getFCEIF : TBits_1; assembler; nostackframe; inline;
    function  getFSCMIF : TBits_1; assembler; nostackframe; inline;
    function  getI2C2ABIF : TBits_1; assembler; nostackframe; inline;
    function  getI2C2AMIF : TBits_1; assembler; nostackframe; inline;
    function  getI2C2ASIF : TBits_1; assembler; nostackframe; inline;
    function  getI2C2BIF : TBits_1; assembler; nostackframe; inline;
    function  getI2C2MIF : TBits_1; assembler; nostackframe; inline;
    function  getI2C2SIF : TBits_1; assembler; nostackframe; inline;
    function  getI2C3ABIF : TBits_1; assembler; nostackframe; inline;
    function  getI2C3AMIF : TBits_1; assembler; nostackframe; inline;
    function  getI2C3ASIF : TBits_1; assembler; nostackframe; inline;
    function  getI2C4BIF : TBits_1; assembler; nostackframe; inline;
    function  getI2C4MIF : TBits_1; assembler; nostackframe; inline;
    function  getI2C4SIF : TBits_1; assembler; nostackframe; inline;
    function  getI2C5BIF : TBits_1; assembler; nostackframe; inline;
    function  getI2C5MIF : TBits_1; assembler; nostackframe; inline;
    function  getI2C5SIF : TBits_1; assembler; nostackframe; inline;
    function  getIC1EIF : TBits_1; assembler; nostackframe; inline;
    function  getIC2EIF : TBits_1; assembler; nostackframe; inline;
    function  getIC3EIF : TBits_1; assembler; nostackframe; inline;
    function  getPMPIF : TBits_1; assembler; nostackframe; inline;
    function  getRTCCIF : TBits_1; assembler; nostackframe; inline;
    function  getSPI2AEIF : TBits_1; assembler; nostackframe; inline;
    function  getSPI2ARXIF : TBits_1; assembler; nostackframe; inline;
    function  getSPI2ATXIF : TBits_1; assembler; nostackframe; inline;
    function  getSPI2EIF : TBits_1; assembler; nostackframe; inline;
    function  getSPI2RXIF : TBits_1; assembler; nostackframe; inline;
    function  getSPI2TXIF : TBits_1; assembler; nostackframe; inline;
    function  getSPI3AEIF : TBits_1; assembler; nostackframe; inline;
    function  getSPI3ARXIF : TBits_1; assembler; nostackframe; inline;
    function  getSPI3ATXIF : TBits_1; assembler; nostackframe; inline;
    function  getSPI4EIF : TBits_1; assembler; nostackframe; inline;
    function  getSPI4RXIF : TBits_1; assembler; nostackframe; inline;
    function  getSPI4TXIF : TBits_1; assembler; nostackframe; inline;
    function  getU2AEIF : TBits_1; assembler; nostackframe; inline;
    function  getU2ARXIF : TBits_1; assembler; nostackframe; inline;
    function  getU2ATXIF : TBits_1; assembler; nostackframe; inline;
    function  getU2EIF : TBits_1; assembler; nostackframe; inline;
    function  getU2RXIF : TBits_1; assembler; nostackframe; inline;
    function  getU2TXIF : TBits_1; assembler; nostackframe; inline;
    function  getU3AEIF : TBits_1; assembler; nostackframe; inline;
    function  getU3ARXIF : TBits_1; assembler; nostackframe; inline;
    function  getU3ATXIF : TBits_1; assembler; nostackframe; inline;
    function  getU3EIF : TBits_1; assembler; nostackframe; inline;
    function  getU3RXIF : TBits_1; assembler; nostackframe; inline;
    function  getU3TXIF : TBits_1; assembler; nostackframe; inline;
    function  getUSBIF : TBits_1; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setAD1IF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCAN1IF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCMP1IF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCMP2IF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCNIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setDMA0IF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setDMA1IF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setDMA2IF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setDMA3IF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setDMA4IF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setDMA5IF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setDMA6IF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setDMA7IF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setFCEIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setFSCMIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setI2C2ABIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setI2C2AMIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setI2C2ASIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setI2C2BIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setI2C2MIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setI2C2SIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setI2C3ABIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setI2C3AMIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setI2C3ASIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setI2C4BIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setI2C4MIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setI2C4SIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setI2C5BIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setI2C5MIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setI2C5SIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setIC1EIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setIC2EIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setIC3EIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setPMPIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRTCCIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSPI2AEIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSPI2ARXIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSPI2ATXIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSPI2EIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSPI2RXIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSPI2TXIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSPI3AEIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSPI3ARXIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSPI3ATXIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSPI4EIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSPI4RXIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSPI4TXIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setU2AEIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setU2ARXIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setU2ATXIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setU2EIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setU2RXIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setU2TXIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setU3AEIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setU3ARXIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setU3ATXIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setU3EIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setU3RXIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setU3TXIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setUSBIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearAD1IF;
    procedure clearCAN1IF;
    procedure clearCMP1IF;
    procedure clearCMP2IF;
    procedure clearCNIF;
    procedure clearDMA0IF;
    procedure clearDMA1IF;
    procedure clearDMA2IF;
    procedure clearDMA3IF;
    procedure clearDMA4IF;
    procedure clearDMA5IF;
    procedure clearDMA6IF;
    procedure clearDMA7IF;
    procedure clearFCEIF;
    procedure clearFSCMIF;
    procedure clearI2C2ABIF;
    procedure clearI2C2AMIF;
    procedure clearI2C2ASIF;
    procedure clearI2C2BIF;
    procedure clearI2C2MIF;
    procedure clearI2C2SIF;
    procedure clearI2C3ABIF;
    procedure clearI2C3AMIF;
    procedure clearI2C3ASIF;
    procedure clearI2C4BIF;
    procedure clearI2C4MIF;
    procedure clearI2C4SIF;
    procedure clearI2C5BIF;
    procedure clearI2C5MIF;
    procedure clearI2C5SIF;
    procedure clearIC1EIF;
    procedure clearIC2EIF;
    procedure clearIC3EIF;
    procedure clearPMPIF;
    procedure clearRTCCIF;
    procedure clearSPI2AEIF;
    procedure clearSPI2ARXIF;
    procedure clearSPI2ATXIF;
    procedure clearSPI2EIF;
    procedure clearSPI2RXIF;
    procedure clearSPI2TXIF;
    procedure clearSPI3AEIF;
    procedure clearSPI3ARXIF;
    procedure clearSPI3ATXIF;
    procedure clearSPI4EIF;
    procedure clearSPI4RXIF;
    procedure clearSPI4TXIF;
    procedure clearU2AEIF;
    procedure clearU2ARXIF;
    procedure clearU2ATXIF;
    procedure clearU2EIF;
    procedure clearU2RXIF;
    procedure clearU2TXIF;
    procedure clearU3AEIF;
    procedure clearU3ARXIF;
    procedure clearU3ATXIF;
    procedure clearU3EIF;
    procedure clearU3RXIF;
    procedure clearU3TXIF;
    procedure clearUSBIF;
    procedure setAD1IF;
    procedure setCAN1IF;
    procedure setCMP1IF;
    procedure setCMP2IF;
    procedure setCNIF;
    procedure setDMA0IF;
    procedure setDMA1IF;
    procedure setDMA2IF;
    procedure setDMA3IF;
    procedure setDMA4IF;
    procedure setDMA5IF;
    procedure setDMA6IF;
    procedure setDMA7IF;
    procedure setFCEIF;
    procedure setFSCMIF;
    procedure setI2C2ABIF;
    procedure setI2C2AMIF;
    procedure setI2C2ASIF;
    procedure setI2C2BIF;
    procedure setI2C2MIF;
    procedure setI2C2SIF;
    procedure setI2C3ABIF;
    procedure setI2C3AMIF;
    procedure setI2C3ASIF;
    procedure setI2C4BIF;
    procedure setI2C4MIF;
    procedure setI2C4SIF;
    procedure setI2C5BIF;
    procedure setI2C5MIF;
    procedure setI2C5SIF;
    procedure setIC1EIF;
    procedure setIC2EIF;
    procedure setIC3EIF;
    procedure setPMPIF;
    procedure setRTCCIF;
    procedure setSPI2AEIF;
    procedure setSPI2ARXIF;
    procedure setSPI2ATXIF;
    procedure setSPI2EIF;
    procedure setSPI2RXIF;
    procedure setSPI2TXIF;
    procedure setSPI3AEIF;
    procedure setSPI3ARXIF;
    procedure setSPI3ATXIF;
    procedure setSPI4EIF;
    procedure setSPI4RXIF;
    procedure setSPI4TXIF;
    procedure setU2AEIF;
    procedure setU2ARXIF;
    procedure setU2ATXIF;
    procedure setU2EIF;
    procedure setU2RXIF;
    procedure setU2TXIF;
    procedure setU3AEIF;
    procedure setU3ARXIF;
    procedure setU3ATXIF;
    procedure setU3EIF;
    procedure setU3RXIF;
    procedure setU3TXIF;
    procedure setUSBIF;
    property AD1IF : TBits_1 read getAD1IF write setAD1IF;
    property CAN1IF : TBits_1 read getCAN1IF write setCAN1IF;
    property CMP1IF : TBits_1 read getCMP1IF write setCMP1IF;
    property CMP2IF : TBits_1 read getCMP2IF write setCMP2IF;
    property CNIF : TBits_1 read getCNIF write setCNIF;
    property DMA0IF : TBits_1 read getDMA0IF write setDMA0IF;
    property DMA1IF : TBits_1 read getDMA1IF write setDMA1IF;
    property DMA2IF : TBits_1 read getDMA2IF write setDMA2IF;
    property DMA3IF : TBits_1 read getDMA3IF write setDMA3IF;
    property DMA4IF : TBits_1 read getDMA4IF write setDMA4IF;
    property DMA5IF : TBits_1 read getDMA5IF write setDMA5IF;
    property DMA6IF : TBits_1 read getDMA6IF write setDMA6IF;
    property DMA7IF : TBits_1 read getDMA7IF write setDMA7IF;
    property FCEIF : TBits_1 read getFCEIF write setFCEIF;
    property FSCMIF : TBits_1 read getFSCMIF write setFSCMIF;
    property I2C2ABIF : TBits_1 read getI2C2ABIF write setI2C2ABIF;
    property I2C2AMIF : TBits_1 read getI2C2AMIF write setI2C2AMIF;
    property I2C2ASIF : TBits_1 read getI2C2ASIF write setI2C2ASIF;
    property I2C2BIF : TBits_1 read getI2C2BIF write setI2C2BIF;
    property I2C2MIF : TBits_1 read getI2C2MIF write setI2C2MIF;
    property I2C2SIF : TBits_1 read getI2C2SIF write setI2C2SIF;
    property I2C3ABIF : TBits_1 read getI2C3ABIF write setI2C3ABIF;
    property I2C3AMIF : TBits_1 read getI2C3AMIF write setI2C3AMIF;
    property I2C3ASIF : TBits_1 read getI2C3ASIF write setI2C3ASIF;
    property I2C4BIF : TBits_1 read getI2C4BIF write setI2C4BIF;
    property I2C4MIF : TBits_1 read getI2C4MIF write setI2C4MIF;
    property I2C4SIF : TBits_1 read getI2C4SIF write setI2C4SIF;
    property I2C5BIF : TBits_1 read getI2C5BIF write setI2C5BIF;
    property I2C5MIF : TBits_1 read getI2C5MIF write setI2C5MIF;
    property I2C5SIF : TBits_1 read getI2C5SIF write setI2C5SIF;
    property IC1EIF : TBits_1 read getIC1EIF write setIC1EIF;
    property IC2EIF : TBits_1 read getIC2EIF write setIC2EIF;
    property IC3EIF : TBits_1 read getIC3EIF write setIC3EIF;
    property PMPIF : TBits_1 read getPMPIF write setPMPIF;
    property RTCCIF : TBits_1 read getRTCCIF write setRTCCIF;
    property SPI2AEIF : TBits_1 read getSPI2AEIF write setSPI2AEIF;
    property SPI2ARXIF : TBits_1 read getSPI2ARXIF write setSPI2ARXIF;
    property SPI2ATXIF : TBits_1 read getSPI2ATXIF write setSPI2ATXIF;
    property SPI2EIF : TBits_1 read getSPI2EIF write setSPI2EIF;
    property SPI2RXIF : TBits_1 read getSPI2RXIF write setSPI2RXIF;
    property SPI2TXIF : TBits_1 read getSPI2TXIF write setSPI2TXIF;
    property SPI3AEIF : TBits_1 read getSPI3AEIF write setSPI3AEIF;
    property SPI3ARXIF : TBits_1 read getSPI3ARXIF write setSPI3ARXIF;
    property SPI3ATXIF : TBits_1 read getSPI3ATXIF write setSPI3ATXIF;
    property SPI4EIF : TBits_1 read getSPI4EIF write setSPI4EIF;
    property SPI4RXIF : TBits_1 read getSPI4RXIF write setSPI4RXIF;
    property SPI4TXIF : TBits_1 read getSPI4TXIF write setSPI4TXIF;
    property U2AEIF : TBits_1 read getU2AEIF write setU2AEIF;
    property U2ARXIF : TBits_1 read getU2ARXIF write setU2ARXIF;
    property U2ATXIF : TBits_1 read getU2ATXIF write setU2ATXIF;
    property U2EIF : TBits_1 read getU2EIF write setU2EIF;
    property U2RXIF : TBits_1 read getU2RXIF write setU2RXIF;
    property U2TXIF : TBits_1 read getU2TXIF write setU2TXIF;
    property U3AEIF : TBits_1 read getU3AEIF write setU3AEIF;
    property U3ARXIF : TBits_1 read getU3ARXIF write setU3ARXIF;
    property U3ATXIF : TBits_1 read getU3ATXIF write setU3ATXIF;
    property U3EIF : TBits_1 read getU3EIF write setU3EIF;
    property U3RXIF : TBits_1 read getU3RXIF write setU3RXIF;
    property U3TXIF : TBits_1 read getU3TXIF write setU3TXIF;
    property USBIF : TBits_1 read getUSBIF write setUSBIF;
    property w : TBits_32 read getw write setw;
  end;
  TINT_IFS2 = record
  private
    function  getIC4EIF : TBits_1; assembler; nostackframe; inline;
    function  getIC5EIF : TBits_1; assembler; nostackframe; inline;
    function  getPMPEIF : TBits_1; assembler; nostackframe; inline;
    function  getU1BEIF : TBits_1; assembler; nostackframe; inline;
    function  getU1BRXIF : TBits_1; assembler; nostackframe; inline;
    function  getU1BTXIF : TBits_1; assembler; nostackframe; inline;
    function  getU2BEIF : TBits_1; assembler; nostackframe; inline;
    function  getU2BRXIF : TBits_1; assembler; nostackframe; inline;
    function  getU2BTXIF : TBits_1; assembler; nostackframe; inline;
    function  getU3BEIF : TBits_1; assembler; nostackframe; inline;
    function  getU3BRXIF : TBits_1; assembler; nostackframe; inline;
    function  getU3BTXIF : TBits_1; assembler; nostackframe; inline;
    function  getU4EIF : TBits_1; assembler; nostackframe; inline;
    function  getU4RXIF : TBits_1; assembler; nostackframe; inline;
    function  getU4TXIF : TBits_1; assembler; nostackframe; inline;
    function  getU5EIF : TBits_1; assembler; nostackframe; inline;
    function  getU5RXIF : TBits_1; assembler; nostackframe; inline;
    function  getU5TXIF : TBits_1; assembler; nostackframe; inline;
    function  getU6EIF : TBits_1; assembler; nostackframe; inline;
    function  getU6RXIF : TBits_1; assembler; nostackframe; inline;
    function  getU6TXIF : TBits_1; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setIC4EIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setIC5EIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setPMPEIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setU1BEIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setU1BRXIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setU1BTXIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setU2BEIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setU2BRXIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setU2BTXIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setU3BEIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setU3BRXIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setU3BTXIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setU4EIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setU4RXIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setU4TXIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setU5EIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setU5RXIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setU5TXIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setU6EIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setU6RXIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setU6TXIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearIC4EIF;
    procedure clearIC5EIF;
    procedure clearPMPEIF;
    procedure clearU1BEIF;
    procedure clearU1BRXIF;
    procedure clearU1BTXIF;
    procedure clearU2BEIF;
    procedure clearU2BRXIF;
    procedure clearU2BTXIF;
    procedure clearU3BEIF;
    procedure clearU3BRXIF;
    procedure clearU3BTXIF;
    procedure clearU4EIF;
    procedure clearU4RXIF;
    procedure clearU4TXIF;
    procedure clearU5EIF;
    procedure clearU5RXIF;
    procedure clearU5TXIF;
    procedure clearU6EIF;
    procedure clearU6RXIF;
    procedure clearU6TXIF;
    procedure setIC4EIF;
    procedure setIC5EIF;
    procedure setPMPEIF;
    procedure setU1BEIF;
    procedure setU1BRXIF;
    procedure setU1BTXIF;
    procedure setU2BEIF;
    procedure setU2BRXIF;
    procedure setU2BTXIF;
    procedure setU3BEIF;
    procedure setU3BRXIF;
    procedure setU3BTXIF;
    procedure setU4EIF;
    procedure setU4RXIF;
    procedure setU4TXIF;
    procedure setU5EIF;
    procedure setU5RXIF;
    procedure setU5TXIF;
    procedure setU6EIF;
    procedure setU6RXIF;
    procedure setU6TXIF;
    property IC4EIF : TBits_1 read getIC4EIF write setIC4EIF;
    property IC5EIF : TBits_1 read getIC5EIF write setIC5EIF;
    property PMPEIF : TBits_1 read getPMPEIF write setPMPEIF;
    property U1BEIF : TBits_1 read getU1BEIF write setU1BEIF;
    property U1BRXIF : TBits_1 read getU1BRXIF write setU1BRXIF;
    property U1BTXIF : TBits_1 read getU1BTXIF write setU1BTXIF;
    property U2BEIF : TBits_1 read getU2BEIF write setU2BEIF;
    property U2BRXIF : TBits_1 read getU2BRXIF write setU2BRXIF;
    property U2BTXIF : TBits_1 read getU2BTXIF write setU2BTXIF;
    property U3BEIF : TBits_1 read getU3BEIF write setU3BEIF;
    property U3BRXIF : TBits_1 read getU3BRXIF write setU3BRXIF;
    property U3BTXIF : TBits_1 read getU3BTXIF write setU3BTXIF;
    property U4EIF : TBits_1 read getU4EIF write setU4EIF;
    property U4RXIF : TBits_1 read getU4RXIF write setU4RXIF;
    property U4TXIF : TBits_1 read getU4TXIF write setU4TXIF;
    property U5EIF : TBits_1 read getU5EIF write setU5EIF;
    property U5RXIF : TBits_1 read getU5RXIF write setU5RXIF;
    property U5TXIF : TBits_1 read getU5TXIF write setU5TXIF;
    property U6EIF : TBits_1 read getU6EIF write setU6EIF;
    property U6RXIF : TBits_1 read getU6RXIF write setU6RXIF;
    property U6TXIF : TBits_1 read getU6TXIF write setU6TXIF;
    property w : TBits_32 read getw write setw;
  end;
  TINT_IEC0 = record
  private
    function  getCS0IE : TBits_1; assembler; nostackframe; inline;
    function  getCS1IE : TBits_1; assembler; nostackframe; inline;
    function  getCTIE : TBits_1; assembler; nostackframe; inline;
    function  getI2C1ABIE : TBits_1; assembler; nostackframe; inline;
    function  getI2C1AMIE : TBits_1; assembler; nostackframe; inline;
    function  getI2C1ASIE : TBits_1; assembler; nostackframe; inline;
    function  getI2C1BIE : TBits_1; assembler; nostackframe; inline;
    function  getI2C1MIE : TBits_1; assembler; nostackframe; inline;
    function  getI2C1SIE : TBits_1; assembler; nostackframe; inline;
    function  getI2C3BIE : TBits_1; assembler; nostackframe; inline;
    function  getI2C3MIE : TBits_1; assembler; nostackframe; inline;
    function  getI2C3SIE : TBits_1; assembler; nostackframe; inline;
    function  getIC1IE : TBits_1; assembler; nostackframe; inline;
    function  getIC2IE : TBits_1; assembler; nostackframe; inline;
    function  getIC3IE : TBits_1; assembler; nostackframe; inline;
    function  getIC4IE : TBits_1; assembler; nostackframe; inline;
    function  getIC5IE : TBits_1; assembler; nostackframe; inline;
    function  getINT0IE : TBits_1; assembler; nostackframe; inline;
    function  getINT1IE : TBits_1; assembler; nostackframe; inline;
    function  getINT2IE : TBits_1; assembler; nostackframe; inline;
    function  getINT3IE : TBits_1; assembler; nostackframe; inline;
    function  getINT4IE : TBits_1; assembler; nostackframe; inline;
    function  getOC1IE : TBits_1; assembler; nostackframe; inline;
    function  getOC2IE : TBits_1; assembler; nostackframe; inline;
    function  getOC3IE : TBits_1; assembler; nostackframe; inline;
    function  getOC4IE : TBits_1; assembler; nostackframe; inline;
    function  getOC5IE : TBits_1; assembler; nostackframe; inline;
    function  getSPI1AEIE : TBits_1; assembler; nostackframe; inline;
    function  getSPI1ARXIE : TBits_1; assembler; nostackframe; inline;
    function  getSPI1ATXIE : TBits_1; assembler; nostackframe; inline;
    function  getSPI1EIE : TBits_1; assembler; nostackframe; inline;
    function  getSPI1RXIE : TBits_1; assembler; nostackframe; inline;
    function  getSPI1TXIE : TBits_1; assembler; nostackframe; inline;
    function  getSPI3EIE : TBits_1; assembler; nostackframe; inline;
    function  getSPI3RXIE : TBits_1; assembler; nostackframe; inline;
    function  getSPI3TXIE : TBits_1; assembler; nostackframe; inline;
    function  getT1IE : TBits_1; assembler; nostackframe; inline;
    function  getT2IE : TBits_1; assembler; nostackframe; inline;
    function  getT3IE : TBits_1; assembler; nostackframe; inline;
    function  getT4IE : TBits_1; assembler; nostackframe; inline;
    function  getT5IE : TBits_1; assembler; nostackframe; inline;
    function  getU1AEIE : TBits_1; assembler; nostackframe; inline;
    function  getU1ARXIE : TBits_1; assembler; nostackframe; inline;
    function  getU1ATXIE : TBits_1; assembler; nostackframe; inline;
    function  getU1EIE : TBits_1; assembler; nostackframe; inline;
    function  getU1RXIE : TBits_1; assembler; nostackframe; inline;
    function  getU1TXIE : TBits_1; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setCS0IE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCS1IE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCTIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setI2C1ABIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setI2C1AMIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setI2C1ASIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setI2C1BIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setI2C1MIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setI2C1SIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setI2C3BIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setI2C3MIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setI2C3SIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setIC1IE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setIC2IE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setIC3IE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setIC4IE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setIC5IE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setINT0IE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setINT1IE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setINT2IE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setINT3IE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setINT4IE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setOC1IE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setOC2IE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setOC3IE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setOC4IE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setOC5IE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSPI1AEIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSPI1ARXIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSPI1ATXIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSPI1EIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSPI1RXIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSPI1TXIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSPI3EIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSPI3RXIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSPI3TXIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setT1IE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setT2IE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setT3IE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setT4IE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setT5IE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setU1AEIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setU1ARXIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setU1ATXIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setU1EIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setU1RXIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setU1TXIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearCS0IE;
    procedure clearCS1IE;
    procedure clearCTIE;
    procedure clearI2C1ABIE;
    procedure clearI2C1AMIE;
    procedure clearI2C1ASIE;
    procedure clearI2C1BIE;
    procedure clearI2C1MIE;
    procedure clearI2C1SIE;
    procedure clearI2C3BIE;
    procedure clearI2C3MIE;
    procedure clearI2C3SIE;
    procedure clearIC1IE;
    procedure clearIC2IE;
    procedure clearIC3IE;
    procedure clearIC4IE;
    procedure clearIC5IE;
    procedure clearINT0IE;
    procedure clearINT1IE;
    procedure clearINT2IE;
    procedure clearINT3IE;
    procedure clearINT4IE;
    procedure clearOC1IE;
    procedure clearOC2IE;
    procedure clearOC3IE;
    procedure clearOC4IE;
    procedure clearOC5IE;
    procedure clearSPI1AEIE;
    procedure clearSPI1ARXIE;
    procedure clearSPI1ATXIE;
    procedure clearSPI1EIE;
    procedure clearSPI1RXIE;
    procedure clearSPI1TXIE;
    procedure clearSPI3EIE;
    procedure clearSPI3RXIE;
    procedure clearSPI3TXIE;
    procedure clearT1IE;
    procedure clearT2IE;
    procedure clearT3IE;
    procedure clearT4IE;
    procedure clearT5IE;
    procedure clearU1AEIE;
    procedure clearU1ARXIE;
    procedure clearU1ATXIE;
    procedure clearU1EIE;
    procedure clearU1RXIE;
    procedure clearU1TXIE;
    procedure setCS0IE;
    procedure setCS1IE;
    procedure setCTIE;
    procedure setI2C1ABIE;
    procedure setI2C1AMIE;
    procedure setI2C1ASIE;
    procedure setI2C1BIE;
    procedure setI2C1MIE;
    procedure setI2C1SIE;
    procedure setI2C3BIE;
    procedure setI2C3MIE;
    procedure setI2C3SIE;
    procedure setIC1IE;
    procedure setIC2IE;
    procedure setIC3IE;
    procedure setIC4IE;
    procedure setIC5IE;
    procedure setINT0IE;
    procedure setINT1IE;
    procedure setINT2IE;
    procedure setINT3IE;
    procedure setINT4IE;
    procedure setOC1IE;
    procedure setOC2IE;
    procedure setOC3IE;
    procedure setOC4IE;
    procedure setOC5IE;
    procedure setSPI1AEIE;
    procedure setSPI1ARXIE;
    procedure setSPI1ATXIE;
    procedure setSPI1EIE;
    procedure setSPI1RXIE;
    procedure setSPI1TXIE;
    procedure setSPI3EIE;
    procedure setSPI3RXIE;
    procedure setSPI3TXIE;
    procedure setT1IE;
    procedure setT2IE;
    procedure setT3IE;
    procedure setT4IE;
    procedure setT5IE;
    procedure setU1AEIE;
    procedure setU1ARXIE;
    procedure setU1ATXIE;
    procedure setU1EIE;
    procedure setU1RXIE;
    procedure setU1TXIE;
    property CS0IE : TBits_1 read getCS0IE write setCS0IE;
    property CS1IE : TBits_1 read getCS1IE write setCS1IE;
    property CTIE : TBits_1 read getCTIE write setCTIE;
    property I2C1ABIE : TBits_1 read getI2C1ABIE write setI2C1ABIE;
    property I2C1AMIE : TBits_1 read getI2C1AMIE write setI2C1AMIE;
    property I2C1ASIE : TBits_1 read getI2C1ASIE write setI2C1ASIE;
    property I2C1BIE : TBits_1 read getI2C1BIE write setI2C1BIE;
    property I2C1MIE : TBits_1 read getI2C1MIE write setI2C1MIE;
    property I2C1SIE : TBits_1 read getI2C1SIE write setI2C1SIE;
    property I2C3BIE : TBits_1 read getI2C3BIE write setI2C3BIE;
    property I2C3MIE : TBits_1 read getI2C3MIE write setI2C3MIE;
    property I2C3SIE : TBits_1 read getI2C3SIE write setI2C3SIE;
    property IC1IE : TBits_1 read getIC1IE write setIC1IE;
    property IC2IE : TBits_1 read getIC2IE write setIC2IE;
    property IC3IE : TBits_1 read getIC3IE write setIC3IE;
    property IC4IE : TBits_1 read getIC4IE write setIC4IE;
    property IC5IE : TBits_1 read getIC5IE write setIC5IE;
    property INT0IE : TBits_1 read getINT0IE write setINT0IE;
    property INT1IE : TBits_1 read getINT1IE write setINT1IE;
    property INT2IE : TBits_1 read getINT2IE write setINT2IE;
    property INT3IE : TBits_1 read getINT3IE write setINT3IE;
    property INT4IE : TBits_1 read getINT4IE write setINT4IE;
    property OC1IE : TBits_1 read getOC1IE write setOC1IE;
    property OC2IE : TBits_1 read getOC2IE write setOC2IE;
    property OC3IE : TBits_1 read getOC3IE write setOC3IE;
    property OC4IE : TBits_1 read getOC4IE write setOC4IE;
    property OC5IE : TBits_1 read getOC5IE write setOC5IE;
    property SPI1AEIE : TBits_1 read getSPI1AEIE write setSPI1AEIE;
    property SPI1ARXIE : TBits_1 read getSPI1ARXIE write setSPI1ARXIE;
    property SPI1ATXIE : TBits_1 read getSPI1ATXIE write setSPI1ATXIE;
    property SPI1EIE : TBits_1 read getSPI1EIE write setSPI1EIE;
    property SPI1RXIE : TBits_1 read getSPI1RXIE write setSPI1RXIE;
    property SPI1TXIE : TBits_1 read getSPI1TXIE write setSPI1TXIE;
    property SPI3EIE : TBits_1 read getSPI3EIE write setSPI3EIE;
    property SPI3RXIE : TBits_1 read getSPI3RXIE write setSPI3RXIE;
    property SPI3TXIE : TBits_1 read getSPI3TXIE write setSPI3TXIE;
    property T1IE : TBits_1 read getT1IE write setT1IE;
    property T2IE : TBits_1 read getT2IE write setT2IE;
    property T3IE : TBits_1 read getT3IE write setT3IE;
    property T4IE : TBits_1 read getT4IE write setT4IE;
    property T5IE : TBits_1 read getT5IE write setT5IE;
    property U1AEIE : TBits_1 read getU1AEIE write setU1AEIE;
    property U1ARXIE : TBits_1 read getU1ARXIE write setU1ARXIE;
    property U1ATXIE : TBits_1 read getU1ATXIE write setU1ATXIE;
    property U1EIE : TBits_1 read getU1EIE write setU1EIE;
    property U1RXIE : TBits_1 read getU1RXIE write setU1RXIE;
    property U1TXIE : TBits_1 read getU1TXIE write setU1TXIE;
    property w : TBits_32 read getw write setw;
  end;
  TINT_IEC1 = record
  private
    function  getAD1IE : TBits_1; assembler; nostackframe; inline;
    function  getCAN1IE : TBits_1; assembler; nostackframe; inline;
    function  getCMP1IE : TBits_1; assembler; nostackframe; inline;
    function  getCMP2IE : TBits_1; assembler; nostackframe; inline;
    function  getCNIE : TBits_1; assembler; nostackframe; inline;
    function  getDMA0IE : TBits_1; assembler; nostackframe; inline;
    function  getDMA1IE : TBits_1; assembler; nostackframe; inline;
    function  getDMA2IE : TBits_1; assembler; nostackframe; inline;
    function  getDMA3IE : TBits_1; assembler; nostackframe; inline;
    function  getDMA4IE : TBits_1; assembler; nostackframe; inline;
    function  getDMA5IE : TBits_1; assembler; nostackframe; inline;
    function  getDMA6IE : TBits_1; assembler; nostackframe; inline;
    function  getDMA7IE : TBits_1; assembler; nostackframe; inline;
    function  getFCEIE : TBits_1; assembler; nostackframe; inline;
    function  getFSCMIE : TBits_1; assembler; nostackframe; inline;
    function  getI2C2ABIE : TBits_1; assembler; nostackframe; inline;
    function  getI2C2AMIE : TBits_1; assembler; nostackframe; inline;
    function  getI2C2ASIE : TBits_1; assembler; nostackframe; inline;
    function  getI2C2BIE : TBits_1; assembler; nostackframe; inline;
    function  getI2C2MIE : TBits_1; assembler; nostackframe; inline;
    function  getI2C2SIE : TBits_1; assembler; nostackframe; inline;
    function  getI2C3ABIE : TBits_1; assembler; nostackframe; inline;
    function  getI2C3AMIE : TBits_1; assembler; nostackframe; inline;
    function  getI2C3ASIE : TBits_1; assembler; nostackframe; inline;
    function  getI2C4BIE : TBits_1; assembler; nostackframe; inline;
    function  getI2C4MIE : TBits_1; assembler; nostackframe; inline;
    function  getI2C4SIE : TBits_1; assembler; nostackframe; inline;
    function  getI2C5BIE : TBits_1; assembler; nostackframe; inline;
    function  getI2C5MIE : TBits_1; assembler; nostackframe; inline;
    function  getI2C5SIE : TBits_1; assembler; nostackframe; inline;
    function  getIC1EIE : TBits_1; assembler; nostackframe; inline;
    function  getIC2EIE : TBits_1; assembler; nostackframe; inline;
    function  getIC3EIE : TBits_1; assembler; nostackframe; inline;
    function  getPMPIE : TBits_1; assembler; nostackframe; inline;
    function  getRTCCIE : TBits_1; assembler; nostackframe; inline;
    function  getSPI2AEIE : TBits_1; assembler; nostackframe; inline;
    function  getSPI2ARXIE : TBits_1; assembler; nostackframe; inline;
    function  getSPI2ATXIE : TBits_1; assembler; nostackframe; inline;
    function  getSPI2EIE : TBits_1; assembler; nostackframe; inline;
    function  getSPI2RXIE : TBits_1; assembler; nostackframe; inline;
    function  getSPI2TXIE : TBits_1; assembler; nostackframe; inline;
    function  getSPI3AEIE : TBits_1; assembler; nostackframe; inline;
    function  getSPI3ARXIE : TBits_1; assembler; nostackframe; inline;
    function  getSPI3ATXIE : TBits_1; assembler; nostackframe; inline;
    function  getSPI4EIE : TBits_1; assembler; nostackframe; inline;
    function  getSPI4RXIE : TBits_1; assembler; nostackframe; inline;
    function  getSPI4TXIE : TBits_1; assembler; nostackframe; inline;
    function  getU2AEIE : TBits_1; assembler; nostackframe; inline;
    function  getU2ARXIE : TBits_1; assembler; nostackframe; inline;
    function  getU2ATXIE : TBits_1; assembler; nostackframe; inline;
    function  getU2EIE : TBits_1; assembler; nostackframe; inline;
    function  getU2RXIE : TBits_1; assembler; nostackframe; inline;
    function  getU2TXIE : TBits_1; assembler; nostackframe; inline;
    function  getU3AEIE : TBits_1; assembler; nostackframe; inline;
    function  getU3ARXIE : TBits_1; assembler; nostackframe; inline;
    function  getU3ATXIE : TBits_1; assembler; nostackframe; inline;
    function  getU3EIE : TBits_1; assembler; nostackframe; inline;
    function  getU3RXIE : TBits_1; assembler; nostackframe; inline;
    function  getU3TXIE : TBits_1; assembler; nostackframe; inline;
    function  getUSBIE : TBits_1; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setAD1IE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCAN1IE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCMP1IE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCMP2IE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCNIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setDMA0IE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setDMA1IE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setDMA2IE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setDMA3IE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setDMA4IE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setDMA5IE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setDMA6IE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setDMA7IE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setFCEIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setFSCMIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setI2C2ABIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setI2C2AMIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setI2C2ASIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setI2C2BIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setI2C2MIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setI2C2SIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setI2C3ABIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setI2C3AMIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setI2C3ASIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setI2C4BIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setI2C4MIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setI2C4SIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setI2C5BIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setI2C5MIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setI2C5SIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setIC1EIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setIC2EIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setIC3EIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setPMPIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRTCCIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSPI2AEIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSPI2ARXIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSPI2ATXIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSPI2EIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSPI2RXIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSPI2TXIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSPI3AEIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSPI3ARXIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSPI3ATXIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSPI4EIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSPI4RXIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSPI4TXIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setU2AEIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setU2ARXIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setU2ATXIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setU2EIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setU2RXIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setU2TXIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setU3AEIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setU3ARXIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setU3ATXIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setU3EIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setU3RXIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setU3TXIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setUSBIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearAD1IE;
    procedure clearCAN1IE;
    procedure clearCMP1IE;
    procedure clearCMP2IE;
    procedure clearCNIE;
    procedure clearDMA0IE;
    procedure clearDMA1IE;
    procedure clearDMA2IE;
    procedure clearDMA3IE;
    procedure clearDMA4IE;
    procedure clearDMA5IE;
    procedure clearDMA6IE;
    procedure clearDMA7IE;
    procedure clearFCEIE;
    procedure clearFSCMIE;
    procedure clearI2C2ABIE;
    procedure clearI2C2AMIE;
    procedure clearI2C2ASIE;
    procedure clearI2C2BIE;
    procedure clearI2C2MIE;
    procedure clearI2C2SIE;
    procedure clearI2C3ABIE;
    procedure clearI2C3AMIE;
    procedure clearI2C3ASIE;
    procedure clearI2C4BIE;
    procedure clearI2C4MIE;
    procedure clearI2C4SIE;
    procedure clearI2C5BIE;
    procedure clearI2C5MIE;
    procedure clearI2C5SIE;
    procedure clearIC1EIE;
    procedure clearIC2EIE;
    procedure clearIC3EIE;
    procedure clearPMPIE;
    procedure clearRTCCIE;
    procedure clearSPI2AEIE;
    procedure clearSPI2ARXIE;
    procedure clearSPI2ATXIE;
    procedure clearSPI2EIE;
    procedure clearSPI2RXIE;
    procedure clearSPI2TXIE;
    procedure clearSPI3AEIE;
    procedure clearSPI3ARXIE;
    procedure clearSPI3ATXIE;
    procedure clearSPI4EIE;
    procedure clearSPI4RXIE;
    procedure clearSPI4TXIE;
    procedure clearU2AEIE;
    procedure clearU2ARXIE;
    procedure clearU2ATXIE;
    procedure clearU2EIE;
    procedure clearU2RXIE;
    procedure clearU2TXIE;
    procedure clearU3AEIE;
    procedure clearU3ARXIE;
    procedure clearU3ATXIE;
    procedure clearU3EIE;
    procedure clearU3RXIE;
    procedure clearU3TXIE;
    procedure clearUSBIE;
    procedure setAD1IE;
    procedure setCAN1IE;
    procedure setCMP1IE;
    procedure setCMP2IE;
    procedure setCNIE;
    procedure setDMA0IE;
    procedure setDMA1IE;
    procedure setDMA2IE;
    procedure setDMA3IE;
    procedure setDMA4IE;
    procedure setDMA5IE;
    procedure setDMA6IE;
    procedure setDMA7IE;
    procedure setFCEIE;
    procedure setFSCMIE;
    procedure setI2C2ABIE;
    procedure setI2C2AMIE;
    procedure setI2C2ASIE;
    procedure setI2C2BIE;
    procedure setI2C2MIE;
    procedure setI2C2SIE;
    procedure setI2C3ABIE;
    procedure setI2C3AMIE;
    procedure setI2C3ASIE;
    procedure setI2C4BIE;
    procedure setI2C4MIE;
    procedure setI2C4SIE;
    procedure setI2C5BIE;
    procedure setI2C5MIE;
    procedure setI2C5SIE;
    procedure setIC1EIE;
    procedure setIC2EIE;
    procedure setIC3EIE;
    procedure setPMPIE;
    procedure setRTCCIE;
    procedure setSPI2AEIE;
    procedure setSPI2ARXIE;
    procedure setSPI2ATXIE;
    procedure setSPI2EIE;
    procedure setSPI2RXIE;
    procedure setSPI2TXIE;
    procedure setSPI3AEIE;
    procedure setSPI3ARXIE;
    procedure setSPI3ATXIE;
    procedure setSPI4EIE;
    procedure setSPI4RXIE;
    procedure setSPI4TXIE;
    procedure setU2AEIE;
    procedure setU2ARXIE;
    procedure setU2ATXIE;
    procedure setU2EIE;
    procedure setU2RXIE;
    procedure setU2TXIE;
    procedure setU3AEIE;
    procedure setU3ARXIE;
    procedure setU3ATXIE;
    procedure setU3EIE;
    procedure setU3RXIE;
    procedure setU3TXIE;
    procedure setUSBIE;
    property AD1IE : TBits_1 read getAD1IE write setAD1IE;
    property CAN1IE : TBits_1 read getCAN1IE write setCAN1IE;
    property CMP1IE : TBits_1 read getCMP1IE write setCMP1IE;
    property CMP2IE : TBits_1 read getCMP2IE write setCMP2IE;
    property CNIE : TBits_1 read getCNIE write setCNIE;
    property DMA0IE : TBits_1 read getDMA0IE write setDMA0IE;
    property DMA1IE : TBits_1 read getDMA1IE write setDMA1IE;
    property DMA2IE : TBits_1 read getDMA2IE write setDMA2IE;
    property DMA3IE : TBits_1 read getDMA3IE write setDMA3IE;
    property DMA4IE : TBits_1 read getDMA4IE write setDMA4IE;
    property DMA5IE : TBits_1 read getDMA5IE write setDMA5IE;
    property DMA6IE : TBits_1 read getDMA6IE write setDMA6IE;
    property DMA7IE : TBits_1 read getDMA7IE write setDMA7IE;
    property FCEIE : TBits_1 read getFCEIE write setFCEIE;
    property FSCMIE : TBits_1 read getFSCMIE write setFSCMIE;
    property I2C2ABIE : TBits_1 read getI2C2ABIE write setI2C2ABIE;
    property I2C2AMIE : TBits_1 read getI2C2AMIE write setI2C2AMIE;
    property I2C2ASIE : TBits_1 read getI2C2ASIE write setI2C2ASIE;
    property I2C2BIE : TBits_1 read getI2C2BIE write setI2C2BIE;
    property I2C2MIE : TBits_1 read getI2C2MIE write setI2C2MIE;
    property I2C2SIE : TBits_1 read getI2C2SIE write setI2C2SIE;
    property I2C3ABIE : TBits_1 read getI2C3ABIE write setI2C3ABIE;
    property I2C3AMIE : TBits_1 read getI2C3AMIE write setI2C3AMIE;
    property I2C3ASIE : TBits_1 read getI2C3ASIE write setI2C3ASIE;
    property I2C4BIE : TBits_1 read getI2C4BIE write setI2C4BIE;
    property I2C4MIE : TBits_1 read getI2C4MIE write setI2C4MIE;
    property I2C4SIE : TBits_1 read getI2C4SIE write setI2C4SIE;
    property I2C5BIE : TBits_1 read getI2C5BIE write setI2C5BIE;
    property I2C5MIE : TBits_1 read getI2C5MIE write setI2C5MIE;
    property I2C5SIE : TBits_1 read getI2C5SIE write setI2C5SIE;
    property IC1EIE : TBits_1 read getIC1EIE write setIC1EIE;
    property IC2EIE : TBits_1 read getIC2EIE write setIC2EIE;
    property IC3EIE : TBits_1 read getIC3EIE write setIC3EIE;
    property PMPIE : TBits_1 read getPMPIE write setPMPIE;
    property RTCCIE : TBits_1 read getRTCCIE write setRTCCIE;
    property SPI2AEIE : TBits_1 read getSPI2AEIE write setSPI2AEIE;
    property SPI2ARXIE : TBits_1 read getSPI2ARXIE write setSPI2ARXIE;
    property SPI2ATXIE : TBits_1 read getSPI2ATXIE write setSPI2ATXIE;
    property SPI2EIE : TBits_1 read getSPI2EIE write setSPI2EIE;
    property SPI2RXIE : TBits_1 read getSPI2RXIE write setSPI2RXIE;
    property SPI2TXIE : TBits_1 read getSPI2TXIE write setSPI2TXIE;
    property SPI3AEIE : TBits_1 read getSPI3AEIE write setSPI3AEIE;
    property SPI3ARXIE : TBits_1 read getSPI3ARXIE write setSPI3ARXIE;
    property SPI3ATXIE : TBits_1 read getSPI3ATXIE write setSPI3ATXIE;
    property SPI4EIE : TBits_1 read getSPI4EIE write setSPI4EIE;
    property SPI4RXIE : TBits_1 read getSPI4RXIE write setSPI4RXIE;
    property SPI4TXIE : TBits_1 read getSPI4TXIE write setSPI4TXIE;
    property U2AEIE : TBits_1 read getU2AEIE write setU2AEIE;
    property U2ARXIE : TBits_1 read getU2ARXIE write setU2ARXIE;
    property U2ATXIE : TBits_1 read getU2ATXIE write setU2ATXIE;
    property U2EIE : TBits_1 read getU2EIE write setU2EIE;
    property U2RXIE : TBits_1 read getU2RXIE write setU2RXIE;
    property U2TXIE : TBits_1 read getU2TXIE write setU2TXIE;
    property U3AEIE : TBits_1 read getU3AEIE write setU3AEIE;
    property U3ARXIE : TBits_1 read getU3ARXIE write setU3ARXIE;
    property U3ATXIE : TBits_1 read getU3ATXIE write setU3ATXIE;
    property U3EIE : TBits_1 read getU3EIE write setU3EIE;
    property U3RXIE : TBits_1 read getU3RXIE write setU3RXIE;
    property U3TXIE : TBits_1 read getU3TXIE write setU3TXIE;
    property USBIE : TBits_1 read getUSBIE write setUSBIE;
    property w : TBits_32 read getw write setw;
  end;
  TINT_IEC2 = record
  private
    function  getIC4EIE : TBits_1; assembler; nostackframe; inline;
    function  getIC5EIE : TBits_1; assembler; nostackframe; inline;
    function  getPMPEIE : TBits_1; assembler; nostackframe; inline;
    function  getU1BEIE : TBits_1; assembler; nostackframe; inline;
    function  getU1BRXIE : TBits_1; assembler; nostackframe; inline;
    function  getU1BTXIE : TBits_1; assembler; nostackframe; inline;
    function  getU2BEIE : TBits_1; assembler; nostackframe; inline;
    function  getU2BRXIE : TBits_1; assembler; nostackframe; inline;
    function  getU2BTXIE : TBits_1; assembler; nostackframe; inline;
    function  getU3BEIE : TBits_1; assembler; nostackframe; inline;
    function  getU3BRXIE : TBits_1; assembler; nostackframe; inline;
    function  getU3BTXIE : TBits_1; assembler; nostackframe; inline;
    function  getU4EIE : TBits_1; assembler; nostackframe; inline;
    function  getU4RXIE : TBits_1; assembler; nostackframe; inline;
    function  getU4TXIE : TBits_1; assembler; nostackframe; inline;
    function  getU5EIE : TBits_1; assembler; nostackframe; inline;
    function  getU5RXIE : TBits_1; assembler; nostackframe; inline;
    function  getU5TXIE : TBits_1; assembler; nostackframe; inline;
    function  getU6EIE : TBits_1; assembler; nostackframe; inline;
    function  getU6RXIE : TBits_1; assembler; nostackframe; inline;
    function  getU6TXIE : TBits_1; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setIC4EIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setIC5EIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setPMPEIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setU1BEIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setU1BRXIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setU1BTXIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setU2BEIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setU2BRXIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setU2BTXIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setU3BEIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setU3BRXIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setU3BTXIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setU4EIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setU4RXIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setU4TXIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setU5EIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setU5RXIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setU5TXIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setU6EIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setU6RXIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setU6TXIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearIC4EIE;
    procedure clearIC5EIE;
    procedure clearPMPEIE;
    procedure clearU1BEIE;
    procedure clearU1BRXIE;
    procedure clearU1BTXIE;
    procedure clearU2BEIE;
    procedure clearU2BRXIE;
    procedure clearU2BTXIE;
    procedure clearU3BEIE;
    procedure clearU3BRXIE;
    procedure clearU3BTXIE;
    procedure clearU4EIE;
    procedure clearU4RXIE;
    procedure clearU4TXIE;
    procedure clearU5EIE;
    procedure clearU5RXIE;
    procedure clearU5TXIE;
    procedure clearU6EIE;
    procedure clearU6RXIE;
    procedure clearU6TXIE;
    procedure setIC4EIE;
    procedure setIC5EIE;
    procedure setPMPEIE;
    procedure setU1BEIE;
    procedure setU1BRXIE;
    procedure setU1BTXIE;
    procedure setU2BEIE;
    procedure setU2BRXIE;
    procedure setU2BTXIE;
    procedure setU3BEIE;
    procedure setU3BRXIE;
    procedure setU3BTXIE;
    procedure setU4EIE;
    procedure setU4RXIE;
    procedure setU4TXIE;
    procedure setU5EIE;
    procedure setU5RXIE;
    procedure setU5TXIE;
    procedure setU6EIE;
    procedure setU6RXIE;
    procedure setU6TXIE;
    property IC4EIE : TBits_1 read getIC4EIE write setIC4EIE;
    property IC5EIE : TBits_1 read getIC5EIE write setIC5EIE;
    property PMPEIE : TBits_1 read getPMPEIE write setPMPEIE;
    property U1BEIE : TBits_1 read getU1BEIE write setU1BEIE;
    property U1BRXIE : TBits_1 read getU1BRXIE write setU1BRXIE;
    property U1BTXIE : TBits_1 read getU1BTXIE write setU1BTXIE;
    property U2BEIE : TBits_1 read getU2BEIE write setU2BEIE;
    property U2BRXIE : TBits_1 read getU2BRXIE write setU2BRXIE;
    property U2BTXIE : TBits_1 read getU2BTXIE write setU2BTXIE;
    property U3BEIE : TBits_1 read getU3BEIE write setU3BEIE;
    property U3BRXIE : TBits_1 read getU3BRXIE write setU3BRXIE;
    property U3BTXIE : TBits_1 read getU3BTXIE write setU3BTXIE;
    property U4EIE : TBits_1 read getU4EIE write setU4EIE;
    property U4RXIE : TBits_1 read getU4RXIE write setU4RXIE;
    property U4TXIE : TBits_1 read getU4TXIE write setU4TXIE;
    property U5EIE : TBits_1 read getU5EIE write setU5EIE;
    property U5RXIE : TBits_1 read getU5RXIE write setU5RXIE;
    property U5TXIE : TBits_1 read getU5TXIE write setU5TXIE;
    property U6EIE : TBits_1 read getU6EIE write setU6EIE;
    property U6RXIE : TBits_1 read getU6RXIE write setU6RXIE;
    property U6TXIE : TBits_1 read getU6TXIE write setU6TXIE;
    property w : TBits_32 read getw write setw;
  end;
  TINT_IPC0 = record
  private
    function  getCS0IP : TBits_3; assembler; nostackframe; inline;
    function  getCS0IS : TBits_2; assembler; nostackframe; inline;
    function  getCS1IP : TBits_3; assembler; nostackframe; inline;
    function  getCS1IS : TBits_2; assembler; nostackframe; inline;
    function  getCTIP : TBits_3; assembler; nostackframe; inline;
    function  getCTIS : TBits_2; assembler; nostackframe; inline;
    function  getINT0IP : TBits_3; assembler; nostackframe; inline;
    function  getINT0IS : TBits_2; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setCS0IP(thebits : TBits_3); assembler; nostackframe; inline;
    procedure setCS0IS(thebits : TBits_2); assembler; nostackframe; inline;
    procedure setCS1IP(thebits : TBits_3); assembler; nostackframe; inline;
    procedure setCS1IS(thebits : TBits_2); assembler; nostackframe; inline;
    procedure setCTIP(thebits : TBits_3); assembler; nostackframe; inline;
    procedure setCTIS(thebits : TBits_2); assembler; nostackframe; inline;
    procedure setINT0IP(thebits : TBits_3); assembler; nostackframe; inline;
    procedure setINT0IS(thebits : TBits_2); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    property CS0IP : TBits_3 read getCS0IP write setCS0IP;
    property CS0IS : TBits_2 read getCS0IS write setCS0IS;
    property CS1IP : TBits_3 read getCS1IP write setCS1IP;
    property CS1IS : TBits_2 read getCS1IS write setCS1IS;
    property CTIP : TBits_3 read getCTIP write setCTIP;
    property CTIS : TBits_2 read getCTIS write setCTIS;
    property INT0IP : TBits_3 read getINT0IP write setINT0IP;
    property INT0IS : TBits_2 read getINT0IS write setINT0IS;
    property w : TBits_32 read getw write setw;
  end;
  TINT_IPC1 = record
  private
    function  getIC1IP : TBits_3; assembler; nostackframe; inline;
    function  getIC1IS : TBits_2; assembler; nostackframe; inline;
    function  getINT1IP : TBits_3; assembler; nostackframe; inline;
    function  getINT1IS : TBits_2; assembler; nostackframe; inline;
    function  getOC1IP : TBits_3; assembler; nostackframe; inline;
    function  getOC1IS : TBits_2; assembler; nostackframe; inline;
    function  getT1IP : TBits_3; assembler; nostackframe; inline;
    function  getT1IS : TBits_2; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setIC1IP(thebits : TBits_3); assembler; nostackframe; inline;
    procedure setIC1IS(thebits : TBits_2); assembler; nostackframe; inline;
    procedure setINT1IP(thebits : TBits_3); assembler; nostackframe; inline;
    procedure setINT1IS(thebits : TBits_2); assembler; nostackframe; inline;
    procedure setOC1IP(thebits : TBits_3); assembler; nostackframe; inline;
    procedure setOC1IS(thebits : TBits_2); assembler; nostackframe; inline;
    procedure setT1IP(thebits : TBits_3); assembler; nostackframe; inline;
    procedure setT1IS(thebits : TBits_2); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    property IC1IP : TBits_3 read getIC1IP write setIC1IP;
    property IC1IS : TBits_2 read getIC1IS write setIC1IS;
    property INT1IP : TBits_3 read getINT1IP write setINT1IP;
    property INT1IS : TBits_2 read getINT1IS write setINT1IS;
    property OC1IP : TBits_3 read getOC1IP write setOC1IP;
    property OC1IS : TBits_2 read getOC1IS write setOC1IS;
    property T1IP : TBits_3 read getT1IP write setT1IP;
    property T1IS : TBits_2 read getT1IS write setT1IS;
    property w : TBits_32 read getw write setw;
  end;
  TINT_IPC2 = record
  private
    function  getIC2IP : TBits_3; assembler; nostackframe; inline;
    function  getIC2IS : TBits_2; assembler; nostackframe; inline;
    function  getINT2IP : TBits_3; assembler; nostackframe; inline;
    function  getINT2IS : TBits_2; assembler; nostackframe; inline;
    function  getOC2IP : TBits_3; assembler; nostackframe; inline;
    function  getOC2IS : TBits_2; assembler; nostackframe; inline;
    function  getT2IP : TBits_3; assembler; nostackframe; inline;
    function  getT2IS : TBits_2; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setIC2IP(thebits : TBits_3); assembler; nostackframe; inline;
    procedure setIC2IS(thebits : TBits_2); assembler; nostackframe; inline;
    procedure setINT2IP(thebits : TBits_3); assembler; nostackframe; inline;
    procedure setINT2IS(thebits : TBits_2); assembler; nostackframe; inline;
    procedure setOC2IP(thebits : TBits_3); assembler; nostackframe; inline;
    procedure setOC2IS(thebits : TBits_2); assembler; nostackframe; inline;
    procedure setT2IP(thebits : TBits_3); assembler; nostackframe; inline;
    procedure setT2IS(thebits : TBits_2); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    property IC2IP : TBits_3 read getIC2IP write setIC2IP;
    property IC2IS : TBits_2 read getIC2IS write setIC2IS;
    property INT2IP : TBits_3 read getINT2IP write setINT2IP;
    property INT2IS : TBits_2 read getINT2IS write setINT2IS;
    property OC2IP : TBits_3 read getOC2IP write setOC2IP;
    property OC2IS : TBits_2 read getOC2IS write setOC2IS;
    property T2IP : TBits_3 read getT2IP write setT2IP;
    property T2IS : TBits_2 read getT2IS write setT2IS;
    property w : TBits_32 read getw write setw;
  end;
  TINT_IPC3 = record
  private
    function  getIC3IP : TBits_3; assembler; nostackframe; inline;
    function  getIC3IS : TBits_2; assembler; nostackframe; inline;
    function  getINT3IP : TBits_3; assembler; nostackframe; inline;
    function  getINT3IS : TBits_2; assembler; nostackframe; inline;
    function  getOC3IP : TBits_3; assembler; nostackframe; inline;
    function  getOC3IS : TBits_2; assembler; nostackframe; inline;
    function  getT3IP : TBits_3; assembler; nostackframe; inline;
    function  getT3IS : TBits_2; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setIC3IP(thebits : TBits_3); assembler; nostackframe; inline;
    procedure setIC3IS(thebits : TBits_2); assembler; nostackframe; inline;
    procedure setINT3IP(thebits : TBits_3); assembler; nostackframe; inline;
    procedure setINT3IS(thebits : TBits_2); assembler; nostackframe; inline;
    procedure setOC3IP(thebits : TBits_3); assembler; nostackframe; inline;
    procedure setOC3IS(thebits : TBits_2); assembler; nostackframe; inline;
    procedure setT3IP(thebits : TBits_3); assembler; nostackframe; inline;
    procedure setT3IS(thebits : TBits_2); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    property IC3IP : TBits_3 read getIC3IP write setIC3IP;
    property IC3IS : TBits_2 read getIC3IS write setIC3IS;
    property INT3IP : TBits_3 read getINT3IP write setINT3IP;
    property INT3IS : TBits_2 read getINT3IS write setINT3IS;
    property OC3IP : TBits_3 read getOC3IP write setOC3IP;
    property OC3IS : TBits_2 read getOC3IS write setOC3IS;
    property T3IP : TBits_3 read getT3IP write setT3IP;
    property T3IS : TBits_2 read getT3IS write setT3IS;
    property w : TBits_32 read getw write setw;
  end;
  TINT_IPC4 = record
  private
    function  getIC4IP : TBits_3; assembler; nostackframe; inline;
    function  getIC4IS : TBits_2; assembler; nostackframe; inline;
    function  getINT4IP : TBits_3; assembler; nostackframe; inline;
    function  getINT4IS : TBits_2; assembler; nostackframe; inline;
    function  getOC4IP : TBits_3; assembler; nostackframe; inline;
    function  getOC4IS : TBits_2; assembler; nostackframe; inline;
    function  getT4IP : TBits_3; assembler; nostackframe; inline;
    function  getT4IS : TBits_2; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setIC4IP(thebits : TBits_3); assembler; nostackframe; inline;
    procedure setIC4IS(thebits : TBits_2); assembler; nostackframe; inline;
    procedure setINT4IP(thebits : TBits_3); assembler; nostackframe; inline;
    procedure setINT4IS(thebits : TBits_2); assembler; nostackframe; inline;
    procedure setOC4IP(thebits : TBits_3); assembler; nostackframe; inline;
    procedure setOC4IS(thebits : TBits_2); assembler; nostackframe; inline;
    procedure setT4IP(thebits : TBits_3); assembler; nostackframe; inline;
    procedure setT4IS(thebits : TBits_2); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    property IC4IP : TBits_3 read getIC4IP write setIC4IP;
    property IC4IS : TBits_2 read getIC4IS write setIC4IS;
    property INT4IP : TBits_3 read getINT4IP write setINT4IP;
    property INT4IS : TBits_2 read getINT4IS write setINT4IS;
    property OC4IP : TBits_3 read getOC4IP write setOC4IP;
    property OC4IS : TBits_2 read getOC4IS write setOC4IS;
    property T4IP : TBits_3 read getT4IP write setT4IP;
    property T4IS : TBits_2 read getT4IS write setT4IS;
    property w : TBits_32 read getw write setw;
  end;
  TINT_IPC5 = record
  private
    function  getIC5IP : TBits_3; assembler; nostackframe; inline;
    function  getIC5IS : TBits_2; assembler; nostackframe; inline;
    function  getOC5IP : TBits_3; assembler; nostackframe; inline;
    function  getOC5IS : TBits_2; assembler; nostackframe; inline;
    function  getSPI1IP : TBits_3; assembler; nostackframe; inline;
    function  getSPI1IS : TBits_2; assembler; nostackframe; inline;
    function  getT5IP : TBits_3; assembler; nostackframe; inline;
    function  getT5IS : TBits_2; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setIC5IP(thebits : TBits_3); assembler; nostackframe; inline;
    procedure setIC5IS(thebits : TBits_2); assembler; nostackframe; inline;
    procedure setOC5IP(thebits : TBits_3); assembler; nostackframe; inline;
    procedure setOC5IS(thebits : TBits_2); assembler; nostackframe; inline;
    procedure setSPI1IP(thebits : TBits_3); assembler; nostackframe; inline;
    procedure setSPI1IS(thebits : TBits_2); assembler; nostackframe; inline;
    procedure setT5IP(thebits : TBits_3); assembler; nostackframe; inline;
    procedure setT5IS(thebits : TBits_2); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    property IC5IP : TBits_3 read getIC5IP write setIC5IP;
    property IC5IS : TBits_2 read getIC5IS write setIC5IS;
    property OC5IP : TBits_3 read getOC5IP write setOC5IP;
    property OC5IS : TBits_2 read getOC5IS write setOC5IS;
    property SPI1IP : TBits_3 read getSPI1IP write setSPI1IP;
    property SPI1IS : TBits_2 read getSPI1IS write setSPI1IS;
    property T5IP : TBits_3 read getT5IP write setT5IP;
    property T5IS : TBits_2 read getT5IS write setT5IS;
    property w : TBits_32 read getw write setw;
  end;
  TINT_IPC6 = record
  private
    function  getAD1IP : TBits_3; assembler; nostackframe; inline;
    function  getAD1IS : TBits_2; assembler; nostackframe; inline;
    function  getCNIP : TBits_3; assembler; nostackframe; inline;
    function  getCNIS : TBits_2; assembler; nostackframe; inline;
    function  getI2C1AIP : TBits_3; assembler; nostackframe; inline;
    function  getI2C1AIS : TBits_2; assembler; nostackframe; inline;
    function  getI2C1IP : TBits_3; assembler; nostackframe; inline;
    function  getI2C1IS : TBits_2; assembler; nostackframe; inline;
    function  getI2C3IP : TBits_3; assembler; nostackframe; inline;
    function  getI2C3IS : TBits_2; assembler; nostackframe; inline;
    function  getSPI1AIP : TBits_3; assembler; nostackframe; inline;
    function  getSPI1AIS : TBits_2; assembler; nostackframe; inline;
    function  getSPI3IP : TBits_3; assembler; nostackframe; inline;
    function  getSPI3IS : TBits_2; assembler; nostackframe; inline;
    function  getU1AIP : TBits_3; assembler; nostackframe; inline;
    function  getU1AIS : TBits_2; assembler; nostackframe; inline;
    function  getU1IP : TBits_3; assembler; nostackframe; inline;
    function  getU1IS : TBits_2; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setAD1IP(thebits : TBits_3); assembler; nostackframe; inline;
    procedure setAD1IS(thebits : TBits_2); assembler; nostackframe; inline;
    procedure setCNIP(thebits : TBits_3); assembler; nostackframe; inline;
    procedure setCNIS(thebits : TBits_2); assembler; nostackframe; inline;
    procedure setI2C1AIP(thebits : TBits_3); assembler; nostackframe; inline;
    procedure setI2C1AIS(thebits : TBits_2); assembler; nostackframe; inline;
    procedure setI2C1IP(thebits : TBits_3); assembler; nostackframe; inline;
    procedure setI2C1IS(thebits : TBits_2); assembler; nostackframe; inline;
    procedure setI2C3IP(thebits : TBits_3); assembler; nostackframe; inline;
    procedure setI2C3IS(thebits : TBits_2); assembler; nostackframe; inline;
    procedure setSPI1AIP(thebits : TBits_3); assembler; nostackframe; inline;
    procedure setSPI1AIS(thebits : TBits_2); assembler; nostackframe; inline;
    procedure setSPI3IP(thebits : TBits_3); assembler; nostackframe; inline;
    procedure setSPI3IS(thebits : TBits_2); assembler; nostackframe; inline;
    procedure setU1AIP(thebits : TBits_3); assembler; nostackframe; inline;
    procedure setU1AIS(thebits : TBits_2); assembler; nostackframe; inline;
    procedure setU1IP(thebits : TBits_3); assembler; nostackframe; inline;
    procedure setU1IS(thebits : TBits_2); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    property AD1IP : TBits_3 read getAD1IP write setAD1IP;
    property AD1IS : TBits_2 read getAD1IS write setAD1IS;
    property CNIP : TBits_3 read getCNIP write setCNIP;
    property CNIS : TBits_2 read getCNIS write setCNIS;
    property I2C1AIP : TBits_3 read getI2C1AIP write setI2C1AIP;
    property I2C1AIS : TBits_2 read getI2C1AIS write setI2C1AIS;
    property I2C1IP : TBits_3 read getI2C1IP write setI2C1IP;
    property I2C1IS : TBits_2 read getI2C1IS write setI2C1IS;
    property I2C3IP : TBits_3 read getI2C3IP write setI2C3IP;
    property I2C3IS : TBits_2 read getI2C3IS write setI2C3IS;
    property SPI1AIP : TBits_3 read getSPI1AIP write setSPI1AIP;
    property SPI1AIS : TBits_2 read getSPI1AIS write setSPI1AIS;
    property SPI3IP : TBits_3 read getSPI3IP write setSPI3IP;
    property SPI3IS : TBits_2 read getSPI3IS write setSPI3IS;
    property U1AIP : TBits_3 read getU1AIP write setU1AIP;
    property U1AIS : TBits_2 read getU1AIS write setU1AIS;
    property U1IP : TBits_3 read getU1IP write setU1IP;
    property U1IS : TBits_2 read getU1IS write setU1IS;
    property w : TBits_32 read getw write setw;
  end;
  TINT_IPC7 = record
  private
    function  getCMP1IP : TBits_3; assembler; nostackframe; inline;
    function  getCMP1IS : TBits_2; assembler; nostackframe; inline;
    function  getCMP2IP : TBits_3; assembler; nostackframe; inline;
    function  getCMP2IS : TBits_2; assembler; nostackframe; inline;
    function  getI2C2AIP : TBits_3; assembler; nostackframe; inline;
    function  getI2C2AIS : TBits_2; assembler; nostackframe; inline;
    function  getI2C4IP : TBits_3; assembler; nostackframe; inline;
    function  getI2C4IS : TBits_2; assembler; nostackframe; inline;
    function  getPMPIP : TBits_3; assembler; nostackframe; inline;
    function  getPMPIS : TBits_2; assembler; nostackframe; inline;
    function  getSPI2AIP : TBits_3; assembler; nostackframe; inline;
    function  getSPI2AIS : TBits_2; assembler; nostackframe; inline;
    function  getSPI2IP : TBits_3; assembler; nostackframe; inline;
    function  getSPI2IS : TBits_2; assembler; nostackframe; inline;
    function  getU2AIP : TBits_3; assembler; nostackframe; inline;
    function  getU2AIS : TBits_2; assembler; nostackframe; inline;
    function  getU3IP : TBits_3; assembler; nostackframe; inline;
    function  getU3IS : TBits_2; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setCMP1IP(thebits : TBits_3); assembler; nostackframe; inline;
    procedure setCMP1IS(thebits : TBits_2); assembler; nostackframe; inline;
    procedure setCMP2IP(thebits : TBits_3); assembler; nostackframe; inline;
    procedure setCMP2IS(thebits : TBits_2); assembler; nostackframe; inline;
    procedure setI2C2AIP(thebits : TBits_3); assembler; nostackframe; inline;
    procedure setI2C2AIS(thebits : TBits_2); assembler; nostackframe; inline;
    procedure setI2C4IP(thebits : TBits_3); assembler; nostackframe; inline;
    procedure setI2C4IS(thebits : TBits_2); assembler; nostackframe; inline;
    procedure setPMPIP(thebits : TBits_3); assembler; nostackframe; inline;
    procedure setPMPIS(thebits : TBits_2); assembler; nostackframe; inline;
    procedure setSPI2AIP(thebits : TBits_3); assembler; nostackframe; inline;
    procedure setSPI2AIS(thebits : TBits_2); assembler; nostackframe; inline;
    procedure setSPI2IP(thebits : TBits_3); assembler; nostackframe; inline;
    procedure setSPI2IS(thebits : TBits_2); assembler; nostackframe; inline;
    procedure setU2AIP(thebits : TBits_3); assembler; nostackframe; inline;
    procedure setU2AIS(thebits : TBits_2); assembler; nostackframe; inline;
    procedure setU3IP(thebits : TBits_3); assembler; nostackframe; inline;
    procedure setU3IS(thebits : TBits_2); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    property CMP1IP : TBits_3 read getCMP1IP write setCMP1IP;
    property CMP1IS : TBits_2 read getCMP1IS write setCMP1IS;
    property CMP2IP : TBits_3 read getCMP2IP write setCMP2IP;
    property CMP2IS : TBits_2 read getCMP2IS write setCMP2IS;
    property I2C2AIP : TBits_3 read getI2C2AIP write setI2C2AIP;
    property I2C2AIS : TBits_2 read getI2C2AIS write setI2C2AIS;
    property I2C4IP : TBits_3 read getI2C4IP write setI2C4IP;
    property I2C4IS : TBits_2 read getI2C4IS write setI2C4IS;
    property PMPIP : TBits_3 read getPMPIP write setPMPIP;
    property PMPIS : TBits_2 read getPMPIS write setPMPIS;
    property SPI2AIP : TBits_3 read getSPI2AIP write setSPI2AIP;
    property SPI2AIS : TBits_2 read getSPI2AIS write setSPI2AIS;
    property SPI2IP : TBits_3 read getSPI2IP write setSPI2IP;
    property SPI2IS : TBits_2 read getSPI2IS write setSPI2IS;
    property U2AIP : TBits_3 read getU2AIP write setU2AIP;
    property U2AIS : TBits_2 read getU2AIS write setU2AIS;
    property U3IP : TBits_3 read getU3IP write setU3IP;
    property U3IS : TBits_2 read getU3IS write setU3IS;
    property w : TBits_32 read getw write setw;
  end;
  TINT_IPC8 = record
  private
    function  getFSCMIP : TBits_3; assembler; nostackframe; inline;
    function  getFSCMIS : TBits_2; assembler; nostackframe; inline;
    function  getI2C2IP : TBits_3; assembler; nostackframe; inline;
    function  getI2C2IS : TBits_2; assembler; nostackframe; inline;
    function  getI2C3AIP : TBits_3; assembler; nostackframe; inline;
    function  getI2C3AIS : TBits_2; assembler; nostackframe; inline;
    function  getI2C5IP : TBits_3; assembler; nostackframe; inline;
    function  getI2C5IS : TBits_2; assembler; nostackframe; inline;
    function  getRTCCIP : TBits_3; assembler; nostackframe; inline;
    function  getRTCCIS : TBits_2; assembler; nostackframe; inline;
    function  getSPI3AIP : TBits_3; assembler; nostackframe; inline;
    function  getSPI3AIS : TBits_2; assembler; nostackframe; inline;
    function  getSPI4IP : TBits_3; assembler; nostackframe; inline;
    function  getSPI4IS : TBits_2; assembler; nostackframe; inline;
    function  getU2IP : TBits_3; assembler; nostackframe; inline;
    function  getU2IS : TBits_2; assembler; nostackframe; inline;
    function  getU3AIP : TBits_3; assembler; nostackframe; inline;
    function  getU3AIS : TBits_2; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setFSCMIP(thebits : TBits_3); assembler; nostackframe; inline;
    procedure setFSCMIS(thebits : TBits_2); assembler; nostackframe; inline;
    procedure setI2C2IP(thebits : TBits_3); assembler; nostackframe; inline;
    procedure setI2C2IS(thebits : TBits_2); assembler; nostackframe; inline;
    procedure setI2C3AIP(thebits : TBits_3); assembler; nostackframe; inline;
    procedure setI2C3AIS(thebits : TBits_2); assembler; nostackframe; inline;
    procedure setI2C5IP(thebits : TBits_3); assembler; nostackframe; inline;
    procedure setI2C5IS(thebits : TBits_2); assembler; nostackframe; inline;
    procedure setRTCCIP(thebits : TBits_3); assembler; nostackframe; inline;
    procedure setRTCCIS(thebits : TBits_2); assembler; nostackframe; inline;
    procedure setSPI3AIP(thebits : TBits_3); assembler; nostackframe; inline;
    procedure setSPI3AIS(thebits : TBits_2); assembler; nostackframe; inline;
    procedure setSPI4IP(thebits : TBits_3); assembler; nostackframe; inline;
    procedure setSPI4IS(thebits : TBits_2); assembler; nostackframe; inline;
    procedure setU2IP(thebits : TBits_3); assembler; nostackframe; inline;
    procedure setU2IS(thebits : TBits_2); assembler; nostackframe; inline;
    procedure setU3AIP(thebits : TBits_3); assembler; nostackframe; inline;
    procedure setU3AIS(thebits : TBits_2); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    property FSCMIP : TBits_3 read getFSCMIP write setFSCMIP;
    property FSCMIS : TBits_2 read getFSCMIS write setFSCMIS;
    property I2C2IP : TBits_3 read getI2C2IP write setI2C2IP;
    property I2C2IS : TBits_2 read getI2C2IS write setI2C2IS;
    property I2C3AIP : TBits_3 read getI2C3AIP write setI2C3AIP;
    property I2C3AIS : TBits_2 read getI2C3AIS write setI2C3AIS;
    property I2C5IP : TBits_3 read getI2C5IP write setI2C5IP;
    property I2C5IS : TBits_2 read getI2C5IS write setI2C5IS;
    property RTCCIP : TBits_3 read getRTCCIP write setRTCCIP;
    property RTCCIS : TBits_2 read getRTCCIS write setRTCCIS;
    property SPI3AIP : TBits_3 read getSPI3AIP write setSPI3AIP;
    property SPI3AIS : TBits_2 read getSPI3AIS write setSPI3AIS;
    property SPI4IP : TBits_3 read getSPI4IP write setSPI4IP;
    property SPI4IS : TBits_2 read getSPI4IS write setSPI4IS;
    property U2IP : TBits_3 read getU2IP write setU2IP;
    property U2IS : TBits_2 read getU2IS write setU2IS;
    property U3AIP : TBits_3 read getU3AIP write setU3AIP;
    property U3AIS : TBits_2 read getU3AIS write setU3AIS;
    property w : TBits_32 read getw write setw;
  end;
  TINT_IPC9 = record
  private
    function  getDMA0IP : TBits_3; assembler; nostackframe; inline;
    function  getDMA0IS : TBits_2; assembler; nostackframe; inline;
    function  getDMA1IP : TBits_3; assembler; nostackframe; inline;
    function  getDMA1IS : TBits_2; assembler; nostackframe; inline;
    function  getDMA2IP : TBits_3; assembler; nostackframe; inline;
    function  getDMA2IS : TBits_2; assembler; nostackframe; inline;
    function  getDMA3IP : TBits_3; assembler; nostackframe; inline;
    function  getDMA3IS : TBits_2; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setDMA0IP(thebits : TBits_3); assembler; nostackframe; inline;
    procedure setDMA0IS(thebits : TBits_2); assembler; nostackframe; inline;
    procedure setDMA1IP(thebits : TBits_3); assembler; nostackframe; inline;
    procedure setDMA1IS(thebits : TBits_2); assembler; nostackframe; inline;
    procedure setDMA2IP(thebits : TBits_3); assembler; nostackframe; inline;
    procedure setDMA2IS(thebits : TBits_2); assembler; nostackframe; inline;
    procedure setDMA3IP(thebits : TBits_3); assembler; nostackframe; inline;
    procedure setDMA3IS(thebits : TBits_2); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    property DMA0IP : TBits_3 read getDMA0IP write setDMA0IP;
    property DMA0IS : TBits_2 read getDMA0IS write setDMA0IS;
    property DMA1IP : TBits_3 read getDMA1IP write setDMA1IP;
    property DMA1IS : TBits_2 read getDMA1IS write setDMA1IS;
    property DMA2IP : TBits_3 read getDMA2IP write setDMA2IP;
    property DMA2IS : TBits_2 read getDMA2IS write setDMA2IS;
    property DMA3IP : TBits_3 read getDMA3IP write setDMA3IP;
    property DMA3IS : TBits_2 read getDMA3IS write setDMA3IS;
    property w : TBits_32 read getw write setw;
  end;
  TINT_IPC10 = record
  private
    function  getDMA4IP : TBits_3; assembler; nostackframe; inline;
    function  getDMA4IS : TBits_2; assembler; nostackframe; inline;
    function  getDMA5IP : TBits_3; assembler; nostackframe; inline;
    function  getDMA5IS : TBits_2; assembler; nostackframe; inline;
    function  getDMA6IP : TBits_3; assembler; nostackframe; inline;
    function  getDMA6IS : TBits_2; assembler; nostackframe; inline;
    function  getDMA7IP : TBits_3; assembler; nostackframe; inline;
    function  getDMA7IS : TBits_2; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setDMA4IP(thebits : TBits_3); assembler; nostackframe; inline;
    procedure setDMA4IS(thebits : TBits_2); assembler; nostackframe; inline;
    procedure setDMA5IP(thebits : TBits_3); assembler; nostackframe; inline;
    procedure setDMA5IS(thebits : TBits_2); assembler; nostackframe; inline;
    procedure setDMA6IP(thebits : TBits_3); assembler; nostackframe; inline;
    procedure setDMA6IS(thebits : TBits_2); assembler; nostackframe; inline;
    procedure setDMA7IP(thebits : TBits_3); assembler; nostackframe; inline;
    procedure setDMA7IS(thebits : TBits_2); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    property DMA4IP : TBits_3 read getDMA4IP write setDMA4IP;
    property DMA4IS : TBits_2 read getDMA4IS write setDMA4IS;
    property DMA5IP : TBits_3 read getDMA5IP write setDMA5IP;
    property DMA5IS : TBits_2 read getDMA5IS write setDMA5IS;
    property DMA6IP : TBits_3 read getDMA6IP write setDMA6IP;
    property DMA6IS : TBits_2 read getDMA6IS write setDMA6IS;
    property DMA7IP : TBits_3 read getDMA7IP write setDMA7IP;
    property DMA7IS : TBits_2 read getDMA7IS write setDMA7IS;
    property w : TBits_32 read getw write setw;
  end;
  TINT_IPC11 = record
  private
    function  getCAN1IP : TBits_3; assembler; nostackframe; inline;
    function  getCAN1IS : TBits_2; assembler; nostackframe; inline;
    function  getFCEIP : TBits_3; assembler; nostackframe; inline;
    function  getFCEIS : TBits_2; assembler; nostackframe; inline;
    function  getUSBIP : TBits_3; assembler; nostackframe; inline;
    function  getUSBIS : TBits_2; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setCAN1IP(thebits : TBits_3); assembler; nostackframe; inline;
    procedure setCAN1IS(thebits : TBits_2); assembler; nostackframe; inline;
    procedure setFCEIP(thebits : TBits_3); assembler; nostackframe; inline;
    procedure setFCEIS(thebits : TBits_2); assembler; nostackframe; inline;
    procedure setUSBIP(thebits : TBits_3); assembler; nostackframe; inline;
    procedure setUSBIS(thebits : TBits_2); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    property CAN1IP : TBits_3 read getCAN1IP write setCAN1IP;
    property CAN1IS : TBits_2 read getCAN1IS write setCAN1IS;
    property FCEIP : TBits_3 read getFCEIP write setFCEIP;
    property FCEIS : TBits_2 read getFCEIS write setFCEIS;
    property USBIP : TBits_3 read getUSBIP write setUSBIP;
    property USBIS : TBits_2 read getUSBIS write setUSBIS;
    property w : TBits_32 read getw write setw;
  end;
  TINT_IPC12 = record
  private
    function  getU1BIP : TBits_3; assembler; nostackframe; inline;
    function  getU1BIS : TBits_2; assembler; nostackframe; inline;
    function  getU2BIP : TBits_3; assembler; nostackframe; inline;
    function  getU2BIS : TBits_2; assembler; nostackframe; inline;
    function  getU3BIP : TBits_3; assembler; nostackframe; inline;
    function  getU3BIS : TBits_2; assembler; nostackframe; inline;
    function  getU4IP : TBits_3; assembler; nostackframe; inline;
    function  getU4IS : TBits_2; assembler; nostackframe; inline;
    function  getU5IP : TBits_3; assembler; nostackframe; inline;
    function  getU5IS : TBits_2; assembler; nostackframe; inline;
    function  getU6IP : TBits_3; assembler; nostackframe; inline;
    function  getU6IS : TBits_2; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setU1BIP(thebits : TBits_3); assembler; nostackframe; inline;
    procedure setU1BIS(thebits : TBits_2); assembler; nostackframe; inline;
    procedure setU2BIP(thebits : TBits_3); assembler; nostackframe; inline;
    procedure setU2BIS(thebits : TBits_2); assembler; nostackframe; inline;
    procedure setU3BIP(thebits : TBits_3); assembler; nostackframe; inline;
    procedure setU3BIS(thebits : TBits_2); assembler; nostackframe; inline;
    procedure setU4IP(thebits : TBits_3); assembler; nostackframe; inline;
    procedure setU4IS(thebits : TBits_2); assembler; nostackframe; inline;
    procedure setU5IP(thebits : TBits_3); assembler; nostackframe; inline;
    procedure setU5IS(thebits : TBits_2); assembler; nostackframe; inline;
    procedure setU6IP(thebits : TBits_3); assembler; nostackframe; inline;
    procedure setU6IS(thebits : TBits_2); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    property U1BIP : TBits_3 read getU1BIP write setU1BIP;
    property U1BIS : TBits_2 read getU1BIS write setU1BIS;
    property U2BIP : TBits_3 read getU2BIP write setU2BIP;
    property U2BIS : TBits_2 read getU2BIS write setU2BIS;
    property U3BIP : TBits_3 read getU3BIP write setU3BIP;
    property U3BIS : TBits_2 read getU3BIS write setU3BIS;
    property U4IP : TBits_3 read getU4IP write setU4IP;
    property U4IS : TBits_2 read getU4IS write setU4IS;
    property U5IP : TBits_3 read getU5IP write setU5IP;
    property U5IS : TBits_2 read getU5IS write setU5IS;
    property U6IP : TBits_3 read getU6IP write setU6IP;
    property U6IS : TBits_2 read getU6IS write setU6IS;
    property w : TBits_32 read getw write setw;
  end;
type
  TINTRegisters = record
    INTCONbits : TINT_INTCON;
    INTCON : longWord;
    INTCONCLR : longWord;
    INTCONSET : longWord;
    INTCONINV : longWord;
    INTSTAT : longWord;
    IPTMR : longWord;
    IPTMRCLR : longWord;
    IPTMRSET : longWord;
    IPTMRINV : longWord;
    IFS0bits : TINT_IFS0;
    IFS0 : longWord;
    IFS0CLR : longWord;
    IFS0SET : longWord;
    IFS0INV : longWord;
    IFS1bits : TINT_IFS1;
    IFS1 : longWord;
    IFS1CLR : longWord;
    IFS1SET : longWord;
    IFS1INV : longWord;
    IFS2bits : TINT_IFS2;
    IFS2 : longWord;
    IFS2CLR : longWord;
    IFS2SET : longWord;
    IFS2INV : longWord;
    IEC0bits : TINT_IEC0;
    IEC0 : longWord;
    IEC0CLR : longWord;
    IEC0SET : longWord;
    IEC0INV : longWord;
    IEC1bits : TINT_IEC1;
    IEC1 : longWord;
    IEC1CLR : longWord;
    IEC1SET : longWord;
    IEC1INV : longWord;
    IEC2bits : TINT_IEC2;
    IEC2 : longWord;
    IEC2CLR : longWord;
    IEC2SET : longWord;
    IEC2INV : longWord;
    IPC0bits : TINT_IPC0;
    IPC0 : longWord;
    IPC0CLR : longWord;
    IPC0SET : longWord;
    IPC0INV : longWord;
    IPC1bits : TINT_IPC1;
    IPC1 : longWord;
    IPC1CLR : longWord;
    IPC1SET : longWord;
    IPC1INV : longWord;
    IPC2bits : TINT_IPC2;
    IPC2 : longWord;
    IPC2CLR : longWord;
    IPC2SET : longWord;
    IPC2INV : longWord;
    IPC3bits : TINT_IPC3;
    IPC3 : longWord;
    IPC3CLR : longWord;
    IPC3SET : longWord;
    IPC3INV : longWord;
    IPC4bits : TINT_IPC4;
    IPC4 : longWord;
    IPC4CLR : longWord;
    IPC4SET : longWord;
    IPC4INV : longWord;
    IPC5bits : TINT_IPC5;
    IPC5 : longWord;
    IPC5CLR : longWord;
    IPC5SET : longWord;
    IPC5INV : longWord;
    IPC6bits : TINT_IPC6;
    IPC6 : longWord;
    IPC6CLR : longWord;
    IPC6SET : longWord;
    IPC6INV : longWord;
    IPC7bits : TINT_IPC7;
    IPC7 : longWord;
    IPC7CLR : longWord;
    IPC7SET : longWord;
    IPC7INV : longWord;
    IPC8bits : TINT_IPC8;
    IPC8 : longWord;
    IPC8CLR : longWord;
    IPC8SET : longWord;
    IPC8INV : longWord;
    IPC9bits : TINT_IPC9;
    IPC9 : longWord;
    IPC9CLR : longWord;
    IPC9SET : longWord;
    IPC9INV : longWord;
    IPC10bits : TINT_IPC10;
    IPC10 : longWord;
    IPC10CLR : longWord;
    IPC10SET : longWord;
    IPC10INV : longWord;
    IPC11bits : TINT_IPC11;
    IPC11 : longWord;
    IPC11CLR : longWord;
    IPC11SET : longWord;
    IPC11INV : longWord;
    IPC12bits : TINT_IPC12;
    IPC12 : longWord;
    IPC12CLR : longWord;
    IPC12SET : longWord;
    IPC12INV : longWord;
  end;
  TBMX_BMXCON = record
  private
    function  getBMXARB : TBits_3; assembler; nostackframe; inline;
    function  getBMXCHEDMA : TBits_1; assembler; nostackframe; inline;
    function  getBMXERRDMA : TBits_1; assembler; nostackframe; inline;
    function  getBMXERRDS : TBits_1; assembler; nostackframe; inline;
    function  getBMXERRICD : TBits_1; assembler; nostackframe; inline;
    function  getBMXERRIS : TBits_1; assembler; nostackframe; inline;
    function  getBMXERRIXI : TBits_1; assembler; nostackframe; inline;
    function  getBMXWSDRM : TBits_1; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setBMXARB(thebits : TBits_3); assembler; nostackframe; inline;
    procedure setBMXCHEDMA(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setBMXERRDMA(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setBMXERRDS(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setBMXERRICD(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setBMXERRIS(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setBMXERRIXI(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setBMXWSDRM(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearBMXCHEDMA;
    procedure clearBMXERRDMA;
    procedure clearBMXERRDS;
    procedure clearBMXERRICD;
    procedure clearBMXERRIS;
    procedure clearBMXERRIXI;
    procedure clearBMXWSDRM;
    procedure setBMXCHEDMA;
    procedure setBMXERRDMA;
    procedure setBMXERRDS;
    procedure setBMXERRICD;
    procedure setBMXERRIS;
    procedure setBMXERRIXI;
    procedure setBMXWSDRM;
    property BMXARB : TBits_3 read getBMXARB write setBMXARB;
    property BMXCHEDMA : TBits_1 read getBMXCHEDMA write setBMXCHEDMA;
    property BMXERRDMA : TBits_1 read getBMXERRDMA write setBMXERRDMA;
    property BMXERRDS : TBits_1 read getBMXERRDS write setBMXERRDS;
    property BMXERRICD : TBits_1 read getBMXERRICD write setBMXERRICD;
    property BMXERRIS : TBits_1 read getBMXERRIS write setBMXERRIS;
    property BMXERRIXI : TBits_1 read getBMXERRIXI write setBMXERRIXI;
    property BMXWSDRM : TBits_1 read getBMXWSDRM write setBMXWSDRM;
    property w : TBits_32 read getw write setw;
  end;
type
  TBMXRegisters = record
    BMXCONbits : TBMX_BMXCON;
    BMXCON : longWord;
    BMXCONCLR : longWord;
    BMXCONSET : longWord;
    BMXCONINV : longWord;
    BMXDKPBA : longWord;
    BMXDKPBACLR : longWord;
    BMXDKPBASET : longWord;
    BMXDKPBAINV : longWord;
    BMXDUDBA : longWord;
    BMXDUDBACLR : longWord;
    BMXDUDBASET : longWord;
    BMXDUDBAINV : longWord;
    BMXDUPBA : longWord;
    BMXDUPBACLR : longWord;
    BMXDUPBASET : longWord;
    BMXDUPBAINV : longWord;
    BMXDRMSZ : longWord;
    BMXPUPBA : longWord;
    BMXPUPBACLR : longWord;
    BMXPUPBASET : longWord;
    BMXPUPBAINV : longWord;
    BMXPFMSZ : longWord;
    BMXBOOTSZ : longWord;
  end;
  TDMAC_DMACON = record
  private
    function  getDMABUSY : TBits_1; assembler; nostackframe; inline;
    function  getON : TBits_1; assembler; nostackframe; inline;
    function  getSUSPEND : TBits_1; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setDMABUSY(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setON(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSUSPEND(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearDMABUSY;
    procedure clearON;
    procedure clearSUSPEND;
    procedure setDMABUSY;
    procedure setON;
    procedure setSUSPEND;
    property DMABUSY : TBits_1 read getDMABUSY write setDMABUSY;
    property ON : TBits_1 read getON write setON;
    property SUSPEND : TBits_1 read getSUSPEND write setSUSPEND;
    property w : TBits_32 read getw write setw;
  end;
  TDMAC_DMASTAT = record
  private
    function  getDMACH : TBits_3; assembler; nostackframe; inline;
    function  getRDWR : TBits_1; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setDMACH(thebits : TBits_3); assembler; nostackframe; inline;
    procedure setRDWR(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearRDWR;
    procedure setRDWR;
    property DMACH : TBits_3 read getDMACH write setDMACH;
    property RDWR : TBits_1 read getRDWR write setRDWR;
    property w : TBits_32 read getw write setw;
  end;
  TDMAC_DCRCCON = record
  private
    function  getBITO : TBits_1; assembler; nostackframe; inline;
    function  getBYTO : TBits_2; assembler; nostackframe; inline;
    function  getCRCAPP : TBits_1; assembler; nostackframe; inline;
    function  getCRCCH : TBits_3; assembler; nostackframe; inline;
    function  getCRCEN : TBits_1; assembler; nostackframe; inline;
    function  getCRCTYP : TBits_1; assembler; nostackframe; inline;
    function  getPLEN : TBits_5; assembler; nostackframe; inline;
    function  getWBO : TBits_1; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setBITO(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setBYTO(thebits : TBits_2); assembler; nostackframe; inline;
    procedure setCRCAPP(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCRCCH(thebits : TBits_3); assembler; nostackframe; inline;
    procedure setCRCEN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCRCTYP(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setPLEN(thebits : TBits_5); assembler; nostackframe; inline;
    procedure setWBO(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearBITO;
    procedure clearCRCAPP;
    procedure clearCRCEN;
    procedure clearCRCTYP;
    procedure clearWBO;
    procedure setBITO;
    procedure setCRCAPP;
    procedure setCRCEN;
    procedure setCRCTYP;
    procedure setWBO;
    property BITO : TBits_1 read getBITO write setBITO;
    property BYTO : TBits_2 read getBYTO write setBYTO;
    property CRCAPP : TBits_1 read getCRCAPP write setCRCAPP;
    property CRCCH : TBits_3 read getCRCCH write setCRCCH;
    property CRCEN : TBits_1 read getCRCEN write setCRCEN;
    property CRCTYP : TBits_1 read getCRCTYP write setCRCTYP;
    property PLEN : TBits_5 read getPLEN write setPLEN;
    property WBO : TBits_1 read getWBO write setWBO;
    property w : TBits_32 read getw write setw;
  end;
type
  TDMACRegisters = record
    DMACONbits : TDMAC_DMACON;
    DMACON : longWord;
    DMACONCLR : longWord;
    DMACONSET : longWord;
    DMACONINV : longWord;
    DMASTATbits : TDMAC_DMASTAT;
    DMASTAT : longWord;
    DMASTATCLR : longWord;
    DMASTATSET : longWord;
    DMASTATINV : longWord;
    DMAADDR : longWord;
    DMAADDRCLR : longWord;
    DMAADDRSET : longWord;
    DMAADDRINV : longWord;
    DCRCCONbits : TDMAC_DCRCCON;
    DCRCCON : longWord;
    DCRCCONCLR : longWord;
    DCRCCONSET : longWord;
    DCRCCONINV : longWord;
    DCRCDATA : longWord;
    DCRCDATACLR : longWord;
    DCRCDATASET : longWord;
    DCRCDATAINV : longWord;
    DCRCXOR : longWord;
    DCRCXORCLR : longWord;
    DCRCXORSET : longWord;
    DCRCXORINV : longWord;
  end;
  TDMAC0_DCH0CON = record
  private
    function  getCHAED : TBits_1; assembler; nostackframe; inline;
    function  getCHAEN : TBits_1; assembler; nostackframe; inline;
    function  getCHBUSY : TBits_1; assembler; nostackframe; inline;
    function  getCHCHN : TBits_1; assembler; nostackframe; inline;
    function  getCHCHNS : TBits_1; assembler; nostackframe; inline;
    function  getCHEDET : TBits_1; assembler; nostackframe; inline;
    function  getCHEN : TBits_1; assembler; nostackframe; inline;
    function  getCHPRI : TBits_2; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setCHAED(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCHAEN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCHBUSY(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCHCHN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCHCHNS(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCHEDET(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCHEN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCHPRI(thebits : TBits_2); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearCHAED;
    procedure clearCHAEN;
    procedure clearCHBUSY;
    procedure clearCHCHN;
    procedure clearCHCHNS;
    procedure clearCHEDET;
    procedure clearCHEN;
    procedure setCHAED;
    procedure setCHAEN;
    procedure setCHBUSY;
    procedure setCHCHN;
    procedure setCHCHNS;
    procedure setCHEDET;
    procedure setCHEN;
    property CHAED : TBits_1 read getCHAED write setCHAED;
    property CHAEN : TBits_1 read getCHAEN write setCHAEN;
    property CHBUSY : TBits_1 read getCHBUSY write setCHBUSY;
    property CHCHN : TBits_1 read getCHCHN write setCHCHN;
    property CHCHNS : TBits_1 read getCHCHNS write setCHCHNS;
    property CHEDET : TBits_1 read getCHEDET write setCHEDET;
    property CHEN : TBits_1 read getCHEN write setCHEN;
    property CHPRI : TBits_2 read getCHPRI write setCHPRI;
    property w : TBits_32 read getw write setw;
  end;
  TDMAC0_DCH0ECON = record
  private
    function  getAIRQEN : TBits_1; assembler; nostackframe; inline;
    function  getCABORT : TBits_1; assembler; nostackframe; inline;
    function  getCFORCE : TBits_1; assembler; nostackframe; inline;
    function  getCHAIRQ : TBits_8; assembler; nostackframe; inline;
    function  getCHSIRQ : TBits_8; assembler; nostackframe; inline;
    function  getPATEN : TBits_1; assembler; nostackframe; inline;
    function  getSIRQEN : TBits_1; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setAIRQEN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCABORT(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCFORCE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCHAIRQ(thebits : TBits_8); assembler; nostackframe; inline;
    procedure setCHSIRQ(thebits : TBits_8); assembler; nostackframe; inline;
    procedure setPATEN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSIRQEN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearAIRQEN;
    procedure clearCABORT;
    procedure clearCFORCE;
    procedure clearPATEN;
    procedure clearSIRQEN;
    procedure setAIRQEN;
    procedure setCABORT;
    procedure setCFORCE;
    procedure setPATEN;
    procedure setSIRQEN;
    property AIRQEN : TBits_1 read getAIRQEN write setAIRQEN;
    property CABORT : TBits_1 read getCABORT write setCABORT;
    property CFORCE : TBits_1 read getCFORCE write setCFORCE;
    property CHAIRQ : TBits_8 read getCHAIRQ write setCHAIRQ;
    property CHSIRQ : TBits_8 read getCHSIRQ write setCHSIRQ;
    property PATEN : TBits_1 read getPATEN write setPATEN;
    property SIRQEN : TBits_1 read getSIRQEN write setSIRQEN;
    property w : TBits_32 read getw write setw;
  end;
  TDMAC0_DCH0INT = record
  private
    function  getCHBCIE : TBits_1; assembler; nostackframe; inline;
    function  getCHBCIF : TBits_1; assembler; nostackframe; inline;
    function  getCHCCIE : TBits_1; assembler; nostackframe; inline;
    function  getCHCCIF : TBits_1; assembler; nostackframe; inline;
    function  getCHDDIE : TBits_1; assembler; nostackframe; inline;
    function  getCHDDIF : TBits_1; assembler; nostackframe; inline;
    function  getCHDHIE : TBits_1; assembler; nostackframe; inline;
    function  getCHDHIF : TBits_1; assembler; nostackframe; inline;
    function  getCHERIE : TBits_1; assembler; nostackframe; inline;
    function  getCHERIF : TBits_1; assembler; nostackframe; inline;
    function  getCHSDIE : TBits_1; assembler; nostackframe; inline;
    function  getCHSDIF : TBits_1; assembler; nostackframe; inline;
    function  getCHSHIE : TBits_1; assembler; nostackframe; inline;
    function  getCHSHIF : TBits_1; assembler; nostackframe; inline;
    function  getCHTAIE : TBits_1; assembler; nostackframe; inline;
    function  getCHTAIF : TBits_1; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setCHBCIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCHBCIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCHCCIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCHCCIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCHDDIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCHDDIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCHDHIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCHDHIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCHERIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCHERIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCHSDIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCHSDIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCHSHIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCHSHIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCHTAIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCHTAIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearCHBCIE;
    procedure clearCHBCIF;
    procedure clearCHCCIE;
    procedure clearCHCCIF;
    procedure clearCHDDIE;
    procedure clearCHDDIF;
    procedure clearCHDHIE;
    procedure clearCHDHIF;
    procedure clearCHERIE;
    procedure clearCHERIF;
    procedure clearCHSDIE;
    procedure clearCHSDIF;
    procedure clearCHSHIE;
    procedure clearCHSHIF;
    procedure clearCHTAIE;
    procedure clearCHTAIF;
    procedure setCHBCIE;
    procedure setCHBCIF;
    procedure setCHCCIE;
    procedure setCHCCIF;
    procedure setCHDDIE;
    procedure setCHDDIF;
    procedure setCHDHIE;
    procedure setCHDHIF;
    procedure setCHERIE;
    procedure setCHERIF;
    procedure setCHSDIE;
    procedure setCHSDIF;
    procedure setCHSHIE;
    procedure setCHSHIF;
    procedure setCHTAIE;
    procedure setCHTAIF;
    property CHBCIE : TBits_1 read getCHBCIE write setCHBCIE;
    property CHBCIF : TBits_1 read getCHBCIF write setCHBCIF;
    property CHCCIE : TBits_1 read getCHCCIE write setCHCCIE;
    property CHCCIF : TBits_1 read getCHCCIF write setCHCCIF;
    property CHDDIE : TBits_1 read getCHDDIE write setCHDDIE;
    property CHDDIF : TBits_1 read getCHDDIF write setCHDDIF;
    property CHDHIE : TBits_1 read getCHDHIE write setCHDHIE;
    property CHDHIF : TBits_1 read getCHDHIF write setCHDHIF;
    property CHERIE : TBits_1 read getCHERIE write setCHERIE;
    property CHERIF : TBits_1 read getCHERIF write setCHERIF;
    property CHSDIE : TBits_1 read getCHSDIE write setCHSDIE;
    property CHSDIF : TBits_1 read getCHSDIF write setCHSDIF;
    property CHSHIE : TBits_1 read getCHSHIE write setCHSHIE;
    property CHSHIF : TBits_1 read getCHSHIF write setCHSHIF;
    property CHTAIE : TBits_1 read getCHTAIE write setCHTAIE;
    property CHTAIF : TBits_1 read getCHTAIF write setCHTAIF;
    property w : TBits_32 read getw write setw;
  end;
type
  TDMAC0Registers = record
    DCH0CONbits : TDMAC0_DCH0CON;
    DCH0CON : longWord;
    DCH0CONCLR : longWord;
    DCH0CONSET : longWord;
    DCH0CONINV : longWord;
    DCH0ECONbits : TDMAC0_DCH0ECON;
    DCH0ECON : longWord;
    DCH0ECONCLR : longWord;
    DCH0ECONSET : longWord;
    DCH0ECONINV : longWord;
    DCH0INTbits : TDMAC0_DCH0INT;
    DCH0INT : longWord;
    DCH0INTCLR : longWord;
    DCH0INTSET : longWord;
    DCH0INTINV : longWord;
    DCH0SSA : longWord;
    DCH0SSACLR : longWord;
    DCH0SSASET : longWord;
    DCH0SSAINV : longWord;
    DCH0DSA : longWord;
    DCH0DSACLR : longWord;
    DCH0DSASET : longWord;
    DCH0DSAINV : longWord;
    DCH0SSIZ : longWord;
    DCH0SSIZCLR : longWord;
    DCH0SSIZSET : longWord;
    DCH0SSIZINV : longWord;
    DCH0DSIZ : longWord;
    DCH0DSIZCLR : longWord;
    DCH0DSIZSET : longWord;
    DCH0DSIZINV : longWord;
    DCH0SPTR : longWord;
    DCH0SPTRCLR : longWord;
    DCH0SPTRSET : longWord;
    DCH0SPTRINV : longWord;
    DCH0DPTR : longWord;
    DCH0DPTRCLR : longWord;
    DCH0DPTRSET : longWord;
    DCH0DPTRINV : longWord;
    DCH0CSIZ : longWord;
    DCH0CSIZCLR : longWord;
    DCH0CSIZSET : longWord;
    DCH0CSIZINV : longWord;
    DCH0CPTR : longWord;
    DCH0CPTRCLR : longWord;
    DCH0CPTRSET : longWord;
    DCH0CPTRINV : longWord;
    DCH0DAT : longWord;
    DCH0DATCLR : longWord;
    DCH0DATSET : longWord;
    DCH0DATINV : longWord;
  end;
  TDMAC1_DCH1CON = record
  private
    function  getCHAED : TBits_1; assembler; nostackframe; inline;
    function  getCHAEN : TBits_1; assembler; nostackframe; inline;
    function  getCHBUSY : TBits_1; assembler; nostackframe; inline;
    function  getCHCHN : TBits_1; assembler; nostackframe; inline;
    function  getCHCHNS : TBits_1; assembler; nostackframe; inline;
    function  getCHEDET : TBits_1; assembler; nostackframe; inline;
    function  getCHEN : TBits_1; assembler; nostackframe; inline;
    function  getCHPRI : TBits_2; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setCHAED(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCHAEN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCHBUSY(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCHCHN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCHCHNS(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCHEDET(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCHEN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCHPRI(thebits : TBits_2); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearCHAED;
    procedure clearCHAEN;
    procedure clearCHBUSY;
    procedure clearCHCHN;
    procedure clearCHCHNS;
    procedure clearCHEDET;
    procedure clearCHEN;
    procedure setCHAED;
    procedure setCHAEN;
    procedure setCHBUSY;
    procedure setCHCHN;
    procedure setCHCHNS;
    procedure setCHEDET;
    procedure setCHEN;
    property CHAED : TBits_1 read getCHAED write setCHAED;
    property CHAEN : TBits_1 read getCHAEN write setCHAEN;
    property CHBUSY : TBits_1 read getCHBUSY write setCHBUSY;
    property CHCHN : TBits_1 read getCHCHN write setCHCHN;
    property CHCHNS : TBits_1 read getCHCHNS write setCHCHNS;
    property CHEDET : TBits_1 read getCHEDET write setCHEDET;
    property CHEN : TBits_1 read getCHEN write setCHEN;
    property CHPRI : TBits_2 read getCHPRI write setCHPRI;
    property w : TBits_32 read getw write setw;
  end;
  TDMAC1_DCH1ECON = record
  private
    function  getAIRQEN : TBits_1; assembler; nostackframe; inline;
    function  getCABORT : TBits_1; assembler; nostackframe; inline;
    function  getCFORCE : TBits_1; assembler; nostackframe; inline;
    function  getCHAIRQ : TBits_8; assembler; nostackframe; inline;
    function  getCHSIRQ : TBits_8; assembler; nostackframe; inline;
    function  getPATEN : TBits_1; assembler; nostackframe; inline;
    function  getSIRQEN : TBits_1; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setAIRQEN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCABORT(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCFORCE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCHAIRQ(thebits : TBits_8); assembler; nostackframe; inline;
    procedure setCHSIRQ(thebits : TBits_8); assembler; nostackframe; inline;
    procedure setPATEN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSIRQEN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearAIRQEN;
    procedure clearCABORT;
    procedure clearCFORCE;
    procedure clearPATEN;
    procedure clearSIRQEN;
    procedure setAIRQEN;
    procedure setCABORT;
    procedure setCFORCE;
    procedure setPATEN;
    procedure setSIRQEN;
    property AIRQEN : TBits_1 read getAIRQEN write setAIRQEN;
    property CABORT : TBits_1 read getCABORT write setCABORT;
    property CFORCE : TBits_1 read getCFORCE write setCFORCE;
    property CHAIRQ : TBits_8 read getCHAIRQ write setCHAIRQ;
    property CHSIRQ : TBits_8 read getCHSIRQ write setCHSIRQ;
    property PATEN : TBits_1 read getPATEN write setPATEN;
    property SIRQEN : TBits_1 read getSIRQEN write setSIRQEN;
    property w : TBits_32 read getw write setw;
  end;
  TDMAC1_DCH1INT = record
  private
    function  getCHBCIE : TBits_1; assembler; nostackframe; inline;
    function  getCHBCIF : TBits_1; assembler; nostackframe; inline;
    function  getCHCCIE : TBits_1; assembler; nostackframe; inline;
    function  getCHCCIF : TBits_1; assembler; nostackframe; inline;
    function  getCHDDIE : TBits_1; assembler; nostackframe; inline;
    function  getCHDDIF : TBits_1; assembler; nostackframe; inline;
    function  getCHDHIE : TBits_1; assembler; nostackframe; inline;
    function  getCHDHIF : TBits_1; assembler; nostackframe; inline;
    function  getCHERIE : TBits_1; assembler; nostackframe; inline;
    function  getCHERIF : TBits_1; assembler; nostackframe; inline;
    function  getCHSDIE : TBits_1; assembler; nostackframe; inline;
    function  getCHSDIF : TBits_1; assembler; nostackframe; inline;
    function  getCHSHIE : TBits_1; assembler; nostackframe; inline;
    function  getCHSHIF : TBits_1; assembler; nostackframe; inline;
    function  getCHTAIE : TBits_1; assembler; nostackframe; inline;
    function  getCHTAIF : TBits_1; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setCHBCIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCHBCIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCHCCIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCHCCIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCHDDIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCHDDIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCHDHIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCHDHIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCHERIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCHERIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCHSDIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCHSDIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCHSHIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCHSHIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCHTAIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCHTAIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearCHBCIE;
    procedure clearCHBCIF;
    procedure clearCHCCIE;
    procedure clearCHCCIF;
    procedure clearCHDDIE;
    procedure clearCHDDIF;
    procedure clearCHDHIE;
    procedure clearCHDHIF;
    procedure clearCHERIE;
    procedure clearCHERIF;
    procedure clearCHSDIE;
    procedure clearCHSDIF;
    procedure clearCHSHIE;
    procedure clearCHSHIF;
    procedure clearCHTAIE;
    procedure clearCHTAIF;
    procedure setCHBCIE;
    procedure setCHBCIF;
    procedure setCHCCIE;
    procedure setCHCCIF;
    procedure setCHDDIE;
    procedure setCHDDIF;
    procedure setCHDHIE;
    procedure setCHDHIF;
    procedure setCHERIE;
    procedure setCHERIF;
    procedure setCHSDIE;
    procedure setCHSDIF;
    procedure setCHSHIE;
    procedure setCHSHIF;
    procedure setCHTAIE;
    procedure setCHTAIF;
    property CHBCIE : TBits_1 read getCHBCIE write setCHBCIE;
    property CHBCIF : TBits_1 read getCHBCIF write setCHBCIF;
    property CHCCIE : TBits_1 read getCHCCIE write setCHCCIE;
    property CHCCIF : TBits_1 read getCHCCIF write setCHCCIF;
    property CHDDIE : TBits_1 read getCHDDIE write setCHDDIE;
    property CHDDIF : TBits_1 read getCHDDIF write setCHDDIF;
    property CHDHIE : TBits_1 read getCHDHIE write setCHDHIE;
    property CHDHIF : TBits_1 read getCHDHIF write setCHDHIF;
    property CHERIE : TBits_1 read getCHERIE write setCHERIE;
    property CHERIF : TBits_1 read getCHERIF write setCHERIF;
    property CHSDIE : TBits_1 read getCHSDIE write setCHSDIE;
    property CHSDIF : TBits_1 read getCHSDIF write setCHSDIF;
    property CHSHIE : TBits_1 read getCHSHIE write setCHSHIE;
    property CHSHIF : TBits_1 read getCHSHIF write setCHSHIF;
    property CHTAIE : TBits_1 read getCHTAIE write setCHTAIE;
    property CHTAIF : TBits_1 read getCHTAIF write setCHTAIF;
    property w : TBits_32 read getw write setw;
  end;
type
  TDMAC1Registers = record
    DCH1CONbits : TDMAC1_DCH1CON;
    DCH1CON : longWord;
    DCH1CONCLR : longWord;
    DCH1CONSET : longWord;
    DCH1CONINV : longWord;
    DCH1ECONbits : TDMAC1_DCH1ECON;
    DCH1ECON : longWord;
    DCH1ECONCLR : longWord;
    DCH1ECONSET : longWord;
    DCH1ECONINV : longWord;
    DCH1INTbits : TDMAC1_DCH1INT;
    DCH1INT : longWord;
    DCH1INTCLR : longWord;
    DCH1INTSET : longWord;
    DCH1INTINV : longWord;
    DCH1SSA : longWord;
    DCH1SSACLR : longWord;
    DCH1SSASET : longWord;
    DCH1SSAINV : longWord;
    DCH1DSA : longWord;
    DCH1DSACLR : longWord;
    DCH1DSASET : longWord;
    DCH1DSAINV : longWord;
    DCH1SSIZ : longWord;
    DCH1SSIZCLR : longWord;
    DCH1SSIZSET : longWord;
    DCH1SSIZINV : longWord;
    DCH1DSIZ : longWord;
    DCH1DSIZCLR : longWord;
    DCH1DSIZSET : longWord;
    DCH1DSIZINV : longWord;
    DCH1SPTR : longWord;
    DCH1SPTRCLR : longWord;
    DCH1SPTRSET : longWord;
    DCH1SPTRINV : longWord;
    DCH1DPTR : longWord;
    DCH1DPTRCLR : longWord;
    DCH1DPTRSET : longWord;
    DCH1DPTRINV : longWord;
    DCH1CSIZ : longWord;
    DCH1CSIZCLR : longWord;
    DCH1CSIZSET : longWord;
    DCH1CSIZINV : longWord;
    DCH1CPTR : longWord;
    DCH1CPTRCLR : longWord;
    DCH1CPTRSET : longWord;
    DCH1CPTRINV : longWord;
    DCH1DAT : longWord;
    DCH1DATCLR : longWord;
    DCH1DATSET : longWord;
    DCH1DATINV : longWord;
  end;
  TDMAC2_DCH2CON = record
  private
    function  getCHAED : TBits_1; assembler; nostackframe; inline;
    function  getCHAEN : TBits_1; assembler; nostackframe; inline;
    function  getCHBUSY : TBits_1; assembler; nostackframe; inline;
    function  getCHCHN : TBits_1; assembler; nostackframe; inline;
    function  getCHCHNS : TBits_1; assembler; nostackframe; inline;
    function  getCHEDET : TBits_1; assembler; nostackframe; inline;
    function  getCHEN : TBits_1; assembler; nostackframe; inline;
    function  getCHPRI : TBits_2; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setCHAED(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCHAEN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCHBUSY(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCHCHN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCHCHNS(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCHEDET(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCHEN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCHPRI(thebits : TBits_2); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearCHAED;
    procedure clearCHAEN;
    procedure clearCHBUSY;
    procedure clearCHCHN;
    procedure clearCHCHNS;
    procedure clearCHEDET;
    procedure clearCHEN;
    procedure setCHAED;
    procedure setCHAEN;
    procedure setCHBUSY;
    procedure setCHCHN;
    procedure setCHCHNS;
    procedure setCHEDET;
    procedure setCHEN;
    property CHAED : TBits_1 read getCHAED write setCHAED;
    property CHAEN : TBits_1 read getCHAEN write setCHAEN;
    property CHBUSY : TBits_1 read getCHBUSY write setCHBUSY;
    property CHCHN : TBits_1 read getCHCHN write setCHCHN;
    property CHCHNS : TBits_1 read getCHCHNS write setCHCHNS;
    property CHEDET : TBits_1 read getCHEDET write setCHEDET;
    property CHEN : TBits_1 read getCHEN write setCHEN;
    property CHPRI : TBits_2 read getCHPRI write setCHPRI;
    property w : TBits_32 read getw write setw;
  end;
  TDMAC2_DCH2ECON = record
  private
    function  getAIRQEN : TBits_1; assembler; nostackframe; inline;
    function  getCABORT : TBits_1; assembler; nostackframe; inline;
    function  getCFORCE : TBits_1; assembler; nostackframe; inline;
    function  getCHAIRQ : TBits_8; assembler; nostackframe; inline;
    function  getCHSIRQ : TBits_8; assembler; nostackframe; inline;
    function  getPATEN : TBits_1; assembler; nostackframe; inline;
    function  getSIRQEN : TBits_1; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setAIRQEN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCABORT(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCFORCE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCHAIRQ(thebits : TBits_8); assembler; nostackframe; inline;
    procedure setCHSIRQ(thebits : TBits_8); assembler; nostackframe; inline;
    procedure setPATEN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSIRQEN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearAIRQEN;
    procedure clearCABORT;
    procedure clearCFORCE;
    procedure clearPATEN;
    procedure clearSIRQEN;
    procedure setAIRQEN;
    procedure setCABORT;
    procedure setCFORCE;
    procedure setPATEN;
    procedure setSIRQEN;
    property AIRQEN : TBits_1 read getAIRQEN write setAIRQEN;
    property CABORT : TBits_1 read getCABORT write setCABORT;
    property CFORCE : TBits_1 read getCFORCE write setCFORCE;
    property CHAIRQ : TBits_8 read getCHAIRQ write setCHAIRQ;
    property CHSIRQ : TBits_8 read getCHSIRQ write setCHSIRQ;
    property PATEN : TBits_1 read getPATEN write setPATEN;
    property SIRQEN : TBits_1 read getSIRQEN write setSIRQEN;
    property w : TBits_32 read getw write setw;
  end;
  TDMAC2_DCH2INT = record
  private
    function  getCHBCIE : TBits_1; assembler; nostackframe; inline;
    function  getCHBCIF : TBits_1; assembler; nostackframe; inline;
    function  getCHCCIE : TBits_1; assembler; nostackframe; inline;
    function  getCHCCIF : TBits_1; assembler; nostackframe; inline;
    function  getCHDDIE : TBits_1; assembler; nostackframe; inline;
    function  getCHDDIF : TBits_1; assembler; nostackframe; inline;
    function  getCHDHIE : TBits_1; assembler; nostackframe; inline;
    function  getCHDHIF : TBits_1; assembler; nostackframe; inline;
    function  getCHERIE : TBits_1; assembler; nostackframe; inline;
    function  getCHERIF : TBits_1; assembler; nostackframe; inline;
    function  getCHSDIE : TBits_1; assembler; nostackframe; inline;
    function  getCHSDIF : TBits_1; assembler; nostackframe; inline;
    function  getCHSHIE : TBits_1; assembler; nostackframe; inline;
    function  getCHSHIF : TBits_1; assembler; nostackframe; inline;
    function  getCHTAIE : TBits_1; assembler; nostackframe; inline;
    function  getCHTAIF : TBits_1; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setCHBCIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCHBCIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCHCCIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCHCCIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCHDDIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCHDDIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCHDHIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCHDHIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCHERIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCHERIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCHSDIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCHSDIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCHSHIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCHSHIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCHTAIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCHTAIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearCHBCIE;
    procedure clearCHBCIF;
    procedure clearCHCCIE;
    procedure clearCHCCIF;
    procedure clearCHDDIE;
    procedure clearCHDDIF;
    procedure clearCHDHIE;
    procedure clearCHDHIF;
    procedure clearCHERIE;
    procedure clearCHERIF;
    procedure clearCHSDIE;
    procedure clearCHSDIF;
    procedure clearCHSHIE;
    procedure clearCHSHIF;
    procedure clearCHTAIE;
    procedure clearCHTAIF;
    procedure setCHBCIE;
    procedure setCHBCIF;
    procedure setCHCCIE;
    procedure setCHCCIF;
    procedure setCHDDIE;
    procedure setCHDDIF;
    procedure setCHDHIE;
    procedure setCHDHIF;
    procedure setCHERIE;
    procedure setCHERIF;
    procedure setCHSDIE;
    procedure setCHSDIF;
    procedure setCHSHIE;
    procedure setCHSHIF;
    procedure setCHTAIE;
    procedure setCHTAIF;
    property CHBCIE : TBits_1 read getCHBCIE write setCHBCIE;
    property CHBCIF : TBits_1 read getCHBCIF write setCHBCIF;
    property CHCCIE : TBits_1 read getCHCCIE write setCHCCIE;
    property CHCCIF : TBits_1 read getCHCCIF write setCHCCIF;
    property CHDDIE : TBits_1 read getCHDDIE write setCHDDIE;
    property CHDDIF : TBits_1 read getCHDDIF write setCHDDIF;
    property CHDHIE : TBits_1 read getCHDHIE write setCHDHIE;
    property CHDHIF : TBits_1 read getCHDHIF write setCHDHIF;
    property CHERIE : TBits_1 read getCHERIE write setCHERIE;
    property CHERIF : TBits_1 read getCHERIF write setCHERIF;
    property CHSDIE : TBits_1 read getCHSDIE write setCHSDIE;
    property CHSDIF : TBits_1 read getCHSDIF write setCHSDIF;
    property CHSHIE : TBits_1 read getCHSHIE write setCHSHIE;
    property CHSHIF : TBits_1 read getCHSHIF write setCHSHIF;
    property CHTAIE : TBits_1 read getCHTAIE write setCHTAIE;
    property CHTAIF : TBits_1 read getCHTAIF write setCHTAIF;
    property w : TBits_32 read getw write setw;
  end;
type
  TDMAC2Registers = record
    DCH2CONbits : TDMAC2_DCH2CON;
    DCH2CON : longWord;
    DCH2CONCLR : longWord;
    DCH2CONSET : longWord;
    DCH2CONINV : longWord;
    DCH2ECONbits : TDMAC2_DCH2ECON;
    DCH2ECON : longWord;
    DCH2ECONCLR : longWord;
    DCH2ECONSET : longWord;
    DCH2ECONINV : longWord;
    DCH2INTbits : TDMAC2_DCH2INT;
    DCH2INT : longWord;
    DCH2INTCLR : longWord;
    DCH2INTSET : longWord;
    DCH2INTINV : longWord;
    DCH2SSA : longWord;
    DCH2SSACLR : longWord;
    DCH2SSASET : longWord;
    DCH2SSAINV : longWord;
    DCH2DSA : longWord;
    DCH2DSACLR : longWord;
    DCH2DSASET : longWord;
    DCH2DSAINV : longWord;
    DCH2SSIZ : longWord;
    DCH2SSIZCLR : longWord;
    DCH2SSIZSET : longWord;
    DCH2SSIZINV : longWord;
    DCH2DSIZ : longWord;
    DCH2DSIZCLR : longWord;
    DCH2DSIZSET : longWord;
    DCH2DSIZINV : longWord;
    DCH2SPTR : longWord;
    DCH2SPTRCLR : longWord;
    DCH2SPTRSET : longWord;
    DCH2SPTRINV : longWord;
    DCH2DPTR : longWord;
    DCH2DPTRCLR : longWord;
    DCH2DPTRSET : longWord;
    DCH2DPTRINV : longWord;
    DCH2CSIZ : longWord;
    DCH2CSIZCLR : longWord;
    DCH2CSIZSET : longWord;
    DCH2CSIZINV : longWord;
    DCH2CPTR : longWord;
    DCH2CPTRCLR : longWord;
    DCH2CPTRSET : longWord;
    DCH2CPTRINV : longWord;
    DCH2DAT : longWord;
    DCH2DATCLR : longWord;
    DCH2DATSET : longWord;
    DCH2DATINV : longWord;
  end;
  TDMAC3_DCH3CON = record
  private
    function  getCHAED : TBits_1; assembler; nostackframe; inline;
    function  getCHAEN : TBits_1; assembler; nostackframe; inline;
    function  getCHBUSY : TBits_1; assembler; nostackframe; inline;
    function  getCHCHN : TBits_1; assembler; nostackframe; inline;
    function  getCHCHNS : TBits_1; assembler; nostackframe; inline;
    function  getCHEDET : TBits_1; assembler; nostackframe; inline;
    function  getCHEN : TBits_1; assembler; nostackframe; inline;
    function  getCHPRI : TBits_2; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setCHAED(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCHAEN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCHBUSY(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCHCHN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCHCHNS(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCHEDET(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCHEN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCHPRI(thebits : TBits_2); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearCHAED;
    procedure clearCHAEN;
    procedure clearCHBUSY;
    procedure clearCHCHN;
    procedure clearCHCHNS;
    procedure clearCHEDET;
    procedure clearCHEN;
    procedure setCHAED;
    procedure setCHAEN;
    procedure setCHBUSY;
    procedure setCHCHN;
    procedure setCHCHNS;
    procedure setCHEDET;
    procedure setCHEN;
    property CHAED : TBits_1 read getCHAED write setCHAED;
    property CHAEN : TBits_1 read getCHAEN write setCHAEN;
    property CHBUSY : TBits_1 read getCHBUSY write setCHBUSY;
    property CHCHN : TBits_1 read getCHCHN write setCHCHN;
    property CHCHNS : TBits_1 read getCHCHNS write setCHCHNS;
    property CHEDET : TBits_1 read getCHEDET write setCHEDET;
    property CHEN : TBits_1 read getCHEN write setCHEN;
    property CHPRI : TBits_2 read getCHPRI write setCHPRI;
    property w : TBits_32 read getw write setw;
  end;
  TDMAC3_DCH3ECON = record
  private
    function  getAIRQEN : TBits_1; assembler; nostackframe; inline;
    function  getCABORT : TBits_1; assembler; nostackframe; inline;
    function  getCFORCE : TBits_1; assembler; nostackframe; inline;
    function  getCHAIRQ : TBits_8; assembler; nostackframe; inline;
    function  getCHSIRQ : TBits_8; assembler; nostackframe; inline;
    function  getPATEN : TBits_1; assembler; nostackframe; inline;
    function  getSIRQEN : TBits_1; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setAIRQEN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCABORT(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCFORCE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCHAIRQ(thebits : TBits_8); assembler; nostackframe; inline;
    procedure setCHSIRQ(thebits : TBits_8); assembler; nostackframe; inline;
    procedure setPATEN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSIRQEN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearAIRQEN;
    procedure clearCABORT;
    procedure clearCFORCE;
    procedure clearPATEN;
    procedure clearSIRQEN;
    procedure setAIRQEN;
    procedure setCABORT;
    procedure setCFORCE;
    procedure setPATEN;
    procedure setSIRQEN;
    property AIRQEN : TBits_1 read getAIRQEN write setAIRQEN;
    property CABORT : TBits_1 read getCABORT write setCABORT;
    property CFORCE : TBits_1 read getCFORCE write setCFORCE;
    property CHAIRQ : TBits_8 read getCHAIRQ write setCHAIRQ;
    property CHSIRQ : TBits_8 read getCHSIRQ write setCHSIRQ;
    property PATEN : TBits_1 read getPATEN write setPATEN;
    property SIRQEN : TBits_1 read getSIRQEN write setSIRQEN;
    property w : TBits_32 read getw write setw;
  end;
  TDMAC3_DCH3INT = record
  private
    function  getCHBCIE : TBits_1; assembler; nostackframe; inline;
    function  getCHBCIF : TBits_1; assembler; nostackframe; inline;
    function  getCHCCIE : TBits_1; assembler; nostackframe; inline;
    function  getCHCCIF : TBits_1; assembler; nostackframe; inline;
    function  getCHDDIE : TBits_1; assembler; nostackframe; inline;
    function  getCHDDIF : TBits_1; assembler; nostackframe; inline;
    function  getCHDHIE : TBits_1; assembler; nostackframe; inline;
    function  getCHDHIF : TBits_1; assembler; nostackframe; inline;
    function  getCHERIE : TBits_1; assembler; nostackframe; inline;
    function  getCHERIF : TBits_1; assembler; nostackframe; inline;
    function  getCHSDIE : TBits_1; assembler; nostackframe; inline;
    function  getCHSDIF : TBits_1; assembler; nostackframe; inline;
    function  getCHSHIE : TBits_1; assembler; nostackframe; inline;
    function  getCHSHIF : TBits_1; assembler; nostackframe; inline;
    function  getCHTAIE : TBits_1; assembler; nostackframe; inline;
    function  getCHTAIF : TBits_1; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setCHBCIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCHBCIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCHCCIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCHCCIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCHDDIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCHDDIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCHDHIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCHDHIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCHERIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCHERIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCHSDIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCHSDIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCHSHIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCHSHIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCHTAIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCHTAIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearCHBCIE;
    procedure clearCHBCIF;
    procedure clearCHCCIE;
    procedure clearCHCCIF;
    procedure clearCHDDIE;
    procedure clearCHDDIF;
    procedure clearCHDHIE;
    procedure clearCHDHIF;
    procedure clearCHERIE;
    procedure clearCHERIF;
    procedure clearCHSDIE;
    procedure clearCHSDIF;
    procedure clearCHSHIE;
    procedure clearCHSHIF;
    procedure clearCHTAIE;
    procedure clearCHTAIF;
    procedure setCHBCIE;
    procedure setCHBCIF;
    procedure setCHCCIE;
    procedure setCHCCIF;
    procedure setCHDDIE;
    procedure setCHDDIF;
    procedure setCHDHIE;
    procedure setCHDHIF;
    procedure setCHERIE;
    procedure setCHERIF;
    procedure setCHSDIE;
    procedure setCHSDIF;
    procedure setCHSHIE;
    procedure setCHSHIF;
    procedure setCHTAIE;
    procedure setCHTAIF;
    property CHBCIE : TBits_1 read getCHBCIE write setCHBCIE;
    property CHBCIF : TBits_1 read getCHBCIF write setCHBCIF;
    property CHCCIE : TBits_1 read getCHCCIE write setCHCCIE;
    property CHCCIF : TBits_1 read getCHCCIF write setCHCCIF;
    property CHDDIE : TBits_1 read getCHDDIE write setCHDDIE;
    property CHDDIF : TBits_1 read getCHDDIF write setCHDDIF;
    property CHDHIE : TBits_1 read getCHDHIE write setCHDHIE;
    property CHDHIF : TBits_1 read getCHDHIF write setCHDHIF;
    property CHERIE : TBits_1 read getCHERIE write setCHERIE;
    property CHERIF : TBits_1 read getCHERIF write setCHERIF;
    property CHSDIE : TBits_1 read getCHSDIE write setCHSDIE;
    property CHSDIF : TBits_1 read getCHSDIF write setCHSDIF;
    property CHSHIE : TBits_1 read getCHSHIE write setCHSHIE;
    property CHSHIF : TBits_1 read getCHSHIF write setCHSHIF;
    property CHTAIE : TBits_1 read getCHTAIE write setCHTAIE;
    property CHTAIF : TBits_1 read getCHTAIF write setCHTAIF;
    property w : TBits_32 read getw write setw;
  end;
type
  TDMAC3Registers = record
    DCH3CONbits : TDMAC3_DCH3CON;
    DCH3CON : longWord;
    DCH3CONCLR : longWord;
    DCH3CONSET : longWord;
    DCH3CONINV : longWord;
    DCH3ECONbits : TDMAC3_DCH3ECON;
    DCH3ECON : longWord;
    DCH3ECONCLR : longWord;
    DCH3ECONSET : longWord;
    DCH3ECONINV : longWord;
    DCH3INTbits : TDMAC3_DCH3INT;
    DCH3INT : longWord;
    DCH3INTCLR : longWord;
    DCH3INTSET : longWord;
    DCH3INTINV : longWord;
    DCH3SSA : longWord;
    DCH3SSACLR : longWord;
    DCH3SSASET : longWord;
    DCH3SSAINV : longWord;
    DCH3DSA : longWord;
    DCH3DSACLR : longWord;
    DCH3DSASET : longWord;
    DCH3DSAINV : longWord;
    DCH3SSIZ : longWord;
    DCH3SSIZCLR : longWord;
    DCH3SSIZSET : longWord;
    DCH3SSIZINV : longWord;
    DCH3DSIZ : longWord;
    DCH3DSIZCLR : longWord;
    DCH3DSIZSET : longWord;
    DCH3DSIZINV : longWord;
    DCH3SPTR : longWord;
    DCH3SPTRCLR : longWord;
    DCH3SPTRSET : longWord;
    DCH3SPTRINV : longWord;
    DCH3DPTR : longWord;
    DCH3DPTRCLR : longWord;
    DCH3DPTRSET : longWord;
    DCH3DPTRINV : longWord;
    DCH3CSIZ : longWord;
    DCH3CSIZCLR : longWord;
    DCH3CSIZSET : longWord;
    DCH3CSIZINV : longWord;
    DCH3CPTR : longWord;
    DCH3CPTRCLR : longWord;
    DCH3CPTRSET : longWord;
    DCH3CPTRINV : longWord;
    DCH3DAT : longWord;
    DCH3DATCLR : longWord;
    DCH3DATSET : longWord;
    DCH3DATINV : longWord;
  end;
  TDMAC4_DCH4CON = record
  private
    function  getCHAED : TBits_1; assembler; nostackframe; inline;
    function  getCHAEN : TBits_1; assembler; nostackframe; inline;
    function  getCHBUSY : TBits_1; assembler; nostackframe; inline;
    function  getCHCHN : TBits_1; assembler; nostackframe; inline;
    function  getCHCHNS : TBits_1; assembler; nostackframe; inline;
    function  getCHEDET : TBits_1; assembler; nostackframe; inline;
    function  getCHEN : TBits_1; assembler; nostackframe; inline;
    function  getCHPRI : TBits_2; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setCHAED(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCHAEN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCHBUSY(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCHCHN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCHCHNS(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCHEDET(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCHEN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCHPRI(thebits : TBits_2); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearCHAED;
    procedure clearCHAEN;
    procedure clearCHBUSY;
    procedure clearCHCHN;
    procedure clearCHCHNS;
    procedure clearCHEDET;
    procedure clearCHEN;
    procedure setCHAED;
    procedure setCHAEN;
    procedure setCHBUSY;
    procedure setCHCHN;
    procedure setCHCHNS;
    procedure setCHEDET;
    procedure setCHEN;
    property CHAED : TBits_1 read getCHAED write setCHAED;
    property CHAEN : TBits_1 read getCHAEN write setCHAEN;
    property CHBUSY : TBits_1 read getCHBUSY write setCHBUSY;
    property CHCHN : TBits_1 read getCHCHN write setCHCHN;
    property CHCHNS : TBits_1 read getCHCHNS write setCHCHNS;
    property CHEDET : TBits_1 read getCHEDET write setCHEDET;
    property CHEN : TBits_1 read getCHEN write setCHEN;
    property CHPRI : TBits_2 read getCHPRI write setCHPRI;
    property w : TBits_32 read getw write setw;
  end;
  TDMAC4_DCH4ECON = record
  private
    function  getAIRQEN : TBits_1; assembler; nostackframe; inline;
    function  getCABORT : TBits_1; assembler; nostackframe; inline;
    function  getCFORCE : TBits_1; assembler; nostackframe; inline;
    function  getCHAIRQ : TBits_8; assembler; nostackframe; inline;
    function  getCHSIRQ : TBits_8; assembler; nostackframe; inline;
    function  getPATEN : TBits_1; assembler; nostackframe; inline;
    function  getSIRQEN : TBits_1; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setAIRQEN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCABORT(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCFORCE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCHAIRQ(thebits : TBits_8); assembler; nostackframe; inline;
    procedure setCHSIRQ(thebits : TBits_8); assembler; nostackframe; inline;
    procedure setPATEN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSIRQEN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearAIRQEN;
    procedure clearCABORT;
    procedure clearCFORCE;
    procedure clearPATEN;
    procedure clearSIRQEN;
    procedure setAIRQEN;
    procedure setCABORT;
    procedure setCFORCE;
    procedure setPATEN;
    procedure setSIRQEN;
    property AIRQEN : TBits_1 read getAIRQEN write setAIRQEN;
    property CABORT : TBits_1 read getCABORT write setCABORT;
    property CFORCE : TBits_1 read getCFORCE write setCFORCE;
    property CHAIRQ : TBits_8 read getCHAIRQ write setCHAIRQ;
    property CHSIRQ : TBits_8 read getCHSIRQ write setCHSIRQ;
    property PATEN : TBits_1 read getPATEN write setPATEN;
    property SIRQEN : TBits_1 read getSIRQEN write setSIRQEN;
    property w : TBits_32 read getw write setw;
  end;
  TDMAC4_DCH4INT = record
  private
    function  getCHBCIE : TBits_1; assembler; nostackframe; inline;
    function  getCHBCIF : TBits_1; assembler; nostackframe; inline;
    function  getCHCCIE : TBits_1; assembler; nostackframe; inline;
    function  getCHCCIF : TBits_1; assembler; nostackframe; inline;
    function  getCHDDIE : TBits_1; assembler; nostackframe; inline;
    function  getCHDDIF : TBits_1; assembler; nostackframe; inline;
    function  getCHDHIE : TBits_1; assembler; nostackframe; inline;
    function  getCHDHIF : TBits_1; assembler; nostackframe; inline;
    function  getCHERIE : TBits_1; assembler; nostackframe; inline;
    function  getCHERIF : TBits_1; assembler; nostackframe; inline;
    function  getCHSDIE : TBits_1; assembler; nostackframe; inline;
    function  getCHSDIF : TBits_1; assembler; nostackframe; inline;
    function  getCHSHIE : TBits_1; assembler; nostackframe; inline;
    function  getCHSHIF : TBits_1; assembler; nostackframe; inline;
    function  getCHTAIE : TBits_1; assembler; nostackframe; inline;
    function  getCHTAIF : TBits_1; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setCHBCIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCHBCIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCHCCIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCHCCIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCHDDIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCHDDIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCHDHIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCHDHIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCHERIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCHERIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCHSDIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCHSDIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCHSHIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCHSHIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCHTAIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCHTAIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearCHBCIE;
    procedure clearCHBCIF;
    procedure clearCHCCIE;
    procedure clearCHCCIF;
    procedure clearCHDDIE;
    procedure clearCHDDIF;
    procedure clearCHDHIE;
    procedure clearCHDHIF;
    procedure clearCHERIE;
    procedure clearCHERIF;
    procedure clearCHSDIE;
    procedure clearCHSDIF;
    procedure clearCHSHIE;
    procedure clearCHSHIF;
    procedure clearCHTAIE;
    procedure clearCHTAIF;
    procedure setCHBCIE;
    procedure setCHBCIF;
    procedure setCHCCIE;
    procedure setCHCCIF;
    procedure setCHDDIE;
    procedure setCHDDIF;
    procedure setCHDHIE;
    procedure setCHDHIF;
    procedure setCHERIE;
    procedure setCHERIF;
    procedure setCHSDIE;
    procedure setCHSDIF;
    procedure setCHSHIE;
    procedure setCHSHIF;
    procedure setCHTAIE;
    procedure setCHTAIF;
    property CHBCIE : TBits_1 read getCHBCIE write setCHBCIE;
    property CHBCIF : TBits_1 read getCHBCIF write setCHBCIF;
    property CHCCIE : TBits_1 read getCHCCIE write setCHCCIE;
    property CHCCIF : TBits_1 read getCHCCIF write setCHCCIF;
    property CHDDIE : TBits_1 read getCHDDIE write setCHDDIE;
    property CHDDIF : TBits_1 read getCHDDIF write setCHDDIF;
    property CHDHIE : TBits_1 read getCHDHIE write setCHDHIE;
    property CHDHIF : TBits_1 read getCHDHIF write setCHDHIF;
    property CHERIE : TBits_1 read getCHERIE write setCHERIE;
    property CHERIF : TBits_1 read getCHERIF write setCHERIF;
    property CHSDIE : TBits_1 read getCHSDIE write setCHSDIE;
    property CHSDIF : TBits_1 read getCHSDIF write setCHSDIF;
    property CHSHIE : TBits_1 read getCHSHIE write setCHSHIE;
    property CHSHIF : TBits_1 read getCHSHIF write setCHSHIF;
    property CHTAIE : TBits_1 read getCHTAIE write setCHTAIE;
    property CHTAIF : TBits_1 read getCHTAIF write setCHTAIF;
    property w : TBits_32 read getw write setw;
  end;
type
  TDMAC4Registers = record
    DCH4CONbits : TDMAC4_DCH4CON;
    DCH4CON : longWord;
    DCH4CONCLR : longWord;
    DCH4CONSET : longWord;
    DCH4CONINV : longWord;
    DCH4ECONbits : TDMAC4_DCH4ECON;
    DCH4ECON : longWord;
    DCH4ECONCLR : longWord;
    DCH4ECONSET : longWord;
    DCH4ECONINV : longWord;
    DCH4INTbits : TDMAC4_DCH4INT;
    DCH4INT : longWord;
    DCH4INTCLR : longWord;
    DCH4INTSET : longWord;
    DCH4INTINV : longWord;
    DCH4SSA : longWord;
    DCH4SSACLR : longWord;
    DCH4SSASET : longWord;
    DCH4SSAINV : longWord;
    DCH4DSA : longWord;
    DCH4DSACLR : longWord;
    DCH4DSASET : longWord;
    DCH4DSAINV : longWord;
    DCH4SSIZ : longWord;
    DCH4SSIZCLR : longWord;
    DCH4SSIZSET : longWord;
    DCH4SSIZINV : longWord;
    DCH4DSIZ : longWord;
    DCH4DSIZCLR : longWord;
    DCH4DSIZSET : longWord;
    DCH4DSIZINV : longWord;
    DCH4SPTR : longWord;
    DCH4SPTRCLR : longWord;
    DCH4SPTRSET : longWord;
    DCH4SPTRINV : longWord;
    DCH4DPTR : longWord;
    DCH4DPTRCLR : longWord;
    DCH4DPTRSET : longWord;
    DCH4DPTRINV : longWord;
    DCH4CSIZ : longWord;
    DCH4CSIZCLR : longWord;
    DCH4CSIZSET : longWord;
    DCH4CSIZINV : longWord;
    DCH4CPTR : longWord;
    DCH4CPTRCLR : longWord;
    DCH4CPTRSET : longWord;
    DCH4CPTRINV : longWord;
    DCH4DAT : longWord;
    DCH4DATCLR : longWord;
    DCH4DATSET : longWord;
    DCH4DATINV : longWord;
  end;
  TDMAC5_DCH5CON = record
  private
    function  getCHAED : TBits_1; assembler; nostackframe; inline;
    function  getCHAEN : TBits_1; assembler; nostackframe; inline;
    function  getCHBUSY : TBits_1; assembler; nostackframe; inline;
    function  getCHCHN : TBits_1; assembler; nostackframe; inline;
    function  getCHCHNS : TBits_1; assembler; nostackframe; inline;
    function  getCHEDET : TBits_1; assembler; nostackframe; inline;
    function  getCHEN : TBits_1; assembler; nostackframe; inline;
    function  getCHPRI : TBits_2; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setCHAED(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCHAEN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCHBUSY(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCHCHN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCHCHNS(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCHEDET(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCHEN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCHPRI(thebits : TBits_2); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearCHAED;
    procedure clearCHAEN;
    procedure clearCHBUSY;
    procedure clearCHCHN;
    procedure clearCHCHNS;
    procedure clearCHEDET;
    procedure clearCHEN;
    procedure setCHAED;
    procedure setCHAEN;
    procedure setCHBUSY;
    procedure setCHCHN;
    procedure setCHCHNS;
    procedure setCHEDET;
    procedure setCHEN;
    property CHAED : TBits_1 read getCHAED write setCHAED;
    property CHAEN : TBits_1 read getCHAEN write setCHAEN;
    property CHBUSY : TBits_1 read getCHBUSY write setCHBUSY;
    property CHCHN : TBits_1 read getCHCHN write setCHCHN;
    property CHCHNS : TBits_1 read getCHCHNS write setCHCHNS;
    property CHEDET : TBits_1 read getCHEDET write setCHEDET;
    property CHEN : TBits_1 read getCHEN write setCHEN;
    property CHPRI : TBits_2 read getCHPRI write setCHPRI;
    property w : TBits_32 read getw write setw;
  end;
  TDMAC5_DCH5ECON = record
  private
    function  getAIRQEN : TBits_1; assembler; nostackframe; inline;
    function  getCABORT : TBits_1; assembler; nostackframe; inline;
    function  getCFORCE : TBits_1; assembler; nostackframe; inline;
    function  getCHAIRQ : TBits_8; assembler; nostackframe; inline;
    function  getCHSIRQ : TBits_8; assembler; nostackframe; inline;
    function  getPATEN : TBits_1; assembler; nostackframe; inline;
    function  getSIRQEN : TBits_1; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setAIRQEN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCABORT(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCFORCE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCHAIRQ(thebits : TBits_8); assembler; nostackframe; inline;
    procedure setCHSIRQ(thebits : TBits_8); assembler; nostackframe; inline;
    procedure setPATEN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSIRQEN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearAIRQEN;
    procedure clearCABORT;
    procedure clearCFORCE;
    procedure clearPATEN;
    procedure clearSIRQEN;
    procedure setAIRQEN;
    procedure setCABORT;
    procedure setCFORCE;
    procedure setPATEN;
    procedure setSIRQEN;
    property AIRQEN : TBits_1 read getAIRQEN write setAIRQEN;
    property CABORT : TBits_1 read getCABORT write setCABORT;
    property CFORCE : TBits_1 read getCFORCE write setCFORCE;
    property CHAIRQ : TBits_8 read getCHAIRQ write setCHAIRQ;
    property CHSIRQ : TBits_8 read getCHSIRQ write setCHSIRQ;
    property PATEN : TBits_1 read getPATEN write setPATEN;
    property SIRQEN : TBits_1 read getSIRQEN write setSIRQEN;
    property w : TBits_32 read getw write setw;
  end;
  TDMAC5_DCH5INT = record
  private
    function  getCHBCIE : TBits_1; assembler; nostackframe; inline;
    function  getCHBCIF : TBits_1; assembler; nostackframe; inline;
    function  getCHCCIE : TBits_1; assembler; nostackframe; inline;
    function  getCHCCIF : TBits_1; assembler; nostackframe; inline;
    function  getCHDDIE : TBits_1; assembler; nostackframe; inline;
    function  getCHDDIF : TBits_1; assembler; nostackframe; inline;
    function  getCHDHIE : TBits_1; assembler; nostackframe; inline;
    function  getCHDHIF : TBits_1; assembler; nostackframe; inline;
    function  getCHERIE : TBits_1; assembler; nostackframe; inline;
    function  getCHERIF : TBits_1; assembler; nostackframe; inline;
    function  getCHSDIE : TBits_1; assembler; nostackframe; inline;
    function  getCHSDIF : TBits_1; assembler; nostackframe; inline;
    function  getCHSHIE : TBits_1; assembler; nostackframe; inline;
    function  getCHSHIF : TBits_1; assembler; nostackframe; inline;
    function  getCHTAIE : TBits_1; assembler; nostackframe; inline;
    function  getCHTAIF : TBits_1; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setCHBCIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCHBCIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCHCCIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCHCCIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCHDDIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCHDDIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCHDHIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCHDHIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCHERIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCHERIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCHSDIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCHSDIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCHSHIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCHSHIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCHTAIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCHTAIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearCHBCIE;
    procedure clearCHBCIF;
    procedure clearCHCCIE;
    procedure clearCHCCIF;
    procedure clearCHDDIE;
    procedure clearCHDDIF;
    procedure clearCHDHIE;
    procedure clearCHDHIF;
    procedure clearCHERIE;
    procedure clearCHERIF;
    procedure clearCHSDIE;
    procedure clearCHSDIF;
    procedure clearCHSHIE;
    procedure clearCHSHIF;
    procedure clearCHTAIE;
    procedure clearCHTAIF;
    procedure setCHBCIE;
    procedure setCHBCIF;
    procedure setCHCCIE;
    procedure setCHCCIF;
    procedure setCHDDIE;
    procedure setCHDDIF;
    procedure setCHDHIE;
    procedure setCHDHIF;
    procedure setCHERIE;
    procedure setCHERIF;
    procedure setCHSDIE;
    procedure setCHSDIF;
    procedure setCHSHIE;
    procedure setCHSHIF;
    procedure setCHTAIE;
    procedure setCHTAIF;
    property CHBCIE : TBits_1 read getCHBCIE write setCHBCIE;
    property CHBCIF : TBits_1 read getCHBCIF write setCHBCIF;
    property CHCCIE : TBits_1 read getCHCCIE write setCHCCIE;
    property CHCCIF : TBits_1 read getCHCCIF write setCHCCIF;
    property CHDDIE : TBits_1 read getCHDDIE write setCHDDIE;
    property CHDDIF : TBits_1 read getCHDDIF write setCHDDIF;
    property CHDHIE : TBits_1 read getCHDHIE write setCHDHIE;
    property CHDHIF : TBits_1 read getCHDHIF write setCHDHIF;
    property CHERIE : TBits_1 read getCHERIE write setCHERIE;
    property CHERIF : TBits_1 read getCHERIF write setCHERIF;
    property CHSDIE : TBits_1 read getCHSDIE write setCHSDIE;
    property CHSDIF : TBits_1 read getCHSDIF write setCHSDIF;
    property CHSHIE : TBits_1 read getCHSHIE write setCHSHIE;
    property CHSHIF : TBits_1 read getCHSHIF write setCHSHIF;
    property CHTAIE : TBits_1 read getCHTAIE write setCHTAIE;
    property CHTAIF : TBits_1 read getCHTAIF write setCHTAIF;
    property w : TBits_32 read getw write setw;
  end;
type
  TDMAC5Registers = record
    DCH5CONbits : TDMAC5_DCH5CON;
    DCH5CON : longWord;
    DCH5CONCLR : longWord;
    DCH5CONSET : longWord;
    DCH5CONINV : longWord;
    DCH5ECONbits : TDMAC5_DCH5ECON;
    DCH5ECON : longWord;
    DCH5ECONCLR : longWord;
    DCH5ECONSET : longWord;
    DCH5ECONINV : longWord;
    DCH5INTbits : TDMAC5_DCH5INT;
    DCH5INT : longWord;
    DCH5INTCLR : longWord;
    DCH5INTSET : longWord;
    DCH5INTINV : longWord;
    DCH5SSA : longWord;
    DCH5SSACLR : longWord;
    DCH5SSASET : longWord;
    DCH5SSAINV : longWord;
    DCH5DSA : longWord;
    DCH5DSACLR : longWord;
    DCH5DSASET : longWord;
    DCH5DSAINV : longWord;
    DCH5SSIZ : longWord;
    DCH5SSIZCLR : longWord;
    DCH5SSIZSET : longWord;
    DCH5SSIZINV : longWord;
    DCH5DSIZ : longWord;
    DCH5DSIZCLR : longWord;
    DCH5DSIZSET : longWord;
    DCH5DSIZINV : longWord;
    DCH5SPTR : longWord;
    DCH5SPTRCLR : longWord;
    DCH5SPTRSET : longWord;
    DCH5SPTRINV : longWord;
    DCH5DPTR : longWord;
    DCH5DPTRCLR : longWord;
    DCH5DPTRSET : longWord;
    DCH5DPTRINV : longWord;
    DCH5CSIZ : longWord;
    DCH5CSIZCLR : longWord;
    DCH5CSIZSET : longWord;
    DCH5CSIZINV : longWord;
    DCH5CPTR : longWord;
    DCH5CPTRCLR : longWord;
    DCH5CPTRSET : longWord;
    DCH5CPTRINV : longWord;
    DCH5DAT : longWord;
    DCH5DATCLR : longWord;
    DCH5DATSET : longWord;
    DCH5DATINV : longWord;
  end;
  TDMAC6_DCH6CON = record
  private
    function  getCHAED : TBits_1; assembler; nostackframe; inline;
    function  getCHAEN : TBits_1; assembler; nostackframe; inline;
    function  getCHBUSY : TBits_1; assembler; nostackframe; inline;
    function  getCHCHN : TBits_1; assembler; nostackframe; inline;
    function  getCHCHNS : TBits_1; assembler; nostackframe; inline;
    function  getCHEDET : TBits_1; assembler; nostackframe; inline;
    function  getCHEN : TBits_1; assembler; nostackframe; inline;
    function  getCHPRI : TBits_2; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setCHAED(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCHAEN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCHBUSY(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCHCHN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCHCHNS(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCHEDET(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCHEN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCHPRI(thebits : TBits_2); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearCHAED;
    procedure clearCHAEN;
    procedure clearCHBUSY;
    procedure clearCHCHN;
    procedure clearCHCHNS;
    procedure clearCHEDET;
    procedure clearCHEN;
    procedure setCHAED;
    procedure setCHAEN;
    procedure setCHBUSY;
    procedure setCHCHN;
    procedure setCHCHNS;
    procedure setCHEDET;
    procedure setCHEN;
    property CHAED : TBits_1 read getCHAED write setCHAED;
    property CHAEN : TBits_1 read getCHAEN write setCHAEN;
    property CHBUSY : TBits_1 read getCHBUSY write setCHBUSY;
    property CHCHN : TBits_1 read getCHCHN write setCHCHN;
    property CHCHNS : TBits_1 read getCHCHNS write setCHCHNS;
    property CHEDET : TBits_1 read getCHEDET write setCHEDET;
    property CHEN : TBits_1 read getCHEN write setCHEN;
    property CHPRI : TBits_2 read getCHPRI write setCHPRI;
    property w : TBits_32 read getw write setw;
  end;
  TDMAC6_DCH6ECON = record
  private
    function  getAIRQEN : TBits_1; assembler; nostackframe; inline;
    function  getCABORT : TBits_1; assembler; nostackframe; inline;
    function  getCFORCE : TBits_1; assembler; nostackframe; inline;
    function  getCHAIRQ : TBits_8; assembler; nostackframe; inline;
    function  getCHSIRQ : TBits_8; assembler; nostackframe; inline;
    function  getPATEN : TBits_1; assembler; nostackframe; inline;
    function  getSIRQEN : TBits_1; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setAIRQEN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCABORT(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCFORCE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCHAIRQ(thebits : TBits_8); assembler; nostackframe; inline;
    procedure setCHSIRQ(thebits : TBits_8); assembler; nostackframe; inline;
    procedure setPATEN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSIRQEN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearAIRQEN;
    procedure clearCABORT;
    procedure clearCFORCE;
    procedure clearPATEN;
    procedure clearSIRQEN;
    procedure setAIRQEN;
    procedure setCABORT;
    procedure setCFORCE;
    procedure setPATEN;
    procedure setSIRQEN;
    property AIRQEN : TBits_1 read getAIRQEN write setAIRQEN;
    property CABORT : TBits_1 read getCABORT write setCABORT;
    property CFORCE : TBits_1 read getCFORCE write setCFORCE;
    property CHAIRQ : TBits_8 read getCHAIRQ write setCHAIRQ;
    property CHSIRQ : TBits_8 read getCHSIRQ write setCHSIRQ;
    property PATEN : TBits_1 read getPATEN write setPATEN;
    property SIRQEN : TBits_1 read getSIRQEN write setSIRQEN;
    property w : TBits_32 read getw write setw;
  end;
  TDMAC6_DCH6INT = record
  private
    function  getCHBCIE : TBits_1; assembler; nostackframe; inline;
    function  getCHBCIF : TBits_1; assembler; nostackframe; inline;
    function  getCHCCIE : TBits_1; assembler; nostackframe; inline;
    function  getCHCCIF : TBits_1; assembler; nostackframe; inline;
    function  getCHDDIE : TBits_1; assembler; nostackframe; inline;
    function  getCHDDIF : TBits_1; assembler; nostackframe; inline;
    function  getCHDHIE : TBits_1; assembler; nostackframe; inline;
    function  getCHDHIF : TBits_1; assembler; nostackframe; inline;
    function  getCHERIE : TBits_1; assembler; nostackframe; inline;
    function  getCHERIF : TBits_1; assembler; nostackframe; inline;
    function  getCHSDIE : TBits_1; assembler; nostackframe; inline;
    function  getCHSDIF : TBits_1; assembler; nostackframe; inline;
    function  getCHSHIE : TBits_1; assembler; nostackframe; inline;
    function  getCHSHIF : TBits_1; assembler; nostackframe; inline;
    function  getCHTAIE : TBits_1; assembler; nostackframe; inline;
    function  getCHTAIF : TBits_1; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setCHBCIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCHBCIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCHCCIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCHCCIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCHDDIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCHDDIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCHDHIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCHDHIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCHERIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCHERIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCHSDIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCHSDIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCHSHIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCHSHIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCHTAIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCHTAIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearCHBCIE;
    procedure clearCHBCIF;
    procedure clearCHCCIE;
    procedure clearCHCCIF;
    procedure clearCHDDIE;
    procedure clearCHDDIF;
    procedure clearCHDHIE;
    procedure clearCHDHIF;
    procedure clearCHERIE;
    procedure clearCHERIF;
    procedure clearCHSDIE;
    procedure clearCHSDIF;
    procedure clearCHSHIE;
    procedure clearCHSHIF;
    procedure clearCHTAIE;
    procedure clearCHTAIF;
    procedure setCHBCIE;
    procedure setCHBCIF;
    procedure setCHCCIE;
    procedure setCHCCIF;
    procedure setCHDDIE;
    procedure setCHDDIF;
    procedure setCHDHIE;
    procedure setCHDHIF;
    procedure setCHERIE;
    procedure setCHERIF;
    procedure setCHSDIE;
    procedure setCHSDIF;
    procedure setCHSHIE;
    procedure setCHSHIF;
    procedure setCHTAIE;
    procedure setCHTAIF;
    property CHBCIE : TBits_1 read getCHBCIE write setCHBCIE;
    property CHBCIF : TBits_1 read getCHBCIF write setCHBCIF;
    property CHCCIE : TBits_1 read getCHCCIE write setCHCCIE;
    property CHCCIF : TBits_1 read getCHCCIF write setCHCCIF;
    property CHDDIE : TBits_1 read getCHDDIE write setCHDDIE;
    property CHDDIF : TBits_1 read getCHDDIF write setCHDDIF;
    property CHDHIE : TBits_1 read getCHDHIE write setCHDHIE;
    property CHDHIF : TBits_1 read getCHDHIF write setCHDHIF;
    property CHERIE : TBits_1 read getCHERIE write setCHERIE;
    property CHERIF : TBits_1 read getCHERIF write setCHERIF;
    property CHSDIE : TBits_1 read getCHSDIE write setCHSDIE;
    property CHSDIF : TBits_1 read getCHSDIF write setCHSDIF;
    property CHSHIE : TBits_1 read getCHSHIE write setCHSHIE;
    property CHSHIF : TBits_1 read getCHSHIF write setCHSHIF;
    property CHTAIE : TBits_1 read getCHTAIE write setCHTAIE;
    property CHTAIF : TBits_1 read getCHTAIF write setCHTAIF;
    property w : TBits_32 read getw write setw;
  end;
type
  TDMAC6Registers = record
    DCH6CONbits : TDMAC6_DCH6CON;
    DCH6CON : longWord;
    DCH6CONCLR : longWord;
    DCH6CONSET : longWord;
    DCH6CONINV : longWord;
    DCH6ECONbits : TDMAC6_DCH6ECON;
    DCH6ECON : longWord;
    DCH6ECONCLR : longWord;
    DCH6ECONSET : longWord;
    DCH6ECONINV : longWord;
    DCH6INTbits : TDMAC6_DCH6INT;
    DCH6INT : longWord;
    DCH6INTCLR : longWord;
    DCH6INTSET : longWord;
    DCH6INTINV : longWord;
    DCH6SSA : longWord;
    DCH6SSACLR : longWord;
    DCH6SSASET : longWord;
    DCH6SSAINV : longWord;
    DCH6DSA : longWord;
    DCH6DSACLR : longWord;
    DCH6DSASET : longWord;
    DCH6DSAINV : longWord;
    DCH6SSIZ : longWord;
    DCH6SSIZCLR : longWord;
    DCH6SSIZSET : longWord;
    DCH6SSIZINV : longWord;
    DCH6DSIZ : longWord;
    DCH6DSIZCLR : longWord;
    DCH6DSIZSET : longWord;
    DCH6DSIZINV : longWord;
    DCH6SPTR : longWord;
    DCH6SPTRCLR : longWord;
    DCH6SPTRSET : longWord;
    DCH6SPTRINV : longWord;
    DCH6DPTR : longWord;
    DCH6DPTRCLR : longWord;
    DCH6DPTRSET : longWord;
    DCH6DPTRINV : longWord;
    DCH6CSIZ : longWord;
    DCH6CSIZCLR : longWord;
    DCH6CSIZSET : longWord;
    DCH6CSIZINV : longWord;
    DCH6CPTR : longWord;
    DCH6CPTRCLR : longWord;
    DCH6CPTRSET : longWord;
    DCH6CPTRINV : longWord;
    DCH6DAT : longWord;
    DCH6DATCLR : longWord;
    DCH6DATSET : longWord;
    DCH6DATINV : longWord;
  end;
  TDMAC7_DCH7CON = record
  private
    function  getCHAED : TBits_1; assembler; nostackframe; inline;
    function  getCHAEN : TBits_1; assembler; nostackframe; inline;
    function  getCHBUSY : TBits_1; assembler; nostackframe; inline;
    function  getCHCHN : TBits_1; assembler; nostackframe; inline;
    function  getCHCHNS : TBits_1; assembler; nostackframe; inline;
    function  getCHEDET : TBits_1; assembler; nostackframe; inline;
    function  getCHEN : TBits_1; assembler; nostackframe; inline;
    function  getCHPRI : TBits_2; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setCHAED(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCHAEN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCHBUSY(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCHCHN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCHCHNS(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCHEDET(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCHEN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCHPRI(thebits : TBits_2); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearCHAED;
    procedure clearCHAEN;
    procedure clearCHBUSY;
    procedure clearCHCHN;
    procedure clearCHCHNS;
    procedure clearCHEDET;
    procedure clearCHEN;
    procedure setCHAED;
    procedure setCHAEN;
    procedure setCHBUSY;
    procedure setCHCHN;
    procedure setCHCHNS;
    procedure setCHEDET;
    procedure setCHEN;
    property CHAED : TBits_1 read getCHAED write setCHAED;
    property CHAEN : TBits_1 read getCHAEN write setCHAEN;
    property CHBUSY : TBits_1 read getCHBUSY write setCHBUSY;
    property CHCHN : TBits_1 read getCHCHN write setCHCHN;
    property CHCHNS : TBits_1 read getCHCHNS write setCHCHNS;
    property CHEDET : TBits_1 read getCHEDET write setCHEDET;
    property CHEN : TBits_1 read getCHEN write setCHEN;
    property CHPRI : TBits_2 read getCHPRI write setCHPRI;
    property w : TBits_32 read getw write setw;
  end;
  TDMAC7_DCH7ECON = record
  private
    function  getAIRQEN : TBits_1; assembler; nostackframe; inline;
    function  getCABORT : TBits_1; assembler; nostackframe; inline;
    function  getCFORCE : TBits_1; assembler; nostackframe; inline;
    function  getCHAIRQ : TBits_8; assembler; nostackframe; inline;
    function  getCHSIRQ : TBits_8; assembler; nostackframe; inline;
    function  getPATEN : TBits_1; assembler; nostackframe; inline;
    function  getSIRQEN : TBits_1; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setAIRQEN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCABORT(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCFORCE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCHAIRQ(thebits : TBits_8); assembler; nostackframe; inline;
    procedure setCHSIRQ(thebits : TBits_8); assembler; nostackframe; inline;
    procedure setPATEN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSIRQEN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearAIRQEN;
    procedure clearCABORT;
    procedure clearCFORCE;
    procedure clearPATEN;
    procedure clearSIRQEN;
    procedure setAIRQEN;
    procedure setCABORT;
    procedure setCFORCE;
    procedure setPATEN;
    procedure setSIRQEN;
    property AIRQEN : TBits_1 read getAIRQEN write setAIRQEN;
    property CABORT : TBits_1 read getCABORT write setCABORT;
    property CFORCE : TBits_1 read getCFORCE write setCFORCE;
    property CHAIRQ : TBits_8 read getCHAIRQ write setCHAIRQ;
    property CHSIRQ : TBits_8 read getCHSIRQ write setCHSIRQ;
    property PATEN : TBits_1 read getPATEN write setPATEN;
    property SIRQEN : TBits_1 read getSIRQEN write setSIRQEN;
    property w : TBits_32 read getw write setw;
  end;
  TDMAC7_DCH7INT = record
  private
    function  getCHBCIE : TBits_1; assembler; nostackframe; inline;
    function  getCHBCIF : TBits_1; assembler; nostackframe; inline;
    function  getCHCCIE : TBits_1; assembler; nostackframe; inline;
    function  getCHCCIF : TBits_1; assembler; nostackframe; inline;
    function  getCHDDIE : TBits_1; assembler; nostackframe; inline;
    function  getCHDDIF : TBits_1; assembler; nostackframe; inline;
    function  getCHDHIE : TBits_1; assembler; nostackframe; inline;
    function  getCHDHIF : TBits_1; assembler; nostackframe; inline;
    function  getCHERIE : TBits_1; assembler; nostackframe; inline;
    function  getCHERIF : TBits_1; assembler; nostackframe; inline;
    function  getCHSDIE : TBits_1; assembler; nostackframe; inline;
    function  getCHSDIF : TBits_1; assembler; nostackframe; inline;
    function  getCHSHIE : TBits_1; assembler; nostackframe; inline;
    function  getCHSHIF : TBits_1; assembler; nostackframe; inline;
    function  getCHTAIE : TBits_1; assembler; nostackframe; inline;
    function  getCHTAIF : TBits_1; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setCHBCIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCHBCIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCHCCIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCHCCIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCHDDIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCHDDIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCHDHIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCHDHIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCHERIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCHERIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCHSDIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCHSDIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCHSHIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCHSHIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCHTAIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCHTAIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearCHBCIE;
    procedure clearCHBCIF;
    procedure clearCHCCIE;
    procedure clearCHCCIF;
    procedure clearCHDDIE;
    procedure clearCHDDIF;
    procedure clearCHDHIE;
    procedure clearCHDHIF;
    procedure clearCHERIE;
    procedure clearCHERIF;
    procedure clearCHSDIE;
    procedure clearCHSDIF;
    procedure clearCHSHIE;
    procedure clearCHSHIF;
    procedure clearCHTAIE;
    procedure clearCHTAIF;
    procedure setCHBCIE;
    procedure setCHBCIF;
    procedure setCHCCIE;
    procedure setCHCCIF;
    procedure setCHDDIE;
    procedure setCHDDIF;
    procedure setCHDHIE;
    procedure setCHDHIF;
    procedure setCHERIE;
    procedure setCHERIF;
    procedure setCHSDIE;
    procedure setCHSDIF;
    procedure setCHSHIE;
    procedure setCHSHIF;
    procedure setCHTAIE;
    procedure setCHTAIF;
    property CHBCIE : TBits_1 read getCHBCIE write setCHBCIE;
    property CHBCIF : TBits_1 read getCHBCIF write setCHBCIF;
    property CHCCIE : TBits_1 read getCHCCIE write setCHCCIE;
    property CHCCIF : TBits_1 read getCHCCIF write setCHCCIF;
    property CHDDIE : TBits_1 read getCHDDIE write setCHDDIE;
    property CHDDIF : TBits_1 read getCHDDIF write setCHDDIF;
    property CHDHIE : TBits_1 read getCHDHIE write setCHDHIE;
    property CHDHIF : TBits_1 read getCHDHIF write setCHDHIF;
    property CHERIE : TBits_1 read getCHERIE write setCHERIE;
    property CHERIF : TBits_1 read getCHERIF write setCHERIF;
    property CHSDIE : TBits_1 read getCHSDIE write setCHSDIE;
    property CHSDIF : TBits_1 read getCHSDIF write setCHSDIF;
    property CHSHIE : TBits_1 read getCHSHIE write setCHSHIE;
    property CHSHIF : TBits_1 read getCHSHIF write setCHSHIF;
    property CHTAIE : TBits_1 read getCHTAIE write setCHTAIE;
    property CHTAIF : TBits_1 read getCHTAIF write setCHTAIF;
    property w : TBits_32 read getw write setw;
  end;
type
  TDMAC7Registers = record
    DCH7CONbits : TDMAC7_DCH7CON;
    DCH7CON : longWord;
    DCH7CONCLR : longWord;
    DCH7CONSET : longWord;
    DCH7CONINV : longWord;
    DCH7ECONbits : TDMAC7_DCH7ECON;
    DCH7ECON : longWord;
    DCH7ECONCLR : longWord;
    DCH7ECONSET : longWord;
    DCH7ECONINV : longWord;
    DCH7INTbits : TDMAC7_DCH7INT;
    DCH7INT : longWord;
    DCH7INTCLR : longWord;
    DCH7INTSET : longWord;
    DCH7INTINV : longWord;
    DCH7SSA : longWord;
    DCH7SSACLR : longWord;
    DCH7SSASET : longWord;
    DCH7SSAINV : longWord;
    DCH7DSA : longWord;
    DCH7DSACLR : longWord;
    DCH7DSASET : longWord;
    DCH7DSAINV : longWord;
    DCH7SSIZ : longWord;
    DCH7SSIZCLR : longWord;
    DCH7SSIZSET : longWord;
    DCH7SSIZINV : longWord;
    DCH7DSIZ : longWord;
    DCH7DSIZCLR : longWord;
    DCH7DSIZSET : longWord;
    DCH7DSIZINV : longWord;
    DCH7SPTR : longWord;
    DCH7SPTRCLR : longWord;
    DCH7SPTRSET : longWord;
    DCH7SPTRINV : longWord;
    DCH7DPTR : longWord;
    DCH7DPTRCLR : longWord;
    DCH7DPTRSET : longWord;
    DCH7DPTRINV : longWord;
    DCH7CSIZ : longWord;
    DCH7CSIZCLR : longWord;
    DCH7CSIZSET : longWord;
    DCH7CSIZINV : longWord;
    DCH7CPTR : longWord;
    DCH7CPTRCLR : longWord;
    DCH7CPTRSET : longWord;
    DCH7CPTRINV : longWord;
    DCH7DAT : longWord;
    DCH7DATCLR : longWord;
    DCH7DATSET : longWord;
    DCH7DATINV : longWord;
  end;
  TPCACHE_CHECON = record
  private
    function  getCHECOH : TBits_1; assembler; nostackframe; inline;
    function  getDCSZ : TBits_2; assembler; nostackframe; inline;
    function  getPFMWS : TBits_3; assembler; nostackframe; inline;
    function  getPREFEN : TBits_2; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setCHECOH(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setDCSZ(thebits : TBits_2); assembler; nostackframe; inline;
    procedure setPFMWS(thebits : TBits_3); assembler; nostackframe; inline;
    procedure setPREFEN(thebits : TBits_2); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearCHECOH;
    procedure setCHECOH;
    property CHECOH : TBits_1 read getCHECOH write setCHECOH;
    property DCSZ : TBits_2 read getDCSZ write setDCSZ;
    property PFMWS : TBits_3 read getPFMWS write setPFMWS;
    property PREFEN : TBits_2 read getPREFEN write setPREFEN;
    property w : TBits_32 read getw write setw;
  end;
  TPCACHE_CHETAG = record
  private
    function  getLLOCK : TBits_1; assembler; nostackframe; inline;
    function  getLTAG : TBits_20; assembler; nostackframe; inline;
    function  getLTAGBOOT : TBits_1; assembler; nostackframe; inline;
    function  getLTYPE : TBits_1; assembler; nostackframe; inline;
    function  getLVALID : TBits_1; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setLLOCK(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setLTAG(thebits : TBits_20); assembler; nostackframe; inline;
    procedure setLTAGBOOT(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setLTYPE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setLVALID(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearLLOCK;
    procedure clearLTAGBOOT;
    procedure clearLTYPE;
    procedure clearLVALID;
    procedure setLLOCK;
    procedure setLTAGBOOT;
    procedure setLTYPE;
    procedure setLVALID;
    property LLOCK : TBits_1 read getLLOCK write setLLOCK;
    property LTAG : TBits_20 read getLTAG write setLTAG;
    property LTAGBOOT : TBits_1 read getLTAGBOOT write setLTAGBOOT;
    property LTYPE : TBits_1 read getLTYPE write setLTYPE;
    property LVALID : TBits_1 read getLVALID write setLVALID;
    property w : TBits_32 read getw write setw;
  end;
type
  TPCACHERegisters = record
    CHECONbits : TPCACHE_CHECON;
    CHECON : longWord;
    CHECONCLR : longWord;
    CHECONSET : longWord;
    CHECONINV : longWord;
    CHEACC : longWord;
    CHEACCCLR : longWord;
    CHEACCSET : longWord;
    CHEACCINV : longWord;
    CHETAGbits : TPCACHE_CHETAG;
    CHETAG : longWord;
    CHETAGCLR : longWord;
    CHETAGSET : longWord;
    CHETAGINV : longWord;
    CHEMSK : longWord;
    CHEMSKCLR : longWord;
    CHEMSKSET : longWord;
    CHEMSKINV : longWord;
    CHEW0 : longWord;
    CHEW1 : longWord;
    CHEW2 : longWord;
    CHEW3 : longWord;
    CHELRU : longWord;
    CHEHIT : longWord;
    CHEMIS : longWord;
    CHEPFABT : longWord;
  end;
  TUSB_U1IR = record
  private
    function  getATTACHIF : TBits_1; assembler; nostackframe; inline;
    function  getDETACHIF : TBits_1; assembler; nostackframe; inline;
    function  getIDLEIF : TBits_1; assembler; nostackframe; inline;
    function  getRESUMEIF : TBits_1; assembler; nostackframe; inline;
    function  getSOFIF : TBits_1; assembler; nostackframe; inline;
    function  getSTALLIF : TBits_1; assembler; nostackframe; inline;
    function  getTRNIF : TBits_1; assembler; nostackframe; inline;
    function  getUERRIF : TBits_1; assembler; nostackframe; inline;
    function  getURSTIF : TBits_1; assembler; nostackframe; inline;
    function  getURSTIF_DETACHIF : TBits_1; assembler; nostackframe; inline;
    procedure setATTACHIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setDETACHIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setIDLEIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRESUMEIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSOFIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSTALLIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTRNIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setUERRIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setURSTIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setURSTIF_DETACHIF(thebits : TBits_1); assembler; nostackframe; inline;
  public
    procedure clearATTACHIF;
    procedure clearDETACHIF;
    procedure clearIDLEIF;
    procedure clearRESUMEIF;
    procedure clearSOFIF;
    procedure clearSTALLIF;
    procedure clearTRNIF;
    procedure clearUERRIF;
    procedure clearURSTIF;
    procedure clearURSTIF_DETACHIF;
    procedure setATTACHIF;
    procedure setDETACHIF;
    procedure setIDLEIF;
    procedure setRESUMEIF;
    procedure setSOFIF;
    procedure setSTALLIF;
    procedure setTRNIF;
    procedure setUERRIF;
    procedure setURSTIF;
    procedure setURSTIF_DETACHIF;
    property ATTACHIF : TBits_1 read getATTACHIF write setATTACHIF;
    property DETACHIF : TBits_1 read getDETACHIF write setDETACHIF;
    property IDLEIF : TBits_1 read getIDLEIF write setIDLEIF;
    property RESUMEIF : TBits_1 read getRESUMEIF write setRESUMEIF;
    property SOFIF : TBits_1 read getSOFIF write setSOFIF;
    property STALLIF : TBits_1 read getSTALLIF write setSTALLIF;
    property TRNIF : TBits_1 read getTRNIF write setTRNIF;
    property UERRIF : TBits_1 read getUERRIF write setUERRIF;
    property URSTIF : TBits_1 read getURSTIF write setURSTIF;
    property URSTIF_DETACHIF : TBits_1 read getURSTIF_DETACHIF write setURSTIF_DETACHIF;
  end;
  TUSB_U1IE = record
  private
    function  getATTACHIE : TBits_1; assembler; nostackframe; inline;
    function  getDETACHIE : TBits_1; assembler; nostackframe; inline;
    function  getIDLEIE : TBits_1; assembler; nostackframe; inline;
    function  getRESUMEIE : TBits_1; assembler; nostackframe; inline;
    function  getSOFIE : TBits_1; assembler; nostackframe; inline;
    function  getSTALLIE : TBits_1; assembler; nostackframe; inline;
    function  getTRNIE : TBits_1; assembler; nostackframe; inline;
    function  getUERRIE : TBits_1; assembler; nostackframe; inline;
    function  getURSTIE : TBits_1; assembler; nostackframe; inline;
    function  getURSTIE_DETACHIE : TBits_1; assembler; nostackframe; inline;
    procedure setATTACHIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setDETACHIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setIDLEIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRESUMEIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSOFIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSTALLIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTRNIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setUERRIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setURSTIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setURSTIE_DETACHIE(thebits : TBits_1); assembler; nostackframe; inline;
  public
    procedure clearATTACHIE;
    procedure clearDETACHIE;
    procedure clearIDLEIE;
    procedure clearRESUMEIE;
    procedure clearSOFIE;
    procedure clearSTALLIE;
    procedure clearTRNIE;
    procedure clearUERRIE;
    procedure clearURSTIE;
    procedure clearURSTIE_DETACHIE;
    procedure setATTACHIE;
    procedure setDETACHIE;
    procedure setIDLEIE;
    procedure setRESUMEIE;
    procedure setSOFIE;
    procedure setSTALLIE;
    procedure setTRNIE;
    procedure setUERRIE;
    procedure setURSTIE;
    procedure setURSTIE_DETACHIE;
    property ATTACHIE : TBits_1 read getATTACHIE write setATTACHIE;
    property DETACHIE : TBits_1 read getDETACHIE write setDETACHIE;
    property IDLEIE : TBits_1 read getIDLEIE write setIDLEIE;
    property RESUMEIE : TBits_1 read getRESUMEIE write setRESUMEIE;
    property SOFIE : TBits_1 read getSOFIE write setSOFIE;
    property STALLIE : TBits_1 read getSTALLIE write setSTALLIE;
    property TRNIE : TBits_1 read getTRNIE write setTRNIE;
    property UERRIE : TBits_1 read getUERRIE write setUERRIE;
    property URSTIE : TBits_1 read getURSTIE write setURSTIE;
    property URSTIE_DETACHIE : TBits_1 read getURSTIE_DETACHIE write setURSTIE_DETACHIE;
  end;
  TUSB_U1EIR = record
  private
    function  getBMXEF : TBits_1; assembler; nostackframe; inline;
    function  getBTOEF : TBits_1; assembler; nostackframe; inline;
    function  getBTSEF : TBits_1; assembler; nostackframe; inline;
    function  getCRC16EF : TBits_1; assembler; nostackframe; inline;
    function  getCRC5EF : TBits_1; assembler; nostackframe; inline;
    function  getCRC5EF_EOFEF : TBits_1; assembler; nostackframe; inline;
    function  getDFN8EF : TBits_1; assembler; nostackframe; inline;
    function  getDMAEF : TBits_1; assembler; nostackframe; inline;
    function  getEOFEF : TBits_1; assembler; nostackframe; inline;
    function  getPIDEF : TBits_1; assembler; nostackframe; inline;
    procedure setBMXEF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setBTOEF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setBTSEF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCRC16EF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCRC5EF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCRC5EF_EOFEF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setDFN8EF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setDMAEF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setEOFEF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setPIDEF(thebits : TBits_1); assembler; nostackframe; inline;
  public
    procedure clearBMXEF;
    procedure clearBTOEF;
    procedure clearBTSEF;
    procedure clearCRC16EF;
    procedure clearCRC5EF;
    procedure clearCRC5EF_EOFEF;
    procedure clearDFN8EF;
    procedure clearDMAEF;
    procedure clearEOFEF;
    procedure clearPIDEF;
    procedure setBMXEF;
    procedure setBTOEF;
    procedure setBTSEF;
    procedure setCRC16EF;
    procedure setCRC5EF;
    procedure setCRC5EF_EOFEF;
    procedure setDFN8EF;
    procedure setDMAEF;
    procedure setEOFEF;
    procedure setPIDEF;
    property BMXEF : TBits_1 read getBMXEF write setBMXEF;
    property BTOEF : TBits_1 read getBTOEF write setBTOEF;
    property BTSEF : TBits_1 read getBTSEF write setBTSEF;
    property CRC16EF : TBits_1 read getCRC16EF write setCRC16EF;
    property CRC5EF : TBits_1 read getCRC5EF write setCRC5EF;
    property CRC5EF_EOFEF : TBits_1 read getCRC5EF_EOFEF write setCRC5EF_EOFEF;
    property DFN8EF : TBits_1 read getDFN8EF write setDFN8EF;
    property DMAEF : TBits_1 read getDMAEF write setDMAEF;
    property EOFEF : TBits_1 read getEOFEF write setEOFEF;
    property PIDEF : TBits_1 read getPIDEF write setPIDEF;
  end;
  TUSB_U1EIE = record
  private
    function  getBMXEE : TBits_1; assembler; nostackframe; inline;
    function  getBTOEE : TBits_1; assembler; nostackframe; inline;
    function  getBTSEE : TBits_1; assembler; nostackframe; inline;
    function  getCRC16EE : TBits_1; assembler; nostackframe; inline;
    function  getCRC5EE : TBits_1; assembler; nostackframe; inline;
    function  getCRC5EE_EOFEE : TBits_1; assembler; nostackframe; inline;
    function  getDFN8EE : TBits_1; assembler; nostackframe; inline;
    function  getDMAEE : TBits_1; assembler; nostackframe; inline;
    function  getEOFEE : TBits_1; assembler; nostackframe; inline;
    function  getPIDEE : TBits_1; assembler; nostackframe; inline;
    procedure setBMXEE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setBTOEE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setBTSEE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCRC16EE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCRC5EE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCRC5EE_EOFEE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setDFN8EE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setDMAEE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setEOFEE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setPIDEE(thebits : TBits_1); assembler; nostackframe; inline;
  public
    procedure clearBMXEE;
    procedure clearBTOEE;
    procedure clearBTSEE;
    procedure clearCRC16EE;
    procedure clearCRC5EE;
    procedure clearCRC5EE_EOFEE;
    procedure clearDFN8EE;
    procedure clearDMAEE;
    procedure clearEOFEE;
    procedure clearPIDEE;
    procedure setBMXEE;
    procedure setBTOEE;
    procedure setBTSEE;
    procedure setCRC16EE;
    procedure setCRC5EE;
    procedure setCRC5EE_EOFEE;
    procedure setDFN8EE;
    procedure setDMAEE;
    procedure setEOFEE;
    procedure setPIDEE;
    property BMXEE : TBits_1 read getBMXEE write setBMXEE;
    property BTOEE : TBits_1 read getBTOEE write setBTOEE;
    property BTSEE : TBits_1 read getBTSEE write setBTSEE;
    property CRC16EE : TBits_1 read getCRC16EE write setCRC16EE;
    property CRC5EE : TBits_1 read getCRC5EE write setCRC5EE;
    property CRC5EE_EOFEE : TBits_1 read getCRC5EE_EOFEE write setCRC5EE_EOFEE;
    property DFN8EE : TBits_1 read getDFN8EE write setDFN8EE;
    property DMAEE : TBits_1 read getDMAEE write setDMAEE;
    property EOFEE : TBits_1 read getEOFEE write setEOFEE;
    property PIDEE : TBits_1 read getPIDEE write setPIDEE;
  end;
  TUSB_U1STAT = record
  private
    function  getDIR : TBits_1; assembler; nostackframe; inline;
    function  getENDPT : TBits_4; assembler; nostackframe; inline;
    function  getENDPT0 : TBits_1; assembler; nostackframe; inline;
    function  getENDPT1 : TBits_1; assembler; nostackframe; inline;
    function  getENDPT2 : TBits_1; assembler; nostackframe; inline;
    function  getENDPT3 : TBits_1; assembler; nostackframe; inline;
    function  getPPBI : TBits_1; assembler; nostackframe; inline;
    procedure setDIR(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setENDPT(thebits : TBits_4); assembler; nostackframe; inline;
    procedure setENDPT0(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setENDPT1(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setENDPT2(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setENDPT3(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setPPBI(thebits : TBits_1); assembler; nostackframe; inline;
  public
    procedure clearDIR;
    procedure clearENDPT0;
    procedure clearENDPT1;
    procedure clearENDPT2;
    procedure clearENDPT3;
    procedure clearPPBI;
    procedure setDIR;
    procedure setENDPT0;
    procedure setENDPT1;
    procedure setENDPT2;
    procedure setENDPT3;
    procedure setPPBI;
    property DIR : TBits_1 read getDIR write setDIR;
    property ENDPT : TBits_4 read getENDPT write setENDPT;
    property ENDPT0 : TBits_1 read getENDPT0 write setENDPT0;
    property ENDPT1 : TBits_1 read getENDPT1 write setENDPT1;
    property ENDPT2 : TBits_1 read getENDPT2 write setENDPT2;
    property ENDPT3 : TBits_1 read getENDPT3 write setENDPT3;
    property PPBI : TBits_1 read getPPBI write setPPBI;
  end;
  TUSB_U1CON = record
  private
    function  getHOSTEN : TBits_1; assembler; nostackframe; inline;
    function  getJSTATE : TBits_1; assembler; nostackframe; inline;
    function  getPKTDIS : TBits_1; assembler; nostackframe; inline;
    function  getPKTDIS_TOKBUSY : TBits_1; assembler; nostackframe; inline;
    function  getPPBRST : TBits_1; assembler; nostackframe; inline;
    function  getRESUME : TBits_1; assembler; nostackframe; inline;
    function  getSE0 : TBits_1; assembler; nostackframe; inline;
    function  getSOFEN : TBits_1; assembler; nostackframe; inline;
    function  getTOKBUSY : TBits_1; assembler; nostackframe; inline;
    function  getUSBEN : TBits_1; assembler; nostackframe; inline;
    function  getUSBEN_SOFEN : TBits_1; assembler; nostackframe; inline;
    function  getUSBRST : TBits_1; assembler; nostackframe; inline;
    procedure setHOSTEN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setJSTATE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setPKTDIS(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setPKTDIS_TOKBUSY(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setPPBRST(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRESUME(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSE0(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSOFEN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTOKBUSY(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setUSBEN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setUSBEN_SOFEN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setUSBRST(thebits : TBits_1); assembler; nostackframe; inline;
  public
    procedure clearHOSTEN;
    procedure clearJSTATE;
    procedure clearPKTDIS;
    procedure clearPKTDIS_TOKBUSY;
    procedure clearPPBRST;
    procedure clearRESUME;
    procedure clearSE0;
    procedure clearSOFEN;
    procedure clearTOKBUSY;
    procedure clearUSBEN;
    procedure clearUSBEN_SOFEN;
    procedure clearUSBRST;
    procedure setHOSTEN;
    procedure setJSTATE;
    procedure setPKTDIS;
    procedure setPKTDIS_TOKBUSY;
    procedure setPPBRST;
    procedure setRESUME;
    procedure setSE0;
    procedure setSOFEN;
    procedure setTOKBUSY;
    procedure setUSBEN;
    procedure setUSBEN_SOFEN;
    procedure setUSBRST;
    property HOSTEN : TBits_1 read getHOSTEN write setHOSTEN;
    property JSTATE : TBits_1 read getJSTATE write setJSTATE;
    property PKTDIS : TBits_1 read getPKTDIS write setPKTDIS;
    property PKTDIS_TOKBUSY : TBits_1 read getPKTDIS_TOKBUSY write setPKTDIS_TOKBUSY;
    property PPBRST : TBits_1 read getPPBRST write setPPBRST;
    property RESUME : TBits_1 read getRESUME write setRESUME;
    property SE0 : TBits_1 read getSE0 write setSE0;
    property SOFEN : TBits_1 read getSOFEN write setSOFEN;
    property TOKBUSY : TBits_1 read getTOKBUSY write setTOKBUSY;
    property USBEN : TBits_1 read getUSBEN write setUSBEN;
    property USBEN_SOFEN : TBits_1 read getUSBEN_SOFEN write setUSBEN_SOFEN;
    property USBRST : TBits_1 read getUSBRST write setUSBRST;
  end;
  TUSB_U1ADDR = record
  private
    function  getDEVADDR : TBits_7; assembler; nostackframe; inline;
    function  getDEVADDR0 : TBits_1; assembler; nostackframe; inline;
    function  getDEVADDR1 : TBits_1; assembler; nostackframe; inline;
    function  getDEVADDR2 : TBits_1; assembler; nostackframe; inline;
    function  getDEVADDR3 : TBits_1; assembler; nostackframe; inline;
    function  getDEVADDR4 : TBits_1; assembler; nostackframe; inline;
    function  getDEVADDR5 : TBits_1; assembler; nostackframe; inline;
    function  getDEVADDR6 : TBits_1; assembler; nostackframe; inline;
    function  getLSPDEN : TBits_1; assembler; nostackframe; inline;
    procedure setDEVADDR(thebits : TBits_7); assembler; nostackframe; inline;
    procedure setDEVADDR0(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setDEVADDR1(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setDEVADDR2(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setDEVADDR3(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setDEVADDR4(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setDEVADDR5(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setDEVADDR6(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setLSPDEN(thebits : TBits_1); assembler; nostackframe; inline;
  public
    procedure clearDEVADDR0;
    procedure clearDEVADDR1;
    procedure clearDEVADDR2;
    procedure clearDEVADDR3;
    procedure clearDEVADDR4;
    procedure clearDEVADDR5;
    procedure clearDEVADDR6;
    procedure clearLSPDEN;
    procedure setDEVADDR0;
    procedure setDEVADDR1;
    procedure setDEVADDR2;
    procedure setDEVADDR3;
    procedure setDEVADDR4;
    procedure setDEVADDR5;
    procedure setDEVADDR6;
    procedure setLSPDEN;
    property DEVADDR : TBits_7 read getDEVADDR write setDEVADDR;
    property DEVADDR0 : TBits_1 read getDEVADDR0 write setDEVADDR0;
    property DEVADDR1 : TBits_1 read getDEVADDR1 write setDEVADDR1;
    property DEVADDR2 : TBits_1 read getDEVADDR2 write setDEVADDR2;
    property DEVADDR3 : TBits_1 read getDEVADDR3 write setDEVADDR3;
    property DEVADDR4 : TBits_1 read getDEVADDR4 write setDEVADDR4;
    property DEVADDR5 : TBits_1 read getDEVADDR5 write setDEVADDR5;
    property DEVADDR6 : TBits_1 read getDEVADDR6 write setDEVADDR6;
    property LSPDEN : TBits_1 read getLSPDEN write setLSPDEN;
  end;
  TUSB_U1FRML = record
  private
    function  getFRM0 : TBits_1; assembler; nostackframe; inline;
    function  getFRM1 : TBits_1; assembler; nostackframe; inline;
    function  getFRM2 : TBits_1; assembler; nostackframe; inline;
    function  getFRM3 : TBits_1; assembler; nostackframe; inline;
    function  getFRM4 : TBits_1; assembler; nostackframe; inline;
    function  getFRM5 : TBits_1; assembler; nostackframe; inline;
    function  getFRM6 : TBits_1; assembler; nostackframe; inline;
    function  getFRM7 : TBits_1; assembler; nostackframe; inline;
    function  getFRML : TBits_8; assembler; nostackframe; inline;
    procedure setFRM0(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setFRM1(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setFRM2(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setFRM3(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setFRM4(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setFRM5(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setFRM6(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setFRM7(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setFRML(thebits : TBits_8); assembler; nostackframe; inline;
  public
    procedure clearFRM0;
    procedure clearFRM1;
    procedure clearFRM2;
    procedure clearFRM3;
    procedure clearFRM4;
    procedure clearFRM5;
    procedure clearFRM6;
    procedure clearFRM7;
    procedure setFRM0;
    procedure setFRM1;
    procedure setFRM2;
    procedure setFRM3;
    procedure setFRM4;
    procedure setFRM5;
    procedure setFRM6;
    procedure setFRM7;
    property FRM0 : TBits_1 read getFRM0 write setFRM0;
    property FRM1 : TBits_1 read getFRM1 write setFRM1;
    property FRM2 : TBits_1 read getFRM2 write setFRM2;
    property FRM3 : TBits_1 read getFRM3 write setFRM3;
    property FRM4 : TBits_1 read getFRM4 write setFRM4;
    property FRM5 : TBits_1 read getFRM5 write setFRM5;
    property FRM6 : TBits_1 read getFRM6 write setFRM6;
    property FRM7 : TBits_1 read getFRM7 write setFRM7;
    property FRML : TBits_8 read getFRML write setFRML;
  end;
  TUSB_U1FRMH = record
  private
    function  getFRM10 : TBits_1; assembler; nostackframe; inline;
    function  getFRM8 : TBits_1; assembler; nostackframe; inline;
    function  getFRM9 : TBits_1; assembler; nostackframe; inline;
    function  getFRMH : TBits_3; assembler; nostackframe; inline;
    procedure setFRM10(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setFRM8(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setFRM9(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setFRMH(thebits : TBits_3); assembler; nostackframe; inline;
  public
    procedure clearFRM10;
    procedure clearFRM8;
    procedure clearFRM9;
    procedure setFRM10;
    procedure setFRM8;
    procedure setFRM9;
    property FRM10 : TBits_1 read getFRM10 write setFRM10;
    property FRM8 : TBits_1 read getFRM8 write setFRM8;
    property FRM9 : TBits_1 read getFRM9 write setFRM9;
    property FRMH : TBits_3 read getFRMH write setFRMH;
  end;
  TUSB_U1TOK = record
  private
    function  getEP : TBits_4; assembler; nostackframe; inline;
    function  getEP0 : TBits_1; assembler; nostackframe; inline;
    function  getEP1 : TBits_1; assembler; nostackframe; inline;
    function  getEP2 : TBits_1; assembler; nostackframe; inline;
    function  getEP3 : TBits_1; assembler; nostackframe; inline;
    function  getPID : TBits_4; assembler; nostackframe; inline;
    function  getPID0 : TBits_1; assembler; nostackframe; inline;
    function  getPID1 : TBits_1; assembler; nostackframe; inline;
    function  getPID2 : TBits_1; assembler; nostackframe; inline;
    function  getPID3 : TBits_1; assembler; nostackframe; inline;
    procedure setEP(thebits : TBits_4); assembler; nostackframe; inline;
    procedure setEP0(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setEP1(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setEP2(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setEP3(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setPID(thebits : TBits_4); assembler; nostackframe; inline;
    procedure setPID0(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setPID1(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setPID2(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setPID3(thebits : TBits_1); assembler; nostackframe; inline;
  public
    procedure clearEP0;
    procedure clearEP1;
    procedure clearEP2;
    procedure clearEP3;
    procedure clearPID0;
    procedure clearPID1;
    procedure clearPID2;
    procedure clearPID3;
    procedure setEP0;
    procedure setEP1;
    procedure setEP2;
    procedure setEP3;
    procedure setPID0;
    procedure setPID1;
    procedure setPID2;
    procedure setPID3;
    property EP : TBits_4 read getEP write setEP;
    property EP0 : TBits_1 read getEP0 write setEP0;
    property EP1 : TBits_1 read getEP1 write setEP1;
    property EP2 : TBits_1 read getEP2 write setEP2;
    property EP3 : TBits_1 read getEP3 write setEP3;
    property PID : TBits_4 read getPID write setPID;
    property PID0 : TBits_1 read getPID0 write setPID0;
    property PID1 : TBits_1 read getPID1 write setPID1;
    property PID2 : TBits_1 read getPID2 write setPID2;
    property PID3 : TBits_1 read getPID3 write setPID3;
  end;
type
  TUSBRegisters = record
    U1OTGIR : longWord;
    U1OTGIRCLR : longWord;
    U1OTGIE : longWord;
    U1OTGIECLR : longWord;
    U1OTGIESET : longWord;
    U1OTGIEINV : longWord;
    U1OTGSTAT : longWord;
    U1OTGCON : longWord;
    U1OTGCONCLR : longWord;
    U1OTGCONSET : longWord;
    U1OTGCONINV : longWord;
    U1PWRC : longWord;
    U1PWRCCLR : longWord;
    U1PWRCSET : longWord;
    U1PWRCINV : longWord;
    U1IRbits : TUSB_U1IR;
    U1IR : longWord;
    U1IRCLR : longWord;
    U1IEbits : TUSB_U1IE;
    U1IE : longWord;
    U1IECLR : longWord;
    U1IESET : longWord;
    U1IEINV : longWord;
    U1EIRbits : TUSB_U1EIR;
    U1EIR : longWord;
    U1EIRCLR : longWord;
    U1EIEbits : TUSB_U1EIE;
    U1EIE : longWord;
    U1EIECLR : longWord;
    U1EIESET : longWord;
    U1EIEINV : longWord;
    U1STATbits : TUSB_U1STAT;
    U1STAT : longWord;
    U1CONbits : TUSB_U1CON;
    U1CON : longWord;
    U1CONCLR : longWord;
    U1CONSET : longWord;
    U1CONINV : longWord;
    U1ADDRbits : TUSB_U1ADDR;
    U1ADDR : longWord;
    U1ADDRCLR : longWord;
    U1ADDRSET : longWord;
    U1ADDRINV : longWord;
    U1BDTP1 : longWord;
    U1BDTP1CLR : longWord;
    U1BDTP1SET : longWord;
    U1BDTP1INV : longWord;
    U1FRMLbits : TUSB_U1FRML;
    U1FRML : longWord;
    U1FRMHbits : TUSB_U1FRMH;
    U1FRMH : longWord;
    U1TOKbits : TUSB_U1TOK;
    U1TOK : longWord;
    U1TOKCLR : longWord;
    U1TOKSET : longWord;
    U1TOKINV : longWord;
    U1SOF : longWord;
    U1SOFCLR : longWord;
    U1SOFSET : longWord;
    U1SOFINV : longWord;
    U1BDTP2 : longWord;
    U1BDTP2CLR : longWord;
    U1BDTP2SET : longWord;
    U1BDTP2INV : longWord;
    U1BDTP3 : longWord;
    U1BDTP3CLR : longWord;
    U1BDTP3SET : longWord;
    U1BDTP3INV : longWord;
    U1CNFG1 : longWord;
    U1CNFG1CLR : longWord;
    U1CNFG1SET : longWord;
    U1CNFG1INV : longWord;
    U1EP0 : longWord;
    U1EP0CLR : longWord;
    U1EP0SET : longWord;
    U1EP0INV : longWord;
    U1EP1 : longWord;
    U1EP1CLR : longWord;
    U1EP1SET : longWord;
    U1EP1INV : longWord;
    U1EP2 : longWord;
    U1EP2CLR : longWord;
    U1EP2SET : longWord;
    U1EP2INV : longWord;
    U1EP3 : longWord;
    U1EP3CLR : longWord;
    U1EP3SET : longWord;
    U1EP3INV : longWord;
    U1EP4 : longWord;
    U1EP4CLR : longWord;
    U1EP4SET : longWord;
    U1EP4INV : longWord;
    U1EP5 : longWord;
    U1EP5CLR : longWord;
    U1EP5SET : longWord;
    U1EP5INV : longWord;
    U1EP6 : longWord;
    U1EP6CLR : longWord;
    U1EP6SET : longWord;
    U1EP6INV : longWord;
    U1EP7 : longWord;
    U1EP7CLR : longWord;
    U1EP7SET : longWord;
    U1EP7INV : longWord;
    U1EP8 : longWord;
    U1EP8CLR : longWord;
    U1EP8SET : longWord;
    U1EP8INV : longWord;
    U1EP9 : longWord;
    U1EP9CLR : longWord;
    U1EP9SET : longWord;
    U1EP9INV : longWord;
    U1EP10 : longWord;
    U1EP10CLR : longWord;
    U1EP10SET : longWord;
    U1EP10INV : longWord;
    U1EP11 : longWord;
    U1EP11CLR : longWord;
    U1EP11SET : longWord;
    U1EP11INV : longWord;
    U1EP12 : longWord;
    U1EP12CLR : longWord;
    U1EP12SET : longWord;
    U1EP12INV : longWord;
    U1EP13 : longWord;
    U1EP13CLR : longWord;
    U1EP13SET : longWord;
    U1EP13INV : longWord;
    U1EP14 : longWord;
    U1EP14CLR : longWord;
    U1EP14SET : longWord;
    U1EP14INV : longWord;
    U1EP15 : longWord;
    U1EP15CLR : longWord;
    U1EP15SET : longWord;
    U1EP15INV : longWord;
  end;
  TPORTA_TRISA = record
  private
    function  getTRISA0 : TBits_1; assembler; nostackframe; inline;
    function  getTRISA1 : TBits_1; assembler; nostackframe; inline;
    function  getTRISA10 : TBits_1; assembler; nostackframe; inline;
    function  getTRISA14 : TBits_1; assembler; nostackframe; inline;
    function  getTRISA15 : TBits_1; assembler; nostackframe; inline;
    function  getTRISA2 : TBits_1; assembler; nostackframe; inline;
    function  getTRISA3 : TBits_1; assembler; nostackframe; inline;
    function  getTRISA4 : TBits_1; assembler; nostackframe; inline;
    function  getTRISA5 : TBits_1; assembler; nostackframe; inline;
    function  getTRISA6 : TBits_1; assembler; nostackframe; inline;
    function  getTRISA7 : TBits_1; assembler; nostackframe; inline;
    function  getTRISA9 : TBits_1; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setTRISA0(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTRISA1(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTRISA10(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTRISA14(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTRISA15(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTRISA2(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTRISA3(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTRISA4(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTRISA5(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTRISA6(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTRISA7(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTRISA9(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearTRISA0;
    procedure clearTRISA10;
    procedure clearTRISA14;
    procedure clearTRISA15;
    procedure clearTRISA1;
    procedure clearTRISA2;
    procedure clearTRISA3;
    procedure clearTRISA4;
    procedure clearTRISA5;
    procedure clearTRISA6;
    procedure clearTRISA7;
    procedure clearTRISA9;
    procedure setTRISA0;
    procedure setTRISA10;
    procedure setTRISA14;
    procedure setTRISA15;
    procedure setTRISA1;
    procedure setTRISA2;
    procedure setTRISA3;
    procedure setTRISA4;
    procedure setTRISA5;
    procedure setTRISA6;
    procedure setTRISA7;
    procedure setTRISA9;
    property TRISA0 : TBits_1 read getTRISA0 write setTRISA0;
    property TRISA1 : TBits_1 read getTRISA1 write setTRISA1;
    property TRISA10 : TBits_1 read getTRISA10 write setTRISA10;
    property TRISA14 : TBits_1 read getTRISA14 write setTRISA14;
    property TRISA15 : TBits_1 read getTRISA15 write setTRISA15;
    property TRISA2 : TBits_1 read getTRISA2 write setTRISA2;
    property TRISA3 : TBits_1 read getTRISA3 write setTRISA3;
    property TRISA4 : TBits_1 read getTRISA4 write setTRISA4;
    property TRISA5 : TBits_1 read getTRISA5 write setTRISA5;
    property TRISA6 : TBits_1 read getTRISA6 write setTRISA6;
    property TRISA7 : TBits_1 read getTRISA7 write setTRISA7;
    property TRISA9 : TBits_1 read getTRISA9 write setTRISA9;
    property w : TBits_32 read getw write setw;
  end;
  TPORTA_PORTA = record
  private
    function  getRA0 : TBits_1; assembler; nostackframe; inline;
    function  getRA1 : TBits_1; assembler; nostackframe; inline;
    function  getRA10 : TBits_1; assembler; nostackframe; inline;
    function  getRA14 : TBits_1; assembler; nostackframe; inline;
    function  getRA15 : TBits_1; assembler; nostackframe; inline;
    function  getRA2 : TBits_1; assembler; nostackframe; inline;
    function  getRA3 : TBits_1; assembler; nostackframe; inline;
    function  getRA4 : TBits_1; assembler; nostackframe; inline;
    function  getRA5 : TBits_1; assembler; nostackframe; inline;
    function  getRA6 : TBits_1; assembler; nostackframe; inline;
    function  getRA7 : TBits_1; assembler; nostackframe; inline;
    function  getRA9 : TBits_1; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setRA0(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRA1(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRA10(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRA14(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRA15(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRA2(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRA3(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRA4(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRA5(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRA6(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRA7(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRA9(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearRA0;
    procedure clearRA10;
    procedure clearRA14;
    procedure clearRA15;
    procedure clearRA1;
    procedure clearRA2;
    procedure clearRA3;
    procedure clearRA4;
    procedure clearRA5;
    procedure clearRA6;
    procedure clearRA7;
    procedure clearRA9;
    procedure setRA0;
    procedure setRA10;
    procedure setRA14;
    procedure setRA15;
    procedure setRA1;
    procedure setRA2;
    procedure setRA3;
    procedure setRA4;
    procedure setRA5;
    procedure setRA6;
    procedure setRA7;
    procedure setRA9;
    property RA0 : TBits_1 read getRA0 write setRA0;
    property RA1 : TBits_1 read getRA1 write setRA1;
    property RA10 : TBits_1 read getRA10 write setRA10;
    property RA14 : TBits_1 read getRA14 write setRA14;
    property RA15 : TBits_1 read getRA15 write setRA15;
    property RA2 : TBits_1 read getRA2 write setRA2;
    property RA3 : TBits_1 read getRA3 write setRA3;
    property RA4 : TBits_1 read getRA4 write setRA4;
    property RA5 : TBits_1 read getRA5 write setRA5;
    property RA6 : TBits_1 read getRA6 write setRA6;
    property RA7 : TBits_1 read getRA7 write setRA7;
    property RA9 : TBits_1 read getRA9 write setRA9;
    property w : TBits_32 read getw write setw;
  end;
  TPortA_bits=(RA0=0,RA1=1,RA2=2,RA3=3,RA4=4,RA5=5,RA6=6,RA7=7,RA9=9,RA10=10,RA14=14,RA15=15);
  TPortA_bitset = set of TPortA_bits;
  TPORTA_LATA = record
  private
    function  getLATA0 : TBits_1; assembler; nostackframe; inline;
    function  getLATA1 : TBits_1; assembler; nostackframe; inline;
    function  getLATA10 : TBits_1; assembler; nostackframe; inline;
    function  getLATA14 : TBits_1; assembler; nostackframe; inline;
    function  getLATA15 : TBits_1; assembler; nostackframe; inline;
    function  getLATA2 : TBits_1; assembler; nostackframe; inline;
    function  getLATA3 : TBits_1; assembler; nostackframe; inline;
    function  getLATA4 : TBits_1; assembler; nostackframe; inline;
    function  getLATA5 : TBits_1; assembler; nostackframe; inline;
    function  getLATA6 : TBits_1; assembler; nostackframe; inline;
    function  getLATA7 : TBits_1; assembler; nostackframe; inline;
    function  getLATA9 : TBits_1; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setLATA0(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setLATA1(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setLATA10(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setLATA14(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setLATA15(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setLATA2(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setLATA3(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setLATA4(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setLATA5(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setLATA6(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setLATA7(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setLATA9(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearLATA0;
    procedure clearLATA10;
    procedure clearLATA14;
    procedure clearLATA15;
    procedure clearLATA1;
    procedure clearLATA2;
    procedure clearLATA3;
    procedure clearLATA4;
    procedure clearLATA5;
    procedure clearLATA6;
    procedure clearLATA7;
    procedure clearLATA9;
    procedure setLATA0;
    procedure setLATA10;
    procedure setLATA14;
    procedure setLATA15;
    procedure setLATA1;
    procedure setLATA2;
    procedure setLATA3;
    procedure setLATA4;
    procedure setLATA5;
    procedure setLATA6;
    procedure setLATA7;
    procedure setLATA9;
    property LATA0 : TBits_1 read getLATA0 write setLATA0;
    property LATA1 : TBits_1 read getLATA1 write setLATA1;
    property LATA10 : TBits_1 read getLATA10 write setLATA10;
    property LATA14 : TBits_1 read getLATA14 write setLATA14;
    property LATA15 : TBits_1 read getLATA15 write setLATA15;
    property LATA2 : TBits_1 read getLATA2 write setLATA2;
    property LATA3 : TBits_1 read getLATA3 write setLATA3;
    property LATA4 : TBits_1 read getLATA4 write setLATA4;
    property LATA5 : TBits_1 read getLATA5 write setLATA5;
    property LATA6 : TBits_1 read getLATA6 write setLATA6;
    property LATA7 : TBits_1 read getLATA7 write setLATA7;
    property LATA9 : TBits_1 read getLATA9 write setLATA9;
    property w : TBits_32 read getw write setw;
  end;
  TPORTA_ODCA = record
  private
    function  getODCA0 : TBits_1; assembler; nostackframe; inline;
    function  getODCA1 : TBits_1; assembler; nostackframe; inline;
    function  getODCA10 : TBits_1; assembler; nostackframe; inline;
    function  getODCA14 : TBits_1; assembler; nostackframe; inline;
    function  getODCA15 : TBits_1; assembler; nostackframe; inline;
    function  getODCA2 : TBits_1; assembler; nostackframe; inline;
    function  getODCA3 : TBits_1; assembler; nostackframe; inline;
    function  getODCA4 : TBits_1; assembler; nostackframe; inline;
    function  getODCA5 : TBits_1; assembler; nostackframe; inline;
    function  getODCA6 : TBits_1; assembler; nostackframe; inline;
    function  getODCA7 : TBits_1; assembler; nostackframe; inline;
    function  getODCA9 : TBits_1; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setODCA0(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setODCA1(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setODCA10(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setODCA14(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setODCA15(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setODCA2(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setODCA3(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setODCA4(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setODCA5(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setODCA6(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setODCA7(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setODCA9(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearODCA0;
    procedure clearODCA10;
    procedure clearODCA14;
    procedure clearODCA15;
    procedure clearODCA1;
    procedure clearODCA2;
    procedure clearODCA3;
    procedure clearODCA4;
    procedure clearODCA5;
    procedure clearODCA6;
    procedure clearODCA7;
    procedure clearODCA9;
    procedure setODCA0;
    procedure setODCA10;
    procedure setODCA14;
    procedure setODCA15;
    procedure setODCA1;
    procedure setODCA2;
    procedure setODCA3;
    procedure setODCA4;
    procedure setODCA5;
    procedure setODCA6;
    procedure setODCA7;
    procedure setODCA9;
    property ODCA0 : TBits_1 read getODCA0 write setODCA0;
    property ODCA1 : TBits_1 read getODCA1 write setODCA1;
    property ODCA10 : TBits_1 read getODCA10 write setODCA10;
    property ODCA14 : TBits_1 read getODCA14 write setODCA14;
    property ODCA15 : TBits_1 read getODCA15 write setODCA15;
    property ODCA2 : TBits_1 read getODCA2 write setODCA2;
    property ODCA3 : TBits_1 read getODCA3 write setODCA3;
    property ODCA4 : TBits_1 read getODCA4 write setODCA4;
    property ODCA5 : TBits_1 read getODCA5 write setODCA5;
    property ODCA6 : TBits_1 read getODCA6 write setODCA6;
    property ODCA7 : TBits_1 read getODCA7 write setODCA7;
    property ODCA9 : TBits_1 read getODCA9 write setODCA9;
    property w : TBits_32 read getw write setw;
  end;
type
  TPORTARegisters = record
    TRISAbits : TPORTA_TRISA;
    TRISA : longWord;
    TRISACLR : longWord;
    TRISASET : longWord;
    TRISAINV : longWord;
    PORTAbits : TPORTA_PORTA;
    PORTA : longWord;
    PORTACLR : longWord;
    PORTASET : longWord;
    PORTAINV : longWord;
    LATAbits : TPORTA_LATA;
    LATA : longWord;
    LATACLR : longWord;
    LATASET : longWord;
    LATAINV : longWord;
    ODCAbits : TPORTA_ODCA;
    ODCA : longWord;
    ODCACLR : longWord;
    ODCASET : longWord;
    ODCAINV : longWord;
  end;
  TPORTB_TRISB = record
  private
    function  getTRISB0 : TBits_1; assembler; nostackframe; inline;
    function  getTRISB1 : TBits_1; assembler; nostackframe; inline;
    function  getTRISB10 : TBits_1; assembler; nostackframe; inline;
    function  getTRISB11 : TBits_1; assembler; nostackframe; inline;
    function  getTRISB12 : TBits_1; assembler; nostackframe; inline;
    function  getTRISB13 : TBits_1; assembler; nostackframe; inline;
    function  getTRISB14 : TBits_1; assembler; nostackframe; inline;
    function  getTRISB15 : TBits_1; assembler; nostackframe; inline;
    function  getTRISB2 : TBits_1; assembler; nostackframe; inline;
    function  getTRISB3 : TBits_1; assembler; nostackframe; inline;
    function  getTRISB4 : TBits_1; assembler; nostackframe; inline;
    function  getTRISB5 : TBits_1; assembler; nostackframe; inline;
    function  getTRISB6 : TBits_1; assembler; nostackframe; inline;
    function  getTRISB7 : TBits_1; assembler; nostackframe; inline;
    function  getTRISB8 : TBits_1; assembler; nostackframe; inline;
    function  getTRISB9 : TBits_1; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setTRISB0(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTRISB1(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTRISB10(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTRISB11(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTRISB12(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTRISB13(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTRISB14(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTRISB15(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTRISB2(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTRISB3(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTRISB4(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTRISB5(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTRISB6(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTRISB7(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTRISB8(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTRISB9(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearTRISB0;
    procedure clearTRISB10;
    procedure clearTRISB11;
    procedure clearTRISB12;
    procedure clearTRISB13;
    procedure clearTRISB14;
    procedure clearTRISB15;
    procedure clearTRISB1;
    procedure clearTRISB2;
    procedure clearTRISB3;
    procedure clearTRISB4;
    procedure clearTRISB5;
    procedure clearTRISB6;
    procedure clearTRISB7;
    procedure clearTRISB8;
    procedure clearTRISB9;
    procedure setTRISB0;
    procedure setTRISB10;
    procedure setTRISB11;
    procedure setTRISB12;
    procedure setTRISB13;
    procedure setTRISB14;
    procedure setTRISB15;
    procedure setTRISB1;
    procedure setTRISB2;
    procedure setTRISB3;
    procedure setTRISB4;
    procedure setTRISB5;
    procedure setTRISB6;
    procedure setTRISB7;
    procedure setTRISB8;
    procedure setTRISB9;
    property TRISB0 : TBits_1 read getTRISB0 write setTRISB0;
    property TRISB1 : TBits_1 read getTRISB1 write setTRISB1;
    property TRISB10 : TBits_1 read getTRISB10 write setTRISB10;
    property TRISB11 : TBits_1 read getTRISB11 write setTRISB11;
    property TRISB12 : TBits_1 read getTRISB12 write setTRISB12;
    property TRISB13 : TBits_1 read getTRISB13 write setTRISB13;
    property TRISB14 : TBits_1 read getTRISB14 write setTRISB14;
    property TRISB15 : TBits_1 read getTRISB15 write setTRISB15;
    property TRISB2 : TBits_1 read getTRISB2 write setTRISB2;
    property TRISB3 : TBits_1 read getTRISB3 write setTRISB3;
    property TRISB4 : TBits_1 read getTRISB4 write setTRISB4;
    property TRISB5 : TBits_1 read getTRISB5 write setTRISB5;
    property TRISB6 : TBits_1 read getTRISB6 write setTRISB6;
    property TRISB7 : TBits_1 read getTRISB7 write setTRISB7;
    property TRISB8 : TBits_1 read getTRISB8 write setTRISB8;
    property TRISB9 : TBits_1 read getTRISB9 write setTRISB9;
    property w : TBits_32 read getw write setw;
  end;
  TPORTB_PORTB = record
  private
    function  getRB0 : TBits_1; assembler; nostackframe; inline;
    function  getRB1 : TBits_1; assembler; nostackframe; inline;
    function  getRB10 : TBits_1; assembler; nostackframe; inline;
    function  getRB11 : TBits_1; assembler; nostackframe; inline;
    function  getRB12 : TBits_1; assembler; nostackframe; inline;
    function  getRB13 : TBits_1; assembler; nostackframe; inline;
    function  getRB14 : TBits_1; assembler; nostackframe; inline;
    function  getRB15 : TBits_1; assembler; nostackframe; inline;
    function  getRB2 : TBits_1; assembler; nostackframe; inline;
    function  getRB3 : TBits_1; assembler; nostackframe; inline;
    function  getRB4 : TBits_1; assembler; nostackframe; inline;
    function  getRB5 : TBits_1; assembler; nostackframe; inline;
    function  getRB6 : TBits_1; assembler; nostackframe; inline;
    function  getRB7 : TBits_1; assembler; nostackframe; inline;
    function  getRB8 : TBits_1; assembler; nostackframe; inline;
    function  getRB9 : TBits_1; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setRB0(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRB1(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRB10(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRB11(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRB12(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRB13(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRB14(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRB15(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRB2(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRB3(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRB4(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRB5(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRB6(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRB7(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRB8(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRB9(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearRB0;
    procedure clearRB10;
    procedure clearRB11;
    procedure clearRB12;
    procedure clearRB13;
    procedure clearRB14;
    procedure clearRB15;
    procedure clearRB1;
    procedure clearRB2;
    procedure clearRB3;
    procedure clearRB4;
    procedure clearRB5;
    procedure clearRB6;
    procedure clearRB7;
    procedure clearRB8;
    procedure clearRB9;
    procedure setRB0;
    procedure setRB10;
    procedure setRB11;
    procedure setRB12;
    procedure setRB13;
    procedure setRB14;
    procedure setRB15;
    procedure setRB1;
    procedure setRB2;
    procedure setRB3;
    procedure setRB4;
    procedure setRB5;
    procedure setRB6;
    procedure setRB7;
    procedure setRB8;
    procedure setRB9;
    property RB0 : TBits_1 read getRB0 write setRB0;
    property RB1 : TBits_1 read getRB1 write setRB1;
    property RB10 : TBits_1 read getRB10 write setRB10;
    property RB11 : TBits_1 read getRB11 write setRB11;
    property RB12 : TBits_1 read getRB12 write setRB12;
    property RB13 : TBits_1 read getRB13 write setRB13;
    property RB14 : TBits_1 read getRB14 write setRB14;
    property RB15 : TBits_1 read getRB15 write setRB15;
    property RB2 : TBits_1 read getRB2 write setRB2;
    property RB3 : TBits_1 read getRB3 write setRB3;
    property RB4 : TBits_1 read getRB4 write setRB4;
    property RB5 : TBits_1 read getRB5 write setRB5;
    property RB6 : TBits_1 read getRB6 write setRB6;
    property RB7 : TBits_1 read getRB7 write setRB7;
    property RB8 : TBits_1 read getRB8 write setRB8;
    property RB9 : TBits_1 read getRB9 write setRB9;
    property w : TBits_32 read getw write setw;
  end;
  TPortB_bits=(RB0=0,RB1=1,RB2=2,RB3=3,RB4=4,RB5=5,RB6=6,RB7=7,RB8=8,RB9=9,RB10=10,RB11=11,RB12=12,RB13=13,RB14=14,RB15=15);
  TPortB_bitset = set of TPortB_bits;
  TPORTB_LATB = record
  private
    function  getLATB0 : TBits_1; assembler; nostackframe; inline;
    function  getLATB1 : TBits_1; assembler; nostackframe; inline;
    function  getLATB10 : TBits_1; assembler; nostackframe; inline;
    function  getLATB11 : TBits_1; assembler; nostackframe; inline;
    function  getLATB12 : TBits_1; assembler; nostackframe; inline;
    function  getLATB13 : TBits_1; assembler; nostackframe; inline;
    function  getLATB14 : TBits_1; assembler; nostackframe; inline;
    function  getLATB15 : TBits_1; assembler; nostackframe; inline;
    function  getLATB2 : TBits_1; assembler; nostackframe; inline;
    function  getLATB3 : TBits_1; assembler; nostackframe; inline;
    function  getLATB4 : TBits_1; assembler; nostackframe; inline;
    function  getLATB5 : TBits_1; assembler; nostackframe; inline;
    function  getLATB6 : TBits_1; assembler; nostackframe; inline;
    function  getLATB7 : TBits_1; assembler; nostackframe; inline;
    function  getLATB8 : TBits_1; assembler; nostackframe; inline;
    function  getLATB9 : TBits_1; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setLATB0(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setLATB1(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setLATB10(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setLATB11(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setLATB12(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setLATB13(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setLATB14(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setLATB15(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setLATB2(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setLATB3(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setLATB4(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setLATB5(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setLATB6(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setLATB7(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setLATB8(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setLATB9(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearLATB0;
    procedure clearLATB10;
    procedure clearLATB11;
    procedure clearLATB12;
    procedure clearLATB13;
    procedure clearLATB14;
    procedure clearLATB15;
    procedure clearLATB1;
    procedure clearLATB2;
    procedure clearLATB3;
    procedure clearLATB4;
    procedure clearLATB5;
    procedure clearLATB6;
    procedure clearLATB7;
    procedure clearLATB8;
    procedure clearLATB9;
    procedure setLATB0;
    procedure setLATB10;
    procedure setLATB11;
    procedure setLATB12;
    procedure setLATB13;
    procedure setLATB14;
    procedure setLATB15;
    procedure setLATB1;
    procedure setLATB2;
    procedure setLATB3;
    procedure setLATB4;
    procedure setLATB5;
    procedure setLATB6;
    procedure setLATB7;
    procedure setLATB8;
    procedure setLATB9;
    property LATB0 : TBits_1 read getLATB0 write setLATB0;
    property LATB1 : TBits_1 read getLATB1 write setLATB1;
    property LATB10 : TBits_1 read getLATB10 write setLATB10;
    property LATB11 : TBits_1 read getLATB11 write setLATB11;
    property LATB12 : TBits_1 read getLATB12 write setLATB12;
    property LATB13 : TBits_1 read getLATB13 write setLATB13;
    property LATB14 : TBits_1 read getLATB14 write setLATB14;
    property LATB15 : TBits_1 read getLATB15 write setLATB15;
    property LATB2 : TBits_1 read getLATB2 write setLATB2;
    property LATB3 : TBits_1 read getLATB3 write setLATB3;
    property LATB4 : TBits_1 read getLATB4 write setLATB4;
    property LATB5 : TBits_1 read getLATB5 write setLATB5;
    property LATB6 : TBits_1 read getLATB6 write setLATB6;
    property LATB7 : TBits_1 read getLATB7 write setLATB7;
    property LATB8 : TBits_1 read getLATB8 write setLATB8;
    property LATB9 : TBits_1 read getLATB9 write setLATB9;
    property w : TBits_32 read getw write setw;
  end;
  TPORTB_ODCB = record
  private
    function  getODCB0 : TBits_1; assembler; nostackframe; inline;
    function  getODCB1 : TBits_1; assembler; nostackframe; inline;
    function  getODCB10 : TBits_1; assembler; nostackframe; inline;
    function  getODCB11 : TBits_1; assembler; nostackframe; inline;
    function  getODCB12 : TBits_1; assembler; nostackframe; inline;
    function  getODCB13 : TBits_1; assembler; nostackframe; inline;
    function  getODCB14 : TBits_1; assembler; nostackframe; inline;
    function  getODCB15 : TBits_1; assembler; nostackframe; inline;
    function  getODCB2 : TBits_1; assembler; nostackframe; inline;
    function  getODCB3 : TBits_1; assembler; nostackframe; inline;
    function  getODCB4 : TBits_1; assembler; nostackframe; inline;
    function  getODCB5 : TBits_1; assembler; nostackframe; inline;
    function  getODCB6 : TBits_1; assembler; nostackframe; inline;
    function  getODCB7 : TBits_1; assembler; nostackframe; inline;
    function  getODCB8 : TBits_1; assembler; nostackframe; inline;
    function  getODCB9 : TBits_1; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setODCB0(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setODCB1(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setODCB10(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setODCB11(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setODCB12(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setODCB13(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setODCB14(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setODCB15(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setODCB2(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setODCB3(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setODCB4(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setODCB5(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setODCB6(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setODCB7(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setODCB8(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setODCB9(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearODCB0;
    procedure clearODCB10;
    procedure clearODCB11;
    procedure clearODCB12;
    procedure clearODCB13;
    procedure clearODCB14;
    procedure clearODCB15;
    procedure clearODCB1;
    procedure clearODCB2;
    procedure clearODCB3;
    procedure clearODCB4;
    procedure clearODCB5;
    procedure clearODCB6;
    procedure clearODCB7;
    procedure clearODCB8;
    procedure clearODCB9;
    procedure setODCB0;
    procedure setODCB10;
    procedure setODCB11;
    procedure setODCB12;
    procedure setODCB13;
    procedure setODCB14;
    procedure setODCB15;
    procedure setODCB1;
    procedure setODCB2;
    procedure setODCB3;
    procedure setODCB4;
    procedure setODCB5;
    procedure setODCB6;
    procedure setODCB7;
    procedure setODCB8;
    procedure setODCB9;
    property ODCB0 : TBits_1 read getODCB0 write setODCB0;
    property ODCB1 : TBits_1 read getODCB1 write setODCB1;
    property ODCB10 : TBits_1 read getODCB10 write setODCB10;
    property ODCB11 : TBits_1 read getODCB11 write setODCB11;
    property ODCB12 : TBits_1 read getODCB12 write setODCB12;
    property ODCB13 : TBits_1 read getODCB13 write setODCB13;
    property ODCB14 : TBits_1 read getODCB14 write setODCB14;
    property ODCB15 : TBits_1 read getODCB15 write setODCB15;
    property ODCB2 : TBits_1 read getODCB2 write setODCB2;
    property ODCB3 : TBits_1 read getODCB3 write setODCB3;
    property ODCB4 : TBits_1 read getODCB4 write setODCB4;
    property ODCB5 : TBits_1 read getODCB5 write setODCB5;
    property ODCB6 : TBits_1 read getODCB6 write setODCB6;
    property ODCB7 : TBits_1 read getODCB7 write setODCB7;
    property ODCB8 : TBits_1 read getODCB8 write setODCB8;
    property ODCB9 : TBits_1 read getODCB9 write setODCB9;
    property w : TBits_32 read getw write setw;
  end;
type
  TPORTBRegisters = record
    TRISBbits : TPORTB_TRISB;
    TRISB : longWord;
    TRISBCLR : longWord;
    TRISBSET : longWord;
    TRISBINV : longWord;
    PORTBbits : TPORTB_PORTB;
    PORTB : longWord;
    PORTBCLR : longWord;
    PORTBSET : longWord;
    PORTBINV : longWord;
    LATBbits : TPORTB_LATB;
    LATB : longWord;
    LATBCLR : longWord;
    LATBSET : longWord;
    LATBINV : longWord;
    ODCBbits : TPORTB_ODCB;
    ODCB : longWord;
    ODCBCLR : longWord;
    ODCBSET : longWord;
    ODCBINV : longWord;
  end;
  TPORTC_TRISC = record
  private
    function  getTRISC1 : TBits_1; assembler; nostackframe; inline;
    function  getTRISC12 : TBits_1; assembler; nostackframe; inline;
    function  getTRISC13 : TBits_1; assembler; nostackframe; inline;
    function  getTRISC14 : TBits_1; assembler; nostackframe; inline;
    function  getTRISC15 : TBits_1; assembler; nostackframe; inline;
    function  getTRISC2 : TBits_1; assembler; nostackframe; inline;
    function  getTRISC3 : TBits_1; assembler; nostackframe; inline;
    function  getTRISC4 : TBits_1; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setTRISC1(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTRISC12(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTRISC13(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTRISC14(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTRISC15(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTRISC2(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTRISC3(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTRISC4(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearTRISC12;
    procedure clearTRISC13;
    procedure clearTRISC14;
    procedure clearTRISC15;
    procedure clearTRISC1;
    procedure clearTRISC2;
    procedure clearTRISC3;
    procedure clearTRISC4;
    procedure setTRISC12;
    procedure setTRISC13;
    procedure setTRISC14;
    procedure setTRISC15;
    procedure setTRISC1;
    procedure setTRISC2;
    procedure setTRISC3;
    procedure setTRISC4;
    property TRISC1 : TBits_1 read getTRISC1 write setTRISC1;
    property TRISC12 : TBits_1 read getTRISC12 write setTRISC12;
    property TRISC13 : TBits_1 read getTRISC13 write setTRISC13;
    property TRISC14 : TBits_1 read getTRISC14 write setTRISC14;
    property TRISC15 : TBits_1 read getTRISC15 write setTRISC15;
    property TRISC2 : TBits_1 read getTRISC2 write setTRISC2;
    property TRISC3 : TBits_1 read getTRISC3 write setTRISC3;
    property TRISC4 : TBits_1 read getTRISC4 write setTRISC4;
    property w : TBits_32 read getw write setw;
  end;
  TPORTC_PORTC = record
  private
    function  getRC1 : TBits_1; assembler; nostackframe; inline;
    function  getRC12 : TBits_1; assembler; nostackframe; inline;
    function  getRC13 : TBits_1; assembler; nostackframe; inline;
    function  getRC14 : TBits_1; assembler; nostackframe; inline;
    function  getRC15 : TBits_1; assembler; nostackframe; inline;
    function  getRC2 : TBits_1; assembler; nostackframe; inline;
    function  getRC3 : TBits_1; assembler; nostackframe; inline;
    function  getRC4 : TBits_1; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setRC1(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRC12(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRC13(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRC14(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRC15(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRC2(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRC3(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRC4(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearRC12;
    procedure clearRC13;
    procedure clearRC14;
    procedure clearRC15;
    procedure clearRC1;
    procedure clearRC2;
    procedure clearRC3;
    procedure clearRC4;
    procedure setRC12;
    procedure setRC13;
    procedure setRC14;
    procedure setRC15;
    procedure setRC1;
    procedure setRC2;
    procedure setRC3;
    procedure setRC4;
    property RC1 : TBits_1 read getRC1 write setRC1;
    property RC12 : TBits_1 read getRC12 write setRC12;
    property RC13 : TBits_1 read getRC13 write setRC13;
    property RC14 : TBits_1 read getRC14 write setRC14;
    property RC15 : TBits_1 read getRC15 write setRC15;
    property RC2 : TBits_1 read getRC2 write setRC2;
    property RC3 : TBits_1 read getRC3 write setRC3;
    property RC4 : TBits_1 read getRC4 write setRC4;
    property w : TBits_32 read getw write setw;
  end;
  TPortC_bits=(RC1=1,RC2=2,RC3=3,RC4=4,RC12=12,RC13=13,RC14=14,RC15=15);
  TPortC_bitset = set of TPortC_bits;
  TPORTC_LATC = record
  private
    function  getLATC1 : TBits_1; assembler; nostackframe; inline;
    function  getLATC12 : TBits_1; assembler; nostackframe; inline;
    function  getLATC13 : TBits_1; assembler; nostackframe; inline;
    function  getLATC14 : TBits_1; assembler; nostackframe; inline;
    function  getLATC15 : TBits_1; assembler; nostackframe; inline;
    function  getLATC2 : TBits_1; assembler; nostackframe; inline;
    function  getLATC3 : TBits_1; assembler; nostackframe; inline;
    function  getLATC4 : TBits_1; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setLATC1(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setLATC12(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setLATC13(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setLATC14(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setLATC15(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setLATC2(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setLATC3(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setLATC4(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearLATC12;
    procedure clearLATC13;
    procedure clearLATC14;
    procedure clearLATC15;
    procedure clearLATC1;
    procedure clearLATC2;
    procedure clearLATC3;
    procedure clearLATC4;
    procedure setLATC12;
    procedure setLATC13;
    procedure setLATC14;
    procedure setLATC15;
    procedure setLATC1;
    procedure setLATC2;
    procedure setLATC3;
    procedure setLATC4;
    property LATC1 : TBits_1 read getLATC1 write setLATC1;
    property LATC12 : TBits_1 read getLATC12 write setLATC12;
    property LATC13 : TBits_1 read getLATC13 write setLATC13;
    property LATC14 : TBits_1 read getLATC14 write setLATC14;
    property LATC15 : TBits_1 read getLATC15 write setLATC15;
    property LATC2 : TBits_1 read getLATC2 write setLATC2;
    property LATC3 : TBits_1 read getLATC3 write setLATC3;
    property LATC4 : TBits_1 read getLATC4 write setLATC4;
    property w : TBits_32 read getw write setw;
  end;
  TPORTC_ODCC = record
  private
    function  getODCC1 : TBits_1; assembler; nostackframe; inline;
    function  getODCC12 : TBits_1; assembler; nostackframe; inline;
    function  getODCC13 : TBits_1; assembler; nostackframe; inline;
    function  getODCC14 : TBits_1; assembler; nostackframe; inline;
    function  getODCC15 : TBits_1; assembler; nostackframe; inline;
    function  getODCC2 : TBits_1; assembler; nostackframe; inline;
    function  getODCC3 : TBits_1; assembler; nostackframe; inline;
    function  getODCC4 : TBits_1; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setODCC1(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setODCC12(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setODCC13(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setODCC14(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setODCC15(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setODCC2(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setODCC3(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setODCC4(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearODCC12;
    procedure clearODCC13;
    procedure clearODCC14;
    procedure clearODCC15;
    procedure clearODCC1;
    procedure clearODCC2;
    procedure clearODCC3;
    procedure clearODCC4;
    procedure setODCC12;
    procedure setODCC13;
    procedure setODCC14;
    procedure setODCC15;
    procedure setODCC1;
    procedure setODCC2;
    procedure setODCC3;
    procedure setODCC4;
    property ODCC1 : TBits_1 read getODCC1 write setODCC1;
    property ODCC12 : TBits_1 read getODCC12 write setODCC12;
    property ODCC13 : TBits_1 read getODCC13 write setODCC13;
    property ODCC14 : TBits_1 read getODCC14 write setODCC14;
    property ODCC15 : TBits_1 read getODCC15 write setODCC15;
    property ODCC2 : TBits_1 read getODCC2 write setODCC2;
    property ODCC3 : TBits_1 read getODCC3 write setODCC3;
    property ODCC4 : TBits_1 read getODCC4 write setODCC4;
    property w : TBits_32 read getw write setw;
  end;
type
  TPORTCRegisters = record
    TRISCbits : TPORTC_TRISC;
    TRISC : longWord;
    TRISCCLR : longWord;
    TRISCSET : longWord;
    TRISCINV : longWord;
    PORTCbits : TPORTC_PORTC;
    PORTC : longWord;
    PORTCCLR : longWord;
    PORTCSET : longWord;
    PORTCINV : longWord;
    LATCbits : TPORTC_LATC;
    LATC : longWord;
    LATCCLR : longWord;
    LATCSET : longWord;
    LATCINV : longWord;
    ODCCbits : TPORTC_ODCC;
    ODCC : longWord;
    ODCCCLR : longWord;
    ODCCSET : longWord;
    ODCCINV : longWord;
  end;
  TPORTD_TRISD = record
  private
    function  getTRISD0 : TBits_1; assembler; nostackframe; inline;
    function  getTRISD1 : TBits_1; assembler; nostackframe; inline;
    function  getTRISD10 : TBits_1; assembler; nostackframe; inline;
    function  getTRISD11 : TBits_1; assembler; nostackframe; inline;
    function  getTRISD12 : TBits_1; assembler; nostackframe; inline;
    function  getTRISD13 : TBits_1; assembler; nostackframe; inline;
    function  getTRISD14 : TBits_1; assembler; nostackframe; inline;
    function  getTRISD15 : TBits_1; assembler; nostackframe; inline;
    function  getTRISD2 : TBits_1; assembler; nostackframe; inline;
    function  getTRISD3 : TBits_1; assembler; nostackframe; inline;
    function  getTRISD4 : TBits_1; assembler; nostackframe; inline;
    function  getTRISD5 : TBits_1; assembler; nostackframe; inline;
    function  getTRISD6 : TBits_1; assembler; nostackframe; inline;
    function  getTRISD7 : TBits_1; assembler; nostackframe; inline;
    function  getTRISD8 : TBits_1; assembler; nostackframe; inline;
    function  getTRISD9 : TBits_1; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setTRISD0(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTRISD1(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTRISD10(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTRISD11(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTRISD12(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTRISD13(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTRISD14(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTRISD15(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTRISD2(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTRISD3(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTRISD4(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTRISD5(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTRISD6(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTRISD7(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTRISD8(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTRISD9(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearTRISD0;
    procedure clearTRISD10;
    procedure clearTRISD11;
    procedure clearTRISD12;
    procedure clearTRISD13;
    procedure clearTRISD14;
    procedure clearTRISD15;
    procedure clearTRISD1;
    procedure clearTRISD2;
    procedure clearTRISD3;
    procedure clearTRISD4;
    procedure clearTRISD5;
    procedure clearTRISD6;
    procedure clearTRISD7;
    procedure clearTRISD8;
    procedure clearTRISD9;
    procedure setTRISD0;
    procedure setTRISD10;
    procedure setTRISD11;
    procedure setTRISD12;
    procedure setTRISD13;
    procedure setTRISD14;
    procedure setTRISD15;
    procedure setTRISD1;
    procedure setTRISD2;
    procedure setTRISD3;
    procedure setTRISD4;
    procedure setTRISD5;
    procedure setTRISD6;
    procedure setTRISD7;
    procedure setTRISD8;
    procedure setTRISD9;
    property TRISD0 : TBits_1 read getTRISD0 write setTRISD0;
    property TRISD1 : TBits_1 read getTRISD1 write setTRISD1;
    property TRISD10 : TBits_1 read getTRISD10 write setTRISD10;
    property TRISD11 : TBits_1 read getTRISD11 write setTRISD11;
    property TRISD12 : TBits_1 read getTRISD12 write setTRISD12;
    property TRISD13 : TBits_1 read getTRISD13 write setTRISD13;
    property TRISD14 : TBits_1 read getTRISD14 write setTRISD14;
    property TRISD15 : TBits_1 read getTRISD15 write setTRISD15;
    property TRISD2 : TBits_1 read getTRISD2 write setTRISD2;
    property TRISD3 : TBits_1 read getTRISD3 write setTRISD3;
    property TRISD4 : TBits_1 read getTRISD4 write setTRISD4;
    property TRISD5 : TBits_1 read getTRISD5 write setTRISD5;
    property TRISD6 : TBits_1 read getTRISD6 write setTRISD6;
    property TRISD7 : TBits_1 read getTRISD7 write setTRISD7;
    property TRISD8 : TBits_1 read getTRISD8 write setTRISD8;
    property TRISD9 : TBits_1 read getTRISD9 write setTRISD9;
    property w : TBits_32 read getw write setw;
  end;
  TPORTD_PORTD = record
  private
    function  getRD0 : TBits_1; assembler; nostackframe; inline;
    function  getRD1 : TBits_1; assembler; nostackframe; inline;
    function  getRD10 : TBits_1; assembler; nostackframe; inline;
    function  getRD11 : TBits_1; assembler; nostackframe; inline;
    function  getRD12 : TBits_1; assembler; nostackframe; inline;
    function  getRD13 : TBits_1; assembler; nostackframe; inline;
    function  getRD14 : TBits_1; assembler; nostackframe; inline;
    function  getRD15 : TBits_1; assembler; nostackframe; inline;
    function  getRD2 : TBits_1; assembler; nostackframe; inline;
    function  getRD3 : TBits_1; assembler; nostackframe; inline;
    function  getRD4 : TBits_1; assembler; nostackframe; inline;
    function  getRD5 : TBits_1; assembler; nostackframe; inline;
    function  getRD6 : TBits_1; assembler; nostackframe; inline;
    function  getRD7 : TBits_1; assembler; nostackframe; inline;
    function  getRD8 : TBits_1; assembler; nostackframe; inline;
    function  getRD9 : TBits_1; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setRD0(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRD1(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRD10(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRD11(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRD12(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRD13(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRD14(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRD15(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRD2(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRD3(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRD4(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRD5(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRD6(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRD7(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRD8(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRD9(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearRD0;
    procedure clearRD10;
    procedure clearRD11;
    procedure clearRD12;
    procedure clearRD13;
    procedure clearRD14;
    procedure clearRD15;
    procedure clearRD1;
    procedure clearRD2;
    procedure clearRD3;
    procedure clearRD4;
    procedure clearRD5;
    procedure clearRD6;
    procedure clearRD7;
    procedure clearRD8;
    procedure clearRD9;
    procedure setRD0;
    procedure setRD10;
    procedure setRD11;
    procedure setRD12;
    procedure setRD13;
    procedure setRD14;
    procedure setRD15;
    procedure setRD1;
    procedure setRD2;
    procedure setRD3;
    procedure setRD4;
    procedure setRD5;
    procedure setRD6;
    procedure setRD7;
    procedure setRD8;
    procedure setRD9;
    property RD0 : TBits_1 read getRD0 write setRD0;
    property RD1 : TBits_1 read getRD1 write setRD1;
    property RD10 : TBits_1 read getRD10 write setRD10;
    property RD11 : TBits_1 read getRD11 write setRD11;
    property RD12 : TBits_1 read getRD12 write setRD12;
    property RD13 : TBits_1 read getRD13 write setRD13;
    property RD14 : TBits_1 read getRD14 write setRD14;
    property RD15 : TBits_1 read getRD15 write setRD15;
    property RD2 : TBits_1 read getRD2 write setRD2;
    property RD3 : TBits_1 read getRD3 write setRD3;
    property RD4 : TBits_1 read getRD4 write setRD4;
    property RD5 : TBits_1 read getRD5 write setRD5;
    property RD6 : TBits_1 read getRD6 write setRD6;
    property RD7 : TBits_1 read getRD7 write setRD7;
    property RD8 : TBits_1 read getRD8 write setRD8;
    property RD9 : TBits_1 read getRD9 write setRD9;
    property w : TBits_32 read getw write setw;
  end;
  TPortD_bits=(RD0=0,RD1=1,RD2=2,RD3=3,RD4=4,RD5=5,RD6=6,RD7=7,RD8=8,RD9=9,RD10=10,RD11=11,RD12=12,RD13=13,RD14=14,RD15=15);
  TPortD_bitset = set of TPortD_bits;
  TPORTD_LATD = record
  private
    function  getLATD0 : TBits_1; assembler; nostackframe; inline;
    function  getLATD1 : TBits_1; assembler; nostackframe; inline;
    function  getLATD10 : TBits_1; assembler; nostackframe; inline;
    function  getLATD11 : TBits_1; assembler; nostackframe; inline;
    function  getLATD12 : TBits_1; assembler; nostackframe; inline;
    function  getLATD13 : TBits_1; assembler; nostackframe; inline;
    function  getLATD14 : TBits_1; assembler; nostackframe; inline;
    function  getLATD15 : TBits_1; assembler; nostackframe; inline;
    function  getLATD2 : TBits_1; assembler; nostackframe; inline;
    function  getLATD3 : TBits_1; assembler; nostackframe; inline;
    function  getLATD4 : TBits_1; assembler; nostackframe; inline;
    function  getLATD5 : TBits_1; assembler; nostackframe; inline;
    function  getLATD6 : TBits_1; assembler; nostackframe; inline;
    function  getLATD7 : TBits_1; assembler; nostackframe; inline;
    function  getLATD8 : TBits_1; assembler; nostackframe; inline;
    function  getLATD9 : TBits_1; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setLATD0(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setLATD1(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setLATD10(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setLATD11(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setLATD12(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setLATD13(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setLATD14(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setLATD15(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setLATD2(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setLATD3(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setLATD4(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setLATD5(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setLATD6(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setLATD7(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setLATD8(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setLATD9(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearLATD0;
    procedure clearLATD10;
    procedure clearLATD11;
    procedure clearLATD12;
    procedure clearLATD13;
    procedure clearLATD14;
    procedure clearLATD15;
    procedure clearLATD1;
    procedure clearLATD2;
    procedure clearLATD3;
    procedure clearLATD4;
    procedure clearLATD5;
    procedure clearLATD6;
    procedure clearLATD7;
    procedure clearLATD8;
    procedure clearLATD9;
    procedure setLATD0;
    procedure setLATD10;
    procedure setLATD11;
    procedure setLATD12;
    procedure setLATD13;
    procedure setLATD14;
    procedure setLATD15;
    procedure setLATD1;
    procedure setLATD2;
    procedure setLATD3;
    procedure setLATD4;
    procedure setLATD5;
    procedure setLATD6;
    procedure setLATD7;
    procedure setLATD8;
    procedure setLATD9;
    property LATD0 : TBits_1 read getLATD0 write setLATD0;
    property LATD1 : TBits_1 read getLATD1 write setLATD1;
    property LATD10 : TBits_1 read getLATD10 write setLATD10;
    property LATD11 : TBits_1 read getLATD11 write setLATD11;
    property LATD12 : TBits_1 read getLATD12 write setLATD12;
    property LATD13 : TBits_1 read getLATD13 write setLATD13;
    property LATD14 : TBits_1 read getLATD14 write setLATD14;
    property LATD15 : TBits_1 read getLATD15 write setLATD15;
    property LATD2 : TBits_1 read getLATD2 write setLATD2;
    property LATD3 : TBits_1 read getLATD3 write setLATD3;
    property LATD4 : TBits_1 read getLATD4 write setLATD4;
    property LATD5 : TBits_1 read getLATD5 write setLATD5;
    property LATD6 : TBits_1 read getLATD6 write setLATD6;
    property LATD7 : TBits_1 read getLATD7 write setLATD7;
    property LATD8 : TBits_1 read getLATD8 write setLATD8;
    property LATD9 : TBits_1 read getLATD9 write setLATD9;
    property w : TBits_32 read getw write setw;
  end;
  TPORTD_ODCD = record
  private
    function  getODCD0 : TBits_1; assembler; nostackframe; inline;
    function  getODCD1 : TBits_1; assembler; nostackframe; inline;
    function  getODCD10 : TBits_1; assembler; nostackframe; inline;
    function  getODCD11 : TBits_1; assembler; nostackframe; inline;
    function  getODCD12 : TBits_1; assembler; nostackframe; inline;
    function  getODCD13 : TBits_1; assembler; nostackframe; inline;
    function  getODCD14 : TBits_1; assembler; nostackframe; inline;
    function  getODCD15 : TBits_1; assembler; nostackframe; inline;
    function  getODCD2 : TBits_1; assembler; nostackframe; inline;
    function  getODCD3 : TBits_1; assembler; nostackframe; inline;
    function  getODCD4 : TBits_1; assembler; nostackframe; inline;
    function  getODCD5 : TBits_1; assembler; nostackframe; inline;
    function  getODCD6 : TBits_1; assembler; nostackframe; inline;
    function  getODCD7 : TBits_1; assembler; nostackframe; inline;
    function  getODCD8 : TBits_1; assembler; nostackframe; inline;
    function  getODCD9 : TBits_1; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setODCD0(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setODCD1(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setODCD10(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setODCD11(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setODCD12(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setODCD13(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setODCD14(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setODCD15(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setODCD2(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setODCD3(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setODCD4(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setODCD5(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setODCD6(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setODCD7(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setODCD8(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setODCD9(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearODCD0;
    procedure clearODCD10;
    procedure clearODCD11;
    procedure clearODCD12;
    procedure clearODCD13;
    procedure clearODCD14;
    procedure clearODCD15;
    procedure clearODCD1;
    procedure clearODCD2;
    procedure clearODCD3;
    procedure clearODCD4;
    procedure clearODCD5;
    procedure clearODCD6;
    procedure clearODCD7;
    procedure clearODCD8;
    procedure clearODCD9;
    procedure setODCD0;
    procedure setODCD10;
    procedure setODCD11;
    procedure setODCD12;
    procedure setODCD13;
    procedure setODCD14;
    procedure setODCD15;
    procedure setODCD1;
    procedure setODCD2;
    procedure setODCD3;
    procedure setODCD4;
    procedure setODCD5;
    procedure setODCD6;
    procedure setODCD7;
    procedure setODCD8;
    procedure setODCD9;
    property ODCD0 : TBits_1 read getODCD0 write setODCD0;
    property ODCD1 : TBits_1 read getODCD1 write setODCD1;
    property ODCD10 : TBits_1 read getODCD10 write setODCD10;
    property ODCD11 : TBits_1 read getODCD11 write setODCD11;
    property ODCD12 : TBits_1 read getODCD12 write setODCD12;
    property ODCD13 : TBits_1 read getODCD13 write setODCD13;
    property ODCD14 : TBits_1 read getODCD14 write setODCD14;
    property ODCD15 : TBits_1 read getODCD15 write setODCD15;
    property ODCD2 : TBits_1 read getODCD2 write setODCD2;
    property ODCD3 : TBits_1 read getODCD3 write setODCD3;
    property ODCD4 : TBits_1 read getODCD4 write setODCD4;
    property ODCD5 : TBits_1 read getODCD5 write setODCD5;
    property ODCD6 : TBits_1 read getODCD6 write setODCD6;
    property ODCD7 : TBits_1 read getODCD7 write setODCD7;
    property ODCD8 : TBits_1 read getODCD8 write setODCD8;
    property ODCD9 : TBits_1 read getODCD9 write setODCD9;
    property w : TBits_32 read getw write setw;
  end;
type
  TPORTDRegisters = record
    TRISDbits : TPORTD_TRISD;
    TRISD : longWord;
    TRISDCLR : longWord;
    TRISDSET : longWord;
    TRISDINV : longWord;
    PORTDbits : TPORTD_PORTD;
    PORTD : longWord;
    PORTDCLR : longWord;
    PORTDSET : longWord;
    PORTDINV : longWord;
    LATDbits : TPORTD_LATD;
    LATD : longWord;
    LATDCLR : longWord;
    LATDSET : longWord;
    LATDINV : longWord;
    ODCDbits : TPORTD_ODCD;
    ODCD : longWord;
    ODCDCLR : longWord;
    ODCDSET : longWord;
    ODCDINV : longWord;
  end;
  TPORTE_TRISE = record
  private
    function  getTRISE0 : TBits_1; assembler; nostackframe; inline;
    function  getTRISE1 : TBits_1; assembler; nostackframe; inline;
    function  getTRISE2 : TBits_1; assembler; nostackframe; inline;
    function  getTRISE3 : TBits_1; assembler; nostackframe; inline;
    function  getTRISE4 : TBits_1; assembler; nostackframe; inline;
    function  getTRISE5 : TBits_1; assembler; nostackframe; inline;
    function  getTRISE6 : TBits_1; assembler; nostackframe; inline;
    function  getTRISE7 : TBits_1; assembler; nostackframe; inline;
    function  getTRISE8 : TBits_1; assembler; nostackframe; inline;
    function  getTRISE9 : TBits_1; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setTRISE0(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTRISE1(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTRISE2(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTRISE3(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTRISE4(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTRISE5(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTRISE6(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTRISE7(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTRISE8(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTRISE9(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearTRISE0;
    procedure clearTRISE1;
    procedure clearTRISE2;
    procedure clearTRISE3;
    procedure clearTRISE4;
    procedure clearTRISE5;
    procedure clearTRISE6;
    procedure clearTRISE7;
    procedure clearTRISE8;
    procedure clearTRISE9;
    procedure setTRISE0;
    procedure setTRISE1;
    procedure setTRISE2;
    procedure setTRISE3;
    procedure setTRISE4;
    procedure setTRISE5;
    procedure setTRISE6;
    procedure setTRISE7;
    procedure setTRISE8;
    procedure setTRISE9;
    property TRISE0 : TBits_1 read getTRISE0 write setTRISE0;
    property TRISE1 : TBits_1 read getTRISE1 write setTRISE1;
    property TRISE2 : TBits_1 read getTRISE2 write setTRISE2;
    property TRISE3 : TBits_1 read getTRISE3 write setTRISE3;
    property TRISE4 : TBits_1 read getTRISE4 write setTRISE4;
    property TRISE5 : TBits_1 read getTRISE5 write setTRISE5;
    property TRISE6 : TBits_1 read getTRISE6 write setTRISE6;
    property TRISE7 : TBits_1 read getTRISE7 write setTRISE7;
    property TRISE8 : TBits_1 read getTRISE8 write setTRISE8;
    property TRISE9 : TBits_1 read getTRISE9 write setTRISE9;
    property w : TBits_32 read getw write setw;
  end;
  TPORTE_PORTE = record
  private
    function  getRE0 : TBits_1; assembler; nostackframe; inline;
    function  getRE1 : TBits_1; assembler; nostackframe; inline;
    function  getRE2 : TBits_1; assembler; nostackframe; inline;
    function  getRE3 : TBits_1; assembler; nostackframe; inline;
    function  getRE4 : TBits_1; assembler; nostackframe; inline;
    function  getRE5 : TBits_1; assembler; nostackframe; inline;
    function  getRE6 : TBits_1; assembler; nostackframe; inline;
    function  getRE7 : TBits_1; assembler; nostackframe; inline;
    function  getRE8 : TBits_1; assembler; nostackframe; inline;
    function  getRE9 : TBits_1; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setRE0(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRE1(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRE2(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRE3(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRE4(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRE5(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRE6(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRE7(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRE8(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRE9(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearRE0;
    procedure clearRE1;
    procedure clearRE2;
    procedure clearRE3;
    procedure clearRE4;
    procedure clearRE5;
    procedure clearRE6;
    procedure clearRE7;
    procedure clearRE8;
    procedure clearRE9;
    procedure setRE0;
    procedure setRE1;
    procedure setRE2;
    procedure setRE3;
    procedure setRE4;
    procedure setRE5;
    procedure setRE6;
    procedure setRE7;
    procedure setRE8;
    procedure setRE9;
    property RE0 : TBits_1 read getRE0 write setRE0;
    property RE1 : TBits_1 read getRE1 write setRE1;
    property RE2 : TBits_1 read getRE2 write setRE2;
    property RE3 : TBits_1 read getRE3 write setRE3;
    property RE4 : TBits_1 read getRE4 write setRE4;
    property RE5 : TBits_1 read getRE5 write setRE5;
    property RE6 : TBits_1 read getRE6 write setRE6;
    property RE7 : TBits_1 read getRE7 write setRE7;
    property RE8 : TBits_1 read getRE8 write setRE8;
    property RE9 : TBits_1 read getRE9 write setRE9;
    property w : TBits_32 read getw write setw;
  end;
  TPortE_bits=(RE0=0,RE1=1,RE2=2,RE3=3,RE4=4,RE5=5,RE6=6,RE7=7,RE8=8,RE9=9);
  TPortE_bitset = set of TPortE_bits;
  TPORTE_LATE = record
  private
    function  getLATE0 : TBits_1; assembler; nostackframe; inline;
    function  getLATE1 : TBits_1; assembler; nostackframe; inline;
    function  getLATE2 : TBits_1; assembler; nostackframe; inline;
    function  getLATE3 : TBits_1; assembler; nostackframe; inline;
    function  getLATE4 : TBits_1; assembler; nostackframe; inline;
    function  getLATE5 : TBits_1; assembler; nostackframe; inline;
    function  getLATE6 : TBits_1; assembler; nostackframe; inline;
    function  getLATE7 : TBits_1; assembler; nostackframe; inline;
    function  getLATE8 : TBits_1; assembler; nostackframe; inline;
    function  getLATE9 : TBits_1; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setLATE0(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setLATE1(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setLATE2(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setLATE3(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setLATE4(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setLATE5(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setLATE6(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setLATE7(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setLATE8(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setLATE9(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearLATE0;
    procedure clearLATE1;
    procedure clearLATE2;
    procedure clearLATE3;
    procedure clearLATE4;
    procedure clearLATE5;
    procedure clearLATE6;
    procedure clearLATE7;
    procedure clearLATE8;
    procedure clearLATE9;
    procedure setLATE0;
    procedure setLATE1;
    procedure setLATE2;
    procedure setLATE3;
    procedure setLATE4;
    procedure setLATE5;
    procedure setLATE6;
    procedure setLATE7;
    procedure setLATE8;
    procedure setLATE9;
    property LATE0 : TBits_1 read getLATE0 write setLATE0;
    property LATE1 : TBits_1 read getLATE1 write setLATE1;
    property LATE2 : TBits_1 read getLATE2 write setLATE2;
    property LATE3 : TBits_1 read getLATE3 write setLATE3;
    property LATE4 : TBits_1 read getLATE4 write setLATE4;
    property LATE5 : TBits_1 read getLATE5 write setLATE5;
    property LATE6 : TBits_1 read getLATE6 write setLATE6;
    property LATE7 : TBits_1 read getLATE7 write setLATE7;
    property LATE8 : TBits_1 read getLATE8 write setLATE8;
    property LATE9 : TBits_1 read getLATE9 write setLATE9;
    property w : TBits_32 read getw write setw;
  end;
  TPORTE_ODCE = record
  private
    function  getODCE0 : TBits_1; assembler; nostackframe; inline;
    function  getODCE1 : TBits_1; assembler; nostackframe; inline;
    function  getODCE2 : TBits_1; assembler; nostackframe; inline;
    function  getODCE3 : TBits_1; assembler; nostackframe; inline;
    function  getODCE4 : TBits_1; assembler; nostackframe; inline;
    function  getODCE5 : TBits_1; assembler; nostackframe; inline;
    function  getODCE6 : TBits_1; assembler; nostackframe; inline;
    function  getODCE7 : TBits_1; assembler; nostackframe; inline;
    function  getODCE8 : TBits_1; assembler; nostackframe; inline;
    function  getODCE9 : TBits_1; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setODCE0(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setODCE1(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setODCE2(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setODCE3(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setODCE4(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setODCE5(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setODCE6(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setODCE7(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setODCE8(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setODCE9(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearODCE0;
    procedure clearODCE1;
    procedure clearODCE2;
    procedure clearODCE3;
    procedure clearODCE4;
    procedure clearODCE5;
    procedure clearODCE6;
    procedure clearODCE7;
    procedure clearODCE8;
    procedure clearODCE9;
    procedure setODCE0;
    procedure setODCE1;
    procedure setODCE2;
    procedure setODCE3;
    procedure setODCE4;
    procedure setODCE5;
    procedure setODCE6;
    procedure setODCE7;
    procedure setODCE8;
    procedure setODCE9;
    property ODCE0 : TBits_1 read getODCE0 write setODCE0;
    property ODCE1 : TBits_1 read getODCE1 write setODCE1;
    property ODCE2 : TBits_1 read getODCE2 write setODCE2;
    property ODCE3 : TBits_1 read getODCE3 write setODCE3;
    property ODCE4 : TBits_1 read getODCE4 write setODCE4;
    property ODCE5 : TBits_1 read getODCE5 write setODCE5;
    property ODCE6 : TBits_1 read getODCE6 write setODCE6;
    property ODCE7 : TBits_1 read getODCE7 write setODCE7;
    property ODCE8 : TBits_1 read getODCE8 write setODCE8;
    property ODCE9 : TBits_1 read getODCE9 write setODCE9;
    property w : TBits_32 read getw write setw;
  end;
type
  TPORTERegisters = record
    TRISEbits : TPORTE_TRISE;
    TRISE : longWord;
    TRISECLR : longWord;
    TRISESET : longWord;
    TRISEINV : longWord;
    PORTEbits : TPORTE_PORTE;
    PORTE : longWord;
    PORTECLR : longWord;
    PORTESET : longWord;
    PORTEINV : longWord;
    LATEbits : TPORTE_LATE;
    LATE : longWord;
    LATECLR : longWord;
    LATESET : longWord;
    LATEINV : longWord;
    ODCEbits : TPORTE_ODCE;
    ODCE : longWord;
    ODCECLR : longWord;
    ODCESET : longWord;
    ODCEINV : longWord;
  end;
  TPORTF_TRISF = record
  private
    function  getTRISF0 : TBits_1; assembler; nostackframe; inline;
    function  getTRISF1 : TBits_1; assembler; nostackframe; inline;
    function  getTRISF12 : TBits_1; assembler; nostackframe; inline;
    function  getTRISF13 : TBits_1; assembler; nostackframe; inline;
    function  getTRISF2 : TBits_1; assembler; nostackframe; inline;
    function  getTRISF3 : TBits_1; assembler; nostackframe; inline;
    function  getTRISF4 : TBits_1; assembler; nostackframe; inline;
    function  getTRISF5 : TBits_1; assembler; nostackframe; inline;
    function  getTRISF8 : TBits_1; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setTRISF0(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTRISF1(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTRISF12(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTRISF13(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTRISF2(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTRISF3(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTRISF4(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTRISF5(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTRISF8(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearTRISF0;
    procedure clearTRISF12;
    procedure clearTRISF13;
    procedure clearTRISF1;
    procedure clearTRISF2;
    procedure clearTRISF3;
    procedure clearTRISF4;
    procedure clearTRISF5;
    procedure clearTRISF8;
    procedure setTRISF0;
    procedure setTRISF12;
    procedure setTRISF13;
    procedure setTRISF1;
    procedure setTRISF2;
    procedure setTRISF3;
    procedure setTRISF4;
    procedure setTRISF5;
    procedure setTRISF8;
    property TRISF0 : TBits_1 read getTRISF0 write setTRISF0;
    property TRISF1 : TBits_1 read getTRISF1 write setTRISF1;
    property TRISF12 : TBits_1 read getTRISF12 write setTRISF12;
    property TRISF13 : TBits_1 read getTRISF13 write setTRISF13;
    property TRISF2 : TBits_1 read getTRISF2 write setTRISF2;
    property TRISF3 : TBits_1 read getTRISF3 write setTRISF3;
    property TRISF4 : TBits_1 read getTRISF4 write setTRISF4;
    property TRISF5 : TBits_1 read getTRISF5 write setTRISF5;
    property TRISF8 : TBits_1 read getTRISF8 write setTRISF8;
    property w : TBits_32 read getw write setw;
  end;
  TPORTF_PORTF = record
  private
    function  getRF0 : TBits_1; assembler; nostackframe; inline;
    function  getRF1 : TBits_1; assembler; nostackframe; inline;
    function  getRF12 : TBits_1; assembler; nostackframe; inline;
    function  getRF13 : TBits_1; assembler; nostackframe; inline;
    function  getRF2 : TBits_1; assembler; nostackframe; inline;
    function  getRF3 : TBits_1; assembler; nostackframe; inline;
    function  getRF4 : TBits_1; assembler; nostackframe; inline;
    function  getRF5 : TBits_1; assembler; nostackframe; inline;
    function  getRF8 : TBits_1; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setRF0(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRF1(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRF12(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRF13(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRF2(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRF3(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRF4(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRF5(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRF8(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearRF0;
    procedure clearRF12;
    procedure clearRF13;
    procedure clearRF1;
    procedure clearRF2;
    procedure clearRF3;
    procedure clearRF4;
    procedure clearRF5;
    procedure clearRF8;
    procedure setRF0;
    procedure setRF12;
    procedure setRF13;
    procedure setRF1;
    procedure setRF2;
    procedure setRF3;
    procedure setRF4;
    procedure setRF5;
    procedure setRF8;
    property RF0 : TBits_1 read getRF0 write setRF0;
    property RF1 : TBits_1 read getRF1 write setRF1;
    property RF12 : TBits_1 read getRF12 write setRF12;
    property RF13 : TBits_1 read getRF13 write setRF13;
    property RF2 : TBits_1 read getRF2 write setRF2;
    property RF3 : TBits_1 read getRF3 write setRF3;
    property RF4 : TBits_1 read getRF4 write setRF4;
    property RF5 : TBits_1 read getRF5 write setRF5;
    property RF8 : TBits_1 read getRF8 write setRF8;
    property w : TBits_32 read getw write setw;
  end;
  TPortF_bits=(RF0=0,RF1=1,RF2=2,RF3=3,RF4=4,RF5=5,RF8=8,RF12=12,RF13=13);
  TPortF_bitset = set of TPortF_bits;
  TPORTF_LATF = record
  private
    function  getLATF0 : TBits_1; assembler; nostackframe; inline;
    function  getLATF1 : TBits_1; assembler; nostackframe; inline;
    function  getLATF12 : TBits_1; assembler; nostackframe; inline;
    function  getLATF13 : TBits_1; assembler; nostackframe; inline;
    function  getLATF2 : TBits_1; assembler; nostackframe; inline;
    function  getLATF3 : TBits_1; assembler; nostackframe; inline;
    function  getLATF4 : TBits_1; assembler; nostackframe; inline;
    function  getLATF5 : TBits_1; assembler; nostackframe; inline;
    function  getLATF8 : TBits_1; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setLATF0(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setLATF1(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setLATF12(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setLATF13(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setLATF2(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setLATF3(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setLATF4(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setLATF5(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setLATF8(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearLATF0;
    procedure clearLATF12;
    procedure clearLATF13;
    procedure clearLATF1;
    procedure clearLATF2;
    procedure clearLATF3;
    procedure clearLATF4;
    procedure clearLATF5;
    procedure clearLATF8;
    procedure setLATF0;
    procedure setLATF12;
    procedure setLATF13;
    procedure setLATF1;
    procedure setLATF2;
    procedure setLATF3;
    procedure setLATF4;
    procedure setLATF5;
    procedure setLATF8;
    property LATF0 : TBits_1 read getLATF0 write setLATF0;
    property LATF1 : TBits_1 read getLATF1 write setLATF1;
    property LATF12 : TBits_1 read getLATF12 write setLATF12;
    property LATF13 : TBits_1 read getLATF13 write setLATF13;
    property LATF2 : TBits_1 read getLATF2 write setLATF2;
    property LATF3 : TBits_1 read getLATF3 write setLATF3;
    property LATF4 : TBits_1 read getLATF4 write setLATF4;
    property LATF5 : TBits_1 read getLATF5 write setLATF5;
    property LATF8 : TBits_1 read getLATF8 write setLATF8;
    property w : TBits_32 read getw write setw;
  end;
  TPORTF_ODCF = record
  private
    function  getODCF0 : TBits_1; assembler; nostackframe; inline;
    function  getODCF1 : TBits_1; assembler; nostackframe; inline;
    function  getODCF12 : TBits_1; assembler; nostackframe; inline;
    function  getODCF13 : TBits_1; assembler; nostackframe; inline;
    function  getODCF2 : TBits_1; assembler; nostackframe; inline;
    function  getODCF3 : TBits_1; assembler; nostackframe; inline;
    function  getODCF4 : TBits_1; assembler; nostackframe; inline;
    function  getODCF5 : TBits_1; assembler; nostackframe; inline;
    function  getODCF8 : TBits_1; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setODCF0(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setODCF1(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setODCF12(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setODCF13(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setODCF2(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setODCF3(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setODCF4(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setODCF5(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setODCF8(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearODCF0;
    procedure clearODCF12;
    procedure clearODCF13;
    procedure clearODCF1;
    procedure clearODCF2;
    procedure clearODCF3;
    procedure clearODCF4;
    procedure clearODCF5;
    procedure clearODCF8;
    procedure setODCF0;
    procedure setODCF12;
    procedure setODCF13;
    procedure setODCF1;
    procedure setODCF2;
    procedure setODCF3;
    procedure setODCF4;
    procedure setODCF5;
    procedure setODCF8;
    property ODCF0 : TBits_1 read getODCF0 write setODCF0;
    property ODCF1 : TBits_1 read getODCF1 write setODCF1;
    property ODCF12 : TBits_1 read getODCF12 write setODCF12;
    property ODCF13 : TBits_1 read getODCF13 write setODCF13;
    property ODCF2 : TBits_1 read getODCF2 write setODCF2;
    property ODCF3 : TBits_1 read getODCF3 write setODCF3;
    property ODCF4 : TBits_1 read getODCF4 write setODCF4;
    property ODCF5 : TBits_1 read getODCF5 write setODCF5;
    property ODCF8 : TBits_1 read getODCF8 write setODCF8;
    property w : TBits_32 read getw write setw;
  end;
type
  TPORTFRegisters = record
    TRISFbits : TPORTF_TRISF;
    TRISF : longWord;
    TRISFCLR : longWord;
    TRISFSET : longWord;
    TRISFINV : longWord;
    PORTFbits : TPORTF_PORTF;
    PORTF : longWord;
    PORTFCLR : longWord;
    PORTFSET : longWord;
    PORTFINV : longWord;
    LATFbits : TPORTF_LATF;
    LATF : longWord;
    LATFCLR : longWord;
    LATFSET : longWord;
    LATFINV : longWord;
    ODCFbits : TPORTF_ODCF;
    ODCF : longWord;
    ODCFCLR : longWord;
    ODCFSET : longWord;
    ODCFINV : longWord;
  end;
  TPORTG_TRISG = record
  private
    function  getTRISG0 : TBits_1; assembler; nostackframe; inline;
    function  getTRISG1 : TBits_1; assembler; nostackframe; inline;
    function  getTRISG12 : TBits_1; assembler; nostackframe; inline;
    function  getTRISG13 : TBits_1; assembler; nostackframe; inline;
    function  getTRISG14 : TBits_1; assembler; nostackframe; inline;
    function  getTRISG15 : TBits_1; assembler; nostackframe; inline;
    function  getTRISG2 : TBits_1; assembler; nostackframe; inline;
    function  getTRISG3 : TBits_1; assembler; nostackframe; inline;
    function  getTRISG6 : TBits_1; assembler; nostackframe; inline;
    function  getTRISG7 : TBits_1; assembler; nostackframe; inline;
    function  getTRISG8 : TBits_1; assembler; nostackframe; inline;
    function  getTRISG9 : TBits_1; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setTRISG0(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTRISG1(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTRISG12(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTRISG13(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTRISG14(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTRISG15(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTRISG2(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTRISG3(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTRISG6(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTRISG7(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTRISG8(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTRISG9(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearTRISG0;
    procedure clearTRISG12;
    procedure clearTRISG13;
    procedure clearTRISG14;
    procedure clearTRISG15;
    procedure clearTRISG1;
    procedure clearTRISG2;
    procedure clearTRISG3;
    procedure clearTRISG6;
    procedure clearTRISG7;
    procedure clearTRISG8;
    procedure clearTRISG9;
    procedure setTRISG0;
    procedure setTRISG12;
    procedure setTRISG13;
    procedure setTRISG14;
    procedure setTRISG15;
    procedure setTRISG1;
    procedure setTRISG2;
    procedure setTRISG3;
    procedure setTRISG6;
    procedure setTRISG7;
    procedure setTRISG8;
    procedure setTRISG9;
    property TRISG0 : TBits_1 read getTRISG0 write setTRISG0;
    property TRISG1 : TBits_1 read getTRISG1 write setTRISG1;
    property TRISG12 : TBits_1 read getTRISG12 write setTRISG12;
    property TRISG13 : TBits_1 read getTRISG13 write setTRISG13;
    property TRISG14 : TBits_1 read getTRISG14 write setTRISG14;
    property TRISG15 : TBits_1 read getTRISG15 write setTRISG15;
    property TRISG2 : TBits_1 read getTRISG2 write setTRISG2;
    property TRISG3 : TBits_1 read getTRISG3 write setTRISG3;
    property TRISG6 : TBits_1 read getTRISG6 write setTRISG6;
    property TRISG7 : TBits_1 read getTRISG7 write setTRISG7;
    property TRISG8 : TBits_1 read getTRISG8 write setTRISG8;
    property TRISG9 : TBits_1 read getTRISG9 write setTRISG9;
    property w : TBits_32 read getw write setw;
  end;
  TPORTG_PORTG = record
  private
    function  getRG0 : TBits_1; assembler; nostackframe; inline;
    function  getRG1 : TBits_1; assembler; nostackframe; inline;
    function  getRG12 : TBits_1; assembler; nostackframe; inline;
    function  getRG13 : TBits_1; assembler; nostackframe; inline;
    function  getRG14 : TBits_1; assembler; nostackframe; inline;
    function  getRG15 : TBits_1; assembler; nostackframe; inline;
    function  getRG2 : TBits_1; assembler; nostackframe; inline;
    function  getRG3 : TBits_1; assembler; nostackframe; inline;
    function  getRG6 : TBits_1; assembler; nostackframe; inline;
    function  getRG7 : TBits_1; assembler; nostackframe; inline;
    function  getRG8 : TBits_1; assembler; nostackframe; inline;
    function  getRG9 : TBits_1; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setRG0(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRG1(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRG12(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRG13(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRG14(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRG15(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRG2(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRG3(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRG6(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRG7(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRG8(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRG9(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearRG0;
    procedure clearRG12;
    procedure clearRG13;
    procedure clearRG14;
    procedure clearRG15;
    procedure clearRG1;
    procedure clearRG2;
    procedure clearRG3;
    procedure clearRG6;
    procedure clearRG7;
    procedure clearRG8;
    procedure clearRG9;
    procedure setRG0;
    procedure setRG12;
    procedure setRG13;
    procedure setRG14;
    procedure setRG15;
    procedure setRG1;
    procedure setRG2;
    procedure setRG3;
    procedure setRG6;
    procedure setRG7;
    procedure setRG8;
    procedure setRG9;
    property RG0 : TBits_1 read getRG0 write setRG0;
    property RG1 : TBits_1 read getRG1 write setRG1;
    property RG12 : TBits_1 read getRG12 write setRG12;
    property RG13 : TBits_1 read getRG13 write setRG13;
    property RG14 : TBits_1 read getRG14 write setRG14;
    property RG15 : TBits_1 read getRG15 write setRG15;
    property RG2 : TBits_1 read getRG2 write setRG2;
    property RG3 : TBits_1 read getRG3 write setRG3;
    property RG6 : TBits_1 read getRG6 write setRG6;
    property RG7 : TBits_1 read getRG7 write setRG7;
    property RG8 : TBits_1 read getRG8 write setRG8;
    property RG9 : TBits_1 read getRG9 write setRG9;
    property w : TBits_32 read getw write setw;
  end;
  TPortG_bits=(RG0=0,RG1=1,RG2=2,RG3=3,RG6=6,RG7=7,RG8=8,RG9=9,RG12=12,RG13=13,RG14=14,RG15=15);
  TPortG_bitset = set of TPortG_bits;
  TPORTG_LATG = record
  private
    function  getLATG0 : TBits_1; assembler; nostackframe; inline;
    function  getLATG1 : TBits_1; assembler; nostackframe; inline;
    function  getLATG12 : TBits_1; assembler; nostackframe; inline;
    function  getLATG13 : TBits_1; assembler; nostackframe; inline;
    function  getLATG14 : TBits_1; assembler; nostackframe; inline;
    function  getLATG15 : TBits_1; assembler; nostackframe; inline;
    function  getLATG2 : TBits_1; assembler; nostackframe; inline;
    function  getLATG3 : TBits_1; assembler; nostackframe; inline;
    function  getLATG6 : TBits_1; assembler; nostackframe; inline;
    function  getLATG7 : TBits_1; assembler; nostackframe; inline;
    function  getLATG8 : TBits_1; assembler; nostackframe; inline;
    function  getLATG9 : TBits_1; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setLATG0(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setLATG1(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setLATG12(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setLATG13(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setLATG14(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setLATG15(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setLATG2(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setLATG3(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setLATG6(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setLATG7(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setLATG8(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setLATG9(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearLATG0;
    procedure clearLATG12;
    procedure clearLATG13;
    procedure clearLATG14;
    procedure clearLATG15;
    procedure clearLATG1;
    procedure clearLATG2;
    procedure clearLATG3;
    procedure clearLATG6;
    procedure clearLATG7;
    procedure clearLATG8;
    procedure clearLATG9;
    procedure setLATG0;
    procedure setLATG12;
    procedure setLATG13;
    procedure setLATG14;
    procedure setLATG15;
    procedure setLATG1;
    procedure setLATG2;
    procedure setLATG3;
    procedure setLATG6;
    procedure setLATG7;
    procedure setLATG8;
    procedure setLATG9;
    property LATG0 : TBits_1 read getLATG0 write setLATG0;
    property LATG1 : TBits_1 read getLATG1 write setLATG1;
    property LATG12 : TBits_1 read getLATG12 write setLATG12;
    property LATG13 : TBits_1 read getLATG13 write setLATG13;
    property LATG14 : TBits_1 read getLATG14 write setLATG14;
    property LATG15 : TBits_1 read getLATG15 write setLATG15;
    property LATG2 : TBits_1 read getLATG2 write setLATG2;
    property LATG3 : TBits_1 read getLATG3 write setLATG3;
    property LATG6 : TBits_1 read getLATG6 write setLATG6;
    property LATG7 : TBits_1 read getLATG7 write setLATG7;
    property LATG8 : TBits_1 read getLATG8 write setLATG8;
    property LATG9 : TBits_1 read getLATG9 write setLATG9;
    property w : TBits_32 read getw write setw;
  end;
  TPORTG_ODCG = record
  private
    function  getODCG0 : TBits_1; assembler; nostackframe; inline;
    function  getODCG1 : TBits_1; assembler; nostackframe; inline;
    function  getODCG12 : TBits_1; assembler; nostackframe; inline;
    function  getODCG13 : TBits_1; assembler; nostackframe; inline;
    function  getODCG14 : TBits_1; assembler; nostackframe; inline;
    function  getODCG15 : TBits_1; assembler; nostackframe; inline;
    function  getODCG2 : TBits_1; assembler; nostackframe; inline;
    function  getODCG3 : TBits_1; assembler; nostackframe; inline;
    function  getODCG6 : TBits_1; assembler; nostackframe; inline;
    function  getODCG7 : TBits_1; assembler; nostackframe; inline;
    function  getODCG8 : TBits_1; assembler; nostackframe; inline;
    function  getODCG9 : TBits_1; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setODCG0(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setODCG1(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setODCG12(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setODCG13(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setODCG14(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setODCG15(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setODCG2(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setODCG3(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setODCG6(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setODCG7(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setODCG8(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setODCG9(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearODCG0;
    procedure clearODCG12;
    procedure clearODCG13;
    procedure clearODCG14;
    procedure clearODCG15;
    procedure clearODCG1;
    procedure clearODCG2;
    procedure clearODCG3;
    procedure clearODCG6;
    procedure clearODCG7;
    procedure clearODCG8;
    procedure clearODCG9;
    procedure setODCG0;
    procedure setODCG12;
    procedure setODCG13;
    procedure setODCG14;
    procedure setODCG15;
    procedure setODCG1;
    procedure setODCG2;
    procedure setODCG3;
    procedure setODCG6;
    procedure setODCG7;
    procedure setODCG8;
    procedure setODCG9;
    property ODCG0 : TBits_1 read getODCG0 write setODCG0;
    property ODCG1 : TBits_1 read getODCG1 write setODCG1;
    property ODCG12 : TBits_1 read getODCG12 write setODCG12;
    property ODCG13 : TBits_1 read getODCG13 write setODCG13;
    property ODCG14 : TBits_1 read getODCG14 write setODCG14;
    property ODCG15 : TBits_1 read getODCG15 write setODCG15;
    property ODCG2 : TBits_1 read getODCG2 write setODCG2;
    property ODCG3 : TBits_1 read getODCG3 write setODCG3;
    property ODCG6 : TBits_1 read getODCG6 write setODCG6;
    property ODCG7 : TBits_1 read getODCG7 write setODCG7;
    property ODCG8 : TBits_1 read getODCG8 write setODCG8;
    property ODCG9 : TBits_1 read getODCG9 write setODCG9;
    property w : TBits_32 read getw write setw;
  end;
  TPORTG_CNCON = record
  private
    function  getON : TBits_1; assembler; nostackframe; inline;
    function  getSIDL : TBits_1; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setON(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSIDL(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearON;
    procedure clearSIDL;
    procedure setON;
    procedure setSIDL;
    property ON : TBits_1 read getON write setON;
    property SIDL : TBits_1 read getSIDL write setSIDL;
    property w : TBits_32 read getw write setw;
  end;
  TPORTG_CNEN = record
  private
    function  getCNEN0 : TBits_1; assembler; nostackframe; inline;
    function  getCNEN1 : TBits_1; assembler; nostackframe; inline;
    function  getCNEN10 : TBits_1; assembler; nostackframe; inline;
    function  getCNEN11 : TBits_1; assembler; nostackframe; inline;
    function  getCNEN12 : TBits_1; assembler; nostackframe; inline;
    function  getCNEN13 : TBits_1; assembler; nostackframe; inline;
    function  getCNEN14 : TBits_1; assembler; nostackframe; inline;
    function  getCNEN15 : TBits_1; assembler; nostackframe; inline;
    function  getCNEN16 : TBits_1; assembler; nostackframe; inline;
    function  getCNEN17 : TBits_1; assembler; nostackframe; inline;
    function  getCNEN18 : TBits_1; assembler; nostackframe; inline;
    function  getCNEN19 : TBits_1; assembler; nostackframe; inline;
    function  getCNEN2 : TBits_1; assembler; nostackframe; inline;
    function  getCNEN20 : TBits_1; assembler; nostackframe; inline;
    function  getCNEN21 : TBits_1; assembler; nostackframe; inline;
    function  getCNEN3 : TBits_1; assembler; nostackframe; inline;
    function  getCNEN4 : TBits_1; assembler; nostackframe; inline;
    function  getCNEN5 : TBits_1; assembler; nostackframe; inline;
    function  getCNEN6 : TBits_1; assembler; nostackframe; inline;
    function  getCNEN7 : TBits_1; assembler; nostackframe; inline;
    function  getCNEN8 : TBits_1; assembler; nostackframe; inline;
    function  getCNEN9 : TBits_1; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setCNEN0(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCNEN1(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCNEN10(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCNEN11(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCNEN12(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCNEN13(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCNEN14(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCNEN15(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCNEN16(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCNEN17(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCNEN18(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCNEN19(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCNEN2(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCNEN20(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCNEN21(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCNEN3(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCNEN4(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCNEN5(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCNEN6(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCNEN7(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCNEN8(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCNEN9(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearCNEN0;
    procedure clearCNEN10;
    procedure clearCNEN11;
    procedure clearCNEN12;
    procedure clearCNEN13;
    procedure clearCNEN14;
    procedure clearCNEN15;
    procedure clearCNEN16;
    procedure clearCNEN17;
    procedure clearCNEN18;
    procedure clearCNEN19;
    procedure clearCNEN1;
    procedure clearCNEN20;
    procedure clearCNEN21;
    procedure clearCNEN2;
    procedure clearCNEN3;
    procedure clearCNEN4;
    procedure clearCNEN5;
    procedure clearCNEN6;
    procedure clearCNEN7;
    procedure clearCNEN8;
    procedure clearCNEN9;
    procedure setCNEN0;
    procedure setCNEN10;
    procedure setCNEN11;
    procedure setCNEN12;
    procedure setCNEN13;
    procedure setCNEN14;
    procedure setCNEN15;
    procedure setCNEN16;
    procedure setCNEN17;
    procedure setCNEN18;
    procedure setCNEN19;
    procedure setCNEN1;
    procedure setCNEN20;
    procedure setCNEN21;
    procedure setCNEN2;
    procedure setCNEN3;
    procedure setCNEN4;
    procedure setCNEN5;
    procedure setCNEN6;
    procedure setCNEN7;
    procedure setCNEN8;
    procedure setCNEN9;
    property CNEN0 : TBits_1 read getCNEN0 write setCNEN0;
    property CNEN1 : TBits_1 read getCNEN1 write setCNEN1;
    property CNEN10 : TBits_1 read getCNEN10 write setCNEN10;
    property CNEN11 : TBits_1 read getCNEN11 write setCNEN11;
    property CNEN12 : TBits_1 read getCNEN12 write setCNEN12;
    property CNEN13 : TBits_1 read getCNEN13 write setCNEN13;
    property CNEN14 : TBits_1 read getCNEN14 write setCNEN14;
    property CNEN15 : TBits_1 read getCNEN15 write setCNEN15;
    property CNEN16 : TBits_1 read getCNEN16 write setCNEN16;
    property CNEN17 : TBits_1 read getCNEN17 write setCNEN17;
    property CNEN18 : TBits_1 read getCNEN18 write setCNEN18;
    property CNEN19 : TBits_1 read getCNEN19 write setCNEN19;
    property CNEN2 : TBits_1 read getCNEN2 write setCNEN2;
    property CNEN20 : TBits_1 read getCNEN20 write setCNEN20;
    property CNEN21 : TBits_1 read getCNEN21 write setCNEN21;
    property CNEN3 : TBits_1 read getCNEN3 write setCNEN3;
    property CNEN4 : TBits_1 read getCNEN4 write setCNEN4;
    property CNEN5 : TBits_1 read getCNEN5 write setCNEN5;
    property CNEN6 : TBits_1 read getCNEN6 write setCNEN6;
    property CNEN7 : TBits_1 read getCNEN7 write setCNEN7;
    property CNEN8 : TBits_1 read getCNEN8 write setCNEN8;
    property CNEN9 : TBits_1 read getCNEN9 write setCNEN9;
    property w : TBits_32 read getw write setw;
  end;
  TPORTG_CNPUE = record
  private
    function  getCNPUE0 : TBits_1; assembler; nostackframe; inline;
    function  getCNPUE1 : TBits_1; assembler; nostackframe; inline;
    function  getCNPUE10 : TBits_1; assembler; nostackframe; inline;
    function  getCNPUE11 : TBits_1; assembler; nostackframe; inline;
    function  getCNPUE12 : TBits_1; assembler; nostackframe; inline;
    function  getCNPUE13 : TBits_1; assembler; nostackframe; inline;
    function  getCNPUE14 : TBits_1; assembler; nostackframe; inline;
    function  getCNPUE15 : TBits_1; assembler; nostackframe; inline;
    function  getCNPUE16 : TBits_1; assembler; nostackframe; inline;
    function  getCNPUE17 : TBits_1; assembler; nostackframe; inline;
    function  getCNPUE18 : TBits_1; assembler; nostackframe; inline;
    function  getCNPUE19 : TBits_1; assembler; nostackframe; inline;
    function  getCNPUE2 : TBits_1; assembler; nostackframe; inline;
    function  getCNPUE20 : TBits_1; assembler; nostackframe; inline;
    function  getCNPUE21 : TBits_1; assembler; nostackframe; inline;
    function  getCNPUE3 : TBits_1; assembler; nostackframe; inline;
    function  getCNPUE4 : TBits_1; assembler; nostackframe; inline;
    function  getCNPUE5 : TBits_1; assembler; nostackframe; inline;
    function  getCNPUE6 : TBits_1; assembler; nostackframe; inline;
    function  getCNPUE7 : TBits_1; assembler; nostackframe; inline;
    function  getCNPUE8 : TBits_1; assembler; nostackframe; inline;
    function  getCNPUE9 : TBits_1; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setCNPUE0(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCNPUE1(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCNPUE10(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCNPUE11(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCNPUE12(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCNPUE13(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCNPUE14(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCNPUE15(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCNPUE16(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCNPUE17(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCNPUE18(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCNPUE19(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCNPUE2(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCNPUE20(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCNPUE21(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCNPUE3(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCNPUE4(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCNPUE5(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCNPUE6(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCNPUE7(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCNPUE8(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCNPUE9(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearCNPUE0;
    procedure clearCNPUE10;
    procedure clearCNPUE11;
    procedure clearCNPUE12;
    procedure clearCNPUE13;
    procedure clearCNPUE14;
    procedure clearCNPUE15;
    procedure clearCNPUE16;
    procedure clearCNPUE17;
    procedure clearCNPUE18;
    procedure clearCNPUE19;
    procedure clearCNPUE1;
    procedure clearCNPUE20;
    procedure clearCNPUE21;
    procedure clearCNPUE2;
    procedure clearCNPUE3;
    procedure clearCNPUE4;
    procedure clearCNPUE5;
    procedure clearCNPUE6;
    procedure clearCNPUE7;
    procedure clearCNPUE8;
    procedure clearCNPUE9;
    procedure setCNPUE0;
    procedure setCNPUE10;
    procedure setCNPUE11;
    procedure setCNPUE12;
    procedure setCNPUE13;
    procedure setCNPUE14;
    procedure setCNPUE15;
    procedure setCNPUE16;
    procedure setCNPUE17;
    procedure setCNPUE18;
    procedure setCNPUE19;
    procedure setCNPUE1;
    procedure setCNPUE20;
    procedure setCNPUE21;
    procedure setCNPUE2;
    procedure setCNPUE3;
    procedure setCNPUE4;
    procedure setCNPUE5;
    procedure setCNPUE6;
    procedure setCNPUE7;
    procedure setCNPUE8;
    procedure setCNPUE9;
    property CNPUE0 : TBits_1 read getCNPUE0 write setCNPUE0;
    property CNPUE1 : TBits_1 read getCNPUE1 write setCNPUE1;
    property CNPUE10 : TBits_1 read getCNPUE10 write setCNPUE10;
    property CNPUE11 : TBits_1 read getCNPUE11 write setCNPUE11;
    property CNPUE12 : TBits_1 read getCNPUE12 write setCNPUE12;
    property CNPUE13 : TBits_1 read getCNPUE13 write setCNPUE13;
    property CNPUE14 : TBits_1 read getCNPUE14 write setCNPUE14;
    property CNPUE15 : TBits_1 read getCNPUE15 write setCNPUE15;
    property CNPUE16 : TBits_1 read getCNPUE16 write setCNPUE16;
    property CNPUE17 : TBits_1 read getCNPUE17 write setCNPUE17;
    property CNPUE18 : TBits_1 read getCNPUE18 write setCNPUE18;
    property CNPUE19 : TBits_1 read getCNPUE19 write setCNPUE19;
    property CNPUE2 : TBits_1 read getCNPUE2 write setCNPUE2;
    property CNPUE20 : TBits_1 read getCNPUE20 write setCNPUE20;
    property CNPUE21 : TBits_1 read getCNPUE21 write setCNPUE21;
    property CNPUE3 : TBits_1 read getCNPUE3 write setCNPUE3;
    property CNPUE4 : TBits_1 read getCNPUE4 write setCNPUE4;
    property CNPUE5 : TBits_1 read getCNPUE5 write setCNPUE5;
    property CNPUE6 : TBits_1 read getCNPUE6 write setCNPUE6;
    property CNPUE7 : TBits_1 read getCNPUE7 write setCNPUE7;
    property CNPUE8 : TBits_1 read getCNPUE8 write setCNPUE8;
    property CNPUE9 : TBits_1 read getCNPUE9 write setCNPUE9;
    property w : TBits_32 read getw write setw;
  end;
type
  TPORTGRegisters = record
    TRISGbits : TPORTG_TRISG;
    TRISG : longWord;
    TRISGCLR : longWord;
    TRISGSET : longWord;
    TRISGINV : longWord;
    PORTGbits : TPORTG_PORTG;
    PORTG : longWord;
    PORTGCLR : longWord;
    PORTGSET : longWord;
    PORTGINV : longWord;
    LATGbits : TPORTG_LATG;
    LATG : longWord;
    LATGCLR : longWord;
    LATGSET : longWord;
    LATGINV : longWord;
    ODCGbits : TPORTG_ODCG;
    ODCG : longWord;
    ODCGCLR : longWord;
    ODCGSET : longWord;
    ODCGINV : longWord;
    CNCONbits : TPORTG_CNCON;
    CNCON : longWord;
    CNCONCLR : longWord;
    CNCONSET : longWord;
    CNCONINV : longWord;
    CNENbits : TPORTG_CNEN;
    CNEN : longWord;
    CNENCLR : longWord;
    CNENSET : longWord;
    CNENINV : longWord;
    CNPUEbits : TPORTG_CNPUE;
    CNPUE : longWord;
    CNPUECLR : longWord;
    CNPUESET : longWord;
    CNPUEINV : longWord;
  end;
  TCAN1_C1CON = record
  private
    function  getABAT : TBits_1; assembler; nostackframe; inline;
    function  getCANBUSY : TBits_1; assembler; nostackframe; inline;
    function  getCANCAP : TBits_1; assembler; nostackframe; inline;
    function  getDNCNT : TBits_5; assembler; nostackframe; inline;
    function  getON : TBits_1; assembler; nostackframe; inline;
    function  getOPMOD : TBits_3; assembler; nostackframe; inline;
    function  getREQOP : TBits_3; assembler; nostackframe; inline;
    function  getSIDL : TBits_1; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setABAT(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCANBUSY(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCANCAP(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setDNCNT(thebits : TBits_5); assembler; nostackframe; inline;
    procedure setON(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setOPMOD(thebits : TBits_3); assembler; nostackframe; inline;
    procedure setREQOP(thebits : TBits_3); assembler; nostackframe; inline;
    procedure setSIDL(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearABAT;
    procedure clearCANBUSY;
    procedure clearCANCAP;
    procedure clearON;
    procedure clearSIDL;
    procedure setABAT;
    procedure setCANBUSY;
    procedure setCANCAP;
    procedure setON;
    procedure setSIDL;
    property ABAT : TBits_1 read getABAT write setABAT;
    property CANBUSY : TBits_1 read getCANBUSY write setCANBUSY;
    property CANCAP : TBits_1 read getCANCAP write setCANCAP;
    property DNCNT : TBits_5 read getDNCNT write setDNCNT;
    property ON : TBits_1 read getON write setON;
    property OPMOD : TBits_3 read getOPMOD write setOPMOD;
    property REQOP : TBits_3 read getREQOP write setREQOP;
    property SIDL : TBits_1 read getSIDL write setSIDL;
    property w : TBits_32 read getw write setw;
  end;
  TCAN1_C1CFG = record
  private
    function  getBRP : TBits_6; assembler; nostackframe; inline;
    function  getPRSEG : TBits_3; assembler; nostackframe; inline;
    function  getSAM : TBits_1; assembler; nostackframe; inline;
    function  getSEG1PH : TBits_3; assembler; nostackframe; inline;
    function  getSEG2PH : TBits_3; assembler; nostackframe; inline;
    function  getSEG2PHTS : TBits_1; assembler; nostackframe; inline;
    function  getSJW : TBits_2; assembler; nostackframe; inline;
    function  getWAKFIL : TBits_1; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setBRP(thebits : TBits_6); assembler; nostackframe; inline;
    procedure setPRSEG(thebits : TBits_3); assembler; nostackframe; inline;
    procedure setSAM(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSEG1PH(thebits : TBits_3); assembler; nostackframe; inline;
    procedure setSEG2PH(thebits : TBits_3); assembler; nostackframe; inline;
    procedure setSEG2PHTS(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSJW(thebits : TBits_2); assembler; nostackframe; inline;
    procedure setWAKFIL(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearSAM;
    procedure clearSEG2PHTS;
    procedure clearWAKFIL;
    procedure setSAM;
    procedure setSEG2PHTS;
    procedure setWAKFIL;
    property BRP : TBits_6 read getBRP write setBRP;
    property PRSEG : TBits_3 read getPRSEG write setPRSEG;
    property SAM : TBits_1 read getSAM write setSAM;
    property SEG1PH : TBits_3 read getSEG1PH write setSEG1PH;
    property SEG2PH : TBits_3 read getSEG2PH write setSEG2PH;
    property SEG2PHTS : TBits_1 read getSEG2PHTS write setSEG2PHTS;
    property SJW : TBits_2 read getSJW write setSJW;
    property WAKFIL : TBits_1 read getWAKFIL write setWAKFIL;
    property w : TBits_32 read getw write setw;
  end;
  TCAN1_C1INT = record
  private
    function  getCERRIE : TBits_1; assembler; nostackframe; inline;
    function  getCERRIF : TBits_1; assembler; nostackframe; inline;
    function  getCTMRIE : TBits_1; assembler; nostackframe; inline;
    function  getCTMRIF : TBits_1; assembler; nostackframe; inline;
    function  getIVRIE : TBits_1; assembler; nostackframe; inline;
    function  getIVRIF : TBits_1; assembler; nostackframe; inline;
    function  getMODIE : TBits_1; assembler; nostackframe; inline;
    function  getMODIF : TBits_1; assembler; nostackframe; inline;
    function  getRBIE : TBits_1; assembler; nostackframe; inline;
    function  getRBIF : TBits_1; assembler; nostackframe; inline;
    function  getRBOVIE : TBits_1; assembler; nostackframe; inline;
    function  getRBOVIF : TBits_1; assembler; nostackframe; inline;
    function  getSERRIE : TBits_1; assembler; nostackframe; inline;
    function  getSERRIF : TBits_1; assembler; nostackframe; inline;
    function  getTBIE : TBits_1; assembler; nostackframe; inline;
    function  getTBIF : TBits_1; assembler; nostackframe; inline;
    function  getWAKIE : TBits_1; assembler; nostackframe; inline;
    function  getWAKIF : TBits_1; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setCERRIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCERRIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCTMRIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCTMRIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setIVRIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setIVRIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setMODIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setMODIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRBIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRBIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRBOVIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRBOVIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSERRIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSERRIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTBIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTBIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setWAKIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setWAKIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearCERRIE;
    procedure clearCERRIF;
    procedure clearCTMRIE;
    procedure clearCTMRIF;
    procedure clearIVRIE;
    procedure clearIVRIF;
    procedure clearMODIE;
    procedure clearMODIF;
    procedure clearRBIE;
    procedure clearRBIF;
    procedure clearRBOVIE;
    procedure clearRBOVIF;
    procedure clearSERRIE;
    procedure clearSERRIF;
    procedure clearTBIE;
    procedure clearTBIF;
    procedure clearWAKIE;
    procedure clearWAKIF;
    procedure setCERRIE;
    procedure setCERRIF;
    procedure setCTMRIE;
    procedure setCTMRIF;
    procedure setIVRIE;
    procedure setIVRIF;
    procedure setMODIE;
    procedure setMODIF;
    procedure setRBIE;
    procedure setRBIF;
    procedure setRBOVIE;
    procedure setRBOVIF;
    procedure setSERRIE;
    procedure setSERRIF;
    procedure setTBIE;
    procedure setTBIF;
    procedure setWAKIE;
    procedure setWAKIF;
    property CERRIE : TBits_1 read getCERRIE write setCERRIE;
    property CERRIF : TBits_1 read getCERRIF write setCERRIF;
    property CTMRIE : TBits_1 read getCTMRIE write setCTMRIE;
    property CTMRIF : TBits_1 read getCTMRIF write setCTMRIF;
    property IVRIE : TBits_1 read getIVRIE write setIVRIE;
    property IVRIF : TBits_1 read getIVRIF write setIVRIF;
    property MODIE : TBits_1 read getMODIE write setMODIE;
    property MODIF : TBits_1 read getMODIF write setMODIF;
    property RBIE : TBits_1 read getRBIE write setRBIE;
    property RBIF : TBits_1 read getRBIF write setRBIF;
    property RBOVIE : TBits_1 read getRBOVIE write setRBOVIE;
    property RBOVIF : TBits_1 read getRBOVIF write setRBOVIF;
    property SERRIE : TBits_1 read getSERRIE write setSERRIE;
    property SERRIF : TBits_1 read getSERRIF write setSERRIF;
    property TBIE : TBits_1 read getTBIE write setTBIE;
    property TBIF : TBits_1 read getTBIF write setTBIF;
    property WAKIE : TBits_1 read getWAKIE write setWAKIE;
    property WAKIF : TBits_1 read getWAKIF write setWAKIF;
    property w : TBits_32 read getw write setw;
  end;
  TCAN1_C1VEC = record
  private
    function  getFILHIT : TBits_5; assembler; nostackframe; inline;
    function  getICODE : TBits_7; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setFILHIT(thebits : TBits_5); assembler; nostackframe; inline;
    procedure setICODE(thebits : TBits_7); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    property FILHIT : TBits_5 read getFILHIT write setFILHIT;
    property ICODE : TBits_7 read getICODE write setICODE;
    property w : TBits_32 read getw write setw;
  end;
  TCAN1_C1TREC = record
  private
    function  getEWARN : TBits_1; assembler; nostackframe; inline;
    function  getRERRCNT : TBits_8; assembler; nostackframe; inline;
    function  getRXBP : TBits_1; assembler; nostackframe; inline;
    function  getRXWARN : TBits_1; assembler; nostackframe; inline;
    function  getTERRCNT : TBits_8; assembler; nostackframe; inline;
    function  getTXBO : TBits_1; assembler; nostackframe; inline;
    function  getTXBP : TBits_1; assembler; nostackframe; inline;
    function  getTXWARN : TBits_1; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setEWARN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRERRCNT(thebits : TBits_8); assembler; nostackframe; inline;
    procedure setRXBP(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXWARN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTERRCNT(thebits : TBits_8); assembler; nostackframe; inline;
    procedure setTXBO(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXBP(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXWARN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearEWARN;
    procedure clearRXBP;
    procedure clearRXWARN;
    procedure clearTXBO;
    procedure clearTXBP;
    procedure clearTXWARN;
    procedure setEWARN;
    procedure setRXBP;
    procedure setRXWARN;
    procedure setTXBO;
    procedure setTXBP;
    procedure setTXWARN;
    property EWARN : TBits_1 read getEWARN write setEWARN;
    property RERRCNT : TBits_8 read getRERRCNT write setRERRCNT;
    property RXBP : TBits_1 read getRXBP write setRXBP;
    property RXWARN : TBits_1 read getRXWARN write setRXWARN;
    property TERRCNT : TBits_8 read getTERRCNT write setTERRCNT;
    property TXBO : TBits_1 read getTXBO write setTXBO;
    property TXBP : TBits_1 read getTXBP write setTXBP;
    property TXWARN : TBits_1 read getTXWARN write setTXWARN;
    property w : TBits_32 read getw write setw;
  end;
  TCAN1_C1FSTAT = record
  private
    function  getFIFOIP : TBits_32; assembler; nostackframe; inline;
    function  getFIFOIP0 : TBits_1; assembler; nostackframe; inline;
    function  getFIFOIP1 : TBits_1; assembler; nostackframe; inline;
    function  getFIFOIP10 : TBits_1; assembler; nostackframe; inline;
    function  getFIFOIP11 : TBits_1; assembler; nostackframe; inline;
    function  getFIFOIP12 : TBits_1; assembler; nostackframe; inline;
    function  getFIFOIP13 : TBits_1; assembler; nostackframe; inline;
    function  getFIFOIP14 : TBits_1; assembler; nostackframe; inline;
    function  getFIFOIP15 : TBits_1; assembler; nostackframe; inline;
    function  getFIFOIP16 : TBits_1; assembler; nostackframe; inline;
    function  getFIFOIP17 : TBits_1; assembler; nostackframe; inline;
    function  getFIFOIP18 : TBits_1; assembler; nostackframe; inline;
    function  getFIFOIP19 : TBits_1; assembler; nostackframe; inline;
    function  getFIFOIP2 : TBits_1; assembler; nostackframe; inline;
    function  getFIFOIP20 : TBits_1; assembler; nostackframe; inline;
    function  getFIFOIP21 : TBits_1; assembler; nostackframe; inline;
    function  getFIFOIP22 : TBits_1; assembler; nostackframe; inline;
    function  getFIFOIP23 : TBits_1; assembler; nostackframe; inline;
    function  getFIFOIP24 : TBits_1; assembler; nostackframe; inline;
    function  getFIFOIP25 : TBits_1; assembler; nostackframe; inline;
    function  getFIFOIP26 : TBits_1; assembler; nostackframe; inline;
    function  getFIFOIP27 : TBits_1; assembler; nostackframe; inline;
    function  getFIFOIP28 : TBits_1; assembler; nostackframe; inline;
    function  getFIFOIP29 : TBits_1; assembler; nostackframe; inline;
    function  getFIFOIP3 : TBits_1; assembler; nostackframe; inline;
    function  getFIFOIP30 : TBits_1; assembler; nostackframe; inline;
    function  getFIFOIP31 : TBits_1; assembler; nostackframe; inline;
    function  getFIFOIP4 : TBits_1; assembler; nostackframe; inline;
    function  getFIFOIP5 : TBits_1; assembler; nostackframe; inline;
    function  getFIFOIP6 : TBits_1; assembler; nostackframe; inline;
    function  getFIFOIP7 : TBits_1; assembler; nostackframe; inline;
    function  getFIFOIP8 : TBits_1; assembler; nostackframe; inline;
    function  getFIFOIP9 : TBits_1; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setFIFOIP(thebits : TBits_32); assembler; nostackframe; inline;
    procedure setFIFOIP0(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setFIFOIP1(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setFIFOIP10(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setFIFOIP11(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setFIFOIP12(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setFIFOIP13(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setFIFOIP14(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setFIFOIP15(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setFIFOIP16(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setFIFOIP17(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setFIFOIP18(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setFIFOIP19(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setFIFOIP2(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setFIFOIP20(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setFIFOIP21(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setFIFOIP22(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setFIFOIP23(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setFIFOIP24(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setFIFOIP25(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setFIFOIP26(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setFIFOIP27(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setFIFOIP28(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setFIFOIP29(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setFIFOIP3(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setFIFOIP30(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setFIFOIP31(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setFIFOIP4(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setFIFOIP5(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setFIFOIP6(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setFIFOIP7(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setFIFOIP8(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setFIFOIP9(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearFIFOIP0;
    procedure clearFIFOIP10;
    procedure clearFIFOIP11;
    procedure clearFIFOIP12;
    procedure clearFIFOIP13;
    procedure clearFIFOIP14;
    procedure clearFIFOIP15;
    procedure clearFIFOIP16;
    procedure clearFIFOIP17;
    procedure clearFIFOIP18;
    procedure clearFIFOIP19;
    procedure clearFIFOIP1;
    procedure clearFIFOIP20;
    procedure clearFIFOIP21;
    procedure clearFIFOIP22;
    procedure clearFIFOIP23;
    procedure clearFIFOIP24;
    procedure clearFIFOIP25;
    procedure clearFIFOIP26;
    procedure clearFIFOIP27;
    procedure clearFIFOIP28;
    procedure clearFIFOIP29;
    procedure clearFIFOIP2;
    procedure clearFIFOIP30;
    procedure clearFIFOIP31;
    procedure clearFIFOIP3;
    procedure clearFIFOIP4;
    procedure clearFIFOIP5;
    procedure clearFIFOIP6;
    procedure clearFIFOIP7;
    procedure clearFIFOIP8;
    procedure clearFIFOIP9;
    procedure setFIFOIP0;
    procedure setFIFOIP10;
    procedure setFIFOIP11;
    procedure setFIFOIP12;
    procedure setFIFOIP13;
    procedure setFIFOIP14;
    procedure setFIFOIP15;
    procedure setFIFOIP16;
    procedure setFIFOIP17;
    procedure setFIFOIP18;
    procedure setFIFOIP19;
    procedure setFIFOIP1;
    procedure setFIFOIP20;
    procedure setFIFOIP21;
    procedure setFIFOIP22;
    procedure setFIFOIP23;
    procedure setFIFOIP24;
    procedure setFIFOIP25;
    procedure setFIFOIP26;
    procedure setFIFOIP27;
    procedure setFIFOIP28;
    procedure setFIFOIP29;
    procedure setFIFOIP2;
    procedure setFIFOIP30;
    procedure setFIFOIP31;
    procedure setFIFOIP3;
    procedure setFIFOIP4;
    procedure setFIFOIP5;
    procedure setFIFOIP6;
    procedure setFIFOIP7;
    procedure setFIFOIP8;
    procedure setFIFOIP9;
    property FIFOIP : TBits_32 read getFIFOIP write setFIFOIP;
    property FIFOIP0 : TBits_1 read getFIFOIP0 write setFIFOIP0;
    property FIFOIP1 : TBits_1 read getFIFOIP1 write setFIFOIP1;
    property FIFOIP10 : TBits_1 read getFIFOIP10 write setFIFOIP10;
    property FIFOIP11 : TBits_1 read getFIFOIP11 write setFIFOIP11;
    property FIFOIP12 : TBits_1 read getFIFOIP12 write setFIFOIP12;
    property FIFOIP13 : TBits_1 read getFIFOIP13 write setFIFOIP13;
    property FIFOIP14 : TBits_1 read getFIFOIP14 write setFIFOIP14;
    property FIFOIP15 : TBits_1 read getFIFOIP15 write setFIFOIP15;
    property FIFOIP16 : TBits_1 read getFIFOIP16 write setFIFOIP16;
    property FIFOIP17 : TBits_1 read getFIFOIP17 write setFIFOIP17;
    property FIFOIP18 : TBits_1 read getFIFOIP18 write setFIFOIP18;
    property FIFOIP19 : TBits_1 read getFIFOIP19 write setFIFOIP19;
    property FIFOIP2 : TBits_1 read getFIFOIP2 write setFIFOIP2;
    property FIFOIP20 : TBits_1 read getFIFOIP20 write setFIFOIP20;
    property FIFOIP21 : TBits_1 read getFIFOIP21 write setFIFOIP21;
    property FIFOIP22 : TBits_1 read getFIFOIP22 write setFIFOIP22;
    property FIFOIP23 : TBits_1 read getFIFOIP23 write setFIFOIP23;
    property FIFOIP24 : TBits_1 read getFIFOIP24 write setFIFOIP24;
    property FIFOIP25 : TBits_1 read getFIFOIP25 write setFIFOIP25;
    property FIFOIP26 : TBits_1 read getFIFOIP26 write setFIFOIP26;
    property FIFOIP27 : TBits_1 read getFIFOIP27 write setFIFOIP27;
    property FIFOIP28 : TBits_1 read getFIFOIP28 write setFIFOIP28;
    property FIFOIP29 : TBits_1 read getFIFOIP29 write setFIFOIP29;
    property FIFOIP3 : TBits_1 read getFIFOIP3 write setFIFOIP3;
    property FIFOIP30 : TBits_1 read getFIFOIP30 write setFIFOIP30;
    property FIFOIP31 : TBits_1 read getFIFOIP31 write setFIFOIP31;
    property FIFOIP4 : TBits_1 read getFIFOIP4 write setFIFOIP4;
    property FIFOIP5 : TBits_1 read getFIFOIP5 write setFIFOIP5;
    property FIFOIP6 : TBits_1 read getFIFOIP6 write setFIFOIP6;
    property FIFOIP7 : TBits_1 read getFIFOIP7 write setFIFOIP7;
    property FIFOIP8 : TBits_1 read getFIFOIP8 write setFIFOIP8;
    property FIFOIP9 : TBits_1 read getFIFOIP9 write setFIFOIP9;
    property w : TBits_32 read getw write setw;
  end;
  TCAN1_C1RXOVF = record
  private
    function  getRXOVF : TBits_32; assembler; nostackframe; inline;
    function  getRXOVF0 : TBits_1; assembler; nostackframe; inline;
    function  getRXOVF1 : TBits_1; assembler; nostackframe; inline;
    function  getRXOVF10 : TBits_1; assembler; nostackframe; inline;
    function  getRXOVF11 : TBits_1; assembler; nostackframe; inline;
    function  getRXOVF12 : TBits_1; assembler; nostackframe; inline;
    function  getRXOVF13 : TBits_1; assembler; nostackframe; inline;
    function  getRXOVF14 : TBits_1; assembler; nostackframe; inline;
    function  getRXOVF15 : TBits_1; assembler; nostackframe; inline;
    function  getRXOVF16 : TBits_1; assembler; nostackframe; inline;
    function  getRXOVF17 : TBits_1; assembler; nostackframe; inline;
    function  getRXOVF18 : TBits_1; assembler; nostackframe; inline;
    function  getRXOVF19 : TBits_1; assembler; nostackframe; inline;
    function  getRXOVF2 : TBits_1; assembler; nostackframe; inline;
    function  getRXOVF20 : TBits_1; assembler; nostackframe; inline;
    function  getRXOVF21 : TBits_1; assembler; nostackframe; inline;
    function  getRXOVF22 : TBits_1; assembler; nostackframe; inline;
    function  getRXOVF23 : TBits_1; assembler; nostackframe; inline;
    function  getRXOVF24 : TBits_1; assembler; nostackframe; inline;
    function  getRXOVF25 : TBits_1; assembler; nostackframe; inline;
    function  getRXOVF26 : TBits_1; assembler; nostackframe; inline;
    function  getRXOVF27 : TBits_1; assembler; nostackframe; inline;
    function  getRXOVF28 : TBits_1; assembler; nostackframe; inline;
    function  getRXOVF29 : TBits_1; assembler; nostackframe; inline;
    function  getRXOVF3 : TBits_1; assembler; nostackframe; inline;
    function  getRXOVF30 : TBits_1; assembler; nostackframe; inline;
    function  getRXOVF31 : TBits_1; assembler; nostackframe; inline;
    function  getRXOVF4 : TBits_1; assembler; nostackframe; inline;
    function  getRXOVF5 : TBits_1; assembler; nostackframe; inline;
    function  getRXOVF6 : TBits_1; assembler; nostackframe; inline;
    function  getRXOVF7 : TBits_1; assembler; nostackframe; inline;
    function  getRXOVF8 : TBits_1; assembler; nostackframe; inline;
    function  getRXOVF9 : TBits_1; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setRXOVF(thebits : TBits_32); assembler; nostackframe; inline;
    procedure setRXOVF0(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXOVF1(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXOVF10(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXOVF11(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXOVF12(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXOVF13(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXOVF14(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXOVF15(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXOVF16(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXOVF17(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXOVF18(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXOVF19(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXOVF2(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXOVF20(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXOVF21(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXOVF22(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXOVF23(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXOVF24(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXOVF25(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXOVF26(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXOVF27(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXOVF28(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXOVF29(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXOVF3(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXOVF30(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXOVF31(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXOVF4(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXOVF5(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXOVF6(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXOVF7(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXOVF8(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXOVF9(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearRXOVF0;
    procedure clearRXOVF10;
    procedure clearRXOVF11;
    procedure clearRXOVF12;
    procedure clearRXOVF13;
    procedure clearRXOVF14;
    procedure clearRXOVF15;
    procedure clearRXOVF16;
    procedure clearRXOVF17;
    procedure clearRXOVF18;
    procedure clearRXOVF19;
    procedure clearRXOVF1;
    procedure clearRXOVF20;
    procedure clearRXOVF21;
    procedure clearRXOVF22;
    procedure clearRXOVF23;
    procedure clearRXOVF24;
    procedure clearRXOVF25;
    procedure clearRXOVF26;
    procedure clearRXOVF27;
    procedure clearRXOVF28;
    procedure clearRXOVF29;
    procedure clearRXOVF2;
    procedure clearRXOVF30;
    procedure clearRXOVF31;
    procedure clearRXOVF3;
    procedure clearRXOVF4;
    procedure clearRXOVF5;
    procedure clearRXOVF6;
    procedure clearRXOVF7;
    procedure clearRXOVF8;
    procedure clearRXOVF9;
    procedure setRXOVF0;
    procedure setRXOVF10;
    procedure setRXOVF11;
    procedure setRXOVF12;
    procedure setRXOVF13;
    procedure setRXOVF14;
    procedure setRXOVF15;
    procedure setRXOVF16;
    procedure setRXOVF17;
    procedure setRXOVF18;
    procedure setRXOVF19;
    procedure setRXOVF1;
    procedure setRXOVF20;
    procedure setRXOVF21;
    procedure setRXOVF22;
    procedure setRXOVF23;
    procedure setRXOVF24;
    procedure setRXOVF25;
    procedure setRXOVF26;
    procedure setRXOVF27;
    procedure setRXOVF28;
    procedure setRXOVF29;
    procedure setRXOVF2;
    procedure setRXOVF30;
    procedure setRXOVF31;
    procedure setRXOVF3;
    procedure setRXOVF4;
    procedure setRXOVF5;
    procedure setRXOVF6;
    procedure setRXOVF7;
    procedure setRXOVF8;
    procedure setRXOVF9;
    property RXOVF : TBits_32 read getRXOVF write setRXOVF;
    property RXOVF0 : TBits_1 read getRXOVF0 write setRXOVF0;
    property RXOVF1 : TBits_1 read getRXOVF1 write setRXOVF1;
    property RXOVF10 : TBits_1 read getRXOVF10 write setRXOVF10;
    property RXOVF11 : TBits_1 read getRXOVF11 write setRXOVF11;
    property RXOVF12 : TBits_1 read getRXOVF12 write setRXOVF12;
    property RXOVF13 : TBits_1 read getRXOVF13 write setRXOVF13;
    property RXOVF14 : TBits_1 read getRXOVF14 write setRXOVF14;
    property RXOVF15 : TBits_1 read getRXOVF15 write setRXOVF15;
    property RXOVF16 : TBits_1 read getRXOVF16 write setRXOVF16;
    property RXOVF17 : TBits_1 read getRXOVF17 write setRXOVF17;
    property RXOVF18 : TBits_1 read getRXOVF18 write setRXOVF18;
    property RXOVF19 : TBits_1 read getRXOVF19 write setRXOVF19;
    property RXOVF2 : TBits_1 read getRXOVF2 write setRXOVF2;
    property RXOVF20 : TBits_1 read getRXOVF20 write setRXOVF20;
    property RXOVF21 : TBits_1 read getRXOVF21 write setRXOVF21;
    property RXOVF22 : TBits_1 read getRXOVF22 write setRXOVF22;
    property RXOVF23 : TBits_1 read getRXOVF23 write setRXOVF23;
    property RXOVF24 : TBits_1 read getRXOVF24 write setRXOVF24;
    property RXOVF25 : TBits_1 read getRXOVF25 write setRXOVF25;
    property RXOVF26 : TBits_1 read getRXOVF26 write setRXOVF26;
    property RXOVF27 : TBits_1 read getRXOVF27 write setRXOVF27;
    property RXOVF28 : TBits_1 read getRXOVF28 write setRXOVF28;
    property RXOVF29 : TBits_1 read getRXOVF29 write setRXOVF29;
    property RXOVF3 : TBits_1 read getRXOVF3 write setRXOVF3;
    property RXOVF30 : TBits_1 read getRXOVF30 write setRXOVF30;
    property RXOVF31 : TBits_1 read getRXOVF31 write setRXOVF31;
    property RXOVF4 : TBits_1 read getRXOVF4 write setRXOVF4;
    property RXOVF5 : TBits_1 read getRXOVF5 write setRXOVF5;
    property RXOVF6 : TBits_1 read getRXOVF6 write setRXOVF6;
    property RXOVF7 : TBits_1 read getRXOVF7 write setRXOVF7;
    property RXOVF8 : TBits_1 read getRXOVF8 write setRXOVF8;
    property RXOVF9 : TBits_1 read getRXOVF9 write setRXOVF9;
    property w : TBits_32 read getw write setw;
  end;
  TCAN1_C1TMR = record
  private
    function  getCANTS : TBits_16; assembler; nostackframe; inline;
    function  getCANTSPRE : TBits_16; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setCANTS(thebits : TBits_16); assembler; nostackframe; inline;
    procedure setCANTSPRE(thebits : TBits_16); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    property CANTS : TBits_16 read getCANTS write setCANTS;
    property CANTSPRE : TBits_16 read getCANTSPRE write setCANTSPRE;
    property w : TBits_32 read getw write setw;
  end;
  TCAN1_C1RXM0 = record
  private
    function  getEID : TBits_18; assembler; nostackframe; inline;
    function  getMIDE : TBits_1; assembler; nostackframe; inline;
    function  getSID : TBits_11; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setEID(thebits : TBits_18); assembler; nostackframe; inline;
    procedure setMIDE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSID(thebits : TBits_11); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearMIDE;
    procedure setMIDE;
    property EID : TBits_18 read getEID write setEID;
    property MIDE : TBits_1 read getMIDE write setMIDE;
    property SID : TBits_11 read getSID write setSID;
    property w : TBits_32 read getw write setw;
  end;
  TCAN1_C1RXM1 = record
  private
    function  getEID : TBits_18; assembler; nostackframe; inline;
    function  getMIDE : TBits_1; assembler; nostackframe; inline;
    function  getSID : TBits_11; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setEID(thebits : TBits_18); assembler; nostackframe; inline;
    procedure setMIDE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSID(thebits : TBits_11); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearMIDE;
    procedure setMIDE;
    property EID : TBits_18 read getEID write setEID;
    property MIDE : TBits_1 read getMIDE write setMIDE;
    property SID : TBits_11 read getSID write setSID;
    property w : TBits_32 read getw write setw;
  end;
  TCAN1_C1RXM2 = record
  private
    function  getEID : TBits_18; assembler; nostackframe; inline;
    function  getMIDE : TBits_1; assembler; nostackframe; inline;
    function  getSID : TBits_11; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setEID(thebits : TBits_18); assembler; nostackframe; inline;
    procedure setMIDE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSID(thebits : TBits_11); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearMIDE;
    procedure setMIDE;
    property EID : TBits_18 read getEID write setEID;
    property MIDE : TBits_1 read getMIDE write setMIDE;
    property SID : TBits_11 read getSID write setSID;
    property w : TBits_32 read getw write setw;
  end;
  TCAN1_C1RXM3 = record
  private
    function  getEID : TBits_18; assembler; nostackframe; inline;
    function  getMIDE : TBits_1; assembler; nostackframe; inline;
    function  getSID : TBits_11; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setEID(thebits : TBits_18); assembler; nostackframe; inline;
    procedure setMIDE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSID(thebits : TBits_11); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearMIDE;
    procedure setMIDE;
    property EID : TBits_18 read getEID write setEID;
    property MIDE : TBits_1 read getMIDE write setMIDE;
    property SID : TBits_11 read getSID write setSID;
    property w : TBits_32 read getw write setw;
  end;
  TCAN1_C1FLTCON0 = record
  private
    function  getFLTEN0 : TBits_1; assembler; nostackframe; inline;
    function  getFLTEN1 : TBits_1; assembler; nostackframe; inline;
    function  getFLTEN2 : TBits_1; assembler; nostackframe; inline;
    function  getFLTEN3 : TBits_1; assembler; nostackframe; inline;
    function  getFSEL0 : TBits_5; assembler; nostackframe; inline;
    function  getFSEL1 : TBits_5; assembler; nostackframe; inline;
    function  getFSEL2 : TBits_5; assembler; nostackframe; inline;
    function  getFSEL3 : TBits_5; assembler; nostackframe; inline;
    function  getMSEL0 : TBits_2; assembler; nostackframe; inline;
    function  getMSEL1 : TBits_2; assembler; nostackframe; inline;
    function  getMSEL2 : TBits_2; assembler; nostackframe; inline;
    function  getMSEL3 : TBits_2; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setFLTEN0(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setFLTEN1(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setFLTEN2(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setFLTEN3(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setFSEL0(thebits : TBits_5); assembler; nostackframe; inline;
    procedure setFSEL1(thebits : TBits_5); assembler; nostackframe; inline;
    procedure setFSEL2(thebits : TBits_5); assembler; nostackframe; inline;
    procedure setFSEL3(thebits : TBits_5); assembler; nostackframe; inline;
    procedure setMSEL0(thebits : TBits_2); assembler; nostackframe; inline;
    procedure setMSEL1(thebits : TBits_2); assembler; nostackframe; inline;
    procedure setMSEL2(thebits : TBits_2); assembler; nostackframe; inline;
    procedure setMSEL3(thebits : TBits_2); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearFLTEN0;
    procedure clearFLTEN1;
    procedure clearFLTEN2;
    procedure clearFLTEN3;
    procedure setFLTEN0;
    procedure setFLTEN1;
    procedure setFLTEN2;
    procedure setFLTEN3;
    property FLTEN0 : TBits_1 read getFLTEN0 write setFLTEN0;
    property FLTEN1 : TBits_1 read getFLTEN1 write setFLTEN1;
    property FLTEN2 : TBits_1 read getFLTEN2 write setFLTEN2;
    property FLTEN3 : TBits_1 read getFLTEN3 write setFLTEN3;
    property FSEL0 : TBits_5 read getFSEL0 write setFSEL0;
    property FSEL1 : TBits_5 read getFSEL1 write setFSEL1;
    property FSEL2 : TBits_5 read getFSEL2 write setFSEL2;
    property FSEL3 : TBits_5 read getFSEL3 write setFSEL3;
    property MSEL0 : TBits_2 read getMSEL0 write setMSEL0;
    property MSEL1 : TBits_2 read getMSEL1 write setMSEL1;
    property MSEL2 : TBits_2 read getMSEL2 write setMSEL2;
    property MSEL3 : TBits_2 read getMSEL3 write setMSEL3;
    property w : TBits_32 read getw write setw;
  end;
  TCAN1_C1FLTCON1 = record
  private
    function  getFLTEN4 : TBits_1; assembler; nostackframe; inline;
    function  getFLTEN5 : TBits_1; assembler; nostackframe; inline;
    function  getFLTEN6 : TBits_1; assembler; nostackframe; inline;
    function  getFLTEN7 : TBits_1; assembler; nostackframe; inline;
    function  getFSEL4 : TBits_5; assembler; nostackframe; inline;
    function  getFSEL5 : TBits_5; assembler; nostackframe; inline;
    function  getFSEL6 : TBits_5; assembler; nostackframe; inline;
    function  getFSEL7 : TBits_5; assembler; nostackframe; inline;
    function  getMSEL4 : TBits_2; assembler; nostackframe; inline;
    function  getMSEL5 : TBits_2; assembler; nostackframe; inline;
    function  getMSEL6 : TBits_2; assembler; nostackframe; inline;
    function  getMSEL7 : TBits_2; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setFLTEN4(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setFLTEN5(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setFLTEN6(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setFLTEN7(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setFSEL4(thebits : TBits_5); assembler; nostackframe; inline;
    procedure setFSEL5(thebits : TBits_5); assembler; nostackframe; inline;
    procedure setFSEL6(thebits : TBits_5); assembler; nostackframe; inline;
    procedure setFSEL7(thebits : TBits_5); assembler; nostackframe; inline;
    procedure setMSEL4(thebits : TBits_2); assembler; nostackframe; inline;
    procedure setMSEL5(thebits : TBits_2); assembler; nostackframe; inline;
    procedure setMSEL6(thebits : TBits_2); assembler; nostackframe; inline;
    procedure setMSEL7(thebits : TBits_2); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearFLTEN4;
    procedure clearFLTEN5;
    procedure clearFLTEN6;
    procedure clearFLTEN7;
    procedure setFLTEN4;
    procedure setFLTEN5;
    procedure setFLTEN6;
    procedure setFLTEN7;
    property FLTEN4 : TBits_1 read getFLTEN4 write setFLTEN4;
    property FLTEN5 : TBits_1 read getFLTEN5 write setFLTEN5;
    property FLTEN6 : TBits_1 read getFLTEN6 write setFLTEN6;
    property FLTEN7 : TBits_1 read getFLTEN7 write setFLTEN7;
    property FSEL4 : TBits_5 read getFSEL4 write setFSEL4;
    property FSEL5 : TBits_5 read getFSEL5 write setFSEL5;
    property FSEL6 : TBits_5 read getFSEL6 write setFSEL6;
    property FSEL7 : TBits_5 read getFSEL7 write setFSEL7;
    property MSEL4 : TBits_2 read getMSEL4 write setMSEL4;
    property MSEL5 : TBits_2 read getMSEL5 write setMSEL5;
    property MSEL6 : TBits_2 read getMSEL6 write setMSEL6;
    property MSEL7 : TBits_2 read getMSEL7 write setMSEL7;
    property w : TBits_32 read getw write setw;
  end;
  TCAN1_C1FLTCON2 = record
  private
    function  getFLTEN10 : TBits_1; assembler; nostackframe; inline;
    function  getFLTEN11 : TBits_1; assembler; nostackframe; inline;
    function  getFLTEN8 : TBits_1; assembler; nostackframe; inline;
    function  getFLTEN9 : TBits_1; assembler; nostackframe; inline;
    function  getFSEL10 : TBits_5; assembler; nostackframe; inline;
    function  getFSEL11 : TBits_5; assembler; nostackframe; inline;
    function  getFSEL8 : TBits_5; assembler; nostackframe; inline;
    function  getFSEL9 : TBits_5; assembler; nostackframe; inline;
    function  getMSEL10 : TBits_2; assembler; nostackframe; inline;
    function  getMSEL11 : TBits_2; assembler; nostackframe; inline;
    function  getMSEL8 : TBits_2; assembler; nostackframe; inline;
    function  getMSEL9 : TBits_2; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setFLTEN10(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setFLTEN11(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setFLTEN8(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setFLTEN9(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setFSEL10(thebits : TBits_5); assembler; nostackframe; inline;
    procedure setFSEL11(thebits : TBits_5); assembler; nostackframe; inline;
    procedure setFSEL8(thebits : TBits_5); assembler; nostackframe; inline;
    procedure setFSEL9(thebits : TBits_5); assembler; nostackframe; inline;
    procedure setMSEL10(thebits : TBits_2); assembler; nostackframe; inline;
    procedure setMSEL11(thebits : TBits_2); assembler; nostackframe; inline;
    procedure setMSEL8(thebits : TBits_2); assembler; nostackframe; inline;
    procedure setMSEL9(thebits : TBits_2); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearFLTEN10;
    procedure clearFLTEN11;
    procedure clearFLTEN8;
    procedure clearFLTEN9;
    procedure setFLTEN10;
    procedure setFLTEN11;
    procedure setFLTEN8;
    procedure setFLTEN9;
    property FLTEN10 : TBits_1 read getFLTEN10 write setFLTEN10;
    property FLTEN11 : TBits_1 read getFLTEN11 write setFLTEN11;
    property FLTEN8 : TBits_1 read getFLTEN8 write setFLTEN8;
    property FLTEN9 : TBits_1 read getFLTEN9 write setFLTEN9;
    property FSEL10 : TBits_5 read getFSEL10 write setFSEL10;
    property FSEL11 : TBits_5 read getFSEL11 write setFSEL11;
    property FSEL8 : TBits_5 read getFSEL8 write setFSEL8;
    property FSEL9 : TBits_5 read getFSEL9 write setFSEL9;
    property MSEL10 : TBits_2 read getMSEL10 write setMSEL10;
    property MSEL11 : TBits_2 read getMSEL11 write setMSEL11;
    property MSEL8 : TBits_2 read getMSEL8 write setMSEL8;
    property MSEL9 : TBits_2 read getMSEL9 write setMSEL9;
    property w : TBits_32 read getw write setw;
  end;
  TCAN1_C1FLTCON3 = record
  private
    function  getFLTEN12 : TBits_1; assembler; nostackframe; inline;
    function  getFLTEN13 : TBits_1; assembler; nostackframe; inline;
    function  getFLTEN14 : TBits_1; assembler; nostackframe; inline;
    function  getFLTEN15 : TBits_1; assembler; nostackframe; inline;
    function  getFSEL12 : TBits_5; assembler; nostackframe; inline;
    function  getFSEL13 : TBits_5; assembler; nostackframe; inline;
    function  getFSEL14 : TBits_5; assembler; nostackframe; inline;
    function  getFSEL15 : TBits_5; assembler; nostackframe; inline;
    function  getMSEL12 : TBits_2; assembler; nostackframe; inline;
    function  getMSEL13 : TBits_2; assembler; nostackframe; inline;
    function  getMSEL14 : TBits_2; assembler; nostackframe; inline;
    function  getMSEL15 : TBits_2; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setFLTEN12(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setFLTEN13(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setFLTEN14(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setFLTEN15(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setFSEL12(thebits : TBits_5); assembler; nostackframe; inline;
    procedure setFSEL13(thebits : TBits_5); assembler; nostackframe; inline;
    procedure setFSEL14(thebits : TBits_5); assembler; nostackframe; inline;
    procedure setFSEL15(thebits : TBits_5); assembler; nostackframe; inline;
    procedure setMSEL12(thebits : TBits_2); assembler; nostackframe; inline;
    procedure setMSEL13(thebits : TBits_2); assembler; nostackframe; inline;
    procedure setMSEL14(thebits : TBits_2); assembler; nostackframe; inline;
    procedure setMSEL15(thebits : TBits_2); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearFLTEN12;
    procedure clearFLTEN13;
    procedure clearFLTEN14;
    procedure clearFLTEN15;
    procedure setFLTEN12;
    procedure setFLTEN13;
    procedure setFLTEN14;
    procedure setFLTEN15;
    property FLTEN12 : TBits_1 read getFLTEN12 write setFLTEN12;
    property FLTEN13 : TBits_1 read getFLTEN13 write setFLTEN13;
    property FLTEN14 : TBits_1 read getFLTEN14 write setFLTEN14;
    property FLTEN15 : TBits_1 read getFLTEN15 write setFLTEN15;
    property FSEL12 : TBits_5 read getFSEL12 write setFSEL12;
    property FSEL13 : TBits_5 read getFSEL13 write setFSEL13;
    property FSEL14 : TBits_5 read getFSEL14 write setFSEL14;
    property FSEL15 : TBits_5 read getFSEL15 write setFSEL15;
    property MSEL12 : TBits_2 read getMSEL12 write setMSEL12;
    property MSEL13 : TBits_2 read getMSEL13 write setMSEL13;
    property MSEL14 : TBits_2 read getMSEL14 write setMSEL14;
    property MSEL15 : TBits_2 read getMSEL15 write setMSEL15;
    property w : TBits_32 read getw write setw;
  end;
  TCAN1_C1FLTCON4 = record
  private
    function  getFLTEN16 : TBits_1; assembler; nostackframe; inline;
    function  getFLTEN17 : TBits_1; assembler; nostackframe; inline;
    function  getFLTEN18 : TBits_1; assembler; nostackframe; inline;
    function  getFLTEN19 : TBits_1; assembler; nostackframe; inline;
    function  getFSEL16 : TBits_5; assembler; nostackframe; inline;
    function  getFSEL17 : TBits_5; assembler; nostackframe; inline;
    function  getFSEL18 : TBits_5; assembler; nostackframe; inline;
    function  getFSEL19 : TBits_5; assembler; nostackframe; inline;
    function  getMSEL16 : TBits_2; assembler; nostackframe; inline;
    function  getMSEL17 : TBits_2; assembler; nostackframe; inline;
    function  getMSEL18 : TBits_2; assembler; nostackframe; inline;
    function  getMSEL19 : TBits_2; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setFLTEN16(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setFLTEN17(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setFLTEN18(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setFLTEN19(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setFSEL16(thebits : TBits_5); assembler; nostackframe; inline;
    procedure setFSEL17(thebits : TBits_5); assembler; nostackframe; inline;
    procedure setFSEL18(thebits : TBits_5); assembler; nostackframe; inline;
    procedure setFSEL19(thebits : TBits_5); assembler; nostackframe; inline;
    procedure setMSEL16(thebits : TBits_2); assembler; nostackframe; inline;
    procedure setMSEL17(thebits : TBits_2); assembler; nostackframe; inline;
    procedure setMSEL18(thebits : TBits_2); assembler; nostackframe; inline;
    procedure setMSEL19(thebits : TBits_2); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearFLTEN16;
    procedure clearFLTEN17;
    procedure clearFLTEN18;
    procedure clearFLTEN19;
    procedure setFLTEN16;
    procedure setFLTEN17;
    procedure setFLTEN18;
    procedure setFLTEN19;
    property FLTEN16 : TBits_1 read getFLTEN16 write setFLTEN16;
    property FLTEN17 : TBits_1 read getFLTEN17 write setFLTEN17;
    property FLTEN18 : TBits_1 read getFLTEN18 write setFLTEN18;
    property FLTEN19 : TBits_1 read getFLTEN19 write setFLTEN19;
    property FSEL16 : TBits_5 read getFSEL16 write setFSEL16;
    property FSEL17 : TBits_5 read getFSEL17 write setFSEL17;
    property FSEL18 : TBits_5 read getFSEL18 write setFSEL18;
    property FSEL19 : TBits_5 read getFSEL19 write setFSEL19;
    property MSEL16 : TBits_2 read getMSEL16 write setMSEL16;
    property MSEL17 : TBits_2 read getMSEL17 write setMSEL17;
    property MSEL18 : TBits_2 read getMSEL18 write setMSEL18;
    property MSEL19 : TBits_2 read getMSEL19 write setMSEL19;
    property w : TBits_32 read getw write setw;
  end;
  TCAN1_C1FLTCON5 = record
  private
    function  getFLTEN20 : TBits_1; assembler; nostackframe; inline;
    function  getFLTEN21 : TBits_1; assembler; nostackframe; inline;
    function  getFLTEN22 : TBits_1; assembler; nostackframe; inline;
    function  getFLTEN23 : TBits_1; assembler; nostackframe; inline;
    function  getFSEL20 : TBits_5; assembler; nostackframe; inline;
    function  getFSEL21 : TBits_5; assembler; nostackframe; inline;
    function  getFSEL22 : TBits_5; assembler; nostackframe; inline;
    function  getFSEL23 : TBits_5; assembler; nostackframe; inline;
    function  getMSEL20 : TBits_2; assembler; nostackframe; inline;
    function  getMSEL21 : TBits_2; assembler; nostackframe; inline;
    function  getMSEL22 : TBits_2; assembler; nostackframe; inline;
    function  getMSEL23 : TBits_2; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setFLTEN20(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setFLTEN21(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setFLTEN22(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setFLTEN23(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setFSEL20(thebits : TBits_5); assembler; nostackframe; inline;
    procedure setFSEL21(thebits : TBits_5); assembler; nostackframe; inline;
    procedure setFSEL22(thebits : TBits_5); assembler; nostackframe; inline;
    procedure setFSEL23(thebits : TBits_5); assembler; nostackframe; inline;
    procedure setMSEL20(thebits : TBits_2); assembler; nostackframe; inline;
    procedure setMSEL21(thebits : TBits_2); assembler; nostackframe; inline;
    procedure setMSEL22(thebits : TBits_2); assembler; nostackframe; inline;
    procedure setMSEL23(thebits : TBits_2); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearFLTEN20;
    procedure clearFLTEN21;
    procedure clearFLTEN22;
    procedure clearFLTEN23;
    procedure setFLTEN20;
    procedure setFLTEN21;
    procedure setFLTEN22;
    procedure setFLTEN23;
    property FLTEN20 : TBits_1 read getFLTEN20 write setFLTEN20;
    property FLTEN21 : TBits_1 read getFLTEN21 write setFLTEN21;
    property FLTEN22 : TBits_1 read getFLTEN22 write setFLTEN22;
    property FLTEN23 : TBits_1 read getFLTEN23 write setFLTEN23;
    property FSEL20 : TBits_5 read getFSEL20 write setFSEL20;
    property FSEL21 : TBits_5 read getFSEL21 write setFSEL21;
    property FSEL22 : TBits_5 read getFSEL22 write setFSEL22;
    property FSEL23 : TBits_5 read getFSEL23 write setFSEL23;
    property MSEL20 : TBits_2 read getMSEL20 write setMSEL20;
    property MSEL21 : TBits_2 read getMSEL21 write setMSEL21;
    property MSEL22 : TBits_2 read getMSEL22 write setMSEL22;
    property MSEL23 : TBits_2 read getMSEL23 write setMSEL23;
    property w : TBits_32 read getw write setw;
  end;
  TCAN1_C1FLTCON6 = record
  private
    function  getFLTEN24 : TBits_1; assembler; nostackframe; inline;
    function  getFLTEN25 : TBits_1; assembler; nostackframe; inline;
    function  getFLTEN26 : TBits_1; assembler; nostackframe; inline;
    function  getFLTEN27 : TBits_1; assembler; nostackframe; inline;
    function  getFSEL24 : TBits_5; assembler; nostackframe; inline;
    function  getFSEL25 : TBits_5; assembler; nostackframe; inline;
    function  getFSEL26 : TBits_5; assembler; nostackframe; inline;
    function  getFSEL27 : TBits_5; assembler; nostackframe; inline;
    function  getMSEL24 : TBits_2; assembler; nostackframe; inline;
    function  getMSEL25 : TBits_2; assembler; nostackframe; inline;
    function  getMSEL26 : TBits_2; assembler; nostackframe; inline;
    function  getMSEL27 : TBits_2; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setFLTEN24(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setFLTEN25(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setFLTEN26(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setFLTEN27(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setFSEL24(thebits : TBits_5); assembler; nostackframe; inline;
    procedure setFSEL25(thebits : TBits_5); assembler; nostackframe; inline;
    procedure setFSEL26(thebits : TBits_5); assembler; nostackframe; inline;
    procedure setFSEL27(thebits : TBits_5); assembler; nostackframe; inline;
    procedure setMSEL24(thebits : TBits_2); assembler; nostackframe; inline;
    procedure setMSEL25(thebits : TBits_2); assembler; nostackframe; inline;
    procedure setMSEL26(thebits : TBits_2); assembler; nostackframe; inline;
    procedure setMSEL27(thebits : TBits_2); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearFLTEN24;
    procedure clearFLTEN25;
    procedure clearFLTEN26;
    procedure clearFLTEN27;
    procedure setFLTEN24;
    procedure setFLTEN25;
    procedure setFLTEN26;
    procedure setFLTEN27;
    property FLTEN24 : TBits_1 read getFLTEN24 write setFLTEN24;
    property FLTEN25 : TBits_1 read getFLTEN25 write setFLTEN25;
    property FLTEN26 : TBits_1 read getFLTEN26 write setFLTEN26;
    property FLTEN27 : TBits_1 read getFLTEN27 write setFLTEN27;
    property FSEL24 : TBits_5 read getFSEL24 write setFSEL24;
    property FSEL25 : TBits_5 read getFSEL25 write setFSEL25;
    property FSEL26 : TBits_5 read getFSEL26 write setFSEL26;
    property FSEL27 : TBits_5 read getFSEL27 write setFSEL27;
    property MSEL24 : TBits_2 read getMSEL24 write setMSEL24;
    property MSEL25 : TBits_2 read getMSEL25 write setMSEL25;
    property MSEL26 : TBits_2 read getMSEL26 write setMSEL26;
    property MSEL27 : TBits_2 read getMSEL27 write setMSEL27;
    property w : TBits_32 read getw write setw;
  end;
  TCAN1_C1FLTCON7 = record
  private
    function  getFLTEN28 : TBits_1; assembler; nostackframe; inline;
    function  getFLTEN29 : TBits_1; assembler; nostackframe; inline;
    function  getFLTEN30 : TBits_1; assembler; nostackframe; inline;
    function  getFLTEN31 : TBits_1; assembler; nostackframe; inline;
    function  getFSEL28 : TBits_5; assembler; nostackframe; inline;
    function  getFSEL29 : TBits_5; assembler; nostackframe; inline;
    function  getFSEL30 : TBits_5; assembler; nostackframe; inline;
    function  getFSEL31 : TBits_5; assembler; nostackframe; inline;
    function  getMSEL28 : TBits_2; assembler; nostackframe; inline;
    function  getMSEL29 : TBits_2; assembler; nostackframe; inline;
    function  getMSEL30 : TBits_2; assembler; nostackframe; inline;
    function  getMSEL31 : TBits_2; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setFLTEN28(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setFLTEN29(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setFLTEN30(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setFLTEN31(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setFSEL28(thebits : TBits_5); assembler; nostackframe; inline;
    procedure setFSEL29(thebits : TBits_5); assembler; nostackframe; inline;
    procedure setFSEL30(thebits : TBits_5); assembler; nostackframe; inline;
    procedure setFSEL31(thebits : TBits_5); assembler; nostackframe; inline;
    procedure setMSEL28(thebits : TBits_2); assembler; nostackframe; inline;
    procedure setMSEL29(thebits : TBits_2); assembler; nostackframe; inline;
    procedure setMSEL30(thebits : TBits_2); assembler; nostackframe; inline;
    procedure setMSEL31(thebits : TBits_2); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearFLTEN28;
    procedure clearFLTEN29;
    procedure clearFLTEN30;
    procedure clearFLTEN31;
    procedure setFLTEN28;
    procedure setFLTEN29;
    procedure setFLTEN30;
    procedure setFLTEN31;
    property FLTEN28 : TBits_1 read getFLTEN28 write setFLTEN28;
    property FLTEN29 : TBits_1 read getFLTEN29 write setFLTEN29;
    property FLTEN30 : TBits_1 read getFLTEN30 write setFLTEN30;
    property FLTEN31 : TBits_1 read getFLTEN31 write setFLTEN31;
    property FSEL28 : TBits_5 read getFSEL28 write setFSEL28;
    property FSEL29 : TBits_5 read getFSEL29 write setFSEL29;
    property FSEL30 : TBits_5 read getFSEL30 write setFSEL30;
    property FSEL31 : TBits_5 read getFSEL31 write setFSEL31;
    property MSEL28 : TBits_2 read getMSEL28 write setMSEL28;
    property MSEL29 : TBits_2 read getMSEL29 write setMSEL29;
    property MSEL30 : TBits_2 read getMSEL30 write setMSEL30;
    property MSEL31 : TBits_2 read getMSEL31 write setMSEL31;
    property w : TBits_32 read getw write setw;
  end;
  TCAN1_C1RXF0 = record
  private
    function  getEID : TBits_18; assembler; nostackframe; inline;
    function  getEXID : TBits_1; assembler; nostackframe; inline;
    function  getSID : TBits_11; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setEID(thebits : TBits_18); assembler; nostackframe; inline;
    procedure setEXID(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSID(thebits : TBits_11); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearEXID;
    procedure setEXID;
    property EID : TBits_18 read getEID write setEID;
    property EXID : TBits_1 read getEXID write setEXID;
    property SID : TBits_11 read getSID write setSID;
    property w : TBits_32 read getw write setw;
  end;
  TCAN1_C1RXF1 = record
  private
    function  getEID : TBits_18; assembler; nostackframe; inline;
    function  getEXID : TBits_1; assembler; nostackframe; inline;
    function  getSID : TBits_11; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setEID(thebits : TBits_18); assembler; nostackframe; inline;
    procedure setEXID(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSID(thebits : TBits_11); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearEXID;
    procedure setEXID;
    property EID : TBits_18 read getEID write setEID;
    property EXID : TBits_1 read getEXID write setEXID;
    property SID : TBits_11 read getSID write setSID;
    property w : TBits_32 read getw write setw;
  end;
  TCAN1_C1RXF2 = record
  private
    function  getEID : TBits_18; assembler; nostackframe; inline;
    function  getEXID : TBits_1; assembler; nostackframe; inline;
    function  getSID : TBits_11; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setEID(thebits : TBits_18); assembler; nostackframe; inline;
    procedure setEXID(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSID(thebits : TBits_11); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearEXID;
    procedure setEXID;
    property EID : TBits_18 read getEID write setEID;
    property EXID : TBits_1 read getEXID write setEXID;
    property SID : TBits_11 read getSID write setSID;
    property w : TBits_32 read getw write setw;
  end;
  TCAN1_C1RXF3 = record
  private
    function  getEID : TBits_18; assembler; nostackframe; inline;
    function  getEXID : TBits_1; assembler; nostackframe; inline;
    function  getSID : TBits_11; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setEID(thebits : TBits_18); assembler; nostackframe; inline;
    procedure setEXID(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSID(thebits : TBits_11); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearEXID;
    procedure setEXID;
    property EID : TBits_18 read getEID write setEID;
    property EXID : TBits_1 read getEXID write setEXID;
    property SID : TBits_11 read getSID write setSID;
    property w : TBits_32 read getw write setw;
  end;
  TCAN1_C1RXF4 = record
  private
    function  getEID : TBits_18; assembler; nostackframe; inline;
    function  getEXID : TBits_1; assembler; nostackframe; inline;
    function  getSID : TBits_11; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setEID(thebits : TBits_18); assembler; nostackframe; inline;
    procedure setEXID(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSID(thebits : TBits_11); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearEXID;
    procedure setEXID;
    property EID : TBits_18 read getEID write setEID;
    property EXID : TBits_1 read getEXID write setEXID;
    property SID : TBits_11 read getSID write setSID;
    property w : TBits_32 read getw write setw;
  end;
  TCAN1_C1RXF5 = record
  private
    function  getEID : TBits_18; assembler; nostackframe; inline;
    function  getEXID : TBits_1; assembler; nostackframe; inline;
    function  getSID : TBits_11; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setEID(thebits : TBits_18); assembler; nostackframe; inline;
    procedure setEXID(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSID(thebits : TBits_11); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearEXID;
    procedure setEXID;
    property EID : TBits_18 read getEID write setEID;
    property EXID : TBits_1 read getEXID write setEXID;
    property SID : TBits_11 read getSID write setSID;
    property w : TBits_32 read getw write setw;
  end;
  TCAN1_C1RXF6 = record
  private
    function  getEID : TBits_18; assembler; nostackframe; inline;
    function  getEXID : TBits_1; assembler; nostackframe; inline;
    function  getSID : TBits_11; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setEID(thebits : TBits_18); assembler; nostackframe; inline;
    procedure setEXID(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSID(thebits : TBits_11); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearEXID;
    procedure setEXID;
    property EID : TBits_18 read getEID write setEID;
    property EXID : TBits_1 read getEXID write setEXID;
    property SID : TBits_11 read getSID write setSID;
    property w : TBits_32 read getw write setw;
  end;
  TCAN1_C1RXF7 = record
  private
    function  getEID : TBits_18; assembler; nostackframe; inline;
    function  getEXID : TBits_1; assembler; nostackframe; inline;
    function  getSID : TBits_11; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setEID(thebits : TBits_18); assembler; nostackframe; inline;
    procedure setEXID(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSID(thebits : TBits_11); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearEXID;
    procedure setEXID;
    property EID : TBits_18 read getEID write setEID;
    property EXID : TBits_1 read getEXID write setEXID;
    property SID : TBits_11 read getSID write setSID;
    property w : TBits_32 read getw write setw;
  end;
  TCAN1_C1RXF8 = record
  private
    function  getEID : TBits_18; assembler; nostackframe; inline;
    function  getEXID : TBits_1; assembler; nostackframe; inline;
    function  getSID : TBits_11; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setEID(thebits : TBits_18); assembler; nostackframe; inline;
    procedure setEXID(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSID(thebits : TBits_11); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearEXID;
    procedure setEXID;
    property EID : TBits_18 read getEID write setEID;
    property EXID : TBits_1 read getEXID write setEXID;
    property SID : TBits_11 read getSID write setSID;
    property w : TBits_32 read getw write setw;
  end;
  TCAN1_C1RXF9 = record
  private
    function  getEID : TBits_18; assembler; nostackframe; inline;
    function  getEXID : TBits_1; assembler; nostackframe; inline;
    function  getSID : TBits_11; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setEID(thebits : TBits_18); assembler; nostackframe; inline;
    procedure setEXID(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSID(thebits : TBits_11); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearEXID;
    procedure setEXID;
    property EID : TBits_18 read getEID write setEID;
    property EXID : TBits_1 read getEXID write setEXID;
    property SID : TBits_11 read getSID write setSID;
    property w : TBits_32 read getw write setw;
  end;
  TCAN1_C1RXF10 = record
  private
    function  getEID : TBits_18; assembler; nostackframe; inline;
    function  getEXID : TBits_1; assembler; nostackframe; inline;
    function  getSID : TBits_11; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setEID(thebits : TBits_18); assembler; nostackframe; inline;
    procedure setEXID(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSID(thebits : TBits_11); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearEXID;
    procedure setEXID;
    property EID : TBits_18 read getEID write setEID;
    property EXID : TBits_1 read getEXID write setEXID;
    property SID : TBits_11 read getSID write setSID;
    property w : TBits_32 read getw write setw;
  end;
  TCAN1_C1RXF11 = record
  private
    function  getEID : TBits_18; assembler; nostackframe; inline;
    function  getEXID : TBits_1; assembler; nostackframe; inline;
    function  getSID : TBits_11; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setEID(thebits : TBits_18); assembler; nostackframe; inline;
    procedure setEXID(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSID(thebits : TBits_11); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearEXID;
    procedure setEXID;
    property EID : TBits_18 read getEID write setEID;
    property EXID : TBits_1 read getEXID write setEXID;
    property SID : TBits_11 read getSID write setSID;
    property w : TBits_32 read getw write setw;
  end;
  TCAN1_C1RXF12 = record
  private
    function  getEID : TBits_18; assembler; nostackframe; inline;
    function  getEXID : TBits_1; assembler; nostackframe; inline;
    function  getSID : TBits_11; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setEID(thebits : TBits_18); assembler; nostackframe; inline;
    procedure setEXID(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSID(thebits : TBits_11); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearEXID;
    procedure setEXID;
    property EID : TBits_18 read getEID write setEID;
    property EXID : TBits_1 read getEXID write setEXID;
    property SID : TBits_11 read getSID write setSID;
    property w : TBits_32 read getw write setw;
  end;
  TCAN1_C1RXF13 = record
  private
    function  getEID : TBits_18; assembler; nostackframe; inline;
    function  getEXID : TBits_1; assembler; nostackframe; inline;
    function  getSID : TBits_11; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setEID(thebits : TBits_18); assembler; nostackframe; inline;
    procedure setEXID(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSID(thebits : TBits_11); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearEXID;
    procedure setEXID;
    property EID : TBits_18 read getEID write setEID;
    property EXID : TBits_1 read getEXID write setEXID;
    property SID : TBits_11 read getSID write setSID;
    property w : TBits_32 read getw write setw;
  end;
  TCAN1_C1RXF14 = record
  private
    function  getEID : TBits_18; assembler; nostackframe; inline;
    function  getEXID : TBits_1; assembler; nostackframe; inline;
    function  getSID : TBits_11; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setEID(thebits : TBits_18); assembler; nostackframe; inline;
    procedure setEXID(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSID(thebits : TBits_11); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearEXID;
    procedure setEXID;
    property EID : TBits_18 read getEID write setEID;
    property EXID : TBits_1 read getEXID write setEXID;
    property SID : TBits_11 read getSID write setSID;
    property w : TBits_32 read getw write setw;
  end;
  TCAN1_C1RXF15 = record
  private
    function  getEID : TBits_18; assembler; nostackframe; inline;
    function  getEXID : TBits_1; assembler; nostackframe; inline;
    function  getSID : TBits_11; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setEID(thebits : TBits_18); assembler; nostackframe; inline;
    procedure setEXID(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSID(thebits : TBits_11); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearEXID;
    procedure setEXID;
    property EID : TBits_18 read getEID write setEID;
    property EXID : TBits_1 read getEXID write setEXID;
    property SID : TBits_11 read getSID write setSID;
    property w : TBits_32 read getw write setw;
  end;
  TCAN1_C1RXF16 = record
  private
    function  getEID : TBits_18; assembler; nostackframe; inline;
    function  getEXID : TBits_1; assembler; nostackframe; inline;
    function  getSID : TBits_11; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setEID(thebits : TBits_18); assembler; nostackframe; inline;
    procedure setEXID(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSID(thebits : TBits_11); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearEXID;
    procedure setEXID;
    property EID : TBits_18 read getEID write setEID;
    property EXID : TBits_1 read getEXID write setEXID;
    property SID : TBits_11 read getSID write setSID;
    property w : TBits_32 read getw write setw;
  end;
  TCAN1_C1RXF17 = record
  private
    function  getEID : TBits_18; assembler; nostackframe; inline;
    function  getEXID : TBits_1; assembler; nostackframe; inline;
    function  getSID : TBits_11; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setEID(thebits : TBits_18); assembler; nostackframe; inline;
    procedure setEXID(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSID(thebits : TBits_11); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearEXID;
    procedure setEXID;
    property EID : TBits_18 read getEID write setEID;
    property EXID : TBits_1 read getEXID write setEXID;
    property SID : TBits_11 read getSID write setSID;
    property w : TBits_32 read getw write setw;
  end;
  TCAN1_C1RXF18 = record
  private
    function  getEID : TBits_18; assembler; nostackframe; inline;
    function  getEXID : TBits_1; assembler; nostackframe; inline;
    function  getSID : TBits_11; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setEID(thebits : TBits_18); assembler; nostackframe; inline;
    procedure setEXID(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSID(thebits : TBits_11); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearEXID;
    procedure setEXID;
    property EID : TBits_18 read getEID write setEID;
    property EXID : TBits_1 read getEXID write setEXID;
    property SID : TBits_11 read getSID write setSID;
    property w : TBits_32 read getw write setw;
  end;
  TCAN1_C1RXF19 = record
  private
    function  getEID : TBits_18; assembler; nostackframe; inline;
    function  getEXID : TBits_1; assembler; nostackframe; inline;
    function  getSID : TBits_11; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setEID(thebits : TBits_18); assembler; nostackframe; inline;
    procedure setEXID(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSID(thebits : TBits_11); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearEXID;
    procedure setEXID;
    property EID : TBits_18 read getEID write setEID;
    property EXID : TBits_1 read getEXID write setEXID;
    property SID : TBits_11 read getSID write setSID;
    property w : TBits_32 read getw write setw;
  end;
  TCAN1_C1RXF20 = record
  private
    function  getEID : TBits_18; assembler; nostackframe; inline;
    function  getEXID : TBits_1; assembler; nostackframe; inline;
    function  getSID : TBits_11; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setEID(thebits : TBits_18); assembler; nostackframe; inline;
    procedure setEXID(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSID(thebits : TBits_11); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearEXID;
    procedure setEXID;
    property EID : TBits_18 read getEID write setEID;
    property EXID : TBits_1 read getEXID write setEXID;
    property SID : TBits_11 read getSID write setSID;
    property w : TBits_32 read getw write setw;
  end;
  TCAN1_C1RXF21 = record
  private
    function  getEID : TBits_18; assembler; nostackframe; inline;
    function  getEXID : TBits_1; assembler; nostackframe; inline;
    function  getSID : TBits_11; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setEID(thebits : TBits_18); assembler; nostackframe; inline;
    procedure setEXID(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSID(thebits : TBits_11); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearEXID;
    procedure setEXID;
    property EID : TBits_18 read getEID write setEID;
    property EXID : TBits_1 read getEXID write setEXID;
    property SID : TBits_11 read getSID write setSID;
    property w : TBits_32 read getw write setw;
  end;
  TCAN1_C1RXF22 = record
  private
    function  getEID : TBits_18; assembler; nostackframe; inline;
    function  getEXID : TBits_1; assembler; nostackframe; inline;
    function  getSID : TBits_11; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setEID(thebits : TBits_18); assembler; nostackframe; inline;
    procedure setEXID(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSID(thebits : TBits_11); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearEXID;
    procedure setEXID;
    property EID : TBits_18 read getEID write setEID;
    property EXID : TBits_1 read getEXID write setEXID;
    property SID : TBits_11 read getSID write setSID;
    property w : TBits_32 read getw write setw;
  end;
  TCAN1_C1RXF23 = record
  private
    function  getEID : TBits_18; assembler; nostackframe; inline;
    function  getEXID : TBits_1; assembler; nostackframe; inline;
    function  getSID : TBits_11; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setEID(thebits : TBits_18); assembler; nostackframe; inline;
    procedure setEXID(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSID(thebits : TBits_11); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearEXID;
    procedure setEXID;
    property EID : TBits_18 read getEID write setEID;
    property EXID : TBits_1 read getEXID write setEXID;
    property SID : TBits_11 read getSID write setSID;
    property w : TBits_32 read getw write setw;
  end;
  TCAN1_C1RXF24 = record
  private
    function  getEID : TBits_18; assembler; nostackframe; inline;
    function  getEXID : TBits_1; assembler; nostackframe; inline;
    function  getSID : TBits_11; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setEID(thebits : TBits_18); assembler; nostackframe; inline;
    procedure setEXID(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSID(thebits : TBits_11); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearEXID;
    procedure setEXID;
    property EID : TBits_18 read getEID write setEID;
    property EXID : TBits_1 read getEXID write setEXID;
    property SID : TBits_11 read getSID write setSID;
    property w : TBits_32 read getw write setw;
  end;
  TCAN1_C1RXF25 = record
  private
    function  getEID : TBits_18; assembler; nostackframe; inline;
    function  getEXID : TBits_1; assembler; nostackframe; inline;
    function  getSID : TBits_11; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setEID(thebits : TBits_18); assembler; nostackframe; inline;
    procedure setEXID(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSID(thebits : TBits_11); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearEXID;
    procedure setEXID;
    property EID : TBits_18 read getEID write setEID;
    property EXID : TBits_1 read getEXID write setEXID;
    property SID : TBits_11 read getSID write setSID;
    property w : TBits_32 read getw write setw;
  end;
  TCAN1_C1RXF26 = record
  private
    function  getEID : TBits_18; assembler; nostackframe; inline;
    function  getEXID : TBits_1; assembler; nostackframe; inline;
    function  getSID : TBits_11; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setEID(thebits : TBits_18); assembler; nostackframe; inline;
    procedure setEXID(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSID(thebits : TBits_11); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearEXID;
    procedure setEXID;
    property EID : TBits_18 read getEID write setEID;
    property EXID : TBits_1 read getEXID write setEXID;
    property SID : TBits_11 read getSID write setSID;
    property w : TBits_32 read getw write setw;
  end;
  TCAN1_C1RXF27 = record
  private
    function  getEID : TBits_18; assembler; nostackframe; inline;
    function  getEXID : TBits_1; assembler; nostackframe; inline;
    function  getSID : TBits_11; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setEID(thebits : TBits_18); assembler; nostackframe; inline;
    procedure setEXID(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSID(thebits : TBits_11); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearEXID;
    procedure setEXID;
    property EID : TBits_18 read getEID write setEID;
    property EXID : TBits_1 read getEXID write setEXID;
    property SID : TBits_11 read getSID write setSID;
    property w : TBits_32 read getw write setw;
  end;
  TCAN1_C1RXF28 = record
  private
    function  getEID : TBits_18; assembler; nostackframe; inline;
    function  getEXID : TBits_1; assembler; nostackframe; inline;
    function  getSID : TBits_11; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setEID(thebits : TBits_18); assembler; nostackframe; inline;
    procedure setEXID(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSID(thebits : TBits_11); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearEXID;
    procedure setEXID;
    property EID : TBits_18 read getEID write setEID;
    property EXID : TBits_1 read getEXID write setEXID;
    property SID : TBits_11 read getSID write setSID;
    property w : TBits_32 read getw write setw;
  end;
  TCAN1_C1RXF29 = record
  private
    function  getEID : TBits_18; assembler; nostackframe; inline;
    function  getEXID : TBits_1; assembler; nostackframe; inline;
    function  getSID : TBits_11; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setEID(thebits : TBits_18); assembler; nostackframe; inline;
    procedure setEXID(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSID(thebits : TBits_11); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearEXID;
    procedure setEXID;
    property EID : TBits_18 read getEID write setEID;
    property EXID : TBits_1 read getEXID write setEXID;
    property SID : TBits_11 read getSID write setSID;
    property w : TBits_32 read getw write setw;
  end;
  TCAN1_C1RXF30 = record
  private
    function  getEID : TBits_18; assembler; nostackframe; inline;
    function  getEXID : TBits_1; assembler; nostackframe; inline;
    function  getSID : TBits_11; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setEID(thebits : TBits_18); assembler; nostackframe; inline;
    procedure setEXID(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSID(thebits : TBits_11); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearEXID;
    procedure setEXID;
    property EID : TBits_18 read getEID write setEID;
    property EXID : TBits_1 read getEXID write setEXID;
    property SID : TBits_11 read getSID write setSID;
    property w : TBits_32 read getw write setw;
  end;
  TCAN1_C1RXF31 = record
  private
    function  getEID : TBits_18; assembler; nostackframe; inline;
    function  getEXID : TBits_1; assembler; nostackframe; inline;
    function  getSID : TBits_11; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setEID(thebits : TBits_18); assembler; nostackframe; inline;
    procedure setEXID(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setSID(thebits : TBits_11); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearEXID;
    procedure setEXID;
    property EID : TBits_18 read getEID write setEID;
    property EXID : TBits_1 read getEXID write setEXID;
    property SID : TBits_11 read getSID write setSID;
    property w : TBits_32 read getw write setw;
  end;
  TCAN1_C1FIFOCON0 = record
  private
    function  getDONLY : TBits_1; assembler; nostackframe; inline;
    function  getFRESET : TBits_1; assembler; nostackframe; inline;
    function  getFSIZE : TBits_5; assembler; nostackframe; inline;
    function  getRTREN : TBits_1; assembler; nostackframe; inline;
    function  getTXABAT : TBits_1; assembler; nostackframe; inline;
    function  getTXEN : TBits_1; assembler; nostackframe; inline;
    function  getTXERR : TBits_1; assembler; nostackframe; inline;
    function  getTXLARB : TBits_1; assembler; nostackframe; inline;
    function  getTXPRI : TBits_2; assembler; nostackframe; inline;
    function  getTXREQ : TBits_1; assembler; nostackframe; inline;
    function  getUINC : TBits_1; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setDONLY(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setFRESET(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setFSIZE(thebits : TBits_5); assembler; nostackframe; inline;
    procedure setRTREN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXABAT(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXEN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXERR(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXLARB(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXPRI(thebits : TBits_2); assembler; nostackframe; inline;
    procedure setTXREQ(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setUINC(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearDONLY;
    procedure clearFRESET;
    procedure clearRTREN;
    procedure clearTXABAT;
    procedure clearTXEN;
    procedure clearTXERR;
    procedure clearTXLARB;
    procedure clearTXREQ;
    procedure clearUINC;
    procedure setDONLY;
    procedure setFRESET;
    procedure setRTREN;
    procedure setTXABAT;
    procedure setTXEN;
    procedure setTXERR;
    procedure setTXLARB;
    procedure setTXREQ;
    procedure setUINC;
    property DONLY : TBits_1 read getDONLY write setDONLY;
    property FRESET : TBits_1 read getFRESET write setFRESET;
    property FSIZE : TBits_5 read getFSIZE write setFSIZE;
    property RTREN : TBits_1 read getRTREN write setRTREN;
    property TXABAT : TBits_1 read getTXABAT write setTXABAT;
    property TXEN : TBits_1 read getTXEN write setTXEN;
    property TXERR : TBits_1 read getTXERR write setTXERR;
    property TXLARB : TBits_1 read getTXLARB write setTXLARB;
    property TXPRI : TBits_2 read getTXPRI write setTXPRI;
    property TXREQ : TBits_1 read getTXREQ write setTXREQ;
    property UINC : TBits_1 read getUINC write setUINC;
    property w : TBits_32 read getw write setw;
  end;
  TCAN1_C1FIFOINT0 = record
  private
    function  getRXFULLIE : TBits_1; assembler; nostackframe; inline;
    function  getRXFULLIF : TBits_1; assembler; nostackframe; inline;
    function  getRXHALFIE : TBits_1; assembler; nostackframe; inline;
    function  getRXHALFIF : TBits_1; assembler; nostackframe; inline;
    function  getRXNEMPTYIE : TBits_1; assembler; nostackframe; inline;
    function  getRXNEMPTYIF : TBits_1; assembler; nostackframe; inline;
    function  getRXOVFLIE : TBits_1; assembler; nostackframe; inline;
    function  getRXOVFLIF : TBits_1; assembler; nostackframe; inline;
    function  getTXEMPTYIE : TBits_1; assembler; nostackframe; inline;
    function  getTXEMPTYIF : TBits_1; assembler; nostackframe; inline;
    function  getTXHALFIE : TBits_1; assembler; nostackframe; inline;
    function  getTXHALFIF : TBits_1; assembler; nostackframe; inline;
    function  getTXNFULLIE : TBits_1; assembler; nostackframe; inline;
    function  getTXNFULLIF : TBits_1; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setRXFULLIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXFULLIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXHALFIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXHALFIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXNEMPTYIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXNEMPTYIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXOVFLIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXOVFLIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXEMPTYIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXEMPTYIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXHALFIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXHALFIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXNFULLIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXNFULLIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearRXFULLIE;
    procedure clearRXFULLIF;
    procedure clearRXHALFIE;
    procedure clearRXHALFIF;
    procedure clearRXNEMPTYIE;
    procedure clearRXNEMPTYIF;
    procedure clearRXOVFLIE;
    procedure clearRXOVFLIF;
    procedure clearTXEMPTYIE;
    procedure clearTXEMPTYIF;
    procedure clearTXHALFIE;
    procedure clearTXHALFIF;
    procedure clearTXNFULLIE;
    procedure clearTXNFULLIF;
    procedure setRXFULLIE;
    procedure setRXFULLIF;
    procedure setRXHALFIE;
    procedure setRXHALFIF;
    procedure setRXNEMPTYIE;
    procedure setRXNEMPTYIF;
    procedure setRXOVFLIE;
    procedure setRXOVFLIF;
    procedure setTXEMPTYIE;
    procedure setTXEMPTYIF;
    procedure setTXHALFIE;
    procedure setTXHALFIF;
    procedure setTXNFULLIE;
    procedure setTXNFULLIF;
    property RXFULLIE : TBits_1 read getRXFULLIE write setRXFULLIE;
    property RXFULLIF : TBits_1 read getRXFULLIF write setRXFULLIF;
    property RXHALFIE : TBits_1 read getRXHALFIE write setRXHALFIE;
    property RXHALFIF : TBits_1 read getRXHALFIF write setRXHALFIF;
    property RXNEMPTYIE : TBits_1 read getRXNEMPTYIE write setRXNEMPTYIE;
    property RXNEMPTYIF : TBits_1 read getRXNEMPTYIF write setRXNEMPTYIF;
    property RXOVFLIE : TBits_1 read getRXOVFLIE write setRXOVFLIE;
    property RXOVFLIF : TBits_1 read getRXOVFLIF write setRXOVFLIF;
    property TXEMPTYIE : TBits_1 read getTXEMPTYIE write setTXEMPTYIE;
    property TXEMPTYIF : TBits_1 read getTXEMPTYIF write setTXEMPTYIF;
    property TXHALFIE : TBits_1 read getTXHALFIE write setTXHALFIE;
    property TXHALFIF : TBits_1 read getTXHALFIF write setTXHALFIF;
    property TXNFULLIE : TBits_1 read getTXNFULLIE write setTXNFULLIE;
    property TXNFULLIF : TBits_1 read getTXNFULLIF write setTXNFULLIF;
    property w : TBits_32 read getw write setw;
  end;
  TCAN1_C1FIFOCI0 = record
  private
    function  getCFIFOCI : TBits_5; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setCFIFOCI(thebits : TBits_5); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    property CFIFOCI : TBits_5 read getCFIFOCI write setCFIFOCI;
    property w : TBits_32 read getw write setw;
  end;
  TCAN1_C1FIFOCON1 = record
  private
    function  getDONLY : TBits_1; assembler; nostackframe; inline;
    function  getFRESET : TBits_1; assembler; nostackframe; inline;
    function  getFSIZE : TBits_5; assembler; nostackframe; inline;
    function  getRTREN : TBits_1; assembler; nostackframe; inline;
    function  getTXABAT : TBits_1; assembler; nostackframe; inline;
    function  getTXEN : TBits_1; assembler; nostackframe; inline;
    function  getTXERR : TBits_1; assembler; nostackframe; inline;
    function  getTXLARB : TBits_1; assembler; nostackframe; inline;
    function  getTXPRI : TBits_2; assembler; nostackframe; inline;
    function  getTXREQ : TBits_1; assembler; nostackframe; inline;
    function  getUINC : TBits_1; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setDONLY(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setFRESET(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setFSIZE(thebits : TBits_5); assembler; nostackframe; inline;
    procedure setRTREN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXABAT(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXEN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXERR(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXLARB(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXPRI(thebits : TBits_2); assembler; nostackframe; inline;
    procedure setTXREQ(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setUINC(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearDONLY;
    procedure clearFRESET;
    procedure clearRTREN;
    procedure clearTXABAT;
    procedure clearTXEN;
    procedure clearTXERR;
    procedure clearTXLARB;
    procedure clearTXREQ;
    procedure clearUINC;
    procedure setDONLY;
    procedure setFRESET;
    procedure setRTREN;
    procedure setTXABAT;
    procedure setTXEN;
    procedure setTXERR;
    procedure setTXLARB;
    procedure setTXREQ;
    procedure setUINC;
    property DONLY : TBits_1 read getDONLY write setDONLY;
    property FRESET : TBits_1 read getFRESET write setFRESET;
    property FSIZE : TBits_5 read getFSIZE write setFSIZE;
    property RTREN : TBits_1 read getRTREN write setRTREN;
    property TXABAT : TBits_1 read getTXABAT write setTXABAT;
    property TXEN : TBits_1 read getTXEN write setTXEN;
    property TXERR : TBits_1 read getTXERR write setTXERR;
    property TXLARB : TBits_1 read getTXLARB write setTXLARB;
    property TXPRI : TBits_2 read getTXPRI write setTXPRI;
    property TXREQ : TBits_1 read getTXREQ write setTXREQ;
    property UINC : TBits_1 read getUINC write setUINC;
    property w : TBits_32 read getw write setw;
  end;
  TCAN1_C1FIFOINT1 = record
  private
    function  getRXFULLIE : TBits_1; assembler; nostackframe; inline;
    function  getRXFULLIF : TBits_1; assembler; nostackframe; inline;
    function  getRXHALFIE : TBits_1; assembler; nostackframe; inline;
    function  getRXHALFIF : TBits_1; assembler; nostackframe; inline;
    function  getRXNEMPTYIE : TBits_1; assembler; nostackframe; inline;
    function  getRXNEMPTYIF : TBits_1; assembler; nostackframe; inline;
    function  getRXOVFLIE : TBits_1; assembler; nostackframe; inline;
    function  getRXOVFLIF : TBits_1; assembler; nostackframe; inline;
    function  getTXEMPTYIE : TBits_1; assembler; nostackframe; inline;
    function  getTXEMPTYIF : TBits_1; assembler; nostackframe; inline;
    function  getTXHALFIE : TBits_1; assembler; nostackframe; inline;
    function  getTXHALFIF : TBits_1; assembler; nostackframe; inline;
    function  getTXNFULLIE : TBits_1; assembler; nostackframe; inline;
    function  getTXNFULLIF : TBits_1; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setRXFULLIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXFULLIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXHALFIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXHALFIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXNEMPTYIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXNEMPTYIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXOVFLIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXOVFLIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXEMPTYIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXEMPTYIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXHALFIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXHALFIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXNFULLIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXNFULLIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearRXFULLIE;
    procedure clearRXFULLIF;
    procedure clearRXHALFIE;
    procedure clearRXHALFIF;
    procedure clearRXNEMPTYIE;
    procedure clearRXNEMPTYIF;
    procedure clearRXOVFLIE;
    procedure clearRXOVFLIF;
    procedure clearTXEMPTYIE;
    procedure clearTXEMPTYIF;
    procedure clearTXHALFIE;
    procedure clearTXHALFIF;
    procedure clearTXNFULLIE;
    procedure clearTXNFULLIF;
    procedure setRXFULLIE;
    procedure setRXFULLIF;
    procedure setRXHALFIE;
    procedure setRXHALFIF;
    procedure setRXNEMPTYIE;
    procedure setRXNEMPTYIF;
    procedure setRXOVFLIE;
    procedure setRXOVFLIF;
    procedure setTXEMPTYIE;
    procedure setTXEMPTYIF;
    procedure setTXHALFIE;
    procedure setTXHALFIF;
    procedure setTXNFULLIE;
    procedure setTXNFULLIF;
    property RXFULLIE : TBits_1 read getRXFULLIE write setRXFULLIE;
    property RXFULLIF : TBits_1 read getRXFULLIF write setRXFULLIF;
    property RXHALFIE : TBits_1 read getRXHALFIE write setRXHALFIE;
    property RXHALFIF : TBits_1 read getRXHALFIF write setRXHALFIF;
    property RXNEMPTYIE : TBits_1 read getRXNEMPTYIE write setRXNEMPTYIE;
    property RXNEMPTYIF : TBits_1 read getRXNEMPTYIF write setRXNEMPTYIF;
    property RXOVFLIE : TBits_1 read getRXOVFLIE write setRXOVFLIE;
    property RXOVFLIF : TBits_1 read getRXOVFLIF write setRXOVFLIF;
    property TXEMPTYIE : TBits_1 read getTXEMPTYIE write setTXEMPTYIE;
    property TXEMPTYIF : TBits_1 read getTXEMPTYIF write setTXEMPTYIF;
    property TXHALFIE : TBits_1 read getTXHALFIE write setTXHALFIE;
    property TXHALFIF : TBits_1 read getTXHALFIF write setTXHALFIF;
    property TXNFULLIE : TBits_1 read getTXNFULLIE write setTXNFULLIE;
    property TXNFULLIF : TBits_1 read getTXNFULLIF write setTXNFULLIF;
    property w : TBits_32 read getw write setw;
  end;
  TCAN1_C1FIFOCI1 = record
  private
    function  getCFIFOCI : TBits_5; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setCFIFOCI(thebits : TBits_5); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    property CFIFOCI : TBits_5 read getCFIFOCI write setCFIFOCI;
    property w : TBits_32 read getw write setw;
  end;
  TCAN1_C1FIFOCON2 = record
  private
    function  getDONLY : TBits_1; assembler; nostackframe; inline;
    function  getFRESET : TBits_1; assembler; nostackframe; inline;
    function  getFSIZE : TBits_5; assembler; nostackframe; inline;
    function  getRTREN : TBits_1; assembler; nostackframe; inline;
    function  getTXABAT : TBits_1; assembler; nostackframe; inline;
    function  getTXEN : TBits_1; assembler; nostackframe; inline;
    function  getTXERR : TBits_1; assembler; nostackframe; inline;
    function  getTXLARB : TBits_1; assembler; nostackframe; inline;
    function  getTXPRI : TBits_2; assembler; nostackframe; inline;
    function  getTXREQ : TBits_1; assembler; nostackframe; inline;
    function  getUINC : TBits_1; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setDONLY(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setFRESET(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setFSIZE(thebits : TBits_5); assembler; nostackframe; inline;
    procedure setRTREN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXABAT(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXEN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXERR(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXLARB(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXPRI(thebits : TBits_2); assembler; nostackframe; inline;
    procedure setTXREQ(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setUINC(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearDONLY;
    procedure clearFRESET;
    procedure clearRTREN;
    procedure clearTXABAT;
    procedure clearTXEN;
    procedure clearTXERR;
    procedure clearTXLARB;
    procedure clearTXREQ;
    procedure clearUINC;
    procedure setDONLY;
    procedure setFRESET;
    procedure setRTREN;
    procedure setTXABAT;
    procedure setTXEN;
    procedure setTXERR;
    procedure setTXLARB;
    procedure setTXREQ;
    procedure setUINC;
    property DONLY : TBits_1 read getDONLY write setDONLY;
    property FRESET : TBits_1 read getFRESET write setFRESET;
    property FSIZE : TBits_5 read getFSIZE write setFSIZE;
    property RTREN : TBits_1 read getRTREN write setRTREN;
    property TXABAT : TBits_1 read getTXABAT write setTXABAT;
    property TXEN : TBits_1 read getTXEN write setTXEN;
    property TXERR : TBits_1 read getTXERR write setTXERR;
    property TXLARB : TBits_1 read getTXLARB write setTXLARB;
    property TXPRI : TBits_2 read getTXPRI write setTXPRI;
    property TXREQ : TBits_1 read getTXREQ write setTXREQ;
    property UINC : TBits_1 read getUINC write setUINC;
    property w : TBits_32 read getw write setw;
  end;
  TCAN1_C1FIFOINT2 = record
  private
    function  getRXFULLIE : TBits_1; assembler; nostackframe; inline;
    function  getRXFULLIF : TBits_1; assembler; nostackframe; inline;
    function  getRXHALFIE : TBits_1; assembler; nostackframe; inline;
    function  getRXHALFIF : TBits_1; assembler; nostackframe; inline;
    function  getRXNEMPTYIE : TBits_1; assembler; nostackframe; inline;
    function  getRXNEMPTYIF : TBits_1; assembler; nostackframe; inline;
    function  getRXOVFLIE : TBits_1; assembler; nostackframe; inline;
    function  getRXOVFLIF : TBits_1; assembler; nostackframe; inline;
    function  getTXEMPTYIE : TBits_1; assembler; nostackframe; inline;
    function  getTXEMPTYIF : TBits_1; assembler; nostackframe; inline;
    function  getTXHALFIE : TBits_1; assembler; nostackframe; inline;
    function  getTXHALFIF : TBits_1; assembler; nostackframe; inline;
    function  getTXNFULLIE : TBits_1; assembler; nostackframe; inline;
    function  getTXNFULLIF : TBits_1; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setRXFULLIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXFULLIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXHALFIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXHALFIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXNEMPTYIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXNEMPTYIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXOVFLIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXOVFLIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXEMPTYIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXEMPTYIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXHALFIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXHALFIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXNFULLIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXNFULLIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearRXFULLIE;
    procedure clearRXFULLIF;
    procedure clearRXHALFIE;
    procedure clearRXHALFIF;
    procedure clearRXNEMPTYIE;
    procedure clearRXNEMPTYIF;
    procedure clearRXOVFLIE;
    procedure clearRXOVFLIF;
    procedure clearTXEMPTYIE;
    procedure clearTXEMPTYIF;
    procedure clearTXHALFIE;
    procedure clearTXHALFIF;
    procedure clearTXNFULLIE;
    procedure clearTXNFULLIF;
    procedure setRXFULLIE;
    procedure setRXFULLIF;
    procedure setRXHALFIE;
    procedure setRXHALFIF;
    procedure setRXNEMPTYIE;
    procedure setRXNEMPTYIF;
    procedure setRXOVFLIE;
    procedure setRXOVFLIF;
    procedure setTXEMPTYIE;
    procedure setTXEMPTYIF;
    procedure setTXHALFIE;
    procedure setTXHALFIF;
    procedure setTXNFULLIE;
    procedure setTXNFULLIF;
    property RXFULLIE : TBits_1 read getRXFULLIE write setRXFULLIE;
    property RXFULLIF : TBits_1 read getRXFULLIF write setRXFULLIF;
    property RXHALFIE : TBits_1 read getRXHALFIE write setRXHALFIE;
    property RXHALFIF : TBits_1 read getRXHALFIF write setRXHALFIF;
    property RXNEMPTYIE : TBits_1 read getRXNEMPTYIE write setRXNEMPTYIE;
    property RXNEMPTYIF : TBits_1 read getRXNEMPTYIF write setRXNEMPTYIF;
    property RXOVFLIE : TBits_1 read getRXOVFLIE write setRXOVFLIE;
    property RXOVFLIF : TBits_1 read getRXOVFLIF write setRXOVFLIF;
    property TXEMPTYIE : TBits_1 read getTXEMPTYIE write setTXEMPTYIE;
    property TXEMPTYIF : TBits_1 read getTXEMPTYIF write setTXEMPTYIF;
    property TXHALFIE : TBits_1 read getTXHALFIE write setTXHALFIE;
    property TXHALFIF : TBits_1 read getTXHALFIF write setTXHALFIF;
    property TXNFULLIE : TBits_1 read getTXNFULLIE write setTXNFULLIE;
    property TXNFULLIF : TBits_1 read getTXNFULLIF write setTXNFULLIF;
    property w : TBits_32 read getw write setw;
  end;
  TCAN1_C1FIFOCI2 = record
  private
    function  getCFIFOCI : TBits_5; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setCFIFOCI(thebits : TBits_5); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    property CFIFOCI : TBits_5 read getCFIFOCI write setCFIFOCI;
    property w : TBits_32 read getw write setw;
  end;
  TCAN1_C1FIFOCON3 = record
  private
    function  getDONLY : TBits_1; assembler; nostackframe; inline;
    function  getFRESET : TBits_1; assembler; nostackframe; inline;
    function  getFSIZE : TBits_5; assembler; nostackframe; inline;
    function  getRTREN : TBits_1; assembler; nostackframe; inline;
    function  getTXABAT : TBits_1; assembler; nostackframe; inline;
    function  getTXEN : TBits_1; assembler; nostackframe; inline;
    function  getTXERR : TBits_1; assembler; nostackframe; inline;
    function  getTXLARB : TBits_1; assembler; nostackframe; inline;
    function  getTXPRI : TBits_2; assembler; nostackframe; inline;
    function  getTXREQ : TBits_1; assembler; nostackframe; inline;
    function  getUINC : TBits_1; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setDONLY(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setFRESET(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setFSIZE(thebits : TBits_5); assembler; nostackframe; inline;
    procedure setRTREN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXABAT(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXEN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXERR(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXLARB(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXPRI(thebits : TBits_2); assembler; nostackframe; inline;
    procedure setTXREQ(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setUINC(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearDONLY;
    procedure clearFRESET;
    procedure clearRTREN;
    procedure clearTXABAT;
    procedure clearTXEN;
    procedure clearTXERR;
    procedure clearTXLARB;
    procedure clearTXREQ;
    procedure clearUINC;
    procedure setDONLY;
    procedure setFRESET;
    procedure setRTREN;
    procedure setTXABAT;
    procedure setTXEN;
    procedure setTXERR;
    procedure setTXLARB;
    procedure setTXREQ;
    procedure setUINC;
    property DONLY : TBits_1 read getDONLY write setDONLY;
    property FRESET : TBits_1 read getFRESET write setFRESET;
    property FSIZE : TBits_5 read getFSIZE write setFSIZE;
    property RTREN : TBits_1 read getRTREN write setRTREN;
    property TXABAT : TBits_1 read getTXABAT write setTXABAT;
    property TXEN : TBits_1 read getTXEN write setTXEN;
    property TXERR : TBits_1 read getTXERR write setTXERR;
    property TXLARB : TBits_1 read getTXLARB write setTXLARB;
    property TXPRI : TBits_2 read getTXPRI write setTXPRI;
    property TXREQ : TBits_1 read getTXREQ write setTXREQ;
    property UINC : TBits_1 read getUINC write setUINC;
    property w : TBits_32 read getw write setw;
  end;
  TCAN1_C1FIFOINT3 = record
  private
    function  getRXFULLIE : TBits_1; assembler; nostackframe; inline;
    function  getRXFULLIF : TBits_1; assembler; nostackframe; inline;
    function  getRXHALFIE : TBits_1; assembler; nostackframe; inline;
    function  getRXHALFIF : TBits_1; assembler; nostackframe; inline;
    function  getRXNEMPTYIE : TBits_1; assembler; nostackframe; inline;
    function  getRXNEMPTYIF : TBits_1; assembler; nostackframe; inline;
    function  getRXOVFLIE : TBits_1; assembler; nostackframe; inline;
    function  getRXOVFLIF : TBits_1; assembler; nostackframe; inline;
    function  getTXEMPTYIE : TBits_1; assembler; nostackframe; inline;
    function  getTXEMPTYIF : TBits_1; assembler; nostackframe; inline;
    function  getTXHALFIE : TBits_1; assembler; nostackframe; inline;
    function  getTXHALFIF : TBits_1; assembler; nostackframe; inline;
    function  getTXNFULLIE : TBits_1; assembler; nostackframe; inline;
    function  getTXNFULLIF : TBits_1; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setRXFULLIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXFULLIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXHALFIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXHALFIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXNEMPTYIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXNEMPTYIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXOVFLIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXOVFLIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXEMPTYIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXEMPTYIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXHALFIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXHALFIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXNFULLIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXNFULLIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearRXFULLIE;
    procedure clearRXFULLIF;
    procedure clearRXHALFIE;
    procedure clearRXHALFIF;
    procedure clearRXNEMPTYIE;
    procedure clearRXNEMPTYIF;
    procedure clearRXOVFLIE;
    procedure clearRXOVFLIF;
    procedure clearTXEMPTYIE;
    procedure clearTXEMPTYIF;
    procedure clearTXHALFIE;
    procedure clearTXHALFIF;
    procedure clearTXNFULLIE;
    procedure clearTXNFULLIF;
    procedure setRXFULLIE;
    procedure setRXFULLIF;
    procedure setRXHALFIE;
    procedure setRXHALFIF;
    procedure setRXNEMPTYIE;
    procedure setRXNEMPTYIF;
    procedure setRXOVFLIE;
    procedure setRXOVFLIF;
    procedure setTXEMPTYIE;
    procedure setTXEMPTYIF;
    procedure setTXHALFIE;
    procedure setTXHALFIF;
    procedure setTXNFULLIE;
    procedure setTXNFULLIF;
    property RXFULLIE : TBits_1 read getRXFULLIE write setRXFULLIE;
    property RXFULLIF : TBits_1 read getRXFULLIF write setRXFULLIF;
    property RXHALFIE : TBits_1 read getRXHALFIE write setRXHALFIE;
    property RXHALFIF : TBits_1 read getRXHALFIF write setRXHALFIF;
    property RXNEMPTYIE : TBits_1 read getRXNEMPTYIE write setRXNEMPTYIE;
    property RXNEMPTYIF : TBits_1 read getRXNEMPTYIF write setRXNEMPTYIF;
    property RXOVFLIE : TBits_1 read getRXOVFLIE write setRXOVFLIE;
    property RXOVFLIF : TBits_1 read getRXOVFLIF write setRXOVFLIF;
    property TXEMPTYIE : TBits_1 read getTXEMPTYIE write setTXEMPTYIE;
    property TXEMPTYIF : TBits_1 read getTXEMPTYIF write setTXEMPTYIF;
    property TXHALFIE : TBits_1 read getTXHALFIE write setTXHALFIE;
    property TXHALFIF : TBits_1 read getTXHALFIF write setTXHALFIF;
    property TXNFULLIE : TBits_1 read getTXNFULLIE write setTXNFULLIE;
    property TXNFULLIF : TBits_1 read getTXNFULLIF write setTXNFULLIF;
    property w : TBits_32 read getw write setw;
  end;
  TCAN1_C1FIFOCI3 = record
  private
    function  getCFIFOCI : TBits_5; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setCFIFOCI(thebits : TBits_5); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    property CFIFOCI : TBits_5 read getCFIFOCI write setCFIFOCI;
    property w : TBits_32 read getw write setw;
  end;
  TCAN1_C1FIFOCON4 = record
  private
    function  getDONLY : TBits_1; assembler; nostackframe; inline;
    function  getFRESET : TBits_1; assembler; nostackframe; inline;
    function  getFSIZE : TBits_5; assembler; nostackframe; inline;
    function  getRTREN : TBits_1; assembler; nostackframe; inline;
    function  getTXABAT : TBits_1; assembler; nostackframe; inline;
    function  getTXEN : TBits_1; assembler; nostackframe; inline;
    function  getTXERR : TBits_1; assembler; nostackframe; inline;
    function  getTXLARB : TBits_1; assembler; nostackframe; inline;
    function  getTXPRI : TBits_2; assembler; nostackframe; inline;
    function  getTXREQ : TBits_1; assembler; nostackframe; inline;
    function  getUINC : TBits_1; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setDONLY(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setFRESET(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setFSIZE(thebits : TBits_5); assembler; nostackframe; inline;
    procedure setRTREN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXABAT(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXEN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXERR(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXLARB(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXPRI(thebits : TBits_2); assembler; nostackframe; inline;
    procedure setTXREQ(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setUINC(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearDONLY;
    procedure clearFRESET;
    procedure clearRTREN;
    procedure clearTXABAT;
    procedure clearTXEN;
    procedure clearTXERR;
    procedure clearTXLARB;
    procedure clearTXREQ;
    procedure clearUINC;
    procedure setDONLY;
    procedure setFRESET;
    procedure setRTREN;
    procedure setTXABAT;
    procedure setTXEN;
    procedure setTXERR;
    procedure setTXLARB;
    procedure setTXREQ;
    procedure setUINC;
    property DONLY : TBits_1 read getDONLY write setDONLY;
    property FRESET : TBits_1 read getFRESET write setFRESET;
    property FSIZE : TBits_5 read getFSIZE write setFSIZE;
    property RTREN : TBits_1 read getRTREN write setRTREN;
    property TXABAT : TBits_1 read getTXABAT write setTXABAT;
    property TXEN : TBits_1 read getTXEN write setTXEN;
    property TXERR : TBits_1 read getTXERR write setTXERR;
    property TXLARB : TBits_1 read getTXLARB write setTXLARB;
    property TXPRI : TBits_2 read getTXPRI write setTXPRI;
    property TXREQ : TBits_1 read getTXREQ write setTXREQ;
    property UINC : TBits_1 read getUINC write setUINC;
    property w : TBits_32 read getw write setw;
  end;
  TCAN1_C1FIFOINT4 = record
  private
    function  getRXFULLIE : TBits_1; assembler; nostackframe; inline;
    function  getRXFULLIF : TBits_1; assembler; nostackframe; inline;
    function  getRXHALFIE : TBits_1; assembler; nostackframe; inline;
    function  getRXHALFIF : TBits_1; assembler; nostackframe; inline;
    function  getRXNEMPTYIE : TBits_1; assembler; nostackframe; inline;
    function  getRXNEMPTYIF : TBits_1; assembler; nostackframe; inline;
    function  getRXOVFLIE : TBits_1; assembler; nostackframe; inline;
    function  getRXOVFLIF : TBits_1; assembler; nostackframe; inline;
    function  getTXEMPTYIE : TBits_1; assembler; nostackframe; inline;
    function  getTXEMPTYIF : TBits_1; assembler; nostackframe; inline;
    function  getTXHALFIE : TBits_1; assembler; nostackframe; inline;
    function  getTXHALFIF : TBits_1; assembler; nostackframe; inline;
    function  getTXNFULLIE : TBits_1; assembler; nostackframe; inline;
    function  getTXNFULLIF : TBits_1; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setRXFULLIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXFULLIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXHALFIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXHALFIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXNEMPTYIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXNEMPTYIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXOVFLIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXOVFLIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXEMPTYIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXEMPTYIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXHALFIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXHALFIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXNFULLIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXNFULLIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearRXFULLIE;
    procedure clearRXFULLIF;
    procedure clearRXHALFIE;
    procedure clearRXHALFIF;
    procedure clearRXNEMPTYIE;
    procedure clearRXNEMPTYIF;
    procedure clearRXOVFLIE;
    procedure clearRXOVFLIF;
    procedure clearTXEMPTYIE;
    procedure clearTXEMPTYIF;
    procedure clearTXHALFIE;
    procedure clearTXHALFIF;
    procedure clearTXNFULLIE;
    procedure clearTXNFULLIF;
    procedure setRXFULLIE;
    procedure setRXFULLIF;
    procedure setRXHALFIE;
    procedure setRXHALFIF;
    procedure setRXNEMPTYIE;
    procedure setRXNEMPTYIF;
    procedure setRXOVFLIE;
    procedure setRXOVFLIF;
    procedure setTXEMPTYIE;
    procedure setTXEMPTYIF;
    procedure setTXHALFIE;
    procedure setTXHALFIF;
    procedure setTXNFULLIE;
    procedure setTXNFULLIF;
    property RXFULLIE : TBits_1 read getRXFULLIE write setRXFULLIE;
    property RXFULLIF : TBits_1 read getRXFULLIF write setRXFULLIF;
    property RXHALFIE : TBits_1 read getRXHALFIE write setRXHALFIE;
    property RXHALFIF : TBits_1 read getRXHALFIF write setRXHALFIF;
    property RXNEMPTYIE : TBits_1 read getRXNEMPTYIE write setRXNEMPTYIE;
    property RXNEMPTYIF : TBits_1 read getRXNEMPTYIF write setRXNEMPTYIF;
    property RXOVFLIE : TBits_1 read getRXOVFLIE write setRXOVFLIE;
    property RXOVFLIF : TBits_1 read getRXOVFLIF write setRXOVFLIF;
    property TXEMPTYIE : TBits_1 read getTXEMPTYIE write setTXEMPTYIE;
    property TXEMPTYIF : TBits_1 read getTXEMPTYIF write setTXEMPTYIF;
    property TXHALFIE : TBits_1 read getTXHALFIE write setTXHALFIE;
    property TXHALFIF : TBits_1 read getTXHALFIF write setTXHALFIF;
    property TXNFULLIE : TBits_1 read getTXNFULLIE write setTXNFULLIE;
    property TXNFULLIF : TBits_1 read getTXNFULLIF write setTXNFULLIF;
    property w : TBits_32 read getw write setw;
  end;
  TCAN1_C1FIFOCI4 = record
  private
    function  getCFIFOCI : TBits_5; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setCFIFOCI(thebits : TBits_5); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    property CFIFOCI : TBits_5 read getCFIFOCI write setCFIFOCI;
    property w : TBits_32 read getw write setw;
  end;
  TCAN1_C1FIFOCON5 = record
  private
    function  getDONLY : TBits_1; assembler; nostackframe; inline;
    function  getFRESET : TBits_1; assembler; nostackframe; inline;
    function  getFSIZE : TBits_5; assembler; nostackframe; inline;
    function  getRTREN : TBits_1; assembler; nostackframe; inline;
    function  getTXABAT : TBits_1; assembler; nostackframe; inline;
    function  getTXEN : TBits_1; assembler; nostackframe; inline;
    function  getTXERR : TBits_1; assembler; nostackframe; inline;
    function  getTXLARB : TBits_1; assembler; nostackframe; inline;
    function  getTXPRI : TBits_2; assembler; nostackframe; inline;
    function  getTXREQ : TBits_1; assembler; nostackframe; inline;
    function  getUINC : TBits_1; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setDONLY(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setFRESET(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setFSIZE(thebits : TBits_5); assembler; nostackframe; inline;
    procedure setRTREN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXABAT(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXEN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXERR(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXLARB(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXPRI(thebits : TBits_2); assembler; nostackframe; inline;
    procedure setTXREQ(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setUINC(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearDONLY;
    procedure clearFRESET;
    procedure clearRTREN;
    procedure clearTXABAT;
    procedure clearTXEN;
    procedure clearTXERR;
    procedure clearTXLARB;
    procedure clearTXREQ;
    procedure clearUINC;
    procedure setDONLY;
    procedure setFRESET;
    procedure setRTREN;
    procedure setTXABAT;
    procedure setTXEN;
    procedure setTXERR;
    procedure setTXLARB;
    procedure setTXREQ;
    procedure setUINC;
    property DONLY : TBits_1 read getDONLY write setDONLY;
    property FRESET : TBits_1 read getFRESET write setFRESET;
    property FSIZE : TBits_5 read getFSIZE write setFSIZE;
    property RTREN : TBits_1 read getRTREN write setRTREN;
    property TXABAT : TBits_1 read getTXABAT write setTXABAT;
    property TXEN : TBits_1 read getTXEN write setTXEN;
    property TXERR : TBits_1 read getTXERR write setTXERR;
    property TXLARB : TBits_1 read getTXLARB write setTXLARB;
    property TXPRI : TBits_2 read getTXPRI write setTXPRI;
    property TXREQ : TBits_1 read getTXREQ write setTXREQ;
    property UINC : TBits_1 read getUINC write setUINC;
    property w : TBits_32 read getw write setw;
  end;
  TCAN1_C1FIFOINT5 = record
  private
    function  getRXFULLIE : TBits_1; assembler; nostackframe; inline;
    function  getRXFULLIF : TBits_1; assembler; nostackframe; inline;
    function  getRXHALFIE : TBits_1; assembler; nostackframe; inline;
    function  getRXHALFIF : TBits_1; assembler; nostackframe; inline;
    function  getRXNEMPTYIE : TBits_1; assembler; nostackframe; inline;
    function  getRXNEMPTYIF : TBits_1; assembler; nostackframe; inline;
    function  getRXOVFLIE : TBits_1; assembler; nostackframe; inline;
    function  getRXOVFLIF : TBits_1; assembler; nostackframe; inline;
    function  getTXEMPTYIE : TBits_1; assembler; nostackframe; inline;
    function  getTXEMPTYIF : TBits_1; assembler; nostackframe; inline;
    function  getTXHALFIE : TBits_1; assembler; nostackframe; inline;
    function  getTXHALFIF : TBits_1; assembler; nostackframe; inline;
    function  getTXNFULLIE : TBits_1; assembler; nostackframe; inline;
    function  getTXNFULLIF : TBits_1; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setRXFULLIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXFULLIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXHALFIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXHALFIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXNEMPTYIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXNEMPTYIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXOVFLIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXOVFLIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXEMPTYIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXEMPTYIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXHALFIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXHALFIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXNFULLIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXNFULLIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearRXFULLIE;
    procedure clearRXFULLIF;
    procedure clearRXHALFIE;
    procedure clearRXHALFIF;
    procedure clearRXNEMPTYIE;
    procedure clearRXNEMPTYIF;
    procedure clearRXOVFLIE;
    procedure clearRXOVFLIF;
    procedure clearTXEMPTYIE;
    procedure clearTXEMPTYIF;
    procedure clearTXHALFIE;
    procedure clearTXHALFIF;
    procedure clearTXNFULLIE;
    procedure clearTXNFULLIF;
    procedure setRXFULLIE;
    procedure setRXFULLIF;
    procedure setRXHALFIE;
    procedure setRXHALFIF;
    procedure setRXNEMPTYIE;
    procedure setRXNEMPTYIF;
    procedure setRXOVFLIE;
    procedure setRXOVFLIF;
    procedure setTXEMPTYIE;
    procedure setTXEMPTYIF;
    procedure setTXHALFIE;
    procedure setTXHALFIF;
    procedure setTXNFULLIE;
    procedure setTXNFULLIF;
    property RXFULLIE : TBits_1 read getRXFULLIE write setRXFULLIE;
    property RXFULLIF : TBits_1 read getRXFULLIF write setRXFULLIF;
    property RXHALFIE : TBits_1 read getRXHALFIE write setRXHALFIE;
    property RXHALFIF : TBits_1 read getRXHALFIF write setRXHALFIF;
    property RXNEMPTYIE : TBits_1 read getRXNEMPTYIE write setRXNEMPTYIE;
    property RXNEMPTYIF : TBits_1 read getRXNEMPTYIF write setRXNEMPTYIF;
    property RXOVFLIE : TBits_1 read getRXOVFLIE write setRXOVFLIE;
    property RXOVFLIF : TBits_1 read getRXOVFLIF write setRXOVFLIF;
    property TXEMPTYIE : TBits_1 read getTXEMPTYIE write setTXEMPTYIE;
    property TXEMPTYIF : TBits_1 read getTXEMPTYIF write setTXEMPTYIF;
    property TXHALFIE : TBits_1 read getTXHALFIE write setTXHALFIE;
    property TXHALFIF : TBits_1 read getTXHALFIF write setTXHALFIF;
    property TXNFULLIE : TBits_1 read getTXNFULLIE write setTXNFULLIE;
    property TXNFULLIF : TBits_1 read getTXNFULLIF write setTXNFULLIF;
    property w : TBits_32 read getw write setw;
  end;
  TCAN1_C1FIFOCI5 = record
  private
    function  getCFIFOCI : TBits_5; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setCFIFOCI(thebits : TBits_5); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    property CFIFOCI : TBits_5 read getCFIFOCI write setCFIFOCI;
    property w : TBits_32 read getw write setw;
  end;
  TCAN1_C1FIFOCON6 = record
  private
    function  getDONLY : TBits_1; assembler; nostackframe; inline;
    function  getFRESET : TBits_1; assembler; nostackframe; inline;
    function  getFSIZE : TBits_5; assembler; nostackframe; inline;
    function  getRTREN : TBits_1; assembler; nostackframe; inline;
    function  getTXABAT : TBits_1; assembler; nostackframe; inline;
    function  getTXEN : TBits_1; assembler; nostackframe; inline;
    function  getTXERR : TBits_1; assembler; nostackframe; inline;
    function  getTXLARB : TBits_1; assembler; nostackframe; inline;
    function  getTXPRI : TBits_2; assembler; nostackframe; inline;
    function  getTXREQ : TBits_1; assembler; nostackframe; inline;
    function  getUINC : TBits_1; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setDONLY(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setFRESET(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setFSIZE(thebits : TBits_5); assembler; nostackframe; inline;
    procedure setRTREN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXABAT(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXEN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXERR(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXLARB(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXPRI(thebits : TBits_2); assembler; nostackframe; inline;
    procedure setTXREQ(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setUINC(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearDONLY;
    procedure clearFRESET;
    procedure clearRTREN;
    procedure clearTXABAT;
    procedure clearTXEN;
    procedure clearTXERR;
    procedure clearTXLARB;
    procedure clearTXREQ;
    procedure clearUINC;
    procedure setDONLY;
    procedure setFRESET;
    procedure setRTREN;
    procedure setTXABAT;
    procedure setTXEN;
    procedure setTXERR;
    procedure setTXLARB;
    procedure setTXREQ;
    procedure setUINC;
    property DONLY : TBits_1 read getDONLY write setDONLY;
    property FRESET : TBits_1 read getFRESET write setFRESET;
    property FSIZE : TBits_5 read getFSIZE write setFSIZE;
    property RTREN : TBits_1 read getRTREN write setRTREN;
    property TXABAT : TBits_1 read getTXABAT write setTXABAT;
    property TXEN : TBits_1 read getTXEN write setTXEN;
    property TXERR : TBits_1 read getTXERR write setTXERR;
    property TXLARB : TBits_1 read getTXLARB write setTXLARB;
    property TXPRI : TBits_2 read getTXPRI write setTXPRI;
    property TXREQ : TBits_1 read getTXREQ write setTXREQ;
    property UINC : TBits_1 read getUINC write setUINC;
    property w : TBits_32 read getw write setw;
  end;
  TCAN1_C1FIFOINT6 = record
  private
    function  getRXFULLIE : TBits_1; assembler; nostackframe; inline;
    function  getRXFULLIF : TBits_1; assembler; nostackframe; inline;
    function  getRXHALFIE : TBits_1; assembler; nostackframe; inline;
    function  getRXHALFIF : TBits_1; assembler; nostackframe; inline;
    function  getRXNEMPTYIE : TBits_1; assembler; nostackframe; inline;
    function  getRXNEMPTYIF : TBits_1; assembler; nostackframe; inline;
    function  getRXOVFLIE : TBits_1; assembler; nostackframe; inline;
    function  getRXOVFLIF : TBits_1; assembler; nostackframe; inline;
    function  getTXEMPTYIE : TBits_1; assembler; nostackframe; inline;
    function  getTXEMPTYIF : TBits_1; assembler; nostackframe; inline;
    function  getTXHALFIE : TBits_1; assembler; nostackframe; inline;
    function  getTXHALFIF : TBits_1; assembler; nostackframe; inline;
    function  getTXNFULLIE : TBits_1; assembler; nostackframe; inline;
    function  getTXNFULLIF : TBits_1; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setRXFULLIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXFULLIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXHALFIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXHALFIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXNEMPTYIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXNEMPTYIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXOVFLIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXOVFLIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXEMPTYIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXEMPTYIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXHALFIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXHALFIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXNFULLIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXNFULLIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearRXFULLIE;
    procedure clearRXFULLIF;
    procedure clearRXHALFIE;
    procedure clearRXHALFIF;
    procedure clearRXNEMPTYIE;
    procedure clearRXNEMPTYIF;
    procedure clearRXOVFLIE;
    procedure clearRXOVFLIF;
    procedure clearTXEMPTYIE;
    procedure clearTXEMPTYIF;
    procedure clearTXHALFIE;
    procedure clearTXHALFIF;
    procedure clearTXNFULLIE;
    procedure clearTXNFULLIF;
    procedure setRXFULLIE;
    procedure setRXFULLIF;
    procedure setRXHALFIE;
    procedure setRXHALFIF;
    procedure setRXNEMPTYIE;
    procedure setRXNEMPTYIF;
    procedure setRXOVFLIE;
    procedure setRXOVFLIF;
    procedure setTXEMPTYIE;
    procedure setTXEMPTYIF;
    procedure setTXHALFIE;
    procedure setTXHALFIF;
    procedure setTXNFULLIE;
    procedure setTXNFULLIF;
    property RXFULLIE : TBits_1 read getRXFULLIE write setRXFULLIE;
    property RXFULLIF : TBits_1 read getRXFULLIF write setRXFULLIF;
    property RXHALFIE : TBits_1 read getRXHALFIE write setRXHALFIE;
    property RXHALFIF : TBits_1 read getRXHALFIF write setRXHALFIF;
    property RXNEMPTYIE : TBits_1 read getRXNEMPTYIE write setRXNEMPTYIE;
    property RXNEMPTYIF : TBits_1 read getRXNEMPTYIF write setRXNEMPTYIF;
    property RXOVFLIE : TBits_1 read getRXOVFLIE write setRXOVFLIE;
    property RXOVFLIF : TBits_1 read getRXOVFLIF write setRXOVFLIF;
    property TXEMPTYIE : TBits_1 read getTXEMPTYIE write setTXEMPTYIE;
    property TXEMPTYIF : TBits_1 read getTXEMPTYIF write setTXEMPTYIF;
    property TXHALFIE : TBits_1 read getTXHALFIE write setTXHALFIE;
    property TXHALFIF : TBits_1 read getTXHALFIF write setTXHALFIF;
    property TXNFULLIE : TBits_1 read getTXNFULLIE write setTXNFULLIE;
    property TXNFULLIF : TBits_1 read getTXNFULLIF write setTXNFULLIF;
    property w : TBits_32 read getw write setw;
  end;
  TCAN1_C1FIFOCI6 = record
  private
    function  getCFIFOCI : TBits_5; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setCFIFOCI(thebits : TBits_5); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    property CFIFOCI : TBits_5 read getCFIFOCI write setCFIFOCI;
    property w : TBits_32 read getw write setw;
  end;
  TCAN1_C1FIFOCON7 = record
  private
    function  getDONLY : TBits_1; assembler; nostackframe; inline;
    function  getFRESET : TBits_1; assembler; nostackframe; inline;
    function  getFSIZE : TBits_5; assembler; nostackframe; inline;
    function  getRTREN : TBits_1; assembler; nostackframe; inline;
    function  getTXABAT : TBits_1; assembler; nostackframe; inline;
    function  getTXEN : TBits_1; assembler; nostackframe; inline;
    function  getTXERR : TBits_1; assembler; nostackframe; inline;
    function  getTXLARB : TBits_1; assembler; nostackframe; inline;
    function  getTXPRI : TBits_2; assembler; nostackframe; inline;
    function  getTXREQ : TBits_1; assembler; nostackframe; inline;
    function  getUINC : TBits_1; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setDONLY(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setFRESET(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setFSIZE(thebits : TBits_5); assembler; nostackframe; inline;
    procedure setRTREN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXABAT(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXEN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXERR(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXLARB(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXPRI(thebits : TBits_2); assembler; nostackframe; inline;
    procedure setTXREQ(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setUINC(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearDONLY;
    procedure clearFRESET;
    procedure clearRTREN;
    procedure clearTXABAT;
    procedure clearTXEN;
    procedure clearTXERR;
    procedure clearTXLARB;
    procedure clearTXREQ;
    procedure clearUINC;
    procedure setDONLY;
    procedure setFRESET;
    procedure setRTREN;
    procedure setTXABAT;
    procedure setTXEN;
    procedure setTXERR;
    procedure setTXLARB;
    procedure setTXREQ;
    procedure setUINC;
    property DONLY : TBits_1 read getDONLY write setDONLY;
    property FRESET : TBits_1 read getFRESET write setFRESET;
    property FSIZE : TBits_5 read getFSIZE write setFSIZE;
    property RTREN : TBits_1 read getRTREN write setRTREN;
    property TXABAT : TBits_1 read getTXABAT write setTXABAT;
    property TXEN : TBits_1 read getTXEN write setTXEN;
    property TXERR : TBits_1 read getTXERR write setTXERR;
    property TXLARB : TBits_1 read getTXLARB write setTXLARB;
    property TXPRI : TBits_2 read getTXPRI write setTXPRI;
    property TXREQ : TBits_1 read getTXREQ write setTXREQ;
    property UINC : TBits_1 read getUINC write setUINC;
    property w : TBits_32 read getw write setw;
  end;
  TCAN1_C1FIFOINT7 = record
  private
    function  getRXFULLIE : TBits_1; assembler; nostackframe; inline;
    function  getRXFULLIF : TBits_1; assembler; nostackframe; inline;
    function  getRXHALFIE : TBits_1; assembler; nostackframe; inline;
    function  getRXHALFIF : TBits_1; assembler; nostackframe; inline;
    function  getRXNEMPTYIE : TBits_1; assembler; nostackframe; inline;
    function  getRXNEMPTYIF : TBits_1; assembler; nostackframe; inline;
    function  getRXOVFLIE : TBits_1; assembler; nostackframe; inline;
    function  getRXOVFLIF : TBits_1; assembler; nostackframe; inline;
    function  getTXEMPTYIE : TBits_1; assembler; nostackframe; inline;
    function  getTXEMPTYIF : TBits_1; assembler; nostackframe; inline;
    function  getTXHALFIE : TBits_1; assembler; nostackframe; inline;
    function  getTXHALFIF : TBits_1; assembler; nostackframe; inline;
    function  getTXNFULLIE : TBits_1; assembler; nostackframe; inline;
    function  getTXNFULLIF : TBits_1; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setRXFULLIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXFULLIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXHALFIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXHALFIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXNEMPTYIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXNEMPTYIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXOVFLIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXOVFLIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXEMPTYIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXEMPTYIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXHALFIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXHALFIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXNFULLIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXNFULLIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearRXFULLIE;
    procedure clearRXFULLIF;
    procedure clearRXHALFIE;
    procedure clearRXHALFIF;
    procedure clearRXNEMPTYIE;
    procedure clearRXNEMPTYIF;
    procedure clearRXOVFLIE;
    procedure clearRXOVFLIF;
    procedure clearTXEMPTYIE;
    procedure clearTXEMPTYIF;
    procedure clearTXHALFIE;
    procedure clearTXHALFIF;
    procedure clearTXNFULLIE;
    procedure clearTXNFULLIF;
    procedure setRXFULLIE;
    procedure setRXFULLIF;
    procedure setRXHALFIE;
    procedure setRXHALFIF;
    procedure setRXNEMPTYIE;
    procedure setRXNEMPTYIF;
    procedure setRXOVFLIE;
    procedure setRXOVFLIF;
    procedure setTXEMPTYIE;
    procedure setTXEMPTYIF;
    procedure setTXHALFIE;
    procedure setTXHALFIF;
    procedure setTXNFULLIE;
    procedure setTXNFULLIF;
    property RXFULLIE : TBits_1 read getRXFULLIE write setRXFULLIE;
    property RXFULLIF : TBits_1 read getRXFULLIF write setRXFULLIF;
    property RXHALFIE : TBits_1 read getRXHALFIE write setRXHALFIE;
    property RXHALFIF : TBits_1 read getRXHALFIF write setRXHALFIF;
    property RXNEMPTYIE : TBits_1 read getRXNEMPTYIE write setRXNEMPTYIE;
    property RXNEMPTYIF : TBits_1 read getRXNEMPTYIF write setRXNEMPTYIF;
    property RXOVFLIE : TBits_1 read getRXOVFLIE write setRXOVFLIE;
    property RXOVFLIF : TBits_1 read getRXOVFLIF write setRXOVFLIF;
    property TXEMPTYIE : TBits_1 read getTXEMPTYIE write setTXEMPTYIE;
    property TXEMPTYIF : TBits_1 read getTXEMPTYIF write setTXEMPTYIF;
    property TXHALFIE : TBits_1 read getTXHALFIE write setTXHALFIE;
    property TXHALFIF : TBits_1 read getTXHALFIF write setTXHALFIF;
    property TXNFULLIE : TBits_1 read getTXNFULLIE write setTXNFULLIE;
    property TXNFULLIF : TBits_1 read getTXNFULLIF write setTXNFULLIF;
    property w : TBits_32 read getw write setw;
  end;
  TCAN1_C1FIFOCI7 = record
  private
    function  getCFIFOCI : TBits_5; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setCFIFOCI(thebits : TBits_5); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    property CFIFOCI : TBits_5 read getCFIFOCI write setCFIFOCI;
    property w : TBits_32 read getw write setw;
  end;
  TCAN1_C1FIFOCON8 = record
  private
    function  getDONLY : TBits_1; assembler; nostackframe; inline;
    function  getFRESET : TBits_1; assembler; nostackframe; inline;
    function  getFSIZE : TBits_5; assembler; nostackframe; inline;
    function  getRTREN : TBits_1; assembler; nostackframe; inline;
    function  getTXABAT : TBits_1; assembler; nostackframe; inline;
    function  getTXEN : TBits_1; assembler; nostackframe; inline;
    function  getTXERR : TBits_1; assembler; nostackframe; inline;
    function  getTXLARB : TBits_1; assembler; nostackframe; inline;
    function  getTXPRI : TBits_2; assembler; nostackframe; inline;
    function  getTXREQ : TBits_1; assembler; nostackframe; inline;
    function  getUINC : TBits_1; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setDONLY(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setFRESET(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setFSIZE(thebits : TBits_5); assembler; nostackframe; inline;
    procedure setRTREN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXABAT(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXEN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXERR(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXLARB(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXPRI(thebits : TBits_2); assembler; nostackframe; inline;
    procedure setTXREQ(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setUINC(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearDONLY;
    procedure clearFRESET;
    procedure clearRTREN;
    procedure clearTXABAT;
    procedure clearTXEN;
    procedure clearTXERR;
    procedure clearTXLARB;
    procedure clearTXREQ;
    procedure clearUINC;
    procedure setDONLY;
    procedure setFRESET;
    procedure setRTREN;
    procedure setTXABAT;
    procedure setTXEN;
    procedure setTXERR;
    procedure setTXLARB;
    procedure setTXREQ;
    procedure setUINC;
    property DONLY : TBits_1 read getDONLY write setDONLY;
    property FRESET : TBits_1 read getFRESET write setFRESET;
    property FSIZE : TBits_5 read getFSIZE write setFSIZE;
    property RTREN : TBits_1 read getRTREN write setRTREN;
    property TXABAT : TBits_1 read getTXABAT write setTXABAT;
    property TXEN : TBits_1 read getTXEN write setTXEN;
    property TXERR : TBits_1 read getTXERR write setTXERR;
    property TXLARB : TBits_1 read getTXLARB write setTXLARB;
    property TXPRI : TBits_2 read getTXPRI write setTXPRI;
    property TXREQ : TBits_1 read getTXREQ write setTXREQ;
    property UINC : TBits_1 read getUINC write setUINC;
    property w : TBits_32 read getw write setw;
  end;
  TCAN1_C1FIFOINT8 = record
  private
    function  getRXFULLIE : TBits_1; assembler; nostackframe; inline;
    function  getRXFULLIF : TBits_1; assembler; nostackframe; inline;
    function  getRXHALFIE : TBits_1; assembler; nostackframe; inline;
    function  getRXHALFIF : TBits_1; assembler; nostackframe; inline;
    function  getRXNEMPTYIE : TBits_1; assembler; nostackframe; inline;
    function  getRXNEMPTYIF : TBits_1; assembler; nostackframe; inline;
    function  getRXOVFLIE : TBits_1; assembler; nostackframe; inline;
    function  getRXOVFLIF : TBits_1; assembler; nostackframe; inline;
    function  getTXEMPTYIE : TBits_1; assembler; nostackframe; inline;
    function  getTXEMPTYIF : TBits_1; assembler; nostackframe; inline;
    function  getTXHALFIE : TBits_1; assembler; nostackframe; inline;
    function  getTXHALFIF : TBits_1; assembler; nostackframe; inline;
    function  getTXNFULLIE : TBits_1; assembler; nostackframe; inline;
    function  getTXNFULLIF : TBits_1; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setRXFULLIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXFULLIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXHALFIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXHALFIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXNEMPTYIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXNEMPTYIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXOVFLIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXOVFLIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXEMPTYIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXEMPTYIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXHALFIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXHALFIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXNFULLIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXNFULLIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearRXFULLIE;
    procedure clearRXFULLIF;
    procedure clearRXHALFIE;
    procedure clearRXHALFIF;
    procedure clearRXNEMPTYIE;
    procedure clearRXNEMPTYIF;
    procedure clearRXOVFLIE;
    procedure clearRXOVFLIF;
    procedure clearTXEMPTYIE;
    procedure clearTXEMPTYIF;
    procedure clearTXHALFIE;
    procedure clearTXHALFIF;
    procedure clearTXNFULLIE;
    procedure clearTXNFULLIF;
    procedure setRXFULLIE;
    procedure setRXFULLIF;
    procedure setRXHALFIE;
    procedure setRXHALFIF;
    procedure setRXNEMPTYIE;
    procedure setRXNEMPTYIF;
    procedure setRXOVFLIE;
    procedure setRXOVFLIF;
    procedure setTXEMPTYIE;
    procedure setTXEMPTYIF;
    procedure setTXHALFIE;
    procedure setTXHALFIF;
    procedure setTXNFULLIE;
    procedure setTXNFULLIF;
    property RXFULLIE : TBits_1 read getRXFULLIE write setRXFULLIE;
    property RXFULLIF : TBits_1 read getRXFULLIF write setRXFULLIF;
    property RXHALFIE : TBits_1 read getRXHALFIE write setRXHALFIE;
    property RXHALFIF : TBits_1 read getRXHALFIF write setRXHALFIF;
    property RXNEMPTYIE : TBits_1 read getRXNEMPTYIE write setRXNEMPTYIE;
    property RXNEMPTYIF : TBits_1 read getRXNEMPTYIF write setRXNEMPTYIF;
    property RXOVFLIE : TBits_1 read getRXOVFLIE write setRXOVFLIE;
    property RXOVFLIF : TBits_1 read getRXOVFLIF write setRXOVFLIF;
    property TXEMPTYIE : TBits_1 read getTXEMPTYIE write setTXEMPTYIE;
    property TXEMPTYIF : TBits_1 read getTXEMPTYIF write setTXEMPTYIF;
    property TXHALFIE : TBits_1 read getTXHALFIE write setTXHALFIE;
    property TXHALFIF : TBits_1 read getTXHALFIF write setTXHALFIF;
    property TXNFULLIE : TBits_1 read getTXNFULLIE write setTXNFULLIE;
    property TXNFULLIF : TBits_1 read getTXNFULLIF write setTXNFULLIF;
    property w : TBits_32 read getw write setw;
  end;
  TCAN1_C1FIFOCI8 = record
  private
    function  getCFIFOCI : TBits_5; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setCFIFOCI(thebits : TBits_5); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    property CFIFOCI : TBits_5 read getCFIFOCI write setCFIFOCI;
    property w : TBits_32 read getw write setw;
  end;
  TCAN1_C1FIFOCON9 = record
  private
    function  getDONLY : TBits_1; assembler; nostackframe; inline;
    function  getFRESET : TBits_1; assembler; nostackframe; inline;
    function  getFSIZE : TBits_5; assembler; nostackframe; inline;
    function  getRTREN : TBits_1; assembler; nostackframe; inline;
    function  getTXABAT : TBits_1; assembler; nostackframe; inline;
    function  getTXEN : TBits_1; assembler; nostackframe; inline;
    function  getTXERR : TBits_1; assembler; nostackframe; inline;
    function  getTXLARB : TBits_1; assembler; nostackframe; inline;
    function  getTXPRI : TBits_2; assembler; nostackframe; inline;
    function  getTXREQ : TBits_1; assembler; nostackframe; inline;
    function  getUINC : TBits_1; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setDONLY(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setFRESET(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setFSIZE(thebits : TBits_5); assembler; nostackframe; inline;
    procedure setRTREN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXABAT(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXEN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXERR(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXLARB(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXPRI(thebits : TBits_2); assembler; nostackframe; inline;
    procedure setTXREQ(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setUINC(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearDONLY;
    procedure clearFRESET;
    procedure clearRTREN;
    procedure clearTXABAT;
    procedure clearTXEN;
    procedure clearTXERR;
    procedure clearTXLARB;
    procedure clearTXREQ;
    procedure clearUINC;
    procedure setDONLY;
    procedure setFRESET;
    procedure setRTREN;
    procedure setTXABAT;
    procedure setTXEN;
    procedure setTXERR;
    procedure setTXLARB;
    procedure setTXREQ;
    procedure setUINC;
    property DONLY : TBits_1 read getDONLY write setDONLY;
    property FRESET : TBits_1 read getFRESET write setFRESET;
    property FSIZE : TBits_5 read getFSIZE write setFSIZE;
    property RTREN : TBits_1 read getRTREN write setRTREN;
    property TXABAT : TBits_1 read getTXABAT write setTXABAT;
    property TXEN : TBits_1 read getTXEN write setTXEN;
    property TXERR : TBits_1 read getTXERR write setTXERR;
    property TXLARB : TBits_1 read getTXLARB write setTXLARB;
    property TXPRI : TBits_2 read getTXPRI write setTXPRI;
    property TXREQ : TBits_1 read getTXREQ write setTXREQ;
    property UINC : TBits_1 read getUINC write setUINC;
    property w : TBits_32 read getw write setw;
  end;
  TCAN1_C1FIFOINT9 = record
  private
    function  getRXFULLIE : TBits_1; assembler; nostackframe; inline;
    function  getRXFULLIF : TBits_1; assembler; nostackframe; inline;
    function  getRXHALFIE : TBits_1; assembler; nostackframe; inline;
    function  getRXHALFIF : TBits_1; assembler; nostackframe; inline;
    function  getRXNEMPTYIE : TBits_1; assembler; nostackframe; inline;
    function  getRXNEMPTYIF : TBits_1; assembler; nostackframe; inline;
    function  getRXOVFLIE : TBits_1; assembler; nostackframe; inline;
    function  getRXOVFLIF : TBits_1; assembler; nostackframe; inline;
    function  getTXEMPTYIE : TBits_1; assembler; nostackframe; inline;
    function  getTXEMPTYIF : TBits_1; assembler; nostackframe; inline;
    function  getTXHALFIE : TBits_1; assembler; nostackframe; inline;
    function  getTXHALFIF : TBits_1; assembler; nostackframe; inline;
    function  getTXNFULLIE : TBits_1; assembler; nostackframe; inline;
    function  getTXNFULLIF : TBits_1; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setRXFULLIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXFULLIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXHALFIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXHALFIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXNEMPTYIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXNEMPTYIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXOVFLIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXOVFLIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXEMPTYIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXEMPTYIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXHALFIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXHALFIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXNFULLIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXNFULLIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearRXFULLIE;
    procedure clearRXFULLIF;
    procedure clearRXHALFIE;
    procedure clearRXHALFIF;
    procedure clearRXNEMPTYIE;
    procedure clearRXNEMPTYIF;
    procedure clearRXOVFLIE;
    procedure clearRXOVFLIF;
    procedure clearTXEMPTYIE;
    procedure clearTXEMPTYIF;
    procedure clearTXHALFIE;
    procedure clearTXHALFIF;
    procedure clearTXNFULLIE;
    procedure clearTXNFULLIF;
    procedure setRXFULLIE;
    procedure setRXFULLIF;
    procedure setRXHALFIE;
    procedure setRXHALFIF;
    procedure setRXNEMPTYIE;
    procedure setRXNEMPTYIF;
    procedure setRXOVFLIE;
    procedure setRXOVFLIF;
    procedure setTXEMPTYIE;
    procedure setTXEMPTYIF;
    procedure setTXHALFIE;
    procedure setTXHALFIF;
    procedure setTXNFULLIE;
    procedure setTXNFULLIF;
    property RXFULLIE : TBits_1 read getRXFULLIE write setRXFULLIE;
    property RXFULLIF : TBits_1 read getRXFULLIF write setRXFULLIF;
    property RXHALFIE : TBits_1 read getRXHALFIE write setRXHALFIE;
    property RXHALFIF : TBits_1 read getRXHALFIF write setRXHALFIF;
    property RXNEMPTYIE : TBits_1 read getRXNEMPTYIE write setRXNEMPTYIE;
    property RXNEMPTYIF : TBits_1 read getRXNEMPTYIF write setRXNEMPTYIF;
    property RXOVFLIE : TBits_1 read getRXOVFLIE write setRXOVFLIE;
    property RXOVFLIF : TBits_1 read getRXOVFLIF write setRXOVFLIF;
    property TXEMPTYIE : TBits_1 read getTXEMPTYIE write setTXEMPTYIE;
    property TXEMPTYIF : TBits_1 read getTXEMPTYIF write setTXEMPTYIF;
    property TXHALFIE : TBits_1 read getTXHALFIE write setTXHALFIE;
    property TXHALFIF : TBits_1 read getTXHALFIF write setTXHALFIF;
    property TXNFULLIE : TBits_1 read getTXNFULLIE write setTXNFULLIE;
    property TXNFULLIF : TBits_1 read getTXNFULLIF write setTXNFULLIF;
    property w : TBits_32 read getw write setw;
  end;
  TCAN1_C1FIFOCI9 = record
  private
    function  getCFIFOCI : TBits_5; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setCFIFOCI(thebits : TBits_5); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    property CFIFOCI : TBits_5 read getCFIFOCI write setCFIFOCI;
    property w : TBits_32 read getw write setw;
  end;
  TCAN1_C1FIFOCON10 = record
  private
    function  getDONLY : TBits_1; assembler; nostackframe; inline;
    function  getFRESET : TBits_1; assembler; nostackframe; inline;
    function  getFSIZE : TBits_5; assembler; nostackframe; inline;
    function  getRTREN : TBits_1; assembler; nostackframe; inline;
    function  getTXABAT : TBits_1; assembler; nostackframe; inline;
    function  getTXEN : TBits_1; assembler; nostackframe; inline;
    function  getTXERR : TBits_1; assembler; nostackframe; inline;
    function  getTXLARB : TBits_1; assembler; nostackframe; inline;
    function  getTXPRI : TBits_2; assembler; nostackframe; inline;
    function  getTXREQ : TBits_1; assembler; nostackframe; inline;
    function  getUINC : TBits_1; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setDONLY(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setFRESET(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setFSIZE(thebits : TBits_5); assembler; nostackframe; inline;
    procedure setRTREN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXABAT(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXEN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXERR(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXLARB(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXPRI(thebits : TBits_2); assembler; nostackframe; inline;
    procedure setTXREQ(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setUINC(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearDONLY;
    procedure clearFRESET;
    procedure clearRTREN;
    procedure clearTXABAT;
    procedure clearTXEN;
    procedure clearTXERR;
    procedure clearTXLARB;
    procedure clearTXREQ;
    procedure clearUINC;
    procedure setDONLY;
    procedure setFRESET;
    procedure setRTREN;
    procedure setTXABAT;
    procedure setTXEN;
    procedure setTXERR;
    procedure setTXLARB;
    procedure setTXREQ;
    procedure setUINC;
    property DONLY : TBits_1 read getDONLY write setDONLY;
    property FRESET : TBits_1 read getFRESET write setFRESET;
    property FSIZE : TBits_5 read getFSIZE write setFSIZE;
    property RTREN : TBits_1 read getRTREN write setRTREN;
    property TXABAT : TBits_1 read getTXABAT write setTXABAT;
    property TXEN : TBits_1 read getTXEN write setTXEN;
    property TXERR : TBits_1 read getTXERR write setTXERR;
    property TXLARB : TBits_1 read getTXLARB write setTXLARB;
    property TXPRI : TBits_2 read getTXPRI write setTXPRI;
    property TXREQ : TBits_1 read getTXREQ write setTXREQ;
    property UINC : TBits_1 read getUINC write setUINC;
    property w : TBits_32 read getw write setw;
  end;
  TCAN1_C1FIFOINT10 = record
  private
    function  getRXFULLIE : TBits_1; assembler; nostackframe; inline;
    function  getRXFULLIF : TBits_1; assembler; nostackframe; inline;
    function  getRXHALFIE : TBits_1; assembler; nostackframe; inline;
    function  getRXHALFIF : TBits_1; assembler; nostackframe; inline;
    function  getRXNEMPTYIE : TBits_1; assembler; nostackframe; inline;
    function  getRXNEMPTYIF : TBits_1; assembler; nostackframe; inline;
    function  getRXOVFLIE : TBits_1; assembler; nostackframe; inline;
    function  getRXOVFLIF : TBits_1; assembler; nostackframe; inline;
    function  getTXEMPTYIE : TBits_1; assembler; nostackframe; inline;
    function  getTXEMPTYIF : TBits_1; assembler; nostackframe; inline;
    function  getTXHALFIE : TBits_1; assembler; nostackframe; inline;
    function  getTXHALFIF : TBits_1; assembler; nostackframe; inline;
    function  getTXNFULLIE : TBits_1; assembler; nostackframe; inline;
    function  getTXNFULLIF : TBits_1; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setRXFULLIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXFULLIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXHALFIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXHALFIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXNEMPTYIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXNEMPTYIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXOVFLIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXOVFLIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXEMPTYIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXEMPTYIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXHALFIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXHALFIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXNFULLIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXNFULLIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearRXFULLIE;
    procedure clearRXFULLIF;
    procedure clearRXHALFIE;
    procedure clearRXHALFIF;
    procedure clearRXNEMPTYIE;
    procedure clearRXNEMPTYIF;
    procedure clearRXOVFLIE;
    procedure clearRXOVFLIF;
    procedure clearTXEMPTYIE;
    procedure clearTXEMPTYIF;
    procedure clearTXHALFIE;
    procedure clearTXHALFIF;
    procedure clearTXNFULLIE;
    procedure clearTXNFULLIF;
    procedure setRXFULLIE;
    procedure setRXFULLIF;
    procedure setRXHALFIE;
    procedure setRXHALFIF;
    procedure setRXNEMPTYIE;
    procedure setRXNEMPTYIF;
    procedure setRXOVFLIE;
    procedure setRXOVFLIF;
    procedure setTXEMPTYIE;
    procedure setTXEMPTYIF;
    procedure setTXHALFIE;
    procedure setTXHALFIF;
    procedure setTXNFULLIE;
    procedure setTXNFULLIF;
    property RXFULLIE : TBits_1 read getRXFULLIE write setRXFULLIE;
    property RXFULLIF : TBits_1 read getRXFULLIF write setRXFULLIF;
    property RXHALFIE : TBits_1 read getRXHALFIE write setRXHALFIE;
    property RXHALFIF : TBits_1 read getRXHALFIF write setRXHALFIF;
    property RXNEMPTYIE : TBits_1 read getRXNEMPTYIE write setRXNEMPTYIE;
    property RXNEMPTYIF : TBits_1 read getRXNEMPTYIF write setRXNEMPTYIF;
    property RXOVFLIE : TBits_1 read getRXOVFLIE write setRXOVFLIE;
    property RXOVFLIF : TBits_1 read getRXOVFLIF write setRXOVFLIF;
    property TXEMPTYIE : TBits_1 read getTXEMPTYIE write setTXEMPTYIE;
    property TXEMPTYIF : TBits_1 read getTXEMPTYIF write setTXEMPTYIF;
    property TXHALFIE : TBits_1 read getTXHALFIE write setTXHALFIE;
    property TXHALFIF : TBits_1 read getTXHALFIF write setTXHALFIF;
    property TXNFULLIE : TBits_1 read getTXNFULLIE write setTXNFULLIE;
    property TXNFULLIF : TBits_1 read getTXNFULLIF write setTXNFULLIF;
    property w : TBits_32 read getw write setw;
  end;
  TCAN1_C1FIFOCI10 = record
  private
    function  getCFIFOCI : TBits_5; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setCFIFOCI(thebits : TBits_5); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    property CFIFOCI : TBits_5 read getCFIFOCI write setCFIFOCI;
    property w : TBits_32 read getw write setw;
  end;
  TCAN1_C1FIFOCON11 = record
  private
    function  getDONLY : TBits_1; assembler; nostackframe; inline;
    function  getFRESET : TBits_1; assembler; nostackframe; inline;
    function  getFSIZE : TBits_5; assembler; nostackframe; inline;
    function  getRTREN : TBits_1; assembler; nostackframe; inline;
    function  getTXABAT : TBits_1; assembler; nostackframe; inline;
    function  getTXEN : TBits_1; assembler; nostackframe; inline;
    function  getTXERR : TBits_1; assembler; nostackframe; inline;
    function  getTXLARB : TBits_1; assembler; nostackframe; inline;
    function  getTXPRI : TBits_2; assembler; nostackframe; inline;
    function  getTXREQ : TBits_1; assembler; nostackframe; inline;
    function  getUINC : TBits_1; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setDONLY(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setFRESET(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setFSIZE(thebits : TBits_5); assembler; nostackframe; inline;
    procedure setRTREN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXABAT(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXEN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXERR(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXLARB(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXPRI(thebits : TBits_2); assembler; nostackframe; inline;
    procedure setTXREQ(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setUINC(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearDONLY;
    procedure clearFRESET;
    procedure clearRTREN;
    procedure clearTXABAT;
    procedure clearTXEN;
    procedure clearTXERR;
    procedure clearTXLARB;
    procedure clearTXREQ;
    procedure clearUINC;
    procedure setDONLY;
    procedure setFRESET;
    procedure setRTREN;
    procedure setTXABAT;
    procedure setTXEN;
    procedure setTXERR;
    procedure setTXLARB;
    procedure setTXREQ;
    procedure setUINC;
    property DONLY : TBits_1 read getDONLY write setDONLY;
    property FRESET : TBits_1 read getFRESET write setFRESET;
    property FSIZE : TBits_5 read getFSIZE write setFSIZE;
    property RTREN : TBits_1 read getRTREN write setRTREN;
    property TXABAT : TBits_1 read getTXABAT write setTXABAT;
    property TXEN : TBits_1 read getTXEN write setTXEN;
    property TXERR : TBits_1 read getTXERR write setTXERR;
    property TXLARB : TBits_1 read getTXLARB write setTXLARB;
    property TXPRI : TBits_2 read getTXPRI write setTXPRI;
    property TXREQ : TBits_1 read getTXREQ write setTXREQ;
    property UINC : TBits_1 read getUINC write setUINC;
    property w : TBits_32 read getw write setw;
  end;
  TCAN1_C1FIFOINT11 = record
  private
    function  getRXFULLIE : TBits_1; assembler; nostackframe; inline;
    function  getRXFULLIF : TBits_1; assembler; nostackframe; inline;
    function  getRXHALFIE : TBits_1; assembler; nostackframe; inline;
    function  getRXHALFIF : TBits_1; assembler; nostackframe; inline;
    function  getRXNEMPTYIE : TBits_1; assembler; nostackframe; inline;
    function  getRXNEMPTYIF : TBits_1; assembler; nostackframe; inline;
    function  getRXOVFLIE : TBits_1; assembler; nostackframe; inline;
    function  getRXOVFLIF : TBits_1; assembler; nostackframe; inline;
    function  getTXEMPTYIE : TBits_1; assembler; nostackframe; inline;
    function  getTXEMPTYIF : TBits_1; assembler; nostackframe; inline;
    function  getTXHALFIE : TBits_1; assembler; nostackframe; inline;
    function  getTXHALFIF : TBits_1; assembler; nostackframe; inline;
    function  getTXNFULLIE : TBits_1; assembler; nostackframe; inline;
    function  getTXNFULLIF : TBits_1; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setRXFULLIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXFULLIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXHALFIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXHALFIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXNEMPTYIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXNEMPTYIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXOVFLIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXOVFLIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXEMPTYIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXEMPTYIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXHALFIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXHALFIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXNFULLIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXNFULLIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearRXFULLIE;
    procedure clearRXFULLIF;
    procedure clearRXHALFIE;
    procedure clearRXHALFIF;
    procedure clearRXNEMPTYIE;
    procedure clearRXNEMPTYIF;
    procedure clearRXOVFLIE;
    procedure clearRXOVFLIF;
    procedure clearTXEMPTYIE;
    procedure clearTXEMPTYIF;
    procedure clearTXHALFIE;
    procedure clearTXHALFIF;
    procedure clearTXNFULLIE;
    procedure clearTXNFULLIF;
    procedure setRXFULLIE;
    procedure setRXFULLIF;
    procedure setRXHALFIE;
    procedure setRXHALFIF;
    procedure setRXNEMPTYIE;
    procedure setRXNEMPTYIF;
    procedure setRXOVFLIE;
    procedure setRXOVFLIF;
    procedure setTXEMPTYIE;
    procedure setTXEMPTYIF;
    procedure setTXHALFIE;
    procedure setTXHALFIF;
    procedure setTXNFULLIE;
    procedure setTXNFULLIF;
    property RXFULLIE : TBits_1 read getRXFULLIE write setRXFULLIE;
    property RXFULLIF : TBits_1 read getRXFULLIF write setRXFULLIF;
    property RXHALFIE : TBits_1 read getRXHALFIE write setRXHALFIE;
    property RXHALFIF : TBits_1 read getRXHALFIF write setRXHALFIF;
    property RXNEMPTYIE : TBits_1 read getRXNEMPTYIE write setRXNEMPTYIE;
    property RXNEMPTYIF : TBits_1 read getRXNEMPTYIF write setRXNEMPTYIF;
    property RXOVFLIE : TBits_1 read getRXOVFLIE write setRXOVFLIE;
    property RXOVFLIF : TBits_1 read getRXOVFLIF write setRXOVFLIF;
    property TXEMPTYIE : TBits_1 read getTXEMPTYIE write setTXEMPTYIE;
    property TXEMPTYIF : TBits_1 read getTXEMPTYIF write setTXEMPTYIF;
    property TXHALFIE : TBits_1 read getTXHALFIE write setTXHALFIE;
    property TXHALFIF : TBits_1 read getTXHALFIF write setTXHALFIF;
    property TXNFULLIE : TBits_1 read getTXNFULLIE write setTXNFULLIE;
    property TXNFULLIF : TBits_1 read getTXNFULLIF write setTXNFULLIF;
    property w : TBits_32 read getw write setw;
  end;
  TCAN1_C1FIFOCI11 = record
  private
    function  getCFIFOCI : TBits_5; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setCFIFOCI(thebits : TBits_5); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    property CFIFOCI : TBits_5 read getCFIFOCI write setCFIFOCI;
    property w : TBits_32 read getw write setw;
  end;
  TCAN1_C1FIFOCON12 = record
  private
    function  getDONLY : TBits_1; assembler; nostackframe; inline;
    function  getFRESET : TBits_1; assembler; nostackframe; inline;
    function  getFSIZE : TBits_5; assembler; nostackframe; inline;
    function  getRTREN : TBits_1; assembler; nostackframe; inline;
    function  getTXABAT : TBits_1; assembler; nostackframe; inline;
    function  getTXEN : TBits_1; assembler; nostackframe; inline;
    function  getTXERR : TBits_1; assembler; nostackframe; inline;
    function  getTXLARB : TBits_1; assembler; nostackframe; inline;
    function  getTXPRI : TBits_2; assembler; nostackframe; inline;
    function  getTXREQ : TBits_1; assembler; nostackframe; inline;
    function  getUINC : TBits_1; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setDONLY(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setFRESET(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setFSIZE(thebits : TBits_5); assembler; nostackframe; inline;
    procedure setRTREN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXABAT(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXEN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXERR(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXLARB(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXPRI(thebits : TBits_2); assembler; nostackframe; inline;
    procedure setTXREQ(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setUINC(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearDONLY;
    procedure clearFRESET;
    procedure clearRTREN;
    procedure clearTXABAT;
    procedure clearTXEN;
    procedure clearTXERR;
    procedure clearTXLARB;
    procedure clearTXREQ;
    procedure clearUINC;
    procedure setDONLY;
    procedure setFRESET;
    procedure setRTREN;
    procedure setTXABAT;
    procedure setTXEN;
    procedure setTXERR;
    procedure setTXLARB;
    procedure setTXREQ;
    procedure setUINC;
    property DONLY : TBits_1 read getDONLY write setDONLY;
    property FRESET : TBits_1 read getFRESET write setFRESET;
    property FSIZE : TBits_5 read getFSIZE write setFSIZE;
    property RTREN : TBits_1 read getRTREN write setRTREN;
    property TXABAT : TBits_1 read getTXABAT write setTXABAT;
    property TXEN : TBits_1 read getTXEN write setTXEN;
    property TXERR : TBits_1 read getTXERR write setTXERR;
    property TXLARB : TBits_1 read getTXLARB write setTXLARB;
    property TXPRI : TBits_2 read getTXPRI write setTXPRI;
    property TXREQ : TBits_1 read getTXREQ write setTXREQ;
    property UINC : TBits_1 read getUINC write setUINC;
    property w : TBits_32 read getw write setw;
  end;
  TCAN1_C1FIFOINT12 = record
  private
    function  getRXFULLIE : TBits_1; assembler; nostackframe; inline;
    function  getRXFULLIF : TBits_1; assembler; nostackframe; inline;
    function  getRXHALFIE : TBits_1; assembler; nostackframe; inline;
    function  getRXHALFIF : TBits_1; assembler; nostackframe; inline;
    function  getRXNEMPTYIE : TBits_1; assembler; nostackframe; inline;
    function  getRXNEMPTYIF : TBits_1; assembler; nostackframe; inline;
    function  getRXOVFLIE : TBits_1; assembler; nostackframe; inline;
    function  getRXOVFLIF : TBits_1; assembler; nostackframe; inline;
    function  getTXEMPTYIE : TBits_1; assembler; nostackframe; inline;
    function  getTXEMPTYIF : TBits_1; assembler; nostackframe; inline;
    function  getTXHALFIE : TBits_1; assembler; nostackframe; inline;
    function  getTXHALFIF : TBits_1; assembler; nostackframe; inline;
    function  getTXNFULLIE : TBits_1; assembler; nostackframe; inline;
    function  getTXNFULLIF : TBits_1; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setRXFULLIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXFULLIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXHALFIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXHALFIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXNEMPTYIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXNEMPTYIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXOVFLIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXOVFLIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXEMPTYIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXEMPTYIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXHALFIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXHALFIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXNFULLIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXNFULLIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearRXFULLIE;
    procedure clearRXFULLIF;
    procedure clearRXHALFIE;
    procedure clearRXHALFIF;
    procedure clearRXNEMPTYIE;
    procedure clearRXNEMPTYIF;
    procedure clearRXOVFLIE;
    procedure clearRXOVFLIF;
    procedure clearTXEMPTYIE;
    procedure clearTXEMPTYIF;
    procedure clearTXHALFIE;
    procedure clearTXHALFIF;
    procedure clearTXNFULLIE;
    procedure clearTXNFULLIF;
    procedure setRXFULLIE;
    procedure setRXFULLIF;
    procedure setRXHALFIE;
    procedure setRXHALFIF;
    procedure setRXNEMPTYIE;
    procedure setRXNEMPTYIF;
    procedure setRXOVFLIE;
    procedure setRXOVFLIF;
    procedure setTXEMPTYIE;
    procedure setTXEMPTYIF;
    procedure setTXHALFIE;
    procedure setTXHALFIF;
    procedure setTXNFULLIE;
    procedure setTXNFULLIF;
    property RXFULLIE : TBits_1 read getRXFULLIE write setRXFULLIE;
    property RXFULLIF : TBits_1 read getRXFULLIF write setRXFULLIF;
    property RXHALFIE : TBits_1 read getRXHALFIE write setRXHALFIE;
    property RXHALFIF : TBits_1 read getRXHALFIF write setRXHALFIF;
    property RXNEMPTYIE : TBits_1 read getRXNEMPTYIE write setRXNEMPTYIE;
    property RXNEMPTYIF : TBits_1 read getRXNEMPTYIF write setRXNEMPTYIF;
    property RXOVFLIE : TBits_1 read getRXOVFLIE write setRXOVFLIE;
    property RXOVFLIF : TBits_1 read getRXOVFLIF write setRXOVFLIF;
    property TXEMPTYIE : TBits_1 read getTXEMPTYIE write setTXEMPTYIE;
    property TXEMPTYIF : TBits_1 read getTXEMPTYIF write setTXEMPTYIF;
    property TXHALFIE : TBits_1 read getTXHALFIE write setTXHALFIE;
    property TXHALFIF : TBits_1 read getTXHALFIF write setTXHALFIF;
    property TXNFULLIE : TBits_1 read getTXNFULLIE write setTXNFULLIE;
    property TXNFULLIF : TBits_1 read getTXNFULLIF write setTXNFULLIF;
    property w : TBits_32 read getw write setw;
  end;
  TCAN1_C1FIFOCI12 = record
  private
    function  getCFIFOCI : TBits_5; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setCFIFOCI(thebits : TBits_5); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    property CFIFOCI : TBits_5 read getCFIFOCI write setCFIFOCI;
    property w : TBits_32 read getw write setw;
  end;
  TCAN1_C1FIFOCON13 = record
  private
    function  getDONLY : TBits_1; assembler; nostackframe; inline;
    function  getFRESET : TBits_1; assembler; nostackframe; inline;
    function  getFSIZE : TBits_5; assembler; nostackframe; inline;
    function  getRTREN : TBits_1; assembler; nostackframe; inline;
    function  getTXABAT : TBits_1; assembler; nostackframe; inline;
    function  getTXEN : TBits_1; assembler; nostackframe; inline;
    function  getTXERR : TBits_1; assembler; nostackframe; inline;
    function  getTXLARB : TBits_1; assembler; nostackframe; inline;
    function  getTXPRI : TBits_2; assembler; nostackframe; inline;
    function  getTXREQ : TBits_1; assembler; nostackframe; inline;
    function  getUINC : TBits_1; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setDONLY(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setFRESET(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setFSIZE(thebits : TBits_5); assembler; nostackframe; inline;
    procedure setRTREN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXABAT(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXEN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXERR(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXLARB(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXPRI(thebits : TBits_2); assembler; nostackframe; inline;
    procedure setTXREQ(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setUINC(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearDONLY;
    procedure clearFRESET;
    procedure clearRTREN;
    procedure clearTXABAT;
    procedure clearTXEN;
    procedure clearTXERR;
    procedure clearTXLARB;
    procedure clearTXREQ;
    procedure clearUINC;
    procedure setDONLY;
    procedure setFRESET;
    procedure setRTREN;
    procedure setTXABAT;
    procedure setTXEN;
    procedure setTXERR;
    procedure setTXLARB;
    procedure setTXREQ;
    procedure setUINC;
    property DONLY : TBits_1 read getDONLY write setDONLY;
    property FRESET : TBits_1 read getFRESET write setFRESET;
    property FSIZE : TBits_5 read getFSIZE write setFSIZE;
    property RTREN : TBits_1 read getRTREN write setRTREN;
    property TXABAT : TBits_1 read getTXABAT write setTXABAT;
    property TXEN : TBits_1 read getTXEN write setTXEN;
    property TXERR : TBits_1 read getTXERR write setTXERR;
    property TXLARB : TBits_1 read getTXLARB write setTXLARB;
    property TXPRI : TBits_2 read getTXPRI write setTXPRI;
    property TXREQ : TBits_1 read getTXREQ write setTXREQ;
    property UINC : TBits_1 read getUINC write setUINC;
    property w : TBits_32 read getw write setw;
  end;
  TCAN1_C1FIFOINT13 = record
  private
    function  getRXFULLIE : TBits_1; assembler; nostackframe; inline;
    function  getRXFULLIF : TBits_1; assembler; nostackframe; inline;
    function  getRXHALFIE : TBits_1; assembler; nostackframe; inline;
    function  getRXHALFIF : TBits_1; assembler; nostackframe; inline;
    function  getRXNEMPTYIE : TBits_1; assembler; nostackframe; inline;
    function  getRXNEMPTYIF : TBits_1; assembler; nostackframe; inline;
    function  getRXOVFLIE : TBits_1; assembler; nostackframe; inline;
    function  getRXOVFLIF : TBits_1; assembler; nostackframe; inline;
    function  getTXEMPTYIE : TBits_1; assembler; nostackframe; inline;
    function  getTXEMPTYIF : TBits_1; assembler; nostackframe; inline;
    function  getTXHALFIE : TBits_1; assembler; nostackframe; inline;
    function  getTXHALFIF : TBits_1; assembler; nostackframe; inline;
    function  getTXNFULLIE : TBits_1; assembler; nostackframe; inline;
    function  getTXNFULLIF : TBits_1; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setRXFULLIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXFULLIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXHALFIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXHALFIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXNEMPTYIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXNEMPTYIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXOVFLIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXOVFLIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXEMPTYIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXEMPTYIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXHALFIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXHALFIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXNFULLIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXNFULLIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearRXFULLIE;
    procedure clearRXFULLIF;
    procedure clearRXHALFIE;
    procedure clearRXHALFIF;
    procedure clearRXNEMPTYIE;
    procedure clearRXNEMPTYIF;
    procedure clearRXOVFLIE;
    procedure clearRXOVFLIF;
    procedure clearTXEMPTYIE;
    procedure clearTXEMPTYIF;
    procedure clearTXHALFIE;
    procedure clearTXHALFIF;
    procedure clearTXNFULLIE;
    procedure clearTXNFULLIF;
    procedure setRXFULLIE;
    procedure setRXFULLIF;
    procedure setRXHALFIE;
    procedure setRXHALFIF;
    procedure setRXNEMPTYIE;
    procedure setRXNEMPTYIF;
    procedure setRXOVFLIE;
    procedure setRXOVFLIF;
    procedure setTXEMPTYIE;
    procedure setTXEMPTYIF;
    procedure setTXHALFIE;
    procedure setTXHALFIF;
    procedure setTXNFULLIE;
    procedure setTXNFULLIF;
    property RXFULLIE : TBits_1 read getRXFULLIE write setRXFULLIE;
    property RXFULLIF : TBits_1 read getRXFULLIF write setRXFULLIF;
    property RXHALFIE : TBits_1 read getRXHALFIE write setRXHALFIE;
    property RXHALFIF : TBits_1 read getRXHALFIF write setRXHALFIF;
    property RXNEMPTYIE : TBits_1 read getRXNEMPTYIE write setRXNEMPTYIE;
    property RXNEMPTYIF : TBits_1 read getRXNEMPTYIF write setRXNEMPTYIF;
    property RXOVFLIE : TBits_1 read getRXOVFLIE write setRXOVFLIE;
    property RXOVFLIF : TBits_1 read getRXOVFLIF write setRXOVFLIF;
    property TXEMPTYIE : TBits_1 read getTXEMPTYIE write setTXEMPTYIE;
    property TXEMPTYIF : TBits_1 read getTXEMPTYIF write setTXEMPTYIF;
    property TXHALFIE : TBits_1 read getTXHALFIE write setTXHALFIE;
    property TXHALFIF : TBits_1 read getTXHALFIF write setTXHALFIF;
    property TXNFULLIE : TBits_1 read getTXNFULLIE write setTXNFULLIE;
    property TXNFULLIF : TBits_1 read getTXNFULLIF write setTXNFULLIF;
    property w : TBits_32 read getw write setw;
  end;
  TCAN1_C1FIFOCI13 = record
  private
    function  getCFIFOCI : TBits_5; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setCFIFOCI(thebits : TBits_5); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    property CFIFOCI : TBits_5 read getCFIFOCI write setCFIFOCI;
    property w : TBits_32 read getw write setw;
  end;
  TCAN1_C1FIFOCON14 = record
  private
    function  getDONLY : TBits_1; assembler; nostackframe; inline;
    function  getFRESET : TBits_1; assembler; nostackframe; inline;
    function  getFSIZE : TBits_5; assembler; nostackframe; inline;
    function  getRTREN : TBits_1; assembler; nostackframe; inline;
    function  getTXABAT : TBits_1; assembler; nostackframe; inline;
    function  getTXEN : TBits_1; assembler; nostackframe; inline;
    function  getTXERR : TBits_1; assembler; nostackframe; inline;
    function  getTXLARB : TBits_1; assembler; nostackframe; inline;
    function  getTXPRI : TBits_2; assembler; nostackframe; inline;
    function  getTXREQ : TBits_1; assembler; nostackframe; inline;
    function  getUINC : TBits_1; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setDONLY(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setFRESET(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setFSIZE(thebits : TBits_5); assembler; nostackframe; inline;
    procedure setRTREN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXABAT(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXEN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXERR(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXLARB(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXPRI(thebits : TBits_2); assembler; nostackframe; inline;
    procedure setTXREQ(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setUINC(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearDONLY;
    procedure clearFRESET;
    procedure clearRTREN;
    procedure clearTXABAT;
    procedure clearTXEN;
    procedure clearTXERR;
    procedure clearTXLARB;
    procedure clearTXREQ;
    procedure clearUINC;
    procedure setDONLY;
    procedure setFRESET;
    procedure setRTREN;
    procedure setTXABAT;
    procedure setTXEN;
    procedure setTXERR;
    procedure setTXLARB;
    procedure setTXREQ;
    procedure setUINC;
    property DONLY : TBits_1 read getDONLY write setDONLY;
    property FRESET : TBits_1 read getFRESET write setFRESET;
    property FSIZE : TBits_5 read getFSIZE write setFSIZE;
    property RTREN : TBits_1 read getRTREN write setRTREN;
    property TXABAT : TBits_1 read getTXABAT write setTXABAT;
    property TXEN : TBits_1 read getTXEN write setTXEN;
    property TXERR : TBits_1 read getTXERR write setTXERR;
    property TXLARB : TBits_1 read getTXLARB write setTXLARB;
    property TXPRI : TBits_2 read getTXPRI write setTXPRI;
    property TXREQ : TBits_1 read getTXREQ write setTXREQ;
    property UINC : TBits_1 read getUINC write setUINC;
    property w : TBits_32 read getw write setw;
  end;
  TCAN1_C1FIFOINT14 = record
  private
    function  getRXFULLIE : TBits_1; assembler; nostackframe; inline;
    function  getRXFULLIF : TBits_1; assembler; nostackframe; inline;
    function  getRXHALFIE : TBits_1; assembler; nostackframe; inline;
    function  getRXHALFIF : TBits_1; assembler; nostackframe; inline;
    function  getRXNEMPTYIE : TBits_1; assembler; nostackframe; inline;
    function  getRXNEMPTYIF : TBits_1; assembler; nostackframe; inline;
    function  getRXOVFLIE : TBits_1; assembler; nostackframe; inline;
    function  getRXOVFLIF : TBits_1; assembler; nostackframe; inline;
    function  getTXEMPTYIE : TBits_1; assembler; nostackframe; inline;
    function  getTXEMPTYIF : TBits_1; assembler; nostackframe; inline;
    function  getTXHALFIE : TBits_1; assembler; nostackframe; inline;
    function  getTXHALFIF : TBits_1; assembler; nostackframe; inline;
    function  getTXNFULLIE : TBits_1; assembler; nostackframe; inline;
    function  getTXNFULLIF : TBits_1; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setRXFULLIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXFULLIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXHALFIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXHALFIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXNEMPTYIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXNEMPTYIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXOVFLIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXOVFLIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXEMPTYIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXEMPTYIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXHALFIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXHALFIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXNFULLIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXNFULLIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearRXFULLIE;
    procedure clearRXFULLIF;
    procedure clearRXHALFIE;
    procedure clearRXHALFIF;
    procedure clearRXNEMPTYIE;
    procedure clearRXNEMPTYIF;
    procedure clearRXOVFLIE;
    procedure clearRXOVFLIF;
    procedure clearTXEMPTYIE;
    procedure clearTXEMPTYIF;
    procedure clearTXHALFIE;
    procedure clearTXHALFIF;
    procedure clearTXNFULLIE;
    procedure clearTXNFULLIF;
    procedure setRXFULLIE;
    procedure setRXFULLIF;
    procedure setRXHALFIE;
    procedure setRXHALFIF;
    procedure setRXNEMPTYIE;
    procedure setRXNEMPTYIF;
    procedure setRXOVFLIE;
    procedure setRXOVFLIF;
    procedure setTXEMPTYIE;
    procedure setTXEMPTYIF;
    procedure setTXHALFIE;
    procedure setTXHALFIF;
    procedure setTXNFULLIE;
    procedure setTXNFULLIF;
    property RXFULLIE : TBits_1 read getRXFULLIE write setRXFULLIE;
    property RXFULLIF : TBits_1 read getRXFULLIF write setRXFULLIF;
    property RXHALFIE : TBits_1 read getRXHALFIE write setRXHALFIE;
    property RXHALFIF : TBits_1 read getRXHALFIF write setRXHALFIF;
    property RXNEMPTYIE : TBits_1 read getRXNEMPTYIE write setRXNEMPTYIE;
    property RXNEMPTYIF : TBits_1 read getRXNEMPTYIF write setRXNEMPTYIF;
    property RXOVFLIE : TBits_1 read getRXOVFLIE write setRXOVFLIE;
    property RXOVFLIF : TBits_1 read getRXOVFLIF write setRXOVFLIF;
    property TXEMPTYIE : TBits_1 read getTXEMPTYIE write setTXEMPTYIE;
    property TXEMPTYIF : TBits_1 read getTXEMPTYIF write setTXEMPTYIF;
    property TXHALFIE : TBits_1 read getTXHALFIE write setTXHALFIE;
    property TXHALFIF : TBits_1 read getTXHALFIF write setTXHALFIF;
    property TXNFULLIE : TBits_1 read getTXNFULLIE write setTXNFULLIE;
    property TXNFULLIF : TBits_1 read getTXNFULLIF write setTXNFULLIF;
    property w : TBits_32 read getw write setw;
  end;
  TCAN1_C1FIFOCI14 = record
  private
    function  getCFIFOCI : TBits_5; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setCFIFOCI(thebits : TBits_5); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    property CFIFOCI : TBits_5 read getCFIFOCI write setCFIFOCI;
    property w : TBits_32 read getw write setw;
  end;
  TCAN1_C1FIFOCON15 = record
  private
    function  getDONLY : TBits_1; assembler; nostackframe; inline;
    function  getFRESET : TBits_1; assembler; nostackframe; inline;
    function  getFSIZE : TBits_5; assembler; nostackframe; inline;
    function  getRTREN : TBits_1; assembler; nostackframe; inline;
    function  getTXABAT : TBits_1; assembler; nostackframe; inline;
    function  getTXEN : TBits_1; assembler; nostackframe; inline;
    function  getTXERR : TBits_1; assembler; nostackframe; inline;
    function  getTXLARB : TBits_1; assembler; nostackframe; inline;
    function  getTXPRI : TBits_2; assembler; nostackframe; inline;
    function  getTXREQ : TBits_1; assembler; nostackframe; inline;
    function  getUINC : TBits_1; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setDONLY(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setFRESET(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setFSIZE(thebits : TBits_5); assembler; nostackframe; inline;
    procedure setRTREN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXABAT(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXEN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXERR(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXLARB(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXPRI(thebits : TBits_2); assembler; nostackframe; inline;
    procedure setTXREQ(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setUINC(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearDONLY;
    procedure clearFRESET;
    procedure clearRTREN;
    procedure clearTXABAT;
    procedure clearTXEN;
    procedure clearTXERR;
    procedure clearTXLARB;
    procedure clearTXREQ;
    procedure clearUINC;
    procedure setDONLY;
    procedure setFRESET;
    procedure setRTREN;
    procedure setTXABAT;
    procedure setTXEN;
    procedure setTXERR;
    procedure setTXLARB;
    procedure setTXREQ;
    procedure setUINC;
    property DONLY : TBits_1 read getDONLY write setDONLY;
    property FRESET : TBits_1 read getFRESET write setFRESET;
    property FSIZE : TBits_5 read getFSIZE write setFSIZE;
    property RTREN : TBits_1 read getRTREN write setRTREN;
    property TXABAT : TBits_1 read getTXABAT write setTXABAT;
    property TXEN : TBits_1 read getTXEN write setTXEN;
    property TXERR : TBits_1 read getTXERR write setTXERR;
    property TXLARB : TBits_1 read getTXLARB write setTXLARB;
    property TXPRI : TBits_2 read getTXPRI write setTXPRI;
    property TXREQ : TBits_1 read getTXREQ write setTXREQ;
    property UINC : TBits_1 read getUINC write setUINC;
    property w : TBits_32 read getw write setw;
  end;
  TCAN1_C1FIFOINT15 = record
  private
    function  getRXFULLIE : TBits_1; assembler; nostackframe; inline;
    function  getRXFULLIF : TBits_1; assembler; nostackframe; inline;
    function  getRXHALFIE : TBits_1; assembler; nostackframe; inline;
    function  getRXHALFIF : TBits_1; assembler; nostackframe; inline;
    function  getRXNEMPTYIE : TBits_1; assembler; nostackframe; inline;
    function  getRXNEMPTYIF : TBits_1; assembler; nostackframe; inline;
    function  getRXOVFLIE : TBits_1; assembler; nostackframe; inline;
    function  getRXOVFLIF : TBits_1; assembler; nostackframe; inline;
    function  getTXEMPTYIE : TBits_1; assembler; nostackframe; inline;
    function  getTXEMPTYIF : TBits_1; assembler; nostackframe; inline;
    function  getTXHALFIE : TBits_1; assembler; nostackframe; inline;
    function  getTXHALFIF : TBits_1; assembler; nostackframe; inline;
    function  getTXNFULLIE : TBits_1; assembler; nostackframe; inline;
    function  getTXNFULLIF : TBits_1; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setRXFULLIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXFULLIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXHALFIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXHALFIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXNEMPTYIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXNEMPTYIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXOVFLIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXOVFLIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXEMPTYIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXEMPTYIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXHALFIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXHALFIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXNFULLIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXNFULLIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearRXFULLIE;
    procedure clearRXFULLIF;
    procedure clearRXHALFIE;
    procedure clearRXHALFIF;
    procedure clearRXNEMPTYIE;
    procedure clearRXNEMPTYIF;
    procedure clearRXOVFLIE;
    procedure clearRXOVFLIF;
    procedure clearTXEMPTYIE;
    procedure clearTXEMPTYIF;
    procedure clearTXHALFIE;
    procedure clearTXHALFIF;
    procedure clearTXNFULLIE;
    procedure clearTXNFULLIF;
    procedure setRXFULLIE;
    procedure setRXFULLIF;
    procedure setRXHALFIE;
    procedure setRXHALFIF;
    procedure setRXNEMPTYIE;
    procedure setRXNEMPTYIF;
    procedure setRXOVFLIE;
    procedure setRXOVFLIF;
    procedure setTXEMPTYIE;
    procedure setTXEMPTYIF;
    procedure setTXHALFIE;
    procedure setTXHALFIF;
    procedure setTXNFULLIE;
    procedure setTXNFULLIF;
    property RXFULLIE : TBits_1 read getRXFULLIE write setRXFULLIE;
    property RXFULLIF : TBits_1 read getRXFULLIF write setRXFULLIF;
    property RXHALFIE : TBits_1 read getRXHALFIE write setRXHALFIE;
    property RXHALFIF : TBits_1 read getRXHALFIF write setRXHALFIF;
    property RXNEMPTYIE : TBits_1 read getRXNEMPTYIE write setRXNEMPTYIE;
    property RXNEMPTYIF : TBits_1 read getRXNEMPTYIF write setRXNEMPTYIF;
    property RXOVFLIE : TBits_1 read getRXOVFLIE write setRXOVFLIE;
    property RXOVFLIF : TBits_1 read getRXOVFLIF write setRXOVFLIF;
    property TXEMPTYIE : TBits_1 read getTXEMPTYIE write setTXEMPTYIE;
    property TXEMPTYIF : TBits_1 read getTXEMPTYIF write setTXEMPTYIF;
    property TXHALFIE : TBits_1 read getTXHALFIE write setTXHALFIE;
    property TXHALFIF : TBits_1 read getTXHALFIF write setTXHALFIF;
    property TXNFULLIE : TBits_1 read getTXNFULLIE write setTXNFULLIE;
    property TXNFULLIF : TBits_1 read getTXNFULLIF write setTXNFULLIF;
    property w : TBits_32 read getw write setw;
  end;
  TCAN1_C1FIFOCI15 = record
  private
    function  getCFIFOCI : TBits_5; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setCFIFOCI(thebits : TBits_5); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    property CFIFOCI : TBits_5 read getCFIFOCI write setCFIFOCI;
    property w : TBits_32 read getw write setw;
  end;
  TCAN1_C1FIFOCON16 = record
  private
    function  getDONLY : TBits_1; assembler; nostackframe; inline;
    function  getFRESET : TBits_1; assembler; nostackframe; inline;
    function  getFSIZE : TBits_5; assembler; nostackframe; inline;
    function  getRTREN : TBits_1; assembler; nostackframe; inline;
    function  getTXABAT : TBits_1; assembler; nostackframe; inline;
    function  getTXEN : TBits_1; assembler; nostackframe; inline;
    function  getTXERR : TBits_1; assembler; nostackframe; inline;
    function  getTXLARB : TBits_1; assembler; nostackframe; inline;
    function  getTXPRI : TBits_2; assembler; nostackframe; inline;
    function  getTXREQ : TBits_1; assembler; nostackframe; inline;
    function  getUINC : TBits_1; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setDONLY(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setFRESET(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setFSIZE(thebits : TBits_5); assembler; nostackframe; inline;
    procedure setRTREN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXABAT(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXEN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXERR(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXLARB(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXPRI(thebits : TBits_2); assembler; nostackframe; inline;
    procedure setTXREQ(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setUINC(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearDONLY;
    procedure clearFRESET;
    procedure clearRTREN;
    procedure clearTXABAT;
    procedure clearTXEN;
    procedure clearTXERR;
    procedure clearTXLARB;
    procedure clearTXREQ;
    procedure clearUINC;
    procedure setDONLY;
    procedure setFRESET;
    procedure setRTREN;
    procedure setTXABAT;
    procedure setTXEN;
    procedure setTXERR;
    procedure setTXLARB;
    procedure setTXREQ;
    procedure setUINC;
    property DONLY : TBits_1 read getDONLY write setDONLY;
    property FRESET : TBits_1 read getFRESET write setFRESET;
    property FSIZE : TBits_5 read getFSIZE write setFSIZE;
    property RTREN : TBits_1 read getRTREN write setRTREN;
    property TXABAT : TBits_1 read getTXABAT write setTXABAT;
    property TXEN : TBits_1 read getTXEN write setTXEN;
    property TXERR : TBits_1 read getTXERR write setTXERR;
    property TXLARB : TBits_1 read getTXLARB write setTXLARB;
    property TXPRI : TBits_2 read getTXPRI write setTXPRI;
    property TXREQ : TBits_1 read getTXREQ write setTXREQ;
    property UINC : TBits_1 read getUINC write setUINC;
    property w : TBits_32 read getw write setw;
  end;
  TCAN1_C1FIFOINT16 = record
  private
    function  getRXFULLIE : TBits_1; assembler; nostackframe; inline;
    function  getRXFULLIF : TBits_1; assembler; nostackframe; inline;
    function  getRXHALFIE : TBits_1; assembler; nostackframe; inline;
    function  getRXHALFIF : TBits_1; assembler; nostackframe; inline;
    function  getRXNEMPTYIE : TBits_1; assembler; nostackframe; inline;
    function  getRXNEMPTYIF : TBits_1; assembler; nostackframe; inline;
    function  getRXOVFLIE : TBits_1; assembler; nostackframe; inline;
    function  getRXOVFLIF : TBits_1; assembler; nostackframe; inline;
    function  getTXEMPTYIE : TBits_1; assembler; nostackframe; inline;
    function  getTXEMPTYIF : TBits_1; assembler; nostackframe; inline;
    function  getTXHALFIE : TBits_1; assembler; nostackframe; inline;
    function  getTXHALFIF : TBits_1; assembler; nostackframe; inline;
    function  getTXNFULLIE : TBits_1; assembler; nostackframe; inline;
    function  getTXNFULLIF : TBits_1; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setRXFULLIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXFULLIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXHALFIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXHALFIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXNEMPTYIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXNEMPTYIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXOVFLIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXOVFLIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXEMPTYIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXEMPTYIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXHALFIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXHALFIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXNFULLIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXNFULLIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearRXFULLIE;
    procedure clearRXFULLIF;
    procedure clearRXHALFIE;
    procedure clearRXHALFIF;
    procedure clearRXNEMPTYIE;
    procedure clearRXNEMPTYIF;
    procedure clearRXOVFLIE;
    procedure clearRXOVFLIF;
    procedure clearTXEMPTYIE;
    procedure clearTXEMPTYIF;
    procedure clearTXHALFIE;
    procedure clearTXHALFIF;
    procedure clearTXNFULLIE;
    procedure clearTXNFULLIF;
    procedure setRXFULLIE;
    procedure setRXFULLIF;
    procedure setRXHALFIE;
    procedure setRXHALFIF;
    procedure setRXNEMPTYIE;
    procedure setRXNEMPTYIF;
    procedure setRXOVFLIE;
    procedure setRXOVFLIF;
    procedure setTXEMPTYIE;
    procedure setTXEMPTYIF;
    procedure setTXHALFIE;
    procedure setTXHALFIF;
    procedure setTXNFULLIE;
    procedure setTXNFULLIF;
    property RXFULLIE : TBits_1 read getRXFULLIE write setRXFULLIE;
    property RXFULLIF : TBits_1 read getRXFULLIF write setRXFULLIF;
    property RXHALFIE : TBits_1 read getRXHALFIE write setRXHALFIE;
    property RXHALFIF : TBits_1 read getRXHALFIF write setRXHALFIF;
    property RXNEMPTYIE : TBits_1 read getRXNEMPTYIE write setRXNEMPTYIE;
    property RXNEMPTYIF : TBits_1 read getRXNEMPTYIF write setRXNEMPTYIF;
    property RXOVFLIE : TBits_1 read getRXOVFLIE write setRXOVFLIE;
    property RXOVFLIF : TBits_1 read getRXOVFLIF write setRXOVFLIF;
    property TXEMPTYIE : TBits_1 read getTXEMPTYIE write setTXEMPTYIE;
    property TXEMPTYIF : TBits_1 read getTXEMPTYIF write setTXEMPTYIF;
    property TXHALFIE : TBits_1 read getTXHALFIE write setTXHALFIE;
    property TXHALFIF : TBits_1 read getTXHALFIF write setTXHALFIF;
    property TXNFULLIE : TBits_1 read getTXNFULLIE write setTXNFULLIE;
    property TXNFULLIF : TBits_1 read getTXNFULLIF write setTXNFULLIF;
    property w : TBits_32 read getw write setw;
  end;
  TCAN1_C1FIFOCI16 = record
  private
    function  getCFIFOCI : TBits_5; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setCFIFOCI(thebits : TBits_5); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    property CFIFOCI : TBits_5 read getCFIFOCI write setCFIFOCI;
    property w : TBits_32 read getw write setw;
  end;
  TCAN1_C1FIFOCON17 = record
  private
    function  getDONLY : TBits_1; assembler; nostackframe; inline;
    function  getFRESET : TBits_1; assembler; nostackframe; inline;
    function  getFSIZE : TBits_5; assembler; nostackframe; inline;
    function  getRTREN : TBits_1; assembler; nostackframe; inline;
    function  getTXABAT : TBits_1; assembler; nostackframe; inline;
    function  getTXEN : TBits_1; assembler; nostackframe; inline;
    function  getTXERR : TBits_1; assembler; nostackframe; inline;
    function  getTXLARB : TBits_1; assembler; nostackframe; inline;
    function  getTXPRI : TBits_2; assembler; nostackframe; inline;
    function  getTXREQ : TBits_1; assembler; nostackframe; inline;
    function  getUINC : TBits_1; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setDONLY(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setFRESET(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setFSIZE(thebits : TBits_5); assembler; nostackframe; inline;
    procedure setRTREN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXABAT(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXEN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXERR(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXLARB(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXPRI(thebits : TBits_2); assembler; nostackframe; inline;
    procedure setTXREQ(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setUINC(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearDONLY;
    procedure clearFRESET;
    procedure clearRTREN;
    procedure clearTXABAT;
    procedure clearTXEN;
    procedure clearTXERR;
    procedure clearTXLARB;
    procedure clearTXREQ;
    procedure clearUINC;
    procedure setDONLY;
    procedure setFRESET;
    procedure setRTREN;
    procedure setTXABAT;
    procedure setTXEN;
    procedure setTXERR;
    procedure setTXLARB;
    procedure setTXREQ;
    procedure setUINC;
    property DONLY : TBits_1 read getDONLY write setDONLY;
    property FRESET : TBits_1 read getFRESET write setFRESET;
    property FSIZE : TBits_5 read getFSIZE write setFSIZE;
    property RTREN : TBits_1 read getRTREN write setRTREN;
    property TXABAT : TBits_1 read getTXABAT write setTXABAT;
    property TXEN : TBits_1 read getTXEN write setTXEN;
    property TXERR : TBits_1 read getTXERR write setTXERR;
    property TXLARB : TBits_1 read getTXLARB write setTXLARB;
    property TXPRI : TBits_2 read getTXPRI write setTXPRI;
    property TXREQ : TBits_1 read getTXREQ write setTXREQ;
    property UINC : TBits_1 read getUINC write setUINC;
    property w : TBits_32 read getw write setw;
  end;
  TCAN1_C1FIFOINT17 = record
  private
    function  getRXFULLIE : TBits_1; assembler; nostackframe; inline;
    function  getRXFULLIF : TBits_1; assembler; nostackframe; inline;
    function  getRXHALFIE : TBits_1; assembler; nostackframe; inline;
    function  getRXHALFIF : TBits_1; assembler; nostackframe; inline;
    function  getRXNEMPTYIE : TBits_1; assembler; nostackframe; inline;
    function  getRXNEMPTYIF : TBits_1; assembler; nostackframe; inline;
    function  getRXOVFLIE : TBits_1; assembler; nostackframe; inline;
    function  getRXOVFLIF : TBits_1; assembler; nostackframe; inline;
    function  getTXEMPTYIE : TBits_1; assembler; nostackframe; inline;
    function  getTXEMPTYIF : TBits_1; assembler; nostackframe; inline;
    function  getTXHALFIE : TBits_1; assembler; nostackframe; inline;
    function  getTXHALFIF : TBits_1; assembler; nostackframe; inline;
    function  getTXNFULLIE : TBits_1; assembler; nostackframe; inline;
    function  getTXNFULLIF : TBits_1; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setRXFULLIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXFULLIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXHALFIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXHALFIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXNEMPTYIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXNEMPTYIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXOVFLIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXOVFLIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXEMPTYIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXEMPTYIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXHALFIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXHALFIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXNFULLIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXNFULLIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearRXFULLIE;
    procedure clearRXFULLIF;
    procedure clearRXHALFIE;
    procedure clearRXHALFIF;
    procedure clearRXNEMPTYIE;
    procedure clearRXNEMPTYIF;
    procedure clearRXOVFLIE;
    procedure clearRXOVFLIF;
    procedure clearTXEMPTYIE;
    procedure clearTXEMPTYIF;
    procedure clearTXHALFIE;
    procedure clearTXHALFIF;
    procedure clearTXNFULLIE;
    procedure clearTXNFULLIF;
    procedure setRXFULLIE;
    procedure setRXFULLIF;
    procedure setRXHALFIE;
    procedure setRXHALFIF;
    procedure setRXNEMPTYIE;
    procedure setRXNEMPTYIF;
    procedure setRXOVFLIE;
    procedure setRXOVFLIF;
    procedure setTXEMPTYIE;
    procedure setTXEMPTYIF;
    procedure setTXHALFIE;
    procedure setTXHALFIF;
    procedure setTXNFULLIE;
    procedure setTXNFULLIF;
    property RXFULLIE : TBits_1 read getRXFULLIE write setRXFULLIE;
    property RXFULLIF : TBits_1 read getRXFULLIF write setRXFULLIF;
    property RXHALFIE : TBits_1 read getRXHALFIE write setRXHALFIE;
    property RXHALFIF : TBits_1 read getRXHALFIF write setRXHALFIF;
    property RXNEMPTYIE : TBits_1 read getRXNEMPTYIE write setRXNEMPTYIE;
    property RXNEMPTYIF : TBits_1 read getRXNEMPTYIF write setRXNEMPTYIF;
    property RXOVFLIE : TBits_1 read getRXOVFLIE write setRXOVFLIE;
    property RXOVFLIF : TBits_1 read getRXOVFLIF write setRXOVFLIF;
    property TXEMPTYIE : TBits_1 read getTXEMPTYIE write setTXEMPTYIE;
    property TXEMPTYIF : TBits_1 read getTXEMPTYIF write setTXEMPTYIF;
    property TXHALFIE : TBits_1 read getTXHALFIE write setTXHALFIE;
    property TXHALFIF : TBits_1 read getTXHALFIF write setTXHALFIF;
    property TXNFULLIE : TBits_1 read getTXNFULLIE write setTXNFULLIE;
    property TXNFULLIF : TBits_1 read getTXNFULLIF write setTXNFULLIF;
    property w : TBits_32 read getw write setw;
  end;
  TCAN1_C1FIFOCI17 = record
  private
    function  getCFIFOCI : TBits_5; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setCFIFOCI(thebits : TBits_5); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    property CFIFOCI : TBits_5 read getCFIFOCI write setCFIFOCI;
    property w : TBits_32 read getw write setw;
  end;
  TCAN1_C1FIFOCON18 = record
  private
    function  getDONLY : TBits_1; assembler; nostackframe; inline;
    function  getFRESET : TBits_1; assembler; nostackframe; inline;
    function  getFSIZE : TBits_5; assembler; nostackframe; inline;
    function  getRTREN : TBits_1; assembler; nostackframe; inline;
    function  getTXABAT : TBits_1; assembler; nostackframe; inline;
    function  getTXEN : TBits_1; assembler; nostackframe; inline;
    function  getTXERR : TBits_1; assembler; nostackframe; inline;
    function  getTXLARB : TBits_1; assembler; nostackframe; inline;
    function  getTXPRI : TBits_2; assembler; nostackframe; inline;
    function  getTXREQ : TBits_1; assembler; nostackframe; inline;
    function  getUINC : TBits_1; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setDONLY(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setFRESET(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setFSIZE(thebits : TBits_5); assembler; nostackframe; inline;
    procedure setRTREN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXABAT(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXEN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXERR(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXLARB(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXPRI(thebits : TBits_2); assembler; nostackframe; inline;
    procedure setTXREQ(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setUINC(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearDONLY;
    procedure clearFRESET;
    procedure clearRTREN;
    procedure clearTXABAT;
    procedure clearTXEN;
    procedure clearTXERR;
    procedure clearTXLARB;
    procedure clearTXREQ;
    procedure clearUINC;
    procedure setDONLY;
    procedure setFRESET;
    procedure setRTREN;
    procedure setTXABAT;
    procedure setTXEN;
    procedure setTXERR;
    procedure setTXLARB;
    procedure setTXREQ;
    procedure setUINC;
    property DONLY : TBits_1 read getDONLY write setDONLY;
    property FRESET : TBits_1 read getFRESET write setFRESET;
    property FSIZE : TBits_5 read getFSIZE write setFSIZE;
    property RTREN : TBits_1 read getRTREN write setRTREN;
    property TXABAT : TBits_1 read getTXABAT write setTXABAT;
    property TXEN : TBits_1 read getTXEN write setTXEN;
    property TXERR : TBits_1 read getTXERR write setTXERR;
    property TXLARB : TBits_1 read getTXLARB write setTXLARB;
    property TXPRI : TBits_2 read getTXPRI write setTXPRI;
    property TXREQ : TBits_1 read getTXREQ write setTXREQ;
    property UINC : TBits_1 read getUINC write setUINC;
    property w : TBits_32 read getw write setw;
  end;
  TCAN1_C1FIFOINT18 = record
  private
    function  getRXFULLIE : TBits_1; assembler; nostackframe; inline;
    function  getRXFULLIF : TBits_1; assembler; nostackframe; inline;
    function  getRXHALFIE : TBits_1; assembler; nostackframe; inline;
    function  getRXHALFIF : TBits_1; assembler; nostackframe; inline;
    function  getRXNEMPTYIE : TBits_1; assembler; nostackframe; inline;
    function  getRXNEMPTYIF : TBits_1; assembler; nostackframe; inline;
    function  getRXOVFLIE : TBits_1; assembler; nostackframe; inline;
    function  getRXOVFLIF : TBits_1; assembler; nostackframe; inline;
    function  getTXEMPTYIE : TBits_1; assembler; nostackframe; inline;
    function  getTXEMPTYIF : TBits_1; assembler; nostackframe; inline;
    function  getTXHALFIE : TBits_1; assembler; nostackframe; inline;
    function  getTXHALFIF : TBits_1; assembler; nostackframe; inline;
    function  getTXNFULLIE : TBits_1; assembler; nostackframe; inline;
    function  getTXNFULLIF : TBits_1; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setRXFULLIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXFULLIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXHALFIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXHALFIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXNEMPTYIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXNEMPTYIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXOVFLIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXOVFLIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXEMPTYIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXEMPTYIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXHALFIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXHALFIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXNFULLIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXNFULLIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearRXFULLIE;
    procedure clearRXFULLIF;
    procedure clearRXHALFIE;
    procedure clearRXHALFIF;
    procedure clearRXNEMPTYIE;
    procedure clearRXNEMPTYIF;
    procedure clearRXOVFLIE;
    procedure clearRXOVFLIF;
    procedure clearTXEMPTYIE;
    procedure clearTXEMPTYIF;
    procedure clearTXHALFIE;
    procedure clearTXHALFIF;
    procedure clearTXNFULLIE;
    procedure clearTXNFULLIF;
    procedure setRXFULLIE;
    procedure setRXFULLIF;
    procedure setRXHALFIE;
    procedure setRXHALFIF;
    procedure setRXNEMPTYIE;
    procedure setRXNEMPTYIF;
    procedure setRXOVFLIE;
    procedure setRXOVFLIF;
    procedure setTXEMPTYIE;
    procedure setTXEMPTYIF;
    procedure setTXHALFIE;
    procedure setTXHALFIF;
    procedure setTXNFULLIE;
    procedure setTXNFULLIF;
    property RXFULLIE : TBits_1 read getRXFULLIE write setRXFULLIE;
    property RXFULLIF : TBits_1 read getRXFULLIF write setRXFULLIF;
    property RXHALFIE : TBits_1 read getRXHALFIE write setRXHALFIE;
    property RXHALFIF : TBits_1 read getRXHALFIF write setRXHALFIF;
    property RXNEMPTYIE : TBits_1 read getRXNEMPTYIE write setRXNEMPTYIE;
    property RXNEMPTYIF : TBits_1 read getRXNEMPTYIF write setRXNEMPTYIF;
    property RXOVFLIE : TBits_1 read getRXOVFLIE write setRXOVFLIE;
    property RXOVFLIF : TBits_1 read getRXOVFLIF write setRXOVFLIF;
    property TXEMPTYIE : TBits_1 read getTXEMPTYIE write setTXEMPTYIE;
    property TXEMPTYIF : TBits_1 read getTXEMPTYIF write setTXEMPTYIF;
    property TXHALFIE : TBits_1 read getTXHALFIE write setTXHALFIE;
    property TXHALFIF : TBits_1 read getTXHALFIF write setTXHALFIF;
    property TXNFULLIE : TBits_1 read getTXNFULLIE write setTXNFULLIE;
    property TXNFULLIF : TBits_1 read getTXNFULLIF write setTXNFULLIF;
    property w : TBits_32 read getw write setw;
  end;
  TCAN1_C1FIFOCI18 = record
  private
    function  getCFIFOCI : TBits_5; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setCFIFOCI(thebits : TBits_5); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    property CFIFOCI : TBits_5 read getCFIFOCI write setCFIFOCI;
    property w : TBits_32 read getw write setw;
  end;
  TCAN1_C1FIFOCON19 = record
  private
    function  getDONLY : TBits_1; assembler; nostackframe; inline;
    function  getFRESET : TBits_1; assembler; nostackframe; inline;
    function  getFSIZE : TBits_5; assembler; nostackframe; inline;
    function  getRTREN : TBits_1; assembler; nostackframe; inline;
    function  getTXABAT : TBits_1; assembler; nostackframe; inline;
    function  getTXEN : TBits_1; assembler; nostackframe; inline;
    function  getTXERR : TBits_1; assembler; nostackframe; inline;
    function  getTXLARB : TBits_1; assembler; nostackframe; inline;
    function  getTXPRI : TBits_2; assembler; nostackframe; inline;
    function  getTXREQ : TBits_1; assembler; nostackframe; inline;
    function  getUINC : TBits_1; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setDONLY(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setFRESET(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setFSIZE(thebits : TBits_5); assembler; nostackframe; inline;
    procedure setRTREN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXABAT(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXEN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXERR(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXLARB(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXPRI(thebits : TBits_2); assembler; nostackframe; inline;
    procedure setTXREQ(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setUINC(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearDONLY;
    procedure clearFRESET;
    procedure clearRTREN;
    procedure clearTXABAT;
    procedure clearTXEN;
    procedure clearTXERR;
    procedure clearTXLARB;
    procedure clearTXREQ;
    procedure clearUINC;
    procedure setDONLY;
    procedure setFRESET;
    procedure setRTREN;
    procedure setTXABAT;
    procedure setTXEN;
    procedure setTXERR;
    procedure setTXLARB;
    procedure setTXREQ;
    procedure setUINC;
    property DONLY : TBits_1 read getDONLY write setDONLY;
    property FRESET : TBits_1 read getFRESET write setFRESET;
    property FSIZE : TBits_5 read getFSIZE write setFSIZE;
    property RTREN : TBits_1 read getRTREN write setRTREN;
    property TXABAT : TBits_1 read getTXABAT write setTXABAT;
    property TXEN : TBits_1 read getTXEN write setTXEN;
    property TXERR : TBits_1 read getTXERR write setTXERR;
    property TXLARB : TBits_1 read getTXLARB write setTXLARB;
    property TXPRI : TBits_2 read getTXPRI write setTXPRI;
    property TXREQ : TBits_1 read getTXREQ write setTXREQ;
    property UINC : TBits_1 read getUINC write setUINC;
    property w : TBits_32 read getw write setw;
  end;
  TCAN1_C1FIFOINT19 = record
  private
    function  getRXFULLIE : TBits_1; assembler; nostackframe; inline;
    function  getRXFULLIF : TBits_1; assembler; nostackframe; inline;
    function  getRXHALFIE : TBits_1; assembler; nostackframe; inline;
    function  getRXHALFIF : TBits_1; assembler; nostackframe; inline;
    function  getRXNEMPTYIE : TBits_1; assembler; nostackframe; inline;
    function  getRXNEMPTYIF : TBits_1; assembler; nostackframe; inline;
    function  getRXOVFLIE : TBits_1; assembler; nostackframe; inline;
    function  getRXOVFLIF : TBits_1; assembler; nostackframe; inline;
    function  getTXEMPTYIE : TBits_1; assembler; nostackframe; inline;
    function  getTXEMPTYIF : TBits_1; assembler; nostackframe; inline;
    function  getTXHALFIE : TBits_1; assembler; nostackframe; inline;
    function  getTXHALFIF : TBits_1; assembler; nostackframe; inline;
    function  getTXNFULLIE : TBits_1; assembler; nostackframe; inline;
    function  getTXNFULLIF : TBits_1; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setRXFULLIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXFULLIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXHALFIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXHALFIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXNEMPTYIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXNEMPTYIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXOVFLIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXOVFLIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXEMPTYIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXEMPTYIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXHALFIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXHALFIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXNFULLIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXNFULLIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearRXFULLIE;
    procedure clearRXFULLIF;
    procedure clearRXHALFIE;
    procedure clearRXHALFIF;
    procedure clearRXNEMPTYIE;
    procedure clearRXNEMPTYIF;
    procedure clearRXOVFLIE;
    procedure clearRXOVFLIF;
    procedure clearTXEMPTYIE;
    procedure clearTXEMPTYIF;
    procedure clearTXHALFIE;
    procedure clearTXHALFIF;
    procedure clearTXNFULLIE;
    procedure clearTXNFULLIF;
    procedure setRXFULLIE;
    procedure setRXFULLIF;
    procedure setRXHALFIE;
    procedure setRXHALFIF;
    procedure setRXNEMPTYIE;
    procedure setRXNEMPTYIF;
    procedure setRXOVFLIE;
    procedure setRXOVFLIF;
    procedure setTXEMPTYIE;
    procedure setTXEMPTYIF;
    procedure setTXHALFIE;
    procedure setTXHALFIF;
    procedure setTXNFULLIE;
    procedure setTXNFULLIF;
    property RXFULLIE : TBits_1 read getRXFULLIE write setRXFULLIE;
    property RXFULLIF : TBits_1 read getRXFULLIF write setRXFULLIF;
    property RXHALFIE : TBits_1 read getRXHALFIE write setRXHALFIE;
    property RXHALFIF : TBits_1 read getRXHALFIF write setRXHALFIF;
    property RXNEMPTYIE : TBits_1 read getRXNEMPTYIE write setRXNEMPTYIE;
    property RXNEMPTYIF : TBits_1 read getRXNEMPTYIF write setRXNEMPTYIF;
    property RXOVFLIE : TBits_1 read getRXOVFLIE write setRXOVFLIE;
    property RXOVFLIF : TBits_1 read getRXOVFLIF write setRXOVFLIF;
    property TXEMPTYIE : TBits_1 read getTXEMPTYIE write setTXEMPTYIE;
    property TXEMPTYIF : TBits_1 read getTXEMPTYIF write setTXEMPTYIF;
    property TXHALFIE : TBits_1 read getTXHALFIE write setTXHALFIE;
    property TXHALFIF : TBits_1 read getTXHALFIF write setTXHALFIF;
    property TXNFULLIE : TBits_1 read getTXNFULLIE write setTXNFULLIE;
    property TXNFULLIF : TBits_1 read getTXNFULLIF write setTXNFULLIF;
    property w : TBits_32 read getw write setw;
  end;
  TCAN1_C1FIFOCI19 = record
  private
    function  getCFIFOCI : TBits_5; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setCFIFOCI(thebits : TBits_5); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    property CFIFOCI : TBits_5 read getCFIFOCI write setCFIFOCI;
    property w : TBits_32 read getw write setw;
  end;
  TCAN1_C1FIFOCON20 = record
  private
    function  getDONLY : TBits_1; assembler; nostackframe; inline;
    function  getFRESET : TBits_1; assembler; nostackframe; inline;
    function  getFSIZE : TBits_5; assembler; nostackframe; inline;
    function  getRTREN : TBits_1; assembler; nostackframe; inline;
    function  getTXABAT : TBits_1; assembler; nostackframe; inline;
    function  getTXEN : TBits_1; assembler; nostackframe; inline;
    function  getTXERR : TBits_1; assembler; nostackframe; inline;
    function  getTXLARB : TBits_1; assembler; nostackframe; inline;
    function  getTXPRI : TBits_2; assembler; nostackframe; inline;
    function  getTXREQ : TBits_1; assembler; nostackframe; inline;
    function  getUINC : TBits_1; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setDONLY(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setFRESET(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setFSIZE(thebits : TBits_5); assembler; nostackframe; inline;
    procedure setRTREN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXABAT(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXEN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXERR(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXLARB(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXPRI(thebits : TBits_2); assembler; nostackframe; inline;
    procedure setTXREQ(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setUINC(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearDONLY;
    procedure clearFRESET;
    procedure clearRTREN;
    procedure clearTXABAT;
    procedure clearTXEN;
    procedure clearTXERR;
    procedure clearTXLARB;
    procedure clearTXREQ;
    procedure clearUINC;
    procedure setDONLY;
    procedure setFRESET;
    procedure setRTREN;
    procedure setTXABAT;
    procedure setTXEN;
    procedure setTXERR;
    procedure setTXLARB;
    procedure setTXREQ;
    procedure setUINC;
    property DONLY : TBits_1 read getDONLY write setDONLY;
    property FRESET : TBits_1 read getFRESET write setFRESET;
    property FSIZE : TBits_5 read getFSIZE write setFSIZE;
    property RTREN : TBits_1 read getRTREN write setRTREN;
    property TXABAT : TBits_1 read getTXABAT write setTXABAT;
    property TXEN : TBits_1 read getTXEN write setTXEN;
    property TXERR : TBits_1 read getTXERR write setTXERR;
    property TXLARB : TBits_1 read getTXLARB write setTXLARB;
    property TXPRI : TBits_2 read getTXPRI write setTXPRI;
    property TXREQ : TBits_1 read getTXREQ write setTXREQ;
    property UINC : TBits_1 read getUINC write setUINC;
    property w : TBits_32 read getw write setw;
  end;
  TCAN1_C1FIFOINT20 = record
  private
    function  getRXFULLIE : TBits_1; assembler; nostackframe; inline;
    function  getRXFULLIF : TBits_1; assembler; nostackframe; inline;
    function  getRXHALFIE : TBits_1; assembler; nostackframe; inline;
    function  getRXHALFIF : TBits_1; assembler; nostackframe; inline;
    function  getRXNEMPTYIE : TBits_1; assembler; nostackframe; inline;
    function  getRXNEMPTYIF : TBits_1; assembler; nostackframe; inline;
    function  getRXOVFLIE : TBits_1; assembler; nostackframe; inline;
    function  getRXOVFLIF : TBits_1; assembler; nostackframe; inline;
    function  getTXEMPTYIE : TBits_1; assembler; nostackframe; inline;
    function  getTXEMPTYIF : TBits_1; assembler; nostackframe; inline;
    function  getTXHALFIE : TBits_1; assembler; nostackframe; inline;
    function  getTXHALFIF : TBits_1; assembler; nostackframe; inline;
    function  getTXNFULLIE : TBits_1; assembler; nostackframe; inline;
    function  getTXNFULLIF : TBits_1; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setRXFULLIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXFULLIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXHALFIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXHALFIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXNEMPTYIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXNEMPTYIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXOVFLIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXOVFLIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXEMPTYIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXEMPTYIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXHALFIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXHALFIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXNFULLIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXNFULLIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearRXFULLIE;
    procedure clearRXFULLIF;
    procedure clearRXHALFIE;
    procedure clearRXHALFIF;
    procedure clearRXNEMPTYIE;
    procedure clearRXNEMPTYIF;
    procedure clearRXOVFLIE;
    procedure clearRXOVFLIF;
    procedure clearTXEMPTYIE;
    procedure clearTXEMPTYIF;
    procedure clearTXHALFIE;
    procedure clearTXHALFIF;
    procedure clearTXNFULLIE;
    procedure clearTXNFULLIF;
    procedure setRXFULLIE;
    procedure setRXFULLIF;
    procedure setRXHALFIE;
    procedure setRXHALFIF;
    procedure setRXNEMPTYIE;
    procedure setRXNEMPTYIF;
    procedure setRXOVFLIE;
    procedure setRXOVFLIF;
    procedure setTXEMPTYIE;
    procedure setTXEMPTYIF;
    procedure setTXHALFIE;
    procedure setTXHALFIF;
    procedure setTXNFULLIE;
    procedure setTXNFULLIF;
    property RXFULLIE : TBits_1 read getRXFULLIE write setRXFULLIE;
    property RXFULLIF : TBits_1 read getRXFULLIF write setRXFULLIF;
    property RXHALFIE : TBits_1 read getRXHALFIE write setRXHALFIE;
    property RXHALFIF : TBits_1 read getRXHALFIF write setRXHALFIF;
    property RXNEMPTYIE : TBits_1 read getRXNEMPTYIE write setRXNEMPTYIE;
    property RXNEMPTYIF : TBits_1 read getRXNEMPTYIF write setRXNEMPTYIF;
    property RXOVFLIE : TBits_1 read getRXOVFLIE write setRXOVFLIE;
    property RXOVFLIF : TBits_1 read getRXOVFLIF write setRXOVFLIF;
    property TXEMPTYIE : TBits_1 read getTXEMPTYIE write setTXEMPTYIE;
    property TXEMPTYIF : TBits_1 read getTXEMPTYIF write setTXEMPTYIF;
    property TXHALFIE : TBits_1 read getTXHALFIE write setTXHALFIE;
    property TXHALFIF : TBits_1 read getTXHALFIF write setTXHALFIF;
    property TXNFULLIE : TBits_1 read getTXNFULLIE write setTXNFULLIE;
    property TXNFULLIF : TBits_1 read getTXNFULLIF write setTXNFULLIF;
    property w : TBits_32 read getw write setw;
  end;
  TCAN1_C1FIFOCI20 = record
  private
    function  getCFIFOCI : TBits_5; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setCFIFOCI(thebits : TBits_5); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    property CFIFOCI : TBits_5 read getCFIFOCI write setCFIFOCI;
    property w : TBits_32 read getw write setw;
  end;
  TCAN1_C1FIFOCON21 = record
  private
    function  getDONLY : TBits_1; assembler; nostackframe; inline;
    function  getFRESET : TBits_1; assembler; nostackframe; inline;
    function  getFSIZE : TBits_5; assembler; nostackframe; inline;
    function  getRTREN : TBits_1; assembler; nostackframe; inline;
    function  getTXABAT : TBits_1; assembler; nostackframe; inline;
    function  getTXEN : TBits_1; assembler; nostackframe; inline;
    function  getTXERR : TBits_1; assembler; nostackframe; inline;
    function  getTXLARB : TBits_1; assembler; nostackframe; inline;
    function  getTXPRI : TBits_2; assembler; nostackframe; inline;
    function  getTXREQ : TBits_1; assembler; nostackframe; inline;
    function  getUINC : TBits_1; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setDONLY(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setFRESET(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setFSIZE(thebits : TBits_5); assembler; nostackframe; inline;
    procedure setRTREN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXABAT(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXEN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXERR(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXLARB(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXPRI(thebits : TBits_2); assembler; nostackframe; inline;
    procedure setTXREQ(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setUINC(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearDONLY;
    procedure clearFRESET;
    procedure clearRTREN;
    procedure clearTXABAT;
    procedure clearTXEN;
    procedure clearTXERR;
    procedure clearTXLARB;
    procedure clearTXREQ;
    procedure clearUINC;
    procedure setDONLY;
    procedure setFRESET;
    procedure setRTREN;
    procedure setTXABAT;
    procedure setTXEN;
    procedure setTXERR;
    procedure setTXLARB;
    procedure setTXREQ;
    procedure setUINC;
    property DONLY : TBits_1 read getDONLY write setDONLY;
    property FRESET : TBits_1 read getFRESET write setFRESET;
    property FSIZE : TBits_5 read getFSIZE write setFSIZE;
    property RTREN : TBits_1 read getRTREN write setRTREN;
    property TXABAT : TBits_1 read getTXABAT write setTXABAT;
    property TXEN : TBits_1 read getTXEN write setTXEN;
    property TXERR : TBits_1 read getTXERR write setTXERR;
    property TXLARB : TBits_1 read getTXLARB write setTXLARB;
    property TXPRI : TBits_2 read getTXPRI write setTXPRI;
    property TXREQ : TBits_1 read getTXREQ write setTXREQ;
    property UINC : TBits_1 read getUINC write setUINC;
    property w : TBits_32 read getw write setw;
  end;
  TCAN1_C1FIFOINT21 = record
  private
    function  getRXFULLIE : TBits_1; assembler; nostackframe; inline;
    function  getRXFULLIF : TBits_1; assembler; nostackframe; inline;
    function  getRXHALFIE : TBits_1; assembler; nostackframe; inline;
    function  getRXHALFIF : TBits_1; assembler; nostackframe; inline;
    function  getRXNEMPTYIE : TBits_1; assembler; nostackframe; inline;
    function  getRXNEMPTYIF : TBits_1; assembler; nostackframe; inline;
    function  getRXOVFLIE : TBits_1; assembler; nostackframe; inline;
    function  getRXOVFLIF : TBits_1; assembler; nostackframe; inline;
    function  getTXEMPTYIE : TBits_1; assembler; nostackframe; inline;
    function  getTXEMPTYIF : TBits_1; assembler; nostackframe; inline;
    function  getTXHALFIE : TBits_1; assembler; nostackframe; inline;
    function  getTXHALFIF : TBits_1; assembler; nostackframe; inline;
    function  getTXNFULLIE : TBits_1; assembler; nostackframe; inline;
    function  getTXNFULLIF : TBits_1; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setRXFULLIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXFULLIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXHALFIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXHALFIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXNEMPTYIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXNEMPTYIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXOVFLIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXOVFLIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXEMPTYIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXEMPTYIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXHALFIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXHALFIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXNFULLIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXNFULLIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearRXFULLIE;
    procedure clearRXFULLIF;
    procedure clearRXHALFIE;
    procedure clearRXHALFIF;
    procedure clearRXNEMPTYIE;
    procedure clearRXNEMPTYIF;
    procedure clearRXOVFLIE;
    procedure clearRXOVFLIF;
    procedure clearTXEMPTYIE;
    procedure clearTXEMPTYIF;
    procedure clearTXHALFIE;
    procedure clearTXHALFIF;
    procedure clearTXNFULLIE;
    procedure clearTXNFULLIF;
    procedure setRXFULLIE;
    procedure setRXFULLIF;
    procedure setRXHALFIE;
    procedure setRXHALFIF;
    procedure setRXNEMPTYIE;
    procedure setRXNEMPTYIF;
    procedure setRXOVFLIE;
    procedure setRXOVFLIF;
    procedure setTXEMPTYIE;
    procedure setTXEMPTYIF;
    procedure setTXHALFIE;
    procedure setTXHALFIF;
    procedure setTXNFULLIE;
    procedure setTXNFULLIF;
    property RXFULLIE : TBits_1 read getRXFULLIE write setRXFULLIE;
    property RXFULLIF : TBits_1 read getRXFULLIF write setRXFULLIF;
    property RXHALFIE : TBits_1 read getRXHALFIE write setRXHALFIE;
    property RXHALFIF : TBits_1 read getRXHALFIF write setRXHALFIF;
    property RXNEMPTYIE : TBits_1 read getRXNEMPTYIE write setRXNEMPTYIE;
    property RXNEMPTYIF : TBits_1 read getRXNEMPTYIF write setRXNEMPTYIF;
    property RXOVFLIE : TBits_1 read getRXOVFLIE write setRXOVFLIE;
    property RXOVFLIF : TBits_1 read getRXOVFLIF write setRXOVFLIF;
    property TXEMPTYIE : TBits_1 read getTXEMPTYIE write setTXEMPTYIE;
    property TXEMPTYIF : TBits_1 read getTXEMPTYIF write setTXEMPTYIF;
    property TXHALFIE : TBits_1 read getTXHALFIE write setTXHALFIE;
    property TXHALFIF : TBits_1 read getTXHALFIF write setTXHALFIF;
    property TXNFULLIE : TBits_1 read getTXNFULLIE write setTXNFULLIE;
    property TXNFULLIF : TBits_1 read getTXNFULLIF write setTXNFULLIF;
    property w : TBits_32 read getw write setw;
  end;
  TCAN1_C1FIFOCI21 = record
  private
    function  getCFIFOCI : TBits_5; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setCFIFOCI(thebits : TBits_5); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    property CFIFOCI : TBits_5 read getCFIFOCI write setCFIFOCI;
    property w : TBits_32 read getw write setw;
  end;
  TCAN1_C1FIFOCON22 = record
  private
    function  getDONLY : TBits_1; assembler; nostackframe; inline;
    function  getFRESET : TBits_1; assembler; nostackframe; inline;
    function  getFSIZE : TBits_5; assembler; nostackframe; inline;
    function  getRTREN : TBits_1; assembler; nostackframe; inline;
    function  getTXABAT : TBits_1; assembler; nostackframe; inline;
    function  getTXEN : TBits_1; assembler; nostackframe; inline;
    function  getTXERR : TBits_1; assembler; nostackframe; inline;
    function  getTXLARB : TBits_1; assembler; nostackframe; inline;
    function  getTXPRI : TBits_2; assembler; nostackframe; inline;
    function  getTXREQ : TBits_1; assembler; nostackframe; inline;
    function  getUINC : TBits_1; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setDONLY(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setFRESET(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setFSIZE(thebits : TBits_5); assembler; nostackframe; inline;
    procedure setRTREN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXABAT(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXEN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXERR(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXLARB(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXPRI(thebits : TBits_2); assembler; nostackframe; inline;
    procedure setTXREQ(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setUINC(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearDONLY;
    procedure clearFRESET;
    procedure clearRTREN;
    procedure clearTXABAT;
    procedure clearTXEN;
    procedure clearTXERR;
    procedure clearTXLARB;
    procedure clearTXREQ;
    procedure clearUINC;
    procedure setDONLY;
    procedure setFRESET;
    procedure setRTREN;
    procedure setTXABAT;
    procedure setTXEN;
    procedure setTXERR;
    procedure setTXLARB;
    procedure setTXREQ;
    procedure setUINC;
    property DONLY : TBits_1 read getDONLY write setDONLY;
    property FRESET : TBits_1 read getFRESET write setFRESET;
    property FSIZE : TBits_5 read getFSIZE write setFSIZE;
    property RTREN : TBits_1 read getRTREN write setRTREN;
    property TXABAT : TBits_1 read getTXABAT write setTXABAT;
    property TXEN : TBits_1 read getTXEN write setTXEN;
    property TXERR : TBits_1 read getTXERR write setTXERR;
    property TXLARB : TBits_1 read getTXLARB write setTXLARB;
    property TXPRI : TBits_2 read getTXPRI write setTXPRI;
    property TXREQ : TBits_1 read getTXREQ write setTXREQ;
    property UINC : TBits_1 read getUINC write setUINC;
    property w : TBits_32 read getw write setw;
  end;
  TCAN1_C1FIFOINT22 = record
  private
    function  getRXFULLIE : TBits_1; assembler; nostackframe; inline;
    function  getRXFULLIF : TBits_1; assembler; nostackframe; inline;
    function  getRXHALFIE : TBits_1; assembler; nostackframe; inline;
    function  getRXHALFIF : TBits_1; assembler; nostackframe; inline;
    function  getRXNEMPTYIE : TBits_1; assembler; nostackframe; inline;
    function  getRXNEMPTYIF : TBits_1; assembler; nostackframe; inline;
    function  getRXOVFLIE : TBits_1; assembler; nostackframe; inline;
    function  getRXOVFLIF : TBits_1; assembler; nostackframe; inline;
    function  getTXEMPTYIE : TBits_1; assembler; nostackframe; inline;
    function  getTXEMPTYIF : TBits_1; assembler; nostackframe; inline;
    function  getTXHALFIE : TBits_1; assembler; nostackframe; inline;
    function  getTXHALFIF : TBits_1; assembler; nostackframe; inline;
    function  getTXNFULLIE : TBits_1; assembler; nostackframe; inline;
    function  getTXNFULLIF : TBits_1; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setRXFULLIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXFULLIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXHALFIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXHALFIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXNEMPTYIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXNEMPTYIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXOVFLIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXOVFLIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXEMPTYIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXEMPTYIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXHALFIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXHALFIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXNFULLIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXNFULLIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearRXFULLIE;
    procedure clearRXFULLIF;
    procedure clearRXHALFIE;
    procedure clearRXHALFIF;
    procedure clearRXNEMPTYIE;
    procedure clearRXNEMPTYIF;
    procedure clearRXOVFLIE;
    procedure clearRXOVFLIF;
    procedure clearTXEMPTYIE;
    procedure clearTXEMPTYIF;
    procedure clearTXHALFIE;
    procedure clearTXHALFIF;
    procedure clearTXNFULLIE;
    procedure clearTXNFULLIF;
    procedure setRXFULLIE;
    procedure setRXFULLIF;
    procedure setRXHALFIE;
    procedure setRXHALFIF;
    procedure setRXNEMPTYIE;
    procedure setRXNEMPTYIF;
    procedure setRXOVFLIE;
    procedure setRXOVFLIF;
    procedure setTXEMPTYIE;
    procedure setTXEMPTYIF;
    procedure setTXHALFIE;
    procedure setTXHALFIF;
    procedure setTXNFULLIE;
    procedure setTXNFULLIF;
    property RXFULLIE : TBits_1 read getRXFULLIE write setRXFULLIE;
    property RXFULLIF : TBits_1 read getRXFULLIF write setRXFULLIF;
    property RXHALFIE : TBits_1 read getRXHALFIE write setRXHALFIE;
    property RXHALFIF : TBits_1 read getRXHALFIF write setRXHALFIF;
    property RXNEMPTYIE : TBits_1 read getRXNEMPTYIE write setRXNEMPTYIE;
    property RXNEMPTYIF : TBits_1 read getRXNEMPTYIF write setRXNEMPTYIF;
    property RXOVFLIE : TBits_1 read getRXOVFLIE write setRXOVFLIE;
    property RXOVFLIF : TBits_1 read getRXOVFLIF write setRXOVFLIF;
    property TXEMPTYIE : TBits_1 read getTXEMPTYIE write setTXEMPTYIE;
    property TXEMPTYIF : TBits_1 read getTXEMPTYIF write setTXEMPTYIF;
    property TXHALFIE : TBits_1 read getTXHALFIE write setTXHALFIE;
    property TXHALFIF : TBits_1 read getTXHALFIF write setTXHALFIF;
    property TXNFULLIE : TBits_1 read getTXNFULLIE write setTXNFULLIE;
    property TXNFULLIF : TBits_1 read getTXNFULLIF write setTXNFULLIF;
    property w : TBits_32 read getw write setw;
  end;
  TCAN1_C1FIFOCI22 = record
  private
    function  getCFIFOCI : TBits_5; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setCFIFOCI(thebits : TBits_5); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    property CFIFOCI : TBits_5 read getCFIFOCI write setCFIFOCI;
    property w : TBits_32 read getw write setw;
  end;
  TCAN1_C1FIFOCON23 = record
  private
    function  getDONLY : TBits_1; assembler; nostackframe; inline;
    function  getFRESET : TBits_1; assembler; nostackframe; inline;
    function  getFSIZE : TBits_5; assembler; nostackframe; inline;
    function  getRTREN : TBits_1; assembler; nostackframe; inline;
    function  getTXABAT : TBits_1; assembler; nostackframe; inline;
    function  getTXEN : TBits_1; assembler; nostackframe; inline;
    function  getTXERR : TBits_1; assembler; nostackframe; inline;
    function  getTXLARB : TBits_1; assembler; nostackframe; inline;
    function  getTXPRI : TBits_2; assembler; nostackframe; inline;
    function  getTXREQ : TBits_1; assembler; nostackframe; inline;
    function  getUINC : TBits_1; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setDONLY(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setFRESET(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setFSIZE(thebits : TBits_5); assembler; nostackframe; inline;
    procedure setRTREN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXABAT(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXEN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXERR(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXLARB(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXPRI(thebits : TBits_2); assembler; nostackframe; inline;
    procedure setTXREQ(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setUINC(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearDONLY;
    procedure clearFRESET;
    procedure clearRTREN;
    procedure clearTXABAT;
    procedure clearTXEN;
    procedure clearTXERR;
    procedure clearTXLARB;
    procedure clearTXREQ;
    procedure clearUINC;
    procedure setDONLY;
    procedure setFRESET;
    procedure setRTREN;
    procedure setTXABAT;
    procedure setTXEN;
    procedure setTXERR;
    procedure setTXLARB;
    procedure setTXREQ;
    procedure setUINC;
    property DONLY : TBits_1 read getDONLY write setDONLY;
    property FRESET : TBits_1 read getFRESET write setFRESET;
    property FSIZE : TBits_5 read getFSIZE write setFSIZE;
    property RTREN : TBits_1 read getRTREN write setRTREN;
    property TXABAT : TBits_1 read getTXABAT write setTXABAT;
    property TXEN : TBits_1 read getTXEN write setTXEN;
    property TXERR : TBits_1 read getTXERR write setTXERR;
    property TXLARB : TBits_1 read getTXLARB write setTXLARB;
    property TXPRI : TBits_2 read getTXPRI write setTXPRI;
    property TXREQ : TBits_1 read getTXREQ write setTXREQ;
    property UINC : TBits_1 read getUINC write setUINC;
    property w : TBits_32 read getw write setw;
  end;
  TCAN1_C1FIFOINT23 = record
  private
    function  getRXFULLIE : TBits_1; assembler; nostackframe; inline;
    function  getRXFULLIF : TBits_1; assembler; nostackframe; inline;
    function  getRXHALFIE : TBits_1; assembler; nostackframe; inline;
    function  getRXHALFIF : TBits_1; assembler; nostackframe; inline;
    function  getRXNEMPTYIE : TBits_1; assembler; nostackframe; inline;
    function  getRXNEMPTYIF : TBits_1; assembler; nostackframe; inline;
    function  getRXOVFLIE : TBits_1; assembler; nostackframe; inline;
    function  getRXOVFLIF : TBits_1; assembler; nostackframe; inline;
    function  getTXEMPTYIE : TBits_1; assembler; nostackframe; inline;
    function  getTXEMPTYIF : TBits_1; assembler; nostackframe; inline;
    function  getTXHALFIE : TBits_1; assembler; nostackframe; inline;
    function  getTXHALFIF : TBits_1; assembler; nostackframe; inline;
    function  getTXNFULLIE : TBits_1; assembler; nostackframe; inline;
    function  getTXNFULLIF : TBits_1; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setRXFULLIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXFULLIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXHALFIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXHALFIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXNEMPTYIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXNEMPTYIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXOVFLIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXOVFLIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXEMPTYIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXEMPTYIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXHALFIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXHALFIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXNFULLIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXNFULLIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearRXFULLIE;
    procedure clearRXFULLIF;
    procedure clearRXHALFIE;
    procedure clearRXHALFIF;
    procedure clearRXNEMPTYIE;
    procedure clearRXNEMPTYIF;
    procedure clearRXOVFLIE;
    procedure clearRXOVFLIF;
    procedure clearTXEMPTYIE;
    procedure clearTXEMPTYIF;
    procedure clearTXHALFIE;
    procedure clearTXHALFIF;
    procedure clearTXNFULLIE;
    procedure clearTXNFULLIF;
    procedure setRXFULLIE;
    procedure setRXFULLIF;
    procedure setRXHALFIE;
    procedure setRXHALFIF;
    procedure setRXNEMPTYIE;
    procedure setRXNEMPTYIF;
    procedure setRXOVFLIE;
    procedure setRXOVFLIF;
    procedure setTXEMPTYIE;
    procedure setTXEMPTYIF;
    procedure setTXHALFIE;
    procedure setTXHALFIF;
    procedure setTXNFULLIE;
    procedure setTXNFULLIF;
    property RXFULLIE : TBits_1 read getRXFULLIE write setRXFULLIE;
    property RXFULLIF : TBits_1 read getRXFULLIF write setRXFULLIF;
    property RXHALFIE : TBits_1 read getRXHALFIE write setRXHALFIE;
    property RXHALFIF : TBits_1 read getRXHALFIF write setRXHALFIF;
    property RXNEMPTYIE : TBits_1 read getRXNEMPTYIE write setRXNEMPTYIE;
    property RXNEMPTYIF : TBits_1 read getRXNEMPTYIF write setRXNEMPTYIF;
    property RXOVFLIE : TBits_1 read getRXOVFLIE write setRXOVFLIE;
    property RXOVFLIF : TBits_1 read getRXOVFLIF write setRXOVFLIF;
    property TXEMPTYIE : TBits_1 read getTXEMPTYIE write setTXEMPTYIE;
    property TXEMPTYIF : TBits_1 read getTXEMPTYIF write setTXEMPTYIF;
    property TXHALFIE : TBits_1 read getTXHALFIE write setTXHALFIE;
    property TXHALFIF : TBits_1 read getTXHALFIF write setTXHALFIF;
    property TXNFULLIE : TBits_1 read getTXNFULLIE write setTXNFULLIE;
    property TXNFULLIF : TBits_1 read getTXNFULLIF write setTXNFULLIF;
    property w : TBits_32 read getw write setw;
  end;
  TCAN1_C1FIFOCI23 = record
  private
    function  getCFIFOCI : TBits_5; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setCFIFOCI(thebits : TBits_5); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    property CFIFOCI : TBits_5 read getCFIFOCI write setCFIFOCI;
    property w : TBits_32 read getw write setw;
  end;
  TCAN1_C1FIFOCON24 = record
  private
    function  getDONLY : TBits_1; assembler; nostackframe; inline;
    function  getFRESET : TBits_1; assembler; nostackframe; inline;
    function  getFSIZE : TBits_5; assembler; nostackframe; inline;
    function  getRTREN : TBits_1; assembler; nostackframe; inline;
    function  getTXABAT : TBits_1; assembler; nostackframe; inline;
    function  getTXEN : TBits_1; assembler; nostackframe; inline;
    function  getTXERR : TBits_1; assembler; nostackframe; inline;
    function  getTXLARB : TBits_1; assembler; nostackframe; inline;
    function  getTXPRI : TBits_2; assembler; nostackframe; inline;
    function  getTXREQ : TBits_1; assembler; nostackframe; inline;
    function  getUINC : TBits_1; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setDONLY(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setFRESET(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setFSIZE(thebits : TBits_5); assembler; nostackframe; inline;
    procedure setRTREN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXABAT(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXEN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXERR(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXLARB(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXPRI(thebits : TBits_2); assembler; nostackframe; inline;
    procedure setTXREQ(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setUINC(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearDONLY;
    procedure clearFRESET;
    procedure clearRTREN;
    procedure clearTXABAT;
    procedure clearTXEN;
    procedure clearTXERR;
    procedure clearTXLARB;
    procedure clearTXREQ;
    procedure clearUINC;
    procedure setDONLY;
    procedure setFRESET;
    procedure setRTREN;
    procedure setTXABAT;
    procedure setTXEN;
    procedure setTXERR;
    procedure setTXLARB;
    procedure setTXREQ;
    procedure setUINC;
    property DONLY : TBits_1 read getDONLY write setDONLY;
    property FRESET : TBits_1 read getFRESET write setFRESET;
    property FSIZE : TBits_5 read getFSIZE write setFSIZE;
    property RTREN : TBits_1 read getRTREN write setRTREN;
    property TXABAT : TBits_1 read getTXABAT write setTXABAT;
    property TXEN : TBits_1 read getTXEN write setTXEN;
    property TXERR : TBits_1 read getTXERR write setTXERR;
    property TXLARB : TBits_1 read getTXLARB write setTXLARB;
    property TXPRI : TBits_2 read getTXPRI write setTXPRI;
    property TXREQ : TBits_1 read getTXREQ write setTXREQ;
    property UINC : TBits_1 read getUINC write setUINC;
    property w : TBits_32 read getw write setw;
  end;
  TCAN1_C1FIFOINT24 = record
  private
    function  getRXFULLIE : TBits_1; assembler; nostackframe; inline;
    function  getRXFULLIF : TBits_1; assembler; nostackframe; inline;
    function  getRXHALFIE : TBits_1; assembler; nostackframe; inline;
    function  getRXHALFIF : TBits_1; assembler; nostackframe; inline;
    function  getRXNEMPTYIE : TBits_1; assembler; nostackframe; inline;
    function  getRXNEMPTYIF : TBits_1; assembler; nostackframe; inline;
    function  getRXOVFLIE : TBits_1; assembler; nostackframe; inline;
    function  getRXOVFLIF : TBits_1; assembler; nostackframe; inline;
    function  getTXEMPTYIE : TBits_1; assembler; nostackframe; inline;
    function  getTXEMPTYIF : TBits_1; assembler; nostackframe; inline;
    function  getTXHALFIE : TBits_1; assembler; nostackframe; inline;
    function  getTXHALFIF : TBits_1; assembler; nostackframe; inline;
    function  getTXNFULLIE : TBits_1; assembler; nostackframe; inline;
    function  getTXNFULLIF : TBits_1; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setRXFULLIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXFULLIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXHALFIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXHALFIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXNEMPTYIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXNEMPTYIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXOVFLIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXOVFLIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXEMPTYIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXEMPTYIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXHALFIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXHALFIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXNFULLIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXNFULLIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearRXFULLIE;
    procedure clearRXFULLIF;
    procedure clearRXHALFIE;
    procedure clearRXHALFIF;
    procedure clearRXNEMPTYIE;
    procedure clearRXNEMPTYIF;
    procedure clearRXOVFLIE;
    procedure clearRXOVFLIF;
    procedure clearTXEMPTYIE;
    procedure clearTXEMPTYIF;
    procedure clearTXHALFIE;
    procedure clearTXHALFIF;
    procedure clearTXNFULLIE;
    procedure clearTXNFULLIF;
    procedure setRXFULLIE;
    procedure setRXFULLIF;
    procedure setRXHALFIE;
    procedure setRXHALFIF;
    procedure setRXNEMPTYIE;
    procedure setRXNEMPTYIF;
    procedure setRXOVFLIE;
    procedure setRXOVFLIF;
    procedure setTXEMPTYIE;
    procedure setTXEMPTYIF;
    procedure setTXHALFIE;
    procedure setTXHALFIF;
    procedure setTXNFULLIE;
    procedure setTXNFULLIF;
    property RXFULLIE : TBits_1 read getRXFULLIE write setRXFULLIE;
    property RXFULLIF : TBits_1 read getRXFULLIF write setRXFULLIF;
    property RXHALFIE : TBits_1 read getRXHALFIE write setRXHALFIE;
    property RXHALFIF : TBits_1 read getRXHALFIF write setRXHALFIF;
    property RXNEMPTYIE : TBits_1 read getRXNEMPTYIE write setRXNEMPTYIE;
    property RXNEMPTYIF : TBits_1 read getRXNEMPTYIF write setRXNEMPTYIF;
    property RXOVFLIE : TBits_1 read getRXOVFLIE write setRXOVFLIE;
    property RXOVFLIF : TBits_1 read getRXOVFLIF write setRXOVFLIF;
    property TXEMPTYIE : TBits_1 read getTXEMPTYIE write setTXEMPTYIE;
    property TXEMPTYIF : TBits_1 read getTXEMPTYIF write setTXEMPTYIF;
    property TXHALFIE : TBits_1 read getTXHALFIE write setTXHALFIE;
    property TXHALFIF : TBits_1 read getTXHALFIF write setTXHALFIF;
    property TXNFULLIE : TBits_1 read getTXNFULLIE write setTXNFULLIE;
    property TXNFULLIF : TBits_1 read getTXNFULLIF write setTXNFULLIF;
    property w : TBits_32 read getw write setw;
  end;
  TCAN1_C1FIFOCI24 = record
  private
    function  getCFIFOCI : TBits_5; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setCFIFOCI(thebits : TBits_5); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    property CFIFOCI : TBits_5 read getCFIFOCI write setCFIFOCI;
    property w : TBits_32 read getw write setw;
  end;
  TCAN1_C1FIFOCON25 = record
  private
    function  getDONLY : TBits_1; assembler; nostackframe; inline;
    function  getFRESET : TBits_1; assembler; nostackframe; inline;
    function  getFSIZE : TBits_5; assembler; nostackframe; inline;
    function  getRTREN : TBits_1; assembler; nostackframe; inline;
    function  getTXABAT : TBits_1; assembler; nostackframe; inline;
    function  getTXEN : TBits_1; assembler; nostackframe; inline;
    function  getTXERR : TBits_1; assembler; nostackframe; inline;
    function  getTXLARB : TBits_1; assembler; nostackframe; inline;
    function  getTXPRI : TBits_2; assembler; nostackframe; inline;
    function  getTXREQ : TBits_1; assembler; nostackframe; inline;
    function  getUINC : TBits_1; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setDONLY(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setFRESET(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setFSIZE(thebits : TBits_5); assembler; nostackframe; inline;
    procedure setRTREN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXABAT(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXEN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXERR(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXLARB(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXPRI(thebits : TBits_2); assembler; nostackframe; inline;
    procedure setTXREQ(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setUINC(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearDONLY;
    procedure clearFRESET;
    procedure clearRTREN;
    procedure clearTXABAT;
    procedure clearTXEN;
    procedure clearTXERR;
    procedure clearTXLARB;
    procedure clearTXREQ;
    procedure clearUINC;
    procedure setDONLY;
    procedure setFRESET;
    procedure setRTREN;
    procedure setTXABAT;
    procedure setTXEN;
    procedure setTXERR;
    procedure setTXLARB;
    procedure setTXREQ;
    procedure setUINC;
    property DONLY : TBits_1 read getDONLY write setDONLY;
    property FRESET : TBits_1 read getFRESET write setFRESET;
    property FSIZE : TBits_5 read getFSIZE write setFSIZE;
    property RTREN : TBits_1 read getRTREN write setRTREN;
    property TXABAT : TBits_1 read getTXABAT write setTXABAT;
    property TXEN : TBits_1 read getTXEN write setTXEN;
    property TXERR : TBits_1 read getTXERR write setTXERR;
    property TXLARB : TBits_1 read getTXLARB write setTXLARB;
    property TXPRI : TBits_2 read getTXPRI write setTXPRI;
    property TXREQ : TBits_1 read getTXREQ write setTXREQ;
    property UINC : TBits_1 read getUINC write setUINC;
    property w : TBits_32 read getw write setw;
  end;
  TCAN1_C1FIFOINT25 = record
  private
    function  getRXFULLIE : TBits_1; assembler; nostackframe; inline;
    function  getRXFULLIF : TBits_1; assembler; nostackframe; inline;
    function  getRXHALFIE : TBits_1; assembler; nostackframe; inline;
    function  getRXHALFIF : TBits_1; assembler; nostackframe; inline;
    function  getRXNEMPTYIE : TBits_1; assembler; nostackframe; inline;
    function  getRXNEMPTYIF : TBits_1; assembler; nostackframe; inline;
    function  getRXOVFLIE : TBits_1; assembler; nostackframe; inline;
    function  getRXOVFLIF : TBits_1; assembler; nostackframe; inline;
    function  getTXEMPTYIE : TBits_1; assembler; nostackframe; inline;
    function  getTXEMPTYIF : TBits_1; assembler; nostackframe; inline;
    function  getTXHALFIE : TBits_1; assembler; nostackframe; inline;
    function  getTXHALFIF : TBits_1; assembler; nostackframe; inline;
    function  getTXNFULLIE : TBits_1; assembler; nostackframe; inline;
    function  getTXNFULLIF : TBits_1; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setRXFULLIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXFULLIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXHALFIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXHALFIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXNEMPTYIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXNEMPTYIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXOVFLIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXOVFLIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXEMPTYIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXEMPTYIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXHALFIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXHALFIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXNFULLIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXNFULLIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearRXFULLIE;
    procedure clearRXFULLIF;
    procedure clearRXHALFIE;
    procedure clearRXHALFIF;
    procedure clearRXNEMPTYIE;
    procedure clearRXNEMPTYIF;
    procedure clearRXOVFLIE;
    procedure clearRXOVFLIF;
    procedure clearTXEMPTYIE;
    procedure clearTXEMPTYIF;
    procedure clearTXHALFIE;
    procedure clearTXHALFIF;
    procedure clearTXNFULLIE;
    procedure clearTXNFULLIF;
    procedure setRXFULLIE;
    procedure setRXFULLIF;
    procedure setRXHALFIE;
    procedure setRXHALFIF;
    procedure setRXNEMPTYIE;
    procedure setRXNEMPTYIF;
    procedure setRXOVFLIE;
    procedure setRXOVFLIF;
    procedure setTXEMPTYIE;
    procedure setTXEMPTYIF;
    procedure setTXHALFIE;
    procedure setTXHALFIF;
    procedure setTXNFULLIE;
    procedure setTXNFULLIF;
    property RXFULLIE : TBits_1 read getRXFULLIE write setRXFULLIE;
    property RXFULLIF : TBits_1 read getRXFULLIF write setRXFULLIF;
    property RXHALFIE : TBits_1 read getRXHALFIE write setRXHALFIE;
    property RXHALFIF : TBits_1 read getRXHALFIF write setRXHALFIF;
    property RXNEMPTYIE : TBits_1 read getRXNEMPTYIE write setRXNEMPTYIE;
    property RXNEMPTYIF : TBits_1 read getRXNEMPTYIF write setRXNEMPTYIF;
    property RXOVFLIE : TBits_1 read getRXOVFLIE write setRXOVFLIE;
    property RXOVFLIF : TBits_1 read getRXOVFLIF write setRXOVFLIF;
    property TXEMPTYIE : TBits_1 read getTXEMPTYIE write setTXEMPTYIE;
    property TXEMPTYIF : TBits_1 read getTXEMPTYIF write setTXEMPTYIF;
    property TXHALFIE : TBits_1 read getTXHALFIE write setTXHALFIE;
    property TXHALFIF : TBits_1 read getTXHALFIF write setTXHALFIF;
    property TXNFULLIE : TBits_1 read getTXNFULLIE write setTXNFULLIE;
    property TXNFULLIF : TBits_1 read getTXNFULLIF write setTXNFULLIF;
    property w : TBits_32 read getw write setw;
  end;
  TCAN1_C1FIFOCI25 = record
  private
    function  getCFIFOCI : TBits_5; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setCFIFOCI(thebits : TBits_5); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    property CFIFOCI : TBits_5 read getCFIFOCI write setCFIFOCI;
    property w : TBits_32 read getw write setw;
  end;
  TCAN1_C1FIFOCON26 = record
  private
    function  getDONLY : TBits_1; assembler; nostackframe; inline;
    function  getFRESET : TBits_1; assembler; nostackframe; inline;
    function  getFSIZE : TBits_5; assembler; nostackframe; inline;
    function  getRTREN : TBits_1; assembler; nostackframe; inline;
    function  getTXABAT : TBits_1; assembler; nostackframe; inline;
    function  getTXEN : TBits_1; assembler; nostackframe; inline;
    function  getTXERR : TBits_1; assembler; nostackframe; inline;
    function  getTXLARB : TBits_1; assembler; nostackframe; inline;
    function  getTXPRI : TBits_2; assembler; nostackframe; inline;
    function  getTXREQ : TBits_1; assembler; nostackframe; inline;
    function  getUINC : TBits_1; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setDONLY(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setFRESET(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setFSIZE(thebits : TBits_5); assembler; nostackframe; inline;
    procedure setRTREN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXABAT(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXEN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXERR(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXLARB(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXPRI(thebits : TBits_2); assembler; nostackframe; inline;
    procedure setTXREQ(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setUINC(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearDONLY;
    procedure clearFRESET;
    procedure clearRTREN;
    procedure clearTXABAT;
    procedure clearTXEN;
    procedure clearTXERR;
    procedure clearTXLARB;
    procedure clearTXREQ;
    procedure clearUINC;
    procedure setDONLY;
    procedure setFRESET;
    procedure setRTREN;
    procedure setTXABAT;
    procedure setTXEN;
    procedure setTXERR;
    procedure setTXLARB;
    procedure setTXREQ;
    procedure setUINC;
    property DONLY : TBits_1 read getDONLY write setDONLY;
    property FRESET : TBits_1 read getFRESET write setFRESET;
    property FSIZE : TBits_5 read getFSIZE write setFSIZE;
    property RTREN : TBits_1 read getRTREN write setRTREN;
    property TXABAT : TBits_1 read getTXABAT write setTXABAT;
    property TXEN : TBits_1 read getTXEN write setTXEN;
    property TXERR : TBits_1 read getTXERR write setTXERR;
    property TXLARB : TBits_1 read getTXLARB write setTXLARB;
    property TXPRI : TBits_2 read getTXPRI write setTXPRI;
    property TXREQ : TBits_1 read getTXREQ write setTXREQ;
    property UINC : TBits_1 read getUINC write setUINC;
    property w : TBits_32 read getw write setw;
  end;
  TCAN1_C1FIFOINT26 = record
  private
    function  getRXFULLIE : TBits_1; assembler; nostackframe; inline;
    function  getRXFULLIF : TBits_1; assembler; nostackframe; inline;
    function  getRXHALFIE : TBits_1; assembler; nostackframe; inline;
    function  getRXHALFIF : TBits_1; assembler; nostackframe; inline;
    function  getRXNEMPTYIE : TBits_1; assembler; nostackframe; inline;
    function  getRXNEMPTYIF : TBits_1; assembler; nostackframe; inline;
    function  getRXOVFLIE : TBits_1; assembler; nostackframe; inline;
    function  getRXOVFLIF : TBits_1; assembler; nostackframe; inline;
    function  getTXEMPTYIE : TBits_1; assembler; nostackframe; inline;
    function  getTXEMPTYIF : TBits_1; assembler; nostackframe; inline;
    function  getTXHALFIE : TBits_1; assembler; nostackframe; inline;
    function  getTXHALFIF : TBits_1; assembler; nostackframe; inline;
    function  getTXNFULLIE : TBits_1; assembler; nostackframe; inline;
    function  getTXNFULLIF : TBits_1; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setRXFULLIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXFULLIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXHALFIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXHALFIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXNEMPTYIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXNEMPTYIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXOVFLIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXOVFLIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXEMPTYIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXEMPTYIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXHALFIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXHALFIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXNFULLIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXNFULLIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearRXFULLIE;
    procedure clearRXFULLIF;
    procedure clearRXHALFIE;
    procedure clearRXHALFIF;
    procedure clearRXNEMPTYIE;
    procedure clearRXNEMPTYIF;
    procedure clearRXOVFLIE;
    procedure clearRXOVFLIF;
    procedure clearTXEMPTYIE;
    procedure clearTXEMPTYIF;
    procedure clearTXHALFIE;
    procedure clearTXHALFIF;
    procedure clearTXNFULLIE;
    procedure clearTXNFULLIF;
    procedure setRXFULLIE;
    procedure setRXFULLIF;
    procedure setRXHALFIE;
    procedure setRXHALFIF;
    procedure setRXNEMPTYIE;
    procedure setRXNEMPTYIF;
    procedure setRXOVFLIE;
    procedure setRXOVFLIF;
    procedure setTXEMPTYIE;
    procedure setTXEMPTYIF;
    procedure setTXHALFIE;
    procedure setTXHALFIF;
    procedure setTXNFULLIE;
    procedure setTXNFULLIF;
    property RXFULLIE : TBits_1 read getRXFULLIE write setRXFULLIE;
    property RXFULLIF : TBits_1 read getRXFULLIF write setRXFULLIF;
    property RXHALFIE : TBits_1 read getRXHALFIE write setRXHALFIE;
    property RXHALFIF : TBits_1 read getRXHALFIF write setRXHALFIF;
    property RXNEMPTYIE : TBits_1 read getRXNEMPTYIE write setRXNEMPTYIE;
    property RXNEMPTYIF : TBits_1 read getRXNEMPTYIF write setRXNEMPTYIF;
    property RXOVFLIE : TBits_1 read getRXOVFLIE write setRXOVFLIE;
    property RXOVFLIF : TBits_1 read getRXOVFLIF write setRXOVFLIF;
    property TXEMPTYIE : TBits_1 read getTXEMPTYIE write setTXEMPTYIE;
    property TXEMPTYIF : TBits_1 read getTXEMPTYIF write setTXEMPTYIF;
    property TXHALFIE : TBits_1 read getTXHALFIE write setTXHALFIE;
    property TXHALFIF : TBits_1 read getTXHALFIF write setTXHALFIF;
    property TXNFULLIE : TBits_1 read getTXNFULLIE write setTXNFULLIE;
    property TXNFULLIF : TBits_1 read getTXNFULLIF write setTXNFULLIF;
    property w : TBits_32 read getw write setw;
  end;
  TCAN1_C1FIFOCI26 = record
  private
    function  getCFIFOCI : TBits_5; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setCFIFOCI(thebits : TBits_5); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    property CFIFOCI : TBits_5 read getCFIFOCI write setCFIFOCI;
    property w : TBits_32 read getw write setw;
  end;
  TCAN1_C1FIFOCON27 = record
  private
    function  getDONLY : TBits_1; assembler; nostackframe; inline;
    function  getFRESET : TBits_1; assembler; nostackframe; inline;
    function  getFSIZE : TBits_5; assembler; nostackframe; inline;
    function  getRTREN : TBits_1; assembler; nostackframe; inline;
    function  getTXABAT : TBits_1; assembler; nostackframe; inline;
    function  getTXEN : TBits_1; assembler; nostackframe; inline;
    function  getTXERR : TBits_1; assembler; nostackframe; inline;
    function  getTXLARB : TBits_1; assembler; nostackframe; inline;
    function  getTXPRI : TBits_2; assembler; nostackframe; inline;
    function  getTXREQ : TBits_1; assembler; nostackframe; inline;
    function  getUINC : TBits_1; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setDONLY(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setFRESET(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setFSIZE(thebits : TBits_5); assembler; nostackframe; inline;
    procedure setRTREN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXABAT(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXEN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXERR(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXLARB(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXPRI(thebits : TBits_2); assembler; nostackframe; inline;
    procedure setTXREQ(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setUINC(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearDONLY;
    procedure clearFRESET;
    procedure clearRTREN;
    procedure clearTXABAT;
    procedure clearTXEN;
    procedure clearTXERR;
    procedure clearTXLARB;
    procedure clearTXREQ;
    procedure clearUINC;
    procedure setDONLY;
    procedure setFRESET;
    procedure setRTREN;
    procedure setTXABAT;
    procedure setTXEN;
    procedure setTXERR;
    procedure setTXLARB;
    procedure setTXREQ;
    procedure setUINC;
    property DONLY : TBits_1 read getDONLY write setDONLY;
    property FRESET : TBits_1 read getFRESET write setFRESET;
    property FSIZE : TBits_5 read getFSIZE write setFSIZE;
    property RTREN : TBits_1 read getRTREN write setRTREN;
    property TXABAT : TBits_1 read getTXABAT write setTXABAT;
    property TXEN : TBits_1 read getTXEN write setTXEN;
    property TXERR : TBits_1 read getTXERR write setTXERR;
    property TXLARB : TBits_1 read getTXLARB write setTXLARB;
    property TXPRI : TBits_2 read getTXPRI write setTXPRI;
    property TXREQ : TBits_1 read getTXREQ write setTXREQ;
    property UINC : TBits_1 read getUINC write setUINC;
    property w : TBits_32 read getw write setw;
  end;
  TCAN1_C1FIFOINT27 = record
  private
    function  getRXFULLIE : TBits_1; assembler; nostackframe; inline;
    function  getRXFULLIF : TBits_1; assembler; nostackframe; inline;
    function  getRXHALFIE : TBits_1; assembler; nostackframe; inline;
    function  getRXHALFIF : TBits_1; assembler; nostackframe; inline;
    function  getRXNEMPTYIE : TBits_1; assembler; nostackframe; inline;
    function  getRXNEMPTYIF : TBits_1; assembler; nostackframe; inline;
    function  getRXOVFLIE : TBits_1; assembler; nostackframe; inline;
    function  getRXOVFLIF : TBits_1; assembler; nostackframe; inline;
    function  getTXEMPTYIE : TBits_1; assembler; nostackframe; inline;
    function  getTXEMPTYIF : TBits_1; assembler; nostackframe; inline;
    function  getTXHALFIE : TBits_1; assembler; nostackframe; inline;
    function  getTXHALFIF : TBits_1; assembler; nostackframe; inline;
    function  getTXNFULLIE : TBits_1; assembler; nostackframe; inline;
    function  getTXNFULLIF : TBits_1; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setRXFULLIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXFULLIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXHALFIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXHALFIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXNEMPTYIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXNEMPTYIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXOVFLIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXOVFLIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXEMPTYIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXEMPTYIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXHALFIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXHALFIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXNFULLIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXNFULLIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearRXFULLIE;
    procedure clearRXFULLIF;
    procedure clearRXHALFIE;
    procedure clearRXHALFIF;
    procedure clearRXNEMPTYIE;
    procedure clearRXNEMPTYIF;
    procedure clearRXOVFLIE;
    procedure clearRXOVFLIF;
    procedure clearTXEMPTYIE;
    procedure clearTXEMPTYIF;
    procedure clearTXHALFIE;
    procedure clearTXHALFIF;
    procedure clearTXNFULLIE;
    procedure clearTXNFULLIF;
    procedure setRXFULLIE;
    procedure setRXFULLIF;
    procedure setRXHALFIE;
    procedure setRXHALFIF;
    procedure setRXNEMPTYIE;
    procedure setRXNEMPTYIF;
    procedure setRXOVFLIE;
    procedure setRXOVFLIF;
    procedure setTXEMPTYIE;
    procedure setTXEMPTYIF;
    procedure setTXHALFIE;
    procedure setTXHALFIF;
    procedure setTXNFULLIE;
    procedure setTXNFULLIF;
    property RXFULLIE : TBits_1 read getRXFULLIE write setRXFULLIE;
    property RXFULLIF : TBits_1 read getRXFULLIF write setRXFULLIF;
    property RXHALFIE : TBits_1 read getRXHALFIE write setRXHALFIE;
    property RXHALFIF : TBits_1 read getRXHALFIF write setRXHALFIF;
    property RXNEMPTYIE : TBits_1 read getRXNEMPTYIE write setRXNEMPTYIE;
    property RXNEMPTYIF : TBits_1 read getRXNEMPTYIF write setRXNEMPTYIF;
    property RXOVFLIE : TBits_1 read getRXOVFLIE write setRXOVFLIE;
    property RXOVFLIF : TBits_1 read getRXOVFLIF write setRXOVFLIF;
    property TXEMPTYIE : TBits_1 read getTXEMPTYIE write setTXEMPTYIE;
    property TXEMPTYIF : TBits_1 read getTXEMPTYIF write setTXEMPTYIF;
    property TXHALFIE : TBits_1 read getTXHALFIE write setTXHALFIE;
    property TXHALFIF : TBits_1 read getTXHALFIF write setTXHALFIF;
    property TXNFULLIE : TBits_1 read getTXNFULLIE write setTXNFULLIE;
    property TXNFULLIF : TBits_1 read getTXNFULLIF write setTXNFULLIF;
    property w : TBits_32 read getw write setw;
  end;
  TCAN1_C1FIFOCI27 = record
  private
    function  getCFIFOCI : TBits_5; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setCFIFOCI(thebits : TBits_5); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    property CFIFOCI : TBits_5 read getCFIFOCI write setCFIFOCI;
    property w : TBits_32 read getw write setw;
  end;
  TCAN1_C1FIFOCON28 = record
  private
    function  getDONLY : TBits_1; assembler; nostackframe; inline;
    function  getFRESET : TBits_1; assembler; nostackframe; inline;
    function  getFSIZE : TBits_5; assembler; nostackframe; inline;
    function  getRTREN : TBits_1; assembler; nostackframe; inline;
    function  getTXABAT : TBits_1; assembler; nostackframe; inline;
    function  getTXEN : TBits_1; assembler; nostackframe; inline;
    function  getTXERR : TBits_1; assembler; nostackframe; inline;
    function  getTXLARB : TBits_1; assembler; nostackframe; inline;
    function  getTXPRI : TBits_2; assembler; nostackframe; inline;
    function  getTXREQ : TBits_1; assembler; nostackframe; inline;
    function  getUINC : TBits_1; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setDONLY(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setFRESET(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setFSIZE(thebits : TBits_5); assembler; nostackframe; inline;
    procedure setRTREN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXABAT(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXEN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXERR(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXLARB(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXPRI(thebits : TBits_2); assembler; nostackframe; inline;
    procedure setTXREQ(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setUINC(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearDONLY;
    procedure clearFRESET;
    procedure clearRTREN;
    procedure clearTXABAT;
    procedure clearTXEN;
    procedure clearTXERR;
    procedure clearTXLARB;
    procedure clearTXREQ;
    procedure clearUINC;
    procedure setDONLY;
    procedure setFRESET;
    procedure setRTREN;
    procedure setTXABAT;
    procedure setTXEN;
    procedure setTXERR;
    procedure setTXLARB;
    procedure setTXREQ;
    procedure setUINC;
    property DONLY : TBits_1 read getDONLY write setDONLY;
    property FRESET : TBits_1 read getFRESET write setFRESET;
    property FSIZE : TBits_5 read getFSIZE write setFSIZE;
    property RTREN : TBits_1 read getRTREN write setRTREN;
    property TXABAT : TBits_1 read getTXABAT write setTXABAT;
    property TXEN : TBits_1 read getTXEN write setTXEN;
    property TXERR : TBits_1 read getTXERR write setTXERR;
    property TXLARB : TBits_1 read getTXLARB write setTXLARB;
    property TXPRI : TBits_2 read getTXPRI write setTXPRI;
    property TXREQ : TBits_1 read getTXREQ write setTXREQ;
    property UINC : TBits_1 read getUINC write setUINC;
    property w : TBits_32 read getw write setw;
  end;
  TCAN1_C1FIFOINT28 = record
  private
    function  getRXFULLIE : TBits_1; assembler; nostackframe; inline;
    function  getRXFULLIF : TBits_1; assembler; nostackframe; inline;
    function  getRXHALFIE : TBits_1; assembler; nostackframe; inline;
    function  getRXHALFIF : TBits_1; assembler; nostackframe; inline;
    function  getRXNEMPTYIE : TBits_1; assembler; nostackframe; inline;
    function  getRXNEMPTYIF : TBits_1; assembler; nostackframe; inline;
    function  getRXOVFLIE : TBits_1; assembler; nostackframe; inline;
    function  getRXOVFLIF : TBits_1; assembler; nostackframe; inline;
    function  getTXEMPTYIE : TBits_1; assembler; nostackframe; inline;
    function  getTXEMPTYIF : TBits_1; assembler; nostackframe; inline;
    function  getTXHALFIE : TBits_1; assembler; nostackframe; inline;
    function  getTXHALFIF : TBits_1; assembler; nostackframe; inline;
    function  getTXNFULLIE : TBits_1; assembler; nostackframe; inline;
    function  getTXNFULLIF : TBits_1; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setRXFULLIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXFULLIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXHALFIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXHALFIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXNEMPTYIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXNEMPTYIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXOVFLIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXOVFLIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXEMPTYIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXEMPTYIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXHALFIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXHALFIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXNFULLIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXNFULLIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearRXFULLIE;
    procedure clearRXFULLIF;
    procedure clearRXHALFIE;
    procedure clearRXHALFIF;
    procedure clearRXNEMPTYIE;
    procedure clearRXNEMPTYIF;
    procedure clearRXOVFLIE;
    procedure clearRXOVFLIF;
    procedure clearTXEMPTYIE;
    procedure clearTXEMPTYIF;
    procedure clearTXHALFIE;
    procedure clearTXHALFIF;
    procedure clearTXNFULLIE;
    procedure clearTXNFULLIF;
    procedure setRXFULLIE;
    procedure setRXFULLIF;
    procedure setRXHALFIE;
    procedure setRXHALFIF;
    procedure setRXNEMPTYIE;
    procedure setRXNEMPTYIF;
    procedure setRXOVFLIE;
    procedure setRXOVFLIF;
    procedure setTXEMPTYIE;
    procedure setTXEMPTYIF;
    procedure setTXHALFIE;
    procedure setTXHALFIF;
    procedure setTXNFULLIE;
    procedure setTXNFULLIF;
    property RXFULLIE : TBits_1 read getRXFULLIE write setRXFULLIE;
    property RXFULLIF : TBits_1 read getRXFULLIF write setRXFULLIF;
    property RXHALFIE : TBits_1 read getRXHALFIE write setRXHALFIE;
    property RXHALFIF : TBits_1 read getRXHALFIF write setRXHALFIF;
    property RXNEMPTYIE : TBits_1 read getRXNEMPTYIE write setRXNEMPTYIE;
    property RXNEMPTYIF : TBits_1 read getRXNEMPTYIF write setRXNEMPTYIF;
    property RXOVFLIE : TBits_1 read getRXOVFLIE write setRXOVFLIE;
    property RXOVFLIF : TBits_1 read getRXOVFLIF write setRXOVFLIF;
    property TXEMPTYIE : TBits_1 read getTXEMPTYIE write setTXEMPTYIE;
    property TXEMPTYIF : TBits_1 read getTXEMPTYIF write setTXEMPTYIF;
    property TXHALFIE : TBits_1 read getTXHALFIE write setTXHALFIE;
    property TXHALFIF : TBits_1 read getTXHALFIF write setTXHALFIF;
    property TXNFULLIE : TBits_1 read getTXNFULLIE write setTXNFULLIE;
    property TXNFULLIF : TBits_1 read getTXNFULLIF write setTXNFULLIF;
    property w : TBits_32 read getw write setw;
  end;
  TCAN1_C1FIFOCI28 = record
  private
    function  getCFIFOCI : TBits_5; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setCFIFOCI(thebits : TBits_5); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    property CFIFOCI : TBits_5 read getCFIFOCI write setCFIFOCI;
    property w : TBits_32 read getw write setw;
  end;
  TCAN1_C1FIFOCON29 = record
  private
    function  getDONLY : TBits_1; assembler; nostackframe; inline;
    function  getFRESET : TBits_1; assembler; nostackframe; inline;
    function  getFSIZE : TBits_5; assembler; nostackframe; inline;
    function  getRTREN : TBits_1; assembler; nostackframe; inline;
    function  getTXABAT : TBits_1; assembler; nostackframe; inline;
    function  getTXEN : TBits_1; assembler; nostackframe; inline;
    function  getTXERR : TBits_1; assembler; nostackframe; inline;
    function  getTXLARB : TBits_1; assembler; nostackframe; inline;
    function  getTXPRI : TBits_2; assembler; nostackframe; inline;
    function  getTXREQ : TBits_1; assembler; nostackframe; inline;
    function  getUINC : TBits_1; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setDONLY(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setFRESET(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setFSIZE(thebits : TBits_5); assembler; nostackframe; inline;
    procedure setRTREN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXABAT(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXEN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXERR(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXLARB(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXPRI(thebits : TBits_2); assembler; nostackframe; inline;
    procedure setTXREQ(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setUINC(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearDONLY;
    procedure clearFRESET;
    procedure clearRTREN;
    procedure clearTXABAT;
    procedure clearTXEN;
    procedure clearTXERR;
    procedure clearTXLARB;
    procedure clearTXREQ;
    procedure clearUINC;
    procedure setDONLY;
    procedure setFRESET;
    procedure setRTREN;
    procedure setTXABAT;
    procedure setTXEN;
    procedure setTXERR;
    procedure setTXLARB;
    procedure setTXREQ;
    procedure setUINC;
    property DONLY : TBits_1 read getDONLY write setDONLY;
    property FRESET : TBits_1 read getFRESET write setFRESET;
    property FSIZE : TBits_5 read getFSIZE write setFSIZE;
    property RTREN : TBits_1 read getRTREN write setRTREN;
    property TXABAT : TBits_1 read getTXABAT write setTXABAT;
    property TXEN : TBits_1 read getTXEN write setTXEN;
    property TXERR : TBits_1 read getTXERR write setTXERR;
    property TXLARB : TBits_1 read getTXLARB write setTXLARB;
    property TXPRI : TBits_2 read getTXPRI write setTXPRI;
    property TXREQ : TBits_1 read getTXREQ write setTXREQ;
    property UINC : TBits_1 read getUINC write setUINC;
    property w : TBits_32 read getw write setw;
  end;
  TCAN1_C1FIFOINT29 = record
  private
    function  getRXFULLIE : TBits_1; assembler; nostackframe; inline;
    function  getRXFULLIF : TBits_1; assembler; nostackframe; inline;
    function  getRXHALFIE : TBits_1; assembler; nostackframe; inline;
    function  getRXHALFIF : TBits_1; assembler; nostackframe; inline;
    function  getRXNEMPTYIE : TBits_1; assembler; nostackframe; inline;
    function  getRXNEMPTYIF : TBits_1; assembler; nostackframe; inline;
    function  getRXOVFLIE : TBits_1; assembler; nostackframe; inline;
    function  getRXOVFLIF : TBits_1; assembler; nostackframe; inline;
    function  getTXEMPTYIE : TBits_1; assembler; nostackframe; inline;
    function  getTXEMPTYIF : TBits_1; assembler; nostackframe; inline;
    function  getTXHALFIE : TBits_1; assembler; nostackframe; inline;
    function  getTXHALFIF : TBits_1; assembler; nostackframe; inline;
    function  getTXNFULLIE : TBits_1; assembler; nostackframe; inline;
    function  getTXNFULLIF : TBits_1; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setRXFULLIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXFULLIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXHALFIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXHALFIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXNEMPTYIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXNEMPTYIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXOVFLIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXOVFLIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXEMPTYIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXEMPTYIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXHALFIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXHALFIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXNFULLIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXNFULLIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearRXFULLIE;
    procedure clearRXFULLIF;
    procedure clearRXHALFIE;
    procedure clearRXHALFIF;
    procedure clearRXNEMPTYIE;
    procedure clearRXNEMPTYIF;
    procedure clearRXOVFLIE;
    procedure clearRXOVFLIF;
    procedure clearTXEMPTYIE;
    procedure clearTXEMPTYIF;
    procedure clearTXHALFIE;
    procedure clearTXHALFIF;
    procedure clearTXNFULLIE;
    procedure clearTXNFULLIF;
    procedure setRXFULLIE;
    procedure setRXFULLIF;
    procedure setRXHALFIE;
    procedure setRXHALFIF;
    procedure setRXNEMPTYIE;
    procedure setRXNEMPTYIF;
    procedure setRXOVFLIE;
    procedure setRXOVFLIF;
    procedure setTXEMPTYIE;
    procedure setTXEMPTYIF;
    procedure setTXHALFIE;
    procedure setTXHALFIF;
    procedure setTXNFULLIE;
    procedure setTXNFULLIF;
    property RXFULLIE : TBits_1 read getRXFULLIE write setRXFULLIE;
    property RXFULLIF : TBits_1 read getRXFULLIF write setRXFULLIF;
    property RXHALFIE : TBits_1 read getRXHALFIE write setRXHALFIE;
    property RXHALFIF : TBits_1 read getRXHALFIF write setRXHALFIF;
    property RXNEMPTYIE : TBits_1 read getRXNEMPTYIE write setRXNEMPTYIE;
    property RXNEMPTYIF : TBits_1 read getRXNEMPTYIF write setRXNEMPTYIF;
    property RXOVFLIE : TBits_1 read getRXOVFLIE write setRXOVFLIE;
    property RXOVFLIF : TBits_1 read getRXOVFLIF write setRXOVFLIF;
    property TXEMPTYIE : TBits_1 read getTXEMPTYIE write setTXEMPTYIE;
    property TXEMPTYIF : TBits_1 read getTXEMPTYIF write setTXEMPTYIF;
    property TXHALFIE : TBits_1 read getTXHALFIE write setTXHALFIE;
    property TXHALFIF : TBits_1 read getTXHALFIF write setTXHALFIF;
    property TXNFULLIE : TBits_1 read getTXNFULLIE write setTXNFULLIE;
    property TXNFULLIF : TBits_1 read getTXNFULLIF write setTXNFULLIF;
    property w : TBits_32 read getw write setw;
  end;
  TCAN1_C1FIFOCI29 = record
  private
    function  getCFIFOCI : TBits_5; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setCFIFOCI(thebits : TBits_5); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    property CFIFOCI : TBits_5 read getCFIFOCI write setCFIFOCI;
    property w : TBits_32 read getw write setw;
  end;
  TCAN1_C1FIFOCON30 = record
  private
    function  getDONLY : TBits_1; assembler; nostackframe; inline;
    function  getFRESET : TBits_1; assembler; nostackframe; inline;
    function  getFSIZE : TBits_5; assembler; nostackframe; inline;
    function  getRTREN : TBits_1; assembler; nostackframe; inline;
    function  getTXABAT : TBits_1; assembler; nostackframe; inline;
    function  getTXEN : TBits_1; assembler; nostackframe; inline;
    function  getTXERR : TBits_1; assembler; nostackframe; inline;
    function  getTXLARB : TBits_1; assembler; nostackframe; inline;
    function  getTXPRI : TBits_2; assembler; nostackframe; inline;
    function  getTXREQ : TBits_1; assembler; nostackframe; inline;
    function  getUINC : TBits_1; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setDONLY(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setFRESET(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setFSIZE(thebits : TBits_5); assembler; nostackframe; inline;
    procedure setRTREN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXABAT(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXEN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXERR(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXLARB(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXPRI(thebits : TBits_2); assembler; nostackframe; inline;
    procedure setTXREQ(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setUINC(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearDONLY;
    procedure clearFRESET;
    procedure clearRTREN;
    procedure clearTXABAT;
    procedure clearTXEN;
    procedure clearTXERR;
    procedure clearTXLARB;
    procedure clearTXREQ;
    procedure clearUINC;
    procedure setDONLY;
    procedure setFRESET;
    procedure setRTREN;
    procedure setTXABAT;
    procedure setTXEN;
    procedure setTXERR;
    procedure setTXLARB;
    procedure setTXREQ;
    procedure setUINC;
    property DONLY : TBits_1 read getDONLY write setDONLY;
    property FRESET : TBits_1 read getFRESET write setFRESET;
    property FSIZE : TBits_5 read getFSIZE write setFSIZE;
    property RTREN : TBits_1 read getRTREN write setRTREN;
    property TXABAT : TBits_1 read getTXABAT write setTXABAT;
    property TXEN : TBits_1 read getTXEN write setTXEN;
    property TXERR : TBits_1 read getTXERR write setTXERR;
    property TXLARB : TBits_1 read getTXLARB write setTXLARB;
    property TXPRI : TBits_2 read getTXPRI write setTXPRI;
    property TXREQ : TBits_1 read getTXREQ write setTXREQ;
    property UINC : TBits_1 read getUINC write setUINC;
    property w : TBits_32 read getw write setw;
  end;
  TCAN1_C1FIFOINT30 = record
  private
    function  getRXFULLIE : TBits_1; assembler; nostackframe; inline;
    function  getRXFULLIF : TBits_1; assembler; nostackframe; inline;
    function  getRXHALFIE : TBits_1; assembler; nostackframe; inline;
    function  getRXHALFIF : TBits_1; assembler; nostackframe; inline;
    function  getRXNEMPTYIE : TBits_1; assembler; nostackframe; inline;
    function  getRXNEMPTYIF : TBits_1; assembler; nostackframe; inline;
    function  getRXOVFLIE : TBits_1; assembler; nostackframe; inline;
    function  getRXOVFLIF : TBits_1; assembler; nostackframe; inline;
    function  getTXEMPTYIE : TBits_1; assembler; nostackframe; inline;
    function  getTXEMPTYIF : TBits_1; assembler; nostackframe; inline;
    function  getTXHALFIE : TBits_1; assembler; nostackframe; inline;
    function  getTXHALFIF : TBits_1; assembler; nostackframe; inline;
    function  getTXNFULLIE : TBits_1; assembler; nostackframe; inline;
    function  getTXNFULLIF : TBits_1; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setRXFULLIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXFULLIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXHALFIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXHALFIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXNEMPTYIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXNEMPTYIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXOVFLIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXOVFLIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXEMPTYIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXEMPTYIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXHALFIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXHALFIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXNFULLIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXNFULLIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearRXFULLIE;
    procedure clearRXFULLIF;
    procedure clearRXHALFIE;
    procedure clearRXHALFIF;
    procedure clearRXNEMPTYIE;
    procedure clearRXNEMPTYIF;
    procedure clearRXOVFLIE;
    procedure clearRXOVFLIF;
    procedure clearTXEMPTYIE;
    procedure clearTXEMPTYIF;
    procedure clearTXHALFIE;
    procedure clearTXHALFIF;
    procedure clearTXNFULLIE;
    procedure clearTXNFULLIF;
    procedure setRXFULLIE;
    procedure setRXFULLIF;
    procedure setRXHALFIE;
    procedure setRXHALFIF;
    procedure setRXNEMPTYIE;
    procedure setRXNEMPTYIF;
    procedure setRXOVFLIE;
    procedure setRXOVFLIF;
    procedure setTXEMPTYIE;
    procedure setTXEMPTYIF;
    procedure setTXHALFIE;
    procedure setTXHALFIF;
    procedure setTXNFULLIE;
    procedure setTXNFULLIF;
    property RXFULLIE : TBits_1 read getRXFULLIE write setRXFULLIE;
    property RXFULLIF : TBits_1 read getRXFULLIF write setRXFULLIF;
    property RXHALFIE : TBits_1 read getRXHALFIE write setRXHALFIE;
    property RXHALFIF : TBits_1 read getRXHALFIF write setRXHALFIF;
    property RXNEMPTYIE : TBits_1 read getRXNEMPTYIE write setRXNEMPTYIE;
    property RXNEMPTYIF : TBits_1 read getRXNEMPTYIF write setRXNEMPTYIF;
    property RXOVFLIE : TBits_1 read getRXOVFLIE write setRXOVFLIE;
    property RXOVFLIF : TBits_1 read getRXOVFLIF write setRXOVFLIF;
    property TXEMPTYIE : TBits_1 read getTXEMPTYIE write setTXEMPTYIE;
    property TXEMPTYIF : TBits_1 read getTXEMPTYIF write setTXEMPTYIF;
    property TXHALFIE : TBits_1 read getTXHALFIE write setTXHALFIE;
    property TXHALFIF : TBits_1 read getTXHALFIF write setTXHALFIF;
    property TXNFULLIE : TBits_1 read getTXNFULLIE write setTXNFULLIE;
    property TXNFULLIF : TBits_1 read getTXNFULLIF write setTXNFULLIF;
    property w : TBits_32 read getw write setw;
  end;
  TCAN1_C1FIFOCI30 = record
  private
    function  getCFIFOCI : TBits_5; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setCFIFOCI(thebits : TBits_5); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    property CFIFOCI : TBits_5 read getCFIFOCI write setCFIFOCI;
    property w : TBits_32 read getw write setw;
  end;
  TCAN1_C1FIFOCON31 = record
  private
    function  getDONLY : TBits_1; assembler; nostackframe; inline;
    function  getFRESET : TBits_1; assembler; nostackframe; inline;
    function  getFSIZE : TBits_5; assembler; nostackframe; inline;
    function  getRTREN : TBits_1; assembler; nostackframe; inline;
    function  getTXABAT : TBits_1; assembler; nostackframe; inline;
    function  getTXEN : TBits_1; assembler; nostackframe; inline;
    function  getTXERR : TBits_1; assembler; nostackframe; inline;
    function  getTXLARB : TBits_1; assembler; nostackframe; inline;
    function  getTXPRI : TBits_2; assembler; nostackframe; inline;
    function  getTXREQ : TBits_1; assembler; nostackframe; inline;
    function  getUINC : TBits_1; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setDONLY(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setFRESET(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setFSIZE(thebits : TBits_5); assembler; nostackframe; inline;
    procedure setRTREN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXABAT(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXEN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXERR(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXLARB(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXPRI(thebits : TBits_2); assembler; nostackframe; inline;
    procedure setTXREQ(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setUINC(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearDONLY;
    procedure clearFRESET;
    procedure clearRTREN;
    procedure clearTXABAT;
    procedure clearTXEN;
    procedure clearTXERR;
    procedure clearTXLARB;
    procedure clearTXREQ;
    procedure clearUINC;
    procedure setDONLY;
    procedure setFRESET;
    procedure setRTREN;
    procedure setTXABAT;
    procedure setTXEN;
    procedure setTXERR;
    procedure setTXLARB;
    procedure setTXREQ;
    procedure setUINC;
    property DONLY : TBits_1 read getDONLY write setDONLY;
    property FRESET : TBits_1 read getFRESET write setFRESET;
    property FSIZE : TBits_5 read getFSIZE write setFSIZE;
    property RTREN : TBits_1 read getRTREN write setRTREN;
    property TXABAT : TBits_1 read getTXABAT write setTXABAT;
    property TXEN : TBits_1 read getTXEN write setTXEN;
    property TXERR : TBits_1 read getTXERR write setTXERR;
    property TXLARB : TBits_1 read getTXLARB write setTXLARB;
    property TXPRI : TBits_2 read getTXPRI write setTXPRI;
    property TXREQ : TBits_1 read getTXREQ write setTXREQ;
    property UINC : TBits_1 read getUINC write setUINC;
    property w : TBits_32 read getw write setw;
  end;
  TCAN1_C1FIFOINT31 = record
  private
    function  getRXFULLIE : TBits_1; assembler; nostackframe; inline;
    function  getRXFULLIF : TBits_1; assembler; nostackframe; inline;
    function  getRXHALFIE : TBits_1; assembler; nostackframe; inline;
    function  getRXHALFIF : TBits_1; assembler; nostackframe; inline;
    function  getRXNEMPTYIE : TBits_1; assembler; nostackframe; inline;
    function  getRXNEMPTYIF : TBits_1; assembler; nostackframe; inline;
    function  getRXOVFLIE : TBits_1; assembler; nostackframe; inline;
    function  getRXOVFLIF : TBits_1; assembler; nostackframe; inline;
    function  getTXEMPTYIE : TBits_1; assembler; nostackframe; inline;
    function  getTXEMPTYIF : TBits_1; assembler; nostackframe; inline;
    function  getTXHALFIE : TBits_1; assembler; nostackframe; inline;
    function  getTXHALFIF : TBits_1; assembler; nostackframe; inline;
    function  getTXNFULLIE : TBits_1; assembler; nostackframe; inline;
    function  getTXNFULLIF : TBits_1; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setRXFULLIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXFULLIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXHALFIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXHALFIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXNEMPTYIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXNEMPTYIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXOVFLIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setRXOVFLIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXEMPTYIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXEMPTYIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXHALFIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXHALFIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXNFULLIE(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setTXNFULLIF(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearRXFULLIE;
    procedure clearRXFULLIF;
    procedure clearRXHALFIE;
    procedure clearRXHALFIF;
    procedure clearRXNEMPTYIE;
    procedure clearRXNEMPTYIF;
    procedure clearRXOVFLIE;
    procedure clearRXOVFLIF;
    procedure clearTXEMPTYIE;
    procedure clearTXEMPTYIF;
    procedure clearTXHALFIE;
    procedure clearTXHALFIF;
    procedure clearTXNFULLIE;
    procedure clearTXNFULLIF;
    procedure setRXFULLIE;
    procedure setRXFULLIF;
    procedure setRXHALFIE;
    procedure setRXHALFIF;
    procedure setRXNEMPTYIE;
    procedure setRXNEMPTYIF;
    procedure setRXOVFLIE;
    procedure setRXOVFLIF;
    procedure setTXEMPTYIE;
    procedure setTXEMPTYIF;
    procedure setTXHALFIE;
    procedure setTXHALFIF;
    procedure setTXNFULLIE;
    procedure setTXNFULLIF;
    property RXFULLIE : TBits_1 read getRXFULLIE write setRXFULLIE;
    property RXFULLIF : TBits_1 read getRXFULLIF write setRXFULLIF;
    property RXHALFIE : TBits_1 read getRXHALFIE write setRXHALFIE;
    property RXHALFIF : TBits_1 read getRXHALFIF write setRXHALFIF;
    property RXNEMPTYIE : TBits_1 read getRXNEMPTYIE write setRXNEMPTYIE;
    property RXNEMPTYIF : TBits_1 read getRXNEMPTYIF write setRXNEMPTYIF;
    property RXOVFLIE : TBits_1 read getRXOVFLIE write setRXOVFLIE;
    property RXOVFLIF : TBits_1 read getRXOVFLIF write setRXOVFLIF;
    property TXEMPTYIE : TBits_1 read getTXEMPTYIE write setTXEMPTYIE;
    property TXEMPTYIF : TBits_1 read getTXEMPTYIF write setTXEMPTYIF;
    property TXHALFIE : TBits_1 read getTXHALFIE write setTXHALFIE;
    property TXHALFIF : TBits_1 read getTXHALFIF write setTXHALFIF;
    property TXNFULLIE : TBits_1 read getTXNFULLIE write setTXNFULLIE;
    property TXNFULLIF : TBits_1 read getTXNFULLIF write setTXNFULLIF;
    property w : TBits_32 read getw write setw;
  end;
  TCAN1_C1FIFOCI31 = record
  private
    function  getCFIFOCI : TBits_5; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setCFIFOCI(thebits : TBits_5); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    property CFIFOCI : TBits_5 read getCFIFOCI write setCFIFOCI;
    property w : TBits_32 read getw write setw;
  end;
type
  TCAN1Registers = record
    C1CONbits : TCAN1_C1CON;
    C1CON : longWord;
    C1CONCLR : longWord;
    C1CONSET : longWord;
    C1CONINV : longWord;
    C1CFGbits : TCAN1_C1CFG;
    C1CFG : longWord;
    C1CFGCLR : longWord;
    C1CFGSET : longWord;
    C1CFGINV : longWord;
    C1INTbits : TCAN1_C1INT;
    C1INT : longWord;
    C1INTCLR : longWord;
    C1INTSET : longWord;
    C1INTINV : longWord;
    C1VECbits : TCAN1_C1VEC;
    C1VEC : longWord;
    C1VECCLR : longWord;
    C1VECSET : longWord;
    C1VECINV : longWord;
    C1TRECbits : TCAN1_C1TREC;
    C1TREC : longWord;
    C1TRECCLR : longWord;
    C1TRECSET : longWord;
    C1TRECINV : longWord;
    C1FSTATbits : TCAN1_C1FSTAT;
    C1FSTAT : longWord;
    C1FSTATCLR : longWord;
    C1FSTATSET : longWord;
    C1FSTATINV : longWord;
    C1RXOVFbits : TCAN1_C1RXOVF;
    C1RXOVF : longWord;
    C1RXOVFCLR : longWord;
    C1RXOVFSET : longWord;
    C1RXOVFINV : longWord;
    C1TMRbits : TCAN1_C1TMR;
    C1TMR : longWord;
    C1TMRCLR : longWord;
    C1TMRSET : longWord;
    C1TMRINV : longWord;
    C1RXM0bits : TCAN1_C1RXM0;
    C1RXM0 : longWord;
    C1RXM0CLR : longWord;
    C1RXM0SET : longWord;
    C1RXM0INV : longWord;
    C1RXM1bits : TCAN1_C1RXM1;
    C1RXM1 : longWord;
    C1RXM1CLR : longWord;
    C1RXM1SET : longWord;
    C1RXM1INV : longWord;
    C1RXM2bits : TCAN1_C1RXM2;
    C1RXM2 : longWord;
    C1RXM2CLR : longWord;
    C1RXM2SET : longWord;
    C1RXM2INV : longWord;
    C1RXM3bits : TCAN1_C1RXM3;
    C1RXM3 : longWord;
    C1RXM3CLR : longWord;
    C1RXM3SET : longWord;
    C1RXM3INV : longWord;
    C1FLTCON0bits : TCAN1_C1FLTCON0;
    C1FLTCON0 : longWord;
    C1FLTCON0CLR : longWord;
    C1FLTCON0SET : longWord;
    C1FLTCON0INV : longWord;
    C1FLTCON1bits : TCAN1_C1FLTCON1;
    C1FLTCON1 : longWord;
    C1FLTCON1CLR : longWord;
    C1FLTCON1SET : longWord;
    C1FLTCON1INV : longWord;
    C1FLTCON2bits : TCAN1_C1FLTCON2;
    C1FLTCON2 : longWord;
    C1FLTCON2CLR : longWord;
    C1FLTCON2SET : longWord;
    C1FLTCON2INV : longWord;
    C1FLTCON3bits : TCAN1_C1FLTCON3;
    C1FLTCON3 : longWord;
    C1FLTCON3CLR : longWord;
    C1FLTCON3SET : longWord;
    C1FLTCON3INV : longWord;
    C1FLTCON4bits : TCAN1_C1FLTCON4;
    C1FLTCON4 : longWord;
    C1FLTCON4CLR : longWord;
    C1FLTCON4SET : longWord;
    C1FLTCON4INV : longWord;
    C1FLTCON5bits : TCAN1_C1FLTCON5;
    C1FLTCON5 : longWord;
    C1FLTCON5CLR : longWord;
    C1FLTCON5SET : longWord;
    C1FLTCON5INV : longWord;
    C1FLTCON6bits : TCAN1_C1FLTCON6;
    C1FLTCON6 : longWord;
    C1FLTCON6CLR : longWord;
    C1FLTCON6SET : longWord;
    C1FLTCON6INV : longWord;
    C1FLTCON7bits : TCAN1_C1FLTCON7;
    C1FLTCON7 : longWord;
    C1FLTCON7CLR : longWord;
    C1FLTCON7SET : longWord;
    C1FLTCON7INV : longWord;
    C1RXF0bits : TCAN1_C1RXF0;
    C1RXF0 : longWord;
    C1RXF0CLR : longWord;
    C1RXF0SET : longWord;
    C1RXF0INV : longWord;
    C1RXF1bits : TCAN1_C1RXF1;
    C1RXF1 : longWord;
    C1RXF1CLR : longWord;
    C1RXF1SET : longWord;
    C1RXF1INV : longWord;
    C1RXF2bits : TCAN1_C1RXF2;
    C1RXF2 : longWord;
    C1RXF2CLR : longWord;
    C1RXF2SET : longWord;
    C1RXF2INV : longWord;
    C1RXF3bits : TCAN1_C1RXF3;
    C1RXF3 : longWord;
    C1RXF3CLR : longWord;
    C1RXF3SET : longWord;
    C1RXF3INV : longWord;
    C1RXF4bits : TCAN1_C1RXF4;
    C1RXF4 : longWord;
    C1RXF4CLR : longWord;
    C1RXF4SET : longWord;
    C1RXF4INV : longWord;
    C1RXF5bits : TCAN1_C1RXF5;
    C1RXF5 : longWord;
    C1RXF5CLR : longWord;
    C1RXF5SET : longWord;
    C1RXF5INV : longWord;
    C1RXF6bits : TCAN1_C1RXF6;
    C1RXF6 : longWord;
    C1RXF6CLR : longWord;
    C1RXF6SET : longWord;
    C1RXF6INV : longWord;
    C1RXF7bits : TCAN1_C1RXF7;
    C1RXF7 : longWord;
    C1RXF7CLR : longWord;
    C1RXF7SET : longWord;
    C1RXF7INV : longWord;
    C1RXF8bits : TCAN1_C1RXF8;
    C1RXF8 : longWord;
    C1RXF8CLR : longWord;
    C1RXF8SET : longWord;
    C1RXF8INV : longWord;
    C1RXF9bits : TCAN1_C1RXF9;
    C1RXF9 : longWord;
    C1RXF9CLR : longWord;
    C1RXF9SET : longWord;
    C1RXF9INV : longWord;
    C1RXF10bits : TCAN1_C1RXF10;
    C1RXF10 : longWord;
    C1RXF10CLR : longWord;
    C1RXF10SET : longWord;
    C1RXF10INV : longWord;
    C1RXF11bits : TCAN1_C1RXF11;
    C1RXF11 : longWord;
    C1RXF11CLR : longWord;
    C1RXF11SET : longWord;
    C1RXF11INV : longWord;
    C1RXF12bits : TCAN1_C1RXF12;
    C1RXF12 : longWord;
    C1RXF12CLR : longWord;
    C1RXF12SET : longWord;
    C1RXF12INV : longWord;
    C1RXF13bits : TCAN1_C1RXF13;
    C1RXF13 : longWord;
    C1RXF13CLR : longWord;
    C1RXF13SET : longWord;
    C1RXF13INV : longWord;
    C1RXF14bits : TCAN1_C1RXF14;
    C1RXF14 : longWord;
    C1RXF14CLR : longWord;
    C1RXF14SET : longWord;
    C1RXF14INV : longWord;
    C1RXF15bits : TCAN1_C1RXF15;
    C1RXF15 : longWord;
    C1RXF15CLR : longWord;
    C1RXF15SET : longWord;
    C1RXF15INV : longWord;
    C1RXF16bits : TCAN1_C1RXF16;
    C1RXF16 : longWord;
    C1RXF16CLR : longWord;
    C1RXF16SET : longWord;
    C1RXF16INV : longWord;
    C1RXF17bits : TCAN1_C1RXF17;
    C1RXF17 : longWord;
    C1RXF17CLR : longWord;
    C1RXF17SET : longWord;
    C1RXF17INV : longWord;
    C1RXF18bits : TCAN1_C1RXF18;
    C1RXF18 : longWord;
    C1RXF18CLR : longWord;
    C1RXF18SET : longWord;
    C1RXF18INV : longWord;
    C1RXF19bits : TCAN1_C1RXF19;
    C1RXF19 : longWord;
    C1RXF19CLR : longWord;
    C1RXF19SET : longWord;
    C1RXF19INV : longWord;
    C1RXF20bits : TCAN1_C1RXF20;
    C1RXF20 : longWord;
    C1RXF20CLR : longWord;
    C1RXF20SET : longWord;
    C1RXF20INV : longWord;
    C1RXF21bits : TCAN1_C1RXF21;
    C1RXF21 : longWord;
    C1RXF21CLR : longWord;
    C1RXF21SET : longWord;
    C1RXF21INV : longWord;
    C1RXF22bits : TCAN1_C1RXF22;
    C1RXF22 : longWord;
    C1RXF22CLR : longWord;
    C1RXF22SET : longWord;
    C1RXF22INV : longWord;
    C1RXF23bits : TCAN1_C1RXF23;
    C1RXF23 : longWord;
    C1RXF23CLR : longWord;
    C1RXF23SET : longWord;
    C1RXF23INV : longWord;
    C1RXF24bits : TCAN1_C1RXF24;
    C1RXF24 : longWord;
    C1RXF24CLR : longWord;
    C1RXF24SET : longWord;
    C1RXF24INV : longWord;
    C1RXF25bits : TCAN1_C1RXF25;
    C1RXF25 : longWord;
    C1RXF25CLR : longWord;
    C1RXF25SET : longWord;
    C1RXF25INV : longWord;
    C1RXF26bits : TCAN1_C1RXF26;
    C1RXF26 : longWord;
    C1RXF26CLR : longWord;
    C1RXF26SET : longWord;
    C1RXF26INV : longWord;
    C1RXF27bits : TCAN1_C1RXF27;
    C1RXF27 : longWord;
    C1RXF27CLR : longWord;
    C1RXF27SET : longWord;
    C1RXF27INV : longWord;
    C1RXF28bits : TCAN1_C1RXF28;
    C1RXF28 : longWord;
    C1RXF28CLR : longWord;
    C1RXF28SET : longWord;
    C1RXF28INV : longWord;
    C1RXF29bits : TCAN1_C1RXF29;
    C1RXF29 : longWord;
    C1RXF29CLR : longWord;
    C1RXF29SET : longWord;
    C1RXF29INV : longWord;
    C1RXF30bits : TCAN1_C1RXF30;
    C1RXF30 : longWord;
    C1RXF30CLR : longWord;
    C1RXF30SET : longWord;
    C1RXF30INV : longWord;
    C1RXF31bits : TCAN1_C1RXF31;
    C1RXF31 : longWord;
    C1RXF31CLR : longWord;
    C1RXF31SET : longWord;
    C1RXF31INV : longWord;
    C1FIFOBA : longWord;
    C1FIFOBACLR : longWord;
    C1FIFOBASET : longWord;
    C1FIFOBAINV : longWord;
    C1FIFOCON0bits : TCAN1_C1FIFOCON0;
    C1FIFOCON0 : longWord;
    C1FIFOCON0CLR : longWord;
    C1FIFOCON0SET : longWord;
    C1FIFOCON0INV : longWord;
    C1FIFOINT0bits : TCAN1_C1FIFOINT0;
    C1FIFOINT0 : longWord;
    C1FIFOINT0CLR : longWord;
    C1FIFOINT0SET : longWord;
    C1FIFOINT0INV : longWord;
    C1FIFOUA0 : longWord;
    C1FIFOUA0CLR : longWord;
    C1FIFOUA0SET : longWord;
    C1FIFOUA0INV : longWord;
    C1FIFOCI0bits : TCAN1_C1FIFOCI0;
    C1FIFOCI0 : longWord;
    C1FIFOCI0CLR : longWord;
    C1FIFOCI0SET : longWord;
    C1FIFOCI0INV : longWord;
    C1FIFOCON1bits : TCAN1_C1FIFOCON1;
    C1FIFOCON1 : longWord;
    C1FIFOCON1CLR : longWord;
    C1FIFOCON1SET : longWord;
    C1FIFOCON1INV : longWord;
    C1FIFOINT1bits : TCAN1_C1FIFOINT1;
    C1FIFOINT1 : longWord;
    C1FIFOINT1CLR : longWord;
    C1FIFOINT1SET : longWord;
    C1FIFOINT1INV : longWord;
    C1FIFOUA1 : longWord;
    C1FIFOUA1CLR : longWord;
    C1FIFOUA1SET : longWord;
    C1FIFOUA1INV : longWord;
    C1FIFOCI1bits : TCAN1_C1FIFOCI1;
    C1FIFOCI1 : longWord;
    C1FIFOCI1CLR : longWord;
    C1FIFOCI1SET : longWord;
    C1FIFOCI1INV : longWord;
    C1FIFOCON2bits : TCAN1_C1FIFOCON2;
    C1FIFOCON2 : longWord;
    C1FIFOCON2CLR : longWord;
    C1FIFOCON2SET : longWord;
    C1FIFOCON2INV : longWord;
    C1FIFOINT2bits : TCAN1_C1FIFOINT2;
    C1FIFOINT2 : longWord;
    C1FIFOINT2CLR : longWord;
    C1FIFOINT2SET : longWord;
    C1FIFOINT2INV : longWord;
    C1FIFOUA2 : longWord;
    C1FIFOUA2CLR : longWord;
    C1FIFOUA2SET : longWord;
    C1FIFOUA2INV : longWord;
    C1FIFOCI2bits : TCAN1_C1FIFOCI2;
    C1FIFOCI2 : longWord;
    C1FIFOCI2CLR : longWord;
    C1FIFOCI2SET : longWord;
    C1FIFOCI2INV : longWord;
    C1FIFOCON3bits : TCAN1_C1FIFOCON3;
    C1FIFOCON3 : longWord;
    C1FIFOCON3CLR : longWord;
    C1FIFOCON3SET : longWord;
    C1FIFOCON3INV : longWord;
    C1FIFOINT3bits : TCAN1_C1FIFOINT3;
    C1FIFOINT3 : longWord;
    C1FIFOINT3CLR : longWord;
    C1FIFOINT3SET : longWord;
    C1FIFOINT3INV : longWord;
    C1FIFOUA3 : longWord;
    C1FIFOUA3CLR : longWord;
    C1FIFOUA3SET : longWord;
    C1FIFOUA3INV : longWord;
    C1FIFOCI3bits : TCAN1_C1FIFOCI3;
    C1FIFOCI3 : longWord;
    C1FIFOCI3CLR : longWord;
    C1FIFOCI3SET : longWord;
    C1FIFOCI3INV : longWord;
    C1FIFOCON4bits : TCAN1_C1FIFOCON4;
    C1FIFOCON4 : longWord;
    C1FIFOCON4CLR : longWord;
    C1FIFOCON4SET : longWord;
    C1FIFOCON4INV : longWord;
    C1FIFOINT4bits : TCAN1_C1FIFOINT4;
    C1FIFOINT4 : longWord;
    C1FIFOINT4CLR : longWord;
    C1FIFOINT4SET : longWord;
    C1FIFOINT4INV : longWord;
    C1FIFOUA4 : longWord;
    C1FIFOUA4CLR : longWord;
    C1FIFOUA4SET : longWord;
    C1FIFOUA4INV : longWord;
    C1FIFOCI4bits : TCAN1_C1FIFOCI4;
    C1FIFOCI4 : longWord;
    C1FIFOCI4CLR : longWord;
    C1FIFOCI4SET : longWord;
    C1FIFOCI4INV : longWord;
    C1FIFOCON5bits : TCAN1_C1FIFOCON5;
    C1FIFOCON5 : longWord;
    C1FIFOCON5CLR : longWord;
    C1FIFOCON5SET : longWord;
    C1FIFOCON5INV : longWord;
    C1FIFOINT5bits : TCAN1_C1FIFOINT5;
    C1FIFOINT5 : longWord;
    C1FIFOINT5CLR : longWord;
    C1FIFOINT5SET : longWord;
    C1FIFOINT5INV : longWord;
    C1FIFOUA5 : longWord;
    C1FIFOUA5CLR : longWord;
    C1FIFOUA5SET : longWord;
    C1FIFOUA5INV : longWord;
    C1FIFOCI5bits : TCAN1_C1FIFOCI5;
    C1FIFOCI5 : longWord;
    C1FIFOCI5CLR : longWord;
    C1FIFOCI5SET : longWord;
    C1FIFOCI5INV : longWord;
    C1FIFOCON6bits : TCAN1_C1FIFOCON6;
    C1FIFOCON6 : longWord;
    C1FIFOCON6CLR : longWord;
    C1FIFOCON6SET : longWord;
    C1FIFOCON6INV : longWord;
    C1FIFOINT6bits : TCAN1_C1FIFOINT6;
    C1FIFOINT6 : longWord;
    C1FIFOINT6CLR : longWord;
    C1FIFOINT6SET : longWord;
    C1FIFOINT6INV : longWord;
    C1FIFOUA6 : longWord;
    C1FIFOUA6CLR : longWord;
    C1FIFOUA6SET : longWord;
    C1FIFOUA6INV : longWord;
    C1FIFOCI6bits : TCAN1_C1FIFOCI6;
    C1FIFOCI6 : longWord;
    C1FIFOCI6CLR : longWord;
    C1FIFOCI6SET : longWord;
    C1FIFOCI6INV : longWord;
    C1FIFOCON7bits : TCAN1_C1FIFOCON7;
    C1FIFOCON7 : longWord;
    C1FIFOCON7CLR : longWord;
    C1FIFOCON7SET : longWord;
    C1FIFOCON7INV : longWord;
    C1FIFOINT7bits : TCAN1_C1FIFOINT7;
    C1FIFOINT7 : longWord;
    C1FIFOINT7CLR : longWord;
    C1FIFOINT7SET : longWord;
    C1FIFOINT7INV : longWord;
    C1FIFOUA7 : longWord;
    C1FIFOUA7CLR : longWord;
    C1FIFOUA7SET : longWord;
    C1FIFOUA7INV : longWord;
    C1FIFOCI7bits : TCAN1_C1FIFOCI7;
    C1FIFOCI7 : longWord;
    C1FIFOCI7CLR : longWord;
    C1FIFOCI7SET : longWord;
    C1FIFOCI7INV : longWord;
    C1FIFOCON8bits : TCAN1_C1FIFOCON8;
    C1FIFOCON8 : longWord;
    C1FIFOCON8CLR : longWord;
    C1FIFOCON8SET : longWord;
    C1FIFOCON8INV : longWord;
    C1FIFOINT8bits : TCAN1_C1FIFOINT8;
    C1FIFOINT8 : longWord;
    C1FIFOINT8CLR : longWord;
    C1FIFOINT8SET : longWord;
    C1FIFOINT8INV : longWord;
    C1FIFOUA8 : longWord;
    C1FIFOUA8CLR : longWord;
    C1FIFOUA8SET : longWord;
    C1FIFOUA8INV : longWord;
    C1FIFOCI8bits : TCAN1_C1FIFOCI8;
    C1FIFOCI8 : longWord;
    C1FIFOCI8CLR : longWord;
    C1FIFOCI8SET : longWord;
    C1FIFOCI8INV : longWord;
    C1FIFOCON9bits : TCAN1_C1FIFOCON9;
    C1FIFOCON9 : longWord;
    C1FIFOCON9CLR : longWord;
    C1FIFOCON9SET : longWord;
    C1FIFOCON9INV : longWord;
    C1FIFOINT9bits : TCAN1_C1FIFOINT9;
    C1FIFOINT9 : longWord;
    C1FIFOINT9CLR : longWord;
    C1FIFOINT9SET : longWord;
    C1FIFOINT9INV : longWord;
    C1FIFOUA9 : longWord;
    C1FIFOUA9CLR : longWord;
    C1FIFOUA9SET : longWord;
    C1FIFOUA9INV : longWord;
    C1FIFOCI9bits : TCAN1_C1FIFOCI9;
    C1FIFOCI9 : longWord;
    C1FIFOCI9CLR : longWord;
    C1FIFOCI9SET : longWord;
    C1FIFOCI9INV : longWord;
    C1FIFOCON10bits : TCAN1_C1FIFOCON10;
    C1FIFOCON10 : longWord;
    C1FIFOCON10CLR : longWord;
    C1FIFOCON10SET : longWord;
    C1FIFOCON10INV : longWord;
    C1FIFOINT10bits : TCAN1_C1FIFOINT10;
    C1FIFOINT10 : longWord;
    C1FIFOINT10CLR : longWord;
    C1FIFOINT10SET : longWord;
    C1FIFOINT10INV : longWord;
    C1FIFOUA10 : longWord;
    C1FIFOUA10CLR : longWord;
    C1FIFOUA10SET : longWord;
    C1FIFOUA10INV : longWord;
    C1FIFOCI10bits : TCAN1_C1FIFOCI10;
    C1FIFOCI10 : longWord;
    C1FIFOCI10CLR : longWord;
    C1FIFOCI10SET : longWord;
    C1FIFOCI10INV : longWord;
    C1FIFOCON11bits : TCAN1_C1FIFOCON11;
    C1FIFOCON11 : longWord;
    C1FIFOCON11CLR : longWord;
    C1FIFOCON11SET : longWord;
    C1FIFOCON11INV : longWord;
    C1FIFOINT11bits : TCAN1_C1FIFOINT11;
    C1FIFOINT11 : longWord;
    C1FIFOINT11CLR : longWord;
    C1FIFOINT11SET : longWord;
    C1FIFOINT11INV : longWord;
    C1FIFOUA11 : longWord;
    C1FIFOUA11CLR : longWord;
    C1FIFOUA11SET : longWord;
    C1FIFOUA11INV : longWord;
    C1FIFOCI11bits : TCAN1_C1FIFOCI11;
    C1FIFOCI11 : longWord;
    C1FIFOCI11CLR : longWord;
    C1FIFOCI11SET : longWord;
    C1FIFOCI11INV : longWord;
    C1FIFOCON12bits : TCAN1_C1FIFOCON12;
    C1FIFOCON12 : longWord;
    C1FIFOCON12CLR : longWord;
    C1FIFOCON12SET : longWord;
    C1FIFOCON12INV : longWord;
    C1FIFOINT12bits : TCAN1_C1FIFOINT12;
    C1FIFOINT12 : longWord;
    C1FIFOINT12CLR : longWord;
    C1FIFOINT12SET : longWord;
    C1FIFOINT12INV : longWord;
    C1FIFOUA12 : longWord;
    C1FIFOUA12CLR : longWord;
    C1FIFOUA12SET : longWord;
    C1FIFOUA12INV : longWord;
    C1FIFOCI12bits : TCAN1_C1FIFOCI12;
    C1FIFOCI12 : longWord;
    C1FIFOCI12CLR : longWord;
    C1FIFOCI12SET : longWord;
    C1FIFOCI12INV : longWord;
    C1FIFOCON13bits : TCAN1_C1FIFOCON13;
    C1FIFOCON13 : longWord;
    C1FIFOCON13CLR : longWord;
    C1FIFOCON13SET : longWord;
    C1FIFOCON13INV : longWord;
    C1FIFOINT13bits : TCAN1_C1FIFOINT13;
    C1FIFOINT13 : longWord;
    C1FIFOINT13CLR : longWord;
    C1FIFOINT13SET : longWord;
    C1FIFOINT13INV : longWord;
    C1FIFOUA13 : longWord;
    C1FIFOUA13CLR : longWord;
    C1FIFOUA13SET : longWord;
    C1FIFOUA13INV : longWord;
    C1FIFOCI13bits : TCAN1_C1FIFOCI13;
    C1FIFOCI13 : longWord;
    C1FIFOCI13CLR : longWord;
    C1FIFOCI13SET : longWord;
    C1FIFOCI13INV : longWord;
    C1FIFOCON14bits : TCAN1_C1FIFOCON14;
    C1FIFOCON14 : longWord;
    C1FIFOCON14CLR : longWord;
    C1FIFOCON14SET : longWord;
    C1FIFOCON14INV : longWord;
    C1FIFOINT14bits : TCAN1_C1FIFOINT14;
    C1FIFOINT14 : longWord;
    C1FIFOINT14CLR : longWord;
    C1FIFOINT14SET : longWord;
    C1FIFOINT14INV : longWord;
    C1FIFOUA14 : longWord;
    C1FIFOUA14CLR : longWord;
    C1FIFOUA14SET : longWord;
    C1FIFOUA14INV : longWord;
    C1FIFOCI14bits : TCAN1_C1FIFOCI14;
    C1FIFOCI14 : longWord;
    C1FIFOCI14CLR : longWord;
    C1FIFOCI14SET : longWord;
    C1FIFOCI14INV : longWord;
    C1FIFOCON15bits : TCAN1_C1FIFOCON15;
    C1FIFOCON15 : longWord;
    C1FIFOCON15CLR : longWord;
    C1FIFOCON15SET : longWord;
    C1FIFOCON15INV : longWord;
    C1FIFOINT15bits : TCAN1_C1FIFOINT15;
    C1FIFOINT15 : longWord;
    C1FIFOINT15CLR : longWord;
    C1FIFOINT15SET : longWord;
    C1FIFOINT15INV : longWord;
    C1FIFOUA15 : longWord;
    C1FIFOUA15CLR : longWord;
    C1FIFOUA15SET : longWord;
    C1FIFOUA15INV : longWord;
    C1FIFOCI15bits : TCAN1_C1FIFOCI15;
    C1FIFOCI15 : longWord;
    C1FIFOCI15CLR : longWord;
    C1FIFOCI15SET : longWord;
    C1FIFOCI15INV : longWord;
    C1FIFOCON16bits : TCAN1_C1FIFOCON16;
    C1FIFOCON16 : longWord;
    C1FIFOCON16CLR : longWord;
    C1FIFOCON16SET : longWord;
    C1FIFOCON16INV : longWord;
    C1FIFOINT16bits : TCAN1_C1FIFOINT16;
    C1FIFOINT16 : longWord;
    C1FIFOINT16CLR : longWord;
    C1FIFOINT16SET : longWord;
    C1FIFOINT16INV : longWord;
    C1FIFOUA16 : longWord;
    C1FIFOUA16CLR : longWord;
    C1FIFOUA16SET : longWord;
    C1FIFOUA16INV : longWord;
    C1FIFOCI16bits : TCAN1_C1FIFOCI16;
    C1FIFOCI16 : longWord;
    C1FIFOCI16CLR : longWord;
    C1FIFOCI16SET : longWord;
    C1FIFOCI16INV : longWord;
    C1FIFOCON17bits : TCAN1_C1FIFOCON17;
    C1FIFOCON17 : longWord;
    C1FIFOCON17CLR : longWord;
    C1FIFOCON17SET : longWord;
    C1FIFOCON17INV : longWord;
    C1FIFOINT17bits : TCAN1_C1FIFOINT17;
    C1FIFOINT17 : longWord;
    C1FIFOINT17CLR : longWord;
    C1FIFOINT17SET : longWord;
    C1FIFOINT17INV : longWord;
    C1FIFOUA17 : longWord;
    C1FIFOUA17CLR : longWord;
    C1FIFOUA17SET : longWord;
    C1FIFOUA17INV : longWord;
    C1FIFOCI17bits : TCAN1_C1FIFOCI17;
    C1FIFOCI17 : longWord;
    C1FIFOCI17CLR : longWord;
    C1FIFOCI17SET : longWord;
    C1FIFOCI17INV : longWord;
    C1FIFOCON18bits : TCAN1_C1FIFOCON18;
    C1FIFOCON18 : longWord;
    C1FIFOCON18CLR : longWord;
    C1FIFOCON18SET : longWord;
    C1FIFOCON18INV : longWord;
    C1FIFOINT18bits : TCAN1_C1FIFOINT18;
    C1FIFOINT18 : longWord;
    C1FIFOINT18CLR : longWord;
    C1FIFOINT18SET : longWord;
    C1FIFOINT18INV : longWord;
    C1FIFOUA18 : longWord;
    C1FIFOUA18CLR : longWord;
    C1FIFOUA18SET : longWord;
    C1FIFOUA18INV : longWord;
    C1FIFOCI18bits : TCAN1_C1FIFOCI18;
    C1FIFOCI18 : longWord;
    C1FIFOCI18CLR : longWord;
    C1FIFOCI18SET : longWord;
    C1FIFOCI18INV : longWord;
    C1FIFOCON19bits : TCAN1_C1FIFOCON19;
    C1FIFOCON19 : longWord;
    C1FIFOCON19CLR : longWord;
    C1FIFOCON19SET : longWord;
    C1FIFOCON19INV : longWord;
    C1FIFOINT19bits : TCAN1_C1FIFOINT19;
    C1FIFOINT19 : longWord;
    C1FIFOINT19CLR : longWord;
    C1FIFOINT19SET : longWord;
    C1FIFOINT19INV : longWord;
    C1FIFOUA19 : longWord;
    C1FIFOUA19CLR : longWord;
    C1FIFOUA19SET : longWord;
    C1FIFOUA19INV : longWord;
    C1FIFOCI19bits : TCAN1_C1FIFOCI19;
    C1FIFOCI19 : longWord;
    C1FIFOCI19CLR : longWord;
    C1FIFOCI19SET : longWord;
    C1FIFOCI19INV : longWord;
    C1FIFOCON20bits : TCAN1_C1FIFOCON20;
    C1FIFOCON20 : longWord;
    C1FIFOCON20CLR : longWord;
    C1FIFOCON20SET : longWord;
    C1FIFOCON20INV : longWord;
    C1FIFOINT20bits : TCAN1_C1FIFOINT20;
    C1FIFOINT20 : longWord;
    C1FIFOINT20CLR : longWord;
    C1FIFOINT20SET : longWord;
    C1FIFOINT20INV : longWord;
    C1FIFOUA20 : longWord;
    C1FIFOUA20CLR : longWord;
    C1FIFOUA20SET : longWord;
    C1FIFOUA20INV : longWord;
    C1FIFOCI20bits : TCAN1_C1FIFOCI20;
    C1FIFOCI20 : longWord;
    C1FIFOCI20CLR : longWord;
    C1FIFOCI20SET : longWord;
    C1FIFOCI20INV : longWord;
    C1FIFOCON21bits : TCAN1_C1FIFOCON21;
    C1FIFOCON21 : longWord;
    C1FIFOCON21CLR : longWord;
    C1FIFOCON21SET : longWord;
    C1FIFOCON21INV : longWord;
    C1FIFOINT21bits : TCAN1_C1FIFOINT21;
    C1FIFOINT21 : longWord;
    C1FIFOINT21CLR : longWord;
    C1FIFOINT21SET : longWord;
    C1FIFOINT21INV : longWord;
    C1FIFOUA21 : longWord;
    C1FIFOUA21CLR : longWord;
    C1FIFOUA21SET : longWord;
    C1FIFOUA21INV : longWord;
    C1FIFOCI21bits : TCAN1_C1FIFOCI21;
    C1FIFOCI21 : longWord;
    C1FIFOCI21CLR : longWord;
    C1FIFOCI21SET : longWord;
    C1FIFOCI21INV : longWord;
    C1FIFOCON22bits : TCAN1_C1FIFOCON22;
    C1FIFOCON22 : longWord;
    C1FIFOCON22CLR : longWord;
    C1FIFOCON22SET : longWord;
    C1FIFOCON22INV : longWord;
    C1FIFOINT22bits : TCAN1_C1FIFOINT22;
    C1FIFOINT22 : longWord;
    C1FIFOINT22CLR : longWord;
    C1FIFOINT22SET : longWord;
    C1FIFOINT22INV : longWord;
    C1FIFOUA22 : longWord;
    C1FIFOUA22CLR : longWord;
    C1FIFOUA22SET : longWord;
    C1FIFOUA22INV : longWord;
    C1FIFOCI22bits : TCAN1_C1FIFOCI22;
    C1FIFOCI22 : longWord;
    C1FIFOCI22CLR : longWord;
    C1FIFOCI22SET : longWord;
    C1FIFOCI22INV : longWord;
    C1FIFOCON23bits : TCAN1_C1FIFOCON23;
    C1FIFOCON23 : longWord;
    C1FIFOCON23CLR : longWord;
    C1FIFOCON23SET : longWord;
    C1FIFOCON23INV : longWord;
    C1FIFOINT23bits : TCAN1_C1FIFOINT23;
    C1FIFOINT23 : longWord;
    C1FIFOINT23CLR : longWord;
    C1FIFOINT23SET : longWord;
    C1FIFOINT23INV : longWord;
    C1FIFOUA23 : longWord;
    C1FIFOUA23CLR : longWord;
    C1FIFOUA23SET : longWord;
    C1FIFOUA23INV : longWord;
    C1FIFOCI23bits : TCAN1_C1FIFOCI23;
    C1FIFOCI23 : longWord;
    C1FIFOCI23CLR : longWord;
    C1FIFOCI23SET : longWord;
    C1FIFOCI23INV : longWord;
    C1FIFOCON24bits : TCAN1_C1FIFOCON24;
    C1FIFOCON24 : longWord;
    C1FIFOCON24CLR : longWord;
    C1FIFOCON24SET : longWord;
    C1FIFOCON24INV : longWord;
    C1FIFOINT24bits : TCAN1_C1FIFOINT24;
    C1FIFOINT24 : longWord;
    C1FIFOINT24CLR : longWord;
    C1FIFOINT24SET : longWord;
    C1FIFOINT24INV : longWord;
    C1FIFOUA24 : longWord;
    C1FIFOUA24CLR : longWord;
    C1FIFOUA24SET : longWord;
    C1FIFOUA24INV : longWord;
    C1FIFOCI24bits : TCAN1_C1FIFOCI24;
    C1FIFOCI24 : longWord;
    C1FIFOCI24CLR : longWord;
    C1FIFOCI24SET : longWord;
    C1FIFOCI24INV : longWord;
    C1FIFOCON25bits : TCAN1_C1FIFOCON25;
    C1FIFOCON25 : longWord;
    C1FIFOCON25CLR : longWord;
    C1FIFOCON25SET : longWord;
    C1FIFOCON25INV : longWord;
    C1FIFOINT25bits : TCAN1_C1FIFOINT25;
    C1FIFOINT25 : longWord;
    C1FIFOINT25CLR : longWord;
    C1FIFOINT25SET : longWord;
    C1FIFOINT25INV : longWord;
    C1FIFOUA25 : longWord;
    C1FIFOUA25CLR : longWord;
    C1FIFOUA25SET : longWord;
    C1FIFOUA25INV : longWord;
    C1FIFOCI25bits : TCAN1_C1FIFOCI25;
    C1FIFOCI25 : longWord;
    C1FIFOCI25CLR : longWord;
    C1FIFOCI25SET : longWord;
    C1FIFOCI25INV : longWord;
    C1FIFOCON26bits : TCAN1_C1FIFOCON26;
    C1FIFOCON26 : longWord;
    C1FIFOCON26CLR : longWord;
    C1FIFOCON26SET : longWord;
    C1FIFOCON26INV : longWord;
    C1FIFOINT26bits : TCAN1_C1FIFOINT26;
    C1FIFOINT26 : longWord;
    C1FIFOINT26CLR : longWord;
    C1FIFOINT26SET : longWord;
    C1FIFOINT26INV : longWord;
    C1FIFOUA26 : longWord;
    C1FIFOUA26CLR : longWord;
    C1FIFOUA26SET : longWord;
    C1FIFOUA26INV : longWord;
    C1FIFOCI26bits : TCAN1_C1FIFOCI26;
    C1FIFOCI26 : longWord;
    C1FIFOCI26CLR : longWord;
    C1FIFOCI26SET : longWord;
    C1FIFOCI26INV : longWord;
    C1FIFOCON27bits : TCAN1_C1FIFOCON27;
    C1FIFOCON27 : longWord;
    C1FIFOCON27CLR : longWord;
    C1FIFOCON27SET : longWord;
    C1FIFOCON27INV : longWord;
    C1FIFOINT27bits : TCAN1_C1FIFOINT27;
    C1FIFOINT27 : longWord;
    C1FIFOINT27CLR : longWord;
    C1FIFOINT27SET : longWord;
    C1FIFOINT27INV : longWord;
    C1FIFOUA27 : longWord;
    C1FIFOUA27CLR : longWord;
    C1FIFOUA27SET : longWord;
    C1FIFOUA27INV : longWord;
    C1FIFOCI27bits : TCAN1_C1FIFOCI27;
    C1FIFOCI27 : longWord;
    C1FIFOCI27CLR : longWord;
    C1FIFOCI27SET : longWord;
    C1FIFOCI27INV : longWord;
    C1FIFOCON28bits : TCAN1_C1FIFOCON28;
    C1FIFOCON28 : longWord;
    C1FIFOCON28CLR : longWord;
    C1FIFOCON28SET : longWord;
    C1FIFOCON28INV : longWord;
    C1FIFOINT28bits : TCAN1_C1FIFOINT28;
    C1FIFOINT28 : longWord;
    C1FIFOINT28CLR : longWord;
    C1FIFOINT28SET : longWord;
    C1FIFOINT28INV : longWord;
    C1FIFOUA28 : longWord;
    C1FIFOUA28CLR : longWord;
    C1FIFOUA28SET : longWord;
    C1FIFOUA28INV : longWord;
    C1FIFOCI28bits : TCAN1_C1FIFOCI28;
    C1FIFOCI28 : longWord;
    C1FIFOCI28CLR : longWord;
    C1FIFOCI28SET : longWord;
    C1FIFOCI28INV : longWord;
    C1FIFOCON29bits : TCAN1_C1FIFOCON29;
    C1FIFOCON29 : longWord;
    C1FIFOCON29CLR : longWord;
    C1FIFOCON29SET : longWord;
    C1FIFOCON29INV : longWord;
    C1FIFOINT29bits : TCAN1_C1FIFOINT29;
    C1FIFOINT29 : longWord;
    C1FIFOINT29CLR : longWord;
    C1FIFOINT29SET : longWord;
    C1FIFOINT29INV : longWord;
    C1FIFOUA29 : longWord;
    C1FIFOUA29CLR : longWord;
    C1FIFOUA29SET : longWord;
    C1FIFOUA29INV : longWord;
    C1FIFOCI29bits : TCAN1_C1FIFOCI29;
    C1FIFOCI29 : longWord;
    C1FIFOCI29CLR : longWord;
    C1FIFOCI29SET : longWord;
    C1FIFOCI29INV : longWord;
    C1FIFOCON30bits : TCAN1_C1FIFOCON30;
    C1FIFOCON30 : longWord;
    C1FIFOCON30CLR : longWord;
    C1FIFOCON30SET : longWord;
    C1FIFOCON30INV : longWord;
    C1FIFOINT30bits : TCAN1_C1FIFOINT30;
    C1FIFOINT30 : longWord;
    C1FIFOINT30CLR : longWord;
    C1FIFOINT30SET : longWord;
    C1FIFOINT30INV : longWord;
    C1FIFOUA30 : longWord;
    C1FIFOUA30CLR : longWord;
    C1FIFOUA30SET : longWord;
    C1FIFOUA30INV : longWord;
    C1FIFOCI30bits : TCAN1_C1FIFOCI30;
    C1FIFOCI30 : longWord;
    C1FIFOCI30CLR : longWord;
    C1FIFOCI30SET : longWord;
    C1FIFOCI30INV : longWord;
    C1FIFOCON31bits : TCAN1_C1FIFOCON31;
    C1FIFOCON31 : longWord;
    C1FIFOCON31CLR : longWord;
    C1FIFOCON31SET : longWord;
    C1FIFOCON31INV : longWord;
    C1FIFOINT31bits : TCAN1_C1FIFOINT31;
    C1FIFOINT31 : longWord;
    C1FIFOINT31CLR : longWord;
    C1FIFOINT31SET : longWord;
    C1FIFOINT31INV : longWord;
    C1FIFOUA31 : longWord;
    C1FIFOUA31CLR : longWord;
    C1FIFOUA31SET : longWord;
    C1FIFOUA31INV : longWord;
    C1FIFOCI31bits : TCAN1_C1FIFOCI31;
    C1FIFOCI31 : longWord;
    C1FIFOCI31CLR : longWord;
    C1FIFOCI31SET : longWord;
    C1FIFOCI31INV : longWord;
  end;
  TDEVCFG_DEVCFG3 = record
  private
    function  getFCANIO : TBits_1; assembler; nostackframe; inline;
    function  getFSRSSEL : TBits_3; assembler; nostackframe; inline;
    function  getFUSBIDIO : TBits_1; assembler; nostackframe; inline;
    function  getFVBUSONIO : TBits_1; assembler; nostackframe; inline;
    function  getUSERID : TBits_16; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setFCANIO(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setFSRSSEL(thebits : TBits_3); assembler; nostackframe; inline;
    procedure setFUSBIDIO(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setFVBUSONIO(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setUSERID(thebits : TBits_16); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearFCANIO;
    procedure clearFUSBIDIO;
    procedure clearFVBUSONIO;
    procedure setFCANIO;
    procedure setFUSBIDIO;
    procedure setFVBUSONIO;
    property FCANIO : TBits_1 read getFCANIO write setFCANIO;
    property FSRSSEL : TBits_3 read getFSRSSEL write setFSRSSEL;
    property FUSBIDIO : TBits_1 read getFUSBIDIO write setFUSBIDIO;
    property FVBUSONIO : TBits_1 read getFVBUSONIO write setFVBUSONIO;
    property USERID : TBits_16 read getUSERID write setUSERID;
    property w : TBits_32 read getw write setw;
  end;
  TDEVCFG_DEVCFG2 = record
  private
    function  getFPLLIDIV : TBits_3; assembler; nostackframe; inline;
    function  getFPLLMUL : TBits_3; assembler; nostackframe; inline;
    function  getFPLLODIV : TBits_3; assembler; nostackframe; inline;
    function  getUPLLEN : TBits_1; assembler; nostackframe; inline;
    function  getUPLLIDIV : TBits_3; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setFPLLIDIV(thebits : TBits_3); assembler; nostackframe; inline;
    procedure setFPLLMUL(thebits : TBits_3); assembler; nostackframe; inline;
    procedure setFPLLODIV(thebits : TBits_3); assembler; nostackframe; inline;
    procedure setUPLLEN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setUPLLIDIV(thebits : TBits_3); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearUPLLEN;
    procedure setUPLLEN;
    property FPLLIDIV : TBits_3 read getFPLLIDIV write setFPLLIDIV;
    property FPLLMUL : TBits_3 read getFPLLMUL write setFPLLMUL;
    property FPLLODIV : TBits_3 read getFPLLODIV write setFPLLODIV;
    property UPLLEN : TBits_1 read getUPLLEN write setUPLLEN;
    property UPLLIDIV : TBits_3 read getUPLLIDIV write setUPLLIDIV;
    property w : TBits_32 read getw write setw;
  end;
  TDEVCFG_DEVCFG1 = record
  private
    function  getFCKSM : TBits_2; assembler; nostackframe; inline;
    function  getFNOSC : TBits_3; assembler; nostackframe; inline;
    function  getFPBDIV : TBits_2; assembler; nostackframe; inline;
    function  getFSOSCEN : TBits_1; assembler; nostackframe; inline;
    function  getFWDTEN : TBits_1; assembler; nostackframe; inline;
    function  getIESO : TBits_1; assembler; nostackframe; inline;
    function  getOSCIOFNC : TBits_1; assembler; nostackframe; inline;
    function  getPOSCMOD : TBits_2; assembler; nostackframe; inline;
    function  getWDTPS : TBits_5; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setFCKSM(thebits : TBits_2); assembler; nostackframe; inline;
    procedure setFNOSC(thebits : TBits_3); assembler; nostackframe; inline;
    procedure setFPBDIV(thebits : TBits_2); assembler; nostackframe; inline;
    procedure setFSOSCEN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setFWDTEN(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setIESO(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setOSCIOFNC(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setPOSCMOD(thebits : TBits_2); assembler; nostackframe; inline;
    procedure setWDTPS(thebits : TBits_5); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearFSOSCEN;
    procedure clearFWDTEN;
    procedure clearIESO;
    procedure clearOSCIOFNC;
    procedure setFSOSCEN;
    procedure setFWDTEN;
    procedure setIESO;
    procedure setOSCIOFNC;
    property FCKSM : TBits_2 read getFCKSM write setFCKSM;
    property FNOSC : TBits_3 read getFNOSC write setFNOSC;
    property FPBDIV : TBits_2 read getFPBDIV write setFPBDIV;
    property FSOSCEN : TBits_1 read getFSOSCEN write setFSOSCEN;
    property FWDTEN : TBits_1 read getFWDTEN write setFWDTEN;
    property IESO : TBits_1 read getIESO write setIESO;
    property OSCIOFNC : TBits_1 read getOSCIOFNC write setOSCIOFNC;
    property POSCMOD : TBits_2 read getPOSCMOD write setPOSCMOD;
    property WDTPS : TBits_5 read getWDTPS write setWDTPS;
    property w : TBits_32 read getw write setw;
  end;
  TDEVCFG_DEVCFG0 = record
  private
    function  getBWP : TBits_1; assembler; nostackframe; inline;
    function  getCP : TBits_1; assembler; nostackframe; inline;
    function  getDEBUG : TBits_2; assembler; nostackframe; inline;
    function  getFDEBUG : TBits_2; assembler; nostackframe; inline;
    function  getICESEL : TBits_1; assembler; nostackframe; inline;
    function  getPWP : TBits_8; assembler; nostackframe; inline;
    function  getw : TBits_32; assembler; nostackframe; inline;
    procedure setBWP(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setCP(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setDEBUG(thebits : TBits_2); assembler; nostackframe; inline;
    procedure setFDEBUG(thebits : TBits_2); assembler; nostackframe; inline;
    procedure setICESEL(thebits : TBits_1); assembler; nostackframe; inline;
    procedure setPWP(thebits : TBits_8); assembler; nostackframe; inline;
    procedure setw(thebits : TBits_32); assembler; nostackframe; inline;
  public
    procedure clearBWP;
    procedure clearCP;
    procedure clearICESEL;
    procedure setBWP;
    procedure setCP;
    procedure setICESEL;
    property BWP : TBits_1 read getBWP write setBWP;
    property CP : TBits_1 read getCP write setCP;
    property DEBUG : TBits_2 read getDEBUG write setDEBUG;
    property FDEBUG : TBits_2 read getFDEBUG write setFDEBUG;
    property ICESEL : TBits_1 read getICESEL write setICESEL;
    property PWP : TBits_8 read getPWP write setPWP;
    property w : TBits_32 read getw write setw;
  end;
const
  _CORE_TIMER_IRQ = 0;
  _CORE_SOFTWARE_0_IRQ = 1;
  _CORE_SOFTWARE_1_IRQ = 2;
  _EXTERNAL_0_IRQ = 3;
  _TIMER_1_IRQ = 4;
  _INPUT_CAPTURE_1_IRQ = 5;
  _OUTPUT_COMPARE_1_IRQ = 6;
  _EXTERNAL_1_IRQ = 7;
  _TIMER_2_IRQ = 8;
  _INPUT_CAPTURE_2_IRQ = 9;
  _OUTPUT_COMPARE_2_IRQ = 10;
  _EXTERNAL_2_IRQ = 11;
  _TIMER_3_IRQ = 12;
  _INPUT_CAPTURE_3_IRQ = 13;
  _OUTPUT_COMPARE_3_IRQ = 14;
  _EXTERNAL_3_IRQ = 15;
  _TIMER_4_IRQ = 16;
  _INPUT_CAPTURE_4_IRQ = 17;
  _OUTPUT_COMPARE_4_IRQ = 18;
  _EXTERNAL_4_IRQ = 19;
  _TIMER_5_IRQ = 20;
  _INPUT_CAPTURE_5_IRQ = 21;
  _OUTPUT_COMPARE_5_IRQ = 22;
  _SPI1_ERR_IRQ = 23;
  _SPI1_RX_IRQ = 24;
  _SPI1_TX_IRQ = 25;
  _I2C1A_ERR_IRQ = 26;
  _I2C3_BUS_IRQ = 26;
  _SPI1A_ERR_IRQ = 26;
  _SPI3_ERR_IRQ = 26;
  _UART1A_ERR_IRQ = 26;
  _UART1_ERR_IRQ = 26;
  _I2C1A_RX_IRQ = 27;
  _I2C3_SLAVE_IRQ = 27;
  _SPI1A_RX_IRQ = 27;
  _SPI3_RX_IRQ = 27;
  _UART1A_RX_IRQ = 27;
  _UART1_RX_IRQ = 27;
  _I2C1A_TX_IRQ = 28;
  _I2C3_MASTER_IRQ = 28;
  _SPI1A_TX_IRQ = 28;
  _SPI3_TX_IRQ = 28;
  _UART1A_TX_IRQ = 28;
  _UART1_TX_IRQ = 28;
  _I2C1_BUS_IRQ = 29;
  _I2C1_SLAVE_IRQ = 30;
  _I2C1_MASTER_IRQ = 31;
  _CHANGE_NOTICE_IRQ = 32;
  _ADC_IRQ = 33;
  _PMP_IRQ = 34;
  _COMPARATOR_1_IRQ = 35;
  _COMPARATOR_2_IRQ = 36;
  _I2C2A_ERR_IRQ = 37;
  _I2C4_BUS_IRQ = 37;
  _SPI2_ERR_IRQ = 37;
  _SPI2A_ERR_IRQ = 37;
  _UART2A_ERR_IRQ = 37;
  _UART3_ERR_IRQ = 37;
  _I2C2A_RX_IRQ = 38;
  _I2C4_SLAVE_IRQ = 38;
  _SPI2_RX_IRQ = 38;
  _SPI2A_RX_IRQ = 38;
  _UART2A_RX_IRQ = 38;
  _UART3_RX_IRQ = 38;
  _I2C2A_TX_IRQ = 39;
  _I2C4_MASTER_IRQ = 39;
  _SPI2A_TX_IRQ = 39;
  _SPI2_TX_IRQ = 39;
  _UART2A_TX_IRQ = 39;
  _UART3_TX_IRQ = 39;
  _I2C3A_ERR_IRQ = 40;
  _I2C5_BUS_IRQ = 40;
  _SPI3A_ERR_IRQ = 40;
  _SPI4_ERR_IRQ = 40;
  _UART2_ERR_IRQ = 40;
  _UART3A_ERR_IRQ = 40;
  _I2C3A_RX_IRQ = 41;
  _I2C5_SLAVE_IRQ = 41;
  _SPI3A_RX_IRQ = 41;
  _SPI4_RX_IRQ = 41;
  _UART2_RX_IRQ = 41;
  _UART3A_RX_IRQ = 41;
  _I2C3A_TX_IRQ = 42;
  _I2C5_MASTER_IRQ = 42;
  _SPI3A_TX_IRQ = 42;
  _SPI4_TX_IRQ = 42;
  _UART2_TX_IRQ = 42;
  _UART3A_TX_IRQ = 42;
  _I2C2_BUS_IRQ = 43;
  _I2C2_SLAVE_IRQ = 44;
  _I2C2_MASTER_IRQ = 45;
  _FAIL_SAFE_MONITOR_IRQ = 46;
  _RTCC_IRQ = 47;
  _DMA0_IRQ = 48;
  _DMA1_IRQ = 49;
  _DMA2_IRQ = 50;
  _DMA3_IRQ = 51;
  _DMA4_IRQ = 52;
  _DMA5_IRQ = 53;
  _DMA6_IRQ = 54;
  _DMA7_IRQ = 55;
  _FLASH_CONTROL_IRQ = 56;
  _USB_IRQ = 57;
  _CAN1_IRQ = 58;
  _INPUT_CAPTURE_ERROR_1_IRQ = 61;
  _INPUT_CAPTURE_ERROR_2_IRQ = 62;
  _INPUT_CAPTURE_ERROR_3_IRQ = 63;
  _INPUT_CAPTURE_ERROR_4_IRQ = 64;
  _INPUT_CAPTURE_ERROR_5_IRQ = 65;
  _PMP_ERROR_IRQ = 66;
  _UART1B_ERR_IRQ = 67;
  _UART4_ERR_IRQ = 67;
  _UART1B_RX_IRQ = 68;
  _UART4_RX_IRQ = 68;
  _UART1B_TX_IRQ = 69;
  _UART4_TX_IRQ = 69;
  _UART2B_ERR_IRQ = 70;
  _UART6_ERR_IRQ = 70;
  _UART2B_RX_IRQ = 71;
  _UART6_RX_IRQ = 71;
  _UART2B_TX_IRQ = 72;
  _UART6_TX_IRQ = 72;
  _UART3B_ERR_IRQ = 73;
  _UART5_ERR_IRQ = 73;
  _UART3B_RX_IRQ = 74;
  _UART5_RX_IRQ = 74;
  _UART3B_TX_IRQ = 75;
  _UART5_TX_IRQ = 75;
const
  ADC10_BASE_ADDRESS = $BF809000;
var
  ADC10 : TADC10Registers absolute ADC10_BASE_ADDRESS;
const
  BMX_BASE_ADDRESS = $BF882000;
var
  BMX : TBMXRegisters absolute BMX_BASE_ADDRESS;
const
  CAN1_BASE_ADDRESS = $BF88B000;
var
  CAN1 : TCAN1Registers absolute CAN1_BASE_ADDRESS;
const
  CFG_BASE_ADDRESS = $BF80F200;
var
  CFG : TCFGRegisters absolute CFG_BASE_ADDRESS;
const
  CMP_BASE_ADDRESS = $BF80A000;
var
  CMP : TCMPRegisters absolute CMP_BASE_ADDRESS;
const
  CVR_BASE_ADDRESS = $BF809800;
var
  CVR : TCVRRegisters absolute CVR_BASE_ADDRESS;
const
  DMAC_BASE_ADDRESS = $BF883000;
var
  DMAC : TDMACRegisters absolute DMAC_BASE_ADDRESS;
const
  DMAC0_BASE_ADDRESS = $BF883060;
var
  DMAC0 : TDMAC0Registers absolute DMAC0_BASE_ADDRESS;
const
  DMAC1_BASE_ADDRESS = $BF883120;
var
  DMAC1 : TDMAC1Registers absolute DMAC1_BASE_ADDRESS;
const
  DMAC2_BASE_ADDRESS = $BF8831E0;
var
  DMAC2 : TDMAC2Registers absolute DMAC2_BASE_ADDRESS;
const
  DMAC3_BASE_ADDRESS = $BF8832A0;
var
  DMAC3 : TDMAC3Registers absolute DMAC3_BASE_ADDRESS;
const
  DMAC4_BASE_ADDRESS = $BF883360;
var
  DMAC4 : TDMAC4Registers absolute DMAC4_BASE_ADDRESS;
const
  DMAC5_BASE_ADDRESS = $BF883420;
var
  DMAC5 : TDMAC5Registers absolute DMAC5_BASE_ADDRESS;
const
  DMAC6_BASE_ADDRESS = $BF8834E0;
var
  DMAC6 : TDMAC6Registers absolute DMAC6_BASE_ADDRESS;
const
  DMAC7_BASE_ADDRESS = $BF8835A0;
var
  DMAC7 : TDMAC7Registers absolute DMAC7_BASE_ADDRESS;
const
  I2C1_BASE_ADDRESS = $BF805300;
var
  I2C1 : TI2C1Registers absolute I2C1_BASE_ADDRESS;
const
  I2C2_BASE_ADDRESS = $BF805400;
var
  I2C2 : TI2C2Registers absolute I2C2_BASE_ADDRESS;
const
  I2C3_BASE_ADDRESS = $BF805000;
var
  I2C3 : TI2C3Registers absolute I2C3_BASE_ADDRESS;
const
  I2C4_BASE_ADDRESS = $BF805100;
var
  I2C4 : TI2C4Registers absolute I2C4_BASE_ADDRESS;
const
  I2C5_BASE_ADDRESS = $BF805200;
var
  I2C5 : TI2C5Registers absolute I2C5_BASE_ADDRESS;
const
  ICAP1_BASE_ADDRESS = $BF802000;
var
  ICAP1 : TICAP1Registers absolute ICAP1_BASE_ADDRESS;
const
  ICAP2_BASE_ADDRESS = $BF802200;
var
  ICAP2 : TICAP2Registers absolute ICAP2_BASE_ADDRESS;
const
  ICAP3_BASE_ADDRESS = $BF802400;
var
  ICAP3 : TICAP3Registers absolute ICAP3_BASE_ADDRESS;
const
  ICAP4_BASE_ADDRESS = $BF802600;
var
  ICAP4 : TICAP4Registers absolute ICAP4_BASE_ADDRESS;
const
  ICAP5_BASE_ADDRESS = $BF802800;
var
  ICAP5 : TICAP5Registers absolute ICAP5_BASE_ADDRESS;
const
  INT_BASE_ADDRESS = $BF881000;
var
  INT : TINTRegisters absolute INT_BASE_ADDRESS;
const
  NVM_BASE_ADDRESS = $BF80F400;
var
  NVM : TNVMRegisters absolute NVM_BASE_ADDRESS;
const
  OCMP1_BASE_ADDRESS = $BF803000;
var
  OCMP1 : TOCMP1Registers absolute OCMP1_BASE_ADDRESS;
const
  OCMP2_BASE_ADDRESS = $BF803200;
var
  OCMP2 : TOCMP2Registers absolute OCMP2_BASE_ADDRESS;
const
  OCMP3_BASE_ADDRESS = $BF803400;
var
  OCMP3 : TOCMP3Registers absolute OCMP3_BASE_ADDRESS;
const
  OCMP4_BASE_ADDRESS = $BF803600;
var
  OCMP4 : TOCMP4Registers absolute OCMP4_BASE_ADDRESS;
const
  OCMP5_BASE_ADDRESS = $BF803800;
var
  OCMP5 : TOCMP5Registers absolute OCMP5_BASE_ADDRESS;
const
  OSC_BASE_ADDRESS = $BF80F000;
var
  OSC : TOSCRegisters absolute OSC_BASE_ADDRESS;
const
  PCACHE_BASE_ADDRESS = $BF884000;
var
  PCACHE : TPCACHERegisters absolute PCACHE_BASE_ADDRESS;
const
  PMP_BASE_ADDRESS = $BF807000;
var
  PMP : TPMPRegisters absolute PMP_BASE_ADDRESS;
const
  PORTA_BASE_ADDRESS = $BF886000;
var
  PORTA : TPORTARegisters absolute PORTA_BASE_ADDRESS;
const
  PORTB_BASE_ADDRESS = $BF886040;
var
  PORTB : TPORTBRegisters absolute PORTB_BASE_ADDRESS;
const
  PORTC_BASE_ADDRESS = $BF886080;
var
  PORTC : TPORTCRegisters absolute PORTC_BASE_ADDRESS;
const
  PORTD_BASE_ADDRESS = $BF8860C0;
var
  PORTD : TPORTDRegisters absolute PORTD_BASE_ADDRESS;
const
  PORTE_BASE_ADDRESS = $BF886100;
var
  PORTE : TPORTERegisters absolute PORTE_BASE_ADDRESS;
const
  PORTF_BASE_ADDRESS = $BF886140;
var
  PORTF : TPORTFRegisters absolute PORTF_BASE_ADDRESS;
const
  PORTG_BASE_ADDRESS = $BF886180;
var
  PORTG : TPORTGRegisters absolute PORTG_BASE_ADDRESS;
const
  RCON_BASE_ADDRESS = $BF80F600;
var
  RCON : TRCONRegisters absolute RCON_BASE_ADDRESS;
const
  RTCC_BASE_ADDRESS = $BF800200;
var
  RTCC : TRTCCRegisters absolute RTCC_BASE_ADDRESS;
const
  SPI1_BASE_ADDRESS = $BF805E00;
var
  SPI1 : TSPI1Registers absolute SPI1_BASE_ADDRESS;
const
  SPI2A_BASE_ADDRESS = $BF805A00;
var
  SPI2A : TSPI2ARegisters absolute SPI2A_BASE_ADDRESS;
const
  SPI3_BASE_ADDRESS = $BF805800;
var
  SPI3 : TSPI3Registers absolute SPI3_BASE_ADDRESS;
const
  SPI3A_BASE_ADDRESS = $BF805C00;
var
  SPI3A : TSPI3ARegisters absolute SPI3A_BASE_ADDRESS;
const
  TMR1_BASE_ADDRESS = $BF800600;
var
  TMR1 : TTMR1Registers absolute TMR1_BASE_ADDRESS;
const
  TMR2_BASE_ADDRESS = $BF800800;
var
  TMR2 : TTMR2Registers absolute TMR2_BASE_ADDRESS;
const
  TMR3_BASE_ADDRESS = $BF800A00;
var
  TMR3 : TTMR3Registers absolute TMR3_BASE_ADDRESS;
const
  TMR4_BASE_ADDRESS = $BF800C00;
var
  TMR4 : TTMR4Registers absolute TMR4_BASE_ADDRESS;
const
  TMR5_BASE_ADDRESS = $BF800E00;
var
  TMR5 : TTMR5Registers absolute TMR5_BASE_ADDRESS;
const
  UART1A_BASE_ADDRESS = $BF806000;
var
  UART1A : TUART1ARegisters absolute UART1A_BASE_ADDRESS;
const
  UART1B_BASE_ADDRESS = $BF806200;
var
  UART1B : TUART1BRegisters absolute UART1B_BASE_ADDRESS;
const
  UART2A_BASE_ADDRESS = $BF806400;
var
  UART2A : TUART2ARegisters absolute UART2A_BASE_ADDRESS;
const
  UART2B_BASE_ADDRESS = $BF806600;
var
  UART2B : TUART2BRegisters absolute UART2B_BASE_ADDRESS;
const
  UART3A_BASE_ADDRESS = $BF806800;
var
  UART3A : TUART3ARegisters absolute UART3A_BASE_ADDRESS;
const
  UART5_BASE_ADDRESS = $BF806A00;
var
  UART5 : TUART5Registers absolute UART5_BASE_ADDRESS;
const
  USB_BASE_ADDRESS = $BF885040;
var
  USB : TUSBRegisters absolute USB_BASE_ADDRESS;
const
  WDT_BASE_ADDRESS = $BF800000;
var
  WDT : TWDTRegisters absolute WDT_BASE_ADDRESS;
const
  _APPI_BASE_ADDRESS = $BF880190;
var
  _APPI : T_APPIRegisters absolute _APPI_BASE_ADDRESS;
const
  _APPO_BASE_ADDRESS = $BF880180;
var
  _APPO : T_APPORegisters absolute _APPO_BASE_ADDRESS;
const
  _DDPSTAT_BASE_ADDRESS = $BF880140;
var
  _DDPSTAT : T_DDPSTATRegisters absolute _DDPSTAT_BASE_ADDRESS;
const
  _STRO_BASE_ADDRESS = $BF880170;
var
  _STRO : T_STRORegisters absolute _STRO_BASE_ADDRESS;
implementation
procedure TWDT_WDTCON.setWDTCLR; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,8($a0)
end;
procedure TWDT_WDTCON.clearWDTCLR; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,4($a0)
end;
procedure TWDT_WDTCON.setWDTCLR(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,1
  sw      $v1,($a0)
end;
function  TWDT_WDTCON.getWDTCLR : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,1
end;
procedure TWDT_WDTCON.setSWDTPS(thebits : TBits_5); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,2,5
  sw      $v1,($a0)
end;
function  TWDT_WDTCON.getSWDTPS : TBits_5;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,2,5
end;
procedure TWDT_WDTCON.setON; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,8($a0)
end;
procedure TWDT_WDTCON.clearON; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,4($a0)
end;
procedure TWDT_WDTCON.setON(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,15,1
  sw      $v1,($a0)
end;
function  TWDT_WDTCON.getON : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,15,1
end;
procedure TWDT_WDTCON.setSWDTPS0; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,8($a0)
end;
procedure TWDT_WDTCON.clearSWDTPS0; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,4($a0)
end;
procedure TWDT_WDTCON.setSWDTPS0(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,2,1
  sw      $v1,($a0)
end;
function  TWDT_WDTCON.getSWDTPS0 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,2,1
end;
procedure TWDT_WDTCON.setSWDTPS1; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,8($a0)
end;
procedure TWDT_WDTCON.clearSWDTPS1; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,4($a0)
end;
procedure TWDT_WDTCON.setSWDTPS1(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,3,1
  sw      $v1,($a0)
end;
function  TWDT_WDTCON.getSWDTPS1 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,3,1
end;
procedure TWDT_WDTCON.setSWDTPS2; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,8($a0)
end;
procedure TWDT_WDTCON.clearSWDTPS2; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,4($a0)
end;
procedure TWDT_WDTCON.setSWDTPS2(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,4,1
  sw      $v1,($a0)
end;
function  TWDT_WDTCON.getSWDTPS2 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,4,1
end;
procedure TWDT_WDTCON.setSWDTPS3; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,8($a0)
end;
procedure TWDT_WDTCON.clearSWDTPS3; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,4($a0)
end;
procedure TWDT_WDTCON.setSWDTPS3(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,5,1
  sw      $v1,($a0)
end;
function  TWDT_WDTCON.getSWDTPS3 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,5,1
end;
procedure TWDT_WDTCON.setSWDTPS4; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,8($a0)
end;
procedure TWDT_WDTCON.clearSWDTPS4; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,4($a0)
end;
procedure TWDT_WDTCON.setSWDTPS4(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,6,1
  sw      $v1,($a0)
end;
function  TWDT_WDTCON.getSWDTPS4 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,6,1
end;
procedure TWDT_WDTCON.setWDTPSTA(thebits : TBits_5); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,2,5
  sw      $v1,($a0)
end;
function  TWDT_WDTCON.getWDTPSTA : TBits_5;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,2,5
end;
procedure TWDT_WDTCON.setWDTPS(thebits : TBits_5); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,2,5
  sw      $v1,($a0)
end;
function  TWDT_WDTCON.getWDTPS : TBits_5;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,2,5
end;
procedure TWDT_WDTCON.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TWDT_WDTCON.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TRTCC_RTCCON.setRTCOE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,8($a0)
end;
procedure TRTCC_RTCCON.clearRTCOE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,4($a0)
end;
procedure TRTCC_RTCCON.setRTCOE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,1
  sw      $v1,($a0)
end;
function  TRTCC_RTCCON.getRTCOE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,1
end;
procedure TRTCC_RTCCON.setHALFSEC; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,8($a0)
end;
procedure TRTCC_RTCCON.clearHALFSEC; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,4($a0)
end;
procedure TRTCC_RTCCON.setHALFSEC(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,1,1
  sw      $v1,($a0)
end;
function  TRTCC_RTCCON.getHALFSEC : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,1,1
end;
procedure TRTCC_RTCCON.setRTCSYNC; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,8($a0)
end;
procedure TRTCC_RTCCON.clearRTCSYNC; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,4($a0)
end;
procedure TRTCC_RTCCON.setRTCSYNC(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,2,1
  sw      $v1,($a0)
end;
function  TRTCC_RTCCON.getRTCSYNC : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,2,1
end;
procedure TRTCC_RTCCON.setRTCWREN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,8($a0)
end;
procedure TRTCC_RTCCON.clearRTCWREN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,4($a0)
end;
procedure TRTCC_RTCCON.setRTCWREN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,3,1
  sw      $v1,($a0)
end;
function  TRTCC_RTCCON.getRTCWREN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,3,1
end;
procedure TRTCC_RTCCON.setRTCCLKON; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,8($a0)
end;
procedure TRTCC_RTCCON.clearRTCCLKON; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,4($a0)
end;
procedure TRTCC_RTCCON.setRTCCLKON(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,6,1
  sw      $v1,($a0)
end;
function  TRTCC_RTCCON.getRTCCLKON : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,6,1
end;
procedure TRTCC_RTCCON.setRTSECSEL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,8($a0)
end;
procedure TRTCC_RTCCON.clearRTSECSEL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,4($a0)
end;
procedure TRTCC_RTCCON.setRTSECSEL(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,7,1
  sw      $v1,($a0)
end;
function  TRTCC_RTCCON.getRTSECSEL : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,7,1
end;
procedure TRTCC_RTCCON.setSIDL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,8($a0)
end;
procedure TRTCC_RTCCON.clearSIDL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,4($a0)
end;
procedure TRTCC_RTCCON.setSIDL(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,13,1
  sw      $v1,($a0)
end;
function  TRTCC_RTCCON.getSIDL : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,13,1
end;
procedure TRTCC_RTCCON.setON; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,8($a0)
end;
procedure TRTCC_RTCCON.clearON; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,4($a0)
end;
procedure TRTCC_RTCCON.setON(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,15,1
  sw      $v1,($a0)
end;
function  TRTCC_RTCCON.getON : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,15,1
end;
procedure TRTCC_RTCCON.setCAL(thebits : TBits_10); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  sll     $a1,$a1,16
  lui    $v0,64512
  ori    $v0,$v0,65535
  and   $v1,$v1,$v0
  or    $a1,$a1,$v0
  sw    $a1,($a0)
end;
function  TRTCC_RTCCON.getCAL : TBits_10;
asm
  lw      $v1,($a0)
  srl     $a1,$a1,16
  lui    $v0,1023
  and    $a1,$a1,$v0
end;
procedure TRTCC_RTCCON.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TRTCC_RTCCON.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TRTCC_RTCALRM.setARPT(thebits : TBits_8); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  sll     $a1,$a1,0
  lui    $v0,65535
  ori    $v0,$v0,65280
  and   $v1,$v1,$v0
  or    $a1,$a1,$v0
  sw    $a1,($a0)
end;
function  TRTCC_RTCALRM.getARPT : TBits_8;
asm
  lw      $v1,($a0)
  srl     $a1,$a1,0
  ori    $v0,$zero,255
  and    $a1,$a1,$v0
end;
procedure TRTCC_RTCALRM.setAMASK(thebits : TBits_4); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,8,4
  sw      $v1,($a0)
end;
function  TRTCC_RTCALRM.getAMASK : TBits_4;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,8,4
end;
procedure TRTCC_RTCALRM.setALRMSYNC; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4096
  sw $a1,8($a0)
end;
procedure TRTCC_RTCALRM.clearALRMSYNC; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4096
  sw $a1,4($a0)
end;
procedure TRTCC_RTCALRM.setALRMSYNC(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,12,1
  sw      $v1,($a0)
end;
function  TRTCC_RTCALRM.getALRMSYNC : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,12,1
end;
procedure TRTCC_RTCALRM.setPIV; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,8($a0)
end;
procedure TRTCC_RTCALRM.clearPIV; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,4($a0)
end;
procedure TRTCC_RTCALRM.setPIV(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,13,1
  sw      $v1,($a0)
end;
function  TRTCC_RTCALRM.getPIV : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,13,1
end;
procedure TRTCC_RTCALRM.setCHIME; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16384
  sw $a1,8($a0)
end;
procedure TRTCC_RTCALRM.clearCHIME; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16384
  sw $a1,4($a0)
end;
procedure TRTCC_RTCALRM.setCHIME(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,14,1
  sw      $v1,($a0)
end;
function  TRTCC_RTCALRM.getCHIME : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,14,1
end;
procedure TRTCC_RTCALRM.setALRMEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,8($a0)
end;
procedure TRTCC_RTCALRM.clearALRMEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,4($a0)
end;
procedure TRTCC_RTCALRM.setALRMEN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,15,1
  sw      $v1,($a0)
end;
function  TRTCC_RTCALRM.getALRMEN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,15,1
end;
procedure TRTCC_RTCALRM.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TRTCC_RTCALRM.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TRTCC_RTCTIME.setSEC01(thebits : TBits_4); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,8,4
  sw      $v1,($a0)
end;
function  TRTCC_RTCTIME.getSEC01 : TBits_4;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,8,4
end;
procedure TRTCC_RTCTIME.setSEC10(thebits : TBits_4); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,12,4
  sw      $v1,($a0)
end;
function  TRTCC_RTCTIME.getSEC10 : TBits_4;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,12,4
end;
procedure TRTCC_RTCTIME.setMIN01(thebits : TBits_4); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,16,4
  sw      $v1,($a0)
end;
function  TRTCC_RTCTIME.getMIN01 : TBits_4;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,16,4
end;
procedure TRTCC_RTCTIME.setMIN10(thebits : TBits_4); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,20,4
  sw      $v1,($a0)
end;
function  TRTCC_RTCTIME.getMIN10 : TBits_4;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,20,4
end;
procedure TRTCC_RTCTIME.setHR01(thebits : TBits_4); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,24,4
  sw      $v1,($a0)
end;
function  TRTCC_RTCTIME.getHR01 : TBits_4;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,24,4
end;
procedure TRTCC_RTCTIME.setHR10(thebits : TBits_4); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,28,4
  sw      $v1,($a0)
end;
function  TRTCC_RTCTIME.getHR10 : TBits_4;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,28,4
end;
procedure TRTCC_RTCTIME.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TRTCC_RTCTIME.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TRTCC_RTCDATE.setWDAY01(thebits : TBits_4); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,4
  sw      $v1,($a0)
end;
function  TRTCC_RTCDATE.getWDAY01 : TBits_4;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,4
end;
procedure TRTCC_RTCDATE.setDAY01(thebits : TBits_4); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,8,4
  sw      $v1,($a0)
end;
function  TRTCC_RTCDATE.getDAY01 : TBits_4;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,8,4
end;
procedure TRTCC_RTCDATE.setDAY10(thebits : TBits_4); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,12,4
  sw      $v1,($a0)
end;
function  TRTCC_RTCDATE.getDAY10 : TBits_4;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,12,4
end;
procedure TRTCC_RTCDATE.setMONTH01(thebits : TBits_4); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,16,4
  sw      $v1,($a0)
end;
function  TRTCC_RTCDATE.getMONTH01 : TBits_4;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,16,4
end;
procedure TRTCC_RTCDATE.setMONTH10(thebits : TBits_4); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,20,4
  sw      $v1,($a0)
end;
function  TRTCC_RTCDATE.getMONTH10 : TBits_4;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,20,4
end;
procedure TRTCC_RTCDATE.setYEAR01(thebits : TBits_4); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,24,4
  sw      $v1,($a0)
end;
function  TRTCC_RTCDATE.getYEAR01 : TBits_4;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,24,4
end;
procedure TRTCC_RTCDATE.setYEAR10(thebits : TBits_4); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,28,4
  sw      $v1,($a0)
end;
function  TRTCC_RTCDATE.getYEAR10 : TBits_4;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,28,4
end;
procedure TRTCC_RTCDATE.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TRTCC_RTCDATE.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TRTCC_ALRMTIME.setSEC01(thebits : TBits_4); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,8,4
  sw      $v1,($a0)
end;
function  TRTCC_ALRMTIME.getSEC01 : TBits_4;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,8,4
end;
procedure TRTCC_ALRMTIME.setSEC10(thebits : TBits_4); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,12,4
  sw      $v1,($a0)
end;
function  TRTCC_ALRMTIME.getSEC10 : TBits_4;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,12,4
end;
procedure TRTCC_ALRMTIME.setMIN01(thebits : TBits_4); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,16,4
  sw      $v1,($a0)
end;
function  TRTCC_ALRMTIME.getMIN01 : TBits_4;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,16,4
end;
procedure TRTCC_ALRMTIME.setMIN10(thebits : TBits_4); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,20,4
  sw      $v1,($a0)
end;
function  TRTCC_ALRMTIME.getMIN10 : TBits_4;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,20,4
end;
procedure TRTCC_ALRMTIME.setHR01(thebits : TBits_4); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,24,4
  sw      $v1,($a0)
end;
function  TRTCC_ALRMTIME.getHR01 : TBits_4;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,24,4
end;
procedure TRTCC_ALRMTIME.setHR10(thebits : TBits_4); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,28,4
  sw      $v1,($a0)
end;
function  TRTCC_ALRMTIME.getHR10 : TBits_4;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,28,4
end;
procedure TRTCC_ALRMTIME.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TRTCC_ALRMTIME.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TRTCC_ALRMDATE.setWDAY01(thebits : TBits_4); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,4
  sw      $v1,($a0)
end;
function  TRTCC_ALRMDATE.getWDAY01 : TBits_4;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,4
end;
procedure TRTCC_ALRMDATE.setDAY01(thebits : TBits_4); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,8,4
  sw      $v1,($a0)
end;
function  TRTCC_ALRMDATE.getDAY01 : TBits_4;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,8,4
end;
procedure TRTCC_ALRMDATE.setDAY10(thebits : TBits_4); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,12,4
  sw      $v1,($a0)
end;
function  TRTCC_ALRMDATE.getDAY10 : TBits_4;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,12,4
end;
procedure TRTCC_ALRMDATE.setMONTH01(thebits : TBits_4); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,16,4
  sw      $v1,($a0)
end;
function  TRTCC_ALRMDATE.getMONTH01 : TBits_4;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,16,4
end;
procedure TRTCC_ALRMDATE.setMONTH10(thebits : TBits_4); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,20,4
  sw      $v1,($a0)
end;
function  TRTCC_ALRMDATE.getMONTH10 : TBits_4;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,20,4
end;
procedure TRTCC_ALRMDATE.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TRTCC_ALRMDATE.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TTMR1_T1CON.setTCS; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,8($a0)
end;
procedure TTMR1_T1CON.clearTCS; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,4($a0)
end;
procedure TTMR1_T1CON.setTCS(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,1,1
  sw      $v1,($a0)
end;
function  TTMR1_T1CON.getTCS : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,1,1
end;
procedure TTMR1_T1CON.setTSYNC; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,8($a0)
end;
procedure TTMR1_T1CON.clearTSYNC; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,4($a0)
end;
procedure TTMR1_T1CON.setTSYNC(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,2,1
  sw      $v1,($a0)
end;
function  TTMR1_T1CON.getTSYNC : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,2,1
end;
procedure TTMR1_T1CON.setTCKPS(thebits : TBits_2); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,4,2
  sw      $v1,($a0)
end;
function  TTMR1_T1CON.getTCKPS : TBits_2;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,4,2
end;
procedure TTMR1_T1CON.setTGATE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,8($a0)
end;
procedure TTMR1_T1CON.clearTGATE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,4($a0)
end;
procedure TTMR1_T1CON.setTGATE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,7,1
  sw      $v1,($a0)
end;
function  TTMR1_T1CON.getTGATE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,7,1
end;
procedure TTMR1_T1CON.setTWIP; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2048
  sw $a1,8($a0)
end;
procedure TTMR1_T1CON.clearTWIP; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2048
  sw $a1,4($a0)
end;
procedure TTMR1_T1CON.setTWIP(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,11,1
  sw      $v1,($a0)
end;
function  TTMR1_T1CON.getTWIP : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,11,1
end;
procedure TTMR1_T1CON.setTWDIS; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4096
  sw $a1,8($a0)
end;
procedure TTMR1_T1CON.clearTWDIS; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4096
  sw $a1,4($a0)
end;
procedure TTMR1_T1CON.setTWDIS(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,12,1
  sw      $v1,($a0)
end;
function  TTMR1_T1CON.getTWDIS : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,12,1
end;
procedure TTMR1_T1CON.setSIDL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,8($a0)
end;
procedure TTMR1_T1CON.clearSIDL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,4($a0)
end;
procedure TTMR1_T1CON.setSIDL(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,13,1
  sw      $v1,($a0)
end;
function  TTMR1_T1CON.getSIDL : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,13,1
end;
procedure TTMR1_T1CON.setON; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,8($a0)
end;
procedure TTMR1_T1CON.clearON; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,4($a0)
end;
procedure TTMR1_T1CON.setON(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,15,1
  sw      $v1,($a0)
end;
function  TTMR1_T1CON.getON : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,15,1
end;
procedure TTMR1_T1CON.setTCKPS0; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,8($a0)
end;
procedure TTMR1_T1CON.clearTCKPS0; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,4($a0)
end;
procedure TTMR1_T1CON.setTCKPS0(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,4,1
  sw      $v1,($a0)
end;
function  TTMR1_T1CON.getTCKPS0 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,4,1
end;
procedure TTMR1_T1CON.setTCKPS1; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,8($a0)
end;
procedure TTMR1_T1CON.clearTCKPS1; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,4($a0)
end;
procedure TTMR1_T1CON.setTCKPS1(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,5,1
  sw      $v1,($a0)
end;
function  TTMR1_T1CON.getTCKPS1 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,5,1
end;
procedure TTMR1_T1CON.setTSIDL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,8($a0)
end;
procedure TTMR1_T1CON.clearTSIDL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,4($a0)
end;
procedure TTMR1_T1CON.setTSIDL(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,13,1
  sw      $v1,($a0)
end;
function  TTMR1_T1CON.getTSIDL : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,13,1
end;
procedure TTMR1_T1CON.setTON; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,8($a0)
end;
procedure TTMR1_T1CON.clearTON; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,4($a0)
end;
procedure TTMR1_T1CON.setTON(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,15,1
  sw      $v1,($a0)
end;
function  TTMR1_T1CON.getTON : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,15,1
end;
procedure TTMR1_T1CON.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TTMR1_T1CON.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TTMR2_T2CON.setTCS; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,8($a0)
end;
procedure TTMR2_T2CON.clearTCS; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,4($a0)
end;
procedure TTMR2_T2CON.setTCS(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,1,1
  sw      $v1,($a0)
end;
function  TTMR2_T2CON.getTCS : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,1,1
end;
procedure TTMR2_T2CON.setT32; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,8($a0)
end;
procedure TTMR2_T2CON.clearT32; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,4($a0)
end;
procedure TTMR2_T2CON.setT32(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,3,1
  sw      $v1,($a0)
end;
function  TTMR2_T2CON.getT32 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,3,1
end;
procedure TTMR2_T2CON.setTCKPS(thebits : TBits_3); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,4,3
  sw      $v1,($a0)
end;
function  TTMR2_T2CON.getTCKPS : TBits_3;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,4,3
end;
procedure TTMR2_T2CON.setTGATE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,8($a0)
end;
procedure TTMR2_T2CON.clearTGATE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,4($a0)
end;
procedure TTMR2_T2CON.setTGATE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,7,1
  sw      $v1,($a0)
end;
function  TTMR2_T2CON.getTGATE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,7,1
end;
procedure TTMR2_T2CON.setSIDL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,8($a0)
end;
procedure TTMR2_T2CON.clearSIDL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,4($a0)
end;
procedure TTMR2_T2CON.setSIDL(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,13,1
  sw      $v1,($a0)
end;
function  TTMR2_T2CON.getSIDL : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,13,1
end;
procedure TTMR2_T2CON.setON; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,8($a0)
end;
procedure TTMR2_T2CON.clearON; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,4($a0)
end;
procedure TTMR2_T2CON.setON(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,15,1
  sw      $v1,($a0)
end;
function  TTMR2_T2CON.getON : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,15,1
end;
procedure TTMR2_T2CON.setTCKPS0; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,8($a0)
end;
procedure TTMR2_T2CON.clearTCKPS0; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,4($a0)
end;
procedure TTMR2_T2CON.setTCKPS0(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,4,1
  sw      $v1,($a0)
end;
function  TTMR2_T2CON.getTCKPS0 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,4,1
end;
procedure TTMR2_T2CON.setTCKPS1; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,8($a0)
end;
procedure TTMR2_T2CON.clearTCKPS1; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,4($a0)
end;
procedure TTMR2_T2CON.setTCKPS1(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,5,1
  sw      $v1,($a0)
end;
function  TTMR2_T2CON.getTCKPS1 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,5,1
end;
procedure TTMR2_T2CON.setTCKPS2; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,8($a0)
end;
procedure TTMR2_T2CON.clearTCKPS2; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,4($a0)
end;
procedure TTMR2_T2CON.setTCKPS2(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,6,1
  sw      $v1,($a0)
end;
function  TTMR2_T2CON.getTCKPS2 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,6,1
end;
procedure TTMR2_T2CON.setTSIDL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,8($a0)
end;
procedure TTMR2_T2CON.clearTSIDL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,4($a0)
end;
procedure TTMR2_T2CON.setTSIDL(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,13,1
  sw      $v1,($a0)
end;
function  TTMR2_T2CON.getTSIDL : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,13,1
end;
procedure TTMR2_T2CON.setTON; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,8($a0)
end;
procedure TTMR2_T2CON.clearTON; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,4($a0)
end;
procedure TTMR2_T2CON.setTON(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,15,1
  sw      $v1,($a0)
end;
function  TTMR2_T2CON.getTON : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,15,1
end;
procedure TTMR2_T2CON.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TTMR2_T2CON.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TTMR3_T3CON.setTCS; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,8($a0)
end;
procedure TTMR3_T3CON.clearTCS; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,4($a0)
end;
procedure TTMR3_T3CON.setTCS(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,1,1
  sw      $v1,($a0)
end;
function  TTMR3_T3CON.getTCS : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,1,1
end;
procedure TTMR3_T3CON.setTCKPS(thebits : TBits_3); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,4,3
  sw      $v1,($a0)
end;
function  TTMR3_T3CON.getTCKPS : TBits_3;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,4,3
end;
procedure TTMR3_T3CON.setTGATE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,8($a0)
end;
procedure TTMR3_T3CON.clearTGATE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,4($a0)
end;
procedure TTMR3_T3CON.setTGATE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,7,1
  sw      $v1,($a0)
end;
function  TTMR3_T3CON.getTGATE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,7,1
end;
procedure TTMR3_T3CON.setSIDL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,8($a0)
end;
procedure TTMR3_T3CON.clearSIDL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,4($a0)
end;
procedure TTMR3_T3CON.setSIDL(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,13,1
  sw      $v1,($a0)
end;
function  TTMR3_T3CON.getSIDL : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,13,1
end;
procedure TTMR3_T3CON.setON; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,8($a0)
end;
procedure TTMR3_T3CON.clearON; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,4($a0)
end;
procedure TTMR3_T3CON.setON(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,15,1
  sw      $v1,($a0)
end;
function  TTMR3_T3CON.getON : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,15,1
end;
procedure TTMR3_T3CON.setTCKPS0; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,8($a0)
end;
procedure TTMR3_T3CON.clearTCKPS0; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,4($a0)
end;
procedure TTMR3_T3CON.setTCKPS0(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,4,1
  sw      $v1,($a0)
end;
function  TTMR3_T3CON.getTCKPS0 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,4,1
end;
procedure TTMR3_T3CON.setTCKPS1; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,8($a0)
end;
procedure TTMR3_T3CON.clearTCKPS1; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,4($a0)
end;
procedure TTMR3_T3CON.setTCKPS1(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,5,1
  sw      $v1,($a0)
end;
function  TTMR3_T3CON.getTCKPS1 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,5,1
end;
procedure TTMR3_T3CON.setTCKPS2; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,8($a0)
end;
procedure TTMR3_T3CON.clearTCKPS2; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,4($a0)
end;
procedure TTMR3_T3CON.setTCKPS2(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,6,1
  sw      $v1,($a0)
end;
function  TTMR3_T3CON.getTCKPS2 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,6,1
end;
procedure TTMR3_T3CON.setTSIDL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,8($a0)
end;
procedure TTMR3_T3CON.clearTSIDL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,4($a0)
end;
procedure TTMR3_T3CON.setTSIDL(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,13,1
  sw      $v1,($a0)
end;
function  TTMR3_T3CON.getTSIDL : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,13,1
end;
procedure TTMR3_T3CON.setTON; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,8($a0)
end;
procedure TTMR3_T3CON.clearTON; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,4($a0)
end;
procedure TTMR3_T3CON.setTON(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,15,1
  sw      $v1,($a0)
end;
function  TTMR3_T3CON.getTON : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,15,1
end;
procedure TTMR3_T3CON.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TTMR3_T3CON.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TTMR4_T4CON.setTCS; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,8($a0)
end;
procedure TTMR4_T4CON.clearTCS; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,4($a0)
end;
procedure TTMR4_T4CON.setTCS(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,1,1
  sw      $v1,($a0)
end;
function  TTMR4_T4CON.getTCS : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,1,1
end;
procedure TTMR4_T4CON.setT32; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,8($a0)
end;
procedure TTMR4_T4CON.clearT32; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,4($a0)
end;
procedure TTMR4_T4CON.setT32(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,3,1
  sw      $v1,($a0)
end;
function  TTMR4_T4CON.getT32 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,3,1
end;
procedure TTMR4_T4CON.setTCKPS(thebits : TBits_3); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,4,3
  sw      $v1,($a0)
end;
function  TTMR4_T4CON.getTCKPS : TBits_3;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,4,3
end;
procedure TTMR4_T4CON.setTGATE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,8($a0)
end;
procedure TTMR4_T4CON.clearTGATE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,4($a0)
end;
procedure TTMR4_T4CON.setTGATE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,7,1
  sw      $v1,($a0)
end;
function  TTMR4_T4CON.getTGATE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,7,1
end;
procedure TTMR4_T4CON.setSIDL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,8($a0)
end;
procedure TTMR4_T4CON.clearSIDL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,4($a0)
end;
procedure TTMR4_T4CON.setSIDL(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,13,1
  sw      $v1,($a0)
end;
function  TTMR4_T4CON.getSIDL : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,13,1
end;
procedure TTMR4_T4CON.setON; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,8($a0)
end;
procedure TTMR4_T4CON.clearON; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,4($a0)
end;
procedure TTMR4_T4CON.setON(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,15,1
  sw      $v1,($a0)
end;
function  TTMR4_T4CON.getON : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,15,1
end;
procedure TTMR4_T4CON.setTCKPS0; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,8($a0)
end;
procedure TTMR4_T4CON.clearTCKPS0; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,4($a0)
end;
procedure TTMR4_T4CON.setTCKPS0(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,4,1
  sw      $v1,($a0)
end;
function  TTMR4_T4CON.getTCKPS0 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,4,1
end;
procedure TTMR4_T4CON.setTCKPS1; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,8($a0)
end;
procedure TTMR4_T4CON.clearTCKPS1; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,4($a0)
end;
procedure TTMR4_T4CON.setTCKPS1(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,5,1
  sw      $v1,($a0)
end;
function  TTMR4_T4CON.getTCKPS1 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,5,1
end;
procedure TTMR4_T4CON.setTCKPS2; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,8($a0)
end;
procedure TTMR4_T4CON.clearTCKPS2; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,4($a0)
end;
procedure TTMR4_T4CON.setTCKPS2(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,6,1
  sw      $v1,($a0)
end;
function  TTMR4_T4CON.getTCKPS2 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,6,1
end;
procedure TTMR4_T4CON.setTSIDL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,8($a0)
end;
procedure TTMR4_T4CON.clearTSIDL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,4($a0)
end;
procedure TTMR4_T4CON.setTSIDL(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,13,1
  sw      $v1,($a0)
end;
function  TTMR4_T4CON.getTSIDL : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,13,1
end;
procedure TTMR4_T4CON.setTON; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,8($a0)
end;
procedure TTMR4_T4CON.clearTON; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,4($a0)
end;
procedure TTMR4_T4CON.setTON(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,15,1
  sw      $v1,($a0)
end;
function  TTMR4_T4CON.getTON : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,15,1
end;
procedure TTMR4_T4CON.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TTMR4_T4CON.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TTMR5_T5CON.setTCS; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,8($a0)
end;
procedure TTMR5_T5CON.clearTCS; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,4($a0)
end;
procedure TTMR5_T5CON.setTCS(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,1,1
  sw      $v1,($a0)
end;
function  TTMR5_T5CON.getTCS : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,1,1
end;
procedure TTMR5_T5CON.setTCKPS(thebits : TBits_3); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,4,3
  sw      $v1,($a0)
end;
function  TTMR5_T5CON.getTCKPS : TBits_3;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,4,3
end;
procedure TTMR5_T5CON.setTGATE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,8($a0)
end;
procedure TTMR5_T5CON.clearTGATE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,4($a0)
end;
procedure TTMR5_T5CON.setTGATE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,7,1
  sw      $v1,($a0)
end;
function  TTMR5_T5CON.getTGATE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,7,1
end;
procedure TTMR5_T5CON.setSIDL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,8($a0)
end;
procedure TTMR5_T5CON.clearSIDL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,4($a0)
end;
procedure TTMR5_T5CON.setSIDL(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,13,1
  sw      $v1,($a0)
end;
function  TTMR5_T5CON.getSIDL : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,13,1
end;
procedure TTMR5_T5CON.setON; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,8($a0)
end;
procedure TTMR5_T5CON.clearON; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,4($a0)
end;
procedure TTMR5_T5CON.setON(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,15,1
  sw      $v1,($a0)
end;
function  TTMR5_T5CON.getON : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,15,1
end;
procedure TTMR5_T5CON.setTCKPS0; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,8($a0)
end;
procedure TTMR5_T5CON.clearTCKPS0; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,4($a0)
end;
procedure TTMR5_T5CON.setTCKPS0(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,4,1
  sw      $v1,($a0)
end;
function  TTMR5_T5CON.getTCKPS0 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,4,1
end;
procedure TTMR5_T5CON.setTCKPS1; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,8($a0)
end;
procedure TTMR5_T5CON.clearTCKPS1; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,4($a0)
end;
procedure TTMR5_T5CON.setTCKPS1(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,5,1
  sw      $v1,($a0)
end;
function  TTMR5_T5CON.getTCKPS1 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,5,1
end;
procedure TTMR5_T5CON.setTCKPS2; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,8($a0)
end;
procedure TTMR5_T5CON.clearTCKPS2; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,4($a0)
end;
procedure TTMR5_T5CON.setTCKPS2(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,6,1
  sw      $v1,($a0)
end;
function  TTMR5_T5CON.getTCKPS2 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,6,1
end;
procedure TTMR5_T5CON.setTSIDL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,8($a0)
end;
procedure TTMR5_T5CON.clearTSIDL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,4($a0)
end;
procedure TTMR5_T5CON.setTSIDL(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,13,1
  sw      $v1,($a0)
end;
function  TTMR5_T5CON.getTSIDL : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,13,1
end;
procedure TTMR5_T5CON.setTON; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,8($a0)
end;
procedure TTMR5_T5CON.clearTON; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,4($a0)
end;
procedure TTMR5_T5CON.setTON(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,15,1
  sw      $v1,($a0)
end;
function  TTMR5_T5CON.getTON : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,15,1
end;
procedure TTMR5_T5CON.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TTMR5_T5CON.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TICAP1_IC1CON.setICM(thebits : TBits_3); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,3
  sw      $v1,($a0)
end;
function  TICAP1_IC1CON.getICM : TBits_3;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,3
end;
procedure TICAP1_IC1CON.setICBNE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,8($a0)
end;
procedure TICAP1_IC1CON.clearICBNE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,4($a0)
end;
procedure TICAP1_IC1CON.setICBNE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,3,1
  sw      $v1,($a0)
end;
function  TICAP1_IC1CON.getICBNE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,3,1
end;
procedure TICAP1_IC1CON.setICOV; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,8($a0)
end;
procedure TICAP1_IC1CON.clearICOV; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,4($a0)
end;
procedure TICAP1_IC1CON.setICOV(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,4,1
  sw      $v1,($a0)
end;
function  TICAP1_IC1CON.getICOV : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,4,1
end;
procedure TICAP1_IC1CON.setICI(thebits : TBits_2); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,5,2
  sw      $v1,($a0)
end;
function  TICAP1_IC1CON.getICI : TBits_2;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,5,2
end;
procedure TICAP1_IC1CON.setICTMR; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,8($a0)
end;
procedure TICAP1_IC1CON.clearICTMR; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,4($a0)
end;
procedure TICAP1_IC1CON.setICTMR(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,7,1
  sw      $v1,($a0)
end;
function  TICAP1_IC1CON.getICTMR : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,7,1
end;
procedure TICAP1_IC1CON.setC32; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,8($a0)
end;
procedure TICAP1_IC1CON.clearC32; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,4($a0)
end;
procedure TICAP1_IC1CON.setC32(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,8,1
  sw      $v1,($a0)
end;
function  TICAP1_IC1CON.getC32 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,8,1
end;
procedure TICAP1_IC1CON.setFEDGE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,512
  sw $a1,8($a0)
end;
procedure TICAP1_IC1CON.clearFEDGE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,512
  sw $a1,4($a0)
end;
procedure TICAP1_IC1CON.setFEDGE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,9,1
  sw      $v1,($a0)
end;
function  TICAP1_IC1CON.getFEDGE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,9,1
end;
procedure TICAP1_IC1CON.setSIDL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,8($a0)
end;
procedure TICAP1_IC1CON.clearSIDL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,4($a0)
end;
procedure TICAP1_IC1CON.setSIDL(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,13,1
  sw      $v1,($a0)
end;
function  TICAP1_IC1CON.getSIDL : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,13,1
end;
procedure TICAP1_IC1CON.setON; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,8($a0)
end;
procedure TICAP1_IC1CON.clearON; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,4($a0)
end;
procedure TICAP1_IC1CON.setON(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,15,1
  sw      $v1,($a0)
end;
function  TICAP1_IC1CON.getON : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,15,1
end;
procedure TICAP1_IC1CON.setICM0; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,8($a0)
end;
procedure TICAP1_IC1CON.clearICM0; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,4($a0)
end;
procedure TICAP1_IC1CON.setICM0(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,1
  sw      $v1,($a0)
end;
function  TICAP1_IC1CON.getICM0 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,1
end;
procedure TICAP1_IC1CON.setICM1; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,8($a0)
end;
procedure TICAP1_IC1CON.clearICM1; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,4($a0)
end;
procedure TICAP1_IC1CON.setICM1(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,1,1
  sw      $v1,($a0)
end;
function  TICAP1_IC1CON.getICM1 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,1,1
end;
procedure TICAP1_IC1CON.setICM2; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,8($a0)
end;
procedure TICAP1_IC1CON.clearICM2; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,4($a0)
end;
procedure TICAP1_IC1CON.setICM2(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,2,1
  sw      $v1,($a0)
end;
function  TICAP1_IC1CON.getICM2 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,2,1
end;
procedure TICAP1_IC1CON.setICI0; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,8($a0)
end;
procedure TICAP1_IC1CON.clearICI0; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,4($a0)
end;
procedure TICAP1_IC1CON.setICI0(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,5,1
  sw      $v1,($a0)
end;
function  TICAP1_IC1CON.getICI0 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,5,1
end;
procedure TICAP1_IC1CON.setICI1; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,8($a0)
end;
procedure TICAP1_IC1CON.clearICI1; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,4($a0)
end;
procedure TICAP1_IC1CON.setICI1(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,6,1
  sw      $v1,($a0)
end;
function  TICAP1_IC1CON.getICI1 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,6,1
end;
procedure TICAP1_IC1CON.setICSIDL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,8($a0)
end;
procedure TICAP1_IC1CON.clearICSIDL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,4($a0)
end;
procedure TICAP1_IC1CON.setICSIDL(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,13,1
  sw      $v1,($a0)
end;
function  TICAP1_IC1CON.getICSIDL : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,13,1
end;
procedure TICAP1_IC1CON.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TICAP1_IC1CON.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TICAP2_IC2CON.setICM(thebits : TBits_3); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,3
  sw      $v1,($a0)
end;
function  TICAP2_IC2CON.getICM : TBits_3;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,3
end;
procedure TICAP2_IC2CON.setICBNE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,8($a0)
end;
procedure TICAP2_IC2CON.clearICBNE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,4($a0)
end;
procedure TICAP2_IC2CON.setICBNE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,3,1
  sw      $v1,($a0)
end;
function  TICAP2_IC2CON.getICBNE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,3,1
end;
procedure TICAP2_IC2CON.setICOV; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,8($a0)
end;
procedure TICAP2_IC2CON.clearICOV; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,4($a0)
end;
procedure TICAP2_IC2CON.setICOV(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,4,1
  sw      $v1,($a0)
end;
function  TICAP2_IC2CON.getICOV : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,4,1
end;
procedure TICAP2_IC2CON.setICI(thebits : TBits_2); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,5,2
  sw      $v1,($a0)
end;
function  TICAP2_IC2CON.getICI : TBits_2;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,5,2
end;
procedure TICAP2_IC2CON.setICTMR; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,8($a0)
end;
procedure TICAP2_IC2CON.clearICTMR; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,4($a0)
end;
procedure TICAP2_IC2CON.setICTMR(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,7,1
  sw      $v1,($a0)
end;
function  TICAP2_IC2CON.getICTMR : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,7,1
end;
procedure TICAP2_IC2CON.setC32; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,8($a0)
end;
procedure TICAP2_IC2CON.clearC32; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,4($a0)
end;
procedure TICAP2_IC2CON.setC32(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,8,1
  sw      $v1,($a0)
end;
function  TICAP2_IC2CON.getC32 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,8,1
end;
procedure TICAP2_IC2CON.setFEDGE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,512
  sw $a1,8($a0)
end;
procedure TICAP2_IC2CON.clearFEDGE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,512
  sw $a1,4($a0)
end;
procedure TICAP2_IC2CON.setFEDGE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,9,1
  sw      $v1,($a0)
end;
function  TICAP2_IC2CON.getFEDGE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,9,1
end;
procedure TICAP2_IC2CON.setSIDL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,8($a0)
end;
procedure TICAP2_IC2CON.clearSIDL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,4($a0)
end;
procedure TICAP2_IC2CON.setSIDL(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,13,1
  sw      $v1,($a0)
end;
function  TICAP2_IC2CON.getSIDL : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,13,1
end;
procedure TICAP2_IC2CON.setON; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,8($a0)
end;
procedure TICAP2_IC2CON.clearON; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,4($a0)
end;
procedure TICAP2_IC2CON.setON(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,15,1
  sw      $v1,($a0)
end;
function  TICAP2_IC2CON.getON : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,15,1
end;
procedure TICAP2_IC2CON.setICM0; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,8($a0)
end;
procedure TICAP2_IC2CON.clearICM0; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,4($a0)
end;
procedure TICAP2_IC2CON.setICM0(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,1
  sw      $v1,($a0)
end;
function  TICAP2_IC2CON.getICM0 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,1
end;
procedure TICAP2_IC2CON.setICM1; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,8($a0)
end;
procedure TICAP2_IC2CON.clearICM1; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,4($a0)
end;
procedure TICAP2_IC2CON.setICM1(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,1,1
  sw      $v1,($a0)
end;
function  TICAP2_IC2CON.getICM1 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,1,1
end;
procedure TICAP2_IC2CON.setICM2; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,8($a0)
end;
procedure TICAP2_IC2CON.clearICM2; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,4($a0)
end;
procedure TICAP2_IC2CON.setICM2(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,2,1
  sw      $v1,($a0)
end;
function  TICAP2_IC2CON.getICM2 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,2,1
end;
procedure TICAP2_IC2CON.setICI0; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,8($a0)
end;
procedure TICAP2_IC2CON.clearICI0; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,4($a0)
end;
procedure TICAP2_IC2CON.setICI0(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,5,1
  sw      $v1,($a0)
end;
function  TICAP2_IC2CON.getICI0 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,5,1
end;
procedure TICAP2_IC2CON.setICI1; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,8($a0)
end;
procedure TICAP2_IC2CON.clearICI1; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,4($a0)
end;
procedure TICAP2_IC2CON.setICI1(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,6,1
  sw      $v1,($a0)
end;
function  TICAP2_IC2CON.getICI1 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,6,1
end;
procedure TICAP2_IC2CON.setICSIDL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,8($a0)
end;
procedure TICAP2_IC2CON.clearICSIDL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,4($a0)
end;
procedure TICAP2_IC2CON.setICSIDL(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,13,1
  sw      $v1,($a0)
end;
function  TICAP2_IC2CON.getICSIDL : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,13,1
end;
procedure TICAP2_IC2CON.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TICAP2_IC2CON.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TICAP3_IC3CON.setICM(thebits : TBits_3); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,3
  sw      $v1,($a0)
end;
function  TICAP3_IC3CON.getICM : TBits_3;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,3
end;
procedure TICAP3_IC3CON.setICBNE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,8($a0)
end;
procedure TICAP3_IC3CON.clearICBNE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,4($a0)
end;
procedure TICAP3_IC3CON.setICBNE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,3,1
  sw      $v1,($a0)
end;
function  TICAP3_IC3CON.getICBNE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,3,1
end;
procedure TICAP3_IC3CON.setICOV; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,8($a0)
end;
procedure TICAP3_IC3CON.clearICOV; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,4($a0)
end;
procedure TICAP3_IC3CON.setICOV(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,4,1
  sw      $v1,($a0)
end;
function  TICAP3_IC3CON.getICOV : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,4,1
end;
procedure TICAP3_IC3CON.setICI(thebits : TBits_2); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,5,2
  sw      $v1,($a0)
end;
function  TICAP3_IC3CON.getICI : TBits_2;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,5,2
end;
procedure TICAP3_IC3CON.setICTMR; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,8($a0)
end;
procedure TICAP3_IC3CON.clearICTMR; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,4($a0)
end;
procedure TICAP3_IC3CON.setICTMR(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,7,1
  sw      $v1,($a0)
end;
function  TICAP3_IC3CON.getICTMR : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,7,1
end;
procedure TICAP3_IC3CON.setC32; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,8($a0)
end;
procedure TICAP3_IC3CON.clearC32; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,4($a0)
end;
procedure TICAP3_IC3CON.setC32(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,8,1
  sw      $v1,($a0)
end;
function  TICAP3_IC3CON.getC32 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,8,1
end;
procedure TICAP3_IC3CON.setFEDGE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,512
  sw $a1,8($a0)
end;
procedure TICAP3_IC3CON.clearFEDGE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,512
  sw $a1,4($a0)
end;
procedure TICAP3_IC3CON.setFEDGE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,9,1
  sw      $v1,($a0)
end;
function  TICAP3_IC3CON.getFEDGE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,9,1
end;
procedure TICAP3_IC3CON.setSIDL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,8($a0)
end;
procedure TICAP3_IC3CON.clearSIDL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,4($a0)
end;
procedure TICAP3_IC3CON.setSIDL(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,13,1
  sw      $v1,($a0)
end;
function  TICAP3_IC3CON.getSIDL : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,13,1
end;
procedure TICAP3_IC3CON.setON; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,8($a0)
end;
procedure TICAP3_IC3CON.clearON; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,4($a0)
end;
procedure TICAP3_IC3CON.setON(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,15,1
  sw      $v1,($a0)
end;
function  TICAP3_IC3CON.getON : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,15,1
end;
procedure TICAP3_IC3CON.setICM0; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,8($a0)
end;
procedure TICAP3_IC3CON.clearICM0; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,4($a0)
end;
procedure TICAP3_IC3CON.setICM0(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,1
  sw      $v1,($a0)
end;
function  TICAP3_IC3CON.getICM0 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,1
end;
procedure TICAP3_IC3CON.setICM1; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,8($a0)
end;
procedure TICAP3_IC3CON.clearICM1; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,4($a0)
end;
procedure TICAP3_IC3CON.setICM1(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,1,1
  sw      $v1,($a0)
end;
function  TICAP3_IC3CON.getICM1 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,1,1
end;
procedure TICAP3_IC3CON.setICM2; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,8($a0)
end;
procedure TICAP3_IC3CON.clearICM2; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,4($a0)
end;
procedure TICAP3_IC3CON.setICM2(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,2,1
  sw      $v1,($a0)
end;
function  TICAP3_IC3CON.getICM2 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,2,1
end;
procedure TICAP3_IC3CON.setICI0; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,8($a0)
end;
procedure TICAP3_IC3CON.clearICI0; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,4($a0)
end;
procedure TICAP3_IC3CON.setICI0(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,5,1
  sw      $v1,($a0)
end;
function  TICAP3_IC3CON.getICI0 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,5,1
end;
procedure TICAP3_IC3CON.setICI1; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,8($a0)
end;
procedure TICAP3_IC3CON.clearICI1; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,4($a0)
end;
procedure TICAP3_IC3CON.setICI1(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,6,1
  sw      $v1,($a0)
end;
function  TICAP3_IC3CON.getICI1 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,6,1
end;
procedure TICAP3_IC3CON.setICSIDL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,8($a0)
end;
procedure TICAP3_IC3CON.clearICSIDL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,4($a0)
end;
procedure TICAP3_IC3CON.setICSIDL(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,13,1
  sw      $v1,($a0)
end;
function  TICAP3_IC3CON.getICSIDL : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,13,1
end;
procedure TICAP3_IC3CON.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TICAP3_IC3CON.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TICAP4_IC4CON.setICM(thebits : TBits_3); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,3
  sw      $v1,($a0)
end;
function  TICAP4_IC4CON.getICM : TBits_3;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,3
end;
procedure TICAP4_IC4CON.setICBNE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,8($a0)
end;
procedure TICAP4_IC4CON.clearICBNE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,4($a0)
end;
procedure TICAP4_IC4CON.setICBNE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,3,1
  sw      $v1,($a0)
end;
function  TICAP4_IC4CON.getICBNE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,3,1
end;
procedure TICAP4_IC4CON.setICOV; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,8($a0)
end;
procedure TICAP4_IC4CON.clearICOV; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,4($a0)
end;
procedure TICAP4_IC4CON.setICOV(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,4,1
  sw      $v1,($a0)
end;
function  TICAP4_IC4CON.getICOV : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,4,1
end;
procedure TICAP4_IC4CON.setICI(thebits : TBits_2); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,5,2
  sw      $v1,($a0)
end;
function  TICAP4_IC4CON.getICI : TBits_2;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,5,2
end;
procedure TICAP4_IC4CON.setICTMR; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,8($a0)
end;
procedure TICAP4_IC4CON.clearICTMR; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,4($a0)
end;
procedure TICAP4_IC4CON.setICTMR(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,7,1
  sw      $v1,($a0)
end;
function  TICAP4_IC4CON.getICTMR : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,7,1
end;
procedure TICAP4_IC4CON.setC32; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,8($a0)
end;
procedure TICAP4_IC4CON.clearC32; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,4($a0)
end;
procedure TICAP4_IC4CON.setC32(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,8,1
  sw      $v1,($a0)
end;
function  TICAP4_IC4CON.getC32 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,8,1
end;
procedure TICAP4_IC4CON.setFEDGE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,512
  sw $a1,8($a0)
end;
procedure TICAP4_IC4CON.clearFEDGE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,512
  sw $a1,4($a0)
end;
procedure TICAP4_IC4CON.setFEDGE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,9,1
  sw      $v1,($a0)
end;
function  TICAP4_IC4CON.getFEDGE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,9,1
end;
procedure TICAP4_IC4CON.setSIDL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,8($a0)
end;
procedure TICAP4_IC4CON.clearSIDL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,4($a0)
end;
procedure TICAP4_IC4CON.setSIDL(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,13,1
  sw      $v1,($a0)
end;
function  TICAP4_IC4CON.getSIDL : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,13,1
end;
procedure TICAP4_IC4CON.setON; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,8($a0)
end;
procedure TICAP4_IC4CON.clearON; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,4($a0)
end;
procedure TICAP4_IC4CON.setON(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,15,1
  sw      $v1,($a0)
end;
function  TICAP4_IC4CON.getON : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,15,1
end;
procedure TICAP4_IC4CON.setICM0; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,8($a0)
end;
procedure TICAP4_IC4CON.clearICM0; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,4($a0)
end;
procedure TICAP4_IC4CON.setICM0(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,1
  sw      $v1,($a0)
end;
function  TICAP4_IC4CON.getICM0 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,1
end;
procedure TICAP4_IC4CON.setICM1; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,8($a0)
end;
procedure TICAP4_IC4CON.clearICM1; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,4($a0)
end;
procedure TICAP4_IC4CON.setICM1(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,1,1
  sw      $v1,($a0)
end;
function  TICAP4_IC4CON.getICM1 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,1,1
end;
procedure TICAP4_IC4CON.setICM2; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,8($a0)
end;
procedure TICAP4_IC4CON.clearICM2; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,4($a0)
end;
procedure TICAP4_IC4CON.setICM2(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,2,1
  sw      $v1,($a0)
end;
function  TICAP4_IC4CON.getICM2 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,2,1
end;
procedure TICAP4_IC4CON.setICI0; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,8($a0)
end;
procedure TICAP4_IC4CON.clearICI0; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,4($a0)
end;
procedure TICAP4_IC4CON.setICI0(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,5,1
  sw      $v1,($a0)
end;
function  TICAP4_IC4CON.getICI0 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,5,1
end;
procedure TICAP4_IC4CON.setICI1; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,8($a0)
end;
procedure TICAP4_IC4CON.clearICI1; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,4($a0)
end;
procedure TICAP4_IC4CON.setICI1(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,6,1
  sw      $v1,($a0)
end;
function  TICAP4_IC4CON.getICI1 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,6,1
end;
procedure TICAP4_IC4CON.setICSIDL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,8($a0)
end;
procedure TICAP4_IC4CON.clearICSIDL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,4($a0)
end;
procedure TICAP4_IC4CON.setICSIDL(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,13,1
  sw      $v1,($a0)
end;
function  TICAP4_IC4CON.getICSIDL : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,13,1
end;
procedure TICAP4_IC4CON.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TICAP4_IC4CON.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TICAP5_IC5CON.setICM(thebits : TBits_3); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,3
  sw      $v1,($a0)
end;
function  TICAP5_IC5CON.getICM : TBits_3;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,3
end;
procedure TICAP5_IC5CON.setICBNE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,8($a0)
end;
procedure TICAP5_IC5CON.clearICBNE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,4($a0)
end;
procedure TICAP5_IC5CON.setICBNE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,3,1
  sw      $v1,($a0)
end;
function  TICAP5_IC5CON.getICBNE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,3,1
end;
procedure TICAP5_IC5CON.setICOV; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,8($a0)
end;
procedure TICAP5_IC5CON.clearICOV; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,4($a0)
end;
procedure TICAP5_IC5CON.setICOV(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,4,1
  sw      $v1,($a0)
end;
function  TICAP5_IC5CON.getICOV : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,4,1
end;
procedure TICAP5_IC5CON.setICI(thebits : TBits_2); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,5,2
  sw      $v1,($a0)
end;
function  TICAP5_IC5CON.getICI : TBits_2;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,5,2
end;
procedure TICAP5_IC5CON.setICTMR; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,8($a0)
end;
procedure TICAP5_IC5CON.clearICTMR; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,4($a0)
end;
procedure TICAP5_IC5CON.setICTMR(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,7,1
  sw      $v1,($a0)
end;
function  TICAP5_IC5CON.getICTMR : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,7,1
end;
procedure TICAP5_IC5CON.setC32; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,8($a0)
end;
procedure TICAP5_IC5CON.clearC32; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,4($a0)
end;
procedure TICAP5_IC5CON.setC32(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,8,1
  sw      $v1,($a0)
end;
function  TICAP5_IC5CON.getC32 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,8,1
end;
procedure TICAP5_IC5CON.setFEDGE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,512
  sw $a1,8($a0)
end;
procedure TICAP5_IC5CON.clearFEDGE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,512
  sw $a1,4($a0)
end;
procedure TICAP5_IC5CON.setFEDGE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,9,1
  sw      $v1,($a0)
end;
function  TICAP5_IC5CON.getFEDGE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,9,1
end;
procedure TICAP5_IC5CON.setSIDL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,8($a0)
end;
procedure TICAP5_IC5CON.clearSIDL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,4($a0)
end;
procedure TICAP5_IC5CON.setSIDL(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,13,1
  sw      $v1,($a0)
end;
function  TICAP5_IC5CON.getSIDL : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,13,1
end;
procedure TICAP5_IC5CON.setON; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,8($a0)
end;
procedure TICAP5_IC5CON.clearON; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,4($a0)
end;
procedure TICAP5_IC5CON.setON(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,15,1
  sw      $v1,($a0)
end;
function  TICAP5_IC5CON.getON : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,15,1
end;
procedure TICAP5_IC5CON.setICM0; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,8($a0)
end;
procedure TICAP5_IC5CON.clearICM0; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,4($a0)
end;
procedure TICAP5_IC5CON.setICM0(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,1
  sw      $v1,($a0)
end;
function  TICAP5_IC5CON.getICM0 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,1
end;
procedure TICAP5_IC5CON.setICM1; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,8($a0)
end;
procedure TICAP5_IC5CON.clearICM1; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,4($a0)
end;
procedure TICAP5_IC5CON.setICM1(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,1,1
  sw      $v1,($a0)
end;
function  TICAP5_IC5CON.getICM1 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,1,1
end;
procedure TICAP5_IC5CON.setICM2; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,8($a0)
end;
procedure TICAP5_IC5CON.clearICM2; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,4($a0)
end;
procedure TICAP5_IC5CON.setICM2(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,2,1
  sw      $v1,($a0)
end;
function  TICAP5_IC5CON.getICM2 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,2,1
end;
procedure TICAP5_IC5CON.setICI0; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,8($a0)
end;
procedure TICAP5_IC5CON.clearICI0; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,4($a0)
end;
procedure TICAP5_IC5CON.setICI0(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,5,1
  sw      $v1,($a0)
end;
function  TICAP5_IC5CON.getICI0 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,5,1
end;
procedure TICAP5_IC5CON.setICI1; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,8($a0)
end;
procedure TICAP5_IC5CON.clearICI1; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,4($a0)
end;
procedure TICAP5_IC5CON.setICI1(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,6,1
  sw      $v1,($a0)
end;
function  TICAP5_IC5CON.getICI1 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,6,1
end;
procedure TICAP5_IC5CON.setICSIDL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,8($a0)
end;
procedure TICAP5_IC5CON.clearICSIDL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,4($a0)
end;
procedure TICAP5_IC5CON.setICSIDL(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,13,1
  sw      $v1,($a0)
end;
function  TICAP5_IC5CON.getICSIDL : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,13,1
end;
procedure TICAP5_IC5CON.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TICAP5_IC5CON.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TOCMP1_OC1CON.setOCM(thebits : TBits_3); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,3
  sw      $v1,($a0)
end;
function  TOCMP1_OC1CON.getOCM : TBits_3;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,3
end;
procedure TOCMP1_OC1CON.setOCTSEL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,8($a0)
end;
procedure TOCMP1_OC1CON.clearOCTSEL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,4($a0)
end;
procedure TOCMP1_OC1CON.setOCTSEL(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,3,1
  sw      $v1,($a0)
end;
function  TOCMP1_OC1CON.getOCTSEL : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,3,1
end;
procedure TOCMP1_OC1CON.setOCFLT; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,8($a0)
end;
procedure TOCMP1_OC1CON.clearOCFLT; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,4($a0)
end;
procedure TOCMP1_OC1CON.setOCFLT(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,4,1
  sw      $v1,($a0)
end;
function  TOCMP1_OC1CON.getOCFLT : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,4,1
end;
procedure TOCMP1_OC1CON.setOC32; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,8($a0)
end;
procedure TOCMP1_OC1CON.clearOC32; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,4($a0)
end;
procedure TOCMP1_OC1CON.setOC32(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,5,1
  sw      $v1,($a0)
end;
function  TOCMP1_OC1CON.getOC32 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,5,1
end;
procedure TOCMP1_OC1CON.setSIDL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,8($a0)
end;
procedure TOCMP1_OC1CON.clearSIDL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,4($a0)
end;
procedure TOCMP1_OC1CON.setSIDL(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,13,1
  sw      $v1,($a0)
end;
function  TOCMP1_OC1CON.getSIDL : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,13,1
end;
procedure TOCMP1_OC1CON.setON; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,8($a0)
end;
procedure TOCMP1_OC1CON.clearON; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,4($a0)
end;
procedure TOCMP1_OC1CON.setON(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,15,1
  sw      $v1,($a0)
end;
function  TOCMP1_OC1CON.getON : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,15,1
end;
procedure TOCMP1_OC1CON.setOCM0; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,8($a0)
end;
procedure TOCMP1_OC1CON.clearOCM0; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,4($a0)
end;
procedure TOCMP1_OC1CON.setOCM0(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,1
  sw      $v1,($a0)
end;
function  TOCMP1_OC1CON.getOCM0 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,1
end;
procedure TOCMP1_OC1CON.setOCM1; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,8($a0)
end;
procedure TOCMP1_OC1CON.clearOCM1; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,4($a0)
end;
procedure TOCMP1_OC1CON.setOCM1(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,1,1
  sw      $v1,($a0)
end;
function  TOCMP1_OC1CON.getOCM1 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,1,1
end;
procedure TOCMP1_OC1CON.setOCM2; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,8($a0)
end;
procedure TOCMP1_OC1CON.clearOCM2; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,4($a0)
end;
procedure TOCMP1_OC1CON.setOCM2(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,2,1
  sw      $v1,($a0)
end;
function  TOCMP1_OC1CON.getOCM2 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,2,1
end;
procedure TOCMP1_OC1CON.setOCSIDL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,8($a0)
end;
procedure TOCMP1_OC1CON.clearOCSIDL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,4($a0)
end;
procedure TOCMP1_OC1CON.setOCSIDL(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,13,1
  sw      $v1,($a0)
end;
function  TOCMP1_OC1CON.getOCSIDL : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,13,1
end;
procedure TOCMP1_OC1CON.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TOCMP1_OC1CON.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TOCMP2_OC2CON.setOCM(thebits : TBits_3); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,3
  sw      $v1,($a0)
end;
function  TOCMP2_OC2CON.getOCM : TBits_3;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,3
end;
procedure TOCMP2_OC2CON.setOCTSEL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,8($a0)
end;
procedure TOCMP2_OC2CON.clearOCTSEL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,4($a0)
end;
procedure TOCMP2_OC2CON.setOCTSEL(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,3,1
  sw      $v1,($a0)
end;
function  TOCMP2_OC2CON.getOCTSEL : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,3,1
end;
procedure TOCMP2_OC2CON.setOCFLT; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,8($a0)
end;
procedure TOCMP2_OC2CON.clearOCFLT; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,4($a0)
end;
procedure TOCMP2_OC2CON.setOCFLT(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,4,1
  sw      $v1,($a0)
end;
function  TOCMP2_OC2CON.getOCFLT : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,4,1
end;
procedure TOCMP2_OC2CON.setOC32; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,8($a0)
end;
procedure TOCMP2_OC2CON.clearOC32; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,4($a0)
end;
procedure TOCMP2_OC2CON.setOC32(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,5,1
  sw      $v1,($a0)
end;
function  TOCMP2_OC2CON.getOC32 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,5,1
end;
procedure TOCMP2_OC2CON.setSIDL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,8($a0)
end;
procedure TOCMP2_OC2CON.clearSIDL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,4($a0)
end;
procedure TOCMP2_OC2CON.setSIDL(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,13,1
  sw      $v1,($a0)
end;
function  TOCMP2_OC2CON.getSIDL : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,13,1
end;
procedure TOCMP2_OC2CON.setON; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,8($a0)
end;
procedure TOCMP2_OC2CON.clearON; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,4($a0)
end;
procedure TOCMP2_OC2CON.setON(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,15,1
  sw      $v1,($a0)
end;
function  TOCMP2_OC2CON.getON : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,15,1
end;
procedure TOCMP2_OC2CON.setOCM0; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,8($a0)
end;
procedure TOCMP2_OC2CON.clearOCM0; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,4($a0)
end;
procedure TOCMP2_OC2CON.setOCM0(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,1
  sw      $v1,($a0)
end;
function  TOCMP2_OC2CON.getOCM0 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,1
end;
procedure TOCMP2_OC2CON.setOCM1; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,8($a0)
end;
procedure TOCMP2_OC2CON.clearOCM1; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,4($a0)
end;
procedure TOCMP2_OC2CON.setOCM1(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,1,1
  sw      $v1,($a0)
end;
function  TOCMP2_OC2CON.getOCM1 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,1,1
end;
procedure TOCMP2_OC2CON.setOCM2; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,8($a0)
end;
procedure TOCMP2_OC2CON.clearOCM2; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,4($a0)
end;
procedure TOCMP2_OC2CON.setOCM2(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,2,1
  sw      $v1,($a0)
end;
function  TOCMP2_OC2CON.getOCM2 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,2,1
end;
procedure TOCMP2_OC2CON.setOCSIDL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,8($a0)
end;
procedure TOCMP2_OC2CON.clearOCSIDL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,4($a0)
end;
procedure TOCMP2_OC2CON.setOCSIDL(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,13,1
  sw      $v1,($a0)
end;
function  TOCMP2_OC2CON.getOCSIDL : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,13,1
end;
procedure TOCMP2_OC2CON.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TOCMP2_OC2CON.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TOCMP3_OC3CON.setOCM(thebits : TBits_3); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,3
  sw      $v1,($a0)
end;
function  TOCMP3_OC3CON.getOCM : TBits_3;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,3
end;
procedure TOCMP3_OC3CON.setOCTSEL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,8($a0)
end;
procedure TOCMP3_OC3CON.clearOCTSEL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,4($a0)
end;
procedure TOCMP3_OC3CON.setOCTSEL(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,3,1
  sw      $v1,($a0)
end;
function  TOCMP3_OC3CON.getOCTSEL : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,3,1
end;
procedure TOCMP3_OC3CON.setOCFLT; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,8($a0)
end;
procedure TOCMP3_OC3CON.clearOCFLT; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,4($a0)
end;
procedure TOCMP3_OC3CON.setOCFLT(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,4,1
  sw      $v1,($a0)
end;
function  TOCMP3_OC3CON.getOCFLT : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,4,1
end;
procedure TOCMP3_OC3CON.setOC32; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,8($a0)
end;
procedure TOCMP3_OC3CON.clearOC32; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,4($a0)
end;
procedure TOCMP3_OC3CON.setOC32(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,5,1
  sw      $v1,($a0)
end;
function  TOCMP3_OC3CON.getOC32 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,5,1
end;
procedure TOCMP3_OC3CON.setSIDL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,8($a0)
end;
procedure TOCMP3_OC3CON.clearSIDL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,4($a0)
end;
procedure TOCMP3_OC3CON.setSIDL(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,13,1
  sw      $v1,($a0)
end;
function  TOCMP3_OC3CON.getSIDL : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,13,1
end;
procedure TOCMP3_OC3CON.setON; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,8($a0)
end;
procedure TOCMP3_OC3CON.clearON; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,4($a0)
end;
procedure TOCMP3_OC3CON.setON(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,15,1
  sw      $v1,($a0)
end;
function  TOCMP3_OC3CON.getON : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,15,1
end;
procedure TOCMP3_OC3CON.setOCM0; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,8($a0)
end;
procedure TOCMP3_OC3CON.clearOCM0; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,4($a0)
end;
procedure TOCMP3_OC3CON.setOCM0(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,1
  sw      $v1,($a0)
end;
function  TOCMP3_OC3CON.getOCM0 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,1
end;
procedure TOCMP3_OC3CON.setOCM1; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,8($a0)
end;
procedure TOCMP3_OC3CON.clearOCM1; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,4($a0)
end;
procedure TOCMP3_OC3CON.setOCM1(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,1,1
  sw      $v1,($a0)
end;
function  TOCMP3_OC3CON.getOCM1 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,1,1
end;
procedure TOCMP3_OC3CON.setOCM2; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,8($a0)
end;
procedure TOCMP3_OC3CON.clearOCM2; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,4($a0)
end;
procedure TOCMP3_OC3CON.setOCM2(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,2,1
  sw      $v1,($a0)
end;
function  TOCMP3_OC3CON.getOCM2 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,2,1
end;
procedure TOCMP3_OC3CON.setOCSIDL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,8($a0)
end;
procedure TOCMP3_OC3CON.clearOCSIDL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,4($a0)
end;
procedure TOCMP3_OC3CON.setOCSIDL(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,13,1
  sw      $v1,($a0)
end;
function  TOCMP3_OC3CON.getOCSIDL : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,13,1
end;
procedure TOCMP3_OC3CON.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TOCMP3_OC3CON.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TOCMP4_OC4CON.setOCM(thebits : TBits_3); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,3
  sw      $v1,($a0)
end;
function  TOCMP4_OC4CON.getOCM : TBits_3;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,3
end;
procedure TOCMP4_OC4CON.setOCTSEL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,8($a0)
end;
procedure TOCMP4_OC4CON.clearOCTSEL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,4($a0)
end;
procedure TOCMP4_OC4CON.setOCTSEL(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,3,1
  sw      $v1,($a0)
end;
function  TOCMP4_OC4CON.getOCTSEL : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,3,1
end;
procedure TOCMP4_OC4CON.setOCFLT; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,8($a0)
end;
procedure TOCMP4_OC4CON.clearOCFLT; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,4($a0)
end;
procedure TOCMP4_OC4CON.setOCFLT(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,4,1
  sw      $v1,($a0)
end;
function  TOCMP4_OC4CON.getOCFLT : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,4,1
end;
procedure TOCMP4_OC4CON.setOC32; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,8($a0)
end;
procedure TOCMP4_OC4CON.clearOC32; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,4($a0)
end;
procedure TOCMP4_OC4CON.setOC32(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,5,1
  sw      $v1,($a0)
end;
function  TOCMP4_OC4CON.getOC32 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,5,1
end;
procedure TOCMP4_OC4CON.setSIDL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,8($a0)
end;
procedure TOCMP4_OC4CON.clearSIDL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,4($a0)
end;
procedure TOCMP4_OC4CON.setSIDL(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,13,1
  sw      $v1,($a0)
end;
function  TOCMP4_OC4CON.getSIDL : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,13,1
end;
procedure TOCMP4_OC4CON.setON; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,8($a0)
end;
procedure TOCMP4_OC4CON.clearON; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,4($a0)
end;
procedure TOCMP4_OC4CON.setON(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,15,1
  sw      $v1,($a0)
end;
function  TOCMP4_OC4CON.getON : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,15,1
end;
procedure TOCMP4_OC4CON.setOCM0; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,8($a0)
end;
procedure TOCMP4_OC4CON.clearOCM0; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,4($a0)
end;
procedure TOCMP4_OC4CON.setOCM0(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,1
  sw      $v1,($a0)
end;
function  TOCMP4_OC4CON.getOCM0 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,1
end;
procedure TOCMP4_OC4CON.setOCM1; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,8($a0)
end;
procedure TOCMP4_OC4CON.clearOCM1; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,4($a0)
end;
procedure TOCMP4_OC4CON.setOCM1(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,1,1
  sw      $v1,($a0)
end;
function  TOCMP4_OC4CON.getOCM1 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,1,1
end;
procedure TOCMP4_OC4CON.setOCM2; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,8($a0)
end;
procedure TOCMP4_OC4CON.clearOCM2; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,4($a0)
end;
procedure TOCMP4_OC4CON.setOCM2(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,2,1
  sw      $v1,($a0)
end;
function  TOCMP4_OC4CON.getOCM2 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,2,1
end;
procedure TOCMP4_OC4CON.setOCSIDL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,8($a0)
end;
procedure TOCMP4_OC4CON.clearOCSIDL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,4($a0)
end;
procedure TOCMP4_OC4CON.setOCSIDL(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,13,1
  sw      $v1,($a0)
end;
function  TOCMP4_OC4CON.getOCSIDL : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,13,1
end;
procedure TOCMP4_OC4CON.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TOCMP4_OC4CON.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TOCMP5_OC5CON.setOCM(thebits : TBits_3); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,3
  sw      $v1,($a0)
end;
function  TOCMP5_OC5CON.getOCM : TBits_3;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,3
end;
procedure TOCMP5_OC5CON.setOCTSEL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,8($a0)
end;
procedure TOCMP5_OC5CON.clearOCTSEL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,4($a0)
end;
procedure TOCMP5_OC5CON.setOCTSEL(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,3,1
  sw      $v1,($a0)
end;
function  TOCMP5_OC5CON.getOCTSEL : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,3,1
end;
procedure TOCMP5_OC5CON.setOCFLT; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,8($a0)
end;
procedure TOCMP5_OC5CON.clearOCFLT; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,4($a0)
end;
procedure TOCMP5_OC5CON.setOCFLT(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,4,1
  sw      $v1,($a0)
end;
function  TOCMP5_OC5CON.getOCFLT : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,4,1
end;
procedure TOCMP5_OC5CON.setOC32; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,8($a0)
end;
procedure TOCMP5_OC5CON.clearOC32; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,4($a0)
end;
procedure TOCMP5_OC5CON.setOC32(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,5,1
  sw      $v1,($a0)
end;
function  TOCMP5_OC5CON.getOC32 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,5,1
end;
procedure TOCMP5_OC5CON.setSIDL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,8($a0)
end;
procedure TOCMP5_OC5CON.clearSIDL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,4($a0)
end;
procedure TOCMP5_OC5CON.setSIDL(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,13,1
  sw      $v1,($a0)
end;
function  TOCMP5_OC5CON.getSIDL : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,13,1
end;
procedure TOCMP5_OC5CON.setON; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,8($a0)
end;
procedure TOCMP5_OC5CON.clearON; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,4($a0)
end;
procedure TOCMP5_OC5CON.setON(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,15,1
  sw      $v1,($a0)
end;
function  TOCMP5_OC5CON.getON : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,15,1
end;
procedure TOCMP5_OC5CON.setOCM0; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,8($a0)
end;
procedure TOCMP5_OC5CON.clearOCM0; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,4($a0)
end;
procedure TOCMP5_OC5CON.setOCM0(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,1
  sw      $v1,($a0)
end;
function  TOCMP5_OC5CON.getOCM0 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,1
end;
procedure TOCMP5_OC5CON.setOCM1; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,8($a0)
end;
procedure TOCMP5_OC5CON.clearOCM1; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,4($a0)
end;
procedure TOCMP5_OC5CON.setOCM1(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,1,1
  sw      $v1,($a0)
end;
function  TOCMP5_OC5CON.getOCM1 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,1,1
end;
procedure TOCMP5_OC5CON.setOCM2; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,8($a0)
end;
procedure TOCMP5_OC5CON.clearOCM2; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,4($a0)
end;
procedure TOCMP5_OC5CON.setOCM2(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,2,1
  sw      $v1,($a0)
end;
function  TOCMP5_OC5CON.getOCM2 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,2,1
end;
procedure TOCMP5_OC5CON.setOCSIDL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,8($a0)
end;
procedure TOCMP5_OC5CON.clearOCSIDL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,4($a0)
end;
procedure TOCMP5_OC5CON.setOCSIDL(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,13,1
  sw      $v1,($a0)
end;
function  TOCMP5_OC5CON.getOCSIDL : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,13,1
end;
procedure TOCMP5_OC5CON.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TOCMP5_OC5CON.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TI2C3_I2C1ACON.setSEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,8($a0)
end;
procedure TI2C3_I2C1ACON.clearSEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,4($a0)
end;
procedure TI2C3_I2C1ACON.setSEN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,1
  sw      $v1,($a0)
end;
function  TI2C3_I2C1ACON.getSEN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,1
end;
procedure TI2C3_I2C1ACON.setRSEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,8($a0)
end;
procedure TI2C3_I2C1ACON.clearRSEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,4($a0)
end;
procedure TI2C3_I2C1ACON.setRSEN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,1,1
  sw      $v1,($a0)
end;
function  TI2C3_I2C1ACON.getRSEN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,1,1
end;
procedure TI2C3_I2C1ACON.setPEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,8($a0)
end;
procedure TI2C3_I2C1ACON.clearPEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,4($a0)
end;
procedure TI2C3_I2C1ACON.setPEN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,2,1
  sw      $v1,($a0)
end;
function  TI2C3_I2C1ACON.getPEN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,2,1
end;
procedure TI2C3_I2C1ACON.setRCEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,8($a0)
end;
procedure TI2C3_I2C1ACON.clearRCEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,4($a0)
end;
procedure TI2C3_I2C1ACON.setRCEN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,3,1
  sw      $v1,($a0)
end;
function  TI2C3_I2C1ACON.getRCEN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,3,1
end;
procedure TI2C3_I2C1ACON.setACKEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,8($a0)
end;
procedure TI2C3_I2C1ACON.clearACKEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,4($a0)
end;
procedure TI2C3_I2C1ACON.setACKEN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,4,1
  sw      $v1,($a0)
end;
function  TI2C3_I2C1ACON.getACKEN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,4,1
end;
procedure TI2C3_I2C1ACON.setACKDT; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,8($a0)
end;
procedure TI2C3_I2C1ACON.clearACKDT; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,4($a0)
end;
procedure TI2C3_I2C1ACON.setACKDT(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,5,1
  sw      $v1,($a0)
end;
function  TI2C3_I2C1ACON.getACKDT : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,5,1
end;
procedure TI2C3_I2C1ACON.setSTREN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,8($a0)
end;
procedure TI2C3_I2C1ACON.clearSTREN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,4($a0)
end;
procedure TI2C3_I2C1ACON.setSTREN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,6,1
  sw      $v1,($a0)
end;
function  TI2C3_I2C1ACON.getSTREN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,6,1
end;
procedure TI2C3_I2C1ACON.setGCEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,8($a0)
end;
procedure TI2C3_I2C1ACON.clearGCEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,4($a0)
end;
procedure TI2C3_I2C1ACON.setGCEN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,7,1
  sw      $v1,($a0)
end;
function  TI2C3_I2C1ACON.getGCEN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,7,1
end;
procedure TI2C3_I2C1ACON.setSMEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,8($a0)
end;
procedure TI2C3_I2C1ACON.clearSMEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,4($a0)
end;
procedure TI2C3_I2C1ACON.setSMEN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,8,1
  sw      $v1,($a0)
end;
function  TI2C3_I2C1ACON.getSMEN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,8,1
end;
procedure TI2C3_I2C1ACON.setDISSLW; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,512
  sw $a1,8($a0)
end;
procedure TI2C3_I2C1ACON.clearDISSLW; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,512
  sw $a1,4($a0)
end;
procedure TI2C3_I2C1ACON.setDISSLW(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,9,1
  sw      $v1,($a0)
end;
function  TI2C3_I2C1ACON.getDISSLW : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,9,1
end;
procedure TI2C3_I2C1ACON.setA10M; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1024
  sw $a1,8($a0)
end;
procedure TI2C3_I2C1ACON.clearA10M; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1024
  sw $a1,4($a0)
end;
procedure TI2C3_I2C1ACON.setA10M(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,10,1
  sw      $v1,($a0)
end;
function  TI2C3_I2C1ACON.getA10M : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,10,1
end;
procedure TI2C3_I2C1ACON.setSTRICT; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2048
  sw $a1,8($a0)
end;
procedure TI2C3_I2C1ACON.clearSTRICT; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2048
  sw $a1,4($a0)
end;
procedure TI2C3_I2C1ACON.setSTRICT(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,11,1
  sw      $v1,($a0)
end;
function  TI2C3_I2C1ACON.getSTRICT : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,11,1
end;
procedure TI2C3_I2C1ACON.setSCLREL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4096
  sw $a1,8($a0)
end;
procedure TI2C3_I2C1ACON.clearSCLREL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4096
  sw $a1,4($a0)
end;
procedure TI2C3_I2C1ACON.setSCLREL(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,12,1
  sw      $v1,($a0)
end;
function  TI2C3_I2C1ACON.getSCLREL : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,12,1
end;
procedure TI2C3_I2C1ACON.setSIDL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,8($a0)
end;
procedure TI2C3_I2C1ACON.clearSIDL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,4($a0)
end;
procedure TI2C3_I2C1ACON.setSIDL(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,13,1
  sw      $v1,($a0)
end;
function  TI2C3_I2C1ACON.getSIDL : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,13,1
end;
procedure TI2C3_I2C1ACON.setON; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,8($a0)
end;
procedure TI2C3_I2C1ACON.clearON; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,4($a0)
end;
procedure TI2C3_I2C1ACON.setON(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,15,1
  sw      $v1,($a0)
end;
function  TI2C3_I2C1ACON.getON : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,15,1
end;
procedure TI2C3_I2C1ACON.setIPMIEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2048
  sw $a1,8($a0)
end;
procedure TI2C3_I2C1ACON.clearIPMIEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2048
  sw $a1,4($a0)
end;
procedure TI2C3_I2C1ACON.setIPMIEN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,11,1
  sw      $v1,($a0)
end;
function  TI2C3_I2C1ACON.getIPMIEN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,11,1
end;
procedure TI2C3_I2C1ACON.setI2CSIDL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,8($a0)
end;
procedure TI2C3_I2C1ACON.clearI2CSIDL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,4($a0)
end;
procedure TI2C3_I2C1ACON.setI2CSIDL(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,13,1
  sw      $v1,($a0)
end;
function  TI2C3_I2C1ACON.getI2CSIDL : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,13,1
end;
procedure TI2C3_I2C1ACON.setI2CEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,8($a0)
end;
procedure TI2C3_I2C1ACON.clearI2CEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,4($a0)
end;
procedure TI2C3_I2C1ACON.setI2CEN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,15,1
  sw      $v1,($a0)
end;
function  TI2C3_I2C1ACON.getI2CEN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,15,1
end;
procedure TI2C3_I2C1ACON.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TI2C3_I2C1ACON.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TI2C3_I2C3CON.setSEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,8($a0)
end;
procedure TI2C3_I2C3CON.clearSEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,4($a0)
end;
procedure TI2C3_I2C3CON.setSEN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,1
  sw      $v1,($a0)
end;
function  TI2C3_I2C3CON.getSEN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,1
end;
procedure TI2C3_I2C3CON.setRSEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,8($a0)
end;
procedure TI2C3_I2C3CON.clearRSEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,4($a0)
end;
procedure TI2C3_I2C3CON.setRSEN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,1,1
  sw      $v1,($a0)
end;
function  TI2C3_I2C3CON.getRSEN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,1,1
end;
procedure TI2C3_I2C3CON.setPEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,8($a0)
end;
procedure TI2C3_I2C3CON.clearPEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,4($a0)
end;
procedure TI2C3_I2C3CON.setPEN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,2,1
  sw      $v1,($a0)
end;
function  TI2C3_I2C3CON.getPEN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,2,1
end;
procedure TI2C3_I2C3CON.setRCEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,8($a0)
end;
procedure TI2C3_I2C3CON.clearRCEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,4($a0)
end;
procedure TI2C3_I2C3CON.setRCEN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,3,1
  sw      $v1,($a0)
end;
function  TI2C3_I2C3CON.getRCEN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,3,1
end;
procedure TI2C3_I2C3CON.setACKEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,8($a0)
end;
procedure TI2C3_I2C3CON.clearACKEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,4($a0)
end;
procedure TI2C3_I2C3CON.setACKEN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,4,1
  sw      $v1,($a0)
end;
function  TI2C3_I2C3CON.getACKEN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,4,1
end;
procedure TI2C3_I2C3CON.setACKDT; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,8($a0)
end;
procedure TI2C3_I2C3CON.clearACKDT; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,4($a0)
end;
procedure TI2C3_I2C3CON.setACKDT(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,5,1
  sw      $v1,($a0)
end;
function  TI2C3_I2C3CON.getACKDT : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,5,1
end;
procedure TI2C3_I2C3CON.setSTREN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,8($a0)
end;
procedure TI2C3_I2C3CON.clearSTREN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,4($a0)
end;
procedure TI2C3_I2C3CON.setSTREN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,6,1
  sw      $v1,($a0)
end;
function  TI2C3_I2C3CON.getSTREN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,6,1
end;
procedure TI2C3_I2C3CON.setGCEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,8($a0)
end;
procedure TI2C3_I2C3CON.clearGCEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,4($a0)
end;
procedure TI2C3_I2C3CON.setGCEN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,7,1
  sw      $v1,($a0)
end;
function  TI2C3_I2C3CON.getGCEN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,7,1
end;
procedure TI2C3_I2C3CON.setSMEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,8($a0)
end;
procedure TI2C3_I2C3CON.clearSMEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,4($a0)
end;
procedure TI2C3_I2C3CON.setSMEN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,8,1
  sw      $v1,($a0)
end;
function  TI2C3_I2C3CON.getSMEN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,8,1
end;
procedure TI2C3_I2C3CON.setDISSLW; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,512
  sw $a1,8($a0)
end;
procedure TI2C3_I2C3CON.clearDISSLW; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,512
  sw $a1,4($a0)
end;
procedure TI2C3_I2C3CON.setDISSLW(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,9,1
  sw      $v1,($a0)
end;
function  TI2C3_I2C3CON.getDISSLW : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,9,1
end;
procedure TI2C3_I2C3CON.setA10M; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1024
  sw $a1,8($a0)
end;
procedure TI2C3_I2C3CON.clearA10M; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1024
  sw $a1,4($a0)
end;
procedure TI2C3_I2C3CON.setA10M(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,10,1
  sw      $v1,($a0)
end;
function  TI2C3_I2C3CON.getA10M : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,10,1
end;
procedure TI2C3_I2C3CON.setSTRICT; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2048
  sw $a1,8($a0)
end;
procedure TI2C3_I2C3CON.clearSTRICT; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2048
  sw $a1,4($a0)
end;
procedure TI2C3_I2C3CON.setSTRICT(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,11,1
  sw      $v1,($a0)
end;
function  TI2C3_I2C3CON.getSTRICT : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,11,1
end;
procedure TI2C3_I2C3CON.setSCLREL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4096
  sw $a1,8($a0)
end;
procedure TI2C3_I2C3CON.clearSCLREL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4096
  sw $a1,4($a0)
end;
procedure TI2C3_I2C3CON.setSCLREL(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,12,1
  sw      $v1,($a0)
end;
function  TI2C3_I2C3CON.getSCLREL : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,12,1
end;
procedure TI2C3_I2C3CON.setSIDL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,8($a0)
end;
procedure TI2C3_I2C3CON.clearSIDL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,4($a0)
end;
procedure TI2C3_I2C3CON.setSIDL(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,13,1
  sw      $v1,($a0)
end;
function  TI2C3_I2C3CON.getSIDL : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,13,1
end;
procedure TI2C3_I2C3CON.setON; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,8($a0)
end;
procedure TI2C3_I2C3CON.clearON; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,4($a0)
end;
procedure TI2C3_I2C3CON.setON(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,15,1
  sw      $v1,($a0)
end;
function  TI2C3_I2C3CON.getON : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,15,1
end;
procedure TI2C3_I2C3CON.setIPMIEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2048
  sw $a1,8($a0)
end;
procedure TI2C3_I2C3CON.clearIPMIEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2048
  sw $a1,4($a0)
end;
procedure TI2C3_I2C3CON.setIPMIEN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,11,1
  sw      $v1,($a0)
end;
function  TI2C3_I2C3CON.getIPMIEN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,11,1
end;
procedure TI2C3_I2C3CON.setI2CSIDL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,8($a0)
end;
procedure TI2C3_I2C3CON.clearI2CSIDL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,4($a0)
end;
procedure TI2C3_I2C3CON.setI2CSIDL(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,13,1
  sw      $v1,($a0)
end;
function  TI2C3_I2C3CON.getI2CSIDL : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,13,1
end;
procedure TI2C3_I2C3CON.setI2CEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,8($a0)
end;
procedure TI2C3_I2C3CON.clearI2CEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,4($a0)
end;
procedure TI2C3_I2C3CON.setI2CEN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,15,1
  sw      $v1,($a0)
end;
function  TI2C3_I2C3CON.getI2CEN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,15,1
end;
procedure TI2C3_I2C3CON.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TI2C3_I2C3CON.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TI2C3_I2C1ASTAT.setTBF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,8($a0)
end;
procedure TI2C3_I2C1ASTAT.clearTBF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,4($a0)
end;
procedure TI2C3_I2C1ASTAT.setTBF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,1
  sw      $v1,($a0)
end;
function  TI2C3_I2C1ASTAT.getTBF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,1
end;
procedure TI2C3_I2C1ASTAT.setRBF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,8($a0)
end;
procedure TI2C3_I2C1ASTAT.clearRBF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,4($a0)
end;
procedure TI2C3_I2C1ASTAT.setRBF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,1,1
  sw      $v1,($a0)
end;
function  TI2C3_I2C1ASTAT.getRBF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,1,1
end;
procedure TI2C3_I2C1ASTAT.setR_W; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,8($a0)
end;
procedure TI2C3_I2C1ASTAT.clearR_W; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,4($a0)
end;
procedure TI2C3_I2C1ASTAT.setR_W(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,2,1
  sw      $v1,($a0)
end;
function  TI2C3_I2C1ASTAT.getR_W : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,2,1
end;
procedure TI2C3_I2C1ASTAT.setS; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,8($a0)
end;
procedure TI2C3_I2C1ASTAT.clearS; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,4($a0)
end;
procedure TI2C3_I2C1ASTAT.setS(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,3,1
  sw      $v1,($a0)
end;
function  TI2C3_I2C1ASTAT.getS : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,3,1
end;
procedure TI2C3_I2C1ASTAT.setP; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,8($a0)
end;
procedure TI2C3_I2C1ASTAT.clearP; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,4($a0)
end;
procedure TI2C3_I2C1ASTAT.setP(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,4,1
  sw      $v1,($a0)
end;
function  TI2C3_I2C1ASTAT.getP : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,4,1
end;
procedure TI2C3_I2C1ASTAT.setD_A; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,8($a0)
end;
procedure TI2C3_I2C1ASTAT.clearD_A; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,4($a0)
end;
procedure TI2C3_I2C1ASTAT.setD_A(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,5,1
  sw      $v1,($a0)
end;
function  TI2C3_I2C1ASTAT.getD_A : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,5,1
end;
procedure TI2C3_I2C1ASTAT.setI2COV; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,8($a0)
end;
procedure TI2C3_I2C1ASTAT.clearI2COV; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,4($a0)
end;
procedure TI2C3_I2C1ASTAT.setI2COV(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,6,1
  sw      $v1,($a0)
end;
function  TI2C3_I2C1ASTAT.getI2COV : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,6,1
end;
procedure TI2C3_I2C1ASTAT.setIWCOL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,8($a0)
end;
procedure TI2C3_I2C1ASTAT.clearIWCOL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,4($a0)
end;
procedure TI2C3_I2C1ASTAT.setIWCOL(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,7,1
  sw      $v1,($a0)
end;
function  TI2C3_I2C1ASTAT.getIWCOL : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,7,1
end;
procedure TI2C3_I2C1ASTAT.setADD10; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,8($a0)
end;
procedure TI2C3_I2C1ASTAT.clearADD10; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,4($a0)
end;
procedure TI2C3_I2C1ASTAT.setADD10(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,8,1
  sw      $v1,($a0)
end;
function  TI2C3_I2C1ASTAT.getADD10 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,8,1
end;
procedure TI2C3_I2C1ASTAT.setGCSTAT; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,512
  sw $a1,8($a0)
end;
procedure TI2C3_I2C1ASTAT.clearGCSTAT; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,512
  sw $a1,4($a0)
end;
procedure TI2C3_I2C1ASTAT.setGCSTAT(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,9,1
  sw      $v1,($a0)
end;
function  TI2C3_I2C1ASTAT.getGCSTAT : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,9,1
end;
procedure TI2C3_I2C1ASTAT.setBCL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1024
  sw $a1,8($a0)
end;
procedure TI2C3_I2C1ASTAT.clearBCL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1024
  sw $a1,4($a0)
end;
procedure TI2C3_I2C1ASTAT.setBCL(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,10,1
  sw      $v1,($a0)
end;
function  TI2C3_I2C1ASTAT.getBCL : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,10,1
end;
procedure TI2C3_I2C1ASTAT.setTRSTAT; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16384
  sw $a1,8($a0)
end;
procedure TI2C3_I2C1ASTAT.clearTRSTAT; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16384
  sw $a1,4($a0)
end;
procedure TI2C3_I2C1ASTAT.setTRSTAT(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,14,1
  sw      $v1,($a0)
end;
function  TI2C3_I2C1ASTAT.getTRSTAT : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,14,1
end;
procedure TI2C3_I2C1ASTAT.setACKSTAT; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,8($a0)
end;
procedure TI2C3_I2C1ASTAT.clearACKSTAT; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,4($a0)
end;
procedure TI2C3_I2C1ASTAT.setACKSTAT(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,15,1
  sw      $v1,($a0)
end;
function  TI2C3_I2C1ASTAT.getACKSTAT : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,15,1
end;
procedure TI2C3_I2C1ASTAT.setI2CPOV; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,8($a0)
end;
procedure TI2C3_I2C1ASTAT.clearI2CPOV; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,4($a0)
end;
procedure TI2C3_I2C1ASTAT.setI2CPOV(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,6,1
  sw      $v1,($a0)
end;
function  TI2C3_I2C1ASTAT.getI2CPOV : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,6,1
end;
procedure TI2C3_I2C1ASTAT.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TI2C3_I2C1ASTAT.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TI2C3_I2C3STAT.setTBF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,8($a0)
end;
procedure TI2C3_I2C3STAT.clearTBF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,4($a0)
end;
procedure TI2C3_I2C3STAT.setTBF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,1
  sw      $v1,($a0)
end;
function  TI2C3_I2C3STAT.getTBF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,1
end;
procedure TI2C3_I2C3STAT.setRBF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,8($a0)
end;
procedure TI2C3_I2C3STAT.clearRBF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,4($a0)
end;
procedure TI2C3_I2C3STAT.setRBF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,1,1
  sw      $v1,($a0)
end;
function  TI2C3_I2C3STAT.getRBF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,1,1
end;
procedure TI2C3_I2C3STAT.setR_W; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,8($a0)
end;
procedure TI2C3_I2C3STAT.clearR_W; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,4($a0)
end;
procedure TI2C3_I2C3STAT.setR_W(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,2,1
  sw      $v1,($a0)
end;
function  TI2C3_I2C3STAT.getR_W : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,2,1
end;
procedure TI2C3_I2C3STAT.setS; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,8($a0)
end;
procedure TI2C3_I2C3STAT.clearS; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,4($a0)
end;
procedure TI2C3_I2C3STAT.setS(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,3,1
  sw      $v1,($a0)
end;
function  TI2C3_I2C3STAT.getS : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,3,1
end;
procedure TI2C3_I2C3STAT.setP; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,8($a0)
end;
procedure TI2C3_I2C3STAT.clearP; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,4($a0)
end;
procedure TI2C3_I2C3STAT.setP(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,4,1
  sw      $v1,($a0)
end;
function  TI2C3_I2C3STAT.getP : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,4,1
end;
procedure TI2C3_I2C3STAT.setD_A; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,8($a0)
end;
procedure TI2C3_I2C3STAT.clearD_A; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,4($a0)
end;
procedure TI2C3_I2C3STAT.setD_A(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,5,1
  sw      $v1,($a0)
end;
function  TI2C3_I2C3STAT.getD_A : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,5,1
end;
procedure TI2C3_I2C3STAT.setI2COV; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,8($a0)
end;
procedure TI2C3_I2C3STAT.clearI2COV; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,4($a0)
end;
procedure TI2C3_I2C3STAT.setI2COV(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,6,1
  sw      $v1,($a0)
end;
function  TI2C3_I2C3STAT.getI2COV : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,6,1
end;
procedure TI2C3_I2C3STAT.setIWCOL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,8($a0)
end;
procedure TI2C3_I2C3STAT.clearIWCOL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,4($a0)
end;
procedure TI2C3_I2C3STAT.setIWCOL(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,7,1
  sw      $v1,($a0)
end;
function  TI2C3_I2C3STAT.getIWCOL : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,7,1
end;
procedure TI2C3_I2C3STAT.setADD10; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,8($a0)
end;
procedure TI2C3_I2C3STAT.clearADD10; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,4($a0)
end;
procedure TI2C3_I2C3STAT.setADD10(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,8,1
  sw      $v1,($a0)
end;
function  TI2C3_I2C3STAT.getADD10 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,8,1
end;
procedure TI2C3_I2C3STAT.setGCSTAT; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,512
  sw $a1,8($a0)
end;
procedure TI2C3_I2C3STAT.clearGCSTAT; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,512
  sw $a1,4($a0)
end;
procedure TI2C3_I2C3STAT.setGCSTAT(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,9,1
  sw      $v1,($a0)
end;
function  TI2C3_I2C3STAT.getGCSTAT : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,9,1
end;
procedure TI2C3_I2C3STAT.setBCL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1024
  sw $a1,8($a0)
end;
procedure TI2C3_I2C3STAT.clearBCL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1024
  sw $a1,4($a0)
end;
procedure TI2C3_I2C3STAT.setBCL(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,10,1
  sw      $v1,($a0)
end;
function  TI2C3_I2C3STAT.getBCL : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,10,1
end;
procedure TI2C3_I2C3STAT.setTRSTAT; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16384
  sw $a1,8($a0)
end;
procedure TI2C3_I2C3STAT.clearTRSTAT; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16384
  sw $a1,4($a0)
end;
procedure TI2C3_I2C3STAT.setTRSTAT(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,14,1
  sw      $v1,($a0)
end;
function  TI2C3_I2C3STAT.getTRSTAT : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,14,1
end;
procedure TI2C3_I2C3STAT.setACKSTAT; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,8($a0)
end;
procedure TI2C3_I2C3STAT.clearACKSTAT; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,4($a0)
end;
procedure TI2C3_I2C3STAT.setACKSTAT(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,15,1
  sw      $v1,($a0)
end;
function  TI2C3_I2C3STAT.getACKSTAT : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,15,1
end;
procedure TI2C3_I2C3STAT.setI2CPOV; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,8($a0)
end;
procedure TI2C3_I2C3STAT.clearI2CPOV; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,4($a0)
end;
procedure TI2C3_I2C3STAT.setI2CPOV(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,6,1
  sw      $v1,($a0)
end;
function  TI2C3_I2C3STAT.getI2CPOV : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,6,1
end;
procedure TI2C3_I2C3STAT.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TI2C3_I2C3STAT.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TI2C4_I2C2ACON.setSEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,8($a0)
end;
procedure TI2C4_I2C2ACON.clearSEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,4($a0)
end;
procedure TI2C4_I2C2ACON.setSEN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,1
  sw      $v1,($a0)
end;
function  TI2C4_I2C2ACON.getSEN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,1
end;
procedure TI2C4_I2C2ACON.setRSEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,8($a0)
end;
procedure TI2C4_I2C2ACON.clearRSEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,4($a0)
end;
procedure TI2C4_I2C2ACON.setRSEN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,1,1
  sw      $v1,($a0)
end;
function  TI2C4_I2C2ACON.getRSEN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,1,1
end;
procedure TI2C4_I2C2ACON.setPEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,8($a0)
end;
procedure TI2C4_I2C2ACON.clearPEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,4($a0)
end;
procedure TI2C4_I2C2ACON.setPEN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,2,1
  sw      $v1,($a0)
end;
function  TI2C4_I2C2ACON.getPEN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,2,1
end;
procedure TI2C4_I2C2ACON.setRCEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,8($a0)
end;
procedure TI2C4_I2C2ACON.clearRCEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,4($a0)
end;
procedure TI2C4_I2C2ACON.setRCEN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,3,1
  sw      $v1,($a0)
end;
function  TI2C4_I2C2ACON.getRCEN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,3,1
end;
procedure TI2C4_I2C2ACON.setACKEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,8($a0)
end;
procedure TI2C4_I2C2ACON.clearACKEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,4($a0)
end;
procedure TI2C4_I2C2ACON.setACKEN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,4,1
  sw      $v1,($a0)
end;
function  TI2C4_I2C2ACON.getACKEN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,4,1
end;
procedure TI2C4_I2C2ACON.setACKDT; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,8($a0)
end;
procedure TI2C4_I2C2ACON.clearACKDT; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,4($a0)
end;
procedure TI2C4_I2C2ACON.setACKDT(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,5,1
  sw      $v1,($a0)
end;
function  TI2C4_I2C2ACON.getACKDT : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,5,1
end;
procedure TI2C4_I2C2ACON.setSTREN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,8($a0)
end;
procedure TI2C4_I2C2ACON.clearSTREN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,4($a0)
end;
procedure TI2C4_I2C2ACON.setSTREN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,6,1
  sw      $v1,($a0)
end;
function  TI2C4_I2C2ACON.getSTREN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,6,1
end;
procedure TI2C4_I2C2ACON.setGCEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,8($a0)
end;
procedure TI2C4_I2C2ACON.clearGCEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,4($a0)
end;
procedure TI2C4_I2C2ACON.setGCEN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,7,1
  sw      $v1,($a0)
end;
function  TI2C4_I2C2ACON.getGCEN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,7,1
end;
procedure TI2C4_I2C2ACON.setSMEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,8($a0)
end;
procedure TI2C4_I2C2ACON.clearSMEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,4($a0)
end;
procedure TI2C4_I2C2ACON.setSMEN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,8,1
  sw      $v1,($a0)
end;
function  TI2C4_I2C2ACON.getSMEN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,8,1
end;
procedure TI2C4_I2C2ACON.setDISSLW; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,512
  sw $a1,8($a0)
end;
procedure TI2C4_I2C2ACON.clearDISSLW; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,512
  sw $a1,4($a0)
end;
procedure TI2C4_I2C2ACON.setDISSLW(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,9,1
  sw      $v1,($a0)
end;
function  TI2C4_I2C2ACON.getDISSLW : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,9,1
end;
procedure TI2C4_I2C2ACON.setA10M; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1024
  sw $a1,8($a0)
end;
procedure TI2C4_I2C2ACON.clearA10M; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1024
  sw $a1,4($a0)
end;
procedure TI2C4_I2C2ACON.setA10M(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,10,1
  sw      $v1,($a0)
end;
function  TI2C4_I2C2ACON.getA10M : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,10,1
end;
procedure TI2C4_I2C2ACON.setSTRICT; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2048
  sw $a1,8($a0)
end;
procedure TI2C4_I2C2ACON.clearSTRICT; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2048
  sw $a1,4($a0)
end;
procedure TI2C4_I2C2ACON.setSTRICT(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,11,1
  sw      $v1,($a0)
end;
function  TI2C4_I2C2ACON.getSTRICT : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,11,1
end;
procedure TI2C4_I2C2ACON.setSCLREL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4096
  sw $a1,8($a0)
end;
procedure TI2C4_I2C2ACON.clearSCLREL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4096
  sw $a1,4($a0)
end;
procedure TI2C4_I2C2ACON.setSCLREL(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,12,1
  sw      $v1,($a0)
end;
function  TI2C4_I2C2ACON.getSCLREL : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,12,1
end;
procedure TI2C4_I2C2ACON.setSIDL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,8($a0)
end;
procedure TI2C4_I2C2ACON.clearSIDL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,4($a0)
end;
procedure TI2C4_I2C2ACON.setSIDL(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,13,1
  sw      $v1,($a0)
end;
function  TI2C4_I2C2ACON.getSIDL : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,13,1
end;
procedure TI2C4_I2C2ACON.setON; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,8($a0)
end;
procedure TI2C4_I2C2ACON.clearON; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,4($a0)
end;
procedure TI2C4_I2C2ACON.setON(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,15,1
  sw      $v1,($a0)
end;
function  TI2C4_I2C2ACON.getON : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,15,1
end;
procedure TI2C4_I2C2ACON.setIPMIEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2048
  sw $a1,8($a0)
end;
procedure TI2C4_I2C2ACON.clearIPMIEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2048
  sw $a1,4($a0)
end;
procedure TI2C4_I2C2ACON.setIPMIEN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,11,1
  sw      $v1,($a0)
end;
function  TI2C4_I2C2ACON.getIPMIEN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,11,1
end;
procedure TI2C4_I2C2ACON.setI2CSIDL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,8($a0)
end;
procedure TI2C4_I2C2ACON.clearI2CSIDL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,4($a0)
end;
procedure TI2C4_I2C2ACON.setI2CSIDL(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,13,1
  sw      $v1,($a0)
end;
function  TI2C4_I2C2ACON.getI2CSIDL : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,13,1
end;
procedure TI2C4_I2C2ACON.setI2CEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,8($a0)
end;
procedure TI2C4_I2C2ACON.clearI2CEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,4($a0)
end;
procedure TI2C4_I2C2ACON.setI2CEN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,15,1
  sw      $v1,($a0)
end;
function  TI2C4_I2C2ACON.getI2CEN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,15,1
end;
procedure TI2C4_I2C2ACON.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TI2C4_I2C2ACON.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TI2C4_I2C4CON.setSEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,8($a0)
end;
procedure TI2C4_I2C4CON.clearSEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,4($a0)
end;
procedure TI2C4_I2C4CON.setSEN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,1
  sw      $v1,($a0)
end;
function  TI2C4_I2C4CON.getSEN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,1
end;
procedure TI2C4_I2C4CON.setRSEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,8($a0)
end;
procedure TI2C4_I2C4CON.clearRSEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,4($a0)
end;
procedure TI2C4_I2C4CON.setRSEN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,1,1
  sw      $v1,($a0)
end;
function  TI2C4_I2C4CON.getRSEN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,1,1
end;
procedure TI2C4_I2C4CON.setPEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,8($a0)
end;
procedure TI2C4_I2C4CON.clearPEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,4($a0)
end;
procedure TI2C4_I2C4CON.setPEN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,2,1
  sw      $v1,($a0)
end;
function  TI2C4_I2C4CON.getPEN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,2,1
end;
procedure TI2C4_I2C4CON.setRCEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,8($a0)
end;
procedure TI2C4_I2C4CON.clearRCEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,4($a0)
end;
procedure TI2C4_I2C4CON.setRCEN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,3,1
  sw      $v1,($a0)
end;
function  TI2C4_I2C4CON.getRCEN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,3,1
end;
procedure TI2C4_I2C4CON.setACKEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,8($a0)
end;
procedure TI2C4_I2C4CON.clearACKEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,4($a0)
end;
procedure TI2C4_I2C4CON.setACKEN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,4,1
  sw      $v1,($a0)
end;
function  TI2C4_I2C4CON.getACKEN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,4,1
end;
procedure TI2C4_I2C4CON.setACKDT; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,8($a0)
end;
procedure TI2C4_I2C4CON.clearACKDT; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,4($a0)
end;
procedure TI2C4_I2C4CON.setACKDT(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,5,1
  sw      $v1,($a0)
end;
function  TI2C4_I2C4CON.getACKDT : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,5,1
end;
procedure TI2C4_I2C4CON.setSTREN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,8($a0)
end;
procedure TI2C4_I2C4CON.clearSTREN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,4($a0)
end;
procedure TI2C4_I2C4CON.setSTREN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,6,1
  sw      $v1,($a0)
end;
function  TI2C4_I2C4CON.getSTREN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,6,1
end;
procedure TI2C4_I2C4CON.setGCEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,8($a0)
end;
procedure TI2C4_I2C4CON.clearGCEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,4($a0)
end;
procedure TI2C4_I2C4CON.setGCEN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,7,1
  sw      $v1,($a0)
end;
function  TI2C4_I2C4CON.getGCEN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,7,1
end;
procedure TI2C4_I2C4CON.setSMEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,8($a0)
end;
procedure TI2C4_I2C4CON.clearSMEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,4($a0)
end;
procedure TI2C4_I2C4CON.setSMEN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,8,1
  sw      $v1,($a0)
end;
function  TI2C4_I2C4CON.getSMEN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,8,1
end;
procedure TI2C4_I2C4CON.setDISSLW; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,512
  sw $a1,8($a0)
end;
procedure TI2C4_I2C4CON.clearDISSLW; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,512
  sw $a1,4($a0)
end;
procedure TI2C4_I2C4CON.setDISSLW(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,9,1
  sw      $v1,($a0)
end;
function  TI2C4_I2C4CON.getDISSLW : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,9,1
end;
procedure TI2C4_I2C4CON.setA10M; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1024
  sw $a1,8($a0)
end;
procedure TI2C4_I2C4CON.clearA10M; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1024
  sw $a1,4($a0)
end;
procedure TI2C4_I2C4CON.setA10M(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,10,1
  sw      $v1,($a0)
end;
function  TI2C4_I2C4CON.getA10M : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,10,1
end;
procedure TI2C4_I2C4CON.setSTRICT; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2048
  sw $a1,8($a0)
end;
procedure TI2C4_I2C4CON.clearSTRICT; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2048
  sw $a1,4($a0)
end;
procedure TI2C4_I2C4CON.setSTRICT(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,11,1
  sw      $v1,($a0)
end;
function  TI2C4_I2C4CON.getSTRICT : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,11,1
end;
procedure TI2C4_I2C4CON.setSCLREL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4096
  sw $a1,8($a0)
end;
procedure TI2C4_I2C4CON.clearSCLREL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4096
  sw $a1,4($a0)
end;
procedure TI2C4_I2C4CON.setSCLREL(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,12,1
  sw      $v1,($a0)
end;
function  TI2C4_I2C4CON.getSCLREL : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,12,1
end;
procedure TI2C4_I2C4CON.setSIDL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,8($a0)
end;
procedure TI2C4_I2C4CON.clearSIDL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,4($a0)
end;
procedure TI2C4_I2C4CON.setSIDL(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,13,1
  sw      $v1,($a0)
end;
function  TI2C4_I2C4CON.getSIDL : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,13,1
end;
procedure TI2C4_I2C4CON.setON; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,8($a0)
end;
procedure TI2C4_I2C4CON.clearON; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,4($a0)
end;
procedure TI2C4_I2C4CON.setON(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,15,1
  sw      $v1,($a0)
end;
function  TI2C4_I2C4CON.getON : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,15,1
end;
procedure TI2C4_I2C4CON.setIPMIEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2048
  sw $a1,8($a0)
end;
procedure TI2C4_I2C4CON.clearIPMIEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2048
  sw $a1,4($a0)
end;
procedure TI2C4_I2C4CON.setIPMIEN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,11,1
  sw      $v1,($a0)
end;
function  TI2C4_I2C4CON.getIPMIEN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,11,1
end;
procedure TI2C4_I2C4CON.setI2CSIDL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,8($a0)
end;
procedure TI2C4_I2C4CON.clearI2CSIDL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,4($a0)
end;
procedure TI2C4_I2C4CON.setI2CSIDL(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,13,1
  sw      $v1,($a0)
end;
function  TI2C4_I2C4CON.getI2CSIDL : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,13,1
end;
procedure TI2C4_I2C4CON.setI2CEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,8($a0)
end;
procedure TI2C4_I2C4CON.clearI2CEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,4($a0)
end;
procedure TI2C4_I2C4CON.setI2CEN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,15,1
  sw      $v1,($a0)
end;
function  TI2C4_I2C4CON.getI2CEN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,15,1
end;
procedure TI2C4_I2C4CON.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TI2C4_I2C4CON.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TI2C4_I2C2ASTAT.setTBF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,8($a0)
end;
procedure TI2C4_I2C2ASTAT.clearTBF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,4($a0)
end;
procedure TI2C4_I2C2ASTAT.setTBF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,1
  sw      $v1,($a0)
end;
function  TI2C4_I2C2ASTAT.getTBF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,1
end;
procedure TI2C4_I2C2ASTAT.setRBF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,8($a0)
end;
procedure TI2C4_I2C2ASTAT.clearRBF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,4($a0)
end;
procedure TI2C4_I2C2ASTAT.setRBF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,1,1
  sw      $v1,($a0)
end;
function  TI2C4_I2C2ASTAT.getRBF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,1,1
end;
procedure TI2C4_I2C2ASTAT.setR_W; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,8($a0)
end;
procedure TI2C4_I2C2ASTAT.clearR_W; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,4($a0)
end;
procedure TI2C4_I2C2ASTAT.setR_W(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,2,1
  sw      $v1,($a0)
end;
function  TI2C4_I2C2ASTAT.getR_W : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,2,1
end;
procedure TI2C4_I2C2ASTAT.setS; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,8($a0)
end;
procedure TI2C4_I2C2ASTAT.clearS; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,4($a0)
end;
procedure TI2C4_I2C2ASTAT.setS(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,3,1
  sw      $v1,($a0)
end;
function  TI2C4_I2C2ASTAT.getS : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,3,1
end;
procedure TI2C4_I2C2ASTAT.setP; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,8($a0)
end;
procedure TI2C4_I2C2ASTAT.clearP; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,4($a0)
end;
procedure TI2C4_I2C2ASTAT.setP(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,4,1
  sw      $v1,($a0)
end;
function  TI2C4_I2C2ASTAT.getP : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,4,1
end;
procedure TI2C4_I2C2ASTAT.setD_A; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,8($a0)
end;
procedure TI2C4_I2C2ASTAT.clearD_A; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,4($a0)
end;
procedure TI2C4_I2C2ASTAT.setD_A(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,5,1
  sw      $v1,($a0)
end;
function  TI2C4_I2C2ASTAT.getD_A : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,5,1
end;
procedure TI2C4_I2C2ASTAT.setI2COV; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,8($a0)
end;
procedure TI2C4_I2C2ASTAT.clearI2COV; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,4($a0)
end;
procedure TI2C4_I2C2ASTAT.setI2COV(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,6,1
  sw      $v1,($a0)
end;
function  TI2C4_I2C2ASTAT.getI2COV : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,6,1
end;
procedure TI2C4_I2C2ASTAT.setIWCOL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,8($a0)
end;
procedure TI2C4_I2C2ASTAT.clearIWCOL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,4($a0)
end;
procedure TI2C4_I2C2ASTAT.setIWCOL(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,7,1
  sw      $v1,($a0)
end;
function  TI2C4_I2C2ASTAT.getIWCOL : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,7,1
end;
procedure TI2C4_I2C2ASTAT.setADD10; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,8($a0)
end;
procedure TI2C4_I2C2ASTAT.clearADD10; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,4($a0)
end;
procedure TI2C4_I2C2ASTAT.setADD10(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,8,1
  sw      $v1,($a0)
end;
function  TI2C4_I2C2ASTAT.getADD10 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,8,1
end;
procedure TI2C4_I2C2ASTAT.setGCSTAT; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,512
  sw $a1,8($a0)
end;
procedure TI2C4_I2C2ASTAT.clearGCSTAT; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,512
  sw $a1,4($a0)
end;
procedure TI2C4_I2C2ASTAT.setGCSTAT(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,9,1
  sw      $v1,($a0)
end;
function  TI2C4_I2C2ASTAT.getGCSTAT : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,9,1
end;
procedure TI2C4_I2C2ASTAT.setBCL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1024
  sw $a1,8($a0)
end;
procedure TI2C4_I2C2ASTAT.clearBCL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1024
  sw $a1,4($a0)
end;
procedure TI2C4_I2C2ASTAT.setBCL(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,10,1
  sw      $v1,($a0)
end;
function  TI2C4_I2C2ASTAT.getBCL : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,10,1
end;
procedure TI2C4_I2C2ASTAT.setTRSTAT; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16384
  sw $a1,8($a0)
end;
procedure TI2C4_I2C2ASTAT.clearTRSTAT; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16384
  sw $a1,4($a0)
end;
procedure TI2C4_I2C2ASTAT.setTRSTAT(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,14,1
  sw      $v1,($a0)
end;
function  TI2C4_I2C2ASTAT.getTRSTAT : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,14,1
end;
procedure TI2C4_I2C2ASTAT.setACKSTAT; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,8($a0)
end;
procedure TI2C4_I2C2ASTAT.clearACKSTAT; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,4($a0)
end;
procedure TI2C4_I2C2ASTAT.setACKSTAT(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,15,1
  sw      $v1,($a0)
end;
function  TI2C4_I2C2ASTAT.getACKSTAT : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,15,1
end;
procedure TI2C4_I2C2ASTAT.setI2CPOV; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,8($a0)
end;
procedure TI2C4_I2C2ASTAT.clearI2CPOV; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,4($a0)
end;
procedure TI2C4_I2C2ASTAT.setI2CPOV(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,6,1
  sw      $v1,($a0)
end;
function  TI2C4_I2C2ASTAT.getI2CPOV : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,6,1
end;
procedure TI2C4_I2C2ASTAT.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TI2C4_I2C2ASTAT.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TI2C4_I2C4STAT.setTBF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,8($a0)
end;
procedure TI2C4_I2C4STAT.clearTBF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,4($a0)
end;
procedure TI2C4_I2C4STAT.setTBF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,1
  sw      $v1,($a0)
end;
function  TI2C4_I2C4STAT.getTBF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,1
end;
procedure TI2C4_I2C4STAT.setRBF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,8($a0)
end;
procedure TI2C4_I2C4STAT.clearRBF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,4($a0)
end;
procedure TI2C4_I2C4STAT.setRBF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,1,1
  sw      $v1,($a0)
end;
function  TI2C4_I2C4STAT.getRBF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,1,1
end;
procedure TI2C4_I2C4STAT.setR_W; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,8($a0)
end;
procedure TI2C4_I2C4STAT.clearR_W; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,4($a0)
end;
procedure TI2C4_I2C4STAT.setR_W(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,2,1
  sw      $v1,($a0)
end;
function  TI2C4_I2C4STAT.getR_W : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,2,1
end;
procedure TI2C4_I2C4STAT.setS; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,8($a0)
end;
procedure TI2C4_I2C4STAT.clearS; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,4($a0)
end;
procedure TI2C4_I2C4STAT.setS(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,3,1
  sw      $v1,($a0)
end;
function  TI2C4_I2C4STAT.getS : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,3,1
end;
procedure TI2C4_I2C4STAT.setP; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,8($a0)
end;
procedure TI2C4_I2C4STAT.clearP; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,4($a0)
end;
procedure TI2C4_I2C4STAT.setP(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,4,1
  sw      $v1,($a0)
end;
function  TI2C4_I2C4STAT.getP : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,4,1
end;
procedure TI2C4_I2C4STAT.setD_A; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,8($a0)
end;
procedure TI2C4_I2C4STAT.clearD_A; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,4($a0)
end;
procedure TI2C4_I2C4STAT.setD_A(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,5,1
  sw      $v1,($a0)
end;
function  TI2C4_I2C4STAT.getD_A : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,5,1
end;
procedure TI2C4_I2C4STAT.setI2COV; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,8($a0)
end;
procedure TI2C4_I2C4STAT.clearI2COV; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,4($a0)
end;
procedure TI2C4_I2C4STAT.setI2COV(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,6,1
  sw      $v1,($a0)
end;
function  TI2C4_I2C4STAT.getI2COV : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,6,1
end;
procedure TI2C4_I2C4STAT.setIWCOL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,8($a0)
end;
procedure TI2C4_I2C4STAT.clearIWCOL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,4($a0)
end;
procedure TI2C4_I2C4STAT.setIWCOL(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,7,1
  sw      $v1,($a0)
end;
function  TI2C4_I2C4STAT.getIWCOL : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,7,1
end;
procedure TI2C4_I2C4STAT.setADD10; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,8($a0)
end;
procedure TI2C4_I2C4STAT.clearADD10; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,4($a0)
end;
procedure TI2C4_I2C4STAT.setADD10(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,8,1
  sw      $v1,($a0)
end;
function  TI2C4_I2C4STAT.getADD10 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,8,1
end;
procedure TI2C4_I2C4STAT.setGCSTAT; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,512
  sw $a1,8($a0)
end;
procedure TI2C4_I2C4STAT.clearGCSTAT; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,512
  sw $a1,4($a0)
end;
procedure TI2C4_I2C4STAT.setGCSTAT(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,9,1
  sw      $v1,($a0)
end;
function  TI2C4_I2C4STAT.getGCSTAT : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,9,1
end;
procedure TI2C4_I2C4STAT.setBCL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1024
  sw $a1,8($a0)
end;
procedure TI2C4_I2C4STAT.clearBCL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1024
  sw $a1,4($a0)
end;
procedure TI2C4_I2C4STAT.setBCL(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,10,1
  sw      $v1,($a0)
end;
function  TI2C4_I2C4STAT.getBCL : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,10,1
end;
procedure TI2C4_I2C4STAT.setTRSTAT; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16384
  sw $a1,8($a0)
end;
procedure TI2C4_I2C4STAT.clearTRSTAT; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16384
  sw $a1,4($a0)
end;
procedure TI2C4_I2C4STAT.setTRSTAT(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,14,1
  sw      $v1,($a0)
end;
function  TI2C4_I2C4STAT.getTRSTAT : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,14,1
end;
procedure TI2C4_I2C4STAT.setACKSTAT; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,8($a0)
end;
procedure TI2C4_I2C4STAT.clearACKSTAT; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,4($a0)
end;
procedure TI2C4_I2C4STAT.setACKSTAT(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,15,1
  sw      $v1,($a0)
end;
function  TI2C4_I2C4STAT.getACKSTAT : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,15,1
end;
procedure TI2C4_I2C4STAT.setI2CPOV; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,8($a0)
end;
procedure TI2C4_I2C4STAT.clearI2CPOV; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,4($a0)
end;
procedure TI2C4_I2C4STAT.setI2CPOV(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,6,1
  sw      $v1,($a0)
end;
function  TI2C4_I2C4STAT.getI2CPOV : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,6,1
end;
procedure TI2C4_I2C4STAT.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TI2C4_I2C4STAT.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TI2C5_I2C3ACON.setSEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,8($a0)
end;
procedure TI2C5_I2C3ACON.clearSEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,4($a0)
end;
procedure TI2C5_I2C3ACON.setSEN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,1
  sw      $v1,($a0)
end;
function  TI2C5_I2C3ACON.getSEN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,1
end;
procedure TI2C5_I2C3ACON.setRSEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,8($a0)
end;
procedure TI2C5_I2C3ACON.clearRSEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,4($a0)
end;
procedure TI2C5_I2C3ACON.setRSEN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,1,1
  sw      $v1,($a0)
end;
function  TI2C5_I2C3ACON.getRSEN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,1,1
end;
procedure TI2C5_I2C3ACON.setPEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,8($a0)
end;
procedure TI2C5_I2C3ACON.clearPEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,4($a0)
end;
procedure TI2C5_I2C3ACON.setPEN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,2,1
  sw      $v1,($a0)
end;
function  TI2C5_I2C3ACON.getPEN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,2,1
end;
procedure TI2C5_I2C3ACON.setRCEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,8($a0)
end;
procedure TI2C5_I2C3ACON.clearRCEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,4($a0)
end;
procedure TI2C5_I2C3ACON.setRCEN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,3,1
  sw      $v1,($a0)
end;
function  TI2C5_I2C3ACON.getRCEN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,3,1
end;
procedure TI2C5_I2C3ACON.setACKEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,8($a0)
end;
procedure TI2C5_I2C3ACON.clearACKEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,4($a0)
end;
procedure TI2C5_I2C3ACON.setACKEN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,4,1
  sw      $v1,($a0)
end;
function  TI2C5_I2C3ACON.getACKEN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,4,1
end;
procedure TI2C5_I2C3ACON.setACKDT; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,8($a0)
end;
procedure TI2C5_I2C3ACON.clearACKDT; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,4($a0)
end;
procedure TI2C5_I2C3ACON.setACKDT(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,5,1
  sw      $v1,($a0)
end;
function  TI2C5_I2C3ACON.getACKDT : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,5,1
end;
procedure TI2C5_I2C3ACON.setSTREN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,8($a0)
end;
procedure TI2C5_I2C3ACON.clearSTREN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,4($a0)
end;
procedure TI2C5_I2C3ACON.setSTREN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,6,1
  sw      $v1,($a0)
end;
function  TI2C5_I2C3ACON.getSTREN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,6,1
end;
procedure TI2C5_I2C3ACON.setGCEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,8($a0)
end;
procedure TI2C5_I2C3ACON.clearGCEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,4($a0)
end;
procedure TI2C5_I2C3ACON.setGCEN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,7,1
  sw      $v1,($a0)
end;
function  TI2C5_I2C3ACON.getGCEN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,7,1
end;
procedure TI2C5_I2C3ACON.setSMEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,8($a0)
end;
procedure TI2C5_I2C3ACON.clearSMEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,4($a0)
end;
procedure TI2C5_I2C3ACON.setSMEN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,8,1
  sw      $v1,($a0)
end;
function  TI2C5_I2C3ACON.getSMEN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,8,1
end;
procedure TI2C5_I2C3ACON.setDISSLW; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,512
  sw $a1,8($a0)
end;
procedure TI2C5_I2C3ACON.clearDISSLW; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,512
  sw $a1,4($a0)
end;
procedure TI2C5_I2C3ACON.setDISSLW(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,9,1
  sw      $v1,($a0)
end;
function  TI2C5_I2C3ACON.getDISSLW : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,9,1
end;
procedure TI2C5_I2C3ACON.setA10M; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1024
  sw $a1,8($a0)
end;
procedure TI2C5_I2C3ACON.clearA10M; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1024
  sw $a1,4($a0)
end;
procedure TI2C5_I2C3ACON.setA10M(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,10,1
  sw      $v1,($a0)
end;
function  TI2C5_I2C3ACON.getA10M : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,10,1
end;
procedure TI2C5_I2C3ACON.setSTRICT; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2048
  sw $a1,8($a0)
end;
procedure TI2C5_I2C3ACON.clearSTRICT; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2048
  sw $a1,4($a0)
end;
procedure TI2C5_I2C3ACON.setSTRICT(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,11,1
  sw      $v1,($a0)
end;
function  TI2C5_I2C3ACON.getSTRICT : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,11,1
end;
procedure TI2C5_I2C3ACON.setSCLREL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4096
  sw $a1,8($a0)
end;
procedure TI2C5_I2C3ACON.clearSCLREL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4096
  sw $a1,4($a0)
end;
procedure TI2C5_I2C3ACON.setSCLREL(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,12,1
  sw      $v1,($a0)
end;
function  TI2C5_I2C3ACON.getSCLREL : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,12,1
end;
procedure TI2C5_I2C3ACON.setSIDL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,8($a0)
end;
procedure TI2C5_I2C3ACON.clearSIDL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,4($a0)
end;
procedure TI2C5_I2C3ACON.setSIDL(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,13,1
  sw      $v1,($a0)
end;
function  TI2C5_I2C3ACON.getSIDL : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,13,1
end;
procedure TI2C5_I2C3ACON.setON; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,8($a0)
end;
procedure TI2C5_I2C3ACON.clearON; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,4($a0)
end;
procedure TI2C5_I2C3ACON.setON(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,15,1
  sw      $v1,($a0)
end;
function  TI2C5_I2C3ACON.getON : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,15,1
end;
procedure TI2C5_I2C3ACON.setIPMIEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2048
  sw $a1,8($a0)
end;
procedure TI2C5_I2C3ACON.clearIPMIEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2048
  sw $a1,4($a0)
end;
procedure TI2C5_I2C3ACON.setIPMIEN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,11,1
  sw      $v1,($a0)
end;
function  TI2C5_I2C3ACON.getIPMIEN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,11,1
end;
procedure TI2C5_I2C3ACON.setI2CSIDL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,8($a0)
end;
procedure TI2C5_I2C3ACON.clearI2CSIDL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,4($a0)
end;
procedure TI2C5_I2C3ACON.setI2CSIDL(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,13,1
  sw      $v1,($a0)
end;
function  TI2C5_I2C3ACON.getI2CSIDL : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,13,1
end;
procedure TI2C5_I2C3ACON.setI2CEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,8($a0)
end;
procedure TI2C5_I2C3ACON.clearI2CEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,4($a0)
end;
procedure TI2C5_I2C3ACON.setI2CEN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,15,1
  sw      $v1,($a0)
end;
function  TI2C5_I2C3ACON.getI2CEN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,15,1
end;
procedure TI2C5_I2C3ACON.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TI2C5_I2C3ACON.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TI2C5_I2C5CON.setSEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,8($a0)
end;
procedure TI2C5_I2C5CON.clearSEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,4($a0)
end;
procedure TI2C5_I2C5CON.setSEN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,1
  sw      $v1,($a0)
end;
function  TI2C5_I2C5CON.getSEN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,1
end;
procedure TI2C5_I2C5CON.setRSEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,8($a0)
end;
procedure TI2C5_I2C5CON.clearRSEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,4($a0)
end;
procedure TI2C5_I2C5CON.setRSEN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,1,1
  sw      $v1,($a0)
end;
function  TI2C5_I2C5CON.getRSEN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,1,1
end;
procedure TI2C5_I2C5CON.setPEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,8($a0)
end;
procedure TI2C5_I2C5CON.clearPEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,4($a0)
end;
procedure TI2C5_I2C5CON.setPEN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,2,1
  sw      $v1,($a0)
end;
function  TI2C5_I2C5CON.getPEN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,2,1
end;
procedure TI2C5_I2C5CON.setRCEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,8($a0)
end;
procedure TI2C5_I2C5CON.clearRCEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,4($a0)
end;
procedure TI2C5_I2C5CON.setRCEN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,3,1
  sw      $v1,($a0)
end;
function  TI2C5_I2C5CON.getRCEN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,3,1
end;
procedure TI2C5_I2C5CON.setACKEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,8($a0)
end;
procedure TI2C5_I2C5CON.clearACKEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,4($a0)
end;
procedure TI2C5_I2C5CON.setACKEN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,4,1
  sw      $v1,($a0)
end;
function  TI2C5_I2C5CON.getACKEN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,4,1
end;
procedure TI2C5_I2C5CON.setACKDT; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,8($a0)
end;
procedure TI2C5_I2C5CON.clearACKDT; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,4($a0)
end;
procedure TI2C5_I2C5CON.setACKDT(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,5,1
  sw      $v1,($a0)
end;
function  TI2C5_I2C5CON.getACKDT : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,5,1
end;
procedure TI2C5_I2C5CON.setSTREN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,8($a0)
end;
procedure TI2C5_I2C5CON.clearSTREN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,4($a0)
end;
procedure TI2C5_I2C5CON.setSTREN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,6,1
  sw      $v1,($a0)
end;
function  TI2C5_I2C5CON.getSTREN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,6,1
end;
procedure TI2C5_I2C5CON.setGCEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,8($a0)
end;
procedure TI2C5_I2C5CON.clearGCEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,4($a0)
end;
procedure TI2C5_I2C5CON.setGCEN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,7,1
  sw      $v1,($a0)
end;
function  TI2C5_I2C5CON.getGCEN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,7,1
end;
procedure TI2C5_I2C5CON.setSMEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,8($a0)
end;
procedure TI2C5_I2C5CON.clearSMEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,4($a0)
end;
procedure TI2C5_I2C5CON.setSMEN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,8,1
  sw      $v1,($a0)
end;
function  TI2C5_I2C5CON.getSMEN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,8,1
end;
procedure TI2C5_I2C5CON.setDISSLW; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,512
  sw $a1,8($a0)
end;
procedure TI2C5_I2C5CON.clearDISSLW; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,512
  sw $a1,4($a0)
end;
procedure TI2C5_I2C5CON.setDISSLW(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,9,1
  sw      $v1,($a0)
end;
function  TI2C5_I2C5CON.getDISSLW : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,9,1
end;
procedure TI2C5_I2C5CON.setA10M; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1024
  sw $a1,8($a0)
end;
procedure TI2C5_I2C5CON.clearA10M; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1024
  sw $a1,4($a0)
end;
procedure TI2C5_I2C5CON.setA10M(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,10,1
  sw      $v1,($a0)
end;
function  TI2C5_I2C5CON.getA10M : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,10,1
end;
procedure TI2C5_I2C5CON.setSTRICT; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2048
  sw $a1,8($a0)
end;
procedure TI2C5_I2C5CON.clearSTRICT; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2048
  sw $a1,4($a0)
end;
procedure TI2C5_I2C5CON.setSTRICT(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,11,1
  sw      $v1,($a0)
end;
function  TI2C5_I2C5CON.getSTRICT : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,11,1
end;
procedure TI2C5_I2C5CON.setSCLREL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4096
  sw $a1,8($a0)
end;
procedure TI2C5_I2C5CON.clearSCLREL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4096
  sw $a1,4($a0)
end;
procedure TI2C5_I2C5CON.setSCLREL(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,12,1
  sw      $v1,($a0)
end;
function  TI2C5_I2C5CON.getSCLREL : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,12,1
end;
procedure TI2C5_I2C5CON.setSIDL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,8($a0)
end;
procedure TI2C5_I2C5CON.clearSIDL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,4($a0)
end;
procedure TI2C5_I2C5CON.setSIDL(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,13,1
  sw      $v1,($a0)
end;
function  TI2C5_I2C5CON.getSIDL : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,13,1
end;
procedure TI2C5_I2C5CON.setON; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,8($a0)
end;
procedure TI2C5_I2C5CON.clearON; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,4($a0)
end;
procedure TI2C5_I2C5CON.setON(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,15,1
  sw      $v1,($a0)
end;
function  TI2C5_I2C5CON.getON : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,15,1
end;
procedure TI2C5_I2C5CON.setIPMIEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2048
  sw $a1,8($a0)
end;
procedure TI2C5_I2C5CON.clearIPMIEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2048
  sw $a1,4($a0)
end;
procedure TI2C5_I2C5CON.setIPMIEN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,11,1
  sw      $v1,($a0)
end;
function  TI2C5_I2C5CON.getIPMIEN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,11,1
end;
procedure TI2C5_I2C5CON.setI2CSIDL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,8($a0)
end;
procedure TI2C5_I2C5CON.clearI2CSIDL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,4($a0)
end;
procedure TI2C5_I2C5CON.setI2CSIDL(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,13,1
  sw      $v1,($a0)
end;
function  TI2C5_I2C5CON.getI2CSIDL : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,13,1
end;
procedure TI2C5_I2C5CON.setI2CEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,8($a0)
end;
procedure TI2C5_I2C5CON.clearI2CEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,4($a0)
end;
procedure TI2C5_I2C5CON.setI2CEN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,15,1
  sw      $v1,($a0)
end;
function  TI2C5_I2C5CON.getI2CEN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,15,1
end;
procedure TI2C5_I2C5CON.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TI2C5_I2C5CON.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TI2C5_I2C3ASTAT.setTBF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,8($a0)
end;
procedure TI2C5_I2C3ASTAT.clearTBF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,4($a0)
end;
procedure TI2C5_I2C3ASTAT.setTBF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,1
  sw      $v1,($a0)
end;
function  TI2C5_I2C3ASTAT.getTBF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,1
end;
procedure TI2C5_I2C3ASTAT.setRBF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,8($a0)
end;
procedure TI2C5_I2C3ASTAT.clearRBF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,4($a0)
end;
procedure TI2C5_I2C3ASTAT.setRBF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,1,1
  sw      $v1,($a0)
end;
function  TI2C5_I2C3ASTAT.getRBF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,1,1
end;
procedure TI2C5_I2C3ASTAT.setR_W; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,8($a0)
end;
procedure TI2C5_I2C3ASTAT.clearR_W; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,4($a0)
end;
procedure TI2C5_I2C3ASTAT.setR_W(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,2,1
  sw      $v1,($a0)
end;
function  TI2C5_I2C3ASTAT.getR_W : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,2,1
end;
procedure TI2C5_I2C3ASTAT.setS; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,8($a0)
end;
procedure TI2C5_I2C3ASTAT.clearS; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,4($a0)
end;
procedure TI2C5_I2C3ASTAT.setS(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,3,1
  sw      $v1,($a0)
end;
function  TI2C5_I2C3ASTAT.getS : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,3,1
end;
procedure TI2C5_I2C3ASTAT.setP; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,8($a0)
end;
procedure TI2C5_I2C3ASTAT.clearP; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,4($a0)
end;
procedure TI2C5_I2C3ASTAT.setP(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,4,1
  sw      $v1,($a0)
end;
function  TI2C5_I2C3ASTAT.getP : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,4,1
end;
procedure TI2C5_I2C3ASTAT.setD_A; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,8($a0)
end;
procedure TI2C5_I2C3ASTAT.clearD_A; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,4($a0)
end;
procedure TI2C5_I2C3ASTAT.setD_A(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,5,1
  sw      $v1,($a0)
end;
function  TI2C5_I2C3ASTAT.getD_A : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,5,1
end;
procedure TI2C5_I2C3ASTAT.setI2COV; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,8($a0)
end;
procedure TI2C5_I2C3ASTAT.clearI2COV; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,4($a0)
end;
procedure TI2C5_I2C3ASTAT.setI2COV(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,6,1
  sw      $v1,($a0)
end;
function  TI2C5_I2C3ASTAT.getI2COV : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,6,1
end;
procedure TI2C5_I2C3ASTAT.setIWCOL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,8($a0)
end;
procedure TI2C5_I2C3ASTAT.clearIWCOL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,4($a0)
end;
procedure TI2C5_I2C3ASTAT.setIWCOL(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,7,1
  sw      $v1,($a0)
end;
function  TI2C5_I2C3ASTAT.getIWCOL : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,7,1
end;
procedure TI2C5_I2C3ASTAT.setADD10; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,8($a0)
end;
procedure TI2C5_I2C3ASTAT.clearADD10; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,4($a0)
end;
procedure TI2C5_I2C3ASTAT.setADD10(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,8,1
  sw      $v1,($a0)
end;
function  TI2C5_I2C3ASTAT.getADD10 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,8,1
end;
procedure TI2C5_I2C3ASTAT.setGCSTAT; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,512
  sw $a1,8($a0)
end;
procedure TI2C5_I2C3ASTAT.clearGCSTAT; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,512
  sw $a1,4($a0)
end;
procedure TI2C5_I2C3ASTAT.setGCSTAT(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,9,1
  sw      $v1,($a0)
end;
function  TI2C5_I2C3ASTAT.getGCSTAT : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,9,1
end;
procedure TI2C5_I2C3ASTAT.setBCL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1024
  sw $a1,8($a0)
end;
procedure TI2C5_I2C3ASTAT.clearBCL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1024
  sw $a1,4($a0)
end;
procedure TI2C5_I2C3ASTAT.setBCL(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,10,1
  sw      $v1,($a0)
end;
function  TI2C5_I2C3ASTAT.getBCL : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,10,1
end;
procedure TI2C5_I2C3ASTAT.setTRSTAT; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16384
  sw $a1,8($a0)
end;
procedure TI2C5_I2C3ASTAT.clearTRSTAT; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16384
  sw $a1,4($a0)
end;
procedure TI2C5_I2C3ASTAT.setTRSTAT(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,14,1
  sw      $v1,($a0)
end;
function  TI2C5_I2C3ASTAT.getTRSTAT : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,14,1
end;
procedure TI2C5_I2C3ASTAT.setACKSTAT; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,8($a0)
end;
procedure TI2C5_I2C3ASTAT.clearACKSTAT; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,4($a0)
end;
procedure TI2C5_I2C3ASTAT.setACKSTAT(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,15,1
  sw      $v1,($a0)
end;
function  TI2C5_I2C3ASTAT.getACKSTAT : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,15,1
end;
procedure TI2C5_I2C3ASTAT.setI2CPOV; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,8($a0)
end;
procedure TI2C5_I2C3ASTAT.clearI2CPOV; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,4($a0)
end;
procedure TI2C5_I2C3ASTAT.setI2CPOV(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,6,1
  sw      $v1,($a0)
end;
function  TI2C5_I2C3ASTAT.getI2CPOV : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,6,1
end;
procedure TI2C5_I2C3ASTAT.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TI2C5_I2C3ASTAT.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TI2C5_I2C5STAT.setTBF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,8($a0)
end;
procedure TI2C5_I2C5STAT.clearTBF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,4($a0)
end;
procedure TI2C5_I2C5STAT.setTBF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,1
  sw      $v1,($a0)
end;
function  TI2C5_I2C5STAT.getTBF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,1
end;
procedure TI2C5_I2C5STAT.setRBF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,8($a0)
end;
procedure TI2C5_I2C5STAT.clearRBF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,4($a0)
end;
procedure TI2C5_I2C5STAT.setRBF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,1,1
  sw      $v1,($a0)
end;
function  TI2C5_I2C5STAT.getRBF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,1,1
end;
procedure TI2C5_I2C5STAT.setR_W; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,8($a0)
end;
procedure TI2C5_I2C5STAT.clearR_W; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,4($a0)
end;
procedure TI2C5_I2C5STAT.setR_W(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,2,1
  sw      $v1,($a0)
end;
function  TI2C5_I2C5STAT.getR_W : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,2,1
end;
procedure TI2C5_I2C5STAT.setS; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,8($a0)
end;
procedure TI2C5_I2C5STAT.clearS; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,4($a0)
end;
procedure TI2C5_I2C5STAT.setS(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,3,1
  sw      $v1,($a0)
end;
function  TI2C5_I2C5STAT.getS : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,3,1
end;
procedure TI2C5_I2C5STAT.setP; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,8($a0)
end;
procedure TI2C5_I2C5STAT.clearP; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,4($a0)
end;
procedure TI2C5_I2C5STAT.setP(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,4,1
  sw      $v1,($a0)
end;
function  TI2C5_I2C5STAT.getP : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,4,1
end;
procedure TI2C5_I2C5STAT.setD_A; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,8($a0)
end;
procedure TI2C5_I2C5STAT.clearD_A; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,4($a0)
end;
procedure TI2C5_I2C5STAT.setD_A(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,5,1
  sw      $v1,($a0)
end;
function  TI2C5_I2C5STAT.getD_A : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,5,1
end;
procedure TI2C5_I2C5STAT.setI2COV; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,8($a0)
end;
procedure TI2C5_I2C5STAT.clearI2COV; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,4($a0)
end;
procedure TI2C5_I2C5STAT.setI2COV(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,6,1
  sw      $v1,($a0)
end;
function  TI2C5_I2C5STAT.getI2COV : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,6,1
end;
procedure TI2C5_I2C5STAT.setIWCOL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,8($a0)
end;
procedure TI2C5_I2C5STAT.clearIWCOL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,4($a0)
end;
procedure TI2C5_I2C5STAT.setIWCOL(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,7,1
  sw      $v1,($a0)
end;
function  TI2C5_I2C5STAT.getIWCOL : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,7,1
end;
procedure TI2C5_I2C5STAT.setADD10; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,8($a0)
end;
procedure TI2C5_I2C5STAT.clearADD10; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,4($a0)
end;
procedure TI2C5_I2C5STAT.setADD10(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,8,1
  sw      $v1,($a0)
end;
function  TI2C5_I2C5STAT.getADD10 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,8,1
end;
procedure TI2C5_I2C5STAT.setGCSTAT; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,512
  sw $a1,8($a0)
end;
procedure TI2C5_I2C5STAT.clearGCSTAT; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,512
  sw $a1,4($a0)
end;
procedure TI2C5_I2C5STAT.setGCSTAT(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,9,1
  sw      $v1,($a0)
end;
function  TI2C5_I2C5STAT.getGCSTAT : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,9,1
end;
procedure TI2C5_I2C5STAT.setBCL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1024
  sw $a1,8($a0)
end;
procedure TI2C5_I2C5STAT.clearBCL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1024
  sw $a1,4($a0)
end;
procedure TI2C5_I2C5STAT.setBCL(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,10,1
  sw      $v1,($a0)
end;
function  TI2C5_I2C5STAT.getBCL : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,10,1
end;
procedure TI2C5_I2C5STAT.setTRSTAT; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16384
  sw $a1,8($a0)
end;
procedure TI2C5_I2C5STAT.clearTRSTAT; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16384
  sw $a1,4($a0)
end;
procedure TI2C5_I2C5STAT.setTRSTAT(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,14,1
  sw      $v1,($a0)
end;
function  TI2C5_I2C5STAT.getTRSTAT : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,14,1
end;
procedure TI2C5_I2C5STAT.setACKSTAT; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,8($a0)
end;
procedure TI2C5_I2C5STAT.clearACKSTAT; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,4($a0)
end;
procedure TI2C5_I2C5STAT.setACKSTAT(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,15,1
  sw      $v1,($a0)
end;
function  TI2C5_I2C5STAT.getACKSTAT : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,15,1
end;
procedure TI2C5_I2C5STAT.setI2CPOV; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,8($a0)
end;
procedure TI2C5_I2C5STAT.clearI2CPOV; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,4($a0)
end;
procedure TI2C5_I2C5STAT.setI2CPOV(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,6,1
  sw      $v1,($a0)
end;
function  TI2C5_I2C5STAT.getI2CPOV : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,6,1
end;
procedure TI2C5_I2C5STAT.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TI2C5_I2C5STAT.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TI2C1_I2C1CON.setSEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,8($a0)
end;
procedure TI2C1_I2C1CON.clearSEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,4($a0)
end;
procedure TI2C1_I2C1CON.setSEN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,1
  sw      $v1,($a0)
end;
function  TI2C1_I2C1CON.getSEN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,1
end;
procedure TI2C1_I2C1CON.setRSEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,8($a0)
end;
procedure TI2C1_I2C1CON.clearRSEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,4($a0)
end;
procedure TI2C1_I2C1CON.setRSEN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,1,1
  sw      $v1,($a0)
end;
function  TI2C1_I2C1CON.getRSEN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,1,1
end;
procedure TI2C1_I2C1CON.setPEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,8($a0)
end;
procedure TI2C1_I2C1CON.clearPEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,4($a0)
end;
procedure TI2C1_I2C1CON.setPEN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,2,1
  sw      $v1,($a0)
end;
function  TI2C1_I2C1CON.getPEN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,2,1
end;
procedure TI2C1_I2C1CON.setRCEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,8($a0)
end;
procedure TI2C1_I2C1CON.clearRCEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,4($a0)
end;
procedure TI2C1_I2C1CON.setRCEN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,3,1
  sw      $v1,($a0)
end;
function  TI2C1_I2C1CON.getRCEN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,3,1
end;
procedure TI2C1_I2C1CON.setACKEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,8($a0)
end;
procedure TI2C1_I2C1CON.clearACKEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,4($a0)
end;
procedure TI2C1_I2C1CON.setACKEN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,4,1
  sw      $v1,($a0)
end;
function  TI2C1_I2C1CON.getACKEN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,4,1
end;
procedure TI2C1_I2C1CON.setACKDT; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,8($a0)
end;
procedure TI2C1_I2C1CON.clearACKDT; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,4($a0)
end;
procedure TI2C1_I2C1CON.setACKDT(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,5,1
  sw      $v1,($a0)
end;
function  TI2C1_I2C1CON.getACKDT : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,5,1
end;
procedure TI2C1_I2C1CON.setSTREN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,8($a0)
end;
procedure TI2C1_I2C1CON.clearSTREN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,4($a0)
end;
procedure TI2C1_I2C1CON.setSTREN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,6,1
  sw      $v1,($a0)
end;
function  TI2C1_I2C1CON.getSTREN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,6,1
end;
procedure TI2C1_I2C1CON.setGCEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,8($a0)
end;
procedure TI2C1_I2C1CON.clearGCEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,4($a0)
end;
procedure TI2C1_I2C1CON.setGCEN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,7,1
  sw      $v1,($a0)
end;
function  TI2C1_I2C1CON.getGCEN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,7,1
end;
procedure TI2C1_I2C1CON.setSMEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,8($a0)
end;
procedure TI2C1_I2C1CON.clearSMEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,4($a0)
end;
procedure TI2C1_I2C1CON.setSMEN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,8,1
  sw      $v1,($a0)
end;
function  TI2C1_I2C1CON.getSMEN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,8,1
end;
procedure TI2C1_I2C1CON.setDISSLW; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,512
  sw $a1,8($a0)
end;
procedure TI2C1_I2C1CON.clearDISSLW; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,512
  sw $a1,4($a0)
end;
procedure TI2C1_I2C1CON.setDISSLW(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,9,1
  sw      $v1,($a0)
end;
function  TI2C1_I2C1CON.getDISSLW : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,9,1
end;
procedure TI2C1_I2C1CON.setA10M; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1024
  sw $a1,8($a0)
end;
procedure TI2C1_I2C1CON.clearA10M; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1024
  sw $a1,4($a0)
end;
procedure TI2C1_I2C1CON.setA10M(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,10,1
  sw      $v1,($a0)
end;
function  TI2C1_I2C1CON.getA10M : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,10,1
end;
procedure TI2C1_I2C1CON.setSTRICT; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2048
  sw $a1,8($a0)
end;
procedure TI2C1_I2C1CON.clearSTRICT; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2048
  sw $a1,4($a0)
end;
procedure TI2C1_I2C1CON.setSTRICT(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,11,1
  sw      $v1,($a0)
end;
function  TI2C1_I2C1CON.getSTRICT : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,11,1
end;
procedure TI2C1_I2C1CON.setSCLREL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4096
  sw $a1,8($a0)
end;
procedure TI2C1_I2C1CON.clearSCLREL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4096
  sw $a1,4($a0)
end;
procedure TI2C1_I2C1CON.setSCLREL(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,12,1
  sw      $v1,($a0)
end;
function  TI2C1_I2C1CON.getSCLREL : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,12,1
end;
procedure TI2C1_I2C1CON.setSIDL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,8($a0)
end;
procedure TI2C1_I2C1CON.clearSIDL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,4($a0)
end;
procedure TI2C1_I2C1CON.setSIDL(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,13,1
  sw      $v1,($a0)
end;
function  TI2C1_I2C1CON.getSIDL : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,13,1
end;
procedure TI2C1_I2C1CON.setON; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,8($a0)
end;
procedure TI2C1_I2C1CON.clearON; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,4($a0)
end;
procedure TI2C1_I2C1CON.setON(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,15,1
  sw      $v1,($a0)
end;
function  TI2C1_I2C1CON.getON : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,15,1
end;
procedure TI2C1_I2C1CON.setIPMIEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2048
  sw $a1,8($a0)
end;
procedure TI2C1_I2C1CON.clearIPMIEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2048
  sw $a1,4($a0)
end;
procedure TI2C1_I2C1CON.setIPMIEN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,11,1
  sw      $v1,($a0)
end;
function  TI2C1_I2C1CON.getIPMIEN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,11,1
end;
procedure TI2C1_I2C1CON.setI2CSIDL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,8($a0)
end;
procedure TI2C1_I2C1CON.clearI2CSIDL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,4($a0)
end;
procedure TI2C1_I2C1CON.setI2CSIDL(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,13,1
  sw      $v1,($a0)
end;
function  TI2C1_I2C1CON.getI2CSIDL : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,13,1
end;
procedure TI2C1_I2C1CON.setI2CEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,8($a0)
end;
procedure TI2C1_I2C1CON.clearI2CEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,4($a0)
end;
procedure TI2C1_I2C1CON.setI2CEN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,15,1
  sw      $v1,($a0)
end;
function  TI2C1_I2C1CON.getI2CEN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,15,1
end;
procedure TI2C1_I2C1CON.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TI2C1_I2C1CON.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TI2C1_I2C1STAT.setTBF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,8($a0)
end;
procedure TI2C1_I2C1STAT.clearTBF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,4($a0)
end;
procedure TI2C1_I2C1STAT.setTBF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,1
  sw      $v1,($a0)
end;
function  TI2C1_I2C1STAT.getTBF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,1
end;
procedure TI2C1_I2C1STAT.setRBF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,8($a0)
end;
procedure TI2C1_I2C1STAT.clearRBF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,4($a0)
end;
procedure TI2C1_I2C1STAT.setRBF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,1,1
  sw      $v1,($a0)
end;
function  TI2C1_I2C1STAT.getRBF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,1,1
end;
procedure TI2C1_I2C1STAT.setR_W; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,8($a0)
end;
procedure TI2C1_I2C1STAT.clearR_W; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,4($a0)
end;
procedure TI2C1_I2C1STAT.setR_W(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,2,1
  sw      $v1,($a0)
end;
function  TI2C1_I2C1STAT.getR_W : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,2,1
end;
procedure TI2C1_I2C1STAT.setS; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,8($a0)
end;
procedure TI2C1_I2C1STAT.clearS; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,4($a0)
end;
procedure TI2C1_I2C1STAT.setS(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,3,1
  sw      $v1,($a0)
end;
function  TI2C1_I2C1STAT.getS : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,3,1
end;
procedure TI2C1_I2C1STAT.setP; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,8($a0)
end;
procedure TI2C1_I2C1STAT.clearP; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,4($a0)
end;
procedure TI2C1_I2C1STAT.setP(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,4,1
  sw      $v1,($a0)
end;
function  TI2C1_I2C1STAT.getP : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,4,1
end;
procedure TI2C1_I2C1STAT.setD_A; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,8($a0)
end;
procedure TI2C1_I2C1STAT.clearD_A; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,4($a0)
end;
procedure TI2C1_I2C1STAT.setD_A(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,5,1
  sw      $v1,($a0)
end;
function  TI2C1_I2C1STAT.getD_A : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,5,1
end;
procedure TI2C1_I2C1STAT.setI2COV; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,8($a0)
end;
procedure TI2C1_I2C1STAT.clearI2COV; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,4($a0)
end;
procedure TI2C1_I2C1STAT.setI2COV(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,6,1
  sw      $v1,($a0)
end;
function  TI2C1_I2C1STAT.getI2COV : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,6,1
end;
procedure TI2C1_I2C1STAT.setIWCOL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,8($a0)
end;
procedure TI2C1_I2C1STAT.clearIWCOL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,4($a0)
end;
procedure TI2C1_I2C1STAT.setIWCOL(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,7,1
  sw      $v1,($a0)
end;
function  TI2C1_I2C1STAT.getIWCOL : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,7,1
end;
procedure TI2C1_I2C1STAT.setADD10; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,8($a0)
end;
procedure TI2C1_I2C1STAT.clearADD10; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,4($a0)
end;
procedure TI2C1_I2C1STAT.setADD10(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,8,1
  sw      $v1,($a0)
end;
function  TI2C1_I2C1STAT.getADD10 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,8,1
end;
procedure TI2C1_I2C1STAT.setGCSTAT; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,512
  sw $a1,8($a0)
end;
procedure TI2C1_I2C1STAT.clearGCSTAT; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,512
  sw $a1,4($a0)
end;
procedure TI2C1_I2C1STAT.setGCSTAT(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,9,1
  sw      $v1,($a0)
end;
function  TI2C1_I2C1STAT.getGCSTAT : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,9,1
end;
procedure TI2C1_I2C1STAT.setBCL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1024
  sw $a1,8($a0)
end;
procedure TI2C1_I2C1STAT.clearBCL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1024
  sw $a1,4($a0)
end;
procedure TI2C1_I2C1STAT.setBCL(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,10,1
  sw      $v1,($a0)
end;
function  TI2C1_I2C1STAT.getBCL : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,10,1
end;
procedure TI2C1_I2C1STAT.setTRSTAT; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16384
  sw $a1,8($a0)
end;
procedure TI2C1_I2C1STAT.clearTRSTAT; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16384
  sw $a1,4($a0)
end;
procedure TI2C1_I2C1STAT.setTRSTAT(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,14,1
  sw      $v1,($a0)
end;
function  TI2C1_I2C1STAT.getTRSTAT : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,14,1
end;
procedure TI2C1_I2C1STAT.setACKSTAT; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,8($a0)
end;
procedure TI2C1_I2C1STAT.clearACKSTAT; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,4($a0)
end;
procedure TI2C1_I2C1STAT.setACKSTAT(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,15,1
  sw      $v1,($a0)
end;
function  TI2C1_I2C1STAT.getACKSTAT : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,15,1
end;
procedure TI2C1_I2C1STAT.setI2CPOV; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,8($a0)
end;
procedure TI2C1_I2C1STAT.clearI2CPOV; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,4($a0)
end;
procedure TI2C1_I2C1STAT.setI2CPOV(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,6,1
  sw      $v1,($a0)
end;
function  TI2C1_I2C1STAT.getI2CPOV : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,6,1
end;
procedure TI2C1_I2C1STAT.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TI2C1_I2C1STAT.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TI2C2_I2C2CON.setSEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,8($a0)
end;
procedure TI2C2_I2C2CON.clearSEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,4($a0)
end;
procedure TI2C2_I2C2CON.setSEN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,1
  sw      $v1,($a0)
end;
function  TI2C2_I2C2CON.getSEN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,1
end;
procedure TI2C2_I2C2CON.setRSEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,8($a0)
end;
procedure TI2C2_I2C2CON.clearRSEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,4($a0)
end;
procedure TI2C2_I2C2CON.setRSEN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,1,1
  sw      $v1,($a0)
end;
function  TI2C2_I2C2CON.getRSEN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,1,1
end;
procedure TI2C2_I2C2CON.setPEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,8($a0)
end;
procedure TI2C2_I2C2CON.clearPEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,4($a0)
end;
procedure TI2C2_I2C2CON.setPEN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,2,1
  sw      $v1,($a0)
end;
function  TI2C2_I2C2CON.getPEN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,2,1
end;
procedure TI2C2_I2C2CON.setRCEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,8($a0)
end;
procedure TI2C2_I2C2CON.clearRCEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,4($a0)
end;
procedure TI2C2_I2C2CON.setRCEN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,3,1
  sw      $v1,($a0)
end;
function  TI2C2_I2C2CON.getRCEN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,3,1
end;
procedure TI2C2_I2C2CON.setACKEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,8($a0)
end;
procedure TI2C2_I2C2CON.clearACKEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,4($a0)
end;
procedure TI2C2_I2C2CON.setACKEN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,4,1
  sw      $v1,($a0)
end;
function  TI2C2_I2C2CON.getACKEN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,4,1
end;
procedure TI2C2_I2C2CON.setACKDT; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,8($a0)
end;
procedure TI2C2_I2C2CON.clearACKDT; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,4($a0)
end;
procedure TI2C2_I2C2CON.setACKDT(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,5,1
  sw      $v1,($a0)
end;
function  TI2C2_I2C2CON.getACKDT : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,5,1
end;
procedure TI2C2_I2C2CON.setSTREN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,8($a0)
end;
procedure TI2C2_I2C2CON.clearSTREN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,4($a0)
end;
procedure TI2C2_I2C2CON.setSTREN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,6,1
  sw      $v1,($a0)
end;
function  TI2C2_I2C2CON.getSTREN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,6,1
end;
procedure TI2C2_I2C2CON.setGCEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,8($a0)
end;
procedure TI2C2_I2C2CON.clearGCEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,4($a0)
end;
procedure TI2C2_I2C2CON.setGCEN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,7,1
  sw      $v1,($a0)
end;
function  TI2C2_I2C2CON.getGCEN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,7,1
end;
procedure TI2C2_I2C2CON.setSMEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,8($a0)
end;
procedure TI2C2_I2C2CON.clearSMEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,4($a0)
end;
procedure TI2C2_I2C2CON.setSMEN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,8,1
  sw      $v1,($a0)
end;
function  TI2C2_I2C2CON.getSMEN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,8,1
end;
procedure TI2C2_I2C2CON.setDISSLW; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,512
  sw $a1,8($a0)
end;
procedure TI2C2_I2C2CON.clearDISSLW; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,512
  sw $a1,4($a0)
end;
procedure TI2C2_I2C2CON.setDISSLW(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,9,1
  sw      $v1,($a0)
end;
function  TI2C2_I2C2CON.getDISSLW : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,9,1
end;
procedure TI2C2_I2C2CON.setA10M; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1024
  sw $a1,8($a0)
end;
procedure TI2C2_I2C2CON.clearA10M; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1024
  sw $a1,4($a0)
end;
procedure TI2C2_I2C2CON.setA10M(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,10,1
  sw      $v1,($a0)
end;
function  TI2C2_I2C2CON.getA10M : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,10,1
end;
procedure TI2C2_I2C2CON.setSTRICT; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2048
  sw $a1,8($a0)
end;
procedure TI2C2_I2C2CON.clearSTRICT; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2048
  sw $a1,4($a0)
end;
procedure TI2C2_I2C2CON.setSTRICT(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,11,1
  sw      $v1,($a0)
end;
function  TI2C2_I2C2CON.getSTRICT : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,11,1
end;
procedure TI2C2_I2C2CON.setSCLREL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4096
  sw $a1,8($a0)
end;
procedure TI2C2_I2C2CON.clearSCLREL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4096
  sw $a1,4($a0)
end;
procedure TI2C2_I2C2CON.setSCLREL(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,12,1
  sw      $v1,($a0)
end;
function  TI2C2_I2C2CON.getSCLREL : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,12,1
end;
procedure TI2C2_I2C2CON.setSIDL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,8($a0)
end;
procedure TI2C2_I2C2CON.clearSIDL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,4($a0)
end;
procedure TI2C2_I2C2CON.setSIDL(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,13,1
  sw      $v1,($a0)
end;
function  TI2C2_I2C2CON.getSIDL : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,13,1
end;
procedure TI2C2_I2C2CON.setON; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,8($a0)
end;
procedure TI2C2_I2C2CON.clearON; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,4($a0)
end;
procedure TI2C2_I2C2CON.setON(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,15,1
  sw      $v1,($a0)
end;
function  TI2C2_I2C2CON.getON : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,15,1
end;
procedure TI2C2_I2C2CON.setIPMIEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2048
  sw $a1,8($a0)
end;
procedure TI2C2_I2C2CON.clearIPMIEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2048
  sw $a1,4($a0)
end;
procedure TI2C2_I2C2CON.setIPMIEN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,11,1
  sw      $v1,($a0)
end;
function  TI2C2_I2C2CON.getIPMIEN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,11,1
end;
procedure TI2C2_I2C2CON.setI2CSIDL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,8($a0)
end;
procedure TI2C2_I2C2CON.clearI2CSIDL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,4($a0)
end;
procedure TI2C2_I2C2CON.setI2CSIDL(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,13,1
  sw      $v1,($a0)
end;
function  TI2C2_I2C2CON.getI2CSIDL : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,13,1
end;
procedure TI2C2_I2C2CON.setI2CEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,8($a0)
end;
procedure TI2C2_I2C2CON.clearI2CEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,4($a0)
end;
procedure TI2C2_I2C2CON.setI2CEN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,15,1
  sw      $v1,($a0)
end;
function  TI2C2_I2C2CON.getI2CEN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,15,1
end;
procedure TI2C2_I2C2CON.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TI2C2_I2C2CON.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TI2C2_I2C2STAT.setTBF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,8($a0)
end;
procedure TI2C2_I2C2STAT.clearTBF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,4($a0)
end;
procedure TI2C2_I2C2STAT.setTBF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,1
  sw      $v1,($a0)
end;
function  TI2C2_I2C2STAT.getTBF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,1
end;
procedure TI2C2_I2C2STAT.setRBF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,8($a0)
end;
procedure TI2C2_I2C2STAT.clearRBF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,4($a0)
end;
procedure TI2C2_I2C2STAT.setRBF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,1,1
  sw      $v1,($a0)
end;
function  TI2C2_I2C2STAT.getRBF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,1,1
end;
procedure TI2C2_I2C2STAT.setR_W; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,8($a0)
end;
procedure TI2C2_I2C2STAT.clearR_W; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,4($a0)
end;
procedure TI2C2_I2C2STAT.setR_W(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,2,1
  sw      $v1,($a0)
end;
function  TI2C2_I2C2STAT.getR_W : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,2,1
end;
procedure TI2C2_I2C2STAT.setS; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,8($a0)
end;
procedure TI2C2_I2C2STAT.clearS; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,4($a0)
end;
procedure TI2C2_I2C2STAT.setS(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,3,1
  sw      $v1,($a0)
end;
function  TI2C2_I2C2STAT.getS : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,3,1
end;
procedure TI2C2_I2C2STAT.setP; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,8($a0)
end;
procedure TI2C2_I2C2STAT.clearP; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,4($a0)
end;
procedure TI2C2_I2C2STAT.setP(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,4,1
  sw      $v1,($a0)
end;
function  TI2C2_I2C2STAT.getP : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,4,1
end;
procedure TI2C2_I2C2STAT.setD_A; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,8($a0)
end;
procedure TI2C2_I2C2STAT.clearD_A; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,4($a0)
end;
procedure TI2C2_I2C2STAT.setD_A(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,5,1
  sw      $v1,($a0)
end;
function  TI2C2_I2C2STAT.getD_A : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,5,1
end;
procedure TI2C2_I2C2STAT.setI2COV; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,8($a0)
end;
procedure TI2C2_I2C2STAT.clearI2COV; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,4($a0)
end;
procedure TI2C2_I2C2STAT.setI2COV(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,6,1
  sw      $v1,($a0)
end;
function  TI2C2_I2C2STAT.getI2COV : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,6,1
end;
procedure TI2C2_I2C2STAT.setIWCOL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,8($a0)
end;
procedure TI2C2_I2C2STAT.clearIWCOL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,4($a0)
end;
procedure TI2C2_I2C2STAT.setIWCOL(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,7,1
  sw      $v1,($a0)
end;
function  TI2C2_I2C2STAT.getIWCOL : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,7,1
end;
procedure TI2C2_I2C2STAT.setADD10; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,8($a0)
end;
procedure TI2C2_I2C2STAT.clearADD10; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,4($a0)
end;
procedure TI2C2_I2C2STAT.setADD10(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,8,1
  sw      $v1,($a0)
end;
function  TI2C2_I2C2STAT.getADD10 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,8,1
end;
procedure TI2C2_I2C2STAT.setGCSTAT; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,512
  sw $a1,8($a0)
end;
procedure TI2C2_I2C2STAT.clearGCSTAT; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,512
  sw $a1,4($a0)
end;
procedure TI2C2_I2C2STAT.setGCSTAT(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,9,1
  sw      $v1,($a0)
end;
function  TI2C2_I2C2STAT.getGCSTAT : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,9,1
end;
procedure TI2C2_I2C2STAT.setBCL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1024
  sw $a1,8($a0)
end;
procedure TI2C2_I2C2STAT.clearBCL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1024
  sw $a1,4($a0)
end;
procedure TI2C2_I2C2STAT.setBCL(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,10,1
  sw      $v1,($a0)
end;
function  TI2C2_I2C2STAT.getBCL : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,10,1
end;
procedure TI2C2_I2C2STAT.setTRSTAT; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16384
  sw $a1,8($a0)
end;
procedure TI2C2_I2C2STAT.clearTRSTAT; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16384
  sw $a1,4($a0)
end;
procedure TI2C2_I2C2STAT.setTRSTAT(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,14,1
  sw      $v1,($a0)
end;
function  TI2C2_I2C2STAT.getTRSTAT : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,14,1
end;
procedure TI2C2_I2C2STAT.setACKSTAT; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,8($a0)
end;
procedure TI2C2_I2C2STAT.clearACKSTAT; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,4($a0)
end;
procedure TI2C2_I2C2STAT.setACKSTAT(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,15,1
  sw      $v1,($a0)
end;
function  TI2C2_I2C2STAT.getACKSTAT : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,15,1
end;
procedure TI2C2_I2C2STAT.setI2CPOV; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,8($a0)
end;
procedure TI2C2_I2C2STAT.clearI2CPOV; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,4($a0)
end;
procedure TI2C2_I2C2STAT.setI2CPOV(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,6,1
  sw      $v1,($a0)
end;
function  TI2C2_I2C2STAT.getI2CPOV : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,6,1
end;
procedure TI2C2_I2C2STAT.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TI2C2_I2C2STAT.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TSPI3_SPI1ACON.setSRXISEL(thebits : TBits_2); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,2
  sw      $v1,($a0)
end;
function  TSPI3_SPI1ACON.getSRXISEL : TBits_2;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,2
end;
procedure TSPI3_SPI1ACON.setSTXISEL(thebits : TBits_2); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,2,2
  sw      $v1,($a0)
end;
function  TSPI3_SPI1ACON.getSTXISEL : TBits_2;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,2,2
end;
procedure TSPI3_SPI1ACON.setMSTEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,8($a0)
end;
procedure TSPI3_SPI1ACON.clearMSTEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,4($a0)
end;
procedure TSPI3_SPI1ACON.setMSTEN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,5,1
  sw      $v1,($a0)
end;
function  TSPI3_SPI1ACON.getMSTEN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,5,1
end;
procedure TSPI3_SPI1ACON.setCKP; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,8($a0)
end;
procedure TSPI3_SPI1ACON.clearCKP; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,4($a0)
end;
procedure TSPI3_SPI1ACON.setCKP(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,6,1
  sw      $v1,($a0)
end;
function  TSPI3_SPI1ACON.getCKP : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,6,1
end;
procedure TSPI3_SPI1ACON.setSSEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,8($a0)
end;
procedure TSPI3_SPI1ACON.clearSSEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,4($a0)
end;
procedure TSPI3_SPI1ACON.setSSEN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,7,1
  sw      $v1,($a0)
end;
function  TSPI3_SPI1ACON.getSSEN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,7,1
end;
procedure TSPI3_SPI1ACON.setCKE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,8($a0)
end;
procedure TSPI3_SPI1ACON.clearCKE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,4($a0)
end;
procedure TSPI3_SPI1ACON.setCKE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,8,1
  sw      $v1,($a0)
end;
function  TSPI3_SPI1ACON.getCKE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,8,1
end;
procedure TSPI3_SPI1ACON.setSMP; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,512
  sw $a1,8($a0)
end;
procedure TSPI3_SPI1ACON.clearSMP; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,512
  sw $a1,4($a0)
end;
procedure TSPI3_SPI1ACON.setSMP(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,9,1
  sw      $v1,($a0)
end;
function  TSPI3_SPI1ACON.getSMP : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,9,1
end;
procedure TSPI3_SPI1ACON.setMODE16; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1024
  sw $a1,8($a0)
end;
procedure TSPI3_SPI1ACON.clearMODE16; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1024
  sw $a1,4($a0)
end;
procedure TSPI3_SPI1ACON.setMODE16(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,10,1
  sw      $v1,($a0)
end;
function  TSPI3_SPI1ACON.getMODE16 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,10,1
end;
procedure TSPI3_SPI1ACON.setMODE32; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2048
  sw $a1,8($a0)
end;
procedure TSPI3_SPI1ACON.clearMODE32; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2048
  sw $a1,4($a0)
end;
procedure TSPI3_SPI1ACON.setMODE32(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,11,1
  sw      $v1,($a0)
end;
function  TSPI3_SPI1ACON.getMODE32 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,11,1
end;
procedure TSPI3_SPI1ACON.setDISSDO; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4096
  sw $a1,8($a0)
end;
procedure TSPI3_SPI1ACON.clearDISSDO; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4096
  sw $a1,4($a0)
end;
procedure TSPI3_SPI1ACON.setDISSDO(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,12,1
  sw      $v1,($a0)
end;
function  TSPI3_SPI1ACON.getDISSDO : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,12,1
end;
procedure TSPI3_SPI1ACON.setSIDL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,8($a0)
end;
procedure TSPI3_SPI1ACON.clearSIDL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,4($a0)
end;
procedure TSPI3_SPI1ACON.setSIDL(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,13,1
  sw      $v1,($a0)
end;
function  TSPI3_SPI1ACON.getSIDL : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,13,1
end;
procedure TSPI3_SPI1ACON.setON; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,8($a0)
end;
procedure TSPI3_SPI1ACON.clearON; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,4($a0)
end;
procedure TSPI3_SPI1ACON.setON(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,15,1
  sw      $v1,($a0)
end;
function  TSPI3_SPI1ACON.getON : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,15,1
end;
procedure TSPI3_SPI1ACON.setENHBUF; assembler; nostackframe; inline;
asm
  lui     $a1,1
  sw $a1,8($a0)
end;
procedure TSPI3_SPI1ACON.clearENHBUF; assembler; nostackframe; inline;
asm
  lui     $a1,1
  sw $a1,4($a0)
end;
procedure TSPI3_SPI1ACON.setENHBUF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,16,1
  sw      $v1,($a0)
end;
function  TSPI3_SPI1ACON.getENHBUF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,16,1
end;
procedure TSPI3_SPI1ACON.setSPIFE; assembler; nostackframe; inline;
asm
  lui     $a1,2
  sw $a1,8($a0)
end;
procedure TSPI3_SPI1ACON.clearSPIFE; assembler; nostackframe; inline;
asm
  lui     $a1,2
  sw $a1,4($a0)
end;
procedure TSPI3_SPI1ACON.setSPIFE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,17,1
  sw      $v1,($a0)
end;
function  TSPI3_SPI1ACON.getSPIFE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,17,1
end;
procedure TSPI3_SPI1ACON.setFRMCNT(thebits : TBits_3); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,24,3
  sw      $v1,($a0)
end;
function  TSPI3_SPI1ACON.getFRMCNT : TBits_3;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,24,3
end;
procedure TSPI3_SPI1ACON.setFRMSYPW; assembler; nostackframe; inline;
asm
  lui     $a1,2048
  sw $a1,8($a0)
end;
procedure TSPI3_SPI1ACON.clearFRMSYPW; assembler; nostackframe; inline;
asm
  lui     $a1,2048
  sw $a1,4($a0)
end;
procedure TSPI3_SPI1ACON.setFRMSYPW(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,27,1
  sw      $v1,($a0)
end;
function  TSPI3_SPI1ACON.getFRMSYPW : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,27,1
end;
procedure TSPI3_SPI1ACON.setMSSEN; assembler; nostackframe; inline;
asm
  lui     $a1,4096
  sw $a1,8($a0)
end;
procedure TSPI3_SPI1ACON.clearMSSEN; assembler; nostackframe; inline;
asm
  lui     $a1,4096
  sw $a1,4($a0)
end;
procedure TSPI3_SPI1ACON.setMSSEN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,28,1
  sw      $v1,($a0)
end;
function  TSPI3_SPI1ACON.getMSSEN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,28,1
end;
procedure TSPI3_SPI1ACON.setFRMPOL; assembler; nostackframe; inline;
asm
  lui     $a1,8192
  sw $a1,8($a0)
end;
procedure TSPI3_SPI1ACON.clearFRMPOL; assembler; nostackframe; inline;
asm
  lui     $a1,8192
  sw $a1,4($a0)
end;
procedure TSPI3_SPI1ACON.setFRMPOL(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,29,1
  sw      $v1,($a0)
end;
function  TSPI3_SPI1ACON.getFRMPOL : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,29,1
end;
procedure TSPI3_SPI1ACON.setFRMSYNC; assembler; nostackframe; inline;
asm
  lui     $a1,16384
  sw $a1,8($a0)
end;
procedure TSPI3_SPI1ACON.clearFRMSYNC; assembler; nostackframe; inline;
asm
  lui     $a1,16384
  sw $a1,4($a0)
end;
procedure TSPI3_SPI1ACON.setFRMSYNC(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,30,1
  sw      $v1,($a0)
end;
function  TSPI3_SPI1ACON.getFRMSYNC : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,30,1
end;
procedure TSPI3_SPI1ACON.setFRMEN; assembler; nostackframe; inline;
asm
  lui     $a1,32768
  sw $a1,8($a0)
end;
procedure TSPI3_SPI1ACON.clearFRMEN; assembler; nostackframe; inline;
asm
  lui     $a1,32768
  sw $a1,4($a0)
end;
procedure TSPI3_SPI1ACON.setFRMEN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,31,1
  sw      $v1,($a0)
end;
function  TSPI3_SPI1ACON.getFRMEN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,31,1
end;
procedure TSPI3_SPI1ACON.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TSPI3_SPI1ACON.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TSPI3_SPI3CON.setSRXISEL(thebits : TBits_2); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,2
  sw      $v1,($a0)
end;
function  TSPI3_SPI3CON.getSRXISEL : TBits_2;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,2
end;
procedure TSPI3_SPI3CON.setSTXISEL(thebits : TBits_2); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,2,2
  sw      $v1,($a0)
end;
function  TSPI3_SPI3CON.getSTXISEL : TBits_2;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,2,2
end;
procedure TSPI3_SPI3CON.setMSTEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,8($a0)
end;
procedure TSPI3_SPI3CON.clearMSTEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,4($a0)
end;
procedure TSPI3_SPI3CON.setMSTEN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,5,1
  sw      $v1,($a0)
end;
function  TSPI3_SPI3CON.getMSTEN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,5,1
end;
procedure TSPI3_SPI3CON.setCKP; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,8($a0)
end;
procedure TSPI3_SPI3CON.clearCKP; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,4($a0)
end;
procedure TSPI3_SPI3CON.setCKP(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,6,1
  sw      $v1,($a0)
end;
function  TSPI3_SPI3CON.getCKP : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,6,1
end;
procedure TSPI3_SPI3CON.setSSEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,8($a0)
end;
procedure TSPI3_SPI3CON.clearSSEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,4($a0)
end;
procedure TSPI3_SPI3CON.setSSEN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,7,1
  sw      $v1,($a0)
end;
function  TSPI3_SPI3CON.getSSEN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,7,1
end;
procedure TSPI3_SPI3CON.setCKE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,8($a0)
end;
procedure TSPI3_SPI3CON.clearCKE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,4($a0)
end;
procedure TSPI3_SPI3CON.setCKE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,8,1
  sw      $v1,($a0)
end;
function  TSPI3_SPI3CON.getCKE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,8,1
end;
procedure TSPI3_SPI3CON.setSMP; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,512
  sw $a1,8($a0)
end;
procedure TSPI3_SPI3CON.clearSMP; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,512
  sw $a1,4($a0)
end;
procedure TSPI3_SPI3CON.setSMP(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,9,1
  sw      $v1,($a0)
end;
function  TSPI3_SPI3CON.getSMP : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,9,1
end;
procedure TSPI3_SPI3CON.setMODE16; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1024
  sw $a1,8($a0)
end;
procedure TSPI3_SPI3CON.clearMODE16; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1024
  sw $a1,4($a0)
end;
procedure TSPI3_SPI3CON.setMODE16(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,10,1
  sw      $v1,($a0)
end;
function  TSPI3_SPI3CON.getMODE16 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,10,1
end;
procedure TSPI3_SPI3CON.setMODE32; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2048
  sw $a1,8($a0)
end;
procedure TSPI3_SPI3CON.clearMODE32; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2048
  sw $a1,4($a0)
end;
procedure TSPI3_SPI3CON.setMODE32(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,11,1
  sw      $v1,($a0)
end;
function  TSPI3_SPI3CON.getMODE32 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,11,1
end;
procedure TSPI3_SPI3CON.setDISSDO; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4096
  sw $a1,8($a0)
end;
procedure TSPI3_SPI3CON.clearDISSDO; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4096
  sw $a1,4($a0)
end;
procedure TSPI3_SPI3CON.setDISSDO(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,12,1
  sw      $v1,($a0)
end;
function  TSPI3_SPI3CON.getDISSDO : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,12,1
end;
procedure TSPI3_SPI3CON.setSIDL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,8($a0)
end;
procedure TSPI3_SPI3CON.clearSIDL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,4($a0)
end;
procedure TSPI3_SPI3CON.setSIDL(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,13,1
  sw      $v1,($a0)
end;
function  TSPI3_SPI3CON.getSIDL : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,13,1
end;
procedure TSPI3_SPI3CON.setON; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,8($a0)
end;
procedure TSPI3_SPI3CON.clearON; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,4($a0)
end;
procedure TSPI3_SPI3CON.setON(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,15,1
  sw      $v1,($a0)
end;
function  TSPI3_SPI3CON.getON : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,15,1
end;
procedure TSPI3_SPI3CON.setENHBUF; assembler; nostackframe; inline;
asm
  lui     $a1,1
  sw $a1,8($a0)
end;
procedure TSPI3_SPI3CON.clearENHBUF; assembler; nostackframe; inline;
asm
  lui     $a1,1
  sw $a1,4($a0)
end;
procedure TSPI3_SPI3CON.setENHBUF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,16,1
  sw      $v1,($a0)
end;
function  TSPI3_SPI3CON.getENHBUF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,16,1
end;
procedure TSPI3_SPI3CON.setSPIFE; assembler; nostackframe; inline;
asm
  lui     $a1,2
  sw $a1,8($a0)
end;
procedure TSPI3_SPI3CON.clearSPIFE; assembler; nostackframe; inline;
asm
  lui     $a1,2
  sw $a1,4($a0)
end;
procedure TSPI3_SPI3CON.setSPIFE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,17,1
  sw      $v1,($a0)
end;
function  TSPI3_SPI3CON.getSPIFE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,17,1
end;
procedure TSPI3_SPI3CON.setFRMCNT(thebits : TBits_3); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,24,3
  sw      $v1,($a0)
end;
function  TSPI3_SPI3CON.getFRMCNT : TBits_3;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,24,3
end;
procedure TSPI3_SPI3CON.setFRMSYPW; assembler; nostackframe; inline;
asm
  lui     $a1,2048
  sw $a1,8($a0)
end;
procedure TSPI3_SPI3CON.clearFRMSYPW; assembler; nostackframe; inline;
asm
  lui     $a1,2048
  sw $a1,4($a0)
end;
procedure TSPI3_SPI3CON.setFRMSYPW(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,27,1
  sw      $v1,($a0)
end;
function  TSPI3_SPI3CON.getFRMSYPW : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,27,1
end;
procedure TSPI3_SPI3CON.setMSSEN; assembler; nostackframe; inline;
asm
  lui     $a1,4096
  sw $a1,8($a0)
end;
procedure TSPI3_SPI3CON.clearMSSEN; assembler; nostackframe; inline;
asm
  lui     $a1,4096
  sw $a1,4($a0)
end;
procedure TSPI3_SPI3CON.setMSSEN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,28,1
  sw      $v1,($a0)
end;
function  TSPI3_SPI3CON.getMSSEN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,28,1
end;
procedure TSPI3_SPI3CON.setFRMPOL; assembler; nostackframe; inline;
asm
  lui     $a1,8192
  sw $a1,8($a0)
end;
procedure TSPI3_SPI3CON.clearFRMPOL; assembler; nostackframe; inline;
asm
  lui     $a1,8192
  sw $a1,4($a0)
end;
procedure TSPI3_SPI3CON.setFRMPOL(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,29,1
  sw      $v1,($a0)
end;
function  TSPI3_SPI3CON.getFRMPOL : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,29,1
end;
procedure TSPI3_SPI3CON.setFRMSYNC; assembler; nostackframe; inline;
asm
  lui     $a1,16384
  sw $a1,8($a0)
end;
procedure TSPI3_SPI3CON.clearFRMSYNC; assembler; nostackframe; inline;
asm
  lui     $a1,16384
  sw $a1,4($a0)
end;
procedure TSPI3_SPI3CON.setFRMSYNC(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,30,1
  sw      $v1,($a0)
end;
function  TSPI3_SPI3CON.getFRMSYNC : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,30,1
end;
procedure TSPI3_SPI3CON.setFRMEN; assembler; nostackframe; inline;
asm
  lui     $a1,32768
  sw $a1,8($a0)
end;
procedure TSPI3_SPI3CON.clearFRMEN; assembler; nostackframe; inline;
asm
  lui     $a1,32768
  sw $a1,4($a0)
end;
procedure TSPI3_SPI3CON.setFRMEN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,31,1
  sw      $v1,($a0)
end;
function  TSPI3_SPI3CON.getFRMEN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,31,1
end;
procedure TSPI3_SPI3CON.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TSPI3_SPI3CON.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TSPI3_SPI1ASTAT.setSPIRBF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,8($a0)
end;
procedure TSPI3_SPI1ASTAT.clearSPIRBF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,4($a0)
end;
procedure TSPI3_SPI1ASTAT.setSPIRBF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,1
  sw      $v1,($a0)
end;
function  TSPI3_SPI1ASTAT.getSPIRBF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,1
end;
procedure TSPI3_SPI1ASTAT.setSPITBF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,8($a0)
end;
procedure TSPI3_SPI1ASTAT.clearSPITBF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,4($a0)
end;
procedure TSPI3_SPI1ASTAT.setSPITBF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,1,1
  sw      $v1,($a0)
end;
function  TSPI3_SPI1ASTAT.getSPITBF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,1,1
end;
procedure TSPI3_SPI1ASTAT.setSPITBE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,8($a0)
end;
procedure TSPI3_SPI1ASTAT.clearSPITBE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,4($a0)
end;
procedure TSPI3_SPI1ASTAT.setSPITBE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,3,1
  sw      $v1,($a0)
end;
function  TSPI3_SPI1ASTAT.getSPITBE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,3,1
end;
procedure TSPI3_SPI1ASTAT.setSPIRBE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,8($a0)
end;
procedure TSPI3_SPI1ASTAT.clearSPIRBE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,4($a0)
end;
procedure TSPI3_SPI1ASTAT.setSPIRBE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,5,1
  sw      $v1,($a0)
end;
function  TSPI3_SPI1ASTAT.getSPIRBE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,5,1
end;
procedure TSPI3_SPI1ASTAT.setSPIROV; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,8($a0)
end;
procedure TSPI3_SPI1ASTAT.clearSPIROV; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,4($a0)
end;
procedure TSPI3_SPI1ASTAT.setSPIROV(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,6,1
  sw      $v1,($a0)
end;
function  TSPI3_SPI1ASTAT.getSPIROV : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,6,1
end;
procedure TSPI3_SPI1ASTAT.setSRMT; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,8($a0)
end;
procedure TSPI3_SPI1ASTAT.clearSRMT; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,4($a0)
end;
procedure TSPI3_SPI1ASTAT.setSRMT(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,7,1
  sw      $v1,($a0)
end;
function  TSPI3_SPI1ASTAT.getSRMT : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,7,1
end;
procedure TSPI3_SPI1ASTAT.setSPITUR; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,8($a0)
end;
procedure TSPI3_SPI1ASTAT.clearSPITUR; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,4($a0)
end;
procedure TSPI3_SPI1ASTAT.setSPITUR(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,8,1
  sw      $v1,($a0)
end;
function  TSPI3_SPI1ASTAT.getSPITUR : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,8,1
end;
procedure TSPI3_SPI1ASTAT.setSPIBUSY; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2048
  sw $a1,8($a0)
end;
procedure TSPI3_SPI1ASTAT.clearSPIBUSY; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2048
  sw $a1,4($a0)
end;
procedure TSPI3_SPI1ASTAT.setSPIBUSY(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,11,1
  sw      $v1,($a0)
end;
function  TSPI3_SPI1ASTAT.getSPIBUSY : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,11,1
end;
procedure TSPI3_SPI1ASTAT.setTXBUFELM(thebits : TBits_5); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,16,5
  sw      $v1,($a0)
end;
function  TSPI3_SPI1ASTAT.getTXBUFELM : TBits_5;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,16,5
end;
procedure TSPI3_SPI1ASTAT.setRXBUFELM(thebits : TBits_5); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,24,5
  sw      $v1,($a0)
end;
function  TSPI3_SPI1ASTAT.getRXBUFELM : TBits_5;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,24,5
end;
procedure TSPI3_SPI1ASTAT.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TSPI3_SPI1ASTAT.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TSPI3_SPI3STAT.setSPIRBF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,8($a0)
end;
procedure TSPI3_SPI3STAT.clearSPIRBF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,4($a0)
end;
procedure TSPI3_SPI3STAT.setSPIRBF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,1
  sw      $v1,($a0)
end;
function  TSPI3_SPI3STAT.getSPIRBF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,1
end;
procedure TSPI3_SPI3STAT.setSPITBF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,8($a0)
end;
procedure TSPI3_SPI3STAT.clearSPITBF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,4($a0)
end;
procedure TSPI3_SPI3STAT.setSPITBF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,1,1
  sw      $v1,($a0)
end;
function  TSPI3_SPI3STAT.getSPITBF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,1,1
end;
procedure TSPI3_SPI3STAT.setSPITBE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,8($a0)
end;
procedure TSPI3_SPI3STAT.clearSPITBE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,4($a0)
end;
procedure TSPI3_SPI3STAT.setSPITBE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,3,1
  sw      $v1,($a0)
end;
function  TSPI3_SPI3STAT.getSPITBE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,3,1
end;
procedure TSPI3_SPI3STAT.setSPIRBE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,8($a0)
end;
procedure TSPI3_SPI3STAT.clearSPIRBE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,4($a0)
end;
procedure TSPI3_SPI3STAT.setSPIRBE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,5,1
  sw      $v1,($a0)
end;
function  TSPI3_SPI3STAT.getSPIRBE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,5,1
end;
procedure TSPI3_SPI3STAT.setSPIROV; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,8($a0)
end;
procedure TSPI3_SPI3STAT.clearSPIROV; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,4($a0)
end;
procedure TSPI3_SPI3STAT.setSPIROV(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,6,1
  sw      $v1,($a0)
end;
function  TSPI3_SPI3STAT.getSPIROV : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,6,1
end;
procedure TSPI3_SPI3STAT.setSRMT; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,8($a0)
end;
procedure TSPI3_SPI3STAT.clearSRMT; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,4($a0)
end;
procedure TSPI3_SPI3STAT.setSRMT(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,7,1
  sw      $v1,($a0)
end;
function  TSPI3_SPI3STAT.getSRMT : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,7,1
end;
procedure TSPI3_SPI3STAT.setSPITUR; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,8($a0)
end;
procedure TSPI3_SPI3STAT.clearSPITUR; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,4($a0)
end;
procedure TSPI3_SPI3STAT.setSPITUR(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,8,1
  sw      $v1,($a0)
end;
function  TSPI3_SPI3STAT.getSPITUR : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,8,1
end;
procedure TSPI3_SPI3STAT.setSPIBUSY; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2048
  sw $a1,8($a0)
end;
procedure TSPI3_SPI3STAT.clearSPIBUSY; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2048
  sw $a1,4($a0)
end;
procedure TSPI3_SPI3STAT.setSPIBUSY(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,11,1
  sw      $v1,($a0)
end;
function  TSPI3_SPI3STAT.getSPIBUSY : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,11,1
end;
procedure TSPI3_SPI3STAT.setTXBUFELM(thebits : TBits_5); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,16,5
  sw      $v1,($a0)
end;
function  TSPI3_SPI3STAT.getTXBUFELM : TBits_5;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,16,5
end;
procedure TSPI3_SPI3STAT.setRXBUFELM(thebits : TBits_5); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,24,5
  sw      $v1,($a0)
end;
function  TSPI3_SPI3STAT.getRXBUFELM : TBits_5;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,24,5
end;
procedure TSPI3_SPI3STAT.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TSPI3_SPI3STAT.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TSPI2A_SPI2ACON.setSRXISEL(thebits : TBits_2); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,2
  sw      $v1,($a0)
end;
function  TSPI2A_SPI2ACON.getSRXISEL : TBits_2;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,2
end;
procedure TSPI2A_SPI2ACON.setSTXISEL(thebits : TBits_2); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,2,2
  sw      $v1,($a0)
end;
function  TSPI2A_SPI2ACON.getSTXISEL : TBits_2;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,2,2
end;
procedure TSPI2A_SPI2ACON.setMSTEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,8($a0)
end;
procedure TSPI2A_SPI2ACON.clearMSTEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,4($a0)
end;
procedure TSPI2A_SPI2ACON.setMSTEN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,5,1
  sw      $v1,($a0)
end;
function  TSPI2A_SPI2ACON.getMSTEN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,5,1
end;
procedure TSPI2A_SPI2ACON.setCKP; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,8($a0)
end;
procedure TSPI2A_SPI2ACON.clearCKP; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,4($a0)
end;
procedure TSPI2A_SPI2ACON.setCKP(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,6,1
  sw      $v1,($a0)
end;
function  TSPI2A_SPI2ACON.getCKP : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,6,1
end;
procedure TSPI2A_SPI2ACON.setSSEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,8($a0)
end;
procedure TSPI2A_SPI2ACON.clearSSEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,4($a0)
end;
procedure TSPI2A_SPI2ACON.setSSEN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,7,1
  sw      $v1,($a0)
end;
function  TSPI2A_SPI2ACON.getSSEN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,7,1
end;
procedure TSPI2A_SPI2ACON.setCKE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,8($a0)
end;
procedure TSPI2A_SPI2ACON.clearCKE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,4($a0)
end;
procedure TSPI2A_SPI2ACON.setCKE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,8,1
  sw      $v1,($a0)
end;
function  TSPI2A_SPI2ACON.getCKE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,8,1
end;
procedure TSPI2A_SPI2ACON.setSMP; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,512
  sw $a1,8($a0)
end;
procedure TSPI2A_SPI2ACON.clearSMP; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,512
  sw $a1,4($a0)
end;
procedure TSPI2A_SPI2ACON.setSMP(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,9,1
  sw      $v1,($a0)
end;
function  TSPI2A_SPI2ACON.getSMP : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,9,1
end;
procedure TSPI2A_SPI2ACON.setMODE16; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1024
  sw $a1,8($a0)
end;
procedure TSPI2A_SPI2ACON.clearMODE16; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1024
  sw $a1,4($a0)
end;
procedure TSPI2A_SPI2ACON.setMODE16(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,10,1
  sw      $v1,($a0)
end;
function  TSPI2A_SPI2ACON.getMODE16 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,10,1
end;
procedure TSPI2A_SPI2ACON.setMODE32; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2048
  sw $a1,8($a0)
end;
procedure TSPI2A_SPI2ACON.clearMODE32; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2048
  sw $a1,4($a0)
end;
procedure TSPI2A_SPI2ACON.setMODE32(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,11,1
  sw      $v1,($a0)
end;
function  TSPI2A_SPI2ACON.getMODE32 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,11,1
end;
procedure TSPI2A_SPI2ACON.setDISSDO; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4096
  sw $a1,8($a0)
end;
procedure TSPI2A_SPI2ACON.clearDISSDO; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4096
  sw $a1,4($a0)
end;
procedure TSPI2A_SPI2ACON.setDISSDO(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,12,1
  sw      $v1,($a0)
end;
function  TSPI2A_SPI2ACON.getDISSDO : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,12,1
end;
procedure TSPI2A_SPI2ACON.setSIDL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,8($a0)
end;
procedure TSPI2A_SPI2ACON.clearSIDL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,4($a0)
end;
procedure TSPI2A_SPI2ACON.setSIDL(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,13,1
  sw      $v1,($a0)
end;
function  TSPI2A_SPI2ACON.getSIDL : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,13,1
end;
procedure TSPI2A_SPI2ACON.setON; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,8($a0)
end;
procedure TSPI2A_SPI2ACON.clearON; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,4($a0)
end;
procedure TSPI2A_SPI2ACON.setON(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,15,1
  sw      $v1,($a0)
end;
function  TSPI2A_SPI2ACON.getON : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,15,1
end;
procedure TSPI2A_SPI2ACON.setENHBUF; assembler; nostackframe; inline;
asm
  lui     $a1,1
  sw $a1,8($a0)
end;
procedure TSPI2A_SPI2ACON.clearENHBUF; assembler; nostackframe; inline;
asm
  lui     $a1,1
  sw $a1,4($a0)
end;
procedure TSPI2A_SPI2ACON.setENHBUF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,16,1
  sw      $v1,($a0)
end;
function  TSPI2A_SPI2ACON.getENHBUF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,16,1
end;
procedure TSPI2A_SPI2ACON.setSPIFE; assembler; nostackframe; inline;
asm
  lui     $a1,2
  sw $a1,8($a0)
end;
procedure TSPI2A_SPI2ACON.clearSPIFE; assembler; nostackframe; inline;
asm
  lui     $a1,2
  sw $a1,4($a0)
end;
procedure TSPI2A_SPI2ACON.setSPIFE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,17,1
  sw      $v1,($a0)
end;
function  TSPI2A_SPI2ACON.getSPIFE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,17,1
end;
procedure TSPI2A_SPI2ACON.setFRMCNT(thebits : TBits_3); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,24,3
  sw      $v1,($a0)
end;
function  TSPI2A_SPI2ACON.getFRMCNT : TBits_3;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,24,3
end;
procedure TSPI2A_SPI2ACON.setFRMSYPW; assembler; nostackframe; inline;
asm
  lui     $a1,2048
  sw $a1,8($a0)
end;
procedure TSPI2A_SPI2ACON.clearFRMSYPW; assembler; nostackframe; inline;
asm
  lui     $a1,2048
  sw $a1,4($a0)
end;
procedure TSPI2A_SPI2ACON.setFRMSYPW(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,27,1
  sw      $v1,($a0)
end;
function  TSPI2A_SPI2ACON.getFRMSYPW : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,27,1
end;
procedure TSPI2A_SPI2ACON.setMSSEN; assembler; nostackframe; inline;
asm
  lui     $a1,4096
  sw $a1,8($a0)
end;
procedure TSPI2A_SPI2ACON.clearMSSEN; assembler; nostackframe; inline;
asm
  lui     $a1,4096
  sw $a1,4($a0)
end;
procedure TSPI2A_SPI2ACON.setMSSEN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,28,1
  sw      $v1,($a0)
end;
function  TSPI2A_SPI2ACON.getMSSEN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,28,1
end;
procedure TSPI2A_SPI2ACON.setFRMPOL; assembler; nostackframe; inline;
asm
  lui     $a1,8192
  sw $a1,8($a0)
end;
procedure TSPI2A_SPI2ACON.clearFRMPOL; assembler; nostackframe; inline;
asm
  lui     $a1,8192
  sw $a1,4($a0)
end;
procedure TSPI2A_SPI2ACON.setFRMPOL(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,29,1
  sw      $v1,($a0)
end;
function  TSPI2A_SPI2ACON.getFRMPOL : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,29,1
end;
procedure TSPI2A_SPI2ACON.setFRMSYNC; assembler; nostackframe; inline;
asm
  lui     $a1,16384
  sw $a1,8($a0)
end;
procedure TSPI2A_SPI2ACON.clearFRMSYNC; assembler; nostackframe; inline;
asm
  lui     $a1,16384
  sw $a1,4($a0)
end;
procedure TSPI2A_SPI2ACON.setFRMSYNC(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,30,1
  sw      $v1,($a0)
end;
function  TSPI2A_SPI2ACON.getFRMSYNC : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,30,1
end;
procedure TSPI2A_SPI2ACON.setFRMEN; assembler; nostackframe; inline;
asm
  lui     $a1,32768
  sw $a1,8($a0)
end;
procedure TSPI2A_SPI2ACON.clearFRMEN; assembler; nostackframe; inline;
asm
  lui     $a1,32768
  sw $a1,4($a0)
end;
procedure TSPI2A_SPI2ACON.setFRMEN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,31,1
  sw      $v1,($a0)
end;
function  TSPI2A_SPI2ACON.getFRMEN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,31,1
end;
procedure TSPI2A_SPI2ACON.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TSPI2A_SPI2ACON.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TSPI2A_SPI2CON.setSRXISEL(thebits : TBits_2); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,2
  sw      $v1,($a0)
end;
function  TSPI2A_SPI2CON.getSRXISEL : TBits_2;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,2
end;
procedure TSPI2A_SPI2CON.setSTXISEL(thebits : TBits_2); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,2,2
  sw      $v1,($a0)
end;
function  TSPI2A_SPI2CON.getSTXISEL : TBits_2;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,2,2
end;
procedure TSPI2A_SPI2CON.setMSTEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,8($a0)
end;
procedure TSPI2A_SPI2CON.clearMSTEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,4($a0)
end;
procedure TSPI2A_SPI2CON.setMSTEN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,5,1
  sw      $v1,($a0)
end;
function  TSPI2A_SPI2CON.getMSTEN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,5,1
end;
procedure TSPI2A_SPI2CON.setCKP; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,8($a0)
end;
procedure TSPI2A_SPI2CON.clearCKP; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,4($a0)
end;
procedure TSPI2A_SPI2CON.setCKP(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,6,1
  sw      $v1,($a0)
end;
function  TSPI2A_SPI2CON.getCKP : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,6,1
end;
procedure TSPI2A_SPI2CON.setSSEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,8($a0)
end;
procedure TSPI2A_SPI2CON.clearSSEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,4($a0)
end;
procedure TSPI2A_SPI2CON.setSSEN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,7,1
  sw      $v1,($a0)
end;
function  TSPI2A_SPI2CON.getSSEN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,7,1
end;
procedure TSPI2A_SPI2CON.setCKE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,8($a0)
end;
procedure TSPI2A_SPI2CON.clearCKE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,4($a0)
end;
procedure TSPI2A_SPI2CON.setCKE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,8,1
  sw      $v1,($a0)
end;
function  TSPI2A_SPI2CON.getCKE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,8,1
end;
procedure TSPI2A_SPI2CON.setSMP; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,512
  sw $a1,8($a0)
end;
procedure TSPI2A_SPI2CON.clearSMP; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,512
  sw $a1,4($a0)
end;
procedure TSPI2A_SPI2CON.setSMP(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,9,1
  sw      $v1,($a0)
end;
function  TSPI2A_SPI2CON.getSMP : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,9,1
end;
procedure TSPI2A_SPI2CON.setMODE16; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1024
  sw $a1,8($a0)
end;
procedure TSPI2A_SPI2CON.clearMODE16; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1024
  sw $a1,4($a0)
end;
procedure TSPI2A_SPI2CON.setMODE16(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,10,1
  sw      $v1,($a0)
end;
function  TSPI2A_SPI2CON.getMODE16 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,10,1
end;
procedure TSPI2A_SPI2CON.setMODE32; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2048
  sw $a1,8($a0)
end;
procedure TSPI2A_SPI2CON.clearMODE32; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2048
  sw $a1,4($a0)
end;
procedure TSPI2A_SPI2CON.setMODE32(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,11,1
  sw      $v1,($a0)
end;
function  TSPI2A_SPI2CON.getMODE32 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,11,1
end;
procedure TSPI2A_SPI2CON.setDISSDO; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4096
  sw $a1,8($a0)
end;
procedure TSPI2A_SPI2CON.clearDISSDO; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4096
  sw $a1,4($a0)
end;
procedure TSPI2A_SPI2CON.setDISSDO(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,12,1
  sw      $v1,($a0)
end;
function  TSPI2A_SPI2CON.getDISSDO : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,12,1
end;
procedure TSPI2A_SPI2CON.setSIDL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,8($a0)
end;
procedure TSPI2A_SPI2CON.clearSIDL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,4($a0)
end;
procedure TSPI2A_SPI2CON.setSIDL(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,13,1
  sw      $v1,($a0)
end;
function  TSPI2A_SPI2CON.getSIDL : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,13,1
end;
procedure TSPI2A_SPI2CON.setON; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,8($a0)
end;
procedure TSPI2A_SPI2CON.clearON; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,4($a0)
end;
procedure TSPI2A_SPI2CON.setON(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,15,1
  sw      $v1,($a0)
end;
function  TSPI2A_SPI2CON.getON : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,15,1
end;
procedure TSPI2A_SPI2CON.setENHBUF; assembler; nostackframe; inline;
asm
  lui     $a1,1
  sw $a1,8($a0)
end;
procedure TSPI2A_SPI2CON.clearENHBUF; assembler; nostackframe; inline;
asm
  lui     $a1,1
  sw $a1,4($a0)
end;
procedure TSPI2A_SPI2CON.setENHBUF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,16,1
  sw      $v1,($a0)
end;
function  TSPI2A_SPI2CON.getENHBUF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,16,1
end;
procedure TSPI2A_SPI2CON.setSPIFE; assembler; nostackframe; inline;
asm
  lui     $a1,2
  sw $a1,8($a0)
end;
procedure TSPI2A_SPI2CON.clearSPIFE; assembler; nostackframe; inline;
asm
  lui     $a1,2
  sw $a1,4($a0)
end;
procedure TSPI2A_SPI2CON.setSPIFE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,17,1
  sw      $v1,($a0)
end;
function  TSPI2A_SPI2CON.getSPIFE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,17,1
end;
procedure TSPI2A_SPI2CON.setFRMCNT(thebits : TBits_3); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,24,3
  sw      $v1,($a0)
end;
function  TSPI2A_SPI2CON.getFRMCNT : TBits_3;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,24,3
end;
procedure TSPI2A_SPI2CON.setFRMSYPW; assembler; nostackframe; inline;
asm
  lui     $a1,2048
  sw $a1,8($a0)
end;
procedure TSPI2A_SPI2CON.clearFRMSYPW; assembler; nostackframe; inline;
asm
  lui     $a1,2048
  sw $a1,4($a0)
end;
procedure TSPI2A_SPI2CON.setFRMSYPW(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,27,1
  sw      $v1,($a0)
end;
function  TSPI2A_SPI2CON.getFRMSYPW : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,27,1
end;
procedure TSPI2A_SPI2CON.setMSSEN; assembler; nostackframe; inline;
asm
  lui     $a1,4096
  sw $a1,8($a0)
end;
procedure TSPI2A_SPI2CON.clearMSSEN; assembler; nostackframe; inline;
asm
  lui     $a1,4096
  sw $a1,4($a0)
end;
procedure TSPI2A_SPI2CON.setMSSEN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,28,1
  sw      $v1,($a0)
end;
function  TSPI2A_SPI2CON.getMSSEN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,28,1
end;
procedure TSPI2A_SPI2CON.setFRMPOL; assembler; nostackframe; inline;
asm
  lui     $a1,8192
  sw $a1,8($a0)
end;
procedure TSPI2A_SPI2CON.clearFRMPOL; assembler; nostackframe; inline;
asm
  lui     $a1,8192
  sw $a1,4($a0)
end;
procedure TSPI2A_SPI2CON.setFRMPOL(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,29,1
  sw      $v1,($a0)
end;
function  TSPI2A_SPI2CON.getFRMPOL : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,29,1
end;
procedure TSPI2A_SPI2CON.setFRMSYNC; assembler; nostackframe; inline;
asm
  lui     $a1,16384
  sw $a1,8($a0)
end;
procedure TSPI2A_SPI2CON.clearFRMSYNC; assembler; nostackframe; inline;
asm
  lui     $a1,16384
  sw $a1,4($a0)
end;
procedure TSPI2A_SPI2CON.setFRMSYNC(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,30,1
  sw      $v1,($a0)
end;
function  TSPI2A_SPI2CON.getFRMSYNC : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,30,1
end;
procedure TSPI2A_SPI2CON.setFRMEN; assembler; nostackframe; inline;
asm
  lui     $a1,32768
  sw $a1,8($a0)
end;
procedure TSPI2A_SPI2CON.clearFRMEN; assembler; nostackframe; inline;
asm
  lui     $a1,32768
  sw $a1,4($a0)
end;
procedure TSPI2A_SPI2CON.setFRMEN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,31,1
  sw      $v1,($a0)
end;
function  TSPI2A_SPI2CON.getFRMEN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,31,1
end;
procedure TSPI2A_SPI2CON.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TSPI2A_SPI2CON.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TSPI2A_SPI2ASTAT.setSPIRBF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,8($a0)
end;
procedure TSPI2A_SPI2ASTAT.clearSPIRBF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,4($a0)
end;
procedure TSPI2A_SPI2ASTAT.setSPIRBF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,1
  sw      $v1,($a0)
end;
function  TSPI2A_SPI2ASTAT.getSPIRBF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,1
end;
procedure TSPI2A_SPI2ASTAT.setSPITBF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,8($a0)
end;
procedure TSPI2A_SPI2ASTAT.clearSPITBF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,4($a0)
end;
procedure TSPI2A_SPI2ASTAT.setSPITBF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,1,1
  sw      $v1,($a0)
end;
function  TSPI2A_SPI2ASTAT.getSPITBF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,1,1
end;
procedure TSPI2A_SPI2ASTAT.setSPITBE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,8($a0)
end;
procedure TSPI2A_SPI2ASTAT.clearSPITBE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,4($a0)
end;
procedure TSPI2A_SPI2ASTAT.setSPITBE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,3,1
  sw      $v1,($a0)
end;
function  TSPI2A_SPI2ASTAT.getSPITBE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,3,1
end;
procedure TSPI2A_SPI2ASTAT.setSPIRBE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,8($a0)
end;
procedure TSPI2A_SPI2ASTAT.clearSPIRBE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,4($a0)
end;
procedure TSPI2A_SPI2ASTAT.setSPIRBE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,5,1
  sw      $v1,($a0)
end;
function  TSPI2A_SPI2ASTAT.getSPIRBE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,5,1
end;
procedure TSPI2A_SPI2ASTAT.setSPIROV; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,8($a0)
end;
procedure TSPI2A_SPI2ASTAT.clearSPIROV; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,4($a0)
end;
procedure TSPI2A_SPI2ASTAT.setSPIROV(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,6,1
  sw      $v1,($a0)
end;
function  TSPI2A_SPI2ASTAT.getSPIROV : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,6,1
end;
procedure TSPI2A_SPI2ASTAT.setSRMT; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,8($a0)
end;
procedure TSPI2A_SPI2ASTAT.clearSRMT; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,4($a0)
end;
procedure TSPI2A_SPI2ASTAT.setSRMT(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,7,1
  sw      $v1,($a0)
end;
function  TSPI2A_SPI2ASTAT.getSRMT : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,7,1
end;
procedure TSPI2A_SPI2ASTAT.setSPITUR; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,8($a0)
end;
procedure TSPI2A_SPI2ASTAT.clearSPITUR; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,4($a0)
end;
procedure TSPI2A_SPI2ASTAT.setSPITUR(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,8,1
  sw      $v1,($a0)
end;
function  TSPI2A_SPI2ASTAT.getSPITUR : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,8,1
end;
procedure TSPI2A_SPI2ASTAT.setSPIBUSY; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2048
  sw $a1,8($a0)
end;
procedure TSPI2A_SPI2ASTAT.clearSPIBUSY; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2048
  sw $a1,4($a0)
end;
procedure TSPI2A_SPI2ASTAT.setSPIBUSY(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,11,1
  sw      $v1,($a0)
end;
function  TSPI2A_SPI2ASTAT.getSPIBUSY : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,11,1
end;
procedure TSPI2A_SPI2ASTAT.setTXBUFELM(thebits : TBits_5); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,16,5
  sw      $v1,($a0)
end;
function  TSPI2A_SPI2ASTAT.getTXBUFELM : TBits_5;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,16,5
end;
procedure TSPI2A_SPI2ASTAT.setRXBUFELM(thebits : TBits_5); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,24,5
  sw      $v1,($a0)
end;
function  TSPI2A_SPI2ASTAT.getRXBUFELM : TBits_5;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,24,5
end;
procedure TSPI2A_SPI2ASTAT.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TSPI2A_SPI2ASTAT.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TSPI2A_SPI2STAT.setSPIRBF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,8($a0)
end;
procedure TSPI2A_SPI2STAT.clearSPIRBF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,4($a0)
end;
procedure TSPI2A_SPI2STAT.setSPIRBF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,1
  sw      $v1,($a0)
end;
function  TSPI2A_SPI2STAT.getSPIRBF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,1
end;
procedure TSPI2A_SPI2STAT.setSPITBF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,8($a0)
end;
procedure TSPI2A_SPI2STAT.clearSPITBF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,4($a0)
end;
procedure TSPI2A_SPI2STAT.setSPITBF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,1,1
  sw      $v1,($a0)
end;
function  TSPI2A_SPI2STAT.getSPITBF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,1,1
end;
procedure TSPI2A_SPI2STAT.setSPITBE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,8($a0)
end;
procedure TSPI2A_SPI2STAT.clearSPITBE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,4($a0)
end;
procedure TSPI2A_SPI2STAT.setSPITBE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,3,1
  sw      $v1,($a0)
end;
function  TSPI2A_SPI2STAT.getSPITBE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,3,1
end;
procedure TSPI2A_SPI2STAT.setSPIRBE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,8($a0)
end;
procedure TSPI2A_SPI2STAT.clearSPIRBE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,4($a0)
end;
procedure TSPI2A_SPI2STAT.setSPIRBE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,5,1
  sw      $v1,($a0)
end;
function  TSPI2A_SPI2STAT.getSPIRBE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,5,1
end;
procedure TSPI2A_SPI2STAT.setSPIROV; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,8($a0)
end;
procedure TSPI2A_SPI2STAT.clearSPIROV; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,4($a0)
end;
procedure TSPI2A_SPI2STAT.setSPIROV(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,6,1
  sw      $v1,($a0)
end;
function  TSPI2A_SPI2STAT.getSPIROV : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,6,1
end;
procedure TSPI2A_SPI2STAT.setSRMT; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,8($a0)
end;
procedure TSPI2A_SPI2STAT.clearSRMT; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,4($a0)
end;
procedure TSPI2A_SPI2STAT.setSRMT(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,7,1
  sw      $v1,($a0)
end;
function  TSPI2A_SPI2STAT.getSRMT : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,7,1
end;
procedure TSPI2A_SPI2STAT.setSPITUR; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,8($a0)
end;
procedure TSPI2A_SPI2STAT.clearSPITUR; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,4($a0)
end;
procedure TSPI2A_SPI2STAT.setSPITUR(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,8,1
  sw      $v1,($a0)
end;
function  TSPI2A_SPI2STAT.getSPITUR : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,8,1
end;
procedure TSPI2A_SPI2STAT.setSPIBUSY; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2048
  sw $a1,8($a0)
end;
procedure TSPI2A_SPI2STAT.clearSPIBUSY; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2048
  sw $a1,4($a0)
end;
procedure TSPI2A_SPI2STAT.setSPIBUSY(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,11,1
  sw      $v1,($a0)
end;
function  TSPI2A_SPI2STAT.getSPIBUSY : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,11,1
end;
procedure TSPI2A_SPI2STAT.setTXBUFELM(thebits : TBits_5); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,16,5
  sw      $v1,($a0)
end;
function  TSPI2A_SPI2STAT.getTXBUFELM : TBits_5;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,16,5
end;
procedure TSPI2A_SPI2STAT.setRXBUFELM(thebits : TBits_5); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,24,5
  sw      $v1,($a0)
end;
function  TSPI2A_SPI2STAT.getRXBUFELM : TBits_5;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,24,5
end;
procedure TSPI2A_SPI2STAT.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TSPI2A_SPI2STAT.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TSPI3A_SPI3ACON.setSRXISEL(thebits : TBits_2); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,2
  sw      $v1,($a0)
end;
function  TSPI3A_SPI3ACON.getSRXISEL : TBits_2;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,2
end;
procedure TSPI3A_SPI3ACON.setSTXISEL(thebits : TBits_2); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,2,2
  sw      $v1,($a0)
end;
function  TSPI3A_SPI3ACON.getSTXISEL : TBits_2;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,2,2
end;
procedure TSPI3A_SPI3ACON.setMSTEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,8($a0)
end;
procedure TSPI3A_SPI3ACON.clearMSTEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,4($a0)
end;
procedure TSPI3A_SPI3ACON.setMSTEN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,5,1
  sw      $v1,($a0)
end;
function  TSPI3A_SPI3ACON.getMSTEN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,5,1
end;
procedure TSPI3A_SPI3ACON.setCKP; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,8($a0)
end;
procedure TSPI3A_SPI3ACON.clearCKP; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,4($a0)
end;
procedure TSPI3A_SPI3ACON.setCKP(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,6,1
  sw      $v1,($a0)
end;
function  TSPI3A_SPI3ACON.getCKP : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,6,1
end;
procedure TSPI3A_SPI3ACON.setSSEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,8($a0)
end;
procedure TSPI3A_SPI3ACON.clearSSEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,4($a0)
end;
procedure TSPI3A_SPI3ACON.setSSEN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,7,1
  sw      $v1,($a0)
end;
function  TSPI3A_SPI3ACON.getSSEN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,7,1
end;
procedure TSPI3A_SPI3ACON.setCKE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,8($a0)
end;
procedure TSPI3A_SPI3ACON.clearCKE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,4($a0)
end;
procedure TSPI3A_SPI3ACON.setCKE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,8,1
  sw      $v1,($a0)
end;
function  TSPI3A_SPI3ACON.getCKE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,8,1
end;
procedure TSPI3A_SPI3ACON.setSMP; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,512
  sw $a1,8($a0)
end;
procedure TSPI3A_SPI3ACON.clearSMP; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,512
  sw $a1,4($a0)
end;
procedure TSPI3A_SPI3ACON.setSMP(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,9,1
  sw      $v1,($a0)
end;
function  TSPI3A_SPI3ACON.getSMP : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,9,1
end;
procedure TSPI3A_SPI3ACON.setMODE16; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1024
  sw $a1,8($a0)
end;
procedure TSPI3A_SPI3ACON.clearMODE16; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1024
  sw $a1,4($a0)
end;
procedure TSPI3A_SPI3ACON.setMODE16(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,10,1
  sw      $v1,($a0)
end;
function  TSPI3A_SPI3ACON.getMODE16 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,10,1
end;
procedure TSPI3A_SPI3ACON.setMODE32; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2048
  sw $a1,8($a0)
end;
procedure TSPI3A_SPI3ACON.clearMODE32; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2048
  sw $a1,4($a0)
end;
procedure TSPI3A_SPI3ACON.setMODE32(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,11,1
  sw      $v1,($a0)
end;
function  TSPI3A_SPI3ACON.getMODE32 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,11,1
end;
procedure TSPI3A_SPI3ACON.setDISSDO; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4096
  sw $a1,8($a0)
end;
procedure TSPI3A_SPI3ACON.clearDISSDO; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4096
  sw $a1,4($a0)
end;
procedure TSPI3A_SPI3ACON.setDISSDO(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,12,1
  sw      $v1,($a0)
end;
function  TSPI3A_SPI3ACON.getDISSDO : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,12,1
end;
procedure TSPI3A_SPI3ACON.setSIDL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,8($a0)
end;
procedure TSPI3A_SPI3ACON.clearSIDL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,4($a0)
end;
procedure TSPI3A_SPI3ACON.setSIDL(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,13,1
  sw      $v1,($a0)
end;
function  TSPI3A_SPI3ACON.getSIDL : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,13,1
end;
procedure TSPI3A_SPI3ACON.setON; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,8($a0)
end;
procedure TSPI3A_SPI3ACON.clearON; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,4($a0)
end;
procedure TSPI3A_SPI3ACON.setON(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,15,1
  sw      $v1,($a0)
end;
function  TSPI3A_SPI3ACON.getON : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,15,1
end;
procedure TSPI3A_SPI3ACON.setENHBUF; assembler; nostackframe; inline;
asm
  lui     $a1,1
  sw $a1,8($a0)
end;
procedure TSPI3A_SPI3ACON.clearENHBUF; assembler; nostackframe; inline;
asm
  lui     $a1,1
  sw $a1,4($a0)
end;
procedure TSPI3A_SPI3ACON.setENHBUF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,16,1
  sw      $v1,($a0)
end;
function  TSPI3A_SPI3ACON.getENHBUF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,16,1
end;
procedure TSPI3A_SPI3ACON.setSPIFE; assembler; nostackframe; inline;
asm
  lui     $a1,2
  sw $a1,8($a0)
end;
procedure TSPI3A_SPI3ACON.clearSPIFE; assembler; nostackframe; inline;
asm
  lui     $a1,2
  sw $a1,4($a0)
end;
procedure TSPI3A_SPI3ACON.setSPIFE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,17,1
  sw      $v1,($a0)
end;
function  TSPI3A_SPI3ACON.getSPIFE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,17,1
end;
procedure TSPI3A_SPI3ACON.setFRMCNT(thebits : TBits_3); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,24,3
  sw      $v1,($a0)
end;
function  TSPI3A_SPI3ACON.getFRMCNT : TBits_3;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,24,3
end;
procedure TSPI3A_SPI3ACON.setFRMSYPW; assembler; nostackframe; inline;
asm
  lui     $a1,2048
  sw $a1,8($a0)
end;
procedure TSPI3A_SPI3ACON.clearFRMSYPW; assembler; nostackframe; inline;
asm
  lui     $a1,2048
  sw $a1,4($a0)
end;
procedure TSPI3A_SPI3ACON.setFRMSYPW(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,27,1
  sw      $v1,($a0)
end;
function  TSPI3A_SPI3ACON.getFRMSYPW : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,27,1
end;
procedure TSPI3A_SPI3ACON.setMSSEN; assembler; nostackframe; inline;
asm
  lui     $a1,4096
  sw $a1,8($a0)
end;
procedure TSPI3A_SPI3ACON.clearMSSEN; assembler; nostackframe; inline;
asm
  lui     $a1,4096
  sw $a1,4($a0)
end;
procedure TSPI3A_SPI3ACON.setMSSEN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,28,1
  sw      $v1,($a0)
end;
function  TSPI3A_SPI3ACON.getMSSEN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,28,1
end;
procedure TSPI3A_SPI3ACON.setFRMPOL; assembler; nostackframe; inline;
asm
  lui     $a1,8192
  sw $a1,8($a0)
end;
procedure TSPI3A_SPI3ACON.clearFRMPOL; assembler; nostackframe; inline;
asm
  lui     $a1,8192
  sw $a1,4($a0)
end;
procedure TSPI3A_SPI3ACON.setFRMPOL(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,29,1
  sw      $v1,($a0)
end;
function  TSPI3A_SPI3ACON.getFRMPOL : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,29,1
end;
procedure TSPI3A_SPI3ACON.setFRMSYNC; assembler; nostackframe; inline;
asm
  lui     $a1,16384
  sw $a1,8($a0)
end;
procedure TSPI3A_SPI3ACON.clearFRMSYNC; assembler; nostackframe; inline;
asm
  lui     $a1,16384
  sw $a1,4($a0)
end;
procedure TSPI3A_SPI3ACON.setFRMSYNC(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,30,1
  sw      $v1,($a0)
end;
function  TSPI3A_SPI3ACON.getFRMSYNC : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,30,1
end;
procedure TSPI3A_SPI3ACON.setFRMEN; assembler; nostackframe; inline;
asm
  lui     $a1,32768
  sw $a1,8($a0)
end;
procedure TSPI3A_SPI3ACON.clearFRMEN; assembler; nostackframe; inline;
asm
  lui     $a1,32768
  sw $a1,4($a0)
end;
procedure TSPI3A_SPI3ACON.setFRMEN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,31,1
  sw      $v1,($a0)
end;
function  TSPI3A_SPI3ACON.getFRMEN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,31,1
end;
procedure TSPI3A_SPI3ACON.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TSPI3A_SPI3ACON.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TSPI3A_SPI4CON.setSRXISEL(thebits : TBits_2); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,2
  sw      $v1,($a0)
end;
function  TSPI3A_SPI4CON.getSRXISEL : TBits_2;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,2
end;
procedure TSPI3A_SPI4CON.setSTXISEL(thebits : TBits_2); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,2,2
  sw      $v1,($a0)
end;
function  TSPI3A_SPI4CON.getSTXISEL : TBits_2;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,2,2
end;
procedure TSPI3A_SPI4CON.setMSTEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,8($a0)
end;
procedure TSPI3A_SPI4CON.clearMSTEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,4($a0)
end;
procedure TSPI3A_SPI4CON.setMSTEN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,5,1
  sw      $v1,($a0)
end;
function  TSPI3A_SPI4CON.getMSTEN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,5,1
end;
procedure TSPI3A_SPI4CON.setCKP; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,8($a0)
end;
procedure TSPI3A_SPI4CON.clearCKP; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,4($a0)
end;
procedure TSPI3A_SPI4CON.setCKP(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,6,1
  sw      $v1,($a0)
end;
function  TSPI3A_SPI4CON.getCKP : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,6,1
end;
procedure TSPI3A_SPI4CON.setSSEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,8($a0)
end;
procedure TSPI3A_SPI4CON.clearSSEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,4($a0)
end;
procedure TSPI3A_SPI4CON.setSSEN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,7,1
  sw      $v1,($a0)
end;
function  TSPI3A_SPI4CON.getSSEN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,7,1
end;
procedure TSPI3A_SPI4CON.setCKE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,8($a0)
end;
procedure TSPI3A_SPI4CON.clearCKE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,4($a0)
end;
procedure TSPI3A_SPI4CON.setCKE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,8,1
  sw      $v1,($a0)
end;
function  TSPI3A_SPI4CON.getCKE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,8,1
end;
procedure TSPI3A_SPI4CON.setSMP; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,512
  sw $a1,8($a0)
end;
procedure TSPI3A_SPI4CON.clearSMP; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,512
  sw $a1,4($a0)
end;
procedure TSPI3A_SPI4CON.setSMP(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,9,1
  sw      $v1,($a0)
end;
function  TSPI3A_SPI4CON.getSMP : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,9,1
end;
procedure TSPI3A_SPI4CON.setMODE16; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1024
  sw $a1,8($a0)
end;
procedure TSPI3A_SPI4CON.clearMODE16; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1024
  sw $a1,4($a0)
end;
procedure TSPI3A_SPI4CON.setMODE16(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,10,1
  sw      $v1,($a0)
end;
function  TSPI3A_SPI4CON.getMODE16 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,10,1
end;
procedure TSPI3A_SPI4CON.setMODE32; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2048
  sw $a1,8($a0)
end;
procedure TSPI3A_SPI4CON.clearMODE32; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2048
  sw $a1,4($a0)
end;
procedure TSPI3A_SPI4CON.setMODE32(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,11,1
  sw      $v1,($a0)
end;
function  TSPI3A_SPI4CON.getMODE32 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,11,1
end;
procedure TSPI3A_SPI4CON.setDISSDO; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4096
  sw $a1,8($a0)
end;
procedure TSPI3A_SPI4CON.clearDISSDO; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4096
  sw $a1,4($a0)
end;
procedure TSPI3A_SPI4CON.setDISSDO(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,12,1
  sw      $v1,($a0)
end;
function  TSPI3A_SPI4CON.getDISSDO : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,12,1
end;
procedure TSPI3A_SPI4CON.setSIDL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,8($a0)
end;
procedure TSPI3A_SPI4CON.clearSIDL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,4($a0)
end;
procedure TSPI3A_SPI4CON.setSIDL(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,13,1
  sw      $v1,($a0)
end;
function  TSPI3A_SPI4CON.getSIDL : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,13,1
end;
procedure TSPI3A_SPI4CON.setON; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,8($a0)
end;
procedure TSPI3A_SPI4CON.clearON; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,4($a0)
end;
procedure TSPI3A_SPI4CON.setON(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,15,1
  sw      $v1,($a0)
end;
function  TSPI3A_SPI4CON.getON : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,15,1
end;
procedure TSPI3A_SPI4CON.setENHBUF; assembler; nostackframe; inline;
asm
  lui     $a1,1
  sw $a1,8($a0)
end;
procedure TSPI3A_SPI4CON.clearENHBUF; assembler; nostackframe; inline;
asm
  lui     $a1,1
  sw $a1,4($a0)
end;
procedure TSPI3A_SPI4CON.setENHBUF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,16,1
  sw      $v1,($a0)
end;
function  TSPI3A_SPI4CON.getENHBUF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,16,1
end;
procedure TSPI3A_SPI4CON.setSPIFE; assembler; nostackframe; inline;
asm
  lui     $a1,2
  sw $a1,8($a0)
end;
procedure TSPI3A_SPI4CON.clearSPIFE; assembler; nostackframe; inline;
asm
  lui     $a1,2
  sw $a1,4($a0)
end;
procedure TSPI3A_SPI4CON.setSPIFE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,17,1
  sw      $v1,($a0)
end;
function  TSPI3A_SPI4CON.getSPIFE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,17,1
end;
procedure TSPI3A_SPI4CON.setFRMCNT(thebits : TBits_3); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,24,3
  sw      $v1,($a0)
end;
function  TSPI3A_SPI4CON.getFRMCNT : TBits_3;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,24,3
end;
procedure TSPI3A_SPI4CON.setFRMSYPW; assembler; nostackframe; inline;
asm
  lui     $a1,2048
  sw $a1,8($a0)
end;
procedure TSPI3A_SPI4CON.clearFRMSYPW; assembler; nostackframe; inline;
asm
  lui     $a1,2048
  sw $a1,4($a0)
end;
procedure TSPI3A_SPI4CON.setFRMSYPW(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,27,1
  sw      $v1,($a0)
end;
function  TSPI3A_SPI4CON.getFRMSYPW : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,27,1
end;
procedure TSPI3A_SPI4CON.setMSSEN; assembler; nostackframe; inline;
asm
  lui     $a1,4096
  sw $a1,8($a0)
end;
procedure TSPI3A_SPI4CON.clearMSSEN; assembler; nostackframe; inline;
asm
  lui     $a1,4096
  sw $a1,4($a0)
end;
procedure TSPI3A_SPI4CON.setMSSEN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,28,1
  sw      $v1,($a0)
end;
function  TSPI3A_SPI4CON.getMSSEN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,28,1
end;
procedure TSPI3A_SPI4CON.setFRMPOL; assembler; nostackframe; inline;
asm
  lui     $a1,8192
  sw $a1,8($a0)
end;
procedure TSPI3A_SPI4CON.clearFRMPOL; assembler; nostackframe; inline;
asm
  lui     $a1,8192
  sw $a1,4($a0)
end;
procedure TSPI3A_SPI4CON.setFRMPOL(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,29,1
  sw      $v1,($a0)
end;
function  TSPI3A_SPI4CON.getFRMPOL : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,29,1
end;
procedure TSPI3A_SPI4CON.setFRMSYNC; assembler; nostackframe; inline;
asm
  lui     $a1,16384
  sw $a1,8($a0)
end;
procedure TSPI3A_SPI4CON.clearFRMSYNC; assembler; nostackframe; inline;
asm
  lui     $a1,16384
  sw $a1,4($a0)
end;
procedure TSPI3A_SPI4CON.setFRMSYNC(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,30,1
  sw      $v1,($a0)
end;
function  TSPI3A_SPI4CON.getFRMSYNC : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,30,1
end;
procedure TSPI3A_SPI4CON.setFRMEN; assembler; nostackframe; inline;
asm
  lui     $a1,32768
  sw $a1,8($a0)
end;
procedure TSPI3A_SPI4CON.clearFRMEN; assembler; nostackframe; inline;
asm
  lui     $a1,32768
  sw $a1,4($a0)
end;
procedure TSPI3A_SPI4CON.setFRMEN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,31,1
  sw      $v1,($a0)
end;
function  TSPI3A_SPI4CON.getFRMEN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,31,1
end;
procedure TSPI3A_SPI4CON.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TSPI3A_SPI4CON.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TSPI3A_SPI3ASTAT.setSPIRBF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,8($a0)
end;
procedure TSPI3A_SPI3ASTAT.clearSPIRBF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,4($a0)
end;
procedure TSPI3A_SPI3ASTAT.setSPIRBF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,1
  sw      $v1,($a0)
end;
function  TSPI3A_SPI3ASTAT.getSPIRBF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,1
end;
procedure TSPI3A_SPI3ASTAT.setSPITBF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,8($a0)
end;
procedure TSPI3A_SPI3ASTAT.clearSPITBF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,4($a0)
end;
procedure TSPI3A_SPI3ASTAT.setSPITBF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,1,1
  sw      $v1,($a0)
end;
function  TSPI3A_SPI3ASTAT.getSPITBF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,1,1
end;
procedure TSPI3A_SPI3ASTAT.setSPITBE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,8($a0)
end;
procedure TSPI3A_SPI3ASTAT.clearSPITBE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,4($a0)
end;
procedure TSPI3A_SPI3ASTAT.setSPITBE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,3,1
  sw      $v1,($a0)
end;
function  TSPI3A_SPI3ASTAT.getSPITBE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,3,1
end;
procedure TSPI3A_SPI3ASTAT.setSPIRBE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,8($a0)
end;
procedure TSPI3A_SPI3ASTAT.clearSPIRBE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,4($a0)
end;
procedure TSPI3A_SPI3ASTAT.setSPIRBE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,5,1
  sw      $v1,($a0)
end;
function  TSPI3A_SPI3ASTAT.getSPIRBE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,5,1
end;
procedure TSPI3A_SPI3ASTAT.setSPIROV; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,8($a0)
end;
procedure TSPI3A_SPI3ASTAT.clearSPIROV; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,4($a0)
end;
procedure TSPI3A_SPI3ASTAT.setSPIROV(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,6,1
  sw      $v1,($a0)
end;
function  TSPI3A_SPI3ASTAT.getSPIROV : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,6,1
end;
procedure TSPI3A_SPI3ASTAT.setSRMT; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,8($a0)
end;
procedure TSPI3A_SPI3ASTAT.clearSRMT; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,4($a0)
end;
procedure TSPI3A_SPI3ASTAT.setSRMT(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,7,1
  sw      $v1,($a0)
end;
function  TSPI3A_SPI3ASTAT.getSRMT : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,7,1
end;
procedure TSPI3A_SPI3ASTAT.setSPITUR; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,8($a0)
end;
procedure TSPI3A_SPI3ASTAT.clearSPITUR; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,4($a0)
end;
procedure TSPI3A_SPI3ASTAT.setSPITUR(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,8,1
  sw      $v1,($a0)
end;
function  TSPI3A_SPI3ASTAT.getSPITUR : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,8,1
end;
procedure TSPI3A_SPI3ASTAT.setSPIBUSY; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2048
  sw $a1,8($a0)
end;
procedure TSPI3A_SPI3ASTAT.clearSPIBUSY; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2048
  sw $a1,4($a0)
end;
procedure TSPI3A_SPI3ASTAT.setSPIBUSY(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,11,1
  sw      $v1,($a0)
end;
function  TSPI3A_SPI3ASTAT.getSPIBUSY : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,11,1
end;
procedure TSPI3A_SPI3ASTAT.setTXBUFELM(thebits : TBits_5); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,16,5
  sw      $v1,($a0)
end;
function  TSPI3A_SPI3ASTAT.getTXBUFELM : TBits_5;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,16,5
end;
procedure TSPI3A_SPI3ASTAT.setRXBUFELM(thebits : TBits_5); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,24,5
  sw      $v1,($a0)
end;
function  TSPI3A_SPI3ASTAT.getRXBUFELM : TBits_5;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,24,5
end;
procedure TSPI3A_SPI3ASTAT.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TSPI3A_SPI3ASTAT.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TSPI3A_SPI4STAT.setSPIRBF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,8($a0)
end;
procedure TSPI3A_SPI4STAT.clearSPIRBF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,4($a0)
end;
procedure TSPI3A_SPI4STAT.setSPIRBF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,1
  sw      $v1,($a0)
end;
function  TSPI3A_SPI4STAT.getSPIRBF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,1
end;
procedure TSPI3A_SPI4STAT.setSPITBF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,8($a0)
end;
procedure TSPI3A_SPI4STAT.clearSPITBF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,4($a0)
end;
procedure TSPI3A_SPI4STAT.setSPITBF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,1,1
  sw      $v1,($a0)
end;
function  TSPI3A_SPI4STAT.getSPITBF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,1,1
end;
procedure TSPI3A_SPI4STAT.setSPITBE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,8($a0)
end;
procedure TSPI3A_SPI4STAT.clearSPITBE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,4($a0)
end;
procedure TSPI3A_SPI4STAT.setSPITBE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,3,1
  sw      $v1,($a0)
end;
function  TSPI3A_SPI4STAT.getSPITBE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,3,1
end;
procedure TSPI3A_SPI4STAT.setSPIRBE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,8($a0)
end;
procedure TSPI3A_SPI4STAT.clearSPIRBE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,4($a0)
end;
procedure TSPI3A_SPI4STAT.setSPIRBE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,5,1
  sw      $v1,($a0)
end;
function  TSPI3A_SPI4STAT.getSPIRBE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,5,1
end;
procedure TSPI3A_SPI4STAT.setSPIROV; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,8($a0)
end;
procedure TSPI3A_SPI4STAT.clearSPIROV; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,4($a0)
end;
procedure TSPI3A_SPI4STAT.setSPIROV(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,6,1
  sw      $v1,($a0)
end;
function  TSPI3A_SPI4STAT.getSPIROV : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,6,1
end;
procedure TSPI3A_SPI4STAT.setSRMT; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,8($a0)
end;
procedure TSPI3A_SPI4STAT.clearSRMT; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,4($a0)
end;
procedure TSPI3A_SPI4STAT.setSRMT(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,7,1
  sw      $v1,($a0)
end;
function  TSPI3A_SPI4STAT.getSRMT : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,7,1
end;
procedure TSPI3A_SPI4STAT.setSPITUR; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,8($a0)
end;
procedure TSPI3A_SPI4STAT.clearSPITUR; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,4($a0)
end;
procedure TSPI3A_SPI4STAT.setSPITUR(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,8,1
  sw      $v1,($a0)
end;
function  TSPI3A_SPI4STAT.getSPITUR : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,8,1
end;
procedure TSPI3A_SPI4STAT.setSPIBUSY; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2048
  sw $a1,8($a0)
end;
procedure TSPI3A_SPI4STAT.clearSPIBUSY; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2048
  sw $a1,4($a0)
end;
procedure TSPI3A_SPI4STAT.setSPIBUSY(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,11,1
  sw      $v1,($a0)
end;
function  TSPI3A_SPI4STAT.getSPIBUSY : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,11,1
end;
procedure TSPI3A_SPI4STAT.setTXBUFELM(thebits : TBits_5); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,16,5
  sw      $v1,($a0)
end;
function  TSPI3A_SPI4STAT.getTXBUFELM : TBits_5;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,16,5
end;
procedure TSPI3A_SPI4STAT.setRXBUFELM(thebits : TBits_5); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,24,5
  sw      $v1,($a0)
end;
function  TSPI3A_SPI4STAT.getRXBUFELM : TBits_5;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,24,5
end;
procedure TSPI3A_SPI4STAT.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TSPI3A_SPI4STAT.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TSPI1_SPI1CON.setSRXISEL(thebits : TBits_2); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,2
  sw      $v1,($a0)
end;
function  TSPI1_SPI1CON.getSRXISEL : TBits_2;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,2
end;
procedure TSPI1_SPI1CON.setSTXISEL(thebits : TBits_2); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,2,2
  sw      $v1,($a0)
end;
function  TSPI1_SPI1CON.getSTXISEL : TBits_2;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,2,2
end;
procedure TSPI1_SPI1CON.setMSTEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,8($a0)
end;
procedure TSPI1_SPI1CON.clearMSTEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,4($a0)
end;
procedure TSPI1_SPI1CON.setMSTEN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,5,1
  sw      $v1,($a0)
end;
function  TSPI1_SPI1CON.getMSTEN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,5,1
end;
procedure TSPI1_SPI1CON.setCKP; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,8($a0)
end;
procedure TSPI1_SPI1CON.clearCKP; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,4($a0)
end;
procedure TSPI1_SPI1CON.setCKP(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,6,1
  sw      $v1,($a0)
end;
function  TSPI1_SPI1CON.getCKP : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,6,1
end;
procedure TSPI1_SPI1CON.setSSEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,8($a0)
end;
procedure TSPI1_SPI1CON.clearSSEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,4($a0)
end;
procedure TSPI1_SPI1CON.setSSEN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,7,1
  sw      $v1,($a0)
end;
function  TSPI1_SPI1CON.getSSEN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,7,1
end;
procedure TSPI1_SPI1CON.setCKE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,8($a0)
end;
procedure TSPI1_SPI1CON.clearCKE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,4($a0)
end;
procedure TSPI1_SPI1CON.setCKE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,8,1
  sw      $v1,($a0)
end;
function  TSPI1_SPI1CON.getCKE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,8,1
end;
procedure TSPI1_SPI1CON.setSMP; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,512
  sw $a1,8($a0)
end;
procedure TSPI1_SPI1CON.clearSMP; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,512
  sw $a1,4($a0)
end;
procedure TSPI1_SPI1CON.setSMP(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,9,1
  sw      $v1,($a0)
end;
function  TSPI1_SPI1CON.getSMP : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,9,1
end;
procedure TSPI1_SPI1CON.setMODE16; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1024
  sw $a1,8($a0)
end;
procedure TSPI1_SPI1CON.clearMODE16; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1024
  sw $a1,4($a0)
end;
procedure TSPI1_SPI1CON.setMODE16(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,10,1
  sw      $v1,($a0)
end;
function  TSPI1_SPI1CON.getMODE16 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,10,1
end;
procedure TSPI1_SPI1CON.setMODE32; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2048
  sw $a1,8($a0)
end;
procedure TSPI1_SPI1CON.clearMODE32; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2048
  sw $a1,4($a0)
end;
procedure TSPI1_SPI1CON.setMODE32(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,11,1
  sw      $v1,($a0)
end;
function  TSPI1_SPI1CON.getMODE32 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,11,1
end;
procedure TSPI1_SPI1CON.setDISSDO; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4096
  sw $a1,8($a0)
end;
procedure TSPI1_SPI1CON.clearDISSDO; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4096
  sw $a1,4($a0)
end;
procedure TSPI1_SPI1CON.setDISSDO(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,12,1
  sw      $v1,($a0)
end;
function  TSPI1_SPI1CON.getDISSDO : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,12,1
end;
procedure TSPI1_SPI1CON.setSIDL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,8($a0)
end;
procedure TSPI1_SPI1CON.clearSIDL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,4($a0)
end;
procedure TSPI1_SPI1CON.setSIDL(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,13,1
  sw      $v1,($a0)
end;
function  TSPI1_SPI1CON.getSIDL : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,13,1
end;
procedure TSPI1_SPI1CON.setON; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,8($a0)
end;
procedure TSPI1_SPI1CON.clearON; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,4($a0)
end;
procedure TSPI1_SPI1CON.setON(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,15,1
  sw      $v1,($a0)
end;
function  TSPI1_SPI1CON.getON : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,15,1
end;
procedure TSPI1_SPI1CON.setENHBUF; assembler; nostackframe; inline;
asm
  lui     $a1,1
  sw $a1,8($a0)
end;
procedure TSPI1_SPI1CON.clearENHBUF; assembler; nostackframe; inline;
asm
  lui     $a1,1
  sw $a1,4($a0)
end;
procedure TSPI1_SPI1CON.setENHBUF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,16,1
  sw      $v1,($a0)
end;
function  TSPI1_SPI1CON.getENHBUF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,16,1
end;
procedure TSPI1_SPI1CON.setSPIFE; assembler; nostackframe; inline;
asm
  lui     $a1,2
  sw $a1,8($a0)
end;
procedure TSPI1_SPI1CON.clearSPIFE; assembler; nostackframe; inline;
asm
  lui     $a1,2
  sw $a1,4($a0)
end;
procedure TSPI1_SPI1CON.setSPIFE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,17,1
  sw      $v1,($a0)
end;
function  TSPI1_SPI1CON.getSPIFE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,17,1
end;
procedure TSPI1_SPI1CON.setFRMCNT(thebits : TBits_3); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,24,3
  sw      $v1,($a0)
end;
function  TSPI1_SPI1CON.getFRMCNT : TBits_3;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,24,3
end;
procedure TSPI1_SPI1CON.setFRMSYPW; assembler; nostackframe; inline;
asm
  lui     $a1,2048
  sw $a1,8($a0)
end;
procedure TSPI1_SPI1CON.clearFRMSYPW; assembler; nostackframe; inline;
asm
  lui     $a1,2048
  sw $a1,4($a0)
end;
procedure TSPI1_SPI1CON.setFRMSYPW(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,27,1
  sw      $v1,($a0)
end;
function  TSPI1_SPI1CON.getFRMSYPW : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,27,1
end;
procedure TSPI1_SPI1CON.setMSSEN; assembler; nostackframe; inline;
asm
  lui     $a1,4096
  sw $a1,8($a0)
end;
procedure TSPI1_SPI1CON.clearMSSEN; assembler; nostackframe; inline;
asm
  lui     $a1,4096
  sw $a1,4($a0)
end;
procedure TSPI1_SPI1CON.setMSSEN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,28,1
  sw      $v1,($a0)
end;
function  TSPI1_SPI1CON.getMSSEN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,28,1
end;
procedure TSPI1_SPI1CON.setFRMPOL; assembler; nostackframe; inline;
asm
  lui     $a1,8192
  sw $a1,8($a0)
end;
procedure TSPI1_SPI1CON.clearFRMPOL; assembler; nostackframe; inline;
asm
  lui     $a1,8192
  sw $a1,4($a0)
end;
procedure TSPI1_SPI1CON.setFRMPOL(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,29,1
  sw      $v1,($a0)
end;
function  TSPI1_SPI1CON.getFRMPOL : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,29,1
end;
procedure TSPI1_SPI1CON.setFRMSYNC; assembler; nostackframe; inline;
asm
  lui     $a1,16384
  sw $a1,8($a0)
end;
procedure TSPI1_SPI1CON.clearFRMSYNC; assembler; nostackframe; inline;
asm
  lui     $a1,16384
  sw $a1,4($a0)
end;
procedure TSPI1_SPI1CON.setFRMSYNC(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,30,1
  sw      $v1,($a0)
end;
function  TSPI1_SPI1CON.getFRMSYNC : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,30,1
end;
procedure TSPI1_SPI1CON.setFRMEN; assembler; nostackframe; inline;
asm
  lui     $a1,32768
  sw $a1,8($a0)
end;
procedure TSPI1_SPI1CON.clearFRMEN; assembler; nostackframe; inline;
asm
  lui     $a1,32768
  sw $a1,4($a0)
end;
procedure TSPI1_SPI1CON.setFRMEN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,31,1
  sw      $v1,($a0)
end;
function  TSPI1_SPI1CON.getFRMEN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,31,1
end;
procedure TSPI1_SPI1CON.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TSPI1_SPI1CON.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TSPI1_SPI1STAT.setSPIRBF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,8($a0)
end;
procedure TSPI1_SPI1STAT.clearSPIRBF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,4($a0)
end;
procedure TSPI1_SPI1STAT.setSPIRBF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,1
  sw      $v1,($a0)
end;
function  TSPI1_SPI1STAT.getSPIRBF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,1
end;
procedure TSPI1_SPI1STAT.setSPITBF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,8($a0)
end;
procedure TSPI1_SPI1STAT.clearSPITBF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,4($a0)
end;
procedure TSPI1_SPI1STAT.setSPITBF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,1,1
  sw      $v1,($a0)
end;
function  TSPI1_SPI1STAT.getSPITBF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,1,1
end;
procedure TSPI1_SPI1STAT.setSPITBE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,8($a0)
end;
procedure TSPI1_SPI1STAT.clearSPITBE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,4($a0)
end;
procedure TSPI1_SPI1STAT.setSPITBE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,3,1
  sw      $v1,($a0)
end;
function  TSPI1_SPI1STAT.getSPITBE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,3,1
end;
procedure TSPI1_SPI1STAT.setSPIRBE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,8($a0)
end;
procedure TSPI1_SPI1STAT.clearSPIRBE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,4($a0)
end;
procedure TSPI1_SPI1STAT.setSPIRBE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,5,1
  sw      $v1,($a0)
end;
function  TSPI1_SPI1STAT.getSPIRBE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,5,1
end;
procedure TSPI1_SPI1STAT.setSPIROV; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,8($a0)
end;
procedure TSPI1_SPI1STAT.clearSPIROV; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,4($a0)
end;
procedure TSPI1_SPI1STAT.setSPIROV(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,6,1
  sw      $v1,($a0)
end;
function  TSPI1_SPI1STAT.getSPIROV : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,6,1
end;
procedure TSPI1_SPI1STAT.setSRMT; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,8($a0)
end;
procedure TSPI1_SPI1STAT.clearSRMT; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,4($a0)
end;
procedure TSPI1_SPI1STAT.setSRMT(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,7,1
  sw      $v1,($a0)
end;
function  TSPI1_SPI1STAT.getSRMT : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,7,1
end;
procedure TSPI1_SPI1STAT.setSPITUR; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,8($a0)
end;
procedure TSPI1_SPI1STAT.clearSPITUR; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,4($a0)
end;
procedure TSPI1_SPI1STAT.setSPITUR(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,8,1
  sw      $v1,($a0)
end;
function  TSPI1_SPI1STAT.getSPITUR : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,8,1
end;
procedure TSPI1_SPI1STAT.setSPIBUSY; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2048
  sw $a1,8($a0)
end;
procedure TSPI1_SPI1STAT.clearSPIBUSY; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2048
  sw $a1,4($a0)
end;
procedure TSPI1_SPI1STAT.setSPIBUSY(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,11,1
  sw      $v1,($a0)
end;
function  TSPI1_SPI1STAT.getSPIBUSY : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,11,1
end;
procedure TSPI1_SPI1STAT.setTXBUFELM(thebits : TBits_5); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,16,5
  sw      $v1,($a0)
end;
function  TSPI1_SPI1STAT.getTXBUFELM : TBits_5;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,16,5
end;
procedure TSPI1_SPI1STAT.setRXBUFELM(thebits : TBits_5); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,24,5
  sw      $v1,($a0)
end;
function  TSPI1_SPI1STAT.getRXBUFELM : TBits_5;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,24,5
end;
procedure TSPI1_SPI1STAT.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TSPI1_SPI1STAT.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TUART1A_U1AMODE.setSTSEL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,8($a0)
end;
procedure TUART1A_U1AMODE.clearSTSEL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,4($a0)
end;
procedure TUART1A_U1AMODE.setSTSEL(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,1
  sw      $v1,($a0)
end;
function  TUART1A_U1AMODE.getSTSEL : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,1
end;
procedure TUART1A_U1AMODE.setPDSEL(thebits : TBits_2); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,1,2
  sw      $v1,($a0)
end;
function  TUART1A_U1AMODE.getPDSEL : TBits_2;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,1,2
end;
procedure TUART1A_U1AMODE.setBRGH; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,8($a0)
end;
procedure TUART1A_U1AMODE.clearBRGH; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,4($a0)
end;
procedure TUART1A_U1AMODE.setBRGH(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,3,1
  sw      $v1,($a0)
end;
function  TUART1A_U1AMODE.getBRGH : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,3,1
end;
procedure TUART1A_U1AMODE.setRXINV; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,8($a0)
end;
procedure TUART1A_U1AMODE.clearRXINV; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,4($a0)
end;
procedure TUART1A_U1AMODE.setRXINV(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,4,1
  sw      $v1,($a0)
end;
function  TUART1A_U1AMODE.getRXINV : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,4,1
end;
procedure TUART1A_U1AMODE.setABAUD; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,8($a0)
end;
procedure TUART1A_U1AMODE.clearABAUD; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,4($a0)
end;
procedure TUART1A_U1AMODE.setABAUD(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,5,1
  sw      $v1,($a0)
end;
function  TUART1A_U1AMODE.getABAUD : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,5,1
end;
procedure TUART1A_U1AMODE.setLPBACK; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,8($a0)
end;
procedure TUART1A_U1AMODE.clearLPBACK; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,4($a0)
end;
procedure TUART1A_U1AMODE.setLPBACK(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,6,1
  sw      $v1,($a0)
end;
function  TUART1A_U1AMODE.getLPBACK : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,6,1
end;
procedure TUART1A_U1AMODE.setWAKE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,8($a0)
end;
procedure TUART1A_U1AMODE.clearWAKE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,4($a0)
end;
procedure TUART1A_U1AMODE.setWAKE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,7,1
  sw      $v1,($a0)
end;
function  TUART1A_U1AMODE.getWAKE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,7,1
end;
procedure TUART1A_U1AMODE.setUEN(thebits : TBits_2); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,8,2
  sw      $v1,($a0)
end;
function  TUART1A_U1AMODE.getUEN : TBits_2;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,8,2
end;
procedure TUART1A_U1AMODE.setRTSMD; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2048
  sw $a1,8($a0)
end;
procedure TUART1A_U1AMODE.clearRTSMD; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2048
  sw $a1,4($a0)
end;
procedure TUART1A_U1AMODE.setRTSMD(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,11,1
  sw      $v1,($a0)
end;
function  TUART1A_U1AMODE.getRTSMD : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,11,1
end;
procedure TUART1A_U1AMODE.setIREN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4096
  sw $a1,8($a0)
end;
procedure TUART1A_U1AMODE.clearIREN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4096
  sw $a1,4($a0)
end;
procedure TUART1A_U1AMODE.setIREN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,12,1
  sw      $v1,($a0)
end;
function  TUART1A_U1AMODE.getIREN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,12,1
end;
procedure TUART1A_U1AMODE.setSIDL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,8($a0)
end;
procedure TUART1A_U1AMODE.clearSIDL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,4($a0)
end;
procedure TUART1A_U1AMODE.setSIDL(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,13,1
  sw      $v1,($a0)
end;
function  TUART1A_U1AMODE.getSIDL : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,13,1
end;
procedure TUART1A_U1AMODE.setON; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,8($a0)
end;
procedure TUART1A_U1AMODE.clearON; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,4($a0)
end;
procedure TUART1A_U1AMODE.setON(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,15,1
  sw      $v1,($a0)
end;
function  TUART1A_U1AMODE.getON : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,15,1
end;
procedure TUART1A_U1AMODE.setPDSEL0; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,8($a0)
end;
procedure TUART1A_U1AMODE.clearPDSEL0; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,4($a0)
end;
procedure TUART1A_U1AMODE.setPDSEL0(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,1,1
  sw      $v1,($a0)
end;
function  TUART1A_U1AMODE.getPDSEL0 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,1,1
end;
procedure TUART1A_U1AMODE.setPDSEL1; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,8($a0)
end;
procedure TUART1A_U1AMODE.clearPDSEL1; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,4($a0)
end;
procedure TUART1A_U1AMODE.setPDSEL1(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,2,1
  sw      $v1,($a0)
end;
function  TUART1A_U1AMODE.getPDSEL1 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,2,1
end;
procedure TUART1A_U1AMODE.setUEN0; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,8($a0)
end;
procedure TUART1A_U1AMODE.clearUEN0; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,4($a0)
end;
procedure TUART1A_U1AMODE.setUEN0(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,8,1
  sw      $v1,($a0)
end;
function  TUART1A_U1AMODE.getUEN0 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,8,1
end;
procedure TUART1A_U1AMODE.setUEN1; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,512
  sw $a1,8($a0)
end;
procedure TUART1A_U1AMODE.clearUEN1; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,512
  sw $a1,4($a0)
end;
procedure TUART1A_U1AMODE.setUEN1(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,9,1
  sw      $v1,($a0)
end;
function  TUART1A_U1AMODE.getUEN1 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,9,1
end;
procedure TUART1A_U1AMODE.setUSIDL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,8($a0)
end;
procedure TUART1A_U1AMODE.clearUSIDL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,4($a0)
end;
procedure TUART1A_U1AMODE.setUSIDL(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,13,1
  sw      $v1,($a0)
end;
function  TUART1A_U1AMODE.getUSIDL : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,13,1
end;
procedure TUART1A_U1AMODE.setUARTEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,8($a0)
end;
procedure TUART1A_U1AMODE.clearUARTEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,4($a0)
end;
procedure TUART1A_U1AMODE.setUARTEN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,15,1
  sw      $v1,($a0)
end;
function  TUART1A_U1AMODE.getUARTEN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,15,1
end;
procedure TUART1A_U1AMODE.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TUART1A_U1AMODE.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TUART1A_U1MODE.setSTSEL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,8($a0)
end;
procedure TUART1A_U1MODE.clearSTSEL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,4($a0)
end;
procedure TUART1A_U1MODE.setSTSEL(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,1
  sw      $v1,($a0)
end;
function  TUART1A_U1MODE.getSTSEL : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,1
end;
procedure TUART1A_U1MODE.setPDSEL(thebits : TBits_2); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,1,2
  sw      $v1,($a0)
end;
function  TUART1A_U1MODE.getPDSEL : TBits_2;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,1,2
end;
procedure TUART1A_U1MODE.setBRGH; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,8($a0)
end;
procedure TUART1A_U1MODE.clearBRGH; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,4($a0)
end;
procedure TUART1A_U1MODE.setBRGH(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,3,1
  sw      $v1,($a0)
end;
function  TUART1A_U1MODE.getBRGH : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,3,1
end;
procedure TUART1A_U1MODE.setRXINV; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,8($a0)
end;
procedure TUART1A_U1MODE.clearRXINV; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,4($a0)
end;
procedure TUART1A_U1MODE.setRXINV(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,4,1
  sw      $v1,($a0)
end;
function  TUART1A_U1MODE.getRXINV : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,4,1
end;
procedure TUART1A_U1MODE.setABAUD; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,8($a0)
end;
procedure TUART1A_U1MODE.clearABAUD; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,4($a0)
end;
procedure TUART1A_U1MODE.setABAUD(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,5,1
  sw      $v1,($a0)
end;
function  TUART1A_U1MODE.getABAUD : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,5,1
end;
procedure TUART1A_U1MODE.setLPBACK; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,8($a0)
end;
procedure TUART1A_U1MODE.clearLPBACK; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,4($a0)
end;
procedure TUART1A_U1MODE.setLPBACK(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,6,1
  sw      $v1,($a0)
end;
function  TUART1A_U1MODE.getLPBACK : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,6,1
end;
procedure TUART1A_U1MODE.setWAKE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,8($a0)
end;
procedure TUART1A_U1MODE.clearWAKE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,4($a0)
end;
procedure TUART1A_U1MODE.setWAKE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,7,1
  sw      $v1,($a0)
end;
function  TUART1A_U1MODE.getWAKE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,7,1
end;
procedure TUART1A_U1MODE.setUEN(thebits : TBits_2); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,8,2
  sw      $v1,($a0)
end;
function  TUART1A_U1MODE.getUEN : TBits_2;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,8,2
end;
procedure TUART1A_U1MODE.setRTSMD; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2048
  sw $a1,8($a0)
end;
procedure TUART1A_U1MODE.clearRTSMD; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2048
  sw $a1,4($a0)
end;
procedure TUART1A_U1MODE.setRTSMD(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,11,1
  sw      $v1,($a0)
end;
function  TUART1A_U1MODE.getRTSMD : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,11,1
end;
procedure TUART1A_U1MODE.setIREN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4096
  sw $a1,8($a0)
end;
procedure TUART1A_U1MODE.clearIREN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4096
  sw $a1,4($a0)
end;
procedure TUART1A_U1MODE.setIREN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,12,1
  sw      $v1,($a0)
end;
function  TUART1A_U1MODE.getIREN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,12,1
end;
procedure TUART1A_U1MODE.setSIDL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,8($a0)
end;
procedure TUART1A_U1MODE.clearSIDL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,4($a0)
end;
procedure TUART1A_U1MODE.setSIDL(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,13,1
  sw      $v1,($a0)
end;
function  TUART1A_U1MODE.getSIDL : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,13,1
end;
procedure TUART1A_U1MODE.setON; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,8($a0)
end;
procedure TUART1A_U1MODE.clearON; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,4($a0)
end;
procedure TUART1A_U1MODE.setON(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,15,1
  sw      $v1,($a0)
end;
function  TUART1A_U1MODE.getON : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,15,1
end;
procedure TUART1A_U1MODE.setPDSEL0; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,8($a0)
end;
procedure TUART1A_U1MODE.clearPDSEL0; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,4($a0)
end;
procedure TUART1A_U1MODE.setPDSEL0(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,1,1
  sw      $v1,($a0)
end;
function  TUART1A_U1MODE.getPDSEL0 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,1,1
end;
procedure TUART1A_U1MODE.setPDSEL1; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,8($a0)
end;
procedure TUART1A_U1MODE.clearPDSEL1; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,4($a0)
end;
procedure TUART1A_U1MODE.setPDSEL1(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,2,1
  sw      $v1,($a0)
end;
function  TUART1A_U1MODE.getPDSEL1 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,2,1
end;
procedure TUART1A_U1MODE.setUEN0; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,8($a0)
end;
procedure TUART1A_U1MODE.clearUEN0; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,4($a0)
end;
procedure TUART1A_U1MODE.setUEN0(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,8,1
  sw      $v1,($a0)
end;
function  TUART1A_U1MODE.getUEN0 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,8,1
end;
procedure TUART1A_U1MODE.setUEN1; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,512
  sw $a1,8($a0)
end;
procedure TUART1A_U1MODE.clearUEN1; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,512
  sw $a1,4($a0)
end;
procedure TUART1A_U1MODE.setUEN1(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,9,1
  sw      $v1,($a0)
end;
function  TUART1A_U1MODE.getUEN1 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,9,1
end;
procedure TUART1A_U1MODE.setUSIDL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,8($a0)
end;
procedure TUART1A_U1MODE.clearUSIDL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,4($a0)
end;
procedure TUART1A_U1MODE.setUSIDL(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,13,1
  sw      $v1,($a0)
end;
function  TUART1A_U1MODE.getUSIDL : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,13,1
end;
procedure TUART1A_U1MODE.setUARTEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,8($a0)
end;
procedure TUART1A_U1MODE.clearUARTEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,4($a0)
end;
procedure TUART1A_U1MODE.setUARTEN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,15,1
  sw      $v1,($a0)
end;
function  TUART1A_U1MODE.getUARTEN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,15,1
end;
procedure TUART1A_U1MODE.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TUART1A_U1MODE.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TUART1A_U1ASTA.setURXDA; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,8($a0)
end;
procedure TUART1A_U1ASTA.clearURXDA; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,4($a0)
end;
procedure TUART1A_U1ASTA.setURXDA(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,1
  sw      $v1,($a0)
end;
function  TUART1A_U1ASTA.getURXDA : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,1
end;
procedure TUART1A_U1ASTA.setOERR; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,8($a0)
end;
procedure TUART1A_U1ASTA.clearOERR; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,4($a0)
end;
procedure TUART1A_U1ASTA.setOERR(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,1,1
  sw      $v1,($a0)
end;
function  TUART1A_U1ASTA.getOERR : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,1,1
end;
procedure TUART1A_U1ASTA.setFERR; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,8($a0)
end;
procedure TUART1A_U1ASTA.clearFERR; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,4($a0)
end;
procedure TUART1A_U1ASTA.setFERR(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,2,1
  sw      $v1,($a0)
end;
function  TUART1A_U1ASTA.getFERR : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,2,1
end;
procedure TUART1A_U1ASTA.setPERR; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,8($a0)
end;
procedure TUART1A_U1ASTA.clearPERR; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,4($a0)
end;
procedure TUART1A_U1ASTA.setPERR(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,3,1
  sw      $v1,($a0)
end;
function  TUART1A_U1ASTA.getPERR : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,3,1
end;
procedure TUART1A_U1ASTA.setRIDLE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,8($a0)
end;
procedure TUART1A_U1ASTA.clearRIDLE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,4($a0)
end;
procedure TUART1A_U1ASTA.setRIDLE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,4,1
  sw      $v1,($a0)
end;
function  TUART1A_U1ASTA.getRIDLE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,4,1
end;
procedure TUART1A_U1ASTA.setADDEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,8($a0)
end;
procedure TUART1A_U1ASTA.clearADDEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,4($a0)
end;
procedure TUART1A_U1ASTA.setADDEN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,5,1
  sw      $v1,($a0)
end;
function  TUART1A_U1ASTA.getADDEN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,5,1
end;
procedure TUART1A_U1ASTA.setURXISEL(thebits : TBits_2); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,6,2
  sw      $v1,($a0)
end;
function  TUART1A_U1ASTA.getURXISEL : TBits_2;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,6,2
end;
procedure TUART1A_U1ASTA.setTRMT; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,8($a0)
end;
procedure TUART1A_U1ASTA.clearTRMT; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,4($a0)
end;
procedure TUART1A_U1ASTA.setTRMT(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,8,1
  sw      $v1,($a0)
end;
function  TUART1A_U1ASTA.getTRMT : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,8,1
end;
procedure TUART1A_U1ASTA.setUTXBF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,512
  sw $a1,8($a0)
end;
procedure TUART1A_U1ASTA.clearUTXBF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,512
  sw $a1,4($a0)
end;
procedure TUART1A_U1ASTA.setUTXBF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,9,1
  sw      $v1,($a0)
end;
function  TUART1A_U1ASTA.getUTXBF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,9,1
end;
procedure TUART1A_U1ASTA.setUTXEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1024
  sw $a1,8($a0)
end;
procedure TUART1A_U1ASTA.clearUTXEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1024
  sw $a1,4($a0)
end;
procedure TUART1A_U1ASTA.setUTXEN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,10,1
  sw      $v1,($a0)
end;
function  TUART1A_U1ASTA.getUTXEN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,10,1
end;
procedure TUART1A_U1ASTA.setUTXBRK; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2048
  sw $a1,8($a0)
end;
procedure TUART1A_U1ASTA.clearUTXBRK; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2048
  sw $a1,4($a0)
end;
procedure TUART1A_U1ASTA.setUTXBRK(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,11,1
  sw      $v1,($a0)
end;
function  TUART1A_U1ASTA.getUTXBRK : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,11,1
end;
procedure TUART1A_U1ASTA.setURXEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4096
  sw $a1,8($a0)
end;
procedure TUART1A_U1ASTA.clearURXEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4096
  sw $a1,4($a0)
end;
procedure TUART1A_U1ASTA.setURXEN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,12,1
  sw      $v1,($a0)
end;
function  TUART1A_U1ASTA.getURXEN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,12,1
end;
procedure TUART1A_U1ASTA.setUTXINV; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,8($a0)
end;
procedure TUART1A_U1ASTA.clearUTXINV; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,4($a0)
end;
procedure TUART1A_U1ASTA.setUTXINV(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,13,1
  sw      $v1,($a0)
end;
function  TUART1A_U1ASTA.getUTXINV : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,13,1
end;
procedure TUART1A_U1ASTA.setUTXISEL(thebits : TBits_2); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,14,2
  sw      $v1,($a0)
end;
function  TUART1A_U1ASTA.getUTXISEL : TBits_2;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,14,2
end;
procedure TUART1A_U1ASTA.setADDR(thebits : TBits_8); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  sll     $a1,$a1,16
  lui    $v0,65280
  ori    $v0,$v0,65535
  and   $v1,$v1,$v0
  or    $a1,$a1,$v0
  sw    $a1,($a0)
end;
function  TUART1A_U1ASTA.getADDR : TBits_8;
asm
  lw      $v1,($a0)
  srl     $a1,$a1,16
  lui    $v0,255
  and    $a1,$a1,$v0
end;
procedure TUART1A_U1ASTA.setADM_EN; assembler; nostackframe; inline;
asm
  lui     $a1,256
  sw $a1,8($a0)
end;
procedure TUART1A_U1ASTA.clearADM_EN; assembler; nostackframe; inline;
asm
  lui     $a1,256
  sw $a1,4($a0)
end;
procedure TUART1A_U1ASTA.setADM_EN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,24,1
  sw      $v1,($a0)
end;
function  TUART1A_U1ASTA.getADM_EN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,24,1
end;
procedure TUART1A_U1ASTA.setURXISEL0; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,8($a0)
end;
procedure TUART1A_U1ASTA.clearURXISEL0; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,4($a0)
end;
procedure TUART1A_U1ASTA.setURXISEL0(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,6,1
  sw      $v1,($a0)
end;
function  TUART1A_U1ASTA.getURXISEL0 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,6,1
end;
procedure TUART1A_U1ASTA.setURXISEL1; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,8($a0)
end;
procedure TUART1A_U1ASTA.clearURXISEL1; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,4($a0)
end;
procedure TUART1A_U1ASTA.setURXISEL1(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,7,1
  sw      $v1,($a0)
end;
function  TUART1A_U1ASTA.getURXISEL1 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,7,1
end;
procedure TUART1A_U1ASTA.setUTXISEL0; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16384
  sw $a1,8($a0)
end;
procedure TUART1A_U1ASTA.clearUTXISEL0; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16384
  sw $a1,4($a0)
end;
procedure TUART1A_U1ASTA.setUTXISEL0(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,14,1
  sw      $v1,($a0)
end;
function  TUART1A_U1ASTA.getUTXISEL0 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,14,1
end;
procedure TUART1A_U1ASTA.setUTXISEL1; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,8($a0)
end;
procedure TUART1A_U1ASTA.clearUTXISEL1; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,4($a0)
end;
procedure TUART1A_U1ASTA.setUTXISEL1(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,15,1
  sw      $v1,($a0)
end;
function  TUART1A_U1ASTA.getUTXISEL1 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,15,1
end;
procedure TUART1A_U1ASTA.setUTXSEL(thebits : TBits_2); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,14,2
  sw      $v1,($a0)
end;
function  TUART1A_U1ASTA.getUTXSEL : TBits_2;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,14,2
end;
procedure TUART1A_U1ASTA.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TUART1A_U1ASTA.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TUART1A_U1STA.setURXDA; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,8($a0)
end;
procedure TUART1A_U1STA.clearURXDA; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,4($a0)
end;
procedure TUART1A_U1STA.setURXDA(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,1
  sw      $v1,($a0)
end;
function  TUART1A_U1STA.getURXDA : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,1
end;
procedure TUART1A_U1STA.setOERR; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,8($a0)
end;
procedure TUART1A_U1STA.clearOERR; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,4($a0)
end;
procedure TUART1A_U1STA.setOERR(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,1,1
  sw      $v1,($a0)
end;
function  TUART1A_U1STA.getOERR : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,1,1
end;
procedure TUART1A_U1STA.setFERR; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,8($a0)
end;
procedure TUART1A_U1STA.clearFERR; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,4($a0)
end;
procedure TUART1A_U1STA.setFERR(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,2,1
  sw      $v1,($a0)
end;
function  TUART1A_U1STA.getFERR : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,2,1
end;
procedure TUART1A_U1STA.setPERR; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,8($a0)
end;
procedure TUART1A_U1STA.clearPERR; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,4($a0)
end;
procedure TUART1A_U1STA.setPERR(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,3,1
  sw      $v1,($a0)
end;
function  TUART1A_U1STA.getPERR : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,3,1
end;
procedure TUART1A_U1STA.setRIDLE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,8($a0)
end;
procedure TUART1A_U1STA.clearRIDLE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,4($a0)
end;
procedure TUART1A_U1STA.setRIDLE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,4,1
  sw      $v1,($a0)
end;
function  TUART1A_U1STA.getRIDLE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,4,1
end;
procedure TUART1A_U1STA.setADDEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,8($a0)
end;
procedure TUART1A_U1STA.clearADDEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,4($a0)
end;
procedure TUART1A_U1STA.setADDEN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,5,1
  sw      $v1,($a0)
end;
function  TUART1A_U1STA.getADDEN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,5,1
end;
procedure TUART1A_U1STA.setURXISEL(thebits : TBits_2); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,6,2
  sw      $v1,($a0)
end;
function  TUART1A_U1STA.getURXISEL : TBits_2;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,6,2
end;
procedure TUART1A_U1STA.setTRMT; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,8($a0)
end;
procedure TUART1A_U1STA.clearTRMT; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,4($a0)
end;
procedure TUART1A_U1STA.setTRMT(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,8,1
  sw      $v1,($a0)
end;
function  TUART1A_U1STA.getTRMT : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,8,1
end;
procedure TUART1A_U1STA.setUTXBF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,512
  sw $a1,8($a0)
end;
procedure TUART1A_U1STA.clearUTXBF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,512
  sw $a1,4($a0)
end;
procedure TUART1A_U1STA.setUTXBF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,9,1
  sw      $v1,($a0)
end;
function  TUART1A_U1STA.getUTXBF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,9,1
end;
procedure TUART1A_U1STA.setUTXEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1024
  sw $a1,8($a0)
end;
procedure TUART1A_U1STA.clearUTXEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1024
  sw $a1,4($a0)
end;
procedure TUART1A_U1STA.setUTXEN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,10,1
  sw      $v1,($a0)
end;
function  TUART1A_U1STA.getUTXEN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,10,1
end;
procedure TUART1A_U1STA.setUTXBRK; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2048
  sw $a1,8($a0)
end;
procedure TUART1A_U1STA.clearUTXBRK; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2048
  sw $a1,4($a0)
end;
procedure TUART1A_U1STA.setUTXBRK(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,11,1
  sw      $v1,($a0)
end;
function  TUART1A_U1STA.getUTXBRK : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,11,1
end;
procedure TUART1A_U1STA.setURXEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4096
  sw $a1,8($a0)
end;
procedure TUART1A_U1STA.clearURXEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4096
  sw $a1,4($a0)
end;
procedure TUART1A_U1STA.setURXEN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,12,1
  sw      $v1,($a0)
end;
function  TUART1A_U1STA.getURXEN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,12,1
end;
procedure TUART1A_U1STA.setUTXINV; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,8($a0)
end;
procedure TUART1A_U1STA.clearUTXINV; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,4($a0)
end;
procedure TUART1A_U1STA.setUTXINV(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,13,1
  sw      $v1,($a0)
end;
function  TUART1A_U1STA.getUTXINV : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,13,1
end;
procedure TUART1A_U1STA.setUTXISEL(thebits : TBits_2); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,14,2
  sw      $v1,($a0)
end;
function  TUART1A_U1STA.getUTXISEL : TBits_2;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,14,2
end;
procedure TUART1A_U1STA.setADDR(thebits : TBits_8); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  sll     $a1,$a1,16
  lui    $v0,65280
  ori    $v0,$v0,65535
  and   $v1,$v1,$v0
  or    $a1,$a1,$v0
  sw    $a1,($a0)
end;
function  TUART1A_U1STA.getADDR : TBits_8;
asm
  lw      $v1,($a0)
  srl     $a1,$a1,16
  lui    $v0,255
  and    $a1,$a1,$v0
end;
procedure TUART1A_U1STA.setADM_EN; assembler; nostackframe; inline;
asm
  lui     $a1,256
  sw $a1,8($a0)
end;
procedure TUART1A_U1STA.clearADM_EN; assembler; nostackframe; inline;
asm
  lui     $a1,256
  sw $a1,4($a0)
end;
procedure TUART1A_U1STA.setADM_EN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,24,1
  sw      $v1,($a0)
end;
function  TUART1A_U1STA.getADM_EN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,24,1
end;
procedure TUART1A_U1STA.setURXISEL0; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,8($a0)
end;
procedure TUART1A_U1STA.clearURXISEL0; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,4($a0)
end;
procedure TUART1A_U1STA.setURXISEL0(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,6,1
  sw      $v1,($a0)
end;
function  TUART1A_U1STA.getURXISEL0 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,6,1
end;
procedure TUART1A_U1STA.setURXISEL1; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,8($a0)
end;
procedure TUART1A_U1STA.clearURXISEL1; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,4($a0)
end;
procedure TUART1A_U1STA.setURXISEL1(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,7,1
  sw      $v1,($a0)
end;
function  TUART1A_U1STA.getURXISEL1 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,7,1
end;
procedure TUART1A_U1STA.setUTXISEL0; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16384
  sw $a1,8($a0)
end;
procedure TUART1A_U1STA.clearUTXISEL0; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16384
  sw $a1,4($a0)
end;
procedure TUART1A_U1STA.setUTXISEL0(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,14,1
  sw      $v1,($a0)
end;
function  TUART1A_U1STA.getUTXISEL0 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,14,1
end;
procedure TUART1A_U1STA.setUTXISEL1; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,8($a0)
end;
procedure TUART1A_U1STA.clearUTXISEL1; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,4($a0)
end;
procedure TUART1A_U1STA.setUTXISEL1(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,15,1
  sw      $v1,($a0)
end;
function  TUART1A_U1STA.getUTXISEL1 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,15,1
end;
procedure TUART1A_U1STA.setUTXSEL(thebits : TBits_2); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,14,2
  sw      $v1,($a0)
end;
function  TUART1A_U1STA.getUTXSEL : TBits_2;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,14,2
end;
procedure TUART1A_U1STA.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TUART1A_U1STA.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TUART1B_U1BMODE.setSTSEL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,8($a0)
end;
procedure TUART1B_U1BMODE.clearSTSEL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,4($a0)
end;
procedure TUART1B_U1BMODE.setSTSEL(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,1
  sw      $v1,($a0)
end;
function  TUART1B_U1BMODE.getSTSEL : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,1
end;
procedure TUART1B_U1BMODE.setPDSEL(thebits : TBits_2); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,1,2
  sw      $v1,($a0)
end;
function  TUART1B_U1BMODE.getPDSEL : TBits_2;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,1,2
end;
procedure TUART1B_U1BMODE.setBRGH; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,8($a0)
end;
procedure TUART1B_U1BMODE.clearBRGH; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,4($a0)
end;
procedure TUART1B_U1BMODE.setBRGH(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,3,1
  sw      $v1,($a0)
end;
function  TUART1B_U1BMODE.getBRGH : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,3,1
end;
procedure TUART1B_U1BMODE.setRXINV; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,8($a0)
end;
procedure TUART1B_U1BMODE.clearRXINV; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,4($a0)
end;
procedure TUART1B_U1BMODE.setRXINV(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,4,1
  sw      $v1,($a0)
end;
function  TUART1B_U1BMODE.getRXINV : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,4,1
end;
procedure TUART1B_U1BMODE.setABAUD; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,8($a0)
end;
procedure TUART1B_U1BMODE.clearABAUD; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,4($a0)
end;
procedure TUART1B_U1BMODE.setABAUD(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,5,1
  sw      $v1,($a0)
end;
function  TUART1B_U1BMODE.getABAUD : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,5,1
end;
procedure TUART1B_U1BMODE.setLPBACK; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,8($a0)
end;
procedure TUART1B_U1BMODE.clearLPBACK; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,4($a0)
end;
procedure TUART1B_U1BMODE.setLPBACK(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,6,1
  sw      $v1,($a0)
end;
function  TUART1B_U1BMODE.getLPBACK : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,6,1
end;
procedure TUART1B_U1BMODE.setWAKE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,8($a0)
end;
procedure TUART1B_U1BMODE.clearWAKE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,4($a0)
end;
procedure TUART1B_U1BMODE.setWAKE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,7,1
  sw      $v1,($a0)
end;
function  TUART1B_U1BMODE.getWAKE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,7,1
end;
procedure TUART1B_U1BMODE.setIREN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4096
  sw $a1,8($a0)
end;
procedure TUART1B_U1BMODE.clearIREN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4096
  sw $a1,4($a0)
end;
procedure TUART1B_U1BMODE.setIREN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,12,1
  sw      $v1,($a0)
end;
function  TUART1B_U1BMODE.getIREN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,12,1
end;
procedure TUART1B_U1BMODE.setSIDL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,8($a0)
end;
procedure TUART1B_U1BMODE.clearSIDL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,4($a0)
end;
procedure TUART1B_U1BMODE.setSIDL(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,13,1
  sw      $v1,($a0)
end;
function  TUART1B_U1BMODE.getSIDL : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,13,1
end;
procedure TUART1B_U1BMODE.setON; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,8($a0)
end;
procedure TUART1B_U1BMODE.clearON; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,4($a0)
end;
procedure TUART1B_U1BMODE.setON(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,15,1
  sw      $v1,($a0)
end;
function  TUART1B_U1BMODE.getON : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,15,1
end;
procedure TUART1B_U1BMODE.setPDSEL0; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,8($a0)
end;
procedure TUART1B_U1BMODE.clearPDSEL0; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,4($a0)
end;
procedure TUART1B_U1BMODE.setPDSEL0(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,1,1
  sw      $v1,($a0)
end;
function  TUART1B_U1BMODE.getPDSEL0 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,1,1
end;
procedure TUART1B_U1BMODE.setPDSEL1; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,8($a0)
end;
procedure TUART1B_U1BMODE.clearPDSEL1; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,4($a0)
end;
procedure TUART1B_U1BMODE.setPDSEL1(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,2,1
  sw      $v1,($a0)
end;
function  TUART1B_U1BMODE.getPDSEL1 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,2,1
end;
procedure TUART1B_U1BMODE.setUSIDL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,8($a0)
end;
procedure TUART1B_U1BMODE.clearUSIDL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,4($a0)
end;
procedure TUART1B_U1BMODE.setUSIDL(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,13,1
  sw      $v1,($a0)
end;
function  TUART1B_U1BMODE.getUSIDL : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,13,1
end;
procedure TUART1B_U1BMODE.setUARTEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,8($a0)
end;
procedure TUART1B_U1BMODE.clearUARTEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,4($a0)
end;
procedure TUART1B_U1BMODE.setUARTEN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,15,1
  sw      $v1,($a0)
end;
function  TUART1B_U1BMODE.getUARTEN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,15,1
end;
procedure TUART1B_U1BMODE.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TUART1B_U1BMODE.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TUART1B_U4MODE.setSTSEL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,8($a0)
end;
procedure TUART1B_U4MODE.clearSTSEL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,4($a0)
end;
procedure TUART1B_U4MODE.setSTSEL(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,1
  sw      $v1,($a0)
end;
function  TUART1B_U4MODE.getSTSEL : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,1
end;
procedure TUART1B_U4MODE.setPDSEL(thebits : TBits_2); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,1,2
  sw      $v1,($a0)
end;
function  TUART1B_U4MODE.getPDSEL : TBits_2;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,1,2
end;
procedure TUART1B_U4MODE.setBRGH; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,8($a0)
end;
procedure TUART1B_U4MODE.clearBRGH; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,4($a0)
end;
procedure TUART1B_U4MODE.setBRGH(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,3,1
  sw      $v1,($a0)
end;
function  TUART1B_U4MODE.getBRGH : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,3,1
end;
procedure TUART1B_U4MODE.setRXINV; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,8($a0)
end;
procedure TUART1B_U4MODE.clearRXINV; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,4($a0)
end;
procedure TUART1B_U4MODE.setRXINV(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,4,1
  sw      $v1,($a0)
end;
function  TUART1B_U4MODE.getRXINV : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,4,1
end;
procedure TUART1B_U4MODE.setABAUD; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,8($a0)
end;
procedure TUART1B_U4MODE.clearABAUD; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,4($a0)
end;
procedure TUART1B_U4MODE.setABAUD(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,5,1
  sw      $v1,($a0)
end;
function  TUART1B_U4MODE.getABAUD : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,5,1
end;
procedure TUART1B_U4MODE.setLPBACK; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,8($a0)
end;
procedure TUART1B_U4MODE.clearLPBACK; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,4($a0)
end;
procedure TUART1B_U4MODE.setLPBACK(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,6,1
  sw      $v1,($a0)
end;
function  TUART1B_U4MODE.getLPBACK : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,6,1
end;
procedure TUART1B_U4MODE.setWAKE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,8($a0)
end;
procedure TUART1B_U4MODE.clearWAKE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,4($a0)
end;
procedure TUART1B_U4MODE.setWAKE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,7,1
  sw      $v1,($a0)
end;
function  TUART1B_U4MODE.getWAKE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,7,1
end;
procedure TUART1B_U4MODE.setIREN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4096
  sw $a1,8($a0)
end;
procedure TUART1B_U4MODE.clearIREN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4096
  sw $a1,4($a0)
end;
procedure TUART1B_U4MODE.setIREN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,12,1
  sw      $v1,($a0)
end;
function  TUART1B_U4MODE.getIREN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,12,1
end;
procedure TUART1B_U4MODE.setSIDL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,8($a0)
end;
procedure TUART1B_U4MODE.clearSIDL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,4($a0)
end;
procedure TUART1B_U4MODE.setSIDL(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,13,1
  sw      $v1,($a0)
end;
function  TUART1B_U4MODE.getSIDL : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,13,1
end;
procedure TUART1B_U4MODE.setON; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,8($a0)
end;
procedure TUART1B_U4MODE.clearON; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,4($a0)
end;
procedure TUART1B_U4MODE.setON(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,15,1
  sw      $v1,($a0)
end;
function  TUART1B_U4MODE.getON : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,15,1
end;
procedure TUART1B_U4MODE.setPDSEL0; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,8($a0)
end;
procedure TUART1B_U4MODE.clearPDSEL0; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,4($a0)
end;
procedure TUART1B_U4MODE.setPDSEL0(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,1,1
  sw      $v1,($a0)
end;
function  TUART1B_U4MODE.getPDSEL0 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,1,1
end;
procedure TUART1B_U4MODE.setPDSEL1; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,8($a0)
end;
procedure TUART1B_U4MODE.clearPDSEL1; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,4($a0)
end;
procedure TUART1B_U4MODE.setPDSEL1(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,2,1
  sw      $v1,($a0)
end;
function  TUART1B_U4MODE.getPDSEL1 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,2,1
end;
procedure TUART1B_U4MODE.setUSIDL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,8($a0)
end;
procedure TUART1B_U4MODE.clearUSIDL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,4($a0)
end;
procedure TUART1B_U4MODE.setUSIDL(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,13,1
  sw      $v1,($a0)
end;
function  TUART1B_U4MODE.getUSIDL : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,13,1
end;
procedure TUART1B_U4MODE.setUARTEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,8($a0)
end;
procedure TUART1B_U4MODE.clearUARTEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,4($a0)
end;
procedure TUART1B_U4MODE.setUARTEN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,15,1
  sw      $v1,($a0)
end;
function  TUART1B_U4MODE.getUARTEN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,15,1
end;
procedure TUART1B_U4MODE.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TUART1B_U4MODE.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TUART1B_U1BSTA.setURXDA; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,8($a0)
end;
procedure TUART1B_U1BSTA.clearURXDA; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,4($a0)
end;
procedure TUART1B_U1BSTA.setURXDA(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,1
  sw      $v1,($a0)
end;
function  TUART1B_U1BSTA.getURXDA : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,1
end;
procedure TUART1B_U1BSTA.setOERR; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,8($a0)
end;
procedure TUART1B_U1BSTA.clearOERR; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,4($a0)
end;
procedure TUART1B_U1BSTA.setOERR(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,1,1
  sw      $v1,($a0)
end;
function  TUART1B_U1BSTA.getOERR : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,1,1
end;
procedure TUART1B_U1BSTA.setFERR; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,8($a0)
end;
procedure TUART1B_U1BSTA.clearFERR; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,4($a0)
end;
procedure TUART1B_U1BSTA.setFERR(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,2,1
  sw      $v1,($a0)
end;
function  TUART1B_U1BSTA.getFERR : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,2,1
end;
procedure TUART1B_U1BSTA.setPERR; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,8($a0)
end;
procedure TUART1B_U1BSTA.clearPERR; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,4($a0)
end;
procedure TUART1B_U1BSTA.setPERR(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,3,1
  sw      $v1,($a0)
end;
function  TUART1B_U1BSTA.getPERR : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,3,1
end;
procedure TUART1B_U1BSTA.setRIDLE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,8($a0)
end;
procedure TUART1B_U1BSTA.clearRIDLE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,4($a0)
end;
procedure TUART1B_U1BSTA.setRIDLE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,4,1
  sw      $v1,($a0)
end;
function  TUART1B_U1BSTA.getRIDLE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,4,1
end;
procedure TUART1B_U1BSTA.setADDEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,8($a0)
end;
procedure TUART1B_U1BSTA.clearADDEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,4($a0)
end;
procedure TUART1B_U1BSTA.setADDEN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,5,1
  sw      $v1,($a0)
end;
function  TUART1B_U1BSTA.getADDEN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,5,1
end;
procedure TUART1B_U1BSTA.setURXISEL(thebits : TBits_2); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,6,2
  sw      $v1,($a0)
end;
function  TUART1B_U1BSTA.getURXISEL : TBits_2;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,6,2
end;
procedure TUART1B_U1BSTA.setTRMT; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,8($a0)
end;
procedure TUART1B_U1BSTA.clearTRMT; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,4($a0)
end;
procedure TUART1B_U1BSTA.setTRMT(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,8,1
  sw      $v1,($a0)
end;
function  TUART1B_U1BSTA.getTRMT : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,8,1
end;
procedure TUART1B_U1BSTA.setUTXBF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,512
  sw $a1,8($a0)
end;
procedure TUART1B_U1BSTA.clearUTXBF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,512
  sw $a1,4($a0)
end;
procedure TUART1B_U1BSTA.setUTXBF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,9,1
  sw      $v1,($a0)
end;
function  TUART1B_U1BSTA.getUTXBF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,9,1
end;
procedure TUART1B_U1BSTA.setUTXEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1024
  sw $a1,8($a0)
end;
procedure TUART1B_U1BSTA.clearUTXEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1024
  sw $a1,4($a0)
end;
procedure TUART1B_U1BSTA.setUTXEN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,10,1
  sw      $v1,($a0)
end;
function  TUART1B_U1BSTA.getUTXEN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,10,1
end;
procedure TUART1B_U1BSTA.setUTXBRK; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2048
  sw $a1,8($a0)
end;
procedure TUART1B_U1BSTA.clearUTXBRK; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2048
  sw $a1,4($a0)
end;
procedure TUART1B_U1BSTA.setUTXBRK(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,11,1
  sw      $v1,($a0)
end;
function  TUART1B_U1BSTA.getUTXBRK : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,11,1
end;
procedure TUART1B_U1BSTA.setURXEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4096
  sw $a1,8($a0)
end;
procedure TUART1B_U1BSTA.clearURXEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4096
  sw $a1,4($a0)
end;
procedure TUART1B_U1BSTA.setURXEN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,12,1
  sw      $v1,($a0)
end;
function  TUART1B_U1BSTA.getURXEN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,12,1
end;
procedure TUART1B_U1BSTA.setUTXINV; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,8($a0)
end;
procedure TUART1B_U1BSTA.clearUTXINV; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,4($a0)
end;
procedure TUART1B_U1BSTA.setUTXINV(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,13,1
  sw      $v1,($a0)
end;
function  TUART1B_U1BSTA.getUTXINV : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,13,1
end;
procedure TUART1B_U1BSTA.setUTXISEL(thebits : TBits_2); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,14,2
  sw      $v1,($a0)
end;
function  TUART1B_U1BSTA.getUTXISEL : TBits_2;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,14,2
end;
procedure TUART1B_U1BSTA.setADDR(thebits : TBits_8); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  sll     $a1,$a1,16
  lui    $v0,65280
  ori    $v0,$v0,65535
  and   $v1,$v1,$v0
  or    $a1,$a1,$v0
  sw    $a1,($a0)
end;
function  TUART1B_U1BSTA.getADDR : TBits_8;
asm
  lw      $v1,($a0)
  srl     $a1,$a1,16
  lui    $v0,255
  and    $a1,$a1,$v0
end;
procedure TUART1B_U1BSTA.setADM_EN; assembler; nostackframe; inline;
asm
  lui     $a1,256
  sw $a1,8($a0)
end;
procedure TUART1B_U1BSTA.clearADM_EN; assembler; nostackframe; inline;
asm
  lui     $a1,256
  sw $a1,4($a0)
end;
procedure TUART1B_U1BSTA.setADM_EN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,24,1
  sw      $v1,($a0)
end;
function  TUART1B_U1BSTA.getADM_EN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,24,1
end;
procedure TUART1B_U1BSTA.setURXISEL0; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,8($a0)
end;
procedure TUART1B_U1BSTA.clearURXISEL0; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,4($a0)
end;
procedure TUART1B_U1BSTA.setURXISEL0(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,6,1
  sw      $v1,($a0)
end;
function  TUART1B_U1BSTA.getURXISEL0 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,6,1
end;
procedure TUART1B_U1BSTA.setURXISEL1; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,8($a0)
end;
procedure TUART1B_U1BSTA.clearURXISEL1; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,4($a0)
end;
procedure TUART1B_U1BSTA.setURXISEL1(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,7,1
  sw      $v1,($a0)
end;
function  TUART1B_U1BSTA.getURXISEL1 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,7,1
end;
procedure TUART1B_U1BSTA.setUTXISEL0; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16384
  sw $a1,8($a0)
end;
procedure TUART1B_U1BSTA.clearUTXISEL0; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16384
  sw $a1,4($a0)
end;
procedure TUART1B_U1BSTA.setUTXISEL0(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,14,1
  sw      $v1,($a0)
end;
function  TUART1B_U1BSTA.getUTXISEL0 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,14,1
end;
procedure TUART1B_U1BSTA.setUTXISEL1; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,8($a0)
end;
procedure TUART1B_U1BSTA.clearUTXISEL1; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,4($a0)
end;
procedure TUART1B_U1BSTA.setUTXISEL1(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,15,1
  sw      $v1,($a0)
end;
function  TUART1B_U1BSTA.getUTXISEL1 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,15,1
end;
procedure TUART1B_U1BSTA.setUTXSEL(thebits : TBits_2); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,14,2
  sw      $v1,($a0)
end;
function  TUART1B_U1BSTA.getUTXSEL : TBits_2;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,14,2
end;
procedure TUART1B_U1BSTA.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TUART1B_U1BSTA.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TUART1B_U4STA.setURXDA; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,8($a0)
end;
procedure TUART1B_U4STA.clearURXDA; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,4($a0)
end;
procedure TUART1B_U4STA.setURXDA(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,1
  sw      $v1,($a0)
end;
function  TUART1B_U4STA.getURXDA : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,1
end;
procedure TUART1B_U4STA.setOERR; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,8($a0)
end;
procedure TUART1B_U4STA.clearOERR; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,4($a0)
end;
procedure TUART1B_U4STA.setOERR(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,1,1
  sw      $v1,($a0)
end;
function  TUART1B_U4STA.getOERR : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,1,1
end;
procedure TUART1B_U4STA.setFERR; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,8($a0)
end;
procedure TUART1B_U4STA.clearFERR; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,4($a0)
end;
procedure TUART1B_U4STA.setFERR(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,2,1
  sw      $v1,($a0)
end;
function  TUART1B_U4STA.getFERR : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,2,1
end;
procedure TUART1B_U4STA.setPERR; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,8($a0)
end;
procedure TUART1B_U4STA.clearPERR; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,4($a0)
end;
procedure TUART1B_U4STA.setPERR(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,3,1
  sw      $v1,($a0)
end;
function  TUART1B_U4STA.getPERR : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,3,1
end;
procedure TUART1B_U4STA.setRIDLE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,8($a0)
end;
procedure TUART1B_U4STA.clearRIDLE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,4($a0)
end;
procedure TUART1B_U4STA.setRIDLE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,4,1
  sw      $v1,($a0)
end;
function  TUART1B_U4STA.getRIDLE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,4,1
end;
procedure TUART1B_U4STA.setADDEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,8($a0)
end;
procedure TUART1B_U4STA.clearADDEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,4($a0)
end;
procedure TUART1B_U4STA.setADDEN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,5,1
  sw      $v1,($a0)
end;
function  TUART1B_U4STA.getADDEN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,5,1
end;
procedure TUART1B_U4STA.setURXISEL(thebits : TBits_2); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,6,2
  sw      $v1,($a0)
end;
function  TUART1B_U4STA.getURXISEL : TBits_2;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,6,2
end;
procedure TUART1B_U4STA.setTRMT; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,8($a0)
end;
procedure TUART1B_U4STA.clearTRMT; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,4($a0)
end;
procedure TUART1B_U4STA.setTRMT(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,8,1
  sw      $v1,($a0)
end;
function  TUART1B_U4STA.getTRMT : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,8,1
end;
procedure TUART1B_U4STA.setUTXBF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,512
  sw $a1,8($a0)
end;
procedure TUART1B_U4STA.clearUTXBF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,512
  sw $a1,4($a0)
end;
procedure TUART1B_U4STA.setUTXBF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,9,1
  sw      $v1,($a0)
end;
function  TUART1B_U4STA.getUTXBF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,9,1
end;
procedure TUART1B_U4STA.setUTXEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1024
  sw $a1,8($a0)
end;
procedure TUART1B_U4STA.clearUTXEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1024
  sw $a1,4($a0)
end;
procedure TUART1B_U4STA.setUTXEN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,10,1
  sw      $v1,($a0)
end;
function  TUART1B_U4STA.getUTXEN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,10,1
end;
procedure TUART1B_U4STA.setUTXBRK; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2048
  sw $a1,8($a0)
end;
procedure TUART1B_U4STA.clearUTXBRK; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2048
  sw $a1,4($a0)
end;
procedure TUART1B_U4STA.setUTXBRK(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,11,1
  sw      $v1,($a0)
end;
function  TUART1B_U4STA.getUTXBRK : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,11,1
end;
procedure TUART1B_U4STA.setURXEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4096
  sw $a1,8($a0)
end;
procedure TUART1B_U4STA.clearURXEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4096
  sw $a1,4($a0)
end;
procedure TUART1B_U4STA.setURXEN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,12,1
  sw      $v1,($a0)
end;
function  TUART1B_U4STA.getURXEN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,12,1
end;
procedure TUART1B_U4STA.setUTXINV; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,8($a0)
end;
procedure TUART1B_U4STA.clearUTXINV; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,4($a0)
end;
procedure TUART1B_U4STA.setUTXINV(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,13,1
  sw      $v1,($a0)
end;
function  TUART1B_U4STA.getUTXINV : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,13,1
end;
procedure TUART1B_U4STA.setUTXISEL(thebits : TBits_2); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,14,2
  sw      $v1,($a0)
end;
function  TUART1B_U4STA.getUTXISEL : TBits_2;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,14,2
end;
procedure TUART1B_U4STA.setADDR(thebits : TBits_8); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  sll     $a1,$a1,16
  lui    $v0,65280
  ori    $v0,$v0,65535
  and   $v1,$v1,$v0
  or    $a1,$a1,$v0
  sw    $a1,($a0)
end;
function  TUART1B_U4STA.getADDR : TBits_8;
asm
  lw      $v1,($a0)
  srl     $a1,$a1,16
  lui    $v0,255
  and    $a1,$a1,$v0
end;
procedure TUART1B_U4STA.setADM_EN; assembler; nostackframe; inline;
asm
  lui     $a1,256
  sw $a1,8($a0)
end;
procedure TUART1B_U4STA.clearADM_EN; assembler; nostackframe; inline;
asm
  lui     $a1,256
  sw $a1,4($a0)
end;
procedure TUART1B_U4STA.setADM_EN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,24,1
  sw      $v1,($a0)
end;
function  TUART1B_U4STA.getADM_EN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,24,1
end;
procedure TUART1B_U4STA.setURXISEL0; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,8($a0)
end;
procedure TUART1B_U4STA.clearURXISEL0; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,4($a0)
end;
procedure TUART1B_U4STA.setURXISEL0(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,6,1
  sw      $v1,($a0)
end;
function  TUART1B_U4STA.getURXISEL0 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,6,1
end;
procedure TUART1B_U4STA.setURXISEL1; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,8($a0)
end;
procedure TUART1B_U4STA.clearURXISEL1; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,4($a0)
end;
procedure TUART1B_U4STA.setURXISEL1(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,7,1
  sw      $v1,($a0)
end;
function  TUART1B_U4STA.getURXISEL1 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,7,1
end;
procedure TUART1B_U4STA.setUTXISEL0; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16384
  sw $a1,8($a0)
end;
procedure TUART1B_U4STA.clearUTXISEL0; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16384
  sw $a1,4($a0)
end;
procedure TUART1B_U4STA.setUTXISEL0(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,14,1
  sw      $v1,($a0)
end;
function  TUART1B_U4STA.getUTXISEL0 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,14,1
end;
procedure TUART1B_U4STA.setUTXISEL1; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,8($a0)
end;
procedure TUART1B_U4STA.clearUTXISEL1; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,4($a0)
end;
procedure TUART1B_U4STA.setUTXISEL1(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,15,1
  sw      $v1,($a0)
end;
function  TUART1B_U4STA.getUTXISEL1 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,15,1
end;
procedure TUART1B_U4STA.setUTXSEL(thebits : TBits_2); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,14,2
  sw      $v1,($a0)
end;
function  TUART1B_U4STA.getUTXSEL : TBits_2;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,14,2
end;
procedure TUART1B_U4STA.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TUART1B_U4STA.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TUART2A_U2AMODE.setSTSEL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,8($a0)
end;
procedure TUART2A_U2AMODE.clearSTSEL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,4($a0)
end;
procedure TUART2A_U2AMODE.setSTSEL(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,1
  sw      $v1,($a0)
end;
function  TUART2A_U2AMODE.getSTSEL : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,1
end;
procedure TUART2A_U2AMODE.setPDSEL(thebits : TBits_2); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,1,2
  sw      $v1,($a0)
end;
function  TUART2A_U2AMODE.getPDSEL : TBits_2;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,1,2
end;
procedure TUART2A_U2AMODE.setBRGH; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,8($a0)
end;
procedure TUART2A_U2AMODE.clearBRGH; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,4($a0)
end;
procedure TUART2A_U2AMODE.setBRGH(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,3,1
  sw      $v1,($a0)
end;
function  TUART2A_U2AMODE.getBRGH : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,3,1
end;
procedure TUART2A_U2AMODE.setRXINV; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,8($a0)
end;
procedure TUART2A_U2AMODE.clearRXINV; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,4($a0)
end;
procedure TUART2A_U2AMODE.setRXINV(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,4,1
  sw      $v1,($a0)
end;
function  TUART2A_U2AMODE.getRXINV : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,4,1
end;
procedure TUART2A_U2AMODE.setABAUD; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,8($a0)
end;
procedure TUART2A_U2AMODE.clearABAUD; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,4($a0)
end;
procedure TUART2A_U2AMODE.setABAUD(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,5,1
  sw      $v1,($a0)
end;
function  TUART2A_U2AMODE.getABAUD : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,5,1
end;
procedure TUART2A_U2AMODE.setLPBACK; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,8($a0)
end;
procedure TUART2A_U2AMODE.clearLPBACK; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,4($a0)
end;
procedure TUART2A_U2AMODE.setLPBACK(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,6,1
  sw      $v1,($a0)
end;
function  TUART2A_U2AMODE.getLPBACK : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,6,1
end;
procedure TUART2A_U2AMODE.setWAKE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,8($a0)
end;
procedure TUART2A_U2AMODE.clearWAKE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,4($a0)
end;
procedure TUART2A_U2AMODE.setWAKE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,7,1
  sw      $v1,($a0)
end;
function  TUART2A_U2AMODE.getWAKE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,7,1
end;
procedure TUART2A_U2AMODE.setUEN(thebits : TBits_2); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,8,2
  sw      $v1,($a0)
end;
function  TUART2A_U2AMODE.getUEN : TBits_2;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,8,2
end;
procedure TUART2A_U2AMODE.setRTSMD; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2048
  sw $a1,8($a0)
end;
procedure TUART2A_U2AMODE.clearRTSMD; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2048
  sw $a1,4($a0)
end;
procedure TUART2A_U2AMODE.setRTSMD(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,11,1
  sw      $v1,($a0)
end;
function  TUART2A_U2AMODE.getRTSMD : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,11,1
end;
procedure TUART2A_U2AMODE.setIREN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4096
  sw $a1,8($a0)
end;
procedure TUART2A_U2AMODE.clearIREN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4096
  sw $a1,4($a0)
end;
procedure TUART2A_U2AMODE.setIREN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,12,1
  sw      $v1,($a0)
end;
function  TUART2A_U2AMODE.getIREN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,12,1
end;
procedure TUART2A_U2AMODE.setSIDL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,8($a0)
end;
procedure TUART2A_U2AMODE.clearSIDL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,4($a0)
end;
procedure TUART2A_U2AMODE.setSIDL(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,13,1
  sw      $v1,($a0)
end;
function  TUART2A_U2AMODE.getSIDL : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,13,1
end;
procedure TUART2A_U2AMODE.setON; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,8($a0)
end;
procedure TUART2A_U2AMODE.clearON; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,4($a0)
end;
procedure TUART2A_U2AMODE.setON(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,15,1
  sw      $v1,($a0)
end;
function  TUART2A_U2AMODE.getON : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,15,1
end;
procedure TUART2A_U2AMODE.setPDSEL0; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,8($a0)
end;
procedure TUART2A_U2AMODE.clearPDSEL0; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,4($a0)
end;
procedure TUART2A_U2AMODE.setPDSEL0(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,1,1
  sw      $v1,($a0)
end;
function  TUART2A_U2AMODE.getPDSEL0 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,1,1
end;
procedure TUART2A_U2AMODE.setPDSEL1; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,8($a0)
end;
procedure TUART2A_U2AMODE.clearPDSEL1; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,4($a0)
end;
procedure TUART2A_U2AMODE.setPDSEL1(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,2,1
  sw      $v1,($a0)
end;
function  TUART2A_U2AMODE.getPDSEL1 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,2,1
end;
procedure TUART2A_U2AMODE.setUEN0; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,8($a0)
end;
procedure TUART2A_U2AMODE.clearUEN0; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,4($a0)
end;
procedure TUART2A_U2AMODE.setUEN0(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,8,1
  sw      $v1,($a0)
end;
function  TUART2A_U2AMODE.getUEN0 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,8,1
end;
procedure TUART2A_U2AMODE.setUEN1; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,512
  sw $a1,8($a0)
end;
procedure TUART2A_U2AMODE.clearUEN1; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,512
  sw $a1,4($a0)
end;
procedure TUART2A_U2AMODE.setUEN1(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,9,1
  sw      $v1,($a0)
end;
function  TUART2A_U2AMODE.getUEN1 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,9,1
end;
procedure TUART2A_U2AMODE.setUSIDL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,8($a0)
end;
procedure TUART2A_U2AMODE.clearUSIDL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,4($a0)
end;
procedure TUART2A_U2AMODE.setUSIDL(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,13,1
  sw      $v1,($a0)
end;
function  TUART2A_U2AMODE.getUSIDL : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,13,1
end;
procedure TUART2A_U2AMODE.setUARTEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,8($a0)
end;
procedure TUART2A_U2AMODE.clearUARTEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,4($a0)
end;
procedure TUART2A_U2AMODE.setUARTEN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,15,1
  sw      $v1,($a0)
end;
function  TUART2A_U2AMODE.getUARTEN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,15,1
end;
procedure TUART2A_U2AMODE.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TUART2A_U2AMODE.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TUART2A_U3MODE.setSTSEL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,8($a0)
end;
procedure TUART2A_U3MODE.clearSTSEL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,4($a0)
end;
procedure TUART2A_U3MODE.setSTSEL(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,1
  sw      $v1,($a0)
end;
function  TUART2A_U3MODE.getSTSEL : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,1
end;
procedure TUART2A_U3MODE.setPDSEL(thebits : TBits_2); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,1,2
  sw      $v1,($a0)
end;
function  TUART2A_U3MODE.getPDSEL : TBits_2;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,1,2
end;
procedure TUART2A_U3MODE.setBRGH; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,8($a0)
end;
procedure TUART2A_U3MODE.clearBRGH; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,4($a0)
end;
procedure TUART2A_U3MODE.setBRGH(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,3,1
  sw      $v1,($a0)
end;
function  TUART2A_U3MODE.getBRGH : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,3,1
end;
procedure TUART2A_U3MODE.setRXINV; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,8($a0)
end;
procedure TUART2A_U3MODE.clearRXINV; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,4($a0)
end;
procedure TUART2A_U3MODE.setRXINV(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,4,1
  sw      $v1,($a0)
end;
function  TUART2A_U3MODE.getRXINV : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,4,1
end;
procedure TUART2A_U3MODE.setABAUD; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,8($a0)
end;
procedure TUART2A_U3MODE.clearABAUD; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,4($a0)
end;
procedure TUART2A_U3MODE.setABAUD(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,5,1
  sw      $v1,($a0)
end;
function  TUART2A_U3MODE.getABAUD : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,5,1
end;
procedure TUART2A_U3MODE.setLPBACK; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,8($a0)
end;
procedure TUART2A_U3MODE.clearLPBACK; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,4($a0)
end;
procedure TUART2A_U3MODE.setLPBACK(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,6,1
  sw      $v1,($a0)
end;
function  TUART2A_U3MODE.getLPBACK : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,6,1
end;
procedure TUART2A_U3MODE.setWAKE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,8($a0)
end;
procedure TUART2A_U3MODE.clearWAKE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,4($a0)
end;
procedure TUART2A_U3MODE.setWAKE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,7,1
  sw      $v1,($a0)
end;
function  TUART2A_U3MODE.getWAKE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,7,1
end;
procedure TUART2A_U3MODE.setUEN(thebits : TBits_2); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,8,2
  sw      $v1,($a0)
end;
function  TUART2A_U3MODE.getUEN : TBits_2;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,8,2
end;
procedure TUART2A_U3MODE.setRTSMD; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2048
  sw $a1,8($a0)
end;
procedure TUART2A_U3MODE.clearRTSMD; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2048
  sw $a1,4($a0)
end;
procedure TUART2A_U3MODE.setRTSMD(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,11,1
  sw      $v1,($a0)
end;
function  TUART2A_U3MODE.getRTSMD : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,11,1
end;
procedure TUART2A_U3MODE.setIREN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4096
  sw $a1,8($a0)
end;
procedure TUART2A_U3MODE.clearIREN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4096
  sw $a1,4($a0)
end;
procedure TUART2A_U3MODE.setIREN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,12,1
  sw      $v1,($a0)
end;
function  TUART2A_U3MODE.getIREN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,12,1
end;
procedure TUART2A_U3MODE.setSIDL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,8($a0)
end;
procedure TUART2A_U3MODE.clearSIDL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,4($a0)
end;
procedure TUART2A_U3MODE.setSIDL(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,13,1
  sw      $v1,($a0)
end;
function  TUART2A_U3MODE.getSIDL : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,13,1
end;
procedure TUART2A_U3MODE.setON; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,8($a0)
end;
procedure TUART2A_U3MODE.clearON; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,4($a0)
end;
procedure TUART2A_U3MODE.setON(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,15,1
  sw      $v1,($a0)
end;
function  TUART2A_U3MODE.getON : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,15,1
end;
procedure TUART2A_U3MODE.setPDSEL0; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,8($a0)
end;
procedure TUART2A_U3MODE.clearPDSEL0; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,4($a0)
end;
procedure TUART2A_U3MODE.setPDSEL0(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,1,1
  sw      $v1,($a0)
end;
function  TUART2A_U3MODE.getPDSEL0 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,1,1
end;
procedure TUART2A_U3MODE.setPDSEL1; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,8($a0)
end;
procedure TUART2A_U3MODE.clearPDSEL1; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,4($a0)
end;
procedure TUART2A_U3MODE.setPDSEL1(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,2,1
  sw      $v1,($a0)
end;
function  TUART2A_U3MODE.getPDSEL1 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,2,1
end;
procedure TUART2A_U3MODE.setUEN0; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,8($a0)
end;
procedure TUART2A_U3MODE.clearUEN0; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,4($a0)
end;
procedure TUART2A_U3MODE.setUEN0(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,8,1
  sw      $v1,($a0)
end;
function  TUART2A_U3MODE.getUEN0 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,8,1
end;
procedure TUART2A_U3MODE.setUEN1; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,512
  sw $a1,8($a0)
end;
procedure TUART2A_U3MODE.clearUEN1; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,512
  sw $a1,4($a0)
end;
procedure TUART2A_U3MODE.setUEN1(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,9,1
  sw      $v1,($a0)
end;
function  TUART2A_U3MODE.getUEN1 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,9,1
end;
procedure TUART2A_U3MODE.setUSIDL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,8($a0)
end;
procedure TUART2A_U3MODE.clearUSIDL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,4($a0)
end;
procedure TUART2A_U3MODE.setUSIDL(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,13,1
  sw      $v1,($a0)
end;
function  TUART2A_U3MODE.getUSIDL : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,13,1
end;
procedure TUART2A_U3MODE.setUARTEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,8($a0)
end;
procedure TUART2A_U3MODE.clearUARTEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,4($a0)
end;
procedure TUART2A_U3MODE.setUARTEN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,15,1
  sw      $v1,($a0)
end;
function  TUART2A_U3MODE.getUARTEN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,15,1
end;
procedure TUART2A_U3MODE.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TUART2A_U3MODE.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TUART2A_U2ASTA.setURXDA; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,8($a0)
end;
procedure TUART2A_U2ASTA.clearURXDA; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,4($a0)
end;
procedure TUART2A_U2ASTA.setURXDA(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,1
  sw      $v1,($a0)
end;
function  TUART2A_U2ASTA.getURXDA : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,1
end;
procedure TUART2A_U2ASTA.setOERR; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,8($a0)
end;
procedure TUART2A_U2ASTA.clearOERR; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,4($a0)
end;
procedure TUART2A_U2ASTA.setOERR(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,1,1
  sw      $v1,($a0)
end;
function  TUART2A_U2ASTA.getOERR : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,1,1
end;
procedure TUART2A_U2ASTA.setFERR; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,8($a0)
end;
procedure TUART2A_U2ASTA.clearFERR; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,4($a0)
end;
procedure TUART2A_U2ASTA.setFERR(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,2,1
  sw      $v1,($a0)
end;
function  TUART2A_U2ASTA.getFERR : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,2,1
end;
procedure TUART2A_U2ASTA.setPERR; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,8($a0)
end;
procedure TUART2A_U2ASTA.clearPERR; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,4($a0)
end;
procedure TUART2A_U2ASTA.setPERR(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,3,1
  sw      $v1,($a0)
end;
function  TUART2A_U2ASTA.getPERR : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,3,1
end;
procedure TUART2A_U2ASTA.setRIDLE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,8($a0)
end;
procedure TUART2A_U2ASTA.clearRIDLE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,4($a0)
end;
procedure TUART2A_U2ASTA.setRIDLE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,4,1
  sw      $v1,($a0)
end;
function  TUART2A_U2ASTA.getRIDLE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,4,1
end;
procedure TUART2A_U2ASTA.setADDEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,8($a0)
end;
procedure TUART2A_U2ASTA.clearADDEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,4($a0)
end;
procedure TUART2A_U2ASTA.setADDEN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,5,1
  sw      $v1,($a0)
end;
function  TUART2A_U2ASTA.getADDEN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,5,1
end;
procedure TUART2A_U2ASTA.setURXISEL(thebits : TBits_2); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,6,2
  sw      $v1,($a0)
end;
function  TUART2A_U2ASTA.getURXISEL : TBits_2;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,6,2
end;
procedure TUART2A_U2ASTA.setTRMT; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,8($a0)
end;
procedure TUART2A_U2ASTA.clearTRMT; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,4($a0)
end;
procedure TUART2A_U2ASTA.setTRMT(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,8,1
  sw      $v1,($a0)
end;
function  TUART2A_U2ASTA.getTRMT : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,8,1
end;
procedure TUART2A_U2ASTA.setUTXBF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,512
  sw $a1,8($a0)
end;
procedure TUART2A_U2ASTA.clearUTXBF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,512
  sw $a1,4($a0)
end;
procedure TUART2A_U2ASTA.setUTXBF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,9,1
  sw      $v1,($a0)
end;
function  TUART2A_U2ASTA.getUTXBF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,9,1
end;
procedure TUART2A_U2ASTA.setUTXEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1024
  sw $a1,8($a0)
end;
procedure TUART2A_U2ASTA.clearUTXEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1024
  sw $a1,4($a0)
end;
procedure TUART2A_U2ASTA.setUTXEN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,10,1
  sw      $v1,($a0)
end;
function  TUART2A_U2ASTA.getUTXEN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,10,1
end;
procedure TUART2A_U2ASTA.setUTXBRK; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2048
  sw $a1,8($a0)
end;
procedure TUART2A_U2ASTA.clearUTXBRK; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2048
  sw $a1,4($a0)
end;
procedure TUART2A_U2ASTA.setUTXBRK(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,11,1
  sw      $v1,($a0)
end;
function  TUART2A_U2ASTA.getUTXBRK : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,11,1
end;
procedure TUART2A_U2ASTA.setURXEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4096
  sw $a1,8($a0)
end;
procedure TUART2A_U2ASTA.clearURXEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4096
  sw $a1,4($a0)
end;
procedure TUART2A_U2ASTA.setURXEN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,12,1
  sw      $v1,($a0)
end;
function  TUART2A_U2ASTA.getURXEN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,12,1
end;
procedure TUART2A_U2ASTA.setUTXINV; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,8($a0)
end;
procedure TUART2A_U2ASTA.clearUTXINV; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,4($a0)
end;
procedure TUART2A_U2ASTA.setUTXINV(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,13,1
  sw      $v1,($a0)
end;
function  TUART2A_U2ASTA.getUTXINV : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,13,1
end;
procedure TUART2A_U2ASTA.setUTXISEL(thebits : TBits_2); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,14,2
  sw      $v1,($a0)
end;
function  TUART2A_U2ASTA.getUTXISEL : TBits_2;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,14,2
end;
procedure TUART2A_U2ASTA.setADDR(thebits : TBits_8); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  sll     $a1,$a1,16
  lui    $v0,65280
  ori    $v0,$v0,65535
  and   $v1,$v1,$v0
  or    $a1,$a1,$v0
  sw    $a1,($a0)
end;
function  TUART2A_U2ASTA.getADDR : TBits_8;
asm
  lw      $v1,($a0)
  srl     $a1,$a1,16
  lui    $v0,255
  and    $a1,$a1,$v0
end;
procedure TUART2A_U2ASTA.setADM_EN; assembler; nostackframe; inline;
asm
  lui     $a1,256
  sw $a1,8($a0)
end;
procedure TUART2A_U2ASTA.clearADM_EN; assembler; nostackframe; inline;
asm
  lui     $a1,256
  sw $a1,4($a0)
end;
procedure TUART2A_U2ASTA.setADM_EN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,24,1
  sw      $v1,($a0)
end;
function  TUART2A_U2ASTA.getADM_EN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,24,1
end;
procedure TUART2A_U2ASTA.setURXISEL0; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,8($a0)
end;
procedure TUART2A_U2ASTA.clearURXISEL0; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,4($a0)
end;
procedure TUART2A_U2ASTA.setURXISEL0(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,6,1
  sw      $v1,($a0)
end;
function  TUART2A_U2ASTA.getURXISEL0 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,6,1
end;
procedure TUART2A_U2ASTA.setURXISEL1; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,8($a0)
end;
procedure TUART2A_U2ASTA.clearURXISEL1; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,4($a0)
end;
procedure TUART2A_U2ASTA.setURXISEL1(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,7,1
  sw      $v1,($a0)
end;
function  TUART2A_U2ASTA.getURXISEL1 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,7,1
end;
procedure TUART2A_U2ASTA.setUTXISEL0; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16384
  sw $a1,8($a0)
end;
procedure TUART2A_U2ASTA.clearUTXISEL0; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16384
  sw $a1,4($a0)
end;
procedure TUART2A_U2ASTA.setUTXISEL0(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,14,1
  sw      $v1,($a0)
end;
function  TUART2A_U2ASTA.getUTXISEL0 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,14,1
end;
procedure TUART2A_U2ASTA.setUTXISEL1; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,8($a0)
end;
procedure TUART2A_U2ASTA.clearUTXISEL1; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,4($a0)
end;
procedure TUART2A_U2ASTA.setUTXISEL1(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,15,1
  sw      $v1,($a0)
end;
function  TUART2A_U2ASTA.getUTXISEL1 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,15,1
end;
procedure TUART2A_U2ASTA.setUTXSEL(thebits : TBits_2); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,14,2
  sw      $v1,($a0)
end;
function  TUART2A_U2ASTA.getUTXSEL : TBits_2;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,14,2
end;
procedure TUART2A_U2ASTA.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TUART2A_U2ASTA.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TUART2A_U3STA.setURXDA; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,8($a0)
end;
procedure TUART2A_U3STA.clearURXDA; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,4($a0)
end;
procedure TUART2A_U3STA.setURXDA(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,1
  sw      $v1,($a0)
end;
function  TUART2A_U3STA.getURXDA : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,1
end;
procedure TUART2A_U3STA.setOERR; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,8($a0)
end;
procedure TUART2A_U3STA.clearOERR; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,4($a0)
end;
procedure TUART2A_U3STA.setOERR(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,1,1
  sw      $v1,($a0)
end;
function  TUART2A_U3STA.getOERR : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,1,1
end;
procedure TUART2A_U3STA.setFERR; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,8($a0)
end;
procedure TUART2A_U3STA.clearFERR; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,4($a0)
end;
procedure TUART2A_U3STA.setFERR(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,2,1
  sw      $v1,($a0)
end;
function  TUART2A_U3STA.getFERR : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,2,1
end;
procedure TUART2A_U3STA.setPERR; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,8($a0)
end;
procedure TUART2A_U3STA.clearPERR; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,4($a0)
end;
procedure TUART2A_U3STA.setPERR(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,3,1
  sw      $v1,($a0)
end;
function  TUART2A_U3STA.getPERR : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,3,1
end;
procedure TUART2A_U3STA.setRIDLE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,8($a0)
end;
procedure TUART2A_U3STA.clearRIDLE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,4($a0)
end;
procedure TUART2A_U3STA.setRIDLE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,4,1
  sw      $v1,($a0)
end;
function  TUART2A_U3STA.getRIDLE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,4,1
end;
procedure TUART2A_U3STA.setADDEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,8($a0)
end;
procedure TUART2A_U3STA.clearADDEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,4($a0)
end;
procedure TUART2A_U3STA.setADDEN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,5,1
  sw      $v1,($a0)
end;
function  TUART2A_U3STA.getADDEN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,5,1
end;
procedure TUART2A_U3STA.setURXISEL(thebits : TBits_2); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,6,2
  sw      $v1,($a0)
end;
function  TUART2A_U3STA.getURXISEL : TBits_2;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,6,2
end;
procedure TUART2A_U3STA.setTRMT; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,8($a0)
end;
procedure TUART2A_U3STA.clearTRMT; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,4($a0)
end;
procedure TUART2A_U3STA.setTRMT(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,8,1
  sw      $v1,($a0)
end;
function  TUART2A_U3STA.getTRMT : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,8,1
end;
procedure TUART2A_U3STA.setUTXBF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,512
  sw $a1,8($a0)
end;
procedure TUART2A_U3STA.clearUTXBF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,512
  sw $a1,4($a0)
end;
procedure TUART2A_U3STA.setUTXBF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,9,1
  sw      $v1,($a0)
end;
function  TUART2A_U3STA.getUTXBF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,9,1
end;
procedure TUART2A_U3STA.setUTXEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1024
  sw $a1,8($a0)
end;
procedure TUART2A_U3STA.clearUTXEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1024
  sw $a1,4($a0)
end;
procedure TUART2A_U3STA.setUTXEN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,10,1
  sw      $v1,($a0)
end;
function  TUART2A_U3STA.getUTXEN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,10,1
end;
procedure TUART2A_U3STA.setUTXBRK; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2048
  sw $a1,8($a0)
end;
procedure TUART2A_U3STA.clearUTXBRK; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2048
  sw $a1,4($a0)
end;
procedure TUART2A_U3STA.setUTXBRK(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,11,1
  sw      $v1,($a0)
end;
function  TUART2A_U3STA.getUTXBRK : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,11,1
end;
procedure TUART2A_U3STA.setURXEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4096
  sw $a1,8($a0)
end;
procedure TUART2A_U3STA.clearURXEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4096
  sw $a1,4($a0)
end;
procedure TUART2A_U3STA.setURXEN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,12,1
  sw      $v1,($a0)
end;
function  TUART2A_U3STA.getURXEN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,12,1
end;
procedure TUART2A_U3STA.setUTXINV; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,8($a0)
end;
procedure TUART2A_U3STA.clearUTXINV; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,4($a0)
end;
procedure TUART2A_U3STA.setUTXINV(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,13,1
  sw      $v1,($a0)
end;
function  TUART2A_U3STA.getUTXINV : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,13,1
end;
procedure TUART2A_U3STA.setUTXISEL(thebits : TBits_2); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,14,2
  sw      $v1,($a0)
end;
function  TUART2A_U3STA.getUTXISEL : TBits_2;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,14,2
end;
procedure TUART2A_U3STA.setADDR(thebits : TBits_8); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  sll     $a1,$a1,16
  lui    $v0,65280
  ori    $v0,$v0,65535
  and   $v1,$v1,$v0
  or    $a1,$a1,$v0
  sw    $a1,($a0)
end;
function  TUART2A_U3STA.getADDR : TBits_8;
asm
  lw      $v1,($a0)
  srl     $a1,$a1,16
  lui    $v0,255
  and    $a1,$a1,$v0
end;
procedure TUART2A_U3STA.setADM_EN; assembler; nostackframe; inline;
asm
  lui     $a1,256
  sw $a1,8($a0)
end;
procedure TUART2A_U3STA.clearADM_EN; assembler; nostackframe; inline;
asm
  lui     $a1,256
  sw $a1,4($a0)
end;
procedure TUART2A_U3STA.setADM_EN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,24,1
  sw      $v1,($a0)
end;
function  TUART2A_U3STA.getADM_EN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,24,1
end;
procedure TUART2A_U3STA.setURXISEL0; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,8($a0)
end;
procedure TUART2A_U3STA.clearURXISEL0; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,4($a0)
end;
procedure TUART2A_U3STA.setURXISEL0(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,6,1
  sw      $v1,($a0)
end;
function  TUART2A_U3STA.getURXISEL0 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,6,1
end;
procedure TUART2A_U3STA.setURXISEL1; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,8($a0)
end;
procedure TUART2A_U3STA.clearURXISEL1; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,4($a0)
end;
procedure TUART2A_U3STA.setURXISEL1(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,7,1
  sw      $v1,($a0)
end;
function  TUART2A_U3STA.getURXISEL1 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,7,1
end;
procedure TUART2A_U3STA.setUTXISEL0; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16384
  sw $a1,8($a0)
end;
procedure TUART2A_U3STA.clearUTXISEL0; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16384
  sw $a1,4($a0)
end;
procedure TUART2A_U3STA.setUTXISEL0(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,14,1
  sw      $v1,($a0)
end;
function  TUART2A_U3STA.getUTXISEL0 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,14,1
end;
procedure TUART2A_U3STA.setUTXISEL1; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,8($a0)
end;
procedure TUART2A_U3STA.clearUTXISEL1; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,4($a0)
end;
procedure TUART2A_U3STA.setUTXISEL1(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,15,1
  sw      $v1,($a0)
end;
function  TUART2A_U3STA.getUTXISEL1 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,15,1
end;
procedure TUART2A_U3STA.setUTXSEL(thebits : TBits_2); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,14,2
  sw      $v1,($a0)
end;
function  TUART2A_U3STA.getUTXSEL : TBits_2;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,14,2
end;
procedure TUART2A_U3STA.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TUART2A_U3STA.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TUART2B_U2BMODE.setSTSEL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,8($a0)
end;
procedure TUART2B_U2BMODE.clearSTSEL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,4($a0)
end;
procedure TUART2B_U2BMODE.setSTSEL(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,1
  sw      $v1,($a0)
end;
function  TUART2B_U2BMODE.getSTSEL : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,1
end;
procedure TUART2B_U2BMODE.setPDSEL(thebits : TBits_2); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,1,2
  sw      $v1,($a0)
end;
function  TUART2B_U2BMODE.getPDSEL : TBits_2;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,1,2
end;
procedure TUART2B_U2BMODE.setBRGH; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,8($a0)
end;
procedure TUART2B_U2BMODE.clearBRGH; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,4($a0)
end;
procedure TUART2B_U2BMODE.setBRGH(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,3,1
  sw      $v1,($a0)
end;
function  TUART2B_U2BMODE.getBRGH : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,3,1
end;
procedure TUART2B_U2BMODE.setRXINV; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,8($a0)
end;
procedure TUART2B_U2BMODE.clearRXINV; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,4($a0)
end;
procedure TUART2B_U2BMODE.setRXINV(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,4,1
  sw      $v1,($a0)
end;
function  TUART2B_U2BMODE.getRXINV : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,4,1
end;
procedure TUART2B_U2BMODE.setABAUD; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,8($a0)
end;
procedure TUART2B_U2BMODE.clearABAUD; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,4($a0)
end;
procedure TUART2B_U2BMODE.setABAUD(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,5,1
  sw      $v1,($a0)
end;
function  TUART2B_U2BMODE.getABAUD : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,5,1
end;
procedure TUART2B_U2BMODE.setLPBACK; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,8($a0)
end;
procedure TUART2B_U2BMODE.clearLPBACK; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,4($a0)
end;
procedure TUART2B_U2BMODE.setLPBACK(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,6,1
  sw      $v1,($a0)
end;
function  TUART2B_U2BMODE.getLPBACK : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,6,1
end;
procedure TUART2B_U2BMODE.setWAKE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,8($a0)
end;
procedure TUART2B_U2BMODE.clearWAKE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,4($a0)
end;
procedure TUART2B_U2BMODE.setWAKE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,7,1
  sw      $v1,($a0)
end;
function  TUART2B_U2BMODE.getWAKE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,7,1
end;
procedure TUART2B_U2BMODE.setIREN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4096
  sw $a1,8($a0)
end;
procedure TUART2B_U2BMODE.clearIREN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4096
  sw $a1,4($a0)
end;
procedure TUART2B_U2BMODE.setIREN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,12,1
  sw      $v1,($a0)
end;
function  TUART2B_U2BMODE.getIREN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,12,1
end;
procedure TUART2B_U2BMODE.setSIDL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,8($a0)
end;
procedure TUART2B_U2BMODE.clearSIDL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,4($a0)
end;
procedure TUART2B_U2BMODE.setSIDL(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,13,1
  sw      $v1,($a0)
end;
function  TUART2B_U2BMODE.getSIDL : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,13,1
end;
procedure TUART2B_U2BMODE.setON; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,8($a0)
end;
procedure TUART2B_U2BMODE.clearON; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,4($a0)
end;
procedure TUART2B_U2BMODE.setON(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,15,1
  sw      $v1,($a0)
end;
function  TUART2B_U2BMODE.getON : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,15,1
end;
procedure TUART2B_U2BMODE.setPDSEL0; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,8($a0)
end;
procedure TUART2B_U2BMODE.clearPDSEL0; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,4($a0)
end;
procedure TUART2B_U2BMODE.setPDSEL0(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,1,1
  sw      $v1,($a0)
end;
function  TUART2B_U2BMODE.getPDSEL0 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,1,1
end;
procedure TUART2B_U2BMODE.setPDSEL1; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,8($a0)
end;
procedure TUART2B_U2BMODE.clearPDSEL1; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,4($a0)
end;
procedure TUART2B_U2BMODE.setPDSEL1(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,2,1
  sw      $v1,($a0)
end;
function  TUART2B_U2BMODE.getPDSEL1 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,2,1
end;
procedure TUART2B_U2BMODE.setUSIDL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,8($a0)
end;
procedure TUART2B_U2BMODE.clearUSIDL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,4($a0)
end;
procedure TUART2B_U2BMODE.setUSIDL(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,13,1
  sw      $v1,($a0)
end;
function  TUART2B_U2BMODE.getUSIDL : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,13,1
end;
procedure TUART2B_U2BMODE.setUARTEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,8($a0)
end;
procedure TUART2B_U2BMODE.clearUARTEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,4($a0)
end;
procedure TUART2B_U2BMODE.setUARTEN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,15,1
  sw      $v1,($a0)
end;
function  TUART2B_U2BMODE.getUARTEN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,15,1
end;
procedure TUART2B_U2BMODE.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TUART2B_U2BMODE.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TUART2B_U6MODE.setSTSEL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,8($a0)
end;
procedure TUART2B_U6MODE.clearSTSEL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,4($a0)
end;
procedure TUART2B_U6MODE.setSTSEL(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,1
  sw      $v1,($a0)
end;
function  TUART2B_U6MODE.getSTSEL : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,1
end;
procedure TUART2B_U6MODE.setPDSEL(thebits : TBits_2); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,1,2
  sw      $v1,($a0)
end;
function  TUART2B_U6MODE.getPDSEL : TBits_2;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,1,2
end;
procedure TUART2B_U6MODE.setBRGH; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,8($a0)
end;
procedure TUART2B_U6MODE.clearBRGH; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,4($a0)
end;
procedure TUART2B_U6MODE.setBRGH(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,3,1
  sw      $v1,($a0)
end;
function  TUART2B_U6MODE.getBRGH : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,3,1
end;
procedure TUART2B_U6MODE.setRXINV; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,8($a0)
end;
procedure TUART2B_U6MODE.clearRXINV; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,4($a0)
end;
procedure TUART2B_U6MODE.setRXINV(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,4,1
  sw      $v1,($a0)
end;
function  TUART2B_U6MODE.getRXINV : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,4,1
end;
procedure TUART2B_U6MODE.setABAUD; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,8($a0)
end;
procedure TUART2B_U6MODE.clearABAUD; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,4($a0)
end;
procedure TUART2B_U6MODE.setABAUD(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,5,1
  sw      $v1,($a0)
end;
function  TUART2B_U6MODE.getABAUD : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,5,1
end;
procedure TUART2B_U6MODE.setLPBACK; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,8($a0)
end;
procedure TUART2B_U6MODE.clearLPBACK; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,4($a0)
end;
procedure TUART2B_U6MODE.setLPBACK(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,6,1
  sw      $v1,($a0)
end;
function  TUART2B_U6MODE.getLPBACK : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,6,1
end;
procedure TUART2B_U6MODE.setWAKE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,8($a0)
end;
procedure TUART2B_U6MODE.clearWAKE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,4($a0)
end;
procedure TUART2B_U6MODE.setWAKE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,7,1
  sw      $v1,($a0)
end;
function  TUART2B_U6MODE.getWAKE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,7,1
end;
procedure TUART2B_U6MODE.setIREN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4096
  sw $a1,8($a0)
end;
procedure TUART2B_U6MODE.clearIREN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4096
  sw $a1,4($a0)
end;
procedure TUART2B_U6MODE.setIREN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,12,1
  sw      $v1,($a0)
end;
function  TUART2B_U6MODE.getIREN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,12,1
end;
procedure TUART2B_U6MODE.setSIDL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,8($a0)
end;
procedure TUART2B_U6MODE.clearSIDL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,4($a0)
end;
procedure TUART2B_U6MODE.setSIDL(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,13,1
  sw      $v1,($a0)
end;
function  TUART2B_U6MODE.getSIDL : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,13,1
end;
procedure TUART2B_U6MODE.setON; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,8($a0)
end;
procedure TUART2B_U6MODE.clearON; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,4($a0)
end;
procedure TUART2B_U6MODE.setON(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,15,1
  sw      $v1,($a0)
end;
function  TUART2B_U6MODE.getON : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,15,1
end;
procedure TUART2B_U6MODE.setPDSEL0; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,8($a0)
end;
procedure TUART2B_U6MODE.clearPDSEL0; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,4($a0)
end;
procedure TUART2B_U6MODE.setPDSEL0(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,1,1
  sw      $v1,($a0)
end;
function  TUART2B_U6MODE.getPDSEL0 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,1,1
end;
procedure TUART2B_U6MODE.setPDSEL1; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,8($a0)
end;
procedure TUART2B_U6MODE.clearPDSEL1; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,4($a0)
end;
procedure TUART2B_U6MODE.setPDSEL1(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,2,1
  sw      $v1,($a0)
end;
function  TUART2B_U6MODE.getPDSEL1 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,2,1
end;
procedure TUART2B_U6MODE.setUSIDL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,8($a0)
end;
procedure TUART2B_U6MODE.clearUSIDL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,4($a0)
end;
procedure TUART2B_U6MODE.setUSIDL(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,13,1
  sw      $v1,($a0)
end;
function  TUART2B_U6MODE.getUSIDL : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,13,1
end;
procedure TUART2B_U6MODE.setUARTEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,8($a0)
end;
procedure TUART2B_U6MODE.clearUARTEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,4($a0)
end;
procedure TUART2B_U6MODE.setUARTEN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,15,1
  sw      $v1,($a0)
end;
function  TUART2B_U6MODE.getUARTEN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,15,1
end;
procedure TUART2B_U6MODE.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TUART2B_U6MODE.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TUART2B_U2BSTA.setURXDA; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,8($a0)
end;
procedure TUART2B_U2BSTA.clearURXDA; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,4($a0)
end;
procedure TUART2B_U2BSTA.setURXDA(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,1
  sw      $v1,($a0)
end;
function  TUART2B_U2BSTA.getURXDA : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,1
end;
procedure TUART2B_U2BSTA.setOERR; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,8($a0)
end;
procedure TUART2B_U2BSTA.clearOERR; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,4($a0)
end;
procedure TUART2B_U2BSTA.setOERR(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,1,1
  sw      $v1,($a0)
end;
function  TUART2B_U2BSTA.getOERR : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,1,1
end;
procedure TUART2B_U2BSTA.setFERR; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,8($a0)
end;
procedure TUART2B_U2BSTA.clearFERR; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,4($a0)
end;
procedure TUART2B_U2BSTA.setFERR(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,2,1
  sw      $v1,($a0)
end;
function  TUART2B_U2BSTA.getFERR : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,2,1
end;
procedure TUART2B_U2BSTA.setPERR; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,8($a0)
end;
procedure TUART2B_U2BSTA.clearPERR; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,4($a0)
end;
procedure TUART2B_U2BSTA.setPERR(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,3,1
  sw      $v1,($a0)
end;
function  TUART2B_U2BSTA.getPERR : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,3,1
end;
procedure TUART2B_U2BSTA.setRIDLE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,8($a0)
end;
procedure TUART2B_U2BSTA.clearRIDLE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,4($a0)
end;
procedure TUART2B_U2BSTA.setRIDLE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,4,1
  sw      $v1,($a0)
end;
function  TUART2B_U2BSTA.getRIDLE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,4,1
end;
procedure TUART2B_U2BSTA.setADDEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,8($a0)
end;
procedure TUART2B_U2BSTA.clearADDEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,4($a0)
end;
procedure TUART2B_U2BSTA.setADDEN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,5,1
  sw      $v1,($a0)
end;
function  TUART2B_U2BSTA.getADDEN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,5,1
end;
procedure TUART2B_U2BSTA.setURXISEL(thebits : TBits_2); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,6,2
  sw      $v1,($a0)
end;
function  TUART2B_U2BSTA.getURXISEL : TBits_2;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,6,2
end;
procedure TUART2B_U2BSTA.setTRMT; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,8($a0)
end;
procedure TUART2B_U2BSTA.clearTRMT; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,4($a0)
end;
procedure TUART2B_U2BSTA.setTRMT(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,8,1
  sw      $v1,($a0)
end;
function  TUART2B_U2BSTA.getTRMT : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,8,1
end;
procedure TUART2B_U2BSTA.setUTXBF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,512
  sw $a1,8($a0)
end;
procedure TUART2B_U2BSTA.clearUTXBF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,512
  sw $a1,4($a0)
end;
procedure TUART2B_U2BSTA.setUTXBF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,9,1
  sw      $v1,($a0)
end;
function  TUART2B_U2BSTA.getUTXBF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,9,1
end;
procedure TUART2B_U2BSTA.setUTXEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1024
  sw $a1,8($a0)
end;
procedure TUART2B_U2BSTA.clearUTXEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1024
  sw $a1,4($a0)
end;
procedure TUART2B_U2BSTA.setUTXEN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,10,1
  sw      $v1,($a0)
end;
function  TUART2B_U2BSTA.getUTXEN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,10,1
end;
procedure TUART2B_U2BSTA.setUTXBRK; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2048
  sw $a1,8($a0)
end;
procedure TUART2B_U2BSTA.clearUTXBRK; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2048
  sw $a1,4($a0)
end;
procedure TUART2B_U2BSTA.setUTXBRK(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,11,1
  sw      $v1,($a0)
end;
function  TUART2B_U2BSTA.getUTXBRK : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,11,1
end;
procedure TUART2B_U2BSTA.setURXEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4096
  sw $a1,8($a0)
end;
procedure TUART2B_U2BSTA.clearURXEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4096
  sw $a1,4($a0)
end;
procedure TUART2B_U2BSTA.setURXEN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,12,1
  sw      $v1,($a0)
end;
function  TUART2B_U2BSTA.getURXEN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,12,1
end;
procedure TUART2B_U2BSTA.setUTXINV; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,8($a0)
end;
procedure TUART2B_U2BSTA.clearUTXINV; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,4($a0)
end;
procedure TUART2B_U2BSTA.setUTXINV(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,13,1
  sw      $v1,($a0)
end;
function  TUART2B_U2BSTA.getUTXINV : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,13,1
end;
procedure TUART2B_U2BSTA.setUTXISEL(thebits : TBits_2); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,14,2
  sw      $v1,($a0)
end;
function  TUART2B_U2BSTA.getUTXISEL : TBits_2;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,14,2
end;
procedure TUART2B_U2BSTA.setADDR(thebits : TBits_8); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  sll     $a1,$a1,16
  lui    $v0,65280
  ori    $v0,$v0,65535
  and   $v1,$v1,$v0
  or    $a1,$a1,$v0
  sw    $a1,($a0)
end;
function  TUART2B_U2BSTA.getADDR : TBits_8;
asm
  lw      $v1,($a0)
  srl     $a1,$a1,16
  lui    $v0,255
  and    $a1,$a1,$v0
end;
procedure TUART2B_U2BSTA.setADM_EN; assembler; nostackframe; inline;
asm
  lui     $a1,256
  sw $a1,8($a0)
end;
procedure TUART2B_U2BSTA.clearADM_EN; assembler; nostackframe; inline;
asm
  lui     $a1,256
  sw $a1,4($a0)
end;
procedure TUART2B_U2BSTA.setADM_EN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,24,1
  sw      $v1,($a0)
end;
function  TUART2B_U2BSTA.getADM_EN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,24,1
end;
procedure TUART2B_U2BSTA.setURXISEL0; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,8($a0)
end;
procedure TUART2B_U2BSTA.clearURXISEL0; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,4($a0)
end;
procedure TUART2B_U2BSTA.setURXISEL0(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,6,1
  sw      $v1,($a0)
end;
function  TUART2B_U2BSTA.getURXISEL0 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,6,1
end;
procedure TUART2B_U2BSTA.setURXISEL1; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,8($a0)
end;
procedure TUART2B_U2BSTA.clearURXISEL1; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,4($a0)
end;
procedure TUART2B_U2BSTA.setURXISEL1(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,7,1
  sw      $v1,($a0)
end;
function  TUART2B_U2BSTA.getURXISEL1 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,7,1
end;
procedure TUART2B_U2BSTA.setUTXISEL0; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16384
  sw $a1,8($a0)
end;
procedure TUART2B_U2BSTA.clearUTXISEL0; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16384
  sw $a1,4($a0)
end;
procedure TUART2B_U2BSTA.setUTXISEL0(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,14,1
  sw      $v1,($a0)
end;
function  TUART2B_U2BSTA.getUTXISEL0 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,14,1
end;
procedure TUART2B_U2BSTA.setUTXISEL1; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,8($a0)
end;
procedure TUART2B_U2BSTA.clearUTXISEL1; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,4($a0)
end;
procedure TUART2B_U2BSTA.setUTXISEL1(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,15,1
  sw      $v1,($a0)
end;
function  TUART2B_U2BSTA.getUTXISEL1 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,15,1
end;
procedure TUART2B_U2BSTA.setUTXSEL(thebits : TBits_2); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,14,2
  sw      $v1,($a0)
end;
function  TUART2B_U2BSTA.getUTXSEL : TBits_2;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,14,2
end;
procedure TUART2B_U2BSTA.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TUART2B_U2BSTA.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TUART2B_U6STA.setURXDA; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,8($a0)
end;
procedure TUART2B_U6STA.clearURXDA; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,4($a0)
end;
procedure TUART2B_U6STA.setURXDA(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,1
  sw      $v1,($a0)
end;
function  TUART2B_U6STA.getURXDA : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,1
end;
procedure TUART2B_U6STA.setOERR; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,8($a0)
end;
procedure TUART2B_U6STA.clearOERR; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,4($a0)
end;
procedure TUART2B_U6STA.setOERR(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,1,1
  sw      $v1,($a0)
end;
function  TUART2B_U6STA.getOERR : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,1,1
end;
procedure TUART2B_U6STA.setFERR; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,8($a0)
end;
procedure TUART2B_U6STA.clearFERR; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,4($a0)
end;
procedure TUART2B_U6STA.setFERR(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,2,1
  sw      $v1,($a0)
end;
function  TUART2B_U6STA.getFERR : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,2,1
end;
procedure TUART2B_U6STA.setPERR; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,8($a0)
end;
procedure TUART2B_U6STA.clearPERR; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,4($a0)
end;
procedure TUART2B_U6STA.setPERR(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,3,1
  sw      $v1,($a0)
end;
function  TUART2B_U6STA.getPERR : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,3,1
end;
procedure TUART2B_U6STA.setRIDLE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,8($a0)
end;
procedure TUART2B_U6STA.clearRIDLE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,4($a0)
end;
procedure TUART2B_U6STA.setRIDLE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,4,1
  sw      $v1,($a0)
end;
function  TUART2B_U6STA.getRIDLE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,4,1
end;
procedure TUART2B_U6STA.setADDEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,8($a0)
end;
procedure TUART2B_U6STA.clearADDEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,4($a0)
end;
procedure TUART2B_U6STA.setADDEN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,5,1
  sw      $v1,($a0)
end;
function  TUART2B_U6STA.getADDEN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,5,1
end;
procedure TUART2B_U6STA.setURXISEL(thebits : TBits_2); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,6,2
  sw      $v1,($a0)
end;
function  TUART2B_U6STA.getURXISEL : TBits_2;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,6,2
end;
procedure TUART2B_U6STA.setTRMT; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,8($a0)
end;
procedure TUART2B_U6STA.clearTRMT; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,4($a0)
end;
procedure TUART2B_U6STA.setTRMT(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,8,1
  sw      $v1,($a0)
end;
function  TUART2B_U6STA.getTRMT : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,8,1
end;
procedure TUART2B_U6STA.setUTXBF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,512
  sw $a1,8($a0)
end;
procedure TUART2B_U6STA.clearUTXBF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,512
  sw $a1,4($a0)
end;
procedure TUART2B_U6STA.setUTXBF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,9,1
  sw      $v1,($a0)
end;
function  TUART2B_U6STA.getUTXBF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,9,1
end;
procedure TUART2B_U6STA.setUTXEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1024
  sw $a1,8($a0)
end;
procedure TUART2B_U6STA.clearUTXEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1024
  sw $a1,4($a0)
end;
procedure TUART2B_U6STA.setUTXEN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,10,1
  sw      $v1,($a0)
end;
function  TUART2B_U6STA.getUTXEN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,10,1
end;
procedure TUART2B_U6STA.setUTXBRK; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2048
  sw $a1,8($a0)
end;
procedure TUART2B_U6STA.clearUTXBRK; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2048
  sw $a1,4($a0)
end;
procedure TUART2B_U6STA.setUTXBRK(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,11,1
  sw      $v1,($a0)
end;
function  TUART2B_U6STA.getUTXBRK : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,11,1
end;
procedure TUART2B_U6STA.setURXEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4096
  sw $a1,8($a0)
end;
procedure TUART2B_U6STA.clearURXEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4096
  sw $a1,4($a0)
end;
procedure TUART2B_U6STA.setURXEN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,12,1
  sw      $v1,($a0)
end;
function  TUART2B_U6STA.getURXEN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,12,1
end;
procedure TUART2B_U6STA.setUTXINV; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,8($a0)
end;
procedure TUART2B_U6STA.clearUTXINV; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,4($a0)
end;
procedure TUART2B_U6STA.setUTXINV(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,13,1
  sw      $v1,($a0)
end;
function  TUART2B_U6STA.getUTXINV : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,13,1
end;
procedure TUART2B_U6STA.setUTXISEL(thebits : TBits_2); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,14,2
  sw      $v1,($a0)
end;
function  TUART2B_U6STA.getUTXISEL : TBits_2;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,14,2
end;
procedure TUART2B_U6STA.setADDR(thebits : TBits_8); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  sll     $a1,$a1,16
  lui    $v0,65280
  ori    $v0,$v0,65535
  and   $v1,$v1,$v0
  or    $a1,$a1,$v0
  sw    $a1,($a0)
end;
function  TUART2B_U6STA.getADDR : TBits_8;
asm
  lw      $v1,($a0)
  srl     $a1,$a1,16
  lui    $v0,255
  and    $a1,$a1,$v0
end;
procedure TUART2B_U6STA.setADM_EN; assembler; nostackframe; inline;
asm
  lui     $a1,256
  sw $a1,8($a0)
end;
procedure TUART2B_U6STA.clearADM_EN; assembler; nostackframe; inline;
asm
  lui     $a1,256
  sw $a1,4($a0)
end;
procedure TUART2B_U6STA.setADM_EN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,24,1
  sw      $v1,($a0)
end;
function  TUART2B_U6STA.getADM_EN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,24,1
end;
procedure TUART2B_U6STA.setURXISEL0; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,8($a0)
end;
procedure TUART2B_U6STA.clearURXISEL0; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,4($a0)
end;
procedure TUART2B_U6STA.setURXISEL0(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,6,1
  sw      $v1,($a0)
end;
function  TUART2B_U6STA.getURXISEL0 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,6,1
end;
procedure TUART2B_U6STA.setURXISEL1; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,8($a0)
end;
procedure TUART2B_U6STA.clearURXISEL1; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,4($a0)
end;
procedure TUART2B_U6STA.setURXISEL1(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,7,1
  sw      $v1,($a0)
end;
function  TUART2B_U6STA.getURXISEL1 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,7,1
end;
procedure TUART2B_U6STA.setUTXISEL0; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16384
  sw $a1,8($a0)
end;
procedure TUART2B_U6STA.clearUTXISEL0; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16384
  sw $a1,4($a0)
end;
procedure TUART2B_U6STA.setUTXISEL0(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,14,1
  sw      $v1,($a0)
end;
function  TUART2B_U6STA.getUTXISEL0 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,14,1
end;
procedure TUART2B_U6STA.setUTXISEL1; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,8($a0)
end;
procedure TUART2B_U6STA.clearUTXISEL1; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,4($a0)
end;
procedure TUART2B_U6STA.setUTXISEL1(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,15,1
  sw      $v1,($a0)
end;
function  TUART2B_U6STA.getUTXISEL1 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,15,1
end;
procedure TUART2B_U6STA.setUTXSEL(thebits : TBits_2); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,14,2
  sw      $v1,($a0)
end;
function  TUART2B_U6STA.getUTXSEL : TBits_2;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,14,2
end;
procedure TUART2B_U6STA.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TUART2B_U6STA.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TUART3A_U2MODE.setSTSEL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,8($a0)
end;
procedure TUART3A_U2MODE.clearSTSEL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,4($a0)
end;
procedure TUART3A_U2MODE.setSTSEL(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,1
  sw      $v1,($a0)
end;
function  TUART3A_U2MODE.getSTSEL : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,1
end;
procedure TUART3A_U2MODE.setPDSEL(thebits : TBits_2); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,1,2
  sw      $v1,($a0)
end;
function  TUART3A_U2MODE.getPDSEL : TBits_2;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,1,2
end;
procedure TUART3A_U2MODE.setBRGH; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,8($a0)
end;
procedure TUART3A_U2MODE.clearBRGH; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,4($a0)
end;
procedure TUART3A_U2MODE.setBRGH(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,3,1
  sw      $v1,($a0)
end;
function  TUART3A_U2MODE.getBRGH : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,3,1
end;
procedure TUART3A_U2MODE.setRXINV; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,8($a0)
end;
procedure TUART3A_U2MODE.clearRXINV; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,4($a0)
end;
procedure TUART3A_U2MODE.setRXINV(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,4,1
  sw      $v1,($a0)
end;
function  TUART3A_U2MODE.getRXINV : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,4,1
end;
procedure TUART3A_U2MODE.setABAUD; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,8($a0)
end;
procedure TUART3A_U2MODE.clearABAUD; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,4($a0)
end;
procedure TUART3A_U2MODE.setABAUD(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,5,1
  sw      $v1,($a0)
end;
function  TUART3A_U2MODE.getABAUD : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,5,1
end;
procedure TUART3A_U2MODE.setLPBACK; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,8($a0)
end;
procedure TUART3A_U2MODE.clearLPBACK; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,4($a0)
end;
procedure TUART3A_U2MODE.setLPBACK(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,6,1
  sw      $v1,($a0)
end;
function  TUART3A_U2MODE.getLPBACK : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,6,1
end;
procedure TUART3A_U2MODE.setWAKE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,8($a0)
end;
procedure TUART3A_U2MODE.clearWAKE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,4($a0)
end;
procedure TUART3A_U2MODE.setWAKE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,7,1
  sw      $v1,($a0)
end;
function  TUART3A_U2MODE.getWAKE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,7,1
end;
procedure TUART3A_U2MODE.setUEN(thebits : TBits_2); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,8,2
  sw      $v1,($a0)
end;
function  TUART3A_U2MODE.getUEN : TBits_2;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,8,2
end;
procedure TUART3A_U2MODE.setRTSMD; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2048
  sw $a1,8($a0)
end;
procedure TUART3A_U2MODE.clearRTSMD; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2048
  sw $a1,4($a0)
end;
procedure TUART3A_U2MODE.setRTSMD(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,11,1
  sw      $v1,($a0)
end;
function  TUART3A_U2MODE.getRTSMD : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,11,1
end;
procedure TUART3A_U2MODE.setIREN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4096
  sw $a1,8($a0)
end;
procedure TUART3A_U2MODE.clearIREN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4096
  sw $a1,4($a0)
end;
procedure TUART3A_U2MODE.setIREN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,12,1
  sw      $v1,($a0)
end;
function  TUART3A_U2MODE.getIREN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,12,1
end;
procedure TUART3A_U2MODE.setSIDL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,8($a0)
end;
procedure TUART3A_U2MODE.clearSIDL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,4($a0)
end;
procedure TUART3A_U2MODE.setSIDL(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,13,1
  sw      $v1,($a0)
end;
function  TUART3A_U2MODE.getSIDL : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,13,1
end;
procedure TUART3A_U2MODE.setON; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,8($a0)
end;
procedure TUART3A_U2MODE.clearON; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,4($a0)
end;
procedure TUART3A_U2MODE.setON(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,15,1
  sw      $v1,($a0)
end;
function  TUART3A_U2MODE.getON : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,15,1
end;
procedure TUART3A_U2MODE.setPDSEL0; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,8($a0)
end;
procedure TUART3A_U2MODE.clearPDSEL0; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,4($a0)
end;
procedure TUART3A_U2MODE.setPDSEL0(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,1,1
  sw      $v1,($a0)
end;
function  TUART3A_U2MODE.getPDSEL0 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,1,1
end;
procedure TUART3A_U2MODE.setPDSEL1; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,8($a0)
end;
procedure TUART3A_U2MODE.clearPDSEL1; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,4($a0)
end;
procedure TUART3A_U2MODE.setPDSEL1(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,2,1
  sw      $v1,($a0)
end;
function  TUART3A_U2MODE.getPDSEL1 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,2,1
end;
procedure TUART3A_U2MODE.setUEN0; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,8($a0)
end;
procedure TUART3A_U2MODE.clearUEN0; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,4($a0)
end;
procedure TUART3A_U2MODE.setUEN0(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,8,1
  sw      $v1,($a0)
end;
function  TUART3A_U2MODE.getUEN0 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,8,1
end;
procedure TUART3A_U2MODE.setUEN1; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,512
  sw $a1,8($a0)
end;
procedure TUART3A_U2MODE.clearUEN1; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,512
  sw $a1,4($a0)
end;
procedure TUART3A_U2MODE.setUEN1(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,9,1
  sw      $v1,($a0)
end;
function  TUART3A_U2MODE.getUEN1 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,9,1
end;
procedure TUART3A_U2MODE.setUSIDL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,8($a0)
end;
procedure TUART3A_U2MODE.clearUSIDL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,4($a0)
end;
procedure TUART3A_U2MODE.setUSIDL(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,13,1
  sw      $v1,($a0)
end;
function  TUART3A_U2MODE.getUSIDL : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,13,1
end;
procedure TUART3A_U2MODE.setUARTEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,8($a0)
end;
procedure TUART3A_U2MODE.clearUARTEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,4($a0)
end;
procedure TUART3A_U2MODE.setUARTEN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,15,1
  sw      $v1,($a0)
end;
function  TUART3A_U2MODE.getUARTEN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,15,1
end;
procedure TUART3A_U2MODE.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TUART3A_U2MODE.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TUART3A_U3AMODE.setSTSEL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,8($a0)
end;
procedure TUART3A_U3AMODE.clearSTSEL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,4($a0)
end;
procedure TUART3A_U3AMODE.setSTSEL(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,1
  sw      $v1,($a0)
end;
function  TUART3A_U3AMODE.getSTSEL : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,1
end;
procedure TUART3A_U3AMODE.setPDSEL(thebits : TBits_2); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,1,2
  sw      $v1,($a0)
end;
function  TUART3A_U3AMODE.getPDSEL : TBits_2;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,1,2
end;
procedure TUART3A_U3AMODE.setBRGH; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,8($a0)
end;
procedure TUART3A_U3AMODE.clearBRGH; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,4($a0)
end;
procedure TUART3A_U3AMODE.setBRGH(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,3,1
  sw      $v1,($a0)
end;
function  TUART3A_U3AMODE.getBRGH : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,3,1
end;
procedure TUART3A_U3AMODE.setRXINV; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,8($a0)
end;
procedure TUART3A_U3AMODE.clearRXINV; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,4($a0)
end;
procedure TUART3A_U3AMODE.setRXINV(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,4,1
  sw      $v1,($a0)
end;
function  TUART3A_U3AMODE.getRXINV : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,4,1
end;
procedure TUART3A_U3AMODE.setABAUD; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,8($a0)
end;
procedure TUART3A_U3AMODE.clearABAUD; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,4($a0)
end;
procedure TUART3A_U3AMODE.setABAUD(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,5,1
  sw      $v1,($a0)
end;
function  TUART3A_U3AMODE.getABAUD : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,5,1
end;
procedure TUART3A_U3AMODE.setLPBACK; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,8($a0)
end;
procedure TUART3A_U3AMODE.clearLPBACK; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,4($a0)
end;
procedure TUART3A_U3AMODE.setLPBACK(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,6,1
  sw      $v1,($a0)
end;
function  TUART3A_U3AMODE.getLPBACK : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,6,1
end;
procedure TUART3A_U3AMODE.setWAKE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,8($a0)
end;
procedure TUART3A_U3AMODE.clearWAKE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,4($a0)
end;
procedure TUART3A_U3AMODE.setWAKE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,7,1
  sw      $v1,($a0)
end;
function  TUART3A_U3AMODE.getWAKE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,7,1
end;
procedure TUART3A_U3AMODE.setUEN(thebits : TBits_2); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,8,2
  sw      $v1,($a0)
end;
function  TUART3A_U3AMODE.getUEN : TBits_2;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,8,2
end;
procedure TUART3A_U3AMODE.setRTSMD; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2048
  sw $a1,8($a0)
end;
procedure TUART3A_U3AMODE.clearRTSMD; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2048
  sw $a1,4($a0)
end;
procedure TUART3A_U3AMODE.setRTSMD(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,11,1
  sw      $v1,($a0)
end;
function  TUART3A_U3AMODE.getRTSMD : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,11,1
end;
procedure TUART3A_U3AMODE.setIREN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4096
  sw $a1,8($a0)
end;
procedure TUART3A_U3AMODE.clearIREN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4096
  sw $a1,4($a0)
end;
procedure TUART3A_U3AMODE.setIREN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,12,1
  sw      $v1,($a0)
end;
function  TUART3A_U3AMODE.getIREN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,12,1
end;
procedure TUART3A_U3AMODE.setSIDL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,8($a0)
end;
procedure TUART3A_U3AMODE.clearSIDL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,4($a0)
end;
procedure TUART3A_U3AMODE.setSIDL(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,13,1
  sw      $v1,($a0)
end;
function  TUART3A_U3AMODE.getSIDL : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,13,1
end;
procedure TUART3A_U3AMODE.setON; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,8($a0)
end;
procedure TUART3A_U3AMODE.clearON; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,4($a0)
end;
procedure TUART3A_U3AMODE.setON(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,15,1
  sw      $v1,($a0)
end;
function  TUART3A_U3AMODE.getON : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,15,1
end;
procedure TUART3A_U3AMODE.setPDSEL0; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,8($a0)
end;
procedure TUART3A_U3AMODE.clearPDSEL0; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,4($a0)
end;
procedure TUART3A_U3AMODE.setPDSEL0(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,1,1
  sw      $v1,($a0)
end;
function  TUART3A_U3AMODE.getPDSEL0 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,1,1
end;
procedure TUART3A_U3AMODE.setPDSEL1; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,8($a0)
end;
procedure TUART3A_U3AMODE.clearPDSEL1; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,4($a0)
end;
procedure TUART3A_U3AMODE.setPDSEL1(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,2,1
  sw      $v1,($a0)
end;
function  TUART3A_U3AMODE.getPDSEL1 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,2,1
end;
procedure TUART3A_U3AMODE.setUEN0; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,8($a0)
end;
procedure TUART3A_U3AMODE.clearUEN0; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,4($a0)
end;
procedure TUART3A_U3AMODE.setUEN0(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,8,1
  sw      $v1,($a0)
end;
function  TUART3A_U3AMODE.getUEN0 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,8,1
end;
procedure TUART3A_U3AMODE.setUEN1; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,512
  sw $a1,8($a0)
end;
procedure TUART3A_U3AMODE.clearUEN1; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,512
  sw $a1,4($a0)
end;
procedure TUART3A_U3AMODE.setUEN1(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,9,1
  sw      $v1,($a0)
end;
function  TUART3A_U3AMODE.getUEN1 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,9,1
end;
procedure TUART3A_U3AMODE.setUSIDL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,8($a0)
end;
procedure TUART3A_U3AMODE.clearUSIDL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,4($a0)
end;
procedure TUART3A_U3AMODE.setUSIDL(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,13,1
  sw      $v1,($a0)
end;
function  TUART3A_U3AMODE.getUSIDL : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,13,1
end;
procedure TUART3A_U3AMODE.setUARTEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,8($a0)
end;
procedure TUART3A_U3AMODE.clearUARTEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,4($a0)
end;
procedure TUART3A_U3AMODE.setUARTEN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,15,1
  sw      $v1,($a0)
end;
function  TUART3A_U3AMODE.getUARTEN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,15,1
end;
procedure TUART3A_U3AMODE.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TUART3A_U3AMODE.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TUART3A_U2STA.setURXDA; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,8($a0)
end;
procedure TUART3A_U2STA.clearURXDA; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,4($a0)
end;
procedure TUART3A_U2STA.setURXDA(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,1
  sw      $v1,($a0)
end;
function  TUART3A_U2STA.getURXDA : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,1
end;
procedure TUART3A_U2STA.setOERR; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,8($a0)
end;
procedure TUART3A_U2STA.clearOERR; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,4($a0)
end;
procedure TUART3A_U2STA.setOERR(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,1,1
  sw      $v1,($a0)
end;
function  TUART3A_U2STA.getOERR : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,1,1
end;
procedure TUART3A_U2STA.setFERR; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,8($a0)
end;
procedure TUART3A_U2STA.clearFERR; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,4($a0)
end;
procedure TUART3A_U2STA.setFERR(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,2,1
  sw      $v1,($a0)
end;
function  TUART3A_U2STA.getFERR : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,2,1
end;
procedure TUART3A_U2STA.setPERR; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,8($a0)
end;
procedure TUART3A_U2STA.clearPERR; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,4($a0)
end;
procedure TUART3A_U2STA.setPERR(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,3,1
  sw      $v1,($a0)
end;
function  TUART3A_U2STA.getPERR : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,3,1
end;
procedure TUART3A_U2STA.setRIDLE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,8($a0)
end;
procedure TUART3A_U2STA.clearRIDLE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,4($a0)
end;
procedure TUART3A_U2STA.setRIDLE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,4,1
  sw      $v1,($a0)
end;
function  TUART3A_U2STA.getRIDLE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,4,1
end;
procedure TUART3A_U2STA.setADDEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,8($a0)
end;
procedure TUART3A_U2STA.clearADDEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,4($a0)
end;
procedure TUART3A_U2STA.setADDEN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,5,1
  sw      $v1,($a0)
end;
function  TUART3A_U2STA.getADDEN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,5,1
end;
procedure TUART3A_U2STA.setURXISEL(thebits : TBits_2); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,6,2
  sw      $v1,($a0)
end;
function  TUART3A_U2STA.getURXISEL : TBits_2;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,6,2
end;
procedure TUART3A_U2STA.setTRMT; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,8($a0)
end;
procedure TUART3A_U2STA.clearTRMT; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,4($a0)
end;
procedure TUART3A_U2STA.setTRMT(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,8,1
  sw      $v1,($a0)
end;
function  TUART3A_U2STA.getTRMT : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,8,1
end;
procedure TUART3A_U2STA.setUTXBF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,512
  sw $a1,8($a0)
end;
procedure TUART3A_U2STA.clearUTXBF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,512
  sw $a1,4($a0)
end;
procedure TUART3A_U2STA.setUTXBF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,9,1
  sw      $v1,($a0)
end;
function  TUART3A_U2STA.getUTXBF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,9,1
end;
procedure TUART3A_U2STA.setUTXEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1024
  sw $a1,8($a0)
end;
procedure TUART3A_U2STA.clearUTXEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1024
  sw $a1,4($a0)
end;
procedure TUART3A_U2STA.setUTXEN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,10,1
  sw      $v1,($a0)
end;
function  TUART3A_U2STA.getUTXEN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,10,1
end;
procedure TUART3A_U2STA.setUTXBRK; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2048
  sw $a1,8($a0)
end;
procedure TUART3A_U2STA.clearUTXBRK; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2048
  sw $a1,4($a0)
end;
procedure TUART3A_U2STA.setUTXBRK(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,11,1
  sw      $v1,($a0)
end;
function  TUART3A_U2STA.getUTXBRK : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,11,1
end;
procedure TUART3A_U2STA.setURXEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4096
  sw $a1,8($a0)
end;
procedure TUART3A_U2STA.clearURXEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4096
  sw $a1,4($a0)
end;
procedure TUART3A_U2STA.setURXEN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,12,1
  sw      $v1,($a0)
end;
function  TUART3A_U2STA.getURXEN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,12,1
end;
procedure TUART3A_U2STA.setUTXINV; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,8($a0)
end;
procedure TUART3A_U2STA.clearUTXINV; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,4($a0)
end;
procedure TUART3A_U2STA.setUTXINV(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,13,1
  sw      $v1,($a0)
end;
function  TUART3A_U2STA.getUTXINV : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,13,1
end;
procedure TUART3A_U2STA.setUTXISEL(thebits : TBits_2); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,14,2
  sw      $v1,($a0)
end;
function  TUART3A_U2STA.getUTXISEL : TBits_2;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,14,2
end;
procedure TUART3A_U2STA.setADDR(thebits : TBits_8); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  sll     $a1,$a1,16
  lui    $v0,65280
  ori    $v0,$v0,65535
  and   $v1,$v1,$v0
  or    $a1,$a1,$v0
  sw    $a1,($a0)
end;
function  TUART3A_U2STA.getADDR : TBits_8;
asm
  lw      $v1,($a0)
  srl     $a1,$a1,16
  lui    $v0,255
  and    $a1,$a1,$v0
end;
procedure TUART3A_U2STA.setADM_EN; assembler; nostackframe; inline;
asm
  lui     $a1,256
  sw $a1,8($a0)
end;
procedure TUART3A_U2STA.clearADM_EN; assembler; nostackframe; inline;
asm
  lui     $a1,256
  sw $a1,4($a0)
end;
procedure TUART3A_U2STA.setADM_EN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,24,1
  sw      $v1,($a0)
end;
function  TUART3A_U2STA.getADM_EN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,24,1
end;
procedure TUART3A_U2STA.setURXISEL0; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,8($a0)
end;
procedure TUART3A_U2STA.clearURXISEL0; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,4($a0)
end;
procedure TUART3A_U2STA.setURXISEL0(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,6,1
  sw      $v1,($a0)
end;
function  TUART3A_U2STA.getURXISEL0 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,6,1
end;
procedure TUART3A_U2STA.setURXISEL1; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,8($a0)
end;
procedure TUART3A_U2STA.clearURXISEL1; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,4($a0)
end;
procedure TUART3A_U2STA.setURXISEL1(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,7,1
  sw      $v1,($a0)
end;
function  TUART3A_U2STA.getURXISEL1 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,7,1
end;
procedure TUART3A_U2STA.setUTXISEL0; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16384
  sw $a1,8($a0)
end;
procedure TUART3A_U2STA.clearUTXISEL0; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16384
  sw $a1,4($a0)
end;
procedure TUART3A_U2STA.setUTXISEL0(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,14,1
  sw      $v1,($a0)
end;
function  TUART3A_U2STA.getUTXISEL0 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,14,1
end;
procedure TUART3A_U2STA.setUTXISEL1; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,8($a0)
end;
procedure TUART3A_U2STA.clearUTXISEL1; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,4($a0)
end;
procedure TUART3A_U2STA.setUTXISEL1(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,15,1
  sw      $v1,($a0)
end;
function  TUART3A_U2STA.getUTXISEL1 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,15,1
end;
procedure TUART3A_U2STA.setUTXSEL(thebits : TBits_2); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,14,2
  sw      $v1,($a0)
end;
function  TUART3A_U2STA.getUTXSEL : TBits_2;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,14,2
end;
procedure TUART3A_U2STA.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TUART3A_U2STA.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TUART3A_U3ASTA.setURXDA; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,8($a0)
end;
procedure TUART3A_U3ASTA.clearURXDA; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,4($a0)
end;
procedure TUART3A_U3ASTA.setURXDA(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,1
  sw      $v1,($a0)
end;
function  TUART3A_U3ASTA.getURXDA : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,1
end;
procedure TUART3A_U3ASTA.setOERR; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,8($a0)
end;
procedure TUART3A_U3ASTA.clearOERR; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,4($a0)
end;
procedure TUART3A_U3ASTA.setOERR(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,1,1
  sw      $v1,($a0)
end;
function  TUART3A_U3ASTA.getOERR : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,1,1
end;
procedure TUART3A_U3ASTA.setFERR; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,8($a0)
end;
procedure TUART3A_U3ASTA.clearFERR; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,4($a0)
end;
procedure TUART3A_U3ASTA.setFERR(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,2,1
  sw      $v1,($a0)
end;
function  TUART3A_U3ASTA.getFERR : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,2,1
end;
procedure TUART3A_U3ASTA.setPERR; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,8($a0)
end;
procedure TUART3A_U3ASTA.clearPERR; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,4($a0)
end;
procedure TUART3A_U3ASTA.setPERR(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,3,1
  sw      $v1,($a0)
end;
function  TUART3A_U3ASTA.getPERR : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,3,1
end;
procedure TUART3A_U3ASTA.setRIDLE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,8($a0)
end;
procedure TUART3A_U3ASTA.clearRIDLE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,4($a0)
end;
procedure TUART3A_U3ASTA.setRIDLE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,4,1
  sw      $v1,($a0)
end;
function  TUART3A_U3ASTA.getRIDLE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,4,1
end;
procedure TUART3A_U3ASTA.setADDEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,8($a0)
end;
procedure TUART3A_U3ASTA.clearADDEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,4($a0)
end;
procedure TUART3A_U3ASTA.setADDEN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,5,1
  sw      $v1,($a0)
end;
function  TUART3A_U3ASTA.getADDEN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,5,1
end;
procedure TUART3A_U3ASTA.setURXISEL(thebits : TBits_2); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,6,2
  sw      $v1,($a0)
end;
function  TUART3A_U3ASTA.getURXISEL : TBits_2;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,6,2
end;
procedure TUART3A_U3ASTA.setTRMT; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,8($a0)
end;
procedure TUART3A_U3ASTA.clearTRMT; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,4($a0)
end;
procedure TUART3A_U3ASTA.setTRMT(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,8,1
  sw      $v1,($a0)
end;
function  TUART3A_U3ASTA.getTRMT : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,8,1
end;
procedure TUART3A_U3ASTA.setUTXBF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,512
  sw $a1,8($a0)
end;
procedure TUART3A_U3ASTA.clearUTXBF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,512
  sw $a1,4($a0)
end;
procedure TUART3A_U3ASTA.setUTXBF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,9,1
  sw      $v1,($a0)
end;
function  TUART3A_U3ASTA.getUTXBF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,9,1
end;
procedure TUART3A_U3ASTA.setUTXEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1024
  sw $a1,8($a0)
end;
procedure TUART3A_U3ASTA.clearUTXEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1024
  sw $a1,4($a0)
end;
procedure TUART3A_U3ASTA.setUTXEN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,10,1
  sw      $v1,($a0)
end;
function  TUART3A_U3ASTA.getUTXEN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,10,1
end;
procedure TUART3A_U3ASTA.setUTXBRK; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2048
  sw $a1,8($a0)
end;
procedure TUART3A_U3ASTA.clearUTXBRK; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2048
  sw $a1,4($a0)
end;
procedure TUART3A_U3ASTA.setUTXBRK(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,11,1
  sw      $v1,($a0)
end;
function  TUART3A_U3ASTA.getUTXBRK : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,11,1
end;
procedure TUART3A_U3ASTA.setURXEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4096
  sw $a1,8($a0)
end;
procedure TUART3A_U3ASTA.clearURXEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4096
  sw $a1,4($a0)
end;
procedure TUART3A_U3ASTA.setURXEN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,12,1
  sw      $v1,($a0)
end;
function  TUART3A_U3ASTA.getURXEN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,12,1
end;
procedure TUART3A_U3ASTA.setUTXINV; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,8($a0)
end;
procedure TUART3A_U3ASTA.clearUTXINV; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,4($a0)
end;
procedure TUART3A_U3ASTA.setUTXINV(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,13,1
  sw      $v1,($a0)
end;
function  TUART3A_U3ASTA.getUTXINV : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,13,1
end;
procedure TUART3A_U3ASTA.setUTXISEL(thebits : TBits_2); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,14,2
  sw      $v1,($a0)
end;
function  TUART3A_U3ASTA.getUTXISEL : TBits_2;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,14,2
end;
procedure TUART3A_U3ASTA.setADDR(thebits : TBits_8); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  sll     $a1,$a1,16
  lui    $v0,65280
  ori    $v0,$v0,65535
  and   $v1,$v1,$v0
  or    $a1,$a1,$v0
  sw    $a1,($a0)
end;
function  TUART3A_U3ASTA.getADDR : TBits_8;
asm
  lw      $v1,($a0)
  srl     $a1,$a1,16
  lui    $v0,255
  and    $a1,$a1,$v0
end;
procedure TUART3A_U3ASTA.setADM_EN; assembler; nostackframe; inline;
asm
  lui     $a1,256
  sw $a1,8($a0)
end;
procedure TUART3A_U3ASTA.clearADM_EN; assembler; nostackframe; inline;
asm
  lui     $a1,256
  sw $a1,4($a0)
end;
procedure TUART3A_U3ASTA.setADM_EN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,24,1
  sw      $v1,($a0)
end;
function  TUART3A_U3ASTA.getADM_EN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,24,1
end;
procedure TUART3A_U3ASTA.setURXISEL0; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,8($a0)
end;
procedure TUART3A_U3ASTA.clearURXISEL0; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,4($a0)
end;
procedure TUART3A_U3ASTA.setURXISEL0(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,6,1
  sw      $v1,($a0)
end;
function  TUART3A_U3ASTA.getURXISEL0 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,6,1
end;
procedure TUART3A_U3ASTA.setURXISEL1; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,8($a0)
end;
procedure TUART3A_U3ASTA.clearURXISEL1; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,4($a0)
end;
procedure TUART3A_U3ASTA.setURXISEL1(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,7,1
  sw      $v1,($a0)
end;
function  TUART3A_U3ASTA.getURXISEL1 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,7,1
end;
procedure TUART3A_U3ASTA.setUTXISEL0; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16384
  sw $a1,8($a0)
end;
procedure TUART3A_U3ASTA.clearUTXISEL0; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16384
  sw $a1,4($a0)
end;
procedure TUART3A_U3ASTA.setUTXISEL0(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,14,1
  sw      $v1,($a0)
end;
function  TUART3A_U3ASTA.getUTXISEL0 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,14,1
end;
procedure TUART3A_U3ASTA.setUTXISEL1; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,8($a0)
end;
procedure TUART3A_U3ASTA.clearUTXISEL1; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,4($a0)
end;
procedure TUART3A_U3ASTA.setUTXISEL1(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,15,1
  sw      $v1,($a0)
end;
function  TUART3A_U3ASTA.getUTXISEL1 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,15,1
end;
procedure TUART3A_U3ASTA.setUTXSEL(thebits : TBits_2); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,14,2
  sw      $v1,($a0)
end;
function  TUART3A_U3ASTA.getUTXSEL : TBits_2;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,14,2
end;
procedure TUART3A_U3ASTA.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TUART3A_U3ASTA.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TUART5_U3BMODE.setSTSEL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,8($a0)
end;
procedure TUART5_U3BMODE.clearSTSEL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,4($a0)
end;
procedure TUART5_U3BMODE.setSTSEL(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,1
  sw      $v1,($a0)
end;
function  TUART5_U3BMODE.getSTSEL : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,1
end;
procedure TUART5_U3BMODE.setPDSEL(thebits : TBits_2); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,1,2
  sw      $v1,($a0)
end;
function  TUART5_U3BMODE.getPDSEL : TBits_2;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,1,2
end;
procedure TUART5_U3BMODE.setBRGH; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,8($a0)
end;
procedure TUART5_U3BMODE.clearBRGH; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,4($a0)
end;
procedure TUART5_U3BMODE.setBRGH(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,3,1
  sw      $v1,($a0)
end;
function  TUART5_U3BMODE.getBRGH : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,3,1
end;
procedure TUART5_U3BMODE.setRXINV; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,8($a0)
end;
procedure TUART5_U3BMODE.clearRXINV; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,4($a0)
end;
procedure TUART5_U3BMODE.setRXINV(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,4,1
  sw      $v1,($a0)
end;
function  TUART5_U3BMODE.getRXINV : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,4,1
end;
procedure TUART5_U3BMODE.setABAUD; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,8($a0)
end;
procedure TUART5_U3BMODE.clearABAUD; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,4($a0)
end;
procedure TUART5_U3BMODE.setABAUD(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,5,1
  sw      $v1,($a0)
end;
function  TUART5_U3BMODE.getABAUD : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,5,1
end;
procedure TUART5_U3BMODE.setLPBACK; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,8($a0)
end;
procedure TUART5_U3BMODE.clearLPBACK; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,4($a0)
end;
procedure TUART5_U3BMODE.setLPBACK(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,6,1
  sw      $v1,($a0)
end;
function  TUART5_U3BMODE.getLPBACK : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,6,1
end;
procedure TUART5_U3BMODE.setWAKE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,8($a0)
end;
procedure TUART5_U3BMODE.clearWAKE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,4($a0)
end;
procedure TUART5_U3BMODE.setWAKE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,7,1
  sw      $v1,($a0)
end;
function  TUART5_U3BMODE.getWAKE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,7,1
end;
procedure TUART5_U3BMODE.setIREN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4096
  sw $a1,8($a0)
end;
procedure TUART5_U3BMODE.clearIREN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4096
  sw $a1,4($a0)
end;
procedure TUART5_U3BMODE.setIREN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,12,1
  sw      $v1,($a0)
end;
function  TUART5_U3BMODE.getIREN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,12,1
end;
procedure TUART5_U3BMODE.setSIDL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,8($a0)
end;
procedure TUART5_U3BMODE.clearSIDL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,4($a0)
end;
procedure TUART5_U3BMODE.setSIDL(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,13,1
  sw      $v1,($a0)
end;
function  TUART5_U3BMODE.getSIDL : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,13,1
end;
procedure TUART5_U3BMODE.setON; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,8($a0)
end;
procedure TUART5_U3BMODE.clearON; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,4($a0)
end;
procedure TUART5_U3BMODE.setON(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,15,1
  sw      $v1,($a0)
end;
function  TUART5_U3BMODE.getON : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,15,1
end;
procedure TUART5_U3BMODE.setPDSEL0; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,8($a0)
end;
procedure TUART5_U3BMODE.clearPDSEL0; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,4($a0)
end;
procedure TUART5_U3BMODE.setPDSEL0(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,1,1
  sw      $v1,($a0)
end;
function  TUART5_U3BMODE.getPDSEL0 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,1,1
end;
procedure TUART5_U3BMODE.setPDSEL1; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,8($a0)
end;
procedure TUART5_U3BMODE.clearPDSEL1; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,4($a0)
end;
procedure TUART5_U3BMODE.setPDSEL1(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,2,1
  sw      $v1,($a0)
end;
function  TUART5_U3BMODE.getPDSEL1 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,2,1
end;
procedure TUART5_U3BMODE.setUSIDL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,8($a0)
end;
procedure TUART5_U3BMODE.clearUSIDL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,4($a0)
end;
procedure TUART5_U3BMODE.setUSIDL(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,13,1
  sw      $v1,($a0)
end;
function  TUART5_U3BMODE.getUSIDL : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,13,1
end;
procedure TUART5_U3BMODE.setUARTEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,8($a0)
end;
procedure TUART5_U3BMODE.clearUARTEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,4($a0)
end;
procedure TUART5_U3BMODE.setUARTEN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,15,1
  sw      $v1,($a0)
end;
function  TUART5_U3BMODE.getUARTEN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,15,1
end;
procedure TUART5_U3BMODE.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TUART5_U3BMODE.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TUART5_U5MODE.setSTSEL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,8($a0)
end;
procedure TUART5_U5MODE.clearSTSEL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,4($a0)
end;
procedure TUART5_U5MODE.setSTSEL(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,1
  sw      $v1,($a0)
end;
function  TUART5_U5MODE.getSTSEL : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,1
end;
procedure TUART5_U5MODE.setPDSEL(thebits : TBits_2); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,1,2
  sw      $v1,($a0)
end;
function  TUART5_U5MODE.getPDSEL : TBits_2;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,1,2
end;
procedure TUART5_U5MODE.setBRGH; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,8($a0)
end;
procedure TUART5_U5MODE.clearBRGH; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,4($a0)
end;
procedure TUART5_U5MODE.setBRGH(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,3,1
  sw      $v1,($a0)
end;
function  TUART5_U5MODE.getBRGH : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,3,1
end;
procedure TUART5_U5MODE.setRXINV; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,8($a0)
end;
procedure TUART5_U5MODE.clearRXINV; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,4($a0)
end;
procedure TUART5_U5MODE.setRXINV(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,4,1
  sw      $v1,($a0)
end;
function  TUART5_U5MODE.getRXINV : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,4,1
end;
procedure TUART5_U5MODE.setABAUD; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,8($a0)
end;
procedure TUART5_U5MODE.clearABAUD; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,4($a0)
end;
procedure TUART5_U5MODE.setABAUD(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,5,1
  sw      $v1,($a0)
end;
function  TUART5_U5MODE.getABAUD : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,5,1
end;
procedure TUART5_U5MODE.setLPBACK; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,8($a0)
end;
procedure TUART5_U5MODE.clearLPBACK; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,4($a0)
end;
procedure TUART5_U5MODE.setLPBACK(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,6,1
  sw      $v1,($a0)
end;
function  TUART5_U5MODE.getLPBACK : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,6,1
end;
procedure TUART5_U5MODE.setWAKE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,8($a0)
end;
procedure TUART5_U5MODE.clearWAKE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,4($a0)
end;
procedure TUART5_U5MODE.setWAKE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,7,1
  sw      $v1,($a0)
end;
function  TUART5_U5MODE.getWAKE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,7,1
end;
procedure TUART5_U5MODE.setIREN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4096
  sw $a1,8($a0)
end;
procedure TUART5_U5MODE.clearIREN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4096
  sw $a1,4($a0)
end;
procedure TUART5_U5MODE.setIREN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,12,1
  sw      $v1,($a0)
end;
function  TUART5_U5MODE.getIREN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,12,1
end;
procedure TUART5_U5MODE.setSIDL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,8($a0)
end;
procedure TUART5_U5MODE.clearSIDL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,4($a0)
end;
procedure TUART5_U5MODE.setSIDL(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,13,1
  sw      $v1,($a0)
end;
function  TUART5_U5MODE.getSIDL : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,13,1
end;
procedure TUART5_U5MODE.setON; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,8($a0)
end;
procedure TUART5_U5MODE.clearON; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,4($a0)
end;
procedure TUART5_U5MODE.setON(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,15,1
  sw      $v1,($a0)
end;
function  TUART5_U5MODE.getON : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,15,1
end;
procedure TUART5_U5MODE.setPDSEL0; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,8($a0)
end;
procedure TUART5_U5MODE.clearPDSEL0; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,4($a0)
end;
procedure TUART5_U5MODE.setPDSEL0(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,1,1
  sw      $v1,($a0)
end;
function  TUART5_U5MODE.getPDSEL0 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,1,1
end;
procedure TUART5_U5MODE.setPDSEL1; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,8($a0)
end;
procedure TUART5_U5MODE.clearPDSEL1; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,4($a0)
end;
procedure TUART5_U5MODE.setPDSEL1(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,2,1
  sw      $v1,($a0)
end;
function  TUART5_U5MODE.getPDSEL1 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,2,1
end;
procedure TUART5_U5MODE.setUSIDL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,8($a0)
end;
procedure TUART5_U5MODE.clearUSIDL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,4($a0)
end;
procedure TUART5_U5MODE.setUSIDL(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,13,1
  sw      $v1,($a0)
end;
function  TUART5_U5MODE.getUSIDL : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,13,1
end;
procedure TUART5_U5MODE.setUARTEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,8($a0)
end;
procedure TUART5_U5MODE.clearUARTEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,4($a0)
end;
procedure TUART5_U5MODE.setUARTEN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,15,1
  sw      $v1,($a0)
end;
function  TUART5_U5MODE.getUARTEN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,15,1
end;
procedure TUART5_U5MODE.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TUART5_U5MODE.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TUART5_U3BSTA.setURXDA; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,8($a0)
end;
procedure TUART5_U3BSTA.clearURXDA; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,4($a0)
end;
procedure TUART5_U3BSTA.setURXDA(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,1
  sw      $v1,($a0)
end;
function  TUART5_U3BSTA.getURXDA : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,1
end;
procedure TUART5_U3BSTA.setOERR; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,8($a0)
end;
procedure TUART5_U3BSTA.clearOERR; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,4($a0)
end;
procedure TUART5_U3BSTA.setOERR(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,1,1
  sw      $v1,($a0)
end;
function  TUART5_U3BSTA.getOERR : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,1,1
end;
procedure TUART5_U3BSTA.setFERR; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,8($a0)
end;
procedure TUART5_U3BSTA.clearFERR; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,4($a0)
end;
procedure TUART5_U3BSTA.setFERR(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,2,1
  sw      $v1,($a0)
end;
function  TUART5_U3BSTA.getFERR : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,2,1
end;
procedure TUART5_U3BSTA.setPERR; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,8($a0)
end;
procedure TUART5_U3BSTA.clearPERR; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,4($a0)
end;
procedure TUART5_U3BSTA.setPERR(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,3,1
  sw      $v1,($a0)
end;
function  TUART5_U3BSTA.getPERR : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,3,1
end;
procedure TUART5_U3BSTA.setRIDLE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,8($a0)
end;
procedure TUART5_U3BSTA.clearRIDLE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,4($a0)
end;
procedure TUART5_U3BSTA.setRIDLE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,4,1
  sw      $v1,($a0)
end;
function  TUART5_U3BSTA.getRIDLE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,4,1
end;
procedure TUART5_U3BSTA.setADDEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,8($a0)
end;
procedure TUART5_U3BSTA.clearADDEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,4($a0)
end;
procedure TUART5_U3BSTA.setADDEN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,5,1
  sw      $v1,($a0)
end;
function  TUART5_U3BSTA.getADDEN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,5,1
end;
procedure TUART5_U3BSTA.setURXISEL(thebits : TBits_2); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,6,2
  sw      $v1,($a0)
end;
function  TUART5_U3BSTA.getURXISEL : TBits_2;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,6,2
end;
procedure TUART5_U3BSTA.setTRMT; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,8($a0)
end;
procedure TUART5_U3BSTA.clearTRMT; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,4($a0)
end;
procedure TUART5_U3BSTA.setTRMT(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,8,1
  sw      $v1,($a0)
end;
function  TUART5_U3BSTA.getTRMT : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,8,1
end;
procedure TUART5_U3BSTA.setUTXBF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,512
  sw $a1,8($a0)
end;
procedure TUART5_U3BSTA.clearUTXBF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,512
  sw $a1,4($a0)
end;
procedure TUART5_U3BSTA.setUTXBF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,9,1
  sw      $v1,($a0)
end;
function  TUART5_U3BSTA.getUTXBF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,9,1
end;
procedure TUART5_U3BSTA.setUTXEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1024
  sw $a1,8($a0)
end;
procedure TUART5_U3BSTA.clearUTXEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1024
  sw $a1,4($a0)
end;
procedure TUART5_U3BSTA.setUTXEN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,10,1
  sw      $v1,($a0)
end;
function  TUART5_U3BSTA.getUTXEN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,10,1
end;
procedure TUART5_U3BSTA.setUTXBRK; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2048
  sw $a1,8($a0)
end;
procedure TUART5_U3BSTA.clearUTXBRK; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2048
  sw $a1,4($a0)
end;
procedure TUART5_U3BSTA.setUTXBRK(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,11,1
  sw      $v1,($a0)
end;
function  TUART5_U3BSTA.getUTXBRK : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,11,1
end;
procedure TUART5_U3BSTA.setURXEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4096
  sw $a1,8($a0)
end;
procedure TUART5_U3BSTA.clearURXEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4096
  sw $a1,4($a0)
end;
procedure TUART5_U3BSTA.setURXEN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,12,1
  sw      $v1,($a0)
end;
function  TUART5_U3BSTA.getURXEN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,12,1
end;
procedure TUART5_U3BSTA.setUTXINV; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,8($a0)
end;
procedure TUART5_U3BSTA.clearUTXINV; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,4($a0)
end;
procedure TUART5_U3BSTA.setUTXINV(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,13,1
  sw      $v1,($a0)
end;
function  TUART5_U3BSTA.getUTXINV : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,13,1
end;
procedure TUART5_U3BSTA.setUTXISEL(thebits : TBits_2); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,14,2
  sw      $v1,($a0)
end;
function  TUART5_U3BSTA.getUTXISEL : TBits_2;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,14,2
end;
procedure TUART5_U3BSTA.setADDR(thebits : TBits_8); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  sll     $a1,$a1,16
  lui    $v0,65280
  ori    $v0,$v0,65535
  and   $v1,$v1,$v0
  or    $a1,$a1,$v0
  sw    $a1,($a0)
end;
function  TUART5_U3BSTA.getADDR : TBits_8;
asm
  lw      $v1,($a0)
  srl     $a1,$a1,16
  lui    $v0,255
  and    $a1,$a1,$v0
end;
procedure TUART5_U3BSTA.setADM_EN; assembler; nostackframe; inline;
asm
  lui     $a1,256
  sw $a1,8($a0)
end;
procedure TUART5_U3BSTA.clearADM_EN; assembler; nostackframe; inline;
asm
  lui     $a1,256
  sw $a1,4($a0)
end;
procedure TUART5_U3BSTA.setADM_EN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,24,1
  sw      $v1,($a0)
end;
function  TUART5_U3BSTA.getADM_EN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,24,1
end;
procedure TUART5_U3BSTA.setURXISEL0; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,8($a0)
end;
procedure TUART5_U3BSTA.clearURXISEL0; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,4($a0)
end;
procedure TUART5_U3BSTA.setURXISEL0(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,6,1
  sw      $v1,($a0)
end;
function  TUART5_U3BSTA.getURXISEL0 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,6,1
end;
procedure TUART5_U3BSTA.setURXISEL1; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,8($a0)
end;
procedure TUART5_U3BSTA.clearURXISEL1; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,4($a0)
end;
procedure TUART5_U3BSTA.setURXISEL1(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,7,1
  sw      $v1,($a0)
end;
function  TUART5_U3BSTA.getURXISEL1 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,7,1
end;
procedure TUART5_U3BSTA.setUTXISEL0; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16384
  sw $a1,8($a0)
end;
procedure TUART5_U3BSTA.clearUTXISEL0; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16384
  sw $a1,4($a0)
end;
procedure TUART5_U3BSTA.setUTXISEL0(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,14,1
  sw      $v1,($a0)
end;
function  TUART5_U3BSTA.getUTXISEL0 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,14,1
end;
procedure TUART5_U3BSTA.setUTXISEL1; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,8($a0)
end;
procedure TUART5_U3BSTA.clearUTXISEL1; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,4($a0)
end;
procedure TUART5_U3BSTA.setUTXISEL1(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,15,1
  sw      $v1,($a0)
end;
function  TUART5_U3BSTA.getUTXISEL1 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,15,1
end;
procedure TUART5_U3BSTA.setUTXSEL(thebits : TBits_2); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,14,2
  sw      $v1,($a0)
end;
function  TUART5_U3BSTA.getUTXSEL : TBits_2;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,14,2
end;
procedure TUART5_U3BSTA.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TUART5_U3BSTA.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TUART5_U5STA.setURXDA; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,8($a0)
end;
procedure TUART5_U5STA.clearURXDA; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,4($a0)
end;
procedure TUART5_U5STA.setURXDA(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,1
  sw      $v1,($a0)
end;
function  TUART5_U5STA.getURXDA : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,1
end;
procedure TUART5_U5STA.setOERR; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,8($a0)
end;
procedure TUART5_U5STA.clearOERR; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,4($a0)
end;
procedure TUART5_U5STA.setOERR(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,1,1
  sw      $v1,($a0)
end;
function  TUART5_U5STA.getOERR : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,1,1
end;
procedure TUART5_U5STA.setFERR; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,8($a0)
end;
procedure TUART5_U5STA.clearFERR; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,4($a0)
end;
procedure TUART5_U5STA.setFERR(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,2,1
  sw      $v1,($a0)
end;
function  TUART5_U5STA.getFERR : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,2,1
end;
procedure TUART5_U5STA.setPERR; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,8($a0)
end;
procedure TUART5_U5STA.clearPERR; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,4($a0)
end;
procedure TUART5_U5STA.setPERR(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,3,1
  sw      $v1,($a0)
end;
function  TUART5_U5STA.getPERR : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,3,1
end;
procedure TUART5_U5STA.setRIDLE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,8($a0)
end;
procedure TUART5_U5STA.clearRIDLE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,4($a0)
end;
procedure TUART5_U5STA.setRIDLE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,4,1
  sw      $v1,($a0)
end;
function  TUART5_U5STA.getRIDLE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,4,1
end;
procedure TUART5_U5STA.setADDEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,8($a0)
end;
procedure TUART5_U5STA.clearADDEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,4($a0)
end;
procedure TUART5_U5STA.setADDEN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,5,1
  sw      $v1,($a0)
end;
function  TUART5_U5STA.getADDEN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,5,1
end;
procedure TUART5_U5STA.setURXISEL(thebits : TBits_2); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,6,2
  sw      $v1,($a0)
end;
function  TUART5_U5STA.getURXISEL : TBits_2;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,6,2
end;
procedure TUART5_U5STA.setTRMT; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,8($a0)
end;
procedure TUART5_U5STA.clearTRMT; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,4($a0)
end;
procedure TUART5_U5STA.setTRMT(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,8,1
  sw      $v1,($a0)
end;
function  TUART5_U5STA.getTRMT : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,8,1
end;
procedure TUART5_U5STA.setUTXBF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,512
  sw $a1,8($a0)
end;
procedure TUART5_U5STA.clearUTXBF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,512
  sw $a1,4($a0)
end;
procedure TUART5_U5STA.setUTXBF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,9,1
  sw      $v1,($a0)
end;
function  TUART5_U5STA.getUTXBF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,9,1
end;
procedure TUART5_U5STA.setUTXEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1024
  sw $a1,8($a0)
end;
procedure TUART5_U5STA.clearUTXEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1024
  sw $a1,4($a0)
end;
procedure TUART5_U5STA.setUTXEN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,10,1
  sw      $v1,($a0)
end;
function  TUART5_U5STA.getUTXEN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,10,1
end;
procedure TUART5_U5STA.setUTXBRK; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2048
  sw $a1,8($a0)
end;
procedure TUART5_U5STA.clearUTXBRK; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2048
  sw $a1,4($a0)
end;
procedure TUART5_U5STA.setUTXBRK(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,11,1
  sw      $v1,($a0)
end;
function  TUART5_U5STA.getUTXBRK : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,11,1
end;
procedure TUART5_U5STA.setURXEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4096
  sw $a1,8($a0)
end;
procedure TUART5_U5STA.clearURXEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4096
  sw $a1,4($a0)
end;
procedure TUART5_U5STA.setURXEN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,12,1
  sw      $v1,($a0)
end;
function  TUART5_U5STA.getURXEN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,12,1
end;
procedure TUART5_U5STA.setUTXINV; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,8($a0)
end;
procedure TUART5_U5STA.clearUTXINV; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,4($a0)
end;
procedure TUART5_U5STA.setUTXINV(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,13,1
  sw      $v1,($a0)
end;
function  TUART5_U5STA.getUTXINV : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,13,1
end;
procedure TUART5_U5STA.setUTXISEL(thebits : TBits_2); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,14,2
  sw      $v1,($a0)
end;
function  TUART5_U5STA.getUTXISEL : TBits_2;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,14,2
end;
procedure TUART5_U5STA.setADDR(thebits : TBits_8); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  sll     $a1,$a1,16
  lui    $v0,65280
  ori    $v0,$v0,65535
  and   $v1,$v1,$v0
  or    $a1,$a1,$v0
  sw    $a1,($a0)
end;
function  TUART5_U5STA.getADDR : TBits_8;
asm
  lw      $v1,($a0)
  srl     $a1,$a1,16
  lui    $v0,255
  and    $a1,$a1,$v0
end;
procedure TUART5_U5STA.setADM_EN; assembler; nostackframe; inline;
asm
  lui     $a1,256
  sw $a1,8($a0)
end;
procedure TUART5_U5STA.clearADM_EN; assembler; nostackframe; inline;
asm
  lui     $a1,256
  sw $a1,4($a0)
end;
procedure TUART5_U5STA.setADM_EN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,24,1
  sw      $v1,($a0)
end;
function  TUART5_U5STA.getADM_EN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,24,1
end;
procedure TUART5_U5STA.setURXISEL0; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,8($a0)
end;
procedure TUART5_U5STA.clearURXISEL0; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,4($a0)
end;
procedure TUART5_U5STA.setURXISEL0(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,6,1
  sw      $v1,($a0)
end;
function  TUART5_U5STA.getURXISEL0 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,6,1
end;
procedure TUART5_U5STA.setURXISEL1; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,8($a0)
end;
procedure TUART5_U5STA.clearURXISEL1; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,4($a0)
end;
procedure TUART5_U5STA.setURXISEL1(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,7,1
  sw      $v1,($a0)
end;
function  TUART5_U5STA.getURXISEL1 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,7,1
end;
procedure TUART5_U5STA.setUTXISEL0; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16384
  sw $a1,8($a0)
end;
procedure TUART5_U5STA.clearUTXISEL0; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16384
  sw $a1,4($a0)
end;
procedure TUART5_U5STA.setUTXISEL0(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,14,1
  sw      $v1,($a0)
end;
function  TUART5_U5STA.getUTXISEL0 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,14,1
end;
procedure TUART5_U5STA.setUTXISEL1; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,8($a0)
end;
procedure TUART5_U5STA.clearUTXISEL1; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,4($a0)
end;
procedure TUART5_U5STA.setUTXISEL1(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,15,1
  sw      $v1,($a0)
end;
function  TUART5_U5STA.getUTXISEL1 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,15,1
end;
procedure TUART5_U5STA.setUTXSEL(thebits : TBits_2); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,14,2
  sw      $v1,($a0)
end;
function  TUART5_U5STA.getUTXSEL : TBits_2;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,14,2
end;
procedure TUART5_U5STA.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TUART5_U5STA.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TPMP_PMCON.setRDSP; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,8($a0)
end;
procedure TPMP_PMCON.clearRDSP; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,4($a0)
end;
procedure TPMP_PMCON.setRDSP(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,1
  sw      $v1,($a0)
end;
function  TPMP_PMCON.getRDSP : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,1
end;
procedure TPMP_PMCON.setWRSP; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,8($a0)
end;
procedure TPMP_PMCON.clearWRSP; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,4($a0)
end;
procedure TPMP_PMCON.setWRSP(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,1,1
  sw      $v1,($a0)
end;
function  TPMP_PMCON.getWRSP : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,1,1
end;
procedure TPMP_PMCON.setCS1P; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,8($a0)
end;
procedure TPMP_PMCON.clearCS1P; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,4($a0)
end;
procedure TPMP_PMCON.setCS1P(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,3,1
  sw      $v1,($a0)
end;
function  TPMP_PMCON.getCS1P : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,3,1
end;
procedure TPMP_PMCON.setCS2P; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,8($a0)
end;
procedure TPMP_PMCON.clearCS2P; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,4($a0)
end;
procedure TPMP_PMCON.setCS2P(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,4,1
  sw      $v1,($a0)
end;
function  TPMP_PMCON.getCS2P : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,4,1
end;
procedure TPMP_PMCON.setALP; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,8($a0)
end;
procedure TPMP_PMCON.clearALP; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,4($a0)
end;
procedure TPMP_PMCON.setALP(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,5,1
  sw      $v1,($a0)
end;
function  TPMP_PMCON.getALP : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,5,1
end;
procedure TPMP_PMCON.setCSF(thebits : TBits_2); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,6,2
  sw      $v1,($a0)
end;
function  TPMP_PMCON.getCSF : TBits_2;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,6,2
end;
procedure TPMP_PMCON.setPTRDEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,8($a0)
end;
procedure TPMP_PMCON.clearPTRDEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,4($a0)
end;
procedure TPMP_PMCON.setPTRDEN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,8,1
  sw      $v1,($a0)
end;
function  TPMP_PMCON.getPTRDEN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,8,1
end;
procedure TPMP_PMCON.setPTWREN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,512
  sw $a1,8($a0)
end;
procedure TPMP_PMCON.clearPTWREN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,512
  sw $a1,4($a0)
end;
procedure TPMP_PMCON.setPTWREN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,9,1
  sw      $v1,($a0)
end;
function  TPMP_PMCON.getPTWREN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,9,1
end;
procedure TPMP_PMCON.setPMPTTL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1024
  sw $a1,8($a0)
end;
procedure TPMP_PMCON.clearPMPTTL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1024
  sw $a1,4($a0)
end;
procedure TPMP_PMCON.setPMPTTL(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,10,1
  sw      $v1,($a0)
end;
function  TPMP_PMCON.getPMPTTL : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,10,1
end;
procedure TPMP_PMCON.setADRMUX(thebits : TBits_2); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,11,2
  sw      $v1,($a0)
end;
function  TPMP_PMCON.getADRMUX : TBits_2;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,11,2
end;
procedure TPMP_PMCON.setSIDL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,8($a0)
end;
procedure TPMP_PMCON.clearSIDL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,4($a0)
end;
procedure TPMP_PMCON.setSIDL(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,13,1
  sw      $v1,($a0)
end;
function  TPMP_PMCON.getSIDL : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,13,1
end;
procedure TPMP_PMCON.setON; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,8($a0)
end;
procedure TPMP_PMCON.clearON; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,4($a0)
end;
procedure TPMP_PMCON.setON(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,15,1
  sw      $v1,($a0)
end;
function  TPMP_PMCON.getON : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,15,1
end;
procedure TPMP_PMCON.setCSF0; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,8($a0)
end;
procedure TPMP_PMCON.clearCSF0; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,4($a0)
end;
procedure TPMP_PMCON.setCSF0(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,6,1
  sw      $v1,($a0)
end;
function  TPMP_PMCON.getCSF0 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,6,1
end;
procedure TPMP_PMCON.setCSF1; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,8($a0)
end;
procedure TPMP_PMCON.clearCSF1; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,4($a0)
end;
procedure TPMP_PMCON.setCSF1(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,7,1
  sw      $v1,($a0)
end;
function  TPMP_PMCON.getCSF1 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,7,1
end;
procedure TPMP_PMCON.setADRMUX0; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2048
  sw $a1,8($a0)
end;
procedure TPMP_PMCON.clearADRMUX0; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2048
  sw $a1,4($a0)
end;
procedure TPMP_PMCON.setADRMUX0(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,11,1
  sw      $v1,($a0)
end;
function  TPMP_PMCON.getADRMUX0 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,11,1
end;
procedure TPMP_PMCON.setADRMUX1; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4096
  sw $a1,8($a0)
end;
procedure TPMP_PMCON.clearADRMUX1; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4096
  sw $a1,4($a0)
end;
procedure TPMP_PMCON.setADRMUX1(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,12,1
  sw      $v1,($a0)
end;
function  TPMP_PMCON.getADRMUX1 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,12,1
end;
procedure TPMP_PMCON.setPSIDL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,8($a0)
end;
procedure TPMP_PMCON.clearPSIDL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,4($a0)
end;
procedure TPMP_PMCON.setPSIDL(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,13,1
  sw      $v1,($a0)
end;
function  TPMP_PMCON.getPSIDL : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,13,1
end;
procedure TPMP_PMCON.setPMPEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,8($a0)
end;
procedure TPMP_PMCON.clearPMPEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,4($a0)
end;
procedure TPMP_PMCON.setPMPEN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,15,1
  sw      $v1,($a0)
end;
function  TPMP_PMCON.getPMPEN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,15,1
end;
procedure TPMP_PMCON.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TPMP_PMCON.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TPMP_PMMODE.setWAITE(thebits : TBits_2); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,2
  sw      $v1,($a0)
end;
function  TPMP_PMMODE.getWAITE : TBits_2;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,2
end;
procedure TPMP_PMMODE.setWAITM(thebits : TBits_4); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,2,4
  sw      $v1,($a0)
end;
function  TPMP_PMMODE.getWAITM : TBits_4;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,2,4
end;
procedure TPMP_PMMODE.setWAITB(thebits : TBits_2); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,6,2
  sw      $v1,($a0)
end;
function  TPMP_PMMODE.getWAITB : TBits_2;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,6,2
end;
procedure TPMP_PMMODE.setMODE(thebits : TBits_2); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,8,2
  sw      $v1,($a0)
end;
function  TPMP_PMMODE.getMODE : TBits_2;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,8,2
end;
procedure TPMP_PMMODE.setMODE16; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1024
  sw $a1,8($a0)
end;
procedure TPMP_PMMODE.clearMODE16; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1024
  sw $a1,4($a0)
end;
procedure TPMP_PMMODE.setMODE16(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,10,1
  sw      $v1,($a0)
end;
function  TPMP_PMMODE.getMODE16 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,10,1
end;
procedure TPMP_PMMODE.setINCM(thebits : TBits_2); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,11,2
  sw      $v1,($a0)
end;
function  TPMP_PMMODE.getINCM : TBits_2;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,11,2
end;
procedure TPMP_PMMODE.setIRQM(thebits : TBits_2); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,13,2
  sw      $v1,($a0)
end;
function  TPMP_PMMODE.getIRQM : TBits_2;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,13,2
end;
procedure TPMP_PMMODE.setBUSY; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,8($a0)
end;
procedure TPMP_PMMODE.clearBUSY; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,4($a0)
end;
procedure TPMP_PMMODE.setBUSY(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,15,1
  sw      $v1,($a0)
end;
function  TPMP_PMMODE.getBUSY : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,15,1
end;
procedure TPMP_PMMODE.setWAITE0; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,8($a0)
end;
procedure TPMP_PMMODE.clearWAITE0; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,4($a0)
end;
procedure TPMP_PMMODE.setWAITE0(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,1
  sw      $v1,($a0)
end;
function  TPMP_PMMODE.getWAITE0 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,1
end;
procedure TPMP_PMMODE.setWAITE1; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,8($a0)
end;
procedure TPMP_PMMODE.clearWAITE1; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,4($a0)
end;
procedure TPMP_PMMODE.setWAITE1(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,1,1
  sw      $v1,($a0)
end;
function  TPMP_PMMODE.getWAITE1 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,1,1
end;
procedure TPMP_PMMODE.setWAITM0; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,8($a0)
end;
procedure TPMP_PMMODE.clearWAITM0; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,4($a0)
end;
procedure TPMP_PMMODE.setWAITM0(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,2,1
  sw      $v1,($a0)
end;
function  TPMP_PMMODE.getWAITM0 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,2,1
end;
procedure TPMP_PMMODE.setWAITM1; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,8($a0)
end;
procedure TPMP_PMMODE.clearWAITM1; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,4($a0)
end;
procedure TPMP_PMMODE.setWAITM1(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,3,1
  sw      $v1,($a0)
end;
function  TPMP_PMMODE.getWAITM1 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,3,1
end;
procedure TPMP_PMMODE.setWAITM2; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,8($a0)
end;
procedure TPMP_PMMODE.clearWAITM2; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,4($a0)
end;
procedure TPMP_PMMODE.setWAITM2(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,4,1
  sw      $v1,($a0)
end;
function  TPMP_PMMODE.getWAITM2 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,4,1
end;
procedure TPMP_PMMODE.setWAITM3; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,8($a0)
end;
procedure TPMP_PMMODE.clearWAITM3; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,4($a0)
end;
procedure TPMP_PMMODE.setWAITM3(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,5,1
  sw      $v1,($a0)
end;
function  TPMP_PMMODE.getWAITM3 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,5,1
end;
procedure TPMP_PMMODE.setWAITB0; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,8($a0)
end;
procedure TPMP_PMMODE.clearWAITB0; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,4($a0)
end;
procedure TPMP_PMMODE.setWAITB0(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,6,1
  sw      $v1,($a0)
end;
function  TPMP_PMMODE.getWAITB0 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,6,1
end;
procedure TPMP_PMMODE.setWAITB1; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,8($a0)
end;
procedure TPMP_PMMODE.clearWAITB1; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,4($a0)
end;
procedure TPMP_PMMODE.setWAITB1(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,7,1
  sw      $v1,($a0)
end;
function  TPMP_PMMODE.getWAITB1 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,7,1
end;
procedure TPMP_PMMODE.setMODE0; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,8($a0)
end;
procedure TPMP_PMMODE.clearMODE0; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,4($a0)
end;
procedure TPMP_PMMODE.setMODE0(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,8,1
  sw      $v1,($a0)
end;
function  TPMP_PMMODE.getMODE0 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,8,1
end;
procedure TPMP_PMMODE.setMODE1; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,512
  sw $a1,8($a0)
end;
procedure TPMP_PMMODE.clearMODE1; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,512
  sw $a1,4($a0)
end;
procedure TPMP_PMMODE.setMODE1(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,9,1
  sw      $v1,($a0)
end;
function  TPMP_PMMODE.getMODE1 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,9,1
end;
procedure TPMP_PMMODE.setINCM0; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2048
  sw $a1,8($a0)
end;
procedure TPMP_PMMODE.clearINCM0; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2048
  sw $a1,4($a0)
end;
procedure TPMP_PMMODE.setINCM0(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,11,1
  sw      $v1,($a0)
end;
function  TPMP_PMMODE.getINCM0 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,11,1
end;
procedure TPMP_PMMODE.setINCM1; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4096
  sw $a1,8($a0)
end;
procedure TPMP_PMMODE.clearINCM1; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4096
  sw $a1,4($a0)
end;
procedure TPMP_PMMODE.setINCM1(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,12,1
  sw      $v1,($a0)
end;
function  TPMP_PMMODE.getINCM1 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,12,1
end;
procedure TPMP_PMMODE.setIRQM0; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,8($a0)
end;
procedure TPMP_PMMODE.clearIRQM0; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,4($a0)
end;
procedure TPMP_PMMODE.setIRQM0(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,13,1
  sw      $v1,($a0)
end;
function  TPMP_PMMODE.getIRQM0 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,13,1
end;
procedure TPMP_PMMODE.setIRQM1; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16384
  sw $a1,8($a0)
end;
procedure TPMP_PMMODE.clearIRQM1; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16384
  sw $a1,4($a0)
end;
procedure TPMP_PMMODE.setIRQM1(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,14,1
  sw      $v1,($a0)
end;
function  TPMP_PMMODE.getIRQM1 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,14,1
end;
procedure TPMP_PMMODE.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TPMP_PMMODE.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TPMP_PMADDR.setADDR(thebits : TBits_14); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  sll     $a1,$a1,0
  lui    $v0,65535
  ori    $v0,$v0,49152
  and   $v1,$v1,$v0
  or    $a1,$a1,$v0
  sw    $a1,($a0)
end;
function  TPMP_PMADDR.getADDR : TBits_14;
asm
  lw      $v1,($a0)
  srl     $a1,$a1,0
  ori    $v0,$zero,16383
  and    $a1,$a1,$v0
end;
procedure TPMP_PMADDR.setCS(thebits : TBits_2); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,14,2
  sw      $v1,($a0)
end;
function  TPMP_PMADDR.getCS : TBits_2;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,14,2
end;
procedure TPMP_PMADDR.setPADDR(thebits : TBits_14); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  sll     $a1,$a1,0
  lui    $v0,65535
  ori    $v0,$v0,49152
  and   $v1,$v1,$v0
  or    $a1,$a1,$v0
  sw    $a1,($a0)
end;
function  TPMP_PMADDR.getPADDR : TBits_14;
asm
  lw      $v1,($a0)
  srl     $a1,$a1,0
  ori    $v0,$zero,16383
  and    $a1,$a1,$v0
end;
procedure TPMP_PMADDR.setCS1; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16384
  sw $a1,8($a0)
end;
procedure TPMP_PMADDR.clearCS1; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16384
  sw $a1,4($a0)
end;
procedure TPMP_PMADDR.setCS1(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,14,1
  sw      $v1,($a0)
end;
function  TPMP_PMADDR.getCS1 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,14,1
end;
procedure TPMP_PMADDR.setCS2; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,8($a0)
end;
procedure TPMP_PMADDR.clearCS2; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,4($a0)
end;
procedure TPMP_PMADDR.setCS2(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,15,1
  sw      $v1,($a0)
end;
function  TPMP_PMADDR.getCS2 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,15,1
end;
procedure TPMP_PMADDR.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TPMP_PMADDR.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TPMP_PMDOUT.setDATAOUT(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TPMP_PMDOUT.getDATAOUT : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TPMP_PMDOUT.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TPMP_PMDOUT.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TPMP_PMDIN.setDATAIN(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TPMP_PMDIN.getDATAIN : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TPMP_PMDIN.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TPMP_PMDIN.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TPMP_PMAEN.setPTEN(thebits : TBits_16); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  sll     $a1,$a1,0
  lui    $v0,65535
  and   $v1,$v1,$v0
  or    $a1,$a1,$v0
  sw    $a1,($a0)
end;
function  TPMP_PMAEN.getPTEN : TBits_16;
asm
  lw      $v1,($a0)
  srl     $a1,$a1,0
  ori    $v0,$zero,65535
  and    $a1,$a1,$v0
end;
procedure TPMP_PMAEN.setPTEN0; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,8($a0)
end;
procedure TPMP_PMAEN.clearPTEN0; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,4($a0)
end;
procedure TPMP_PMAEN.setPTEN0(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,1
  sw      $v1,($a0)
end;
function  TPMP_PMAEN.getPTEN0 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,1
end;
procedure TPMP_PMAEN.setPTEN1; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,8($a0)
end;
procedure TPMP_PMAEN.clearPTEN1; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,4($a0)
end;
procedure TPMP_PMAEN.setPTEN1(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,1,1
  sw      $v1,($a0)
end;
function  TPMP_PMAEN.getPTEN1 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,1,1
end;
procedure TPMP_PMAEN.setPTEN2; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,8($a0)
end;
procedure TPMP_PMAEN.clearPTEN2; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,4($a0)
end;
procedure TPMP_PMAEN.setPTEN2(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,2,1
  sw      $v1,($a0)
end;
function  TPMP_PMAEN.getPTEN2 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,2,1
end;
procedure TPMP_PMAEN.setPTEN3; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,8($a0)
end;
procedure TPMP_PMAEN.clearPTEN3; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,4($a0)
end;
procedure TPMP_PMAEN.setPTEN3(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,3,1
  sw      $v1,($a0)
end;
function  TPMP_PMAEN.getPTEN3 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,3,1
end;
procedure TPMP_PMAEN.setPTEN4; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,8($a0)
end;
procedure TPMP_PMAEN.clearPTEN4; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,4($a0)
end;
procedure TPMP_PMAEN.setPTEN4(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,4,1
  sw      $v1,($a0)
end;
function  TPMP_PMAEN.getPTEN4 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,4,1
end;
procedure TPMP_PMAEN.setPTEN5; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,8($a0)
end;
procedure TPMP_PMAEN.clearPTEN5; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,4($a0)
end;
procedure TPMP_PMAEN.setPTEN5(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,5,1
  sw      $v1,($a0)
end;
function  TPMP_PMAEN.getPTEN5 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,5,1
end;
procedure TPMP_PMAEN.setPTEN6; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,8($a0)
end;
procedure TPMP_PMAEN.clearPTEN6; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,4($a0)
end;
procedure TPMP_PMAEN.setPTEN6(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,6,1
  sw      $v1,($a0)
end;
function  TPMP_PMAEN.getPTEN6 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,6,1
end;
procedure TPMP_PMAEN.setPTEN7; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,8($a0)
end;
procedure TPMP_PMAEN.clearPTEN7; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,4($a0)
end;
procedure TPMP_PMAEN.setPTEN7(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,7,1
  sw      $v1,($a0)
end;
function  TPMP_PMAEN.getPTEN7 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,7,1
end;
procedure TPMP_PMAEN.setPTEN8; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,8($a0)
end;
procedure TPMP_PMAEN.clearPTEN8; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,4($a0)
end;
procedure TPMP_PMAEN.setPTEN8(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,8,1
  sw      $v1,($a0)
end;
function  TPMP_PMAEN.getPTEN8 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,8,1
end;
procedure TPMP_PMAEN.setPTEN9; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,512
  sw $a1,8($a0)
end;
procedure TPMP_PMAEN.clearPTEN9; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,512
  sw $a1,4($a0)
end;
procedure TPMP_PMAEN.setPTEN9(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,9,1
  sw      $v1,($a0)
end;
function  TPMP_PMAEN.getPTEN9 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,9,1
end;
procedure TPMP_PMAEN.setPTEN10; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1024
  sw $a1,8($a0)
end;
procedure TPMP_PMAEN.clearPTEN10; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1024
  sw $a1,4($a0)
end;
procedure TPMP_PMAEN.setPTEN10(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,10,1
  sw      $v1,($a0)
end;
function  TPMP_PMAEN.getPTEN10 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,10,1
end;
procedure TPMP_PMAEN.setPTEN11; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2048
  sw $a1,8($a0)
end;
procedure TPMP_PMAEN.clearPTEN11; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2048
  sw $a1,4($a0)
end;
procedure TPMP_PMAEN.setPTEN11(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,11,1
  sw      $v1,($a0)
end;
function  TPMP_PMAEN.getPTEN11 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,11,1
end;
procedure TPMP_PMAEN.setPTEN12; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4096
  sw $a1,8($a0)
end;
procedure TPMP_PMAEN.clearPTEN12; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4096
  sw $a1,4($a0)
end;
procedure TPMP_PMAEN.setPTEN12(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,12,1
  sw      $v1,($a0)
end;
function  TPMP_PMAEN.getPTEN12 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,12,1
end;
procedure TPMP_PMAEN.setPTEN13; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,8($a0)
end;
procedure TPMP_PMAEN.clearPTEN13; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,4($a0)
end;
procedure TPMP_PMAEN.setPTEN13(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,13,1
  sw      $v1,($a0)
end;
function  TPMP_PMAEN.getPTEN13 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,13,1
end;
procedure TPMP_PMAEN.setPTEN14; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16384
  sw $a1,8($a0)
end;
procedure TPMP_PMAEN.clearPTEN14; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16384
  sw $a1,4($a0)
end;
procedure TPMP_PMAEN.setPTEN14(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,14,1
  sw      $v1,($a0)
end;
function  TPMP_PMAEN.getPTEN14 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,14,1
end;
procedure TPMP_PMAEN.setPTEN15; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,8($a0)
end;
procedure TPMP_PMAEN.clearPTEN15; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,4($a0)
end;
procedure TPMP_PMAEN.setPTEN15(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,15,1
  sw      $v1,($a0)
end;
function  TPMP_PMAEN.getPTEN15 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,15,1
end;
procedure TPMP_PMAEN.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TPMP_PMAEN.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TPMP_PMSTAT.setOB0E; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,8($a0)
end;
procedure TPMP_PMSTAT.clearOB0E; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,4($a0)
end;
procedure TPMP_PMSTAT.setOB0E(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,1
  sw      $v1,($a0)
end;
function  TPMP_PMSTAT.getOB0E : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,1
end;
procedure TPMP_PMSTAT.setOB1E; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,8($a0)
end;
procedure TPMP_PMSTAT.clearOB1E; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,4($a0)
end;
procedure TPMP_PMSTAT.setOB1E(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,1,1
  sw      $v1,($a0)
end;
function  TPMP_PMSTAT.getOB1E : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,1,1
end;
procedure TPMP_PMSTAT.setOB2E; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,8($a0)
end;
procedure TPMP_PMSTAT.clearOB2E; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,4($a0)
end;
procedure TPMP_PMSTAT.setOB2E(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,2,1
  sw      $v1,($a0)
end;
function  TPMP_PMSTAT.getOB2E : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,2,1
end;
procedure TPMP_PMSTAT.setOB3E; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,8($a0)
end;
procedure TPMP_PMSTAT.clearOB3E; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,4($a0)
end;
procedure TPMP_PMSTAT.setOB3E(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,3,1
  sw      $v1,($a0)
end;
function  TPMP_PMSTAT.getOB3E : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,3,1
end;
procedure TPMP_PMSTAT.setOBUF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,8($a0)
end;
procedure TPMP_PMSTAT.clearOBUF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,4($a0)
end;
procedure TPMP_PMSTAT.setOBUF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,6,1
  sw      $v1,($a0)
end;
function  TPMP_PMSTAT.getOBUF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,6,1
end;
procedure TPMP_PMSTAT.setOBE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,8($a0)
end;
procedure TPMP_PMSTAT.clearOBE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,4($a0)
end;
procedure TPMP_PMSTAT.setOBE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,7,1
  sw      $v1,($a0)
end;
function  TPMP_PMSTAT.getOBE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,7,1
end;
procedure TPMP_PMSTAT.setIB0F; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,8($a0)
end;
procedure TPMP_PMSTAT.clearIB0F; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,4($a0)
end;
procedure TPMP_PMSTAT.setIB0F(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,8,1
  sw      $v1,($a0)
end;
function  TPMP_PMSTAT.getIB0F : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,8,1
end;
procedure TPMP_PMSTAT.setIB1F; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,512
  sw $a1,8($a0)
end;
procedure TPMP_PMSTAT.clearIB1F; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,512
  sw $a1,4($a0)
end;
procedure TPMP_PMSTAT.setIB1F(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,9,1
  sw      $v1,($a0)
end;
function  TPMP_PMSTAT.getIB1F : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,9,1
end;
procedure TPMP_PMSTAT.setIB2F; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1024
  sw $a1,8($a0)
end;
procedure TPMP_PMSTAT.clearIB2F; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1024
  sw $a1,4($a0)
end;
procedure TPMP_PMSTAT.setIB2F(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,10,1
  sw      $v1,($a0)
end;
function  TPMP_PMSTAT.getIB2F : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,10,1
end;
procedure TPMP_PMSTAT.setIB3F; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2048
  sw $a1,8($a0)
end;
procedure TPMP_PMSTAT.clearIB3F; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2048
  sw $a1,4($a0)
end;
procedure TPMP_PMSTAT.setIB3F(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,11,1
  sw      $v1,($a0)
end;
function  TPMP_PMSTAT.getIB3F : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,11,1
end;
procedure TPMP_PMSTAT.setIBOV; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16384
  sw $a1,8($a0)
end;
procedure TPMP_PMSTAT.clearIBOV; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16384
  sw $a1,4($a0)
end;
procedure TPMP_PMSTAT.setIBOV(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,14,1
  sw      $v1,($a0)
end;
function  TPMP_PMSTAT.getIBOV : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,14,1
end;
procedure TPMP_PMSTAT.setIBF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,8($a0)
end;
procedure TPMP_PMSTAT.clearIBF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,4($a0)
end;
procedure TPMP_PMSTAT.setIBF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,15,1
  sw      $v1,($a0)
end;
function  TPMP_PMSTAT.getIBF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,15,1
end;
procedure TPMP_PMSTAT.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TPMP_PMSTAT.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TADC10_AD1CON1.setDONE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,8($a0)
end;
procedure TADC10_AD1CON1.clearDONE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,4($a0)
end;
procedure TADC10_AD1CON1.setDONE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,1
  sw      $v1,($a0)
end;
function  TADC10_AD1CON1.getDONE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,1
end;
procedure TADC10_AD1CON1.setSAMP; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,8($a0)
end;
procedure TADC10_AD1CON1.clearSAMP; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,4($a0)
end;
procedure TADC10_AD1CON1.setSAMP(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,1,1
  sw      $v1,($a0)
end;
function  TADC10_AD1CON1.getSAMP : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,1,1
end;
procedure TADC10_AD1CON1.setASAM; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,8($a0)
end;
procedure TADC10_AD1CON1.clearASAM; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,4($a0)
end;
procedure TADC10_AD1CON1.setASAM(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,2,1
  sw      $v1,($a0)
end;
function  TADC10_AD1CON1.getASAM : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,2,1
end;
procedure TADC10_AD1CON1.setCLRASAM; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,8($a0)
end;
procedure TADC10_AD1CON1.clearCLRASAM; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,4($a0)
end;
procedure TADC10_AD1CON1.setCLRASAM(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,4,1
  sw      $v1,($a0)
end;
function  TADC10_AD1CON1.getCLRASAM : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,4,1
end;
procedure TADC10_AD1CON1.setSSRC(thebits : TBits_3); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,5,3
  sw      $v1,($a0)
end;
function  TADC10_AD1CON1.getSSRC : TBits_3;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,5,3
end;
procedure TADC10_AD1CON1.setFORM(thebits : TBits_3); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,8,3
  sw      $v1,($a0)
end;
function  TADC10_AD1CON1.getFORM : TBits_3;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,8,3
end;
procedure TADC10_AD1CON1.setSIDL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,8($a0)
end;
procedure TADC10_AD1CON1.clearSIDL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,4($a0)
end;
procedure TADC10_AD1CON1.setSIDL(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,13,1
  sw      $v1,($a0)
end;
function  TADC10_AD1CON1.getSIDL : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,13,1
end;
procedure TADC10_AD1CON1.setON; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,8($a0)
end;
procedure TADC10_AD1CON1.clearON; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,4($a0)
end;
procedure TADC10_AD1CON1.setON(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,15,1
  sw      $v1,($a0)
end;
function  TADC10_AD1CON1.getON : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,15,1
end;
procedure TADC10_AD1CON1.setSSRC0; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,8($a0)
end;
procedure TADC10_AD1CON1.clearSSRC0; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,4($a0)
end;
procedure TADC10_AD1CON1.setSSRC0(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,5,1
  sw      $v1,($a0)
end;
function  TADC10_AD1CON1.getSSRC0 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,5,1
end;
procedure TADC10_AD1CON1.setSSRC1; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,8($a0)
end;
procedure TADC10_AD1CON1.clearSSRC1; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,4($a0)
end;
procedure TADC10_AD1CON1.setSSRC1(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,6,1
  sw      $v1,($a0)
end;
function  TADC10_AD1CON1.getSSRC1 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,6,1
end;
procedure TADC10_AD1CON1.setSSRC2; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,8($a0)
end;
procedure TADC10_AD1CON1.clearSSRC2; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,4($a0)
end;
procedure TADC10_AD1CON1.setSSRC2(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,7,1
  sw      $v1,($a0)
end;
function  TADC10_AD1CON1.getSSRC2 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,7,1
end;
procedure TADC10_AD1CON1.setFORM0; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,8($a0)
end;
procedure TADC10_AD1CON1.clearFORM0; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,4($a0)
end;
procedure TADC10_AD1CON1.setFORM0(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,8,1
  sw      $v1,($a0)
end;
function  TADC10_AD1CON1.getFORM0 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,8,1
end;
procedure TADC10_AD1CON1.setFORM1; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,512
  sw $a1,8($a0)
end;
procedure TADC10_AD1CON1.clearFORM1; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,512
  sw $a1,4($a0)
end;
procedure TADC10_AD1CON1.setFORM1(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,9,1
  sw      $v1,($a0)
end;
function  TADC10_AD1CON1.getFORM1 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,9,1
end;
procedure TADC10_AD1CON1.setFORM2; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1024
  sw $a1,8($a0)
end;
procedure TADC10_AD1CON1.clearFORM2; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1024
  sw $a1,4($a0)
end;
procedure TADC10_AD1CON1.setFORM2(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,10,1
  sw      $v1,($a0)
end;
function  TADC10_AD1CON1.getFORM2 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,10,1
end;
procedure TADC10_AD1CON1.setADSIDL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,8($a0)
end;
procedure TADC10_AD1CON1.clearADSIDL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,4($a0)
end;
procedure TADC10_AD1CON1.setADSIDL(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,13,1
  sw      $v1,($a0)
end;
function  TADC10_AD1CON1.getADSIDL : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,13,1
end;
procedure TADC10_AD1CON1.setADON; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,8($a0)
end;
procedure TADC10_AD1CON1.clearADON; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,4($a0)
end;
procedure TADC10_AD1CON1.setADON(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,15,1
  sw      $v1,($a0)
end;
function  TADC10_AD1CON1.getADON : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,15,1
end;
procedure TADC10_AD1CON1.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TADC10_AD1CON1.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TADC10_AD1CON2.setALTS; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,8($a0)
end;
procedure TADC10_AD1CON2.clearALTS; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,4($a0)
end;
procedure TADC10_AD1CON2.setALTS(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,1
  sw      $v1,($a0)
end;
function  TADC10_AD1CON2.getALTS : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,1
end;
procedure TADC10_AD1CON2.setBUFM; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,8($a0)
end;
procedure TADC10_AD1CON2.clearBUFM; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,4($a0)
end;
procedure TADC10_AD1CON2.setBUFM(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,1,1
  sw      $v1,($a0)
end;
function  TADC10_AD1CON2.getBUFM : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,1,1
end;
procedure TADC10_AD1CON2.setSMPI(thebits : TBits_4); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,2,4
  sw      $v1,($a0)
end;
function  TADC10_AD1CON2.getSMPI : TBits_4;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,2,4
end;
procedure TADC10_AD1CON2.setBUFS; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,8($a0)
end;
procedure TADC10_AD1CON2.clearBUFS; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,4($a0)
end;
procedure TADC10_AD1CON2.setBUFS(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,7,1
  sw      $v1,($a0)
end;
function  TADC10_AD1CON2.getBUFS : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,7,1
end;
procedure TADC10_AD1CON2.setCSCNA; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1024
  sw $a1,8($a0)
end;
procedure TADC10_AD1CON2.clearCSCNA; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1024
  sw $a1,4($a0)
end;
procedure TADC10_AD1CON2.setCSCNA(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,10,1
  sw      $v1,($a0)
end;
function  TADC10_AD1CON2.getCSCNA : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,10,1
end;
procedure TADC10_AD1CON2.setOFFCAL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4096
  sw $a1,8($a0)
end;
procedure TADC10_AD1CON2.clearOFFCAL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4096
  sw $a1,4($a0)
end;
procedure TADC10_AD1CON2.setOFFCAL(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,12,1
  sw      $v1,($a0)
end;
function  TADC10_AD1CON2.getOFFCAL : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,12,1
end;
procedure TADC10_AD1CON2.setVCFG(thebits : TBits_3); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,13,3
  sw      $v1,($a0)
end;
function  TADC10_AD1CON2.getVCFG : TBits_3;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,13,3
end;
procedure TADC10_AD1CON2.setSMPI0; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,8($a0)
end;
procedure TADC10_AD1CON2.clearSMPI0; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,4($a0)
end;
procedure TADC10_AD1CON2.setSMPI0(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,2,1
  sw      $v1,($a0)
end;
function  TADC10_AD1CON2.getSMPI0 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,2,1
end;
procedure TADC10_AD1CON2.setSMPI1; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,8($a0)
end;
procedure TADC10_AD1CON2.clearSMPI1; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,4($a0)
end;
procedure TADC10_AD1CON2.setSMPI1(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,3,1
  sw      $v1,($a0)
end;
function  TADC10_AD1CON2.getSMPI1 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,3,1
end;
procedure TADC10_AD1CON2.setSMPI2; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,8($a0)
end;
procedure TADC10_AD1CON2.clearSMPI2; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,4($a0)
end;
procedure TADC10_AD1CON2.setSMPI2(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,4,1
  sw      $v1,($a0)
end;
function  TADC10_AD1CON2.getSMPI2 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,4,1
end;
procedure TADC10_AD1CON2.setSMPI3; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,8($a0)
end;
procedure TADC10_AD1CON2.clearSMPI3; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,4($a0)
end;
procedure TADC10_AD1CON2.setSMPI3(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,5,1
  sw      $v1,($a0)
end;
function  TADC10_AD1CON2.getSMPI3 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,5,1
end;
procedure TADC10_AD1CON2.setVCFG0; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,8($a0)
end;
procedure TADC10_AD1CON2.clearVCFG0; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,4($a0)
end;
procedure TADC10_AD1CON2.setVCFG0(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,13,1
  sw      $v1,($a0)
end;
function  TADC10_AD1CON2.getVCFG0 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,13,1
end;
procedure TADC10_AD1CON2.setVCFG1; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16384
  sw $a1,8($a0)
end;
procedure TADC10_AD1CON2.clearVCFG1; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16384
  sw $a1,4($a0)
end;
procedure TADC10_AD1CON2.setVCFG1(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,14,1
  sw      $v1,($a0)
end;
function  TADC10_AD1CON2.getVCFG1 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,14,1
end;
procedure TADC10_AD1CON2.setVCFG2; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,8($a0)
end;
procedure TADC10_AD1CON2.clearVCFG2; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,4($a0)
end;
procedure TADC10_AD1CON2.setVCFG2(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,15,1
  sw      $v1,($a0)
end;
function  TADC10_AD1CON2.getVCFG2 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,15,1
end;
procedure TADC10_AD1CON2.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TADC10_AD1CON2.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TADC10_AD1CON3.setADCS(thebits : TBits_8); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  sll     $a1,$a1,0
  lui    $v0,65535
  ori    $v0,$v0,65280
  and   $v1,$v1,$v0
  or    $a1,$a1,$v0
  sw    $a1,($a0)
end;
function  TADC10_AD1CON3.getADCS : TBits_8;
asm
  lw      $v1,($a0)
  srl     $a1,$a1,0
  ori    $v0,$zero,255
  and    $a1,$a1,$v0
end;
procedure TADC10_AD1CON3.setSAMC(thebits : TBits_5); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,8,5
  sw      $v1,($a0)
end;
function  TADC10_AD1CON3.getSAMC : TBits_5;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,8,5
end;
procedure TADC10_AD1CON3.setADRC; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,8($a0)
end;
procedure TADC10_AD1CON3.clearADRC; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,4($a0)
end;
procedure TADC10_AD1CON3.setADRC(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,15,1
  sw      $v1,($a0)
end;
function  TADC10_AD1CON3.getADRC : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,15,1
end;
procedure TADC10_AD1CON3.setADCS0; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,8($a0)
end;
procedure TADC10_AD1CON3.clearADCS0; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,4($a0)
end;
procedure TADC10_AD1CON3.setADCS0(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,1
  sw      $v1,($a0)
end;
function  TADC10_AD1CON3.getADCS0 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,1
end;
procedure TADC10_AD1CON3.setADCS1; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,8($a0)
end;
procedure TADC10_AD1CON3.clearADCS1; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,4($a0)
end;
procedure TADC10_AD1CON3.setADCS1(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,1,1
  sw      $v1,($a0)
end;
function  TADC10_AD1CON3.getADCS1 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,1,1
end;
procedure TADC10_AD1CON3.setADCS2; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,8($a0)
end;
procedure TADC10_AD1CON3.clearADCS2; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,4($a0)
end;
procedure TADC10_AD1CON3.setADCS2(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,2,1
  sw      $v1,($a0)
end;
function  TADC10_AD1CON3.getADCS2 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,2,1
end;
procedure TADC10_AD1CON3.setADCS3; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,8($a0)
end;
procedure TADC10_AD1CON3.clearADCS3; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,4($a0)
end;
procedure TADC10_AD1CON3.setADCS3(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,3,1
  sw      $v1,($a0)
end;
function  TADC10_AD1CON3.getADCS3 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,3,1
end;
procedure TADC10_AD1CON3.setADCS4; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,8($a0)
end;
procedure TADC10_AD1CON3.clearADCS4; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,4($a0)
end;
procedure TADC10_AD1CON3.setADCS4(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,4,1
  sw      $v1,($a0)
end;
function  TADC10_AD1CON3.getADCS4 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,4,1
end;
procedure TADC10_AD1CON3.setADCS5; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,8($a0)
end;
procedure TADC10_AD1CON3.clearADCS5; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,4($a0)
end;
procedure TADC10_AD1CON3.setADCS5(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,5,1
  sw      $v1,($a0)
end;
function  TADC10_AD1CON3.getADCS5 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,5,1
end;
procedure TADC10_AD1CON3.setADCS6; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,8($a0)
end;
procedure TADC10_AD1CON3.clearADCS6; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,4($a0)
end;
procedure TADC10_AD1CON3.setADCS6(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,6,1
  sw      $v1,($a0)
end;
function  TADC10_AD1CON3.getADCS6 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,6,1
end;
procedure TADC10_AD1CON3.setADCS7; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,8($a0)
end;
procedure TADC10_AD1CON3.clearADCS7; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,4($a0)
end;
procedure TADC10_AD1CON3.setADCS7(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,7,1
  sw      $v1,($a0)
end;
function  TADC10_AD1CON3.getADCS7 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,7,1
end;
procedure TADC10_AD1CON3.setSAMC0; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,8($a0)
end;
procedure TADC10_AD1CON3.clearSAMC0; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,4($a0)
end;
procedure TADC10_AD1CON3.setSAMC0(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,8,1
  sw      $v1,($a0)
end;
function  TADC10_AD1CON3.getSAMC0 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,8,1
end;
procedure TADC10_AD1CON3.setSAMC1; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,512
  sw $a1,8($a0)
end;
procedure TADC10_AD1CON3.clearSAMC1; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,512
  sw $a1,4($a0)
end;
procedure TADC10_AD1CON3.setSAMC1(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,9,1
  sw      $v1,($a0)
end;
function  TADC10_AD1CON3.getSAMC1 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,9,1
end;
procedure TADC10_AD1CON3.setSAMC2; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1024
  sw $a1,8($a0)
end;
procedure TADC10_AD1CON3.clearSAMC2; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1024
  sw $a1,4($a0)
end;
procedure TADC10_AD1CON3.setSAMC2(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,10,1
  sw      $v1,($a0)
end;
function  TADC10_AD1CON3.getSAMC2 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,10,1
end;
procedure TADC10_AD1CON3.setSAMC3; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2048
  sw $a1,8($a0)
end;
procedure TADC10_AD1CON3.clearSAMC3; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2048
  sw $a1,4($a0)
end;
procedure TADC10_AD1CON3.setSAMC3(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,11,1
  sw      $v1,($a0)
end;
function  TADC10_AD1CON3.getSAMC3 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,11,1
end;
procedure TADC10_AD1CON3.setSAMC4; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4096
  sw $a1,8($a0)
end;
procedure TADC10_AD1CON3.clearSAMC4; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4096
  sw $a1,4($a0)
end;
procedure TADC10_AD1CON3.setSAMC4(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,12,1
  sw      $v1,($a0)
end;
function  TADC10_AD1CON3.getSAMC4 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,12,1
end;
procedure TADC10_AD1CON3.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TADC10_AD1CON3.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TADC10_AD1CHS.setCH0SA(thebits : TBits_4); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,16,4
  sw      $v1,($a0)
end;
function  TADC10_AD1CHS.getCH0SA : TBits_4;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,16,4
end;
procedure TADC10_AD1CHS.setCH0NA; assembler; nostackframe; inline;
asm
  lui     $a1,128
  sw $a1,8($a0)
end;
procedure TADC10_AD1CHS.clearCH0NA; assembler; nostackframe; inline;
asm
  lui     $a1,128
  sw $a1,4($a0)
end;
procedure TADC10_AD1CHS.setCH0NA(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,23,1
  sw      $v1,($a0)
end;
function  TADC10_AD1CHS.getCH0NA : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,23,1
end;
procedure TADC10_AD1CHS.setCH0SB(thebits : TBits_4); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,24,4
  sw      $v1,($a0)
end;
function  TADC10_AD1CHS.getCH0SB : TBits_4;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,24,4
end;
procedure TADC10_AD1CHS.setCH0NB; assembler; nostackframe; inline;
asm
  lui     $a1,32768
  sw $a1,8($a0)
end;
procedure TADC10_AD1CHS.clearCH0NB; assembler; nostackframe; inline;
asm
  lui     $a1,32768
  sw $a1,4($a0)
end;
procedure TADC10_AD1CHS.setCH0NB(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,31,1
  sw      $v1,($a0)
end;
function  TADC10_AD1CHS.getCH0NB : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,31,1
end;
procedure TADC10_AD1CHS.setCH0SA0; assembler; nostackframe; inline;
asm
  lui     $a1,1
  sw $a1,8($a0)
end;
procedure TADC10_AD1CHS.clearCH0SA0; assembler; nostackframe; inline;
asm
  lui     $a1,1
  sw $a1,4($a0)
end;
procedure TADC10_AD1CHS.setCH0SA0(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,16,1
  sw      $v1,($a0)
end;
function  TADC10_AD1CHS.getCH0SA0 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,16,1
end;
procedure TADC10_AD1CHS.setCH0SA1; assembler; nostackframe; inline;
asm
  lui     $a1,2
  sw $a1,8($a0)
end;
procedure TADC10_AD1CHS.clearCH0SA1; assembler; nostackframe; inline;
asm
  lui     $a1,2
  sw $a1,4($a0)
end;
procedure TADC10_AD1CHS.setCH0SA1(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,17,1
  sw      $v1,($a0)
end;
function  TADC10_AD1CHS.getCH0SA1 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,17,1
end;
procedure TADC10_AD1CHS.setCH0SA2; assembler; nostackframe; inline;
asm
  lui     $a1,4
  sw $a1,8($a0)
end;
procedure TADC10_AD1CHS.clearCH0SA2; assembler; nostackframe; inline;
asm
  lui     $a1,4
  sw $a1,4($a0)
end;
procedure TADC10_AD1CHS.setCH0SA2(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,18,1
  sw      $v1,($a0)
end;
function  TADC10_AD1CHS.getCH0SA2 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,18,1
end;
procedure TADC10_AD1CHS.setCH0SA3; assembler; nostackframe; inline;
asm
  lui     $a1,8
  sw $a1,8($a0)
end;
procedure TADC10_AD1CHS.clearCH0SA3; assembler; nostackframe; inline;
asm
  lui     $a1,8
  sw $a1,4($a0)
end;
procedure TADC10_AD1CHS.setCH0SA3(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,19,1
  sw      $v1,($a0)
end;
function  TADC10_AD1CHS.getCH0SA3 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,19,1
end;
procedure TADC10_AD1CHS.setCH0SB0; assembler; nostackframe; inline;
asm
  lui     $a1,256
  sw $a1,8($a0)
end;
procedure TADC10_AD1CHS.clearCH0SB0; assembler; nostackframe; inline;
asm
  lui     $a1,256
  sw $a1,4($a0)
end;
procedure TADC10_AD1CHS.setCH0SB0(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,24,1
  sw      $v1,($a0)
end;
function  TADC10_AD1CHS.getCH0SB0 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,24,1
end;
procedure TADC10_AD1CHS.setCH0SB1; assembler; nostackframe; inline;
asm
  lui     $a1,512
  sw $a1,8($a0)
end;
procedure TADC10_AD1CHS.clearCH0SB1; assembler; nostackframe; inline;
asm
  lui     $a1,512
  sw $a1,4($a0)
end;
procedure TADC10_AD1CHS.setCH0SB1(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,25,1
  sw      $v1,($a0)
end;
function  TADC10_AD1CHS.getCH0SB1 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,25,1
end;
procedure TADC10_AD1CHS.setCH0SB2; assembler; nostackframe; inline;
asm
  lui     $a1,1024
  sw $a1,8($a0)
end;
procedure TADC10_AD1CHS.clearCH0SB2; assembler; nostackframe; inline;
asm
  lui     $a1,1024
  sw $a1,4($a0)
end;
procedure TADC10_AD1CHS.setCH0SB2(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,26,1
  sw      $v1,($a0)
end;
function  TADC10_AD1CHS.getCH0SB2 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,26,1
end;
procedure TADC10_AD1CHS.setCH0SB3; assembler; nostackframe; inline;
asm
  lui     $a1,2048
  sw $a1,8($a0)
end;
procedure TADC10_AD1CHS.clearCH0SB3; assembler; nostackframe; inline;
asm
  lui     $a1,2048
  sw $a1,4($a0)
end;
procedure TADC10_AD1CHS.setCH0SB3(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,27,1
  sw      $v1,($a0)
end;
function  TADC10_AD1CHS.getCH0SB3 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,27,1
end;
procedure TADC10_AD1CHS.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TADC10_AD1CHS.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TADC10_AD1CSSL.setCSSL(thebits : TBits_16); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  sll     $a1,$a1,0
  lui    $v0,65535
  and   $v1,$v1,$v0
  or    $a1,$a1,$v0
  sw    $a1,($a0)
end;
function  TADC10_AD1CSSL.getCSSL : TBits_16;
asm
  lw      $v1,($a0)
  srl     $a1,$a1,0
  ori    $v0,$zero,65535
  and    $a1,$a1,$v0
end;
procedure TADC10_AD1CSSL.setCSSL0; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,8($a0)
end;
procedure TADC10_AD1CSSL.clearCSSL0; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,4($a0)
end;
procedure TADC10_AD1CSSL.setCSSL0(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,1
  sw      $v1,($a0)
end;
function  TADC10_AD1CSSL.getCSSL0 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,1
end;
procedure TADC10_AD1CSSL.setCSSL1; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,8($a0)
end;
procedure TADC10_AD1CSSL.clearCSSL1; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,4($a0)
end;
procedure TADC10_AD1CSSL.setCSSL1(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,1,1
  sw      $v1,($a0)
end;
function  TADC10_AD1CSSL.getCSSL1 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,1,1
end;
procedure TADC10_AD1CSSL.setCSSL2; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,8($a0)
end;
procedure TADC10_AD1CSSL.clearCSSL2; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,4($a0)
end;
procedure TADC10_AD1CSSL.setCSSL2(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,2,1
  sw      $v1,($a0)
end;
function  TADC10_AD1CSSL.getCSSL2 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,2,1
end;
procedure TADC10_AD1CSSL.setCSSL3; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,8($a0)
end;
procedure TADC10_AD1CSSL.clearCSSL3; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,4($a0)
end;
procedure TADC10_AD1CSSL.setCSSL3(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,3,1
  sw      $v1,($a0)
end;
function  TADC10_AD1CSSL.getCSSL3 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,3,1
end;
procedure TADC10_AD1CSSL.setCSSL4; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,8($a0)
end;
procedure TADC10_AD1CSSL.clearCSSL4; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,4($a0)
end;
procedure TADC10_AD1CSSL.setCSSL4(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,4,1
  sw      $v1,($a0)
end;
function  TADC10_AD1CSSL.getCSSL4 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,4,1
end;
procedure TADC10_AD1CSSL.setCSSL5; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,8($a0)
end;
procedure TADC10_AD1CSSL.clearCSSL5; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,4($a0)
end;
procedure TADC10_AD1CSSL.setCSSL5(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,5,1
  sw      $v1,($a0)
end;
function  TADC10_AD1CSSL.getCSSL5 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,5,1
end;
procedure TADC10_AD1CSSL.setCSSL6; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,8($a0)
end;
procedure TADC10_AD1CSSL.clearCSSL6; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,4($a0)
end;
procedure TADC10_AD1CSSL.setCSSL6(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,6,1
  sw      $v1,($a0)
end;
function  TADC10_AD1CSSL.getCSSL6 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,6,1
end;
procedure TADC10_AD1CSSL.setCSSL7; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,8($a0)
end;
procedure TADC10_AD1CSSL.clearCSSL7; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,4($a0)
end;
procedure TADC10_AD1CSSL.setCSSL7(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,7,1
  sw      $v1,($a0)
end;
function  TADC10_AD1CSSL.getCSSL7 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,7,1
end;
procedure TADC10_AD1CSSL.setCSSL8; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,8($a0)
end;
procedure TADC10_AD1CSSL.clearCSSL8; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,4($a0)
end;
procedure TADC10_AD1CSSL.setCSSL8(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,8,1
  sw      $v1,($a0)
end;
function  TADC10_AD1CSSL.getCSSL8 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,8,1
end;
procedure TADC10_AD1CSSL.setCSSL9; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,512
  sw $a1,8($a0)
end;
procedure TADC10_AD1CSSL.clearCSSL9; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,512
  sw $a1,4($a0)
end;
procedure TADC10_AD1CSSL.setCSSL9(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,9,1
  sw      $v1,($a0)
end;
function  TADC10_AD1CSSL.getCSSL9 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,9,1
end;
procedure TADC10_AD1CSSL.setCSSL10; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1024
  sw $a1,8($a0)
end;
procedure TADC10_AD1CSSL.clearCSSL10; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1024
  sw $a1,4($a0)
end;
procedure TADC10_AD1CSSL.setCSSL10(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,10,1
  sw      $v1,($a0)
end;
function  TADC10_AD1CSSL.getCSSL10 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,10,1
end;
procedure TADC10_AD1CSSL.setCSSL11; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2048
  sw $a1,8($a0)
end;
procedure TADC10_AD1CSSL.clearCSSL11; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2048
  sw $a1,4($a0)
end;
procedure TADC10_AD1CSSL.setCSSL11(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,11,1
  sw      $v1,($a0)
end;
function  TADC10_AD1CSSL.getCSSL11 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,11,1
end;
procedure TADC10_AD1CSSL.setCSSL12; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4096
  sw $a1,8($a0)
end;
procedure TADC10_AD1CSSL.clearCSSL12; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4096
  sw $a1,4($a0)
end;
procedure TADC10_AD1CSSL.setCSSL12(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,12,1
  sw      $v1,($a0)
end;
function  TADC10_AD1CSSL.getCSSL12 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,12,1
end;
procedure TADC10_AD1CSSL.setCSSL13; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,8($a0)
end;
procedure TADC10_AD1CSSL.clearCSSL13; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,4($a0)
end;
procedure TADC10_AD1CSSL.setCSSL13(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,13,1
  sw      $v1,($a0)
end;
function  TADC10_AD1CSSL.getCSSL13 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,13,1
end;
procedure TADC10_AD1CSSL.setCSSL14; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16384
  sw $a1,8($a0)
end;
procedure TADC10_AD1CSSL.clearCSSL14; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16384
  sw $a1,4($a0)
end;
procedure TADC10_AD1CSSL.setCSSL14(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,14,1
  sw      $v1,($a0)
end;
function  TADC10_AD1CSSL.getCSSL14 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,14,1
end;
procedure TADC10_AD1CSSL.setCSSL15; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,8($a0)
end;
procedure TADC10_AD1CSSL.clearCSSL15; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,4($a0)
end;
procedure TADC10_AD1CSSL.setCSSL15(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,15,1
  sw      $v1,($a0)
end;
function  TADC10_AD1CSSL.getCSSL15 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,15,1
end;
procedure TADC10_AD1CSSL.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TADC10_AD1CSSL.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TADC10_AD1PCFG.setPCFG(thebits : TBits_16); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  sll     $a1,$a1,0
  lui    $v0,65535
  and   $v1,$v1,$v0
  or    $a1,$a1,$v0
  sw    $a1,($a0)
end;
function  TADC10_AD1PCFG.getPCFG : TBits_16;
asm
  lw      $v1,($a0)
  srl     $a1,$a1,0
  ori    $v0,$zero,65535
  and    $a1,$a1,$v0
end;
procedure TADC10_AD1PCFG.setPCFG0; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,8($a0)
end;
procedure TADC10_AD1PCFG.clearPCFG0; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,4($a0)
end;
procedure TADC10_AD1PCFG.setPCFG0(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,1
  sw      $v1,($a0)
end;
function  TADC10_AD1PCFG.getPCFG0 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,1
end;
procedure TADC10_AD1PCFG.setPCFG1; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,8($a0)
end;
procedure TADC10_AD1PCFG.clearPCFG1; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,4($a0)
end;
procedure TADC10_AD1PCFG.setPCFG1(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,1,1
  sw      $v1,($a0)
end;
function  TADC10_AD1PCFG.getPCFG1 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,1,1
end;
procedure TADC10_AD1PCFG.setPCFG2; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,8($a0)
end;
procedure TADC10_AD1PCFG.clearPCFG2; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,4($a0)
end;
procedure TADC10_AD1PCFG.setPCFG2(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,2,1
  sw      $v1,($a0)
end;
function  TADC10_AD1PCFG.getPCFG2 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,2,1
end;
procedure TADC10_AD1PCFG.setPCFG3; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,8($a0)
end;
procedure TADC10_AD1PCFG.clearPCFG3; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,4($a0)
end;
procedure TADC10_AD1PCFG.setPCFG3(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,3,1
  sw      $v1,($a0)
end;
function  TADC10_AD1PCFG.getPCFG3 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,3,1
end;
procedure TADC10_AD1PCFG.setPCFG4; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,8($a0)
end;
procedure TADC10_AD1PCFG.clearPCFG4; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,4($a0)
end;
procedure TADC10_AD1PCFG.setPCFG4(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,4,1
  sw      $v1,($a0)
end;
function  TADC10_AD1PCFG.getPCFG4 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,4,1
end;
procedure TADC10_AD1PCFG.setPCFG5; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,8($a0)
end;
procedure TADC10_AD1PCFG.clearPCFG5; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,4($a0)
end;
procedure TADC10_AD1PCFG.setPCFG5(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,5,1
  sw      $v1,($a0)
end;
function  TADC10_AD1PCFG.getPCFG5 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,5,1
end;
procedure TADC10_AD1PCFG.setPCFG6; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,8($a0)
end;
procedure TADC10_AD1PCFG.clearPCFG6; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,4($a0)
end;
procedure TADC10_AD1PCFG.setPCFG6(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,6,1
  sw      $v1,($a0)
end;
function  TADC10_AD1PCFG.getPCFG6 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,6,1
end;
procedure TADC10_AD1PCFG.setPCFG7; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,8($a0)
end;
procedure TADC10_AD1PCFG.clearPCFG7; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,4($a0)
end;
procedure TADC10_AD1PCFG.setPCFG7(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,7,1
  sw      $v1,($a0)
end;
function  TADC10_AD1PCFG.getPCFG7 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,7,1
end;
procedure TADC10_AD1PCFG.setPCFG8; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,8($a0)
end;
procedure TADC10_AD1PCFG.clearPCFG8; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,4($a0)
end;
procedure TADC10_AD1PCFG.setPCFG8(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,8,1
  sw      $v1,($a0)
end;
function  TADC10_AD1PCFG.getPCFG8 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,8,1
end;
procedure TADC10_AD1PCFG.setPCFG9; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,512
  sw $a1,8($a0)
end;
procedure TADC10_AD1PCFG.clearPCFG9; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,512
  sw $a1,4($a0)
end;
procedure TADC10_AD1PCFG.setPCFG9(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,9,1
  sw      $v1,($a0)
end;
function  TADC10_AD1PCFG.getPCFG9 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,9,1
end;
procedure TADC10_AD1PCFG.setPCFG10; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1024
  sw $a1,8($a0)
end;
procedure TADC10_AD1PCFG.clearPCFG10; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1024
  sw $a1,4($a0)
end;
procedure TADC10_AD1PCFG.setPCFG10(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,10,1
  sw      $v1,($a0)
end;
function  TADC10_AD1PCFG.getPCFG10 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,10,1
end;
procedure TADC10_AD1PCFG.setPCFG11; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2048
  sw $a1,8($a0)
end;
procedure TADC10_AD1PCFG.clearPCFG11; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2048
  sw $a1,4($a0)
end;
procedure TADC10_AD1PCFG.setPCFG11(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,11,1
  sw      $v1,($a0)
end;
function  TADC10_AD1PCFG.getPCFG11 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,11,1
end;
procedure TADC10_AD1PCFG.setPCFG12; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4096
  sw $a1,8($a0)
end;
procedure TADC10_AD1PCFG.clearPCFG12; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4096
  sw $a1,4($a0)
end;
procedure TADC10_AD1PCFG.setPCFG12(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,12,1
  sw      $v1,($a0)
end;
function  TADC10_AD1PCFG.getPCFG12 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,12,1
end;
procedure TADC10_AD1PCFG.setPCFG13; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,8($a0)
end;
procedure TADC10_AD1PCFG.clearPCFG13; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,4($a0)
end;
procedure TADC10_AD1PCFG.setPCFG13(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,13,1
  sw      $v1,($a0)
end;
function  TADC10_AD1PCFG.getPCFG13 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,13,1
end;
procedure TADC10_AD1PCFG.setPCFG14; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16384
  sw $a1,8($a0)
end;
procedure TADC10_AD1PCFG.clearPCFG14; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16384
  sw $a1,4($a0)
end;
procedure TADC10_AD1PCFG.setPCFG14(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,14,1
  sw      $v1,($a0)
end;
function  TADC10_AD1PCFG.getPCFG14 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,14,1
end;
procedure TADC10_AD1PCFG.setPCFG15; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,8($a0)
end;
procedure TADC10_AD1PCFG.clearPCFG15; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,4($a0)
end;
procedure TADC10_AD1PCFG.setPCFG15(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,15,1
  sw      $v1,($a0)
end;
function  TADC10_AD1PCFG.getPCFG15 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,15,1
end;
procedure TADC10_AD1PCFG.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TADC10_AD1PCFG.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TCVR_CVRCON.setCVR(thebits : TBits_4); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,4
  sw      $v1,($a0)
end;
function  TCVR_CVRCON.getCVR : TBits_4;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,4
end;
procedure TCVR_CVRCON.setCVRSS; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,8($a0)
end;
procedure TCVR_CVRCON.clearCVRSS; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,4($a0)
end;
procedure TCVR_CVRCON.setCVRSS(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,4,1
  sw      $v1,($a0)
end;
function  TCVR_CVRCON.getCVRSS : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,4,1
end;
procedure TCVR_CVRCON.setCVRR; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,8($a0)
end;
procedure TCVR_CVRCON.clearCVRR; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,4($a0)
end;
procedure TCVR_CVRCON.setCVRR(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,5,1
  sw      $v1,($a0)
end;
function  TCVR_CVRCON.getCVRR : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,5,1
end;
procedure TCVR_CVRCON.setCVROE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,8($a0)
end;
procedure TCVR_CVRCON.clearCVROE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,4($a0)
end;
procedure TCVR_CVRCON.setCVROE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,6,1
  sw      $v1,($a0)
end;
function  TCVR_CVRCON.getCVROE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,6,1
end;
procedure TCVR_CVRCON.setON; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,8($a0)
end;
procedure TCVR_CVRCON.clearON; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,4($a0)
end;
procedure TCVR_CVRCON.setON(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,15,1
  sw      $v1,($a0)
end;
function  TCVR_CVRCON.getON : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,15,1
end;
procedure TCVR_CVRCON.setCVR0; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,8($a0)
end;
procedure TCVR_CVRCON.clearCVR0; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,4($a0)
end;
procedure TCVR_CVRCON.setCVR0(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,1
  sw      $v1,($a0)
end;
function  TCVR_CVRCON.getCVR0 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,1
end;
procedure TCVR_CVRCON.setCVR1; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,8($a0)
end;
procedure TCVR_CVRCON.clearCVR1; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,4($a0)
end;
procedure TCVR_CVRCON.setCVR1(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,1,1
  sw      $v1,($a0)
end;
function  TCVR_CVRCON.getCVR1 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,1,1
end;
procedure TCVR_CVRCON.setCVR2; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,8($a0)
end;
procedure TCVR_CVRCON.clearCVR2; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,4($a0)
end;
procedure TCVR_CVRCON.setCVR2(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,2,1
  sw      $v1,($a0)
end;
function  TCVR_CVRCON.getCVR2 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,2,1
end;
procedure TCVR_CVRCON.setCVR3; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,8($a0)
end;
procedure TCVR_CVRCON.clearCVR3; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,4($a0)
end;
procedure TCVR_CVRCON.setCVR3(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,3,1
  sw      $v1,($a0)
end;
function  TCVR_CVRCON.getCVR3 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,3,1
end;
procedure TCVR_CVRCON.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TCVR_CVRCON.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TCMP_CM1CON.setCCH(thebits : TBits_2); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,2
  sw      $v1,($a0)
end;
function  TCMP_CM1CON.getCCH : TBits_2;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,2
end;
procedure TCMP_CM1CON.setCREF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,8($a0)
end;
procedure TCMP_CM1CON.clearCREF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,4($a0)
end;
procedure TCMP_CM1CON.setCREF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,4,1
  sw      $v1,($a0)
end;
function  TCMP_CM1CON.getCREF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,4,1
end;
procedure TCMP_CM1CON.setEVPOL(thebits : TBits_2); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,6,2
  sw      $v1,($a0)
end;
function  TCMP_CM1CON.getEVPOL : TBits_2;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,6,2
end;
procedure TCMP_CM1CON.setCOUT; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,8($a0)
end;
procedure TCMP_CM1CON.clearCOUT; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,4($a0)
end;
procedure TCMP_CM1CON.setCOUT(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,8,1
  sw      $v1,($a0)
end;
function  TCMP_CM1CON.getCOUT : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,8,1
end;
procedure TCMP_CM1CON.setCPOL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,8($a0)
end;
procedure TCMP_CM1CON.clearCPOL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,4($a0)
end;
procedure TCMP_CM1CON.setCPOL(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,13,1
  sw      $v1,($a0)
end;
function  TCMP_CM1CON.getCPOL : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,13,1
end;
procedure TCMP_CM1CON.setCOE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16384
  sw $a1,8($a0)
end;
procedure TCMP_CM1CON.clearCOE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16384
  sw $a1,4($a0)
end;
procedure TCMP_CM1CON.setCOE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,14,1
  sw      $v1,($a0)
end;
function  TCMP_CM1CON.getCOE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,14,1
end;
procedure TCMP_CM1CON.setON; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,8($a0)
end;
procedure TCMP_CM1CON.clearON; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,4($a0)
end;
procedure TCMP_CM1CON.setON(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,15,1
  sw      $v1,($a0)
end;
function  TCMP_CM1CON.getON : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,15,1
end;
procedure TCMP_CM1CON.setCCH0; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,8($a0)
end;
procedure TCMP_CM1CON.clearCCH0; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,4($a0)
end;
procedure TCMP_CM1CON.setCCH0(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,1
  sw      $v1,($a0)
end;
function  TCMP_CM1CON.getCCH0 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,1
end;
procedure TCMP_CM1CON.setCCH1; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,8($a0)
end;
procedure TCMP_CM1CON.clearCCH1; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,4($a0)
end;
procedure TCMP_CM1CON.setCCH1(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,1,1
  sw      $v1,($a0)
end;
function  TCMP_CM1CON.getCCH1 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,1,1
end;
procedure TCMP_CM1CON.setEVPOL0; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,8($a0)
end;
procedure TCMP_CM1CON.clearEVPOL0; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,4($a0)
end;
procedure TCMP_CM1CON.setEVPOL0(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,6,1
  sw      $v1,($a0)
end;
function  TCMP_CM1CON.getEVPOL0 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,6,1
end;
procedure TCMP_CM1CON.setEVPOL1; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,8($a0)
end;
procedure TCMP_CM1CON.clearEVPOL1; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,4($a0)
end;
procedure TCMP_CM1CON.setEVPOL1(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,7,1
  sw      $v1,($a0)
end;
function  TCMP_CM1CON.getEVPOL1 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,7,1
end;
procedure TCMP_CM1CON.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TCMP_CM1CON.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TCMP_CM2CON.setCCH(thebits : TBits_2); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,2
  sw      $v1,($a0)
end;
function  TCMP_CM2CON.getCCH : TBits_2;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,2
end;
procedure TCMP_CM2CON.setCREF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,8($a0)
end;
procedure TCMP_CM2CON.clearCREF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,4($a0)
end;
procedure TCMP_CM2CON.setCREF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,4,1
  sw      $v1,($a0)
end;
function  TCMP_CM2CON.getCREF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,4,1
end;
procedure TCMP_CM2CON.setEVPOL(thebits : TBits_2); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,6,2
  sw      $v1,($a0)
end;
function  TCMP_CM2CON.getEVPOL : TBits_2;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,6,2
end;
procedure TCMP_CM2CON.setCOUT; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,8($a0)
end;
procedure TCMP_CM2CON.clearCOUT; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,4($a0)
end;
procedure TCMP_CM2CON.setCOUT(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,8,1
  sw      $v1,($a0)
end;
function  TCMP_CM2CON.getCOUT : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,8,1
end;
procedure TCMP_CM2CON.setCPOL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,8($a0)
end;
procedure TCMP_CM2CON.clearCPOL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,4($a0)
end;
procedure TCMP_CM2CON.setCPOL(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,13,1
  sw      $v1,($a0)
end;
function  TCMP_CM2CON.getCPOL : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,13,1
end;
procedure TCMP_CM2CON.setCOE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16384
  sw $a1,8($a0)
end;
procedure TCMP_CM2CON.clearCOE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16384
  sw $a1,4($a0)
end;
procedure TCMP_CM2CON.setCOE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,14,1
  sw      $v1,($a0)
end;
function  TCMP_CM2CON.getCOE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,14,1
end;
procedure TCMP_CM2CON.setON; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,8($a0)
end;
procedure TCMP_CM2CON.clearON; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,4($a0)
end;
procedure TCMP_CM2CON.setON(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,15,1
  sw      $v1,($a0)
end;
function  TCMP_CM2CON.getON : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,15,1
end;
procedure TCMP_CM2CON.setCCH0; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,8($a0)
end;
procedure TCMP_CM2CON.clearCCH0; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,4($a0)
end;
procedure TCMP_CM2CON.setCCH0(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,1
  sw      $v1,($a0)
end;
function  TCMP_CM2CON.getCCH0 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,1
end;
procedure TCMP_CM2CON.setCCH1; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,8($a0)
end;
procedure TCMP_CM2CON.clearCCH1; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,4($a0)
end;
procedure TCMP_CM2CON.setCCH1(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,1,1
  sw      $v1,($a0)
end;
function  TCMP_CM2CON.getCCH1 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,1,1
end;
procedure TCMP_CM2CON.setEVPOL0; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,8($a0)
end;
procedure TCMP_CM2CON.clearEVPOL0; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,4($a0)
end;
procedure TCMP_CM2CON.setEVPOL0(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,6,1
  sw      $v1,($a0)
end;
function  TCMP_CM2CON.getEVPOL0 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,6,1
end;
procedure TCMP_CM2CON.setEVPOL1; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,8($a0)
end;
procedure TCMP_CM2CON.clearEVPOL1; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,4($a0)
end;
procedure TCMP_CM2CON.setEVPOL1(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,7,1
  sw      $v1,($a0)
end;
function  TCMP_CM2CON.getEVPOL1 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,7,1
end;
procedure TCMP_CM2CON.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TCMP_CM2CON.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TCMP_CMSTAT.setC1OUT; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,8($a0)
end;
procedure TCMP_CMSTAT.clearC1OUT; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,4($a0)
end;
procedure TCMP_CMSTAT.setC1OUT(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,1
  sw      $v1,($a0)
end;
function  TCMP_CMSTAT.getC1OUT : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,1
end;
procedure TCMP_CMSTAT.setC2OUT; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,8($a0)
end;
procedure TCMP_CMSTAT.clearC2OUT; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,4($a0)
end;
procedure TCMP_CMSTAT.setC2OUT(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,1,1
  sw      $v1,($a0)
end;
function  TCMP_CMSTAT.getC2OUT : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,1,1
end;
procedure TCMP_CMSTAT.setSIDL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,8($a0)
end;
procedure TCMP_CMSTAT.clearSIDL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,4($a0)
end;
procedure TCMP_CMSTAT.setSIDL(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,13,1
  sw      $v1,($a0)
end;
function  TCMP_CMSTAT.getSIDL : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,13,1
end;
procedure TCMP_CMSTAT.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TCMP_CMSTAT.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TOSC_OSCCON.setOSWEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,8($a0)
end;
procedure TOSC_OSCCON.clearOSWEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,4($a0)
end;
procedure TOSC_OSCCON.setOSWEN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,1
  sw      $v1,($a0)
end;
function  TOSC_OSCCON.getOSWEN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,1
end;
procedure TOSC_OSCCON.setSOSCEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,8($a0)
end;
procedure TOSC_OSCCON.clearSOSCEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,4($a0)
end;
procedure TOSC_OSCCON.setSOSCEN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,1,1
  sw      $v1,($a0)
end;
function  TOSC_OSCCON.getSOSCEN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,1,1
end;
procedure TOSC_OSCCON.setUFRCEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,8($a0)
end;
procedure TOSC_OSCCON.clearUFRCEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,4($a0)
end;
procedure TOSC_OSCCON.setUFRCEN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,2,1
  sw      $v1,($a0)
end;
function  TOSC_OSCCON.getUFRCEN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,2,1
end;
procedure TOSC_OSCCON.setCF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,8($a0)
end;
procedure TOSC_OSCCON.clearCF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,4($a0)
end;
procedure TOSC_OSCCON.setCF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,3,1
  sw      $v1,($a0)
end;
function  TOSC_OSCCON.getCF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,3,1
end;
procedure TOSC_OSCCON.setSLPEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,8($a0)
end;
procedure TOSC_OSCCON.clearSLPEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,4($a0)
end;
procedure TOSC_OSCCON.setSLPEN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,4,1
  sw      $v1,($a0)
end;
function  TOSC_OSCCON.getSLPEN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,4,1
end;
procedure TOSC_OSCCON.setSLOCK; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,8($a0)
end;
procedure TOSC_OSCCON.clearSLOCK; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,4($a0)
end;
procedure TOSC_OSCCON.setSLOCK(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,5,1
  sw      $v1,($a0)
end;
function  TOSC_OSCCON.getSLOCK : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,5,1
end;
procedure TOSC_OSCCON.setULOCK; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,8($a0)
end;
procedure TOSC_OSCCON.clearULOCK; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,4($a0)
end;
procedure TOSC_OSCCON.setULOCK(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,6,1
  sw      $v1,($a0)
end;
function  TOSC_OSCCON.getULOCK : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,6,1
end;
procedure TOSC_OSCCON.setCLKLOCK; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,8($a0)
end;
procedure TOSC_OSCCON.clearCLKLOCK; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,4($a0)
end;
procedure TOSC_OSCCON.setCLKLOCK(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,7,1
  sw      $v1,($a0)
end;
function  TOSC_OSCCON.getCLKLOCK : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,7,1
end;
procedure TOSC_OSCCON.setNOSC(thebits : TBits_3); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,8,3
  sw      $v1,($a0)
end;
function  TOSC_OSCCON.getNOSC : TBits_3;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,8,3
end;
procedure TOSC_OSCCON.setCOSC(thebits : TBits_3); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,12,3
  sw      $v1,($a0)
end;
function  TOSC_OSCCON.getCOSC : TBits_3;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,12,3
end;
procedure TOSC_OSCCON.setPLLMULT(thebits : TBits_3); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,16,3
  sw      $v1,($a0)
end;
function  TOSC_OSCCON.getPLLMULT : TBits_3;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,16,3
end;
procedure TOSC_OSCCON.setPBDIV(thebits : TBits_2); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,19,2
  sw      $v1,($a0)
end;
function  TOSC_OSCCON.getPBDIV : TBits_2;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,19,2
end;
procedure TOSC_OSCCON.setSOSCRDY; assembler; nostackframe; inline;
asm
  lui     $a1,64
  sw $a1,8($a0)
end;
procedure TOSC_OSCCON.clearSOSCRDY; assembler; nostackframe; inline;
asm
  lui     $a1,64
  sw $a1,4($a0)
end;
procedure TOSC_OSCCON.setSOSCRDY(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,22,1
  sw      $v1,($a0)
end;
function  TOSC_OSCCON.getSOSCRDY : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,22,1
end;
procedure TOSC_OSCCON.setFRCDIV(thebits : TBits_3); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,24,3
  sw      $v1,($a0)
end;
function  TOSC_OSCCON.getFRCDIV : TBits_3;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,24,3
end;
procedure TOSC_OSCCON.setPLLODIV(thebits : TBits_3); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,27,3
  sw      $v1,($a0)
end;
function  TOSC_OSCCON.getPLLODIV : TBits_3;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,27,3
end;
procedure TOSC_OSCCON.setNOSC0; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,8($a0)
end;
procedure TOSC_OSCCON.clearNOSC0; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,4($a0)
end;
procedure TOSC_OSCCON.setNOSC0(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,8,1
  sw      $v1,($a0)
end;
function  TOSC_OSCCON.getNOSC0 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,8,1
end;
procedure TOSC_OSCCON.setNOSC1; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,512
  sw $a1,8($a0)
end;
procedure TOSC_OSCCON.clearNOSC1; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,512
  sw $a1,4($a0)
end;
procedure TOSC_OSCCON.setNOSC1(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,9,1
  sw      $v1,($a0)
end;
function  TOSC_OSCCON.getNOSC1 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,9,1
end;
procedure TOSC_OSCCON.setNOSC2; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1024
  sw $a1,8($a0)
end;
procedure TOSC_OSCCON.clearNOSC2; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1024
  sw $a1,4($a0)
end;
procedure TOSC_OSCCON.setNOSC2(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,10,1
  sw      $v1,($a0)
end;
function  TOSC_OSCCON.getNOSC2 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,10,1
end;
procedure TOSC_OSCCON.setCOSC0; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4096
  sw $a1,8($a0)
end;
procedure TOSC_OSCCON.clearCOSC0; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4096
  sw $a1,4($a0)
end;
procedure TOSC_OSCCON.setCOSC0(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,12,1
  sw      $v1,($a0)
end;
function  TOSC_OSCCON.getCOSC0 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,12,1
end;
procedure TOSC_OSCCON.setCOSC1; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,8($a0)
end;
procedure TOSC_OSCCON.clearCOSC1; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,4($a0)
end;
procedure TOSC_OSCCON.setCOSC1(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,13,1
  sw      $v1,($a0)
end;
function  TOSC_OSCCON.getCOSC1 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,13,1
end;
procedure TOSC_OSCCON.setCOSC2; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16384
  sw $a1,8($a0)
end;
procedure TOSC_OSCCON.clearCOSC2; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16384
  sw $a1,4($a0)
end;
procedure TOSC_OSCCON.setCOSC2(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,14,1
  sw      $v1,($a0)
end;
function  TOSC_OSCCON.getCOSC2 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,14,1
end;
procedure TOSC_OSCCON.setPLLMULT0; assembler; nostackframe; inline;
asm
  lui     $a1,1
  sw $a1,8($a0)
end;
procedure TOSC_OSCCON.clearPLLMULT0; assembler; nostackframe; inline;
asm
  lui     $a1,1
  sw $a1,4($a0)
end;
procedure TOSC_OSCCON.setPLLMULT0(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,16,1
  sw      $v1,($a0)
end;
function  TOSC_OSCCON.getPLLMULT0 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,16,1
end;
procedure TOSC_OSCCON.setPLLMULT1; assembler; nostackframe; inline;
asm
  lui     $a1,2
  sw $a1,8($a0)
end;
procedure TOSC_OSCCON.clearPLLMULT1; assembler; nostackframe; inline;
asm
  lui     $a1,2
  sw $a1,4($a0)
end;
procedure TOSC_OSCCON.setPLLMULT1(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,17,1
  sw      $v1,($a0)
end;
function  TOSC_OSCCON.getPLLMULT1 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,17,1
end;
procedure TOSC_OSCCON.setPLLMULT2; assembler; nostackframe; inline;
asm
  lui     $a1,4
  sw $a1,8($a0)
end;
procedure TOSC_OSCCON.clearPLLMULT2; assembler; nostackframe; inline;
asm
  lui     $a1,4
  sw $a1,4($a0)
end;
procedure TOSC_OSCCON.setPLLMULT2(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,18,1
  sw      $v1,($a0)
end;
function  TOSC_OSCCON.getPLLMULT2 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,18,1
end;
procedure TOSC_OSCCON.setPBDIV0; assembler; nostackframe; inline;
asm
  lui     $a1,8
  sw $a1,8($a0)
end;
procedure TOSC_OSCCON.clearPBDIV0; assembler; nostackframe; inline;
asm
  lui     $a1,8
  sw $a1,4($a0)
end;
procedure TOSC_OSCCON.setPBDIV0(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,19,1
  sw      $v1,($a0)
end;
function  TOSC_OSCCON.getPBDIV0 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,19,1
end;
procedure TOSC_OSCCON.setPBDIV1; assembler; nostackframe; inline;
asm
  lui     $a1,16
  sw $a1,8($a0)
end;
procedure TOSC_OSCCON.clearPBDIV1; assembler; nostackframe; inline;
asm
  lui     $a1,16
  sw $a1,4($a0)
end;
procedure TOSC_OSCCON.setPBDIV1(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,20,1
  sw      $v1,($a0)
end;
function  TOSC_OSCCON.getPBDIV1 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,20,1
end;
procedure TOSC_OSCCON.setFRCDIV0; assembler; nostackframe; inline;
asm
  lui     $a1,256
  sw $a1,8($a0)
end;
procedure TOSC_OSCCON.clearFRCDIV0; assembler; nostackframe; inline;
asm
  lui     $a1,256
  sw $a1,4($a0)
end;
procedure TOSC_OSCCON.setFRCDIV0(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,24,1
  sw      $v1,($a0)
end;
function  TOSC_OSCCON.getFRCDIV0 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,24,1
end;
procedure TOSC_OSCCON.setFRCDIV1; assembler; nostackframe; inline;
asm
  lui     $a1,512
  sw $a1,8($a0)
end;
procedure TOSC_OSCCON.clearFRCDIV1; assembler; nostackframe; inline;
asm
  lui     $a1,512
  sw $a1,4($a0)
end;
procedure TOSC_OSCCON.setFRCDIV1(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,25,1
  sw      $v1,($a0)
end;
function  TOSC_OSCCON.getFRCDIV1 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,25,1
end;
procedure TOSC_OSCCON.setFRCDIV2; assembler; nostackframe; inline;
asm
  lui     $a1,1024
  sw $a1,8($a0)
end;
procedure TOSC_OSCCON.clearFRCDIV2; assembler; nostackframe; inline;
asm
  lui     $a1,1024
  sw $a1,4($a0)
end;
procedure TOSC_OSCCON.setFRCDIV2(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,26,1
  sw      $v1,($a0)
end;
function  TOSC_OSCCON.getFRCDIV2 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,26,1
end;
procedure TOSC_OSCCON.setPLLODIV0; assembler; nostackframe; inline;
asm
  lui     $a1,2048
  sw $a1,8($a0)
end;
procedure TOSC_OSCCON.clearPLLODIV0; assembler; nostackframe; inline;
asm
  lui     $a1,2048
  sw $a1,4($a0)
end;
procedure TOSC_OSCCON.setPLLODIV0(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,27,1
  sw      $v1,($a0)
end;
function  TOSC_OSCCON.getPLLODIV0 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,27,1
end;
procedure TOSC_OSCCON.setPLLODIV1; assembler; nostackframe; inline;
asm
  lui     $a1,4096
  sw $a1,8($a0)
end;
procedure TOSC_OSCCON.clearPLLODIV1; assembler; nostackframe; inline;
asm
  lui     $a1,4096
  sw $a1,4($a0)
end;
procedure TOSC_OSCCON.setPLLODIV1(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,28,1
  sw      $v1,($a0)
end;
function  TOSC_OSCCON.getPLLODIV1 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,28,1
end;
procedure TOSC_OSCCON.setPLLODIV2; assembler; nostackframe; inline;
asm
  lui     $a1,8192
  sw $a1,8($a0)
end;
procedure TOSC_OSCCON.clearPLLODIV2; assembler; nostackframe; inline;
asm
  lui     $a1,8192
  sw $a1,4($a0)
end;
procedure TOSC_OSCCON.setPLLODIV2(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,29,1
  sw      $v1,($a0)
end;
function  TOSC_OSCCON.getPLLODIV2 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,29,1
end;
procedure TOSC_OSCCON.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TOSC_OSCCON.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TOSC_OSCTUN.setTUN(thebits : TBits_6); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  sll     $a1,$a1,0
  lui    $v0,65535
  ori    $v0,$v0,65472
  and   $v1,$v1,$v0
  or    $a1,$a1,$v0
  sw    $a1,($a0)
end;
function  TOSC_OSCTUN.getTUN : TBits_6;
asm
  lw      $v1,($a0)
  srl     $a1,$a1,0
  ori    $v0,$zero,63
  and    $a1,$a1,$v0
end;
procedure TOSC_OSCTUN.setTUN0; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,8($a0)
end;
procedure TOSC_OSCTUN.clearTUN0; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,4($a0)
end;
procedure TOSC_OSCTUN.setTUN0(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,1
  sw      $v1,($a0)
end;
function  TOSC_OSCTUN.getTUN0 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,1
end;
procedure TOSC_OSCTUN.setTUN1; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,8($a0)
end;
procedure TOSC_OSCTUN.clearTUN1; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,4($a0)
end;
procedure TOSC_OSCTUN.setTUN1(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,1,1
  sw      $v1,($a0)
end;
function  TOSC_OSCTUN.getTUN1 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,1,1
end;
procedure TOSC_OSCTUN.setTUN2; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,8($a0)
end;
procedure TOSC_OSCTUN.clearTUN2; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,4($a0)
end;
procedure TOSC_OSCTUN.setTUN2(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,2,1
  sw      $v1,($a0)
end;
function  TOSC_OSCTUN.getTUN2 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,2,1
end;
procedure TOSC_OSCTUN.setTUN3; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,8($a0)
end;
procedure TOSC_OSCTUN.clearTUN3; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,4($a0)
end;
procedure TOSC_OSCTUN.setTUN3(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,3,1
  sw      $v1,($a0)
end;
function  TOSC_OSCTUN.getTUN3 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,3,1
end;
procedure TOSC_OSCTUN.setTUN4; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,8($a0)
end;
procedure TOSC_OSCTUN.clearTUN4; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,4($a0)
end;
procedure TOSC_OSCTUN.setTUN4(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,4,1
  sw      $v1,($a0)
end;
function  TOSC_OSCTUN.getTUN4 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,4,1
end;
procedure TOSC_OSCTUN.setTUN5; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,8($a0)
end;
procedure TOSC_OSCTUN.clearTUN5; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,4($a0)
end;
procedure TOSC_OSCTUN.setTUN5(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,5,1
  sw      $v1,($a0)
end;
function  TOSC_OSCTUN.getTUN5 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,5,1
end;
procedure TOSC_OSCTUN.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TOSC_OSCTUN.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TNVM_NVMCON.setNVMOP(thebits : TBits_4); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,4
  sw      $v1,($a0)
end;
function  TNVM_NVMCON.getNVMOP : TBits_4;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,4
end;
procedure TNVM_NVMCON.setLVDSTAT; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2048
  sw $a1,8($a0)
end;
procedure TNVM_NVMCON.clearLVDSTAT; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2048
  sw $a1,4($a0)
end;
procedure TNVM_NVMCON.setLVDSTAT(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,11,1
  sw      $v1,($a0)
end;
function  TNVM_NVMCON.getLVDSTAT : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,11,1
end;
procedure TNVM_NVMCON.setLVDERR; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4096
  sw $a1,8($a0)
end;
procedure TNVM_NVMCON.clearLVDERR; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4096
  sw $a1,4($a0)
end;
procedure TNVM_NVMCON.setLVDERR(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,12,1
  sw      $v1,($a0)
end;
function  TNVM_NVMCON.getLVDERR : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,12,1
end;
procedure TNVM_NVMCON.setWRERR; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,8($a0)
end;
procedure TNVM_NVMCON.clearWRERR; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,4($a0)
end;
procedure TNVM_NVMCON.setWRERR(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,13,1
  sw      $v1,($a0)
end;
function  TNVM_NVMCON.getWRERR : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,13,1
end;
procedure TNVM_NVMCON.setWREN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16384
  sw $a1,8($a0)
end;
procedure TNVM_NVMCON.clearWREN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16384
  sw $a1,4($a0)
end;
procedure TNVM_NVMCON.setWREN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,14,1
  sw      $v1,($a0)
end;
function  TNVM_NVMCON.getWREN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,14,1
end;
procedure TNVM_NVMCON.setWR; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,8($a0)
end;
procedure TNVM_NVMCON.clearWR; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,4($a0)
end;
procedure TNVM_NVMCON.setWR(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,15,1
  sw      $v1,($a0)
end;
function  TNVM_NVMCON.getWR : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,15,1
end;
procedure TNVM_NVMCON.setNVMOP0; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,8($a0)
end;
procedure TNVM_NVMCON.clearNVMOP0; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,4($a0)
end;
procedure TNVM_NVMCON.setNVMOP0(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,1
  sw      $v1,($a0)
end;
function  TNVM_NVMCON.getNVMOP0 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,1
end;
procedure TNVM_NVMCON.setNVMOP1; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,8($a0)
end;
procedure TNVM_NVMCON.clearNVMOP1; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,4($a0)
end;
procedure TNVM_NVMCON.setNVMOP1(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,1,1
  sw      $v1,($a0)
end;
function  TNVM_NVMCON.getNVMOP1 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,1,1
end;
procedure TNVM_NVMCON.setNVMOP2; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,8($a0)
end;
procedure TNVM_NVMCON.clearNVMOP2; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,4($a0)
end;
procedure TNVM_NVMCON.setNVMOP2(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,2,1
  sw      $v1,($a0)
end;
function  TNVM_NVMCON.getNVMOP2 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,2,1
end;
procedure TNVM_NVMCON.setNVMOP3; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,8($a0)
end;
procedure TNVM_NVMCON.clearNVMOP3; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,4($a0)
end;
procedure TNVM_NVMCON.setNVMOP3(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,3,1
  sw      $v1,($a0)
end;
function  TNVM_NVMCON.getNVMOP3 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,3,1
end;
procedure TNVM_NVMCON.setPROGOP(thebits : TBits_4); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,4
  sw      $v1,($a0)
end;
function  TNVM_NVMCON.getPROGOP : TBits_4;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,4
end;
procedure TNVM_NVMCON.setPROGOP0; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,8($a0)
end;
procedure TNVM_NVMCON.clearPROGOP0; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,4($a0)
end;
procedure TNVM_NVMCON.setPROGOP0(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,1
  sw      $v1,($a0)
end;
function  TNVM_NVMCON.getPROGOP0 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,1
end;
procedure TNVM_NVMCON.setPROGOP1; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,8($a0)
end;
procedure TNVM_NVMCON.clearPROGOP1; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,4($a0)
end;
procedure TNVM_NVMCON.setPROGOP1(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,1,1
  sw      $v1,($a0)
end;
function  TNVM_NVMCON.getPROGOP1 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,1,1
end;
procedure TNVM_NVMCON.setPROGOP2; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,8($a0)
end;
procedure TNVM_NVMCON.clearPROGOP2; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,4($a0)
end;
procedure TNVM_NVMCON.setPROGOP2(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,2,1
  sw      $v1,($a0)
end;
function  TNVM_NVMCON.getPROGOP2 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,2,1
end;
procedure TNVM_NVMCON.setPROGOP3; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,8($a0)
end;
procedure TNVM_NVMCON.clearPROGOP3; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,4($a0)
end;
procedure TNVM_NVMCON.setPROGOP3(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,3,1
  sw      $v1,($a0)
end;
function  TNVM_NVMCON.getPROGOP3 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,3,1
end;
procedure TNVM_NVMCON.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TNVM_NVMCON.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TRCON_RCON.setPOR; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,8($a0)
end;
procedure TRCON_RCON.clearPOR; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,4($a0)
end;
procedure TRCON_RCON.setPOR(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,1
  sw      $v1,($a0)
end;
function  TRCON_RCON.getPOR : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,1
end;
procedure TRCON_RCON.setBOR; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,8($a0)
end;
procedure TRCON_RCON.clearBOR; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,4($a0)
end;
procedure TRCON_RCON.setBOR(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,1,1
  sw      $v1,($a0)
end;
function  TRCON_RCON.getBOR : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,1,1
end;
procedure TRCON_RCON.setIDLE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,8($a0)
end;
procedure TRCON_RCON.clearIDLE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,4($a0)
end;
procedure TRCON_RCON.setIDLE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,2,1
  sw      $v1,($a0)
end;
function  TRCON_RCON.getIDLE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,2,1
end;
procedure TRCON_RCON.setSLEEP; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,8($a0)
end;
procedure TRCON_RCON.clearSLEEP; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,4($a0)
end;
procedure TRCON_RCON.setSLEEP(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,3,1
  sw      $v1,($a0)
end;
function  TRCON_RCON.getSLEEP : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,3,1
end;
procedure TRCON_RCON.setWDTO; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,8($a0)
end;
procedure TRCON_RCON.clearWDTO; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,4($a0)
end;
procedure TRCON_RCON.setWDTO(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,4,1
  sw      $v1,($a0)
end;
function  TRCON_RCON.getWDTO : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,4,1
end;
procedure TRCON_RCON.setSWR; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,8($a0)
end;
procedure TRCON_RCON.clearSWR; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,4($a0)
end;
procedure TRCON_RCON.setSWR(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,6,1
  sw      $v1,($a0)
end;
function  TRCON_RCON.getSWR : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,6,1
end;
procedure TRCON_RCON.setEXTR; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,8($a0)
end;
procedure TRCON_RCON.clearEXTR; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,4($a0)
end;
procedure TRCON_RCON.setEXTR(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,7,1
  sw      $v1,($a0)
end;
function  TRCON_RCON.getEXTR : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,7,1
end;
procedure TRCON_RCON.setVREGS; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,8($a0)
end;
procedure TRCON_RCON.clearVREGS; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,4($a0)
end;
procedure TRCON_RCON.setVREGS(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,8,1
  sw      $v1,($a0)
end;
function  TRCON_RCON.getVREGS : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,8,1
end;
procedure TRCON_RCON.setCMR; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,512
  sw $a1,8($a0)
end;
procedure TRCON_RCON.clearCMR; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,512
  sw $a1,4($a0)
end;
procedure TRCON_RCON.setCMR(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,9,1
  sw      $v1,($a0)
end;
function  TRCON_RCON.getCMR : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,9,1
end;
procedure TRCON_RCON.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TRCON_RCON.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TRCON_RSWRST.setSWRST; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,8($a0)
end;
procedure TRCON_RSWRST.clearSWRST; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,4($a0)
end;
procedure TRCON_RSWRST.setSWRST(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,1
  sw      $v1,($a0)
end;
function  TRCON_RSWRST.getSWRST : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,1
end;
procedure TRCON_RSWRST.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TRCON_RSWRST.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TINT_INTCON.setINT0EP; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,8($a0)
end;
procedure TINT_INTCON.clearINT0EP; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,4($a0)
end;
procedure TINT_INTCON.setINT0EP(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,1
  sw      $v1,($a0)
end;
function  TINT_INTCON.getINT0EP : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,1
end;
procedure TINT_INTCON.setINT1EP; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,8($a0)
end;
procedure TINT_INTCON.clearINT1EP; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,4($a0)
end;
procedure TINT_INTCON.setINT1EP(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,1,1
  sw      $v1,($a0)
end;
function  TINT_INTCON.getINT1EP : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,1,1
end;
procedure TINT_INTCON.setINT2EP; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,8($a0)
end;
procedure TINT_INTCON.clearINT2EP; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,4($a0)
end;
procedure TINT_INTCON.setINT2EP(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,2,1
  sw      $v1,($a0)
end;
function  TINT_INTCON.getINT2EP : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,2,1
end;
procedure TINT_INTCON.setINT3EP; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,8($a0)
end;
procedure TINT_INTCON.clearINT3EP; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,4($a0)
end;
procedure TINT_INTCON.setINT3EP(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,3,1
  sw      $v1,($a0)
end;
function  TINT_INTCON.getINT3EP : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,3,1
end;
procedure TINT_INTCON.setINT4EP; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,8($a0)
end;
procedure TINT_INTCON.clearINT4EP; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,4($a0)
end;
procedure TINT_INTCON.setINT4EP(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,4,1
  sw      $v1,($a0)
end;
function  TINT_INTCON.getINT4EP : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,4,1
end;
procedure TINT_INTCON.setTPC(thebits : TBits_3); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,8,3
  sw      $v1,($a0)
end;
function  TINT_INTCON.getTPC : TBits_3;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,8,3
end;
procedure TINT_INTCON.setMVEC; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4096
  sw $a1,8($a0)
end;
procedure TINT_INTCON.clearMVEC; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4096
  sw $a1,4($a0)
end;
procedure TINT_INTCON.setMVEC(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,12,1
  sw      $v1,($a0)
end;
function  TINT_INTCON.getMVEC : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,12,1
end;
procedure TINT_INTCON.setFRZ; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16384
  sw $a1,8($a0)
end;
procedure TINT_INTCON.clearFRZ; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16384
  sw $a1,4($a0)
end;
procedure TINT_INTCON.setFRZ(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,14,1
  sw      $v1,($a0)
end;
function  TINT_INTCON.getFRZ : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,14,1
end;
procedure TINT_INTCON.setSS0; assembler; nostackframe; inline;
asm
  lui     $a1,1
  sw $a1,8($a0)
end;
procedure TINT_INTCON.clearSS0; assembler; nostackframe; inline;
asm
  lui     $a1,1
  sw $a1,4($a0)
end;
procedure TINT_INTCON.setSS0(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,16,1
  sw      $v1,($a0)
end;
function  TINT_INTCON.getSS0 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,16,1
end;
procedure TINT_INTCON.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TINT_INTCON.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TINT_IFS0.setCTIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,8($a0)
end;
procedure TINT_IFS0.clearCTIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,4($a0)
end;
procedure TINT_IFS0.setCTIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,1
  sw      $v1,($a0)
end;
function  TINT_IFS0.getCTIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,1
end;
procedure TINT_IFS0.setCS0IF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,8($a0)
end;
procedure TINT_IFS0.clearCS0IF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,4($a0)
end;
procedure TINT_IFS0.setCS0IF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,1,1
  sw      $v1,($a0)
end;
function  TINT_IFS0.getCS0IF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,1,1
end;
procedure TINT_IFS0.setCS1IF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,8($a0)
end;
procedure TINT_IFS0.clearCS1IF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,4($a0)
end;
procedure TINT_IFS0.setCS1IF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,2,1
  sw      $v1,($a0)
end;
function  TINT_IFS0.getCS1IF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,2,1
end;
procedure TINT_IFS0.setINT0IF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,8($a0)
end;
procedure TINT_IFS0.clearINT0IF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,4($a0)
end;
procedure TINT_IFS0.setINT0IF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,3,1
  sw      $v1,($a0)
end;
function  TINT_IFS0.getINT0IF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,3,1
end;
procedure TINT_IFS0.setT1IF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,8($a0)
end;
procedure TINT_IFS0.clearT1IF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,4($a0)
end;
procedure TINT_IFS0.setT1IF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,4,1
  sw      $v1,($a0)
end;
function  TINT_IFS0.getT1IF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,4,1
end;
procedure TINT_IFS0.setIC1IF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,8($a0)
end;
procedure TINT_IFS0.clearIC1IF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,4($a0)
end;
procedure TINT_IFS0.setIC1IF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,5,1
  sw      $v1,($a0)
end;
function  TINT_IFS0.getIC1IF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,5,1
end;
procedure TINT_IFS0.setOC1IF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,8($a0)
end;
procedure TINT_IFS0.clearOC1IF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,4($a0)
end;
procedure TINT_IFS0.setOC1IF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,6,1
  sw      $v1,($a0)
end;
function  TINT_IFS0.getOC1IF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,6,1
end;
procedure TINT_IFS0.setINT1IF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,8($a0)
end;
procedure TINT_IFS0.clearINT1IF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,4($a0)
end;
procedure TINT_IFS0.setINT1IF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,7,1
  sw      $v1,($a0)
end;
function  TINT_IFS0.getINT1IF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,7,1
end;
procedure TINT_IFS0.setT2IF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,8($a0)
end;
procedure TINT_IFS0.clearT2IF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,4($a0)
end;
procedure TINT_IFS0.setT2IF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,8,1
  sw      $v1,($a0)
end;
function  TINT_IFS0.getT2IF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,8,1
end;
procedure TINT_IFS0.setIC2IF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,512
  sw $a1,8($a0)
end;
procedure TINT_IFS0.clearIC2IF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,512
  sw $a1,4($a0)
end;
procedure TINT_IFS0.setIC2IF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,9,1
  sw      $v1,($a0)
end;
function  TINT_IFS0.getIC2IF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,9,1
end;
procedure TINT_IFS0.setOC2IF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1024
  sw $a1,8($a0)
end;
procedure TINT_IFS0.clearOC2IF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1024
  sw $a1,4($a0)
end;
procedure TINT_IFS0.setOC2IF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,10,1
  sw      $v1,($a0)
end;
function  TINT_IFS0.getOC2IF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,10,1
end;
procedure TINT_IFS0.setINT2IF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2048
  sw $a1,8($a0)
end;
procedure TINT_IFS0.clearINT2IF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2048
  sw $a1,4($a0)
end;
procedure TINT_IFS0.setINT2IF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,11,1
  sw      $v1,($a0)
end;
function  TINT_IFS0.getINT2IF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,11,1
end;
procedure TINT_IFS0.setT3IF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4096
  sw $a1,8($a0)
end;
procedure TINT_IFS0.clearT3IF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4096
  sw $a1,4($a0)
end;
procedure TINT_IFS0.setT3IF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,12,1
  sw      $v1,($a0)
end;
function  TINT_IFS0.getT3IF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,12,1
end;
procedure TINT_IFS0.setIC3IF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,8($a0)
end;
procedure TINT_IFS0.clearIC3IF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,4($a0)
end;
procedure TINT_IFS0.setIC3IF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,13,1
  sw      $v1,($a0)
end;
function  TINT_IFS0.getIC3IF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,13,1
end;
procedure TINT_IFS0.setOC3IF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16384
  sw $a1,8($a0)
end;
procedure TINT_IFS0.clearOC3IF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16384
  sw $a1,4($a0)
end;
procedure TINT_IFS0.setOC3IF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,14,1
  sw      $v1,($a0)
end;
function  TINT_IFS0.getOC3IF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,14,1
end;
procedure TINT_IFS0.setINT3IF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,8($a0)
end;
procedure TINT_IFS0.clearINT3IF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,4($a0)
end;
procedure TINT_IFS0.setINT3IF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,15,1
  sw      $v1,($a0)
end;
function  TINT_IFS0.getINT3IF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,15,1
end;
procedure TINT_IFS0.setT4IF; assembler; nostackframe; inline;
asm
  lui     $a1,1
  sw $a1,8($a0)
end;
procedure TINT_IFS0.clearT4IF; assembler; nostackframe; inline;
asm
  lui     $a1,1
  sw $a1,4($a0)
end;
procedure TINT_IFS0.setT4IF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,16,1
  sw      $v1,($a0)
end;
function  TINT_IFS0.getT4IF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,16,1
end;
procedure TINT_IFS0.setIC4IF; assembler; nostackframe; inline;
asm
  lui     $a1,2
  sw $a1,8($a0)
end;
procedure TINT_IFS0.clearIC4IF; assembler; nostackframe; inline;
asm
  lui     $a1,2
  sw $a1,4($a0)
end;
procedure TINT_IFS0.setIC4IF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,17,1
  sw      $v1,($a0)
end;
function  TINT_IFS0.getIC4IF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,17,1
end;
procedure TINT_IFS0.setOC4IF; assembler; nostackframe; inline;
asm
  lui     $a1,4
  sw $a1,8($a0)
end;
procedure TINT_IFS0.clearOC4IF; assembler; nostackframe; inline;
asm
  lui     $a1,4
  sw $a1,4($a0)
end;
procedure TINT_IFS0.setOC4IF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,18,1
  sw      $v1,($a0)
end;
function  TINT_IFS0.getOC4IF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,18,1
end;
procedure TINT_IFS0.setINT4IF; assembler; nostackframe; inline;
asm
  lui     $a1,8
  sw $a1,8($a0)
end;
procedure TINT_IFS0.clearINT4IF; assembler; nostackframe; inline;
asm
  lui     $a1,8
  sw $a1,4($a0)
end;
procedure TINT_IFS0.setINT4IF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,19,1
  sw      $v1,($a0)
end;
function  TINT_IFS0.getINT4IF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,19,1
end;
procedure TINT_IFS0.setT5IF; assembler; nostackframe; inline;
asm
  lui     $a1,16
  sw $a1,8($a0)
end;
procedure TINT_IFS0.clearT5IF; assembler; nostackframe; inline;
asm
  lui     $a1,16
  sw $a1,4($a0)
end;
procedure TINT_IFS0.setT5IF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,20,1
  sw      $v1,($a0)
end;
function  TINT_IFS0.getT5IF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,20,1
end;
procedure TINT_IFS0.setIC5IF; assembler; nostackframe; inline;
asm
  lui     $a1,32
  sw $a1,8($a0)
end;
procedure TINT_IFS0.clearIC5IF; assembler; nostackframe; inline;
asm
  lui     $a1,32
  sw $a1,4($a0)
end;
procedure TINT_IFS0.setIC5IF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,21,1
  sw      $v1,($a0)
end;
function  TINT_IFS0.getIC5IF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,21,1
end;
procedure TINT_IFS0.setOC5IF; assembler; nostackframe; inline;
asm
  lui     $a1,64
  sw $a1,8($a0)
end;
procedure TINT_IFS0.clearOC5IF; assembler; nostackframe; inline;
asm
  lui     $a1,64
  sw $a1,4($a0)
end;
procedure TINT_IFS0.setOC5IF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,22,1
  sw      $v1,($a0)
end;
function  TINT_IFS0.getOC5IF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,22,1
end;
procedure TINT_IFS0.setSPI1EIF; assembler; nostackframe; inline;
asm
  lui     $a1,128
  sw $a1,8($a0)
end;
procedure TINT_IFS0.clearSPI1EIF; assembler; nostackframe; inline;
asm
  lui     $a1,128
  sw $a1,4($a0)
end;
procedure TINT_IFS0.setSPI1EIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,23,1
  sw      $v1,($a0)
end;
function  TINT_IFS0.getSPI1EIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,23,1
end;
procedure TINT_IFS0.setSPI1RXIF; assembler; nostackframe; inline;
asm
  lui     $a1,256
  sw $a1,8($a0)
end;
procedure TINT_IFS0.clearSPI1RXIF; assembler; nostackframe; inline;
asm
  lui     $a1,256
  sw $a1,4($a0)
end;
procedure TINT_IFS0.setSPI1RXIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,24,1
  sw      $v1,($a0)
end;
function  TINT_IFS0.getSPI1RXIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,24,1
end;
procedure TINT_IFS0.setSPI1TXIF; assembler; nostackframe; inline;
asm
  lui     $a1,512
  sw $a1,8($a0)
end;
procedure TINT_IFS0.clearSPI1TXIF; assembler; nostackframe; inline;
asm
  lui     $a1,512
  sw $a1,4($a0)
end;
procedure TINT_IFS0.setSPI1TXIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,25,1
  sw      $v1,($a0)
end;
function  TINT_IFS0.getSPI1TXIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,25,1
end;
procedure TINT_IFS0.setU1EIF; assembler; nostackframe; inline;
asm
  lui     $a1,1024
  sw $a1,8($a0)
end;
procedure TINT_IFS0.clearU1EIF; assembler; nostackframe; inline;
asm
  lui     $a1,1024
  sw $a1,4($a0)
end;
procedure TINT_IFS0.setU1EIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,26,1
  sw      $v1,($a0)
end;
function  TINT_IFS0.getU1EIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,26,1
end;
procedure TINT_IFS0.setU1RXIF; assembler; nostackframe; inline;
asm
  lui     $a1,2048
  sw $a1,8($a0)
end;
procedure TINT_IFS0.clearU1RXIF; assembler; nostackframe; inline;
asm
  lui     $a1,2048
  sw $a1,4($a0)
end;
procedure TINT_IFS0.setU1RXIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,27,1
  sw      $v1,($a0)
end;
function  TINT_IFS0.getU1RXIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,27,1
end;
procedure TINT_IFS0.setU1TXIF; assembler; nostackframe; inline;
asm
  lui     $a1,4096
  sw $a1,8($a0)
end;
procedure TINT_IFS0.clearU1TXIF; assembler; nostackframe; inline;
asm
  lui     $a1,4096
  sw $a1,4($a0)
end;
procedure TINT_IFS0.setU1TXIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,28,1
  sw      $v1,($a0)
end;
function  TINT_IFS0.getU1TXIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,28,1
end;
procedure TINT_IFS0.setI2C1BIF; assembler; nostackframe; inline;
asm
  lui     $a1,8192
  sw $a1,8($a0)
end;
procedure TINT_IFS0.clearI2C1BIF; assembler; nostackframe; inline;
asm
  lui     $a1,8192
  sw $a1,4($a0)
end;
procedure TINT_IFS0.setI2C1BIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,29,1
  sw      $v1,($a0)
end;
function  TINT_IFS0.getI2C1BIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,29,1
end;
procedure TINT_IFS0.setI2C1SIF; assembler; nostackframe; inline;
asm
  lui     $a1,16384
  sw $a1,8($a0)
end;
procedure TINT_IFS0.clearI2C1SIF; assembler; nostackframe; inline;
asm
  lui     $a1,16384
  sw $a1,4($a0)
end;
procedure TINT_IFS0.setI2C1SIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,30,1
  sw      $v1,($a0)
end;
function  TINT_IFS0.getI2C1SIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,30,1
end;
procedure TINT_IFS0.setI2C1MIF; assembler; nostackframe; inline;
asm
  lui     $a1,32768
  sw $a1,8($a0)
end;
procedure TINT_IFS0.clearI2C1MIF; assembler; nostackframe; inline;
asm
  lui     $a1,32768
  sw $a1,4($a0)
end;
procedure TINT_IFS0.setI2C1MIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,31,1
  sw      $v1,($a0)
end;
function  TINT_IFS0.getI2C1MIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,31,1
end;
procedure TINT_IFS0.setU1AEIF; assembler; nostackframe; inline;
asm
  lui     $a1,1024
  sw $a1,8($a0)
end;
procedure TINT_IFS0.clearU1AEIF; assembler; nostackframe; inline;
asm
  lui     $a1,1024
  sw $a1,4($a0)
end;
procedure TINT_IFS0.setU1AEIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,26,1
  sw      $v1,($a0)
end;
function  TINT_IFS0.getU1AEIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,26,1
end;
procedure TINT_IFS0.setU1ARXIF; assembler; nostackframe; inline;
asm
  lui     $a1,2048
  sw $a1,8($a0)
end;
procedure TINT_IFS0.clearU1ARXIF; assembler; nostackframe; inline;
asm
  lui     $a1,2048
  sw $a1,4($a0)
end;
procedure TINT_IFS0.setU1ARXIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,27,1
  sw      $v1,($a0)
end;
function  TINT_IFS0.getU1ARXIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,27,1
end;
procedure TINT_IFS0.setU1ATXIF; assembler; nostackframe; inline;
asm
  lui     $a1,4096
  sw $a1,8($a0)
end;
procedure TINT_IFS0.clearU1ATXIF; assembler; nostackframe; inline;
asm
  lui     $a1,4096
  sw $a1,4($a0)
end;
procedure TINT_IFS0.setU1ATXIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,28,1
  sw      $v1,($a0)
end;
function  TINT_IFS0.getU1ATXIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,28,1
end;
procedure TINT_IFS0.setSPI3EIF; assembler; nostackframe; inline;
asm
  lui     $a1,1024
  sw $a1,8($a0)
end;
procedure TINT_IFS0.clearSPI3EIF; assembler; nostackframe; inline;
asm
  lui     $a1,1024
  sw $a1,4($a0)
end;
procedure TINT_IFS0.setSPI3EIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,26,1
  sw      $v1,($a0)
end;
function  TINT_IFS0.getSPI3EIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,26,1
end;
procedure TINT_IFS0.setSPI3RXIF; assembler; nostackframe; inline;
asm
  lui     $a1,2048
  sw $a1,8($a0)
end;
procedure TINT_IFS0.clearSPI3RXIF; assembler; nostackframe; inline;
asm
  lui     $a1,2048
  sw $a1,4($a0)
end;
procedure TINT_IFS0.setSPI3RXIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,27,1
  sw      $v1,($a0)
end;
function  TINT_IFS0.getSPI3RXIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,27,1
end;
procedure TINT_IFS0.setSPI3TXIF; assembler; nostackframe; inline;
asm
  lui     $a1,4096
  sw $a1,8($a0)
end;
procedure TINT_IFS0.clearSPI3TXIF; assembler; nostackframe; inline;
asm
  lui     $a1,4096
  sw $a1,4($a0)
end;
procedure TINT_IFS0.setSPI3TXIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,28,1
  sw      $v1,($a0)
end;
function  TINT_IFS0.getSPI3TXIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,28,1
end;
procedure TINT_IFS0.setSPI1AEIF; assembler; nostackframe; inline;
asm
  lui     $a1,1024
  sw $a1,8($a0)
end;
procedure TINT_IFS0.clearSPI1AEIF; assembler; nostackframe; inline;
asm
  lui     $a1,1024
  sw $a1,4($a0)
end;
procedure TINT_IFS0.setSPI1AEIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,26,1
  sw      $v1,($a0)
end;
function  TINT_IFS0.getSPI1AEIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,26,1
end;
procedure TINT_IFS0.setSPI1ARXIF; assembler; nostackframe; inline;
asm
  lui     $a1,2048
  sw $a1,8($a0)
end;
procedure TINT_IFS0.clearSPI1ARXIF; assembler; nostackframe; inline;
asm
  lui     $a1,2048
  sw $a1,4($a0)
end;
procedure TINT_IFS0.setSPI1ARXIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,27,1
  sw      $v1,($a0)
end;
function  TINT_IFS0.getSPI1ARXIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,27,1
end;
procedure TINT_IFS0.setSPI1ATXIF; assembler; nostackframe; inline;
asm
  lui     $a1,4096
  sw $a1,8($a0)
end;
procedure TINT_IFS0.clearSPI1ATXIF; assembler; nostackframe; inline;
asm
  lui     $a1,4096
  sw $a1,4($a0)
end;
procedure TINT_IFS0.setSPI1ATXIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,28,1
  sw      $v1,($a0)
end;
function  TINT_IFS0.getSPI1ATXIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,28,1
end;
procedure TINT_IFS0.setI2C3BIF; assembler; nostackframe; inline;
asm
  lui     $a1,1024
  sw $a1,8($a0)
end;
procedure TINT_IFS0.clearI2C3BIF; assembler; nostackframe; inline;
asm
  lui     $a1,1024
  sw $a1,4($a0)
end;
procedure TINT_IFS0.setI2C3BIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,26,1
  sw      $v1,($a0)
end;
function  TINT_IFS0.getI2C3BIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,26,1
end;
procedure TINT_IFS0.setI2C3SIF; assembler; nostackframe; inline;
asm
  lui     $a1,2048
  sw $a1,8($a0)
end;
procedure TINT_IFS0.clearI2C3SIF; assembler; nostackframe; inline;
asm
  lui     $a1,2048
  sw $a1,4($a0)
end;
procedure TINT_IFS0.setI2C3SIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,27,1
  sw      $v1,($a0)
end;
function  TINT_IFS0.getI2C3SIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,27,1
end;
procedure TINT_IFS0.setI2C3MIF; assembler; nostackframe; inline;
asm
  lui     $a1,4096
  sw $a1,8($a0)
end;
procedure TINT_IFS0.clearI2C3MIF; assembler; nostackframe; inline;
asm
  lui     $a1,4096
  sw $a1,4($a0)
end;
procedure TINT_IFS0.setI2C3MIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,28,1
  sw      $v1,($a0)
end;
function  TINT_IFS0.getI2C3MIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,28,1
end;
procedure TINT_IFS0.setI2C1ABIF; assembler; nostackframe; inline;
asm
  lui     $a1,1024
  sw $a1,8($a0)
end;
procedure TINT_IFS0.clearI2C1ABIF; assembler; nostackframe; inline;
asm
  lui     $a1,1024
  sw $a1,4($a0)
end;
procedure TINT_IFS0.setI2C1ABIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,26,1
  sw      $v1,($a0)
end;
function  TINT_IFS0.getI2C1ABIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,26,1
end;
procedure TINT_IFS0.setI2C1ASIF; assembler; nostackframe; inline;
asm
  lui     $a1,2048
  sw $a1,8($a0)
end;
procedure TINT_IFS0.clearI2C1ASIF; assembler; nostackframe; inline;
asm
  lui     $a1,2048
  sw $a1,4($a0)
end;
procedure TINT_IFS0.setI2C1ASIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,27,1
  sw      $v1,($a0)
end;
function  TINT_IFS0.getI2C1ASIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,27,1
end;
procedure TINT_IFS0.setI2C1AMIF; assembler; nostackframe; inline;
asm
  lui     $a1,4096
  sw $a1,8($a0)
end;
procedure TINT_IFS0.clearI2C1AMIF; assembler; nostackframe; inline;
asm
  lui     $a1,4096
  sw $a1,4($a0)
end;
procedure TINT_IFS0.setI2C1AMIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,28,1
  sw      $v1,($a0)
end;
function  TINT_IFS0.getI2C1AMIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,28,1
end;
procedure TINT_IFS0.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TINT_IFS0.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TINT_IFS1.setCNIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,8($a0)
end;
procedure TINT_IFS1.clearCNIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,4($a0)
end;
procedure TINT_IFS1.setCNIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,1
  sw      $v1,($a0)
end;
function  TINT_IFS1.getCNIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,1
end;
procedure TINT_IFS1.setAD1IF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,8($a0)
end;
procedure TINT_IFS1.clearAD1IF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,4($a0)
end;
procedure TINT_IFS1.setAD1IF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,1,1
  sw      $v1,($a0)
end;
function  TINT_IFS1.getAD1IF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,1,1
end;
procedure TINT_IFS1.setPMPIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,8($a0)
end;
procedure TINT_IFS1.clearPMPIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,4($a0)
end;
procedure TINT_IFS1.setPMPIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,2,1
  sw      $v1,($a0)
end;
function  TINT_IFS1.getPMPIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,2,1
end;
procedure TINT_IFS1.setCMP1IF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,8($a0)
end;
procedure TINT_IFS1.clearCMP1IF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,4($a0)
end;
procedure TINT_IFS1.setCMP1IF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,3,1
  sw      $v1,($a0)
end;
function  TINT_IFS1.getCMP1IF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,3,1
end;
procedure TINT_IFS1.setCMP2IF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,8($a0)
end;
procedure TINT_IFS1.clearCMP2IF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,4($a0)
end;
procedure TINT_IFS1.setCMP2IF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,4,1
  sw      $v1,($a0)
end;
function  TINT_IFS1.getCMP2IF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,4,1
end;
procedure TINT_IFS1.setU3EIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,8($a0)
end;
procedure TINT_IFS1.clearU3EIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,4($a0)
end;
procedure TINT_IFS1.setU3EIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,5,1
  sw      $v1,($a0)
end;
function  TINT_IFS1.getU3EIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,5,1
end;
procedure TINT_IFS1.setU3RXIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,8($a0)
end;
procedure TINT_IFS1.clearU3RXIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,4($a0)
end;
procedure TINT_IFS1.setU3RXIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,6,1
  sw      $v1,($a0)
end;
function  TINT_IFS1.getU3RXIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,6,1
end;
procedure TINT_IFS1.setU3TXIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,8($a0)
end;
procedure TINT_IFS1.clearU3TXIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,4($a0)
end;
procedure TINT_IFS1.setU3TXIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,7,1
  sw      $v1,($a0)
end;
function  TINT_IFS1.getU3TXIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,7,1
end;
procedure TINT_IFS1.setU2EIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,8($a0)
end;
procedure TINT_IFS1.clearU2EIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,4($a0)
end;
procedure TINT_IFS1.setU2EIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,8,1
  sw      $v1,($a0)
end;
function  TINT_IFS1.getU2EIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,8,1
end;
procedure TINT_IFS1.setU2RXIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,512
  sw $a1,8($a0)
end;
procedure TINT_IFS1.clearU2RXIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,512
  sw $a1,4($a0)
end;
procedure TINT_IFS1.setU2RXIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,9,1
  sw      $v1,($a0)
end;
function  TINT_IFS1.getU2RXIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,9,1
end;
procedure TINT_IFS1.setU2TXIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1024
  sw $a1,8($a0)
end;
procedure TINT_IFS1.clearU2TXIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1024
  sw $a1,4($a0)
end;
procedure TINT_IFS1.setU2TXIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,10,1
  sw      $v1,($a0)
end;
function  TINT_IFS1.getU2TXIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,10,1
end;
procedure TINT_IFS1.setI2C2BIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2048
  sw $a1,8($a0)
end;
procedure TINT_IFS1.clearI2C2BIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2048
  sw $a1,4($a0)
end;
procedure TINT_IFS1.setI2C2BIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,11,1
  sw      $v1,($a0)
end;
function  TINT_IFS1.getI2C2BIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,11,1
end;
procedure TINT_IFS1.setI2C2SIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4096
  sw $a1,8($a0)
end;
procedure TINT_IFS1.clearI2C2SIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4096
  sw $a1,4($a0)
end;
procedure TINT_IFS1.setI2C2SIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,12,1
  sw      $v1,($a0)
end;
function  TINT_IFS1.getI2C2SIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,12,1
end;
procedure TINT_IFS1.setI2C2MIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,8($a0)
end;
procedure TINT_IFS1.clearI2C2MIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,4($a0)
end;
procedure TINT_IFS1.setI2C2MIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,13,1
  sw      $v1,($a0)
end;
function  TINT_IFS1.getI2C2MIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,13,1
end;
procedure TINT_IFS1.setFSCMIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16384
  sw $a1,8($a0)
end;
procedure TINT_IFS1.clearFSCMIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16384
  sw $a1,4($a0)
end;
procedure TINT_IFS1.setFSCMIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,14,1
  sw      $v1,($a0)
end;
function  TINT_IFS1.getFSCMIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,14,1
end;
procedure TINT_IFS1.setRTCCIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,8($a0)
end;
procedure TINT_IFS1.clearRTCCIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,4($a0)
end;
procedure TINT_IFS1.setRTCCIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,15,1
  sw      $v1,($a0)
end;
function  TINT_IFS1.getRTCCIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,15,1
end;
procedure TINT_IFS1.setDMA0IF; assembler; nostackframe; inline;
asm
  lui     $a1,1
  sw $a1,8($a0)
end;
procedure TINT_IFS1.clearDMA0IF; assembler; nostackframe; inline;
asm
  lui     $a1,1
  sw $a1,4($a0)
end;
procedure TINT_IFS1.setDMA0IF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,16,1
  sw      $v1,($a0)
end;
function  TINT_IFS1.getDMA0IF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,16,1
end;
procedure TINT_IFS1.setDMA1IF; assembler; nostackframe; inline;
asm
  lui     $a1,2
  sw $a1,8($a0)
end;
procedure TINT_IFS1.clearDMA1IF; assembler; nostackframe; inline;
asm
  lui     $a1,2
  sw $a1,4($a0)
end;
procedure TINT_IFS1.setDMA1IF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,17,1
  sw      $v1,($a0)
end;
function  TINT_IFS1.getDMA1IF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,17,1
end;
procedure TINT_IFS1.setDMA2IF; assembler; nostackframe; inline;
asm
  lui     $a1,4
  sw $a1,8($a0)
end;
procedure TINT_IFS1.clearDMA2IF; assembler; nostackframe; inline;
asm
  lui     $a1,4
  sw $a1,4($a0)
end;
procedure TINT_IFS1.setDMA2IF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,18,1
  sw      $v1,($a0)
end;
function  TINT_IFS1.getDMA2IF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,18,1
end;
procedure TINT_IFS1.setDMA3IF; assembler; nostackframe; inline;
asm
  lui     $a1,8
  sw $a1,8($a0)
end;
procedure TINT_IFS1.clearDMA3IF; assembler; nostackframe; inline;
asm
  lui     $a1,8
  sw $a1,4($a0)
end;
procedure TINT_IFS1.setDMA3IF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,19,1
  sw      $v1,($a0)
end;
function  TINT_IFS1.getDMA3IF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,19,1
end;
procedure TINT_IFS1.setDMA4IF; assembler; nostackframe; inline;
asm
  lui     $a1,16
  sw $a1,8($a0)
end;
procedure TINT_IFS1.clearDMA4IF; assembler; nostackframe; inline;
asm
  lui     $a1,16
  sw $a1,4($a0)
end;
procedure TINT_IFS1.setDMA4IF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,20,1
  sw      $v1,($a0)
end;
function  TINT_IFS1.getDMA4IF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,20,1
end;
procedure TINT_IFS1.setDMA5IF; assembler; nostackframe; inline;
asm
  lui     $a1,32
  sw $a1,8($a0)
end;
procedure TINT_IFS1.clearDMA5IF; assembler; nostackframe; inline;
asm
  lui     $a1,32
  sw $a1,4($a0)
end;
procedure TINT_IFS1.setDMA5IF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,21,1
  sw      $v1,($a0)
end;
function  TINT_IFS1.getDMA5IF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,21,1
end;
procedure TINT_IFS1.setDMA6IF; assembler; nostackframe; inline;
asm
  lui     $a1,64
  sw $a1,8($a0)
end;
procedure TINT_IFS1.clearDMA6IF; assembler; nostackframe; inline;
asm
  lui     $a1,64
  sw $a1,4($a0)
end;
procedure TINT_IFS1.setDMA6IF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,22,1
  sw      $v1,($a0)
end;
function  TINT_IFS1.getDMA6IF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,22,1
end;
procedure TINT_IFS1.setDMA7IF; assembler; nostackframe; inline;
asm
  lui     $a1,128
  sw $a1,8($a0)
end;
procedure TINT_IFS1.clearDMA7IF; assembler; nostackframe; inline;
asm
  lui     $a1,128
  sw $a1,4($a0)
end;
procedure TINT_IFS1.setDMA7IF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,23,1
  sw      $v1,($a0)
end;
function  TINT_IFS1.getDMA7IF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,23,1
end;
procedure TINT_IFS1.setFCEIF; assembler; nostackframe; inline;
asm
  lui     $a1,256
  sw $a1,8($a0)
end;
procedure TINT_IFS1.clearFCEIF; assembler; nostackframe; inline;
asm
  lui     $a1,256
  sw $a1,4($a0)
end;
procedure TINT_IFS1.setFCEIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,24,1
  sw      $v1,($a0)
end;
function  TINT_IFS1.getFCEIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,24,1
end;
procedure TINT_IFS1.setUSBIF; assembler; nostackframe; inline;
asm
  lui     $a1,512
  sw $a1,8($a0)
end;
procedure TINT_IFS1.clearUSBIF; assembler; nostackframe; inline;
asm
  lui     $a1,512
  sw $a1,4($a0)
end;
procedure TINT_IFS1.setUSBIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,25,1
  sw      $v1,($a0)
end;
function  TINT_IFS1.getUSBIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,25,1
end;
procedure TINT_IFS1.setCAN1IF; assembler; nostackframe; inline;
asm
  lui     $a1,1024
  sw $a1,8($a0)
end;
procedure TINT_IFS1.clearCAN1IF; assembler; nostackframe; inline;
asm
  lui     $a1,1024
  sw $a1,4($a0)
end;
procedure TINT_IFS1.setCAN1IF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,26,1
  sw      $v1,($a0)
end;
function  TINT_IFS1.getCAN1IF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,26,1
end;
procedure TINT_IFS1.setIC1EIF; assembler; nostackframe; inline;
asm
  lui     $a1,8192
  sw $a1,8($a0)
end;
procedure TINT_IFS1.clearIC1EIF; assembler; nostackframe; inline;
asm
  lui     $a1,8192
  sw $a1,4($a0)
end;
procedure TINT_IFS1.setIC1EIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,29,1
  sw      $v1,($a0)
end;
function  TINT_IFS1.getIC1EIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,29,1
end;
procedure TINT_IFS1.setIC2EIF; assembler; nostackframe; inline;
asm
  lui     $a1,16384
  sw $a1,8($a0)
end;
procedure TINT_IFS1.clearIC2EIF; assembler; nostackframe; inline;
asm
  lui     $a1,16384
  sw $a1,4($a0)
end;
procedure TINT_IFS1.setIC2EIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,30,1
  sw      $v1,($a0)
end;
function  TINT_IFS1.getIC2EIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,30,1
end;
procedure TINT_IFS1.setIC3EIF; assembler; nostackframe; inline;
asm
  lui     $a1,32768
  sw $a1,8($a0)
end;
procedure TINT_IFS1.clearIC3EIF; assembler; nostackframe; inline;
asm
  lui     $a1,32768
  sw $a1,4($a0)
end;
procedure TINT_IFS1.setIC3EIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,31,1
  sw      $v1,($a0)
end;
function  TINT_IFS1.getIC3EIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,31,1
end;
procedure TINT_IFS1.setU2AEIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,8($a0)
end;
procedure TINT_IFS1.clearU2AEIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,4($a0)
end;
procedure TINT_IFS1.setU2AEIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,5,1
  sw      $v1,($a0)
end;
function  TINT_IFS1.getU2AEIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,5,1
end;
procedure TINT_IFS1.setU2ARXIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,8($a0)
end;
procedure TINT_IFS1.clearU2ARXIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,4($a0)
end;
procedure TINT_IFS1.setU2ARXIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,6,1
  sw      $v1,($a0)
end;
function  TINT_IFS1.getU2ARXIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,6,1
end;
procedure TINT_IFS1.setU2ATXIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,8($a0)
end;
procedure TINT_IFS1.clearU2ATXIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,4($a0)
end;
procedure TINT_IFS1.setU2ATXIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,7,1
  sw      $v1,($a0)
end;
function  TINT_IFS1.getU2ATXIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,7,1
end;
procedure TINT_IFS1.setU3AEIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,8($a0)
end;
procedure TINT_IFS1.clearU3AEIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,4($a0)
end;
procedure TINT_IFS1.setU3AEIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,8,1
  sw      $v1,($a0)
end;
function  TINT_IFS1.getU3AEIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,8,1
end;
procedure TINT_IFS1.setU3ARXIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,512
  sw $a1,8($a0)
end;
procedure TINT_IFS1.clearU3ARXIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,512
  sw $a1,4($a0)
end;
procedure TINT_IFS1.setU3ARXIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,9,1
  sw      $v1,($a0)
end;
function  TINT_IFS1.getU3ARXIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,9,1
end;
procedure TINT_IFS1.setU3ATXIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1024
  sw $a1,8($a0)
end;
procedure TINT_IFS1.clearU3ATXIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1024
  sw $a1,4($a0)
end;
procedure TINT_IFS1.setU3ATXIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,10,1
  sw      $v1,($a0)
end;
function  TINT_IFS1.getU3ATXIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,10,1
end;
procedure TINT_IFS1.setSPI2EIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,8($a0)
end;
procedure TINT_IFS1.clearSPI2EIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,4($a0)
end;
procedure TINT_IFS1.setSPI2EIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,5,1
  sw      $v1,($a0)
end;
function  TINT_IFS1.getSPI2EIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,5,1
end;
procedure TINT_IFS1.setSPI2RXIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,8($a0)
end;
procedure TINT_IFS1.clearSPI2RXIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,4($a0)
end;
procedure TINT_IFS1.setSPI2RXIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,6,1
  sw      $v1,($a0)
end;
function  TINT_IFS1.getSPI2RXIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,6,1
end;
procedure TINT_IFS1.setSPI2TXIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,8($a0)
end;
procedure TINT_IFS1.clearSPI2TXIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,4($a0)
end;
procedure TINT_IFS1.setSPI2TXIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,7,1
  sw      $v1,($a0)
end;
function  TINT_IFS1.getSPI2TXIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,7,1
end;
procedure TINT_IFS1.setSPI4EIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,8($a0)
end;
procedure TINT_IFS1.clearSPI4EIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,4($a0)
end;
procedure TINT_IFS1.setSPI4EIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,8,1
  sw      $v1,($a0)
end;
function  TINT_IFS1.getSPI4EIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,8,1
end;
procedure TINT_IFS1.setSPI4RXIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,512
  sw $a1,8($a0)
end;
procedure TINT_IFS1.clearSPI4RXIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,512
  sw $a1,4($a0)
end;
procedure TINT_IFS1.setSPI4RXIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,9,1
  sw      $v1,($a0)
end;
function  TINT_IFS1.getSPI4RXIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,9,1
end;
procedure TINT_IFS1.setSPI4TXIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1024
  sw $a1,8($a0)
end;
procedure TINT_IFS1.clearSPI4TXIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1024
  sw $a1,4($a0)
end;
procedure TINT_IFS1.setSPI4TXIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,10,1
  sw      $v1,($a0)
end;
function  TINT_IFS1.getSPI4TXIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,10,1
end;
procedure TINT_IFS1.setSPI2AEIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,8($a0)
end;
procedure TINT_IFS1.clearSPI2AEIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,4($a0)
end;
procedure TINT_IFS1.setSPI2AEIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,5,1
  sw      $v1,($a0)
end;
function  TINT_IFS1.getSPI2AEIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,5,1
end;
procedure TINT_IFS1.setSPI2ARXIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,8($a0)
end;
procedure TINT_IFS1.clearSPI2ARXIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,4($a0)
end;
procedure TINT_IFS1.setSPI2ARXIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,6,1
  sw      $v1,($a0)
end;
function  TINT_IFS1.getSPI2ARXIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,6,1
end;
procedure TINT_IFS1.setSPI2ATXIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,8($a0)
end;
procedure TINT_IFS1.clearSPI2ATXIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,4($a0)
end;
procedure TINT_IFS1.setSPI2ATXIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,7,1
  sw      $v1,($a0)
end;
function  TINT_IFS1.getSPI2ATXIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,7,1
end;
procedure TINT_IFS1.setSPI3AEIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,8($a0)
end;
procedure TINT_IFS1.clearSPI3AEIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,4($a0)
end;
procedure TINT_IFS1.setSPI3AEIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,8,1
  sw      $v1,($a0)
end;
function  TINT_IFS1.getSPI3AEIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,8,1
end;
procedure TINT_IFS1.setSPI3ARXIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,512
  sw $a1,8($a0)
end;
procedure TINT_IFS1.clearSPI3ARXIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,512
  sw $a1,4($a0)
end;
procedure TINT_IFS1.setSPI3ARXIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,9,1
  sw      $v1,($a0)
end;
function  TINT_IFS1.getSPI3ARXIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,9,1
end;
procedure TINT_IFS1.setSPI3ATXIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1024
  sw $a1,8($a0)
end;
procedure TINT_IFS1.clearSPI3ATXIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1024
  sw $a1,4($a0)
end;
procedure TINT_IFS1.setSPI3ATXIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,10,1
  sw      $v1,($a0)
end;
function  TINT_IFS1.getSPI3ATXIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,10,1
end;
procedure TINT_IFS1.setI2C4BIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,8($a0)
end;
procedure TINT_IFS1.clearI2C4BIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,4($a0)
end;
procedure TINT_IFS1.setI2C4BIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,5,1
  sw      $v1,($a0)
end;
function  TINT_IFS1.getI2C4BIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,5,1
end;
procedure TINT_IFS1.setI2C4SIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,8($a0)
end;
procedure TINT_IFS1.clearI2C4SIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,4($a0)
end;
procedure TINT_IFS1.setI2C4SIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,6,1
  sw      $v1,($a0)
end;
function  TINT_IFS1.getI2C4SIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,6,1
end;
procedure TINT_IFS1.setI2C4MIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,8($a0)
end;
procedure TINT_IFS1.clearI2C4MIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,4($a0)
end;
procedure TINT_IFS1.setI2C4MIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,7,1
  sw      $v1,($a0)
end;
function  TINT_IFS1.getI2C4MIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,7,1
end;
procedure TINT_IFS1.setI2C5BIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,8($a0)
end;
procedure TINT_IFS1.clearI2C5BIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,4($a0)
end;
procedure TINT_IFS1.setI2C5BIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,8,1
  sw      $v1,($a0)
end;
function  TINT_IFS1.getI2C5BIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,8,1
end;
procedure TINT_IFS1.setI2C5SIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,512
  sw $a1,8($a0)
end;
procedure TINT_IFS1.clearI2C5SIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,512
  sw $a1,4($a0)
end;
procedure TINT_IFS1.setI2C5SIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,9,1
  sw      $v1,($a0)
end;
function  TINT_IFS1.getI2C5SIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,9,1
end;
procedure TINT_IFS1.setI2C5MIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1024
  sw $a1,8($a0)
end;
procedure TINT_IFS1.clearI2C5MIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1024
  sw $a1,4($a0)
end;
procedure TINT_IFS1.setI2C5MIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,10,1
  sw      $v1,($a0)
end;
function  TINT_IFS1.getI2C5MIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,10,1
end;
procedure TINT_IFS1.setI2C2ABIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,8($a0)
end;
procedure TINT_IFS1.clearI2C2ABIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,4($a0)
end;
procedure TINT_IFS1.setI2C2ABIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,5,1
  sw      $v1,($a0)
end;
function  TINT_IFS1.getI2C2ABIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,5,1
end;
procedure TINT_IFS1.setI2C2ASIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,8($a0)
end;
procedure TINT_IFS1.clearI2C2ASIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,4($a0)
end;
procedure TINT_IFS1.setI2C2ASIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,6,1
  sw      $v1,($a0)
end;
function  TINT_IFS1.getI2C2ASIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,6,1
end;
procedure TINT_IFS1.setI2C2AMIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,8($a0)
end;
procedure TINT_IFS1.clearI2C2AMIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,4($a0)
end;
procedure TINT_IFS1.setI2C2AMIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,7,1
  sw      $v1,($a0)
end;
function  TINT_IFS1.getI2C2AMIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,7,1
end;
procedure TINT_IFS1.setI2C3ABIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,8($a0)
end;
procedure TINT_IFS1.clearI2C3ABIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,4($a0)
end;
procedure TINT_IFS1.setI2C3ABIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,8,1
  sw      $v1,($a0)
end;
function  TINT_IFS1.getI2C3ABIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,8,1
end;
procedure TINT_IFS1.setI2C3ASIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,512
  sw $a1,8($a0)
end;
procedure TINT_IFS1.clearI2C3ASIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,512
  sw $a1,4($a0)
end;
procedure TINT_IFS1.setI2C3ASIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,9,1
  sw      $v1,($a0)
end;
function  TINT_IFS1.getI2C3ASIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,9,1
end;
procedure TINT_IFS1.setI2C3AMIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1024
  sw $a1,8($a0)
end;
procedure TINT_IFS1.clearI2C3AMIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1024
  sw $a1,4($a0)
end;
procedure TINT_IFS1.setI2C3AMIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,10,1
  sw      $v1,($a0)
end;
function  TINT_IFS1.getI2C3AMIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,10,1
end;
procedure TINT_IFS1.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TINT_IFS1.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TINT_IFS2.setIC4EIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,8($a0)
end;
procedure TINT_IFS2.clearIC4EIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,4($a0)
end;
procedure TINT_IFS2.setIC4EIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,1
  sw      $v1,($a0)
end;
function  TINT_IFS2.getIC4EIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,1
end;
procedure TINT_IFS2.setIC5EIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,8($a0)
end;
procedure TINT_IFS2.clearIC5EIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,4($a0)
end;
procedure TINT_IFS2.setIC5EIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,1,1
  sw      $v1,($a0)
end;
function  TINT_IFS2.getIC5EIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,1,1
end;
procedure TINT_IFS2.setPMPEIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,8($a0)
end;
procedure TINT_IFS2.clearPMPEIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,4($a0)
end;
procedure TINT_IFS2.setPMPEIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,2,1
  sw      $v1,($a0)
end;
function  TINT_IFS2.getPMPEIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,2,1
end;
procedure TINT_IFS2.setU1BEIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,8($a0)
end;
procedure TINT_IFS2.clearU1BEIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,4($a0)
end;
procedure TINT_IFS2.setU1BEIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,3,1
  sw      $v1,($a0)
end;
function  TINT_IFS2.getU1BEIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,3,1
end;
procedure TINT_IFS2.setU1BRXIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,8($a0)
end;
procedure TINT_IFS2.clearU1BRXIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,4($a0)
end;
procedure TINT_IFS2.setU1BRXIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,4,1
  sw      $v1,($a0)
end;
function  TINT_IFS2.getU1BRXIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,4,1
end;
procedure TINT_IFS2.setU1BTXIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,8($a0)
end;
procedure TINT_IFS2.clearU1BTXIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,4($a0)
end;
procedure TINT_IFS2.setU1BTXIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,5,1
  sw      $v1,($a0)
end;
function  TINT_IFS2.getU1BTXIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,5,1
end;
procedure TINT_IFS2.setU2BEIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,8($a0)
end;
procedure TINT_IFS2.clearU2BEIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,4($a0)
end;
procedure TINT_IFS2.setU2BEIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,6,1
  sw      $v1,($a0)
end;
function  TINT_IFS2.getU2BEIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,6,1
end;
procedure TINT_IFS2.setU2BRXIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,8($a0)
end;
procedure TINT_IFS2.clearU2BRXIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,4($a0)
end;
procedure TINT_IFS2.setU2BRXIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,7,1
  sw      $v1,($a0)
end;
function  TINT_IFS2.getU2BRXIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,7,1
end;
procedure TINT_IFS2.setU2BTXIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,8($a0)
end;
procedure TINT_IFS2.clearU2BTXIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,4($a0)
end;
procedure TINT_IFS2.setU2BTXIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,8,1
  sw      $v1,($a0)
end;
function  TINT_IFS2.getU2BTXIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,8,1
end;
procedure TINT_IFS2.setU3BEIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,512
  sw $a1,8($a0)
end;
procedure TINT_IFS2.clearU3BEIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,512
  sw $a1,4($a0)
end;
procedure TINT_IFS2.setU3BEIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,9,1
  sw      $v1,($a0)
end;
function  TINT_IFS2.getU3BEIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,9,1
end;
procedure TINT_IFS2.setU3BRXIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1024
  sw $a1,8($a0)
end;
procedure TINT_IFS2.clearU3BRXIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1024
  sw $a1,4($a0)
end;
procedure TINT_IFS2.setU3BRXIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,10,1
  sw      $v1,($a0)
end;
function  TINT_IFS2.getU3BRXIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,10,1
end;
procedure TINT_IFS2.setU3BTXIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2048
  sw $a1,8($a0)
end;
procedure TINT_IFS2.clearU3BTXIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2048
  sw $a1,4($a0)
end;
procedure TINT_IFS2.setU3BTXIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,11,1
  sw      $v1,($a0)
end;
function  TINT_IFS2.getU3BTXIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,11,1
end;
procedure TINT_IFS2.setU4EIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,8($a0)
end;
procedure TINT_IFS2.clearU4EIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,4($a0)
end;
procedure TINT_IFS2.setU4EIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,3,1
  sw      $v1,($a0)
end;
function  TINT_IFS2.getU4EIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,3,1
end;
procedure TINT_IFS2.setU4RXIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,8($a0)
end;
procedure TINT_IFS2.clearU4RXIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,4($a0)
end;
procedure TINT_IFS2.setU4RXIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,4,1
  sw      $v1,($a0)
end;
function  TINT_IFS2.getU4RXIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,4,1
end;
procedure TINT_IFS2.setU4TXIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,8($a0)
end;
procedure TINT_IFS2.clearU4TXIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,4($a0)
end;
procedure TINT_IFS2.setU4TXIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,5,1
  sw      $v1,($a0)
end;
function  TINT_IFS2.getU4TXIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,5,1
end;
procedure TINT_IFS2.setU6EIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,8($a0)
end;
procedure TINT_IFS2.clearU6EIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,4($a0)
end;
procedure TINT_IFS2.setU6EIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,6,1
  sw      $v1,($a0)
end;
function  TINT_IFS2.getU6EIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,6,1
end;
procedure TINT_IFS2.setU6RXIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,8($a0)
end;
procedure TINT_IFS2.clearU6RXIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,4($a0)
end;
procedure TINT_IFS2.setU6RXIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,7,1
  sw      $v1,($a0)
end;
function  TINT_IFS2.getU6RXIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,7,1
end;
procedure TINT_IFS2.setU6TXIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,8($a0)
end;
procedure TINT_IFS2.clearU6TXIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,4($a0)
end;
procedure TINT_IFS2.setU6TXIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,8,1
  sw      $v1,($a0)
end;
function  TINT_IFS2.getU6TXIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,8,1
end;
procedure TINT_IFS2.setU5EIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,512
  sw $a1,8($a0)
end;
procedure TINT_IFS2.clearU5EIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,512
  sw $a1,4($a0)
end;
procedure TINT_IFS2.setU5EIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,9,1
  sw      $v1,($a0)
end;
function  TINT_IFS2.getU5EIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,9,1
end;
procedure TINT_IFS2.setU5RXIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1024
  sw $a1,8($a0)
end;
procedure TINT_IFS2.clearU5RXIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1024
  sw $a1,4($a0)
end;
procedure TINT_IFS2.setU5RXIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,10,1
  sw      $v1,($a0)
end;
function  TINT_IFS2.getU5RXIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,10,1
end;
procedure TINT_IFS2.setU5TXIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2048
  sw $a1,8($a0)
end;
procedure TINT_IFS2.clearU5TXIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2048
  sw $a1,4($a0)
end;
procedure TINT_IFS2.setU5TXIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,11,1
  sw      $v1,($a0)
end;
function  TINT_IFS2.getU5TXIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,11,1
end;
procedure TINT_IFS2.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TINT_IFS2.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TINT_IEC0.setCTIE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,8($a0)
end;
procedure TINT_IEC0.clearCTIE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,4($a0)
end;
procedure TINT_IEC0.setCTIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,1
  sw      $v1,($a0)
end;
function  TINT_IEC0.getCTIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,1
end;
procedure TINT_IEC0.setCS0IE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,8($a0)
end;
procedure TINT_IEC0.clearCS0IE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,4($a0)
end;
procedure TINT_IEC0.setCS0IE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,1,1
  sw      $v1,($a0)
end;
function  TINT_IEC0.getCS0IE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,1,1
end;
procedure TINT_IEC0.setCS1IE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,8($a0)
end;
procedure TINT_IEC0.clearCS1IE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,4($a0)
end;
procedure TINT_IEC0.setCS1IE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,2,1
  sw      $v1,($a0)
end;
function  TINT_IEC0.getCS1IE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,2,1
end;
procedure TINT_IEC0.setINT0IE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,8($a0)
end;
procedure TINT_IEC0.clearINT0IE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,4($a0)
end;
procedure TINT_IEC0.setINT0IE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,3,1
  sw      $v1,($a0)
end;
function  TINT_IEC0.getINT0IE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,3,1
end;
procedure TINT_IEC0.setT1IE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,8($a0)
end;
procedure TINT_IEC0.clearT1IE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,4($a0)
end;
procedure TINT_IEC0.setT1IE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,4,1
  sw      $v1,($a0)
end;
function  TINT_IEC0.getT1IE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,4,1
end;
procedure TINT_IEC0.setIC1IE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,8($a0)
end;
procedure TINT_IEC0.clearIC1IE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,4($a0)
end;
procedure TINT_IEC0.setIC1IE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,5,1
  sw      $v1,($a0)
end;
function  TINT_IEC0.getIC1IE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,5,1
end;
procedure TINT_IEC0.setOC1IE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,8($a0)
end;
procedure TINT_IEC0.clearOC1IE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,4($a0)
end;
procedure TINT_IEC0.setOC1IE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,6,1
  sw      $v1,($a0)
end;
function  TINT_IEC0.getOC1IE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,6,1
end;
procedure TINT_IEC0.setINT1IE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,8($a0)
end;
procedure TINT_IEC0.clearINT1IE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,4($a0)
end;
procedure TINT_IEC0.setINT1IE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,7,1
  sw      $v1,($a0)
end;
function  TINT_IEC0.getINT1IE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,7,1
end;
procedure TINT_IEC0.setT2IE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,8($a0)
end;
procedure TINT_IEC0.clearT2IE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,4($a0)
end;
procedure TINT_IEC0.setT2IE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,8,1
  sw      $v1,($a0)
end;
function  TINT_IEC0.getT2IE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,8,1
end;
procedure TINT_IEC0.setIC2IE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,512
  sw $a1,8($a0)
end;
procedure TINT_IEC0.clearIC2IE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,512
  sw $a1,4($a0)
end;
procedure TINT_IEC0.setIC2IE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,9,1
  sw      $v1,($a0)
end;
function  TINT_IEC0.getIC2IE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,9,1
end;
procedure TINT_IEC0.setOC2IE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1024
  sw $a1,8($a0)
end;
procedure TINT_IEC0.clearOC2IE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1024
  sw $a1,4($a0)
end;
procedure TINT_IEC0.setOC2IE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,10,1
  sw      $v1,($a0)
end;
function  TINT_IEC0.getOC2IE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,10,1
end;
procedure TINT_IEC0.setINT2IE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2048
  sw $a1,8($a0)
end;
procedure TINT_IEC0.clearINT2IE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2048
  sw $a1,4($a0)
end;
procedure TINT_IEC0.setINT2IE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,11,1
  sw      $v1,($a0)
end;
function  TINT_IEC0.getINT2IE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,11,1
end;
procedure TINT_IEC0.setT3IE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4096
  sw $a1,8($a0)
end;
procedure TINT_IEC0.clearT3IE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4096
  sw $a1,4($a0)
end;
procedure TINT_IEC0.setT3IE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,12,1
  sw      $v1,($a0)
end;
function  TINT_IEC0.getT3IE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,12,1
end;
procedure TINT_IEC0.setIC3IE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,8($a0)
end;
procedure TINT_IEC0.clearIC3IE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,4($a0)
end;
procedure TINT_IEC0.setIC3IE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,13,1
  sw      $v1,($a0)
end;
function  TINT_IEC0.getIC3IE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,13,1
end;
procedure TINT_IEC0.setOC3IE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16384
  sw $a1,8($a0)
end;
procedure TINT_IEC0.clearOC3IE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16384
  sw $a1,4($a0)
end;
procedure TINT_IEC0.setOC3IE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,14,1
  sw      $v1,($a0)
end;
function  TINT_IEC0.getOC3IE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,14,1
end;
procedure TINT_IEC0.setINT3IE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,8($a0)
end;
procedure TINT_IEC0.clearINT3IE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,4($a0)
end;
procedure TINT_IEC0.setINT3IE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,15,1
  sw      $v1,($a0)
end;
function  TINT_IEC0.getINT3IE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,15,1
end;
procedure TINT_IEC0.setT4IE; assembler; nostackframe; inline;
asm
  lui     $a1,1
  sw $a1,8($a0)
end;
procedure TINT_IEC0.clearT4IE; assembler; nostackframe; inline;
asm
  lui     $a1,1
  sw $a1,4($a0)
end;
procedure TINT_IEC0.setT4IE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,16,1
  sw      $v1,($a0)
end;
function  TINT_IEC0.getT4IE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,16,1
end;
procedure TINT_IEC0.setIC4IE; assembler; nostackframe; inline;
asm
  lui     $a1,2
  sw $a1,8($a0)
end;
procedure TINT_IEC0.clearIC4IE; assembler; nostackframe; inline;
asm
  lui     $a1,2
  sw $a1,4($a0)
end;
procedure TINT_IEC0.setIC4IE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,17,1
  sw      $v1,($a0)
end;
function  TINT_IEC0.getIC4IE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,17,1
end;
procedure TINT_IEC0.setOC4IE; assembler; nostackframe; inline;
asm
  lui     $a1,4
  sw $a1,8($a0)
end;
procedure TINT_IEC0.clearOC4IE; assembler; nostackframe; inline;
asm
  lui     $a1,4
  sw $a1,4($a0)
end;
procedure TINT_IEC0.setOC4IE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,18,1
  sw      $v1,($a0)
end;
function  TINT_IEC0.getOC4IE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,18,1
end;
procedure TINT_IEC0.setINT4IE; assembler; nostackframe; inline;
asm
  lui     $a1,8
  sw $a1,8($a0)
end;
procedure TINT_IEC0.clearINT4IE; assembler; nostackframe; inline;
asm
  lui     $a1,8
  sw $a1,4($a0)
end;
procedure TINT_IEC0.setINT4IE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,19,1
  sw      $v1,($a0)
end;
function  TINT_IEC0.getINT4IE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,19,1
end;
procedure TINT_IEC0.setT5IE; assembler; nostackframe; inline;
asm
  lui     $a1,16
  sw $a1,8($a0)
end;
procedure TINT_IEC0.clearT5IE; assembler; nostackframe; inline;
asm
  lui     $a1,16
  sw $a1,4($a0)
end;
procedure TINT_IEC0.setT5IE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,20,1
  sw      $v1,($a0)
end;
function  TINT_IEC0.getT5IE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,20,1
end;
procedure TINT_IEC0.setIC5IE; assembler; nostackframe; inline;
asm
  lui     $a1,32
  sw $a1,8($a0)
end;
procedure TINT_IEC0.clearIC5IE; assembler; nostackframe; inline;
asm
  lui     $a1,32
  sw $a1,4($a0)
end;
procedure TINT_IEC0.setIC5IE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,21,1
  sw      $v1,($a0)
end;
function  TINT_IEC0.getIC5IE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,21,1
end;
procedure TINT_IEC0.setOC5IE; assembler; nostackframe; inline;
asm
  lui     $a1,64
  sw $a1,8($a0)
end;
procedure TINT_IEC0.clearOC5IE; assembler; nostackframe; inline;
asm
  lui     $a1,64
  sw $a1,4($a0)
end;
procedure TINT_IEC0.setOC5IE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,22,1
  sw      $v1,($a0)
end;
function  TINT_IEC0.getOC5IE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,22,1
end;
procedure TINT_IEC0.setSPI1EIE; assembler; nostackframe; inline;
asm
  lui     $a1,128
  sw $a1,8($a0)
end;
procedure TINT_IEC0.clearSPI1EIE; assembler; nostackframe; inline;
asm
  lui     $a1,128
  sw $a1,4($a0)
end;
procedure TINT_IEC0.setSPI1EIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,23,1
  sw      $v1,($a0)
end;
function  TINT_IEC0.getSPI1EIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,23,1
end;
procedure TINT_IEC0.setSPI1RXIE; assembler; nostackframe; inline;
asm
  lui     $a1,256
  sw $a1,8($a0)
end;
procedure TINT_IEC0.clearSPI1RXIE; assembler; nostackframe; inline;
asm
  lui     $a1,256
  sw $a1,4($a0)
end;
procedure TINT_IEC0.setSPI1RXIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,24,1
  sw      $v1,($a0)
end;
function  TINT_IEC0.getSPI1RXIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,24,1
end;
procedure TINT_IEC0.setSPI1TXIE; assembler; nostackframe; inline;
asm
  lui     $a1,512
  sw $a1,8($a0)
end;
procedure TINT_IEC0.clearSPI1TXIE; assembler; nostackframe; inline;
asm
  lui     $a1,512
  sw $a1,4($a0)
end;
procedure TINT_IEC0.setSPI1TXIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,25,1
  sw      $v1,($a0)
end;
function  TINT_IEC0.getSPI1TXIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,25,1
end;
procedure TINT_IEC0.setU1EIE; assembler; nostackframe; inline;
asm
  lui     $a1,1024
  sw $a1,8($a0)
end;
procedure TINT_IEC0.clearU1EIE; assembler; nostackframe; inline;
asm
  lui     $a1,1024
  sw $a1,4($a0)
end;
procedure TINT_IEC0.setU1EIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,26,1
  sw      $v1,($a0)
end;
function  TINT_IEC0.getU1EIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,26,1
end;
procedure TINT_IEC0.setU1RXIE; assembler; nostackframe; inline;
asm
  lui     $a1,2048
  sw $a1,8($a0)
end;
procedure TINT_IEC0.clearU1RXIE; assembler; nostackframe; inline;
asm
  lui     $a1,2048
  sw $a1,4($a0)
end;
procedure TINT_IEC0.setU1RXIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,27,1
  sw      $v1,($a0)
end;
function  TINT_IEC0.getU1RXIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,27,1
end;
procedure TINT_IEC0.setU1TXIE; assembler; nostackframe; inline;
asm
  lui     $a1,4096
  sw $a1,8($a0)
end;
procedure TINT_IEC0.clearU1TXIE; assembler; nostackframe; inline;
asm
  lui     $a1,4096
  sw $a1,4($a0)
end;
procedure TINT_IEC0.setU1TXIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,28,1
  sw      $v1,($a0)
end;
function  TINT_IEC0.getU1TXIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,28,1
end;
procedure TINT_IEC0.setI2C1BIE; assembler; nostackframe; inline;
asm
  lui     $a1,8192
  sw $a1,8($a0)
end;
procedure TINT_IEC0.clearI2C1BIE; assembler; nostackframe; inline;
asm
  lui     $a1,8192
  sw $a1,4($a0)
end;
procedure TINT_IEC0.setI2C1BIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,29,1
  sw      $v1,($a0)
end;
function  TINT_IEC0.getI2C1BIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,29,1
end;
procedure TINT_IEC0.setI2C1SIE; assembler; nostackframe; inline;
asm
  lui     $a1,16384
  sw $a1,8($a0)
end;
procedure TINT_IEC0.clearI2C1SIE; assembler; nostackframe; inline;
asm
  lui     $a1,16384
  sw $a1,4($a0)
end;
procedure TINT_IEC0.setI2C1SIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,30,1
  sw      $v1,($a0)
end;
function  TINT_IEC0.getI2C1SIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,30,1
end;
procedure TINT_IEC0.setI2C1MIE; assembler; nostackframe; inline;
asm
  lui     $a1,32768
  sw $a1,8($a0)
end;
procedure TINT_IEC0.clearI2C1MIE; assembler; nostackframe; inline;
asm
  lui     $a1,32768
  sw $a1,4($a0)
end;
procedure TINT_IEC0.setI2C1MIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,31,1
  sw      $v1,($a0)
end;
function  TINT_IEC0.getI2C1MIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,31,1
end;
procedure TINT_IEC0.setU1AEIE; assembler; nostackframe; inline;
asm
  lui     $a1,1024
  sw $a1,8($a0)
end;
procedure TINT_IEC0.clearU1AEIE; assembler; nostackframe; inline;
asm
  lui     $a1,1024
  sw $a1,4($a0)
end;
procedure TINT_IEC0.setU1AEIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,26,1
  sw      $v1,($a0)
end;
function  TINT_IEC0.getU1AEIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,26,1
end;
procedure TINT_IEC0.setU1ARXIE; assembler; nostackframe; inline;
asm
  lui     $a1,2048
  sw $a1,8($a0)
end;
procedure TINT_IEC0.clearU1ARXIE; assembler; nostackframe; inline;
asm
  lui     $a1,2048
  sw $a1,4($a0)
end;
procedure TINT_IEC0.setU1ARXIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,27,1
  sw      $v1,($a0)
end;
function  TINT_IEC0.getU1ARXIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,27,1
end;
procedure TINT_IEC0.setU1ATXIE; assembler; nostackframe; inline;
asm
  lui     $a1,4096
  sw $a1,8($a0)
end;
procedure TINT_IEC0.clearU1ATXIE; assembler; nostackframe; inline;
asm
  lui     $a1,4096
  sw $a1,4($a0)
end;
procedure TINT_IEC0.setU1ATXIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,28,1
  sw      $v1,($a0)
end;
function  TINT_IEC0.getU1ATXIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,28,1
end;
procedure TINT_IEC0.setSPI3EIE; assembler; nostackframe; inline;
asm
  lui     $a1,1024
  sw $a1,8($a0)
end;
procedure TINT_IEC0.clearSPI3EIE; assembler; nostackframe; inline;
asm
  lui     $a1,1024
  sw $a1,4($a0)
end;
procedure TINT_IEC0.setSPI3EIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,26,1
  sw      $v1,($a0)
end;
function  TINT_IEC0.getSPI3EIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,26,1
end;
procedure TINT_IEC0.setSPI3RXIE; assembler; nostackframe; inline;
asm
  lui     $a1,2048
  sw $a1,8($a0)
end;
procedure TINT_IEC0.clearSPI3RXIE; assembler; nostackframe; inline;
asm
  lui     $a1,2048
  sw $a1,4($a0)
end;
procedure TINT_IEC0.setSPI3RXIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,27,1
  sw      $v1,($a0)
end;
function  TINT_IEC0.getSPI3RXIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,27,1
end;
procedure TINT_IEC0.setSPI3TXIE; assembler; nostackframe; inline;
asm
  lui     $a1,4096
  sw $a1,8($a0)
end;
procedure TINT_IEC0.clearSPI3TXIE; assembler; nostackframe; inline;
asm
  lui     $a1,4096
  sw $a1,4($a0)
end;
procedure TINT_IEC0.setSPI3TXIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,28,1
  sw      $v1,($a0)
end;
function  TINT_IEC0.getSPI3TXIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,28,1
end;
procedure TINT_IEC0.setSPI1AEIE; assembler; nostackframe; inline;
asm
  lui     $a1,1024
  sw $a1,8($a0)
end;
procedure TINT_IEC0.clearSPI1AEIE; assembler; nostackframe; inline;
asm
  lui     $a1,1024
  sw $a1,4($a0)
end;
procedure TINT_IEC0.setSPI1AEIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,26,1
  sw      $v1,($a0)
end;
function  TINT_IEC0.getSPI1AEIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,26,1
end;
procedure TINT_IEC0.setSPI1ARXIE; assembler; nostackframe; inline;
asm
  lui     $a1,2048
  sw $a1,8($a0)
end;
procedure TINT_IEC0.clearSPI1ARXIE; assembler; nostackframe; inline;
asm
  lui     $a1,2048
  sw $a1,4($a0)
end;
procedure TINT_IEC0.setSPI1ARXIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,27,1
  sw      $v1,($a0)
end;
function  TINT_IEC0.getSPI1ARXIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,27,1
end;
procedure TINT_IEC0.setSPI1ATXIE; assembler; nostackframe; inline;
asm
  lui     $a1,4096
  sw $a1,8($a0)
end;
procedure TINT_IEC0.clearSPI1ATXIE; assembler; nostackframe; inline;
asm
  lui     $a1,4096
  sw $a1,4($a0)
end;
procedure TINT_IEC0.setSPI1ATXIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,28,1
  sw      $v1,($a0)
end;
function  TINT_IEC0.getSPI1ATXIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,28,1
end;
procedure TINT_IEC0.setI2C3BIE; assembler; nostackframe; inline;
asm
  lui     $a1,1024
  sw $a1,8($a0)
end;
procedure TINT_IEC0.clearI2C3BIE; assembler; nostackframe; inline;
asm
  lui     $a1,1024
  sw $a1,4($a0)
end;
procedure TINT_IEC0.setI2C3BIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,26,1
  sw      $v1,($a0)
end;
function  TINT_IEC0.getI2C3BIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,26,1
end;
procedure TINT_IEC0.setI2C3SIE; assembler; nostackframe; inline;
asm
  lui     $a1,2048
  sw $a1,8($a0)
end;
procedure TINT_IEC0.clearI2C3SIE; assembler; nostackframe; inline;
asm
  lui     $a1,2048
  sw $a1,4($a0)
end;
procedure TINT_IEC0.setI2C3SIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,27,1
  sw      $v1,($a0)
end;
function  TINT_IEC0.getI2C3SIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,27,1
end;
procedure TINT_IEC0.setI2C3MIE; assembler; nostackframe; inline;
asm
  lui     $a1,4096
  sw $a1,8($a0)
end;
procedure TINT_IEC0.clearI2C3MIE; assembler; nostackframe; inline;
asm
  lui     $a1,4096
  sw $a1,4($a0)
end;
procedure TINT_IEC0.setI2C3MIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,28,1
  sw      $v1,($a0)
end;
function  TINT_IEC0.getI2C3MIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,28,1
end;
procedure TINT_IEC0.setI2C1ABIE; assembler; nostackframe; inline;
asm
  lui     $a1,1024
  sw $a1,8($a0)
end;
procedure TINT_IEC0.clearI2C1ABIE; assembler; nostackframe; inline;
asm
  lui     $a1,1024
  sw $a1,4($a0)
end;
procedure TINT_IEC0.setI2C1ABIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,26,1
  sw      $v1,($a0)
end;
function  TINT_IEC0.getI2C1ABIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,26,1
end;
procedure TINT_IEC0.setI2C1ASIE; assembler; nostackframe; inline;
asm
  lui     $a1,2048
  sw $a1,8($a0)
end;
procedure TINT_IEC0.clearI2C1ASIE; assembler; nostackframe; inline;
asm
  lui     $a1,2048
  sw $a1,4($a0)
end;
procedure TINT_IEC0.setI2C1ASIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,27,1
  sw      $v1,($a0)
end;
function  TINT_IEC0.getI2C1ASIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,27,1
end;
procedure TINT_IEC0.setI2C1AMIE; assembler; nostackframe; inline;
asm
  lui     $a1,4096
  sw $a1,8($a0)
end;
procedure TINT_IEC0.clearI2C1AMIE; assembler; nostackframe; inline;
asm
  lui     $a1,4096
  sw $a1,4($a0)
end;
procedure TINT_IEC0.setI2C1AMIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,28,1
  sw      $v1,($a0)
end;
function  TINT_IEC0.getI2C1AMIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,28,1
end;
procedure TINT_IEC0.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TINT_IEC0.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TINT_IEC1.setCNIE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,8($a0)
end;
procedure TINT_IEC1.clearCNIE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,4($a0)
end;
procedure TINT_IEC1.setCNIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,1
  sw      $v1,($a0)
end;
function  TINT_IEC1.getCNIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,1
end;
procedure TINT_IEC1.setAD1IE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,8($a0)
end;
procedure TINT_IEC1.clearAD1IE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,4($a0)
end;
procedure TINT_IEC1.setAD1IE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,1,1
  sw      $v1,($a0)
end;
function  TINT_IEC1.getAD1IE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,1,1
end;
procedure TINT_IEC1.setPMPIE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,8($a0)
end;
procedure TINT_IEC1.clearPMPIE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,4($a0)
end;
procedure TINT_IEC1.setPMPIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,2,1
  sw      $v1,($a0)
end;
function  TINT_IEC1.getPMPIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,2,1
end;
procedure TINT_IEC1.setCMP1IE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,8($a0)
end;
procedure TINT_IEC1.clearCMP1IE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,4($a0)
end;
procedure TINT_IEC1.setCMP1IE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,3,1
  sw      $v1,($a0)
end;
function  TINT_IEC1.getCMP1IE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,3,1
end;
procedure TINT_IEC1.setCMP2IE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,8($a0)
end;
procedure TINT_IEC1.clearCMP2IE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,4($a0)
end;
procedure TINT_IEC1.setCMP2IE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,4,1
  sw      $v1,($a0)
end;
function  TINT_IEC1.getCMP2IE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,4,1
end;
procedure TINT_IEC1.setU3EIE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,8($a0)
end;
procedure TINT_IEC1.clearU3EIE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,4($a0)
end;
procedure TINT_IEC1.setU3EIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,5,1
  sw      $v1,($a0)
end;
function  TINT_IEC1.getU3EIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,5,1
end;
procedure TINT_IEC1.setU3RXIE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,8($a0)
end;
procedure TINT_IEC1.clearU3RXIE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,4($a0)
end;
procedure TINT_IEC1.setU3RXIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,6,1
  sw      $v1,($a0)
end;
function  TINT_IEC1.getU3RXIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,6,1
end;
procedure TINT_IEC1.setU3TXIE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,8($a0)
end;
procedure TINT_IEC1.clearU3TXIE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,4($a0)
end;
procedure TINT_IEC1.setU3TXIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,7,1
  sw      $v1,($a0)
end;
function  TINT_IEC1.getU3TXIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,7,1
end;
procedure TINT_IEC1.setU2EIE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,8($a0)
end;
procedure TINT_IEC1.clearU2EIE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,4($a0)
end;
procedure TINT_IEC1.setU2EIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,8,1
  sw      $v1,($a0)
end;
function  TINT_IEC1.getU2EIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,8,1
end;
procedure TINT_IEC1.setU2RXIE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,512
  sw $a1,8($a0)
end;
procedure TINT_IEC1.clearU2RXIE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,512
  sw $a1,4($a0)
end;
procedure TINT_IEC1.setU2RXIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,9,1
  sw      $v1,($a0)
end;
function  TINT_IEC1.getU2RXIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,9,1
end;
procedure TINT_IEC1.setU2TXIE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1024
  sw $a1,8($a0)
end;
procedure TINT_IEC1.clearU2TXIE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1024
  sw $a1,4($a0)
end;
procedure TINT_IEC1.setU2TXIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,10,1
  sw      $v1,($a0)
end;
function  TINT_IEC1.getU2TXIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,10,1
end;
procedure TINT_IEC1.setI2C2BIE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2048
  sw $a1,8($a0)
end;
procedure TINT_IEC1.clearI2C2BIE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2048
  sw $a1,4($a0)
end;
procedure TINT_IEC1.setI2C2BIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,11,1
  sw      $v1,($a0)
end;
function  TINT_IEC1.getI2C2BIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,11,1
end;
procedure TINT_IEC1.setI2C2SIE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4096
  sw $a1,8($a0)
end;
procedure TINT_IEC1.clearI2C2SIE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4096
  sw $a1,4($a0)
end;
procedure TINT_IEC1.setI2C2SIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,12,1
  sw      $v1,($a0)
end;
function  TINT_IEC1.getI2C2SIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,12,1
end;
procedure TINT_IEC1.setI2C2MIE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,8($a0)
end;
procedure TINT_IEC1.clearI2C2MIE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,4($a0)
end;
procedure TINT_IEC1.setI2C2MIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,13,1
  sw      $v1,($a0)
end;
function  TINT_IEC1.getI2C2MIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,13,1
end;
procedure TINT_IEC1.setFSCMIE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16384
  sw $a1,8($a0)
end;
procedure TINT_IEC1.clearFSCMIE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16384
  sw $a1,4($a0)
end;
procedure TINT_IEC1.setFSCMIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,14,1
  sw      $v1,($a0)
end;
function  TINT_IEC1.getFSCMIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,14,1
end;
procedure TINT_IEC1.setRTCCIE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,8($a0)
end;
procedure TINT_IEC1.clearRTCCIE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,4($a0)
end;
procedure TINT_IEC1.setRTCCIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,15,1
  sw      $v1,($a0)
end;
function  TINT_IEC1.getRTCCIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,15,1
end;
procedure TINT_IEC1.setDMA0IE; assembler; nostackframe; inline;
asm
  lui     $a1,1
  sw $a1,8($a0)
end;
procedure TINT_IEC1.clearDMA0IE; assembler; nostackframe; inline;
asm
  lui     $a1,1
  sw $a1,4($a0)
end;
procedure TINT_IEC1.setDMA0IE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,16,1
  sw      $v1,($a0)
end;
function  TINT_IEC1.getDMA0IE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,16,1
end;
procedure TINT_IEC1.setDMA1IE; assembler; nostackframe; inline;
asm
  lui     $a1,2
  sw $a1,8($a0)
end;
procedure TINT_IEC1.clearDMA1IE; assembler; nostackframe; inline;
asm
  lui     $a1,2
  sw $a1,4($a0)
end;
procedure TINT_IEC1.setDMA1IE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,17,1
  sw      $v1,($a0)
end;
function  TINT_IEC1.getDMA1IE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,17,1
end;
procedure TINT_IEC1.setDMA2IE; assembler; nostackframe; inline;
asm
  lui     $a1,4
  sw $a1,8($a0)
end;
procedure TINT_IEC1.clearDMA2IE; assembler; nostackframe; inline;
asm
  lui     $a1,4
  sw $a1,4($a0)
end;
procedure TINT_IEC1.setDMA2IE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,18,1
  sw      $v1,($a0)
end;
function  TINT_IEC1.getDMA2IE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,18,1
end;
procedure TINT_IEC1.setDMA3IE; assembler; nostackframe; inline;
asm
  lui     $a1,8
  sw $a1,8($a0)
end;
procedure TINT_IEC1.clearDMA3IE; assembler; nostackframe; inline;
asm
  lui     $a1,8
  sw $a1,4($a0)
end;
procedure TINT_IEC1.setDMA3IE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,19,1
  sw      $v1,($a0)
end;
function  TINT_IEC1.getDMA3IE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,19,1
end;
procedure TINT_IEC1.setDMA4IE; assembler; nostackframe; inline;
asm
  lui     $a1,16
  sw $a1,8($a0)
end;
procedure TINT_IEC1.clearDMA4IE; assembler; nostackframe; inline;
asm
  lui     $a1,16
  sw $a1,4($a0)
end;
procedure TINT_IEC1.setDMA4IE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,20,1
  sw      $v1,($a0)
end;
function  TINT_IEC1.getDMA4IE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,20,1
end;
procedure TINT_IEC1.setDMA5IE; assembler; nostackframe; inline;
asm
  lui     $a1,32
  sw $a1,8($a0)
end;
procedure TINT_IEC1.clearDMA5IE; assembler; nostackframe; inline;
asm
  lui     $a1,32
  sw $a1,4($a0)
end;
procedure TINT_IEC1.setDMA5IE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,21,1
  sw      $v1,($a0)
end;
function  TINT_IEC1.getDMA5IE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,21,1
end;
procedure TINT_IEC1.setDMA6IE; assembler; nostackframe; inline;
asm
  lui     $a1,64
  sw $a1,8($a0)
end;
procedure TINT_IEC1.clearDMA6IE; assembler; nostackframe; inline;
asm
  lui     $a1,64
  sw $a1,4($a0)
end;
procedure TINT_IEC1.setDMA6IE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,22,1
  sw      $v1,($a0)
end;
function  TINT_IEC1.getDMA6IE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,22,1
end;
procedure TINT_IEC1.setDMA7IE; assembler; nostackframe; inline;
asm
  lui     $a1,128
  sw $a1,8($a0)
end;
procedure TINT_IEC1.clearDMA7IE; assembler; nostackframe; inline;
asm
  lui     $a1,128
  sw $a1,4($a0)
end;
procedure TINT_IEC1.setDMA7IE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,23,1
  sw      $v1,($a0)
end;
function  TINT_IEC1.getDMA7IE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,23,1
end;
procedure TINT_IEC1.setFCEIE; assembler; nostackframe; inline;
asm
  lui     $a1,256
  sw $a1,8($a0)
end;
procedure TINT_IEC1.clearFCEIE; assembler; nostackframe; inline;
asm
  lui     $a1,256
  sw $a1,4($a0)
end;
procedure TINT_IEC1.setFCEIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,24,1
  sw      $v1,($a0)
end;
function  TINT_IEC1.getFCEIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,24,1
end;
procedure TINT_IEC1.setUSBIE; assembler; nostackframe; inline;
asm
  lui     $a1,512
  sw $a1,8($a0)
end;
procedure TINT_IEC1.clearUSBIE; assembler; nostackframe; inline;
asm
  lui     $a1,512
  sw $a1,4($a0)
end;
procedure TINT_IEC1.setUSBIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,25,1
  sw      $v1,($a0)
end;
function  TINT_IEC1.getUSBIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,25,1
end;
procedure TINT_IEC1.setCAN1IE; assembler; nostackframe; inline;
asm
  lui     $a1,1024
  sw $a1,8($a0)
end;
procedure TINT_IEC1.clearCAN1IE; assembler; nostackframe; inline;
asm
  lui     $a1,1024
  sw $a1,4($a0)
end;
procedure TINT_IEC1.setCAN1IE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,26,1
  sw      $v1,($a0)
end;
function  TINT_IEC1.getCAN1IE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,26,1
end;
procedure TINT_IEC1.setIC1EIE; assembler; nostackframe; inline;
asm
  lui     $a1,8192
  sw $a1,8($a0)
end;
procedure TINT_IEC1.clearIC1EIE; assembler; nostackframe; inline;
asm
  lui     $a1,8192
  sw $a1,4($a0)
end;
procedure TINT_IEC1.setIC1EIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,29,1
  sw      $v1,($a0)
end;
function  TINT_IEC1.getIC1EIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,29,1
end;
procedure TINT_IEC1.setIC2EIE; assembler; nostackframe; inline;
asm
  lui     $a1,16384
  sw $a1,8($a0)
end;
procedure TINT_IEC1.clearIC2EIE; assembler; nostackframe; inline;
asm
  lui     $a1,16384
  sw $a1,4($a0)
end;
procedure TINT_IEC1.setIC2EIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,30,1
  sw      $v1,($a0)
end;
function  TINT_IEC1.getIC2EIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,30,1
end;
procedure TINT_IEC1.setIC3EIE; assembler; nostackframe; inline;
asm
  lui     $a1,32768
  sw $a1,8($a0)
end;
procedure TINT_IEC1.clearIC3EIE; assembler; nostackframe; inline;
asm
  lui     $a1,32768
  sw $a1,4($a0)
end;
procedure TINT_IEC1.setIC3EIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,31,1
  sw      $v1,($a0)
end;
function  TINT_IEC1.getIC3EIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,31,1
end;
procedure TINT_IEC1.setU2AEIE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,8($a0)
end;
procedure TINT_IEC1.clearU2AEIE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,4($a0)
end;
procedure TINT_IEC1.setU2AEIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,5,1
  sw      $v1,($a0)
end;
function  TINT_IEC1.getU2AEIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,5,1
end;
procedure TINT_IEC1.setU2ARXIE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,8($a0)
end;
procedure TINT_IEC1.clearU2ARXIE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,4($a0)
end;
procedure TINT_IEC1.setU2ARXIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,6,1
  sw      $v1,($a0)
end;
function  TINT_IEC1.getU2ARXIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,6,1
end;
procedure TINT_IEC1.setU2ATXIE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,8($a0)
end;
procedure TINT_IEC1.clearU2ATXIE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,4($a0)
end;
procedure TINT_IEC1.setU2ATXIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,7,1
  sw      $v1,($a0)
end;
function  TINT_IEC1.getU2ATXIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,7,1
end;
procedure TINT_IEC1.setU3AEIE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,8($a0)
end;
procedure TINT_IEC1.clearU3AEIE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,4($a0)
end;
procedure TINT_IEC1.setU3AEIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,8,1
  sw      $v1,($a0)
end;
function  TINT_IEC1.getU3AEIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,8,1
end;
procedure TINT_IEC1.setU3ARXIE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,512
  sw $a1,8($a0)
end;
procedure TINT_IEC1.clearU3ARXIE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,512
  sw $a1,4($a0)
end;
procedure TINT_IEC1.setU3ARXIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,9,1
  sw      $v1,($a0)
end;
function  TINT_IEC1.getU3ARXIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,9,1
end;
procedure TINT_IEC1.setU3ATXIE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1024
  sw $a1,8($a0)
end;
procedure TINT_IEC1.clearU3ATXIE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1024
  sw $a1,4($a0)
end;
procedure TINT_IEC1.setU3ATXIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,10,1
  sw      $v1,($a0)
end;
function  TINT_IEC1.getU3ATXIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,10,1
end;
procedure TINT_IEC1.setSPI2EIE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,8($a0)
end;
procedure TINT_IEC1.clearSPI2EIE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,4($a0)
end;
procedure TINT_IEC1.setSPI2EIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,5,1
  sw      $v1,($a0)
end;
function  TINT_IEC1.getSPI2EIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,5,1
end;
procedure TINT_IEC1.setSPI2RXIE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,8($a0)
end;
procedure TINT_IEC1.clearSPI2RXIE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,4($a0)
end;
procedure TINT_IEC1.setSPI2RXIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,6,1
  sw      $v1,($a0)
end;
function  TINT_IEC1.getSPI2RXIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,6,1
end;
procedure TINT_IEC1.setSPI2TXIE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,8($a0)
end;
procedure TINT_IEC1.clearSPI2TXIE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,4($a0)
end;
procedure TINT_IEC1.setSPI2TXIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,7,1
  sw      $v1,($a0)
end;
function  TINT_IEC1.getSPI2TXIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,7,1
end;
procedure TINT_IEC1.setSPI4EIE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,8($a0)
end;
procedure TINT_IEC1.clearSPI4EIE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,4($a0)
end;
procedure TINT_IEC1.setSPI4EIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,8,1
  sw      $v1,($a0)
end;
function  TINT_IEC1.getSPI4EIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,8,1
end;
procedure TINT_IEC1.setSPI4RXIE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,512
  sw $a1,8($a0)
end;
procedure TINT_IEC1.clearSPI4RXIE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,512
  sw $a1,4($a0)
end;
procedure TINT_IEC1.setSPI4RXIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,9,1
  sw      $v1,($a0)
end;
function  TINT_IEC1.getSPI4RXIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,9,1
end;
procedure TINT_IEC1.setSPI4TXIE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1024
  sw $a1,8($a0)
end;
procedure TINT_IEC1.clearSPI4TXIE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1024
  sw $a1,4($a0)
end;
procedure TINT_IEC1.setSPI4TXIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,10,1
  sw      $v1,($a0)
end;
function  TINT_IEC1.getSPI4TXIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,10,1
end;
procedure TINT_IEC1.setSPI2AEIE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,8($a0)
end;
procedure TINT_IEC1.clearSPI2AEIE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,4($a0)
end;
procedure TINT_IEC1.setSPI2AEIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,5,1
  sw      $v1,($a0)
end;
function  TINT_IEC1.getSPI2AEIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,5,1
end;
procedure TINT_IEC1.setSPI2ARXIE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,8($a0)
end;
procedure TINT_IEC1.clearSPI2ARXIE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,4($a0)
end;
procedure TINT_IEC1.setSPI2ARXIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,6,1
  sw      $v1,($a0)
end;
function  TINT_IEC1.getSPI2ARXIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,6,1
end;
procedure TINT_IEC1.setSPI2ATXIE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,8($a0)
end;
procedure TINT_IEC1.clearSPI2ATXIE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,4($a0)
end;
procedure TINT_IEC1.setSPI2ATXIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,7,1
  sw      $v1,($a0)
end;
function  TINT_IEC1.getSPI2ATXIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,7,1
end;
procedure TINT_IEC1.setSPI3AEIE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,8($a0)
end;
procedure TINT_IEC1.clearSPI3AEIE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,4($a0)
end;
procedure TINT_IEC1.setSPI3AEIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,8,1
  sw      $v1,($a0)
end;
function  TINT_IEC1.getSPI3AEIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,8,1
end;
procedure TINT_IEC1.setSPI3ARXIE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,512
  sw $a1,8($a0)
end;
procedure TINT_IEC1.clearSPI3ARXIE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,512
  sw $a1,4($a0)
end;
procedure TINT_IEC1.setSPI3ARXIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,9,1
  sw      $v1,($a0)
end;
function  TINT_IEC1.getSPI3ARXIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,9,1
end;
procedure TINT_IEC1.setSPI3ATXIE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1024
  sw $a1,8($a0)
end;
procedure TINT_IEC1.clearSPI3ATXIE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1024
  sw $a1,4($a0)
end;
procedure TINT_IEC1.setSPI3ATXIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,10,1
  sw      $v1,($a0)
end;
function  TINT_IEC1.getSPI3ATXIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,10,1
end;
procedure TINT_IEC1.setI2C4BIE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,8($a0)
end;
procedure TINT_IEC1.clearI2C4BIE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,4($a0)
end;
procedure TINT_IEC1.setI2C4BIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,5,1
  sw      $v1,($a0)
end;
function  TINT_IEC1.getI2C4BIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,5,1
end;
procedure TINT_IEC1.setI2C4SIE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,8($a0)
end;
procedure TINT_IEC1.clearI2C4SIE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,4($a0)
end;
procedure TINT_IEC1.setI2C4SIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,6,1
  sw      $v1,($a0)
end;
function  TINT_IEC1.getI2C4SIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,6,1
end;
procedure TINT_IEC1.setI2C4MIE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,8($a0)
end;
procedure TINT_IEC1.clearI2C4MIE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,4($a0)
end;
procedure TINT_IEC1.setI2C4MIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,7,1
  sw      $v1,($a0)
end;
function  TINT_IEC1.getI2C4MIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,7,1
end;
procedure TINT_IEC1.setI2C5BIE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,8($a0)
end;
procedure TINT_IEC1.clearI2C5BIE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,4($a0)
end;
procedure TINT_IEC1.setI2C5BIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,8,1
  sw      $v1,($a0)
end;
function  TINT_IEC1.getI2C5BIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,8,1
end;
procedure TINT_IEC1.setI2C5SIE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,512
  sw $a1,8($a0)
end;
procedure TINT_IEC1.clearI2C5SIE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,512
  sw $a1,4($a0)
end;
procedure TINT_IEC1.setI2C5SIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,9,1
  sw      $v1,($a0)
end;
function  TINT_IEC1.getI2C5SIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,9,1
end;
procedure TINT_IEC1.setI2C5MIE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1024
  sw $a1,8($a0)
end;
procedure TINT_IEC1.clearI2C5MIE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1024
  sw $a1,4($a0)
end;
procedure TINT_IEC1.setI2C5MIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,10,1
  sw      $v1,($a0)
end;
function  TINT_IEC1.getI2C5MIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,10,1
end;
procedure TINT_IEC1.setI2C2ABIE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,8($a0)
end;
procedure TINT_IEC1.clearI2C2ABIE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,4($a0)
end;
procedure TINT_IEC1.setI2C2ABIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,5,1
  sw      $v1,($a0)
end;
function  TINT_IEC1.getI2C2ABIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,5,1
end;
procedure TINT_IEC1.setI2C2ASIE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,8($a0)
end;
procedure TINT_IEC1.clearI2C2ASIE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,4($a0)
end;
procedure TINT_IEC1.setI2C2ASIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,6,1
  sw      $v1,($a0)
end;
function  TINT_IEC1.getI2C2ASIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,6,1
end;
procedure TINT_IEC1.setI2C2AMIE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,8($a0)
end;
procedure TINT_IEC1.clearI2C2AMIE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,4($a0)
end;
procedure TINT_IEC1.setI2C2AMIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,7,1
  sw      $v1,($a0)
end;
function  TINT_IEC1.getI2C2AMIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,7,1
end;
procedure TINT_IEC1.setI2C3ABIE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,8($a0)
end;
procedure TINT_IEC1.clearI2C3ABIE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,4($a0)
end;
procedure TINT_IEC1.setI2C3ABIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,8,1
  sw      $v1,($a0)
end;
function  TINT_IEC1.getI2C3ABIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,8,1
end;
procedure TINT_IEC1.setI2C3ASIE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,512
  sw $a1,8($a0)
end;
procedure TINT_IEC1.clearI2C3ASIE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,512
  sw $a1,4($a0)
end;
procedure TINT_IEC1.setI2C3ASIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,9,1
  sw      $v1,($a0)
end;
function  TINT_IEC1.getI2C3ASIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,9,1
end;
procedure TINT_IEC1.setI2C3AMIE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1024
  sw $a1,8($a0)
end;
procedure TINT_IEC1.clearI2C3AMIE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1024
  sw $a1,4($a0)
end;
procedure TINT_IEC1.setI2C3AMIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,10,1
  sw      $v1,($a0)
end;
function  TINT_IEC1.getI2C3AMIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,10,1
end;
procedure TINT_IEC1.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TINT_IEC1.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TINT_IEC2.setIC4EIE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,8($a0)
end;
procedure TINT_IEC2.clearIC4EIE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,4($a0)
end;
procedure TINT_IEC2.setIC4EIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,1
  sw      $v1,($a0)
end;
function  TINT_IEC2.getIC4EIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,1
end;
procedure TINT_IEC2.setIC5EIE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,8($a0)
end;
procedure TINT_IEC2.clearIC5EIE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,4($a0)
end;
procedure TINT_IEC2.setIC5EIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,1,1
  sw      $v1,($a0)
end;
function  TINT_IEC2.getIC5EIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,1,1
end;
procedure TINT_IEC2.setPMPEIE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,8($a0)
end;
procedure TINT_IEC2.clearPMPEIE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,4($a0)
end;
procedure TINT_IEC2.setPMPEIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,2,1
  sw      $v1,($a0)
end;
function  TINT_IEC2.getPMPEIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,2,1
end;
procedure TINT_IEC2.setU1BEIE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,8($a0)
end;
procedure TINT_IEC2.clearU1BEIE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,4($a0)
end;
procedure TINT_IEC2.setU1BEIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,3,1
  sw      $v1,($a0)
end;
function  TINT_IEC2.getU1BEIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,3,1
end;
procedure TINT_IEC2.setU1BRXIE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,8($a0)
end;
procedure TINT_IEC2.clearU1BRXIE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,4($a0)
end;
procedure TINT_IEC2.setU1BRXIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,4,1
  sw      $v1,($a0)
end;
function  TINT_IEC2.getU1BRXIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,4,1
end;
procedure TINT_IEC2.setU1BTXIE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,8($a0)
end;
procedure TINT_IEC2.clearU1BTXIE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,4($a0)
end;
procedure TINT_IEC2.setU1BTXIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,5,1
  sw      $v1,($a0)
end;
function  TINT_IEC2.getU1BTXIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,5,1
end;
procedure TINT_IEC2.setU2BEIE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,8($a0)
end;
procedure TINT_IEC2.clearU2BEIE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,4($a0)
end;
procedure TINT_IEC2.setU2BEIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,6,1
  sw      $v1,($a0)
end;
function  TINT_IEC2.getU2BEIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,6,1
end;
procedure TINT_IEC2.setU2BRXIE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,8($a0)
end;
procedure TINT_IEC2.clearU2BRXIE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,4($a0)
end;
procedure TINT_IEC2.setU2BRXIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,7,1
  sw      $v1,($a0)
end;
function  TINT_IEC2.getU2BRXIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,7,1
end;
procedure TINT_IEC2.setU2BTXIE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,8($a0)
end;
procedure TINT_IEC2.clearU2BTXIE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,4($a0)
end;
procedure TINT_IEC2.setU2BTXIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,8,1
  sw      $v1,($a0)
end;
function  TINT_IEC2.getU2BTXIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,8,1
end;
procedure TINT_IEC2.setU3BEIE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,512
  sw $a1,8($a0)
end;
procedure TINT_IEC2.clearU3BEIE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,512
  sw $a1,4($a0)
end;
procedure TINT_IEC2.setU3BEIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,9,1
  sw      $v1,($a0)
end;
function  TINT_IEC2.getU3BEIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,9,1
end;
procedure TINT_IEC2.setU3BRXIE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1024
  sw $a1,8($a0)
end;
procedure TINT_IEC2.clearU3BRXIE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1024
  sw $a1,4($a0)
end;
procedure TINT_IEC2.setU3BRXIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,10,1
  sw      $v1,($a0)
end;
function  TINT_IEC2.getU3BRXIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,10,1
end;
procedure TINT_IEC2.setU3BTXIE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2048
  sw $a1,8($a0)
end;
procedure TINT_IEC2.clearU3BTXIE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2048
  sw $a1,4($a0)
end;
procedure TINT_IEC2.setU3BTXIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,11,1
  sw      $v1,($a0)
end;
function  TINT_IEC2.getU3BTXIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,11,1
end;
procedure TINT_IEC2.setU4EIE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,8($a0)
end;
procedure TINT_IEC2.clearU4EIE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,4($a0)
end;
procedure TINT_IEC2.setU4EIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,3,1
  sw      $v1,($a0)
end;
function  TINT_IEC2.getU4EIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,3,1
end;
procedure TINT_IEC2.setU4RXIE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,8($a0)
end;
procedure TINT_IEC2.clearU4RXIE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,4($a0)
end;
procedure TINT_IEC2.setU4RXIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,4,1
  sw      $v1,($a0)
end;
function  TINT_IEC2.getU4RXIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,4,1
end;
procedure TINT_IEC2.setU4TXIE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,8($a0)
end;
procedure TINT_IEC2.clearU4TXIE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,4($a0)
end;
procedure TINT_IEC2.setU4TXIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,5,1
  sw      $v1,($a0)
end;
function  TINT_IEC2.getU4TXIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,5,1
end;
procedure TINT_IEC2.setU6EIE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,8($a0)
end;
procedure TINT_IEC2.clearU6EIE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,4($a0)
end;
procedure TINT_IEC2.setU6EIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,6,1
  sw      $v1,($a0)
end;
function  TINT_IEC2.getU6EIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,6,1
end;
procedure TINT_IEC2.setU6RXIE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,8($a0)
end;
procedure TINT_IEC2.clearU6RXIE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,4($a0)
end;
procedure TINT_IEC2.setU6RXIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,7,1
  sw      $v1,($a0)
end;
function  TINT_IEC2.getU6RXIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,7,1
end;
procedure TINT_IEC2.setU6TXIE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,8($a0)
end;
procedure TINT_IEC2.clearU6TXIE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,4($a0)
end;
procedure TINT_IEC2.setU6TXIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,8,1
  sw      $v1,($a0)
end;
function  TINT_IEC2.getU6TXIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,8,1
end;
procedure TINT_IEC2.setU5EIE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,512
  sw $a1,8($a0)
end;
procedure TINT_IEC2.clearU5EIE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,512
  sw $a1,4($a0)
end;
procedure TINT_IEC2.setU5EIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,9,1
  sw      $v1,($a0)
end;
function  TINT_IEC2.getU5EIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,9,1
end;
procedure TINT_IEC2.setU5RXIE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1024
  sw $a1,8($a0)
end;
procedure TINT_IEC2.clearU5RXIE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1024
  sw $a1,4($a0)
end;
procedure TINT_IEC2.setU5RXIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,10,1
  sw      $v1,($a0)
end;
function  TINT_IEC2.getU5RXIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,10,1
end;
procedure TINT_IEC2.setU5TXIE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2048
  sw $a1,8($a0)
end;
procedure TINT_IEC2.clearU5TXIE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2048
  sw $a1,4($a0)
end;
procedure TINT_IEC2.setU5TXIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,11,1
  sw      $v1,($a0)
end;
function  TINT_IEC2.getU5TXIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,11,1
end;
procedure TINT_IEC2.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TINT_IEC2.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TINT_IPC0.setCTIS(thebits : TBits_2); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,2
  sw      $v1,($a0)
end;
function  TINT_IPC0.getCTIS : TBits_2;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,2
end;
procedure TINT_IPC0.setCTIP(thebits : TBits_3); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,2,3
  sw      $v1,($a0)
end;
function  TINT_IPC0.getCTIP : TBits_3;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,2,3
end;
procedure TINT_IPC0.setCS0IS(thebits : TBits_2); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,8,2
  sw      $v1,($a0)
end;
function  TINT_IPC0.getCS0IS : TBits_2;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,8,2
end;
procedure TINT_IPC0.setCS0IP(thebits : TBits_3); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,10,3
  sw      $v1,($a0)
end;
function  TINT_IPC0.getCS0IP : TBits_3;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,10,3
end;
procedure TINT_IPC0.setCS1IS(thebits : TBits_2); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,16,2
  sw      $v1,($a0)
end;
function  TINT_IPC0.getCS1IS : TBits_2;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,16,2
end;
procedure TINT_IPC0.setCS1IP(thebits : TBits_3); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,18,3
  sw      $v1,($a0)
end;
function  TINT_IPC0.getCS1IP : TBits_3;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,18,3
end;
procedure TINT_IPC0.setINT0IS(thebits : TBits_2); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,24,2
  sw      $v1,($a0)
end;
function  TINT_IPC0.getINT0IS : TBits_2;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,24,2
end;
procedure TINT_IPC0.setINT0IP(thebits : TBits_3); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,26,3
  sw      $v1,($a0)
end;
function  TINT_IPC0.getINT0IP : TBits_3;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,26,3
end;
procedure TINT_IPC0.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TINT_IPC0.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TINT_IPC1.setT1IS(thebits : TBits_2); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,2
  sw      $v1,($a0)
end;
function  TINT_IPC1.getT1IS : TBits_2;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,2
end;
procedure TINT_IPC1.setT1IP(thebits : TBits_3); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,2,3
  sw      $v1,($a0)
end;
function  TINT_IPC1.getT1IP : TBits_3;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,2,3
end;
procedure TINT_IPC1.setIC1IS(thebits : TBits_2); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,8,2
  sw      $v1,($a0)
end;
function  TINT_IPC1.getIC1IS : TBits_2;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,8,2
end;
procedure TINT_IPC1.setIC1IP(thebits : TBits_3); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,10,3
  sw      $v1,($a0)
end;
function  TINT_IPC1.getIC1IP : TBits_3;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,10,3
end;
procedure TINT_IPC1.setOC1IS(thebits : TBits_2); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,16,2
  sw      $v1,($a0)
end;
function  TINT_IPC1.getOC1IS : TBits_2;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,16,2
end;
procedure TINT_IPC1.setOC1IP(thebits : TBits_3); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,18,3
  sw      $v1,($a0)
end;
function  TINT_IPC1.getOC1IP : TBits_3;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,18,3
end;
procedure TINT_IPC1.setINT1IS(thebits : TBits_2); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,24,2
  sw      $v1,($a0)
end;
function  TINT_IPC1.getINT1IS : TBits_2;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,24,2
end;
procedure TINT_IPC1.setINT1IP(thebits : TBits_3); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,26,3
  sw      $v1,($a0)
end;
function  TINT_IPC1.getINT1IP : TBits_3;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,26,3
end;
procedure TINT_IPC1.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TINT_IPC1.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TINT_IPC2.setT2IS(thebits : TBits_2); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,2
  sw      $v1,($a0)
end;
function  TINT_IPC2.getT2IS : TBits_2;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,2
end;
procedure TINT_IPC2.setT2IP(thebits : TBits_3); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,2,3
  sw      $v1,($a0)
end;
function  TINT_IPC2.getT2IP : TBits_3;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,2,3
end;
procedure TINT_IPC2.setIC2IS(thebits : TBits_2); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,8,2
  sw      $v1,($a0)
end;
function  TINT_IPC2.getIC2IS : TBits_2;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,8,2
end;
procedure TINT_IPC2.setIC2IP(thebits : TBits_3); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,10,3
  sw      $v1,($a0)
end;
function  TINT_IPC2.getIC2IP : TBits_3;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,10,3
end;
procedure TINT_IPC2.setOC2IS(thebits : TBits_2); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,16,2
  sw      $v1,($a0)
end;
function  TINT_IPC2.getOC2IS : TBits_2;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,16,2
end;
procedure TINT_IPC2.setOC2IP(thebits : TBits_3); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,18,3
  sw      $v1,($a0)
end;
function  TINT_IPC2.getOC2IP : TBits_3;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,18,3
end;
procedure TINT_IPC2.setINT2IS(thebits : TBits_2); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,24,2
  sw      $v1,($a0)
end;
function  TINT_IPC2.getINT2IS : TBits_2;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,24,2
end;
procedure TINT_IPC2.setINT2IP(thebits : TBits_3); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,26,3
  sw      $v1,($a0)
end;
function  TINT_IPC2.getINT2IP : TBits_3;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,26,3
end;
procedure TINT_IPC2.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TINT_IPC2.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TINT_IPC3.setT3IS(thebits : TBits_2); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,2
  sw      $v1,($a0)
end;
function  TINT_IPC3.getT3IS : TBits_2;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,2
end;
procedure TINT_IPC3.setT3IP(thebits : TBits_3); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,2,3
  sw      $v1,($a0)
end;
function  TINT_IPC3.getT3IP : TBits_3;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,2,3
end;
procedure TINT_IPC3.setIC3IS(thebits : TBits_2); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,8,2
  sw      $v1,($a0)
end;
function  TINT_IPC3.getIC3IS : TBits_2;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,8,2
end;
procedure TINT_IPC3.setIC3IP(thebits : TBits_3); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,10,3
  sw      $v1,($a0)
end;
function  TINT_IPC3.getIC3IP : TBits_3;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,10,3
end;
procedure TINT_IPC3.setOC3IS(thebits : TBits_2); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,16,2
  sw      $v1,($a0)
end;
function  TINT_IPC3.getOC3IS : TBits_2;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,16,2
end;
procedure TINT_IPC3.setOC3IP(thebits : TBits_3); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,18,3
  sw      $v1,($a0)
end;
function  TINT_IPC3.getOC3IP : TBits_3;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,18,3
end;
procedure TINT_IPC3.setINT3IS(thebits : TBits_2); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,24,2
  sw      $v1,($a0)
end;
function  TINT_IPC3.getINT3IS : TBits_2;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,24,2
end;
procedure TINT_IPC3.setINT3IP(thebits : TBits_3); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,26,3
  sw      $v1,($a0)
end;
function  TINT_IPC3.getINT3IP : TBits_3;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,26,3
end;
procedure TINT_IPC3.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TINT_IPC3.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TINT_IPC4.setT4IS(thebits : TBits_2); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,2
  sw      $v1,($a0)
end;
function  TINT_IPC4.getT4IS : TBits_2;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,2
end;
procedure TINT_IPC4.setT4IP(thebits : TBits_3); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,2,3
  sw      $v1,($a0)
end;
function  TINT_IPC4.getT4IP : TBits_3;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,2,3
end;
procedure TINT_IPC4.setIC4IS(thebits : TBits_2); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,8,2
  sw      $v1,($a0)
end;
function  TINT_IPC4.getIC4IS : TBits_2;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,8,2
end;
procedure TINT_IPC4.setIC4IP(thebits : TBits_3); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,10,3
  sw      $v1,($a0)
end;
function  TINT_IPC4.getIC4IP : TBits_3;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,10,3
end;
procedure TINT_IPC4.setOC4IS(thebits : TBits_2); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,16,2
  sw      $v1,($a0)
end;
function  TINT_IPC4.getOC4IS : TBits_2;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,16,2
end;
procedure TINT_IPC4.setOC4IP(thebits : TBits_3); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,18,3
  sw      $v1,($a0)
end;
function  TINT_IPC4.getOC4IP : TBits_3;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,18,3
end;
procedure TINT_IPC4.setINT4IS(thebits : TBits_2); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,24,2
  sw      $v1,($a0)
end;
function  TINT_IPC4.getINT4IS : TBits_2;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,24,2
end;
procedure TINT_IPC4.setINT4IP(thebits : TBits_3); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,26,3
  sw      $v1,($a0)
end;
function  TINT_IPC4.getINT4IP : TBits_3;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,26,3
end;
procedure TINT_IPC4.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TINT_IPC4.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TINT_IPC5.setT5IS(thebits : TBits_2); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,2
  sw      $v1,($a0)
end;
function  TINT_IPC5.getT5IS : TBits_2;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,2
end;
procedure TINT_IPC5.setT5IP(thebits : TBits_3); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,2,3
  sw      $v1,($a0)
end;
function  TINT_IPC5.getT5IP : TBits_3;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,2,3
end;
procedure TINT_IPC5.setIC5IS(thebits : TBits_2); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,8,2
  sw      $v1,($a0)
end;
function  TINT_IPC5.getIC5IS : TBits_2;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,8,2
end;
procedure TINT_IPC5.setIC5IP(thebits : TBits_3); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,10,3
  sw      $v1,($a0)
end;
function  TINT_IPC5.getIC5IP : TBits_3;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,10,3
end;
procedure TINT_IPC5.setOC5IS(thebits : TBits_2); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,16,2
  sw      $v1,($a0)
end;
function  TINT_IPC5.getOC5IS : TBits_2;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,16,2
end;
procedure TINT_IPC5.setOC5IP(thebits : TBits_3); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,18,3
  sw      $v1,($a0)
end;
function  TINT_IPC5.getOC5IP : TBits_3;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,18,3
end;
procedure TINT_IPC5.setSPI1IS(thebits : TBits_2); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,24,2
  sw      $v1,($a0)
end;
function  TINT_IPC5.getSPI1IS : TBits_2;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,24,2
end;
procedure TINT_IPC5.setSPI1IP(thebits : TBits_3); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,26,3
  sw      $v1,($a0)
end;
function  TINT_IPC5.getSPI1IP : TBits_3;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,26,3
end;
procedure TINT_IPC5.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TINT_IPC5.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TINT_IPC6.setU1IS(thebits : TBits_2); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,2
  sw      $v1,($a0)
end;
function  TINT_IPC6.getU1IS : TBits_2;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,2
end;
procedure TINT_IPC6.setU1IP(thebits : TBits_3); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,2,3
  sw      $v1,($a0)
end;
function  TINT_IPC6.getU1IP : TBits_3;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,2,3
end;
procedure TINT_IPC6.setI2C1IS(thebits : TBits_2); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,8,2
  sw      $v1,($a0)
end;
function  TINT_IPC6.getI2C1IS : TBits_2;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,8,2
end;
procedure TINT_IPC6.setI2C1IP(thebits : TBits_3); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,10,3
  sw      $v1,($a0)
end;
function  TINT_IPC6.getI2C1IP : TBits_3;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,10,3
end;
procedure TINT_IPC6.setCNIS(thebits : TBits_2); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,16,2
  sw      $v1,($a0)
end;
function  TINT_IPC6.getCNIS : TBits_2;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,16,2
end;
procedure TINT_IPC6.setCNIP(thebits : TBits_3); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,18,3
  sw      $v1,($a0)
end;
function  TINT_IPC6.getCNIP : TBits_3;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,18,3
end;
procedure TINT_IPC6.setAD1IS(thebits : TBits_2); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,24,2
  sw      $v1,($a0)
end;
function  TINT_IPC6.getAD1IS : TBits_2;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,24,2
end;
procedure TINT_IPC6.setAD1IP(thebits : TBits_3); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,26,3
  sw      $v1,($a0)
end;
function  TINT_IPC6.getAD1IP : TBits_3;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,26,3
end;
procedure TINT_IPC6.setU1AIS(thebits : TBits_2); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,2
  sw      $v1,($a0)
end;
function  TINT_IPC6.getU1AIS : TBits_2;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,2
end;
procedure TINT_IPC6.setU1AIP(thebits : TBits_3); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,2,3
  sw      $v1,($a0)
end;
function  TINT_IPC6.getU1AIP : TBits_3;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,2,3
end;
procedure TINT_IPC6.setSPI3IS(thebits : TBits_2); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,2
  sw      $v1,($a0)
end;
function  TINT_IPC6.getSPI3IS : TBits_2;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,2
end;
procedure TINT_IPC6.setSPI3IP(thebits : TBits_3); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,2,3
  sw      $v1,($a0)
end;
function  TINT_IPC6.getSPI3IP : TBits_3;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,2,3
end;
procedure TINT_IPC6.setSPI1AIS(thebits : TBits_2); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,2
  sw      $v1,($a0)
end;
function  TINT_IPC6.getSPI1AIS : TBits_2;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,2
end;
procedure TINT_IPC6.setSPI1AIP(thebits : TBits_3); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,2,3
  sw      $v1,($a0)
end;
function  TINT_IPC6.getSPI1AIP : TBits_3;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,2,3
end;
procedure TINT_IPC6.setI2C3IS(thebits : TBits_2); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,2
  sw      $v1,($a0)
end;
function  TINT_IPC6.getI2C3IS : TBits_2;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,2
end;
procedure TINT_IPC6.setI2C3IP(thebits : TBits_3); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,2,3
  sw      $v1,($a0)
end;
function  TINT_IPC6.getI2C3IP : TBits_3;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,2,3
end;
procedure TINT_IPC6.setI2C1AIS(thebits : TBits_2); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,2
  sw      $v1,($a0)
end;
function  TINT_IPC6.getI2C1AIS : TBits_2;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,2
end;
procedure TINT_IPC6.setI2C1AIP(thebits : TBits_3); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,2,3
  sw      $v1,($a0)
end;
function  TINT_IPC6.getI2C1AIP : TBits_3;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,2,3
end;
procedure TINT_IPC6.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TINT_IPC6.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TINT_IPC7.setPMPIS(thebits : TBits_2); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,2
  sw      $v1,($a0)
end;
function  TINT_IPC7.getPMPIS : TBits_2;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,2
end;
procedure TINT_IPC7.setPMPIP(thebits : TBits_3); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,2,3
  sw      $v1,($a0)
end;
function  TINT_IPC7.getPMPIP : TBits_3;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,2,3
end;
procedure TINT_IPC7.setCMP1IS(thebits : TBits_2); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,8,2
  sw      $v1,($a0)
end;
function  TINT_IPC7.getCMP1IS : TBits_2;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,8,2
end;
procedure TINT_IPC7.setCMP1IP(thebits : TBits_3); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,10,3
  sw      $v1,($a0)
end;
function  TINT_IPC7.getCMP1IP : TBits_3;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,10,3
end;
procedure TINT_IPC7.setCMP2IS(thebits : TBits_2); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,16,2
  sw      $v1,($a0)
end;
function  TINT_IPC7.getCMP2IS : TBits_2;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,16,2
end;
procedure TINT_IPC7.setCMP2IP(thebits : TBits_3); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,18,3
  sw      $v1,($a0)
end;
function  TINT_IPC7.getCMP2IP : TBits_3;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,18,3
end;
procedure TINT_IPC7.setU3IS(thebits : TBits_2); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,24,2
  sw      $v1,($a0)
end;
function  TINT_IPC7.getU3IS : TBits_2;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,24,2
end;
procedure TINT_IPC7.setU3IP(thebits : TBits_3); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,26,3
  sw      $v1,($a0)
end;
function  TINT_IPC7.getU3IP : TBits_3;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,26,3
end;
procedure TINT_IPC7.setU2AIS(thebits : TBits_2); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,24,2
  sw      $v1,($a0)
end;
function  TINT_IPC7.getU2AIS : TBits_2;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,24,2
end;
procedure TINT_IPC7.setU2AIP(thebits : TBits_3); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,26,3
  sw      $v1,($a0)
end;
function  TINT_IPC7.getU2AIP : TBits_3;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,26,3
end;
procedure TINT_IPC7.setSPI2IS(thebits : TBits_2); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,24,2
  sw      $v1,($a0)
end;
function  TINT_IPC7.getSPI2IS : TBits_2;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,24,2
end;
procedure TINT_IPC7.setSPI2IP(thebits : TBits_3); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,26,3
  sw      $v1,($a0)
end;
function  TINT_IPC7.getSPI2IP : TBits_3;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,26,3
end;
procedure TINT_IPC7.setSPI2AIS(thebits : TBits_2); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,24,2
  sw      $v1,($a0)
end;
function  TINT_IPC7.getSPI2AIS : TBits_2;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,24,2
end;
procedure TINT_IPC7.setSPI2AIP(thebits : TBits_3); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,26,3
  sw      $v1,($a0)
end;
function  TINT_IPC7.getSPI2AIP : TBits_3;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,26,3
end;
procedure TINT_IPC7.setI2C4IS(thebits : TBits_2); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,24,2
  sw      $v1,($a0)
end;
function  TINT_IPC7.getI2C4IS : TBits_2;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,24,2
end;
procedure TINT_IPC7.setI2C4IP(thebits : TBits_3); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,26,3
  sw      $v1,($a0)
end;
function  TINT_IPC7.getI2C4IP : TBits_3;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,26,3
end;
procedure TINT_IPC7.setI2C2AIS(thebits : TBits_2); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,24,2
  sw      $v1,($a0)
end;
function  TINT_IPC7.getI2C2AIS : TBits_2;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,24,2
end;
procedure TINT_IPC7.setI2C2AIP(thebits : TBits_3); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,26,3
  sw      $v1,($a0)
end;
function  TINT_IPC7.getI2C2AIP : TBits_3;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,26,3
end;
procedure TINT_IPC7.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TINT_IPC7.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TINT_IPC8.setU2IS(thebits : TBits_2); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,2
  sw      $v1,($a0)
end;
function  TINT_IPC8.getU2IS : TBits_2;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,2
end;
procedure TINT_IPC8.setU2IP(thebits : TBits_3); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,2,3
  sw      $v1,($a0)
end;
function  TINT_IPC8.getU2IP : TBits_3;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,2,3
end;
procedure TINT_IPC8.setI2C2IS(thebits : TBits_2); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,8,2
  sw      $v1,($a0)
end;
function  TINT_IPC8.getI2C2IS : TBits_2;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,8,2
end;
procedure TINT_IPC8.setI2C2IP(thebits : TBits_3); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,10,3
  sw      $v1,($a0)
end;
function  TINT_IPC8.getI2C2IP : TBits_3;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,10,3
end;
procedure TINT_IPC8.setFSCMIS(thebits : TBits_2); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,16,2
  sw      $v1,($a0)
end;
function  TINT_IPC8.getFSCMIS : TBits_2;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,16,2
end;
procedure TINT_IPC8.setFSCMIP(thebits : TBits_3); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,18,3
  sw      $v1,($a0)
end;
function  TINT_IPC8.getFSCMIP : TBits_3;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,18,3
end;
procedure TINT_IPC8.setRTCCIS(thebits : TBits_2); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,24,2
  sw      $v1,($a0)
end;
function  TINT_IPC8.getRTCCIS : TBits_2;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,24,2
end;
procedure TINT_IPC8.setRTCCIP(thebits : TBits_3); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,26,3
  sw      $v1,($a0)
end;
function  TINT_IPC8.getRTCCIP : TBits_3;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,26,3
end;
procedure TINT_IPC8.setU3AIS(thebits : TBits_2); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,2
  sw      $v1,($a0)
end;
function  TINT_IPC8.getU3AIS : TBits_2;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,2
end;
procedure TINT_IPC8.setU3AIP(thebits : TBits_3); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,2,3
  sw      $v1,($a0)
end;
function  TINT_IPC8.getU3AIP : TBits_3;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,2,3
end;
procedure TINT_IPC8.setSPI4IS(thebits : TBits_2); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,2
  sw      $v1,($a0)
end;
function  TINT_IPC8.getSPI4IS : TBits_2;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,2
end;
procedure TINT_IPC8.setSPI4IP(thebits : TBits_3); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,2,3
  sw      $v1,($a0)
end;
function  TINT_IPC8.getSPI4IP : TBits_3;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,2,3
end;
procedure TINT_IPC8.setSPI3AIS(thebits : TBits_2); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,2
  sw      $v1,($a0)
end;
function  TINT_IPC8.getSPI3AIS : TBits_2;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,2
end;
procedure TINT_IPC8.setSPI3AIP(thebits : TBits_3); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,2,3
  sw      $v1,($a0)
end;
function  TINT_IPC8.getSPI3AIP : TBits_3;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,2,3
end;
procedure TINT_IPC8.setI2C5IS(thebits : TBits_2); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,2
  sw      $v1,($a0)
end;
function  TINT_IPC8.getI2C5IS : TBits_2;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,2
end;
procedure TINT_IPC8.setI2C5IP(thebits : TBits_3); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,2,3
  sw      $v1,($a0)
end;
function  TINT_IPC8.getI2C5IP : TBits_3;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,2,3
end;
procedure TINT_IPC8.setI2C3AIS(thebits : TBits_2); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,2
  sw      $v1,($a0)
end;
function  TINT_IPC8.getI2C3AIS : TBits_2;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,2
end;
procedure TINT_IPC8.setI2C3AIP(thebits : TBits_3); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,2,3
  sw      $v1,($a0)
end;
function  TINT_IPC8.getI2C3AIP : TBits_3;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,2,3
end;
procedure TINT_IPC8.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TINT_IPC8.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TINT_IPC9.setDMA0IS(thebits : TBits_2); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,2
  sw      $v1,($a0)
end;
function  TINT_IPC9.getDMA0IS : TBits_2;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,2
end;
procedure TINT_IPC9.setDMA0IP(thebits : TBits_3); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,2,3
  sw      $v1,($a0)
end;
function  TINT_IPC9.getDMA0IP : TBits_3;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,2,3
end;
procedure TINT_IPC9.setDMA1IS(thebits : TBits_2); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,8,2
  sw      $v1,($a0)
end;
function  TINT_IPC9.getDMA1IS : TBits_2;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,8,2
end;
procedure TINT_IPC9.setDMA1IP(thebits : TBits_3); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,10,3
  sw      $v1,($a0)
end;
function  TINT_IPC9.getDMA1IP : TBits_3;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,10,3
end;
procedure TINT_IPC9.setDMA2IS(thebits : TBits_2); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,16,2
  sw      $v1,($a0)
end;
function  TINT_IPC9.getDMA2IS : TBits_2;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,16,2
end;
procedure TINT_IPC9.setDMA2IP(thebits : TBits_3); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,18,3
  sw      $v1,($a0)
end;
function  TINT_IPC9.getDMA2IP : TBits_3;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,18,3
end;
procedure TINT_IPC9.setDMA3IS(thebits : TBits_2); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,24,2
  sw      $v1,($a0)
end;
function  TINT_IPC9.getDMA3IS : TBits_2;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,24,2
end;
procedure TINT_IPC9.setDMA3IP(thebits : TBits_3); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,26,3
  sw      $v1,($a0)
end;
function  TINT_IPC9.getDMA3IP : TBits_3;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,26,3
end;
procedure TINT_IPC9.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TINT_IPC9.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TINT_IPC10.setDMA4IS(thebits : TBits_2); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,2
  sw      $v1,($a0)
end;
function  TINT_IPC10.getDMA4IS : TBits_2;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,2
end;
procedure TINT_IPC10.setDMA4IP(thebits : TBits_3); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,2,3
  sw      $v1,($a0)
end;
function  TINT_IPC10.getDMA4IP : TBits_3;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,2,3
end;
procedure TINT_IPC10.setDMA5IS(thebits : TBits_2); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,8,2
  sw      $v1,($a0)
end;
function  TINT_IPC10.getDMA5IS : TBits_2;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,8,2
end;
procedure TINT_IPC10.setDMA5IP(thebits : TBits_3); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,10,3
  sw      $v1,($a0)
end;
function  TINT_IPC10.getDMA5IP : TBits_3;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,10,3
end;
procedure TINT_IPC10.setDMA6IS(thebits : TBits_2); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,16,2
  sw      $v1,($a0)
end;
function  TINT_IPC10.getDMA6IS : TBits_2;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,16,2
end;
procedure TINT_IPC10.setDMA6IP(thebits : TBits_3); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,18,3
  sw      $v1,($a0)
end;
function  TINT_IPC10.getDMA6IP : TBits_3;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,18,3
end;
procedure TINT_IPC10.setDMA7IS(thebits : TBits_2); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,24,2
  sw      $v1,($a0)
end;
function  TINT_IPC10.getDMA7IS : TBits_2;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,24,2
end;
procedure TINT_IPC10.setDMA7IP(thebits : TBits_3); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,26,3
  sw      $v1,($a0)
end;
function  TINT_IPC10.getDMA7IP : TBits_3;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,26,3
end;
procedure TINT_IPC10.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TINT_IPC10.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TINT_IPC11.setFCEIS(thebits : TBits_2); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,2
  sw      $v1,($a0)
end;
function  TINT_IPC11.getFCEIS : TBits_2;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,2
end;
procedure TINT_IPC11.setFCEIP(thebits : TBits_3); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,2,3
  sw      $v1,($a0)
end;
function  TINT_IPC11.getFCEIP : TBits_3;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,2,3
end;
procedure TINT_IPC11.setUSBIS(thebits : TBits_2); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,8,2
  sw      $v1,($a0)
end;
function  TINT_IPC11.getUSBIS : TBits_2;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,8,2
end;
procedure TINT_IPC11.setUSBIP(thebits : TBits_3); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,10,3
  sw      $v1,($a0)
end;
function  TINT_IPC11.getUSBIP : TBits_3;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,10,3
end;
procedure TINT_IPC11.setCAN1IS(thebits : TBits_2); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,16,2
  sw      $v1,($a0)
end;
function  TINT_IPC11.getCAN1IS : TBits_2;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,16,2
end;
procedure TINT_IPC11.setCAN1IP(thebits : TBits_3); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,18,3
  sw      $v1,($a0)
end;
function  TINT_IPC11.getCAN1IP : TBits_3;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,18,3
end;
procedure TINT_IPC11.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TINT_IPC11.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TINT_IPC12.setU4IS(thebits : TBits_2); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,8,2
  sw      $v1,($a0)
end;
function  TINT_IPC12.getU4IS : TBits_2;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,8,2
end;
procedure TINT_IPC12.setU4IP(thebits : TBits_3); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,10,3
  sw      $v1,($a0)
end;
function  TINT_IPC12.getU4IP : TBits_3;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,10,3
end;
procedure TINT_IPC12.setU6IS(thebits : TBits_2); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,16,2
  sw      $v1,($a0)
end;
function  TINT_IPC12.getU6IS : TBits_2;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,16,2
end;
procedure TINT_IPC12.setU6IP(thebits : TBits_3); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,18,3
  sw      $v1,($a0)
end;
function  TINT_IPC12.getU6IP : TBits_3;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,18,3
end;
procedure TINT_IPC12.setU5IS(thebits : TBits_2); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,24,2
  sw      $v1,($a0)
end;
function  TINT_IPC12.getU5IS : TBits_2;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,24,2
end;
procedure TINT_IPC12.setU5IP(thebits : TBits_3); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,26,3
  sw      $v1,($a0)
end;
function  TINT_IPC12.getU5IP : TBits_3;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,26,3
end;
procedure TINT_IPC12.setU1BIS(thebits : TBits_2); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,8,2
  sw      $v1,($a0)
end;
function  TINT_IPC12.getU1BIS : TBits_2;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,8,2
end;
procedure TINT_IPC12.setU1BIP(thebits : TBits_3); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,10,3
  sw      $v1,($a0)
end;
function  TINT_IPC12.getU1BIP : TBits_3;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,10,3
end;
procedure TINT_IPC12.setU2BIS(thebits : TBits_2); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,16,2
  sw      $v1,($a0)
end;
function  TINT_IPC12.getU2BIS : TBits_2;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,16,2
end;
procedure TINT_IPC12.setU2BIP(thebits : TBits_3); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,18,3
  sw      $v1,($a0)
end;
function  TINT_IPC12.getU2BIP : TBits_3;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,18,3
end;
procedure TINT_IPC12.setU3BIS(thebits : TBits_2); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,24,2
  sw      $v1,($a0)
end;
function  TINT_IPC12.getU3BIS : TBits_2;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,24,2
end;
procedure TINT_IPC12.setU3BIP(thebits : TBits_3); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,26,3
  sw      $v1,($a0)
end;
function  TINT_IPC12.getU3BIP : TBits_3;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,26,3
end;
procedure TINT_IPC12.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TINT_IPC12.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TBMX_BMXCON.setBMXARB(thebits : TBits_3); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,3
  sw      $v1,($a0)
end;
function  TBMX_BMXCON.getBMXARB : TBits_3;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,3
end;
procedure TBMX_BMXCON.setBMXWSDRM; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,8($a0)
end;
procedure TBMX_BMXCON.clearBMXWSDRM; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,4($a0)
end;
procedure TBMX_BMXCON.setBMXWSDRM(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,6,1
  sw      $v1,($a0)
end;
function  TBMX_BMXCON.getBMXWSDRM : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,6,1
end;
procedure TBMX_BMXCON.setBMXERRIS; assembler; nostackframe; inline;
asm
  lui     $a1,1
  sw $a1,8($a0)
end;
procedure TBMX_BMXCON.clearBMXERRIS; assembler; nostackframe; inline;
asm
  lui     $a1,1
  sw $a1,4($a0)
end;
procedure TBMX_BMXCON.setBMXERRIS(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,16,1
  sw      $v1,($a0)
end;
function  TBMX_BMXCON.getBMXERRIS : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,16,1
end;
procedure TBMX_BMXCON.setBMXERRDS; assembler; nostackframe; inline;
asm
  lui     $a1,2
  sw $a1,8($a0)
end;
procedure TBMX_BMXCON.clearBMXERRDS; assembler; nostackframe; inline;
asm
  lui     $a1,2
  sw $a1,4($a0)
end;
procedure TBMX_BMXCON.setBMXERRDS(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,17,1
  sw      $v1,($a0)
end;
function  TBMX_BMXCON.getBMXERRDS : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,17,1
end;
procedure TBMX_BMXCON.setBMXERRDMA; assembler; nostackframe; inline;
asm
  lui     $a1,4
  sw $a1,8($a0)
end;
procedure TBMX_BMXCON.clearBMXERRDMA; assembler; nostackframe; inline;
asm
  lui     $a1,4
  sw $a1,4($a0)
end;
procedure TBMX_BMXCON.setBMXERRDMA(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,18,1
  sw      $v1,($a0)
end;
function  TBMX_BMXCON.getBMXERRDMA : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,18,1
end;
procedure TBMX_BMXCON.setBMXERRICD; assembler; nostackframe; inline;
asm
  lui     $a1,8
  sw $a1,8($a0)
end;
procedure TBMX_BMXCON.clearBMXERRICD; assembler; nostackframe; inline;
asm
  lui     $a1,8
  sw $a1,4($a0)
end;
procedure TBMX_BMXCON.setBMXERRICD(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,19,1
  sw      $v1,($a0)
end;
function  TBMX_BMXCON.getBMXERRICD : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,19,1
end;
procedure TBMX_BMXCON.setBMXERRIXI; assembler; nostackframe; inline;
asm
  lui     $a1,16
  sw $a1,8($a0)
end;
procedure TBMX_BMXCON.clearBMXERRIXI; assembler; nostackframe; inline;
asm
  lui     $a1,16
  sw $a1,4($a0)
end;
procedure TBMX_BMXCON.setBMXERRIXI(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,20,1
  sw      $v1,($a0)
end;
function  TBMX_BMXCON.getBMXERRIXI : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,20,1
end;
procedure TBMX_BMXCON.setBMXCHEDMA; assembler; nostackframe; inline;
asm
  lui     $a1,1024
  sw $a1,8($a0)
end;
procedure TBMX_BMXCON.clearBMXCHEDMA; assembler; nostackframe; inline;
asm
  lui     $a1,1024
  sw $a1,4($a0)
end;
procedure TBMX_BMXCON.setBMXCHEDMA(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,26,1
  sw      $v1,($a0)
end;
function  TBMX_BMXCON.getBMXCHEDMA : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,26,1
end;
procedure TBMX_BMXCON.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TBMX_BMXCON.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TDMAC_DMACON.setDMABUSY; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2048
  sw $a1,8($a0)
end;
procedure TDMAC_DMACON.clearDMABUSY; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2048
  sw $a1,4($a0)
end;
procedure TDMAC_DMACON.setDMABUSY(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,11,1
  sw      $v1,($a0)
end;
function  TDMAC_DMACON.getDMABUSY : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,11,1
end;
procedure TDMAC_DMACON.setSUSPEND; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4096
  sw $a1,8($a0)
end;
procedure TDMAC_DMACON.clearSUSPEND; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4096
  sw $a1,4($a0)
end;
procedure TDMAC_DMACON.setSUSPEND(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,12,1
  sw      $v1,($a0)
end;
function  TDMAC_DMACON.getSUSPEND : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,12,1
end;
procedure TDMAC_DMACON.setON; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,8($a0)
end;
procedure TDMAC_DMACON.clearON; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,4($a0)
end;
procedure TDMAC_DMACON.setON(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,15,1
  sw      $v1,($a0)
end;
function  TDMAC_DMACON.getON : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,15,1
end;
procedure TDMAC_DMACON.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TDMAC_DMACON.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TDMAC_DMASTAT.setDMACH(thebits : TBits_3); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,3
  sw      $v1,($a0)
end;
function  TDMAC_DMASTAT.getDMACH : TBits_3;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,3
end;
procedure TDMAC_DMASTAT.setRDWR; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,8($a0)
end;
procedure TDMAC_DMASTAT.clearRDWR; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,4($a0)
end;
procedure TDMAC_DMASTAT.setRDWR(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,3,1
  sw      $v1,($a0)
end;
function  TDMAC_DMASTAT.getRDWR : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,3,1
end;
procedure TDMAC_DMASTAT.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TDMAC_DMASTAT.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TDMAC_DCRCCON.setCRCCH(thebits : TBits_3); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,3
  sw      $v1,($a0)
end;
function  TDMAC_DCRCCON.getCRCCH : TBits_3;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,3
end;
procedure TDMAC_DCRCCON.setCRCTYP; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,8($a0)
end;
procedure TDMAC_DCRCCON.clearCRCTYP; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,4($a0)
end;
procedure TDMAC_DCRCCON.setCRCTYP(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,5,1
  sw      $v1,($a0)
end;
function  TDMAC_DCRCCON.getCRCTYP : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,5,1
end;
procedure TDMAC_DCRCCON.setCRCAPP; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,8($a0)
end;
procedure TDMAC_DCRCCON.clearCRCAPP; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,4($a0)
end;
procedure TDMAC_DCRCCON.setCRCAPP(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,6,1
  sw      $v1,($a0)
end;
function  TDMAC_DCRCCON.getCRCAPP : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,6,1
end;
procedure TDMAC_DCRCCON.setCRCEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,8($a0)
end;
procedure TDMAC_DCRCCON.clearCRCEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,4($a0)
end;
procedure TDMAC_DCRCCON.setCRCEN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,7,1
  sw      $v1,($a0)
end;
function  TDMAC_DCRCCON.getCRCEN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,7,1
end;
procedure TDMAC_DCRCCON.setPLEN(thebits : TBits_5); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,8,5
  sw      $v1,($a0)
end;
function  TDMAC_DCRCCON.getPLEN : TBits_5;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,8,5
end;
procedure TDMAC_DCRCCON.setBITO; assembler; nostackframe; inline;
asm
  lui     $a1,256
  sw $a1,8($a0)
end;
procedure TDMAC_DCRCCON.clearBITO; assembler; nostackframe; inline;
asm
  lui     $a1,256
  sw $a1,4($a0)
end;
procedure TDMAC_DCRCCON.setBITO(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,24,1
  sw      $v1,($a0)
end;
function  TDMAC_DCRCCON.getBITO : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,24,1
end;
procedure TDMAC_DCRCCON.setWBO; assembler; nostackframe; inline;
asm
  lui     $a1,2048
  sw $a1,8($a0)
end;
procedure TDMAC_DCRCCON.clearWBO; assembler; nostackframe; inline;
asm
  lui     $a1,2048
  sw $a1,4($a0)
end;
procedure TDMAC_DCRCCON.setWBO(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,27,1
  sw      $v1,($a0)
end;
function  TDMAC_DCRCCON.getWBO : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,27,1
end;
procedure TDMAC_DCRCCON.setBYTO(thebits : TBits_2); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,28,2
  sw      $v1,($a0)
end;
function  TDMAC_DCRCCON.getBYTO : TBits_2;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,28,2
end;
procedure TDMAC_DCRCCON.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TDMAC_DCRCCON.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TDMAC0_DCH0CON.setCHPRI(thebits : TBits_2); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,2
  sw      $v1,($a0)
end;
function  TDMAC0_DCH0CON.getCHPRI : TBits_2;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,2
end;
procedure TDMAC0_DCH0CON.setCHEDET; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,8($a0)
end;
procedure TDMAC0_DCH0CON.clearCHEDET; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,4($a0)
end;
procedure TDMAC0_DCH0CON.setCHEDET(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,2,1
  sw      $v1,($a0)
end;
function  TDMAC0_DCH0CON.getCHEDET : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,2,1
end;
procedure TDMAC0_DCH0CON.setCHAEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,8($a0)
end;
procedure TDMAC0_DCH0CON.clearCHAEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,4($a0)
end;
procedure TDMAC0_DCH0CON.setCHAEN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,4,1
  sw      $v1,($a0)
end;
function  TDMAC0_DCH0CON.getCHAEN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,4,1
end;
procedure TDMAC0_DCH0CON.setCHCHN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,8($a0)
end;
procedure TDMAC0_DCH0CON.clearCHCHN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,4($a0)
end;
procedure TDMAC0_DCH0CON.setCHCHN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,5,1
  sw      $v1,($a0)
end;
function  TDMAC0_DCH0CON.getCHCHN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,5,1
end;
procedure TDMAC0_DCH0CON.setCHAED; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,8($a0)
end;
procedure TDMAC0_DCH0CON.clearCHAED; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,4($a0)
end;
procedure TDMAC0_DCH0CON.setCHAED(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,6,1
  sw      $v1,($a0)
end;
function  TDMAC0_DCH0CON.getCHAED : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,6,1
end;
procedure TDMAC0_DCH0CON.setCHEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,8($a0)
end;
procedure TDMAC0_DCH0CON.clearCHEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,4($a0)
end;
procedure TDMAC0_DCH0CON.setCHEN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,7,1
  sw      $v1,($a0)
end;
function  TDMAC0_DCH0CON.getCHEN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,7,1
end;
procedure TDMAC0_DCH0CON.setCHCHNS; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,8($a0)
end;
procedure TDMAC0_DCH0CON.clearCHCHNS; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,4($a0)
end;
procedure TDMAC0_DCH0CON.setCHCHNS(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,8,1
  sw      $v1,($a0)
end;
function  TDMAC0_DCH0CON.getCHCHNS : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,8,1
end;
procedure TDMAC0_DCH0CON.setCHBUSY; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,8($a0)
end;
procedure TDMAC0_DCH0CON.clearCHBUSY; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,4($a0)
end;
procedure TDMAC0_DCH0CON.setCHBUSY(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,15,1
  sw      $v1,($a0)
end;
function  TDMAC0_DCH0CON.getCHBUSY : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,15,1
end;
procedure TDMAC0_DCH0CON.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TDMAC0_DCH0CON.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TDMAC0_DCH0ECON.setAIRQEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,8($a0)
end;
procedure TDMAC0_DCH0ECON.clearAIRQEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,4($a0)
end;
procedure TDMAC0_DCH0ECON.setAIRQEN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,3,1
  sw      $v1,($a0)
end;
function  TDMAC0_DCH0ECON.getAIRQEN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,3,1
end;
procedure TDMAC0_DCH0ECON.setSIRQEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,8($a0)
end;
procedure TDMAC0_DCH0ECON.clearSIRQEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,4($a0)
end;
procedure TDMAC0_DCH0ECON.setSIRQEN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,4,1
  sw      $v1,($a0)
end;
function  TDMAC0_DCH0ECON.getSIRQEN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,4,1
end;
procedure TDMAC0_DCH0ECON.setPATEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,8($a0)
end;
procedure TDMAC0_DCH0ECON.clearPATEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,4($a0)
end;
procedure TDMAC0_DCH0ECON.setPATEN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,5,1
  sw      $v1,($a0)
end;
function  TDMAC0_DCH0ECON.getPATEN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,5,1
end;
procedure TDMAC0_DCH0ECON.setCABORT; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,8($a0)
end;
procedure TDMAC0_DCH0ECON.clearCABORT; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,4($a0)
end;
procedure TDMAC0_DCH0ECON.setCABORT(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,6,1
  sw      $v1,($a0)
end;
function  TDMAC0_DCH0ECON.getCABORT : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,6,1
end;
procedure TDMAC0_DCH0ECON.setCFORCE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,8($a0)
end;
procedure TDMAC0_DCH0ECON.clearCFORCE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,4($a0)
end;
procedure TDMAC0_DCH0ECON.setCFORCE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,7,1
  sw      $v1,($a0)
end;
function  TDMAC0_DCH0ECON.getCFORCE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,7,1
end;
procedure TDMAC0_DCH0ECON.setCHSIRQ(thebits : TBits_8); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  sll     $a1,$a1,8
  lui    $v0,65535
  ori    $v0,$v0,255
  and   $v1,$v1,$v0
  or    $a1,$a1,$v0
  sw    $a1,($a0)
end;
function  TDMAC0_DCH0ECON.getCHSIRQ : TBits_8;
asm
  lw      $v1,($a0)
  srl     $a1,$a1,8
  ori    $v0,$zero,65280
  and    $a1,$a1,$v0
end;
procedure TDMAC0_DCH0ECON.setCHAIRQ(thebits : TBits_8); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  sll     $a1,$a1,16
  lui    $v0,65280
  ori    $v0,$v0,65535
  and   $v1,$v1,$v0
  or    $a1,$a1,$v0
  sw    $a1,($a0)
end;
function  TDMAC0_DCH0ECON.getCHAIRQ : TBits_8;
asm
  lw      $v1,($a0)
  srl     $a1,$a1,16
  lui    $v0,255
  and    $a1,$a1,$v0
end;
procedure TDMAC0_DCH0ECON.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TDMAC0_DCH0ECON.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TDMAC0_DCH0INT.setCHERIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,8($a0)
end;
procedure TDMAC0_DCH0INT.clearCHERIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,4($a0)
end;
procedure TDMAC0_DCH0INT.setCHERIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,1
  sw      $v1,($a0)
end;
function  TDMAC0_DCH0INT.getCHERIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,1
end;
procedure TDMAC0_DCH0INT.setCHTAIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,8($a0)
end;
procedure TDMAC0_DCH0INT.clearCHTAIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,4($a0)
end;
procedure TDMAC0_DCH0INT.setCHTAIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,1,1
  sw      $v1,($a0)
end;
function  TDMAC0_DCH0INT.getCHTAIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,1,1
end;
procedure TDMAC0_DCH0INT.setCHCCIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,8($a0)
end;
procedure TDMAC0_DCH0INT.clearCHCCIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,4($a0)
end;
procedure TDMAC0_DCH0INT.setCHCCIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,2,1
  sw      $v1,($a0)
end;
function  TDMAC0_DCH0INT.getCHCCIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,2,1
end;
procedure TDMAC0_DCH0INT.setCHBCIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,8($a0)
end;
procedure TDMAC0_DCH0INT.clearCHBCIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,4($a0)
end;
procedure TDMAC0_DCH0INT.setCHBCIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,3,1
  sw      $v1,($a0)
end;
function  TDMAC0_DCH0INT.getCHBCIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,3,1
end;
procedure TDMAC0_DCH0INT.setCHDHIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,8($a0)
end;
procedure TDMAC0_DCH0INT.clearCHDHIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,4($a0)
end;
procedure TDMAC0_DCH0INT.setCHDHIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,4,1
  sw      $v1,($a0)
end;
function  TDMAC0_DCH0INT.getCHDHIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,4,1
end;
procedure TDMAC0_DCH0INT.setCHDDIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,8($a0)
end;
procedure TDMAC0_DCH0INT.clearCHDDIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,4($a0)
end;
procedure TDMAC0_DCH0INT.setCHDDIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,5,1
  sw      $v1,($a0)
end;
function  TDMAC0_DCH0INT.getCHDDIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,5,1
end;
procedure TDMAC0_DCH0INT.setCHSHIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,8($a0)
end;
procedure TDMAC0_DCH0INT.clearCHSHIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,4($a0)
end;
procedure TDMAC0_DCH0INT.setCHSHIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,6,1
  sw      $v1,($a0)
end;
function  TDMAC0_DCH0INT.getCHSHIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,6,1
end;
procedure TDMAC0_DCH0INT.setCHSDIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,8($a0)
end;
procedure TDMAC0_DCH0INT.clearCHSDIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,4($a0)
end;
procedure TDMAC0_DCH0INT.setCHSDIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,7,1
  sw      $v1,($a0)
end;
function  TDMAC0_DCH0INT.getCHSDIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,7,1
end;
procedure TDMAC0_DCH0INT.setCHERIE; assembler; nostackframe; inline;
asm
  lui     $a1,1
  sw $a1,8($a0)
end;
procedure TDMAC0_DCH0INT.clearCHERIE; assembler; nostackframe; inline;
asm
  lui     $a1,1
  sw $a1,4($a0)
end;
procedure TDMAC0_DCH0INT.setCHERIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,16,1
  sw      $v1,($a0)
end;
function  TDMAC0_DCH0INT.getCHERIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,16,1
end;
procedure TDMAC0_DCH0INT.setCHTAIE; assembler; nostackframe; inline;
asm
  lui     $a1,2
  sw $a1,8($a0)
end;
procedure TDMAC0_DCH0INT.clearCHTAIE; assembler; nostackframe; inline;
asm
  lui     $a1,2
  sw $a1,4($a0)
end;
procedure TDMAC0_DCH0INT.setCHTAIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,17,1
  sw      $v1,($a0)
end;
function  TDMAC0_DCH0INT.getCHTAIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,17,1
end;
procedure TDMAC0_DCH0INT.setCHCCIE; assembler; nostackframe; inline;
asm
  lui     $a1,4
  sw $a1,8($a0)
end;
procedure TDMAC0_DCH0INT.clearCHCCIE; assembler; nostackframe; inline;
asm
  lui     $a1,4
  sw $a1,4($a0)
end;
procedure TDMAC0_DCH0INT.setCHCCIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,18,1
  sw      $v1,($a0)
end;
function  TDMAC0_DCH0INT.getCHCCIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,18,1
end;
procedure TDMAC0_DCH0INT.setCHBCIE; assembler; nostackframe; inline;
asm
  lui     $a1,8
  sw $a1,8($a0)
end;
procedure TDMAC0_DCH0INT.clearCHBCIE; assembler; nostackframe; inline;
asm
  lui     $a1,8
  sw $a1,4($a0)
end;
procedure TDMAC0_DCH0INT.setCHBCIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,19,1
  sw      $v1,($a0)
end;
function  TDMAC0_DCH0INT.getCHBCIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,19,1
end;
procedure TDMAC0_DCH0INT.setCHDHIE; assembler; nostackframe; inline;
asm
  lui     $a1,16
  sw $a1,8($a0)
end;
procedure TDMAC0_DCH0INT.clearCHDHIE; assembler; nostackframe; inline;
asm
  lui     $a1,16
  sw $a1,4($a0)
end;
procedure TDMAC0_DCH0INT.setCHDHIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,20,1
  sw      $v1,($a0)
end;
function  TDMAC0_DCH0INT.getCHDHIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,20,1
end;
procedure TDMAC0_DCH0INT.setCHDDIE; assembler; nostackframe; inline;
asm
  lui     $a1,32
  sw $a1,8($a0)
end;
procedure TDMAC0_DCH0INT.clearCHDDIE; assembler; nostackframe; inline;
asm
  lui     $a1,32
  sw $a1,4($a0)
end;
procedure TDMAC0_DCH0INT.setCHDDIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,21,1
  sw      $v1,($a0)
end;
function  TDMAC0_DCH0INT.getCHDDIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,21,1
end;
procedure TDMAC0_DCH0INT.setCHSHIE; assembler; nostackframe; inline;
asm
  lui     $a1,64
  sw $a1,8($a0)
end;
procedure TDMAC0_DCH0INT.clearCHSHIE; assembler; nostackframe; inline;
asm
  lui     $a1,64
  sw $a1,4($a0)
end;
procedure TDMAC0_DCH0INT.setCHSHIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,22,1
  sw      $v1,($a0)
end;
function  TDMAC0_DCH0INT.getCHSHIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,22,1
end;
procedure TDMAC0_DCH0INT.setCHSDIE; assembler; nostackframe; inline;
asm
  lui     $a1,128
  sw $a1,8($a0)
end;
procedure TDMAC0_DCH0INT.clearCHSDIE; assembler; nostackframe; inline;
asm
  lui     $a1,128
  sw $a1,4($a0)
end;
procedure TDMAC0_DCH0INT.setCHSDIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,23,1
  sw      $v1,($a0)
end;
function  TDMAC0_DCH0INT.getCHSDIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,23,1
end;
procedure TDMAC0_DCH0INT.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TDMAC0_DCH0INT.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TDMAC1_DCH1CON.setCHPRI(thebits : TBits_2); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,2
  sw      $v1,($a0)
end;
function  TDMAC1_DCH1CON.getCHPRI : TBits_2;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,2
end;
procedure TDMAC1_DCH1CON.setCHEDET; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,8($a0)
end;
procedure TDMAC1_DCH1CON.clearCHEDET; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,4($a0)
end;
procedure TDMAC1_DCH1CON.setCHEDET(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,2,1
  sw      $v1,($a0)
end;
function  TDMAC1_DCH1CON.getCHEDET : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,2,1
end;
procedure TDMAC1_DCH1CON.setCHAEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,8($a0)
end;
procedure TDMAC1_DCH1CON.clearCHAEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,4($a0)
end;
procedure TDMAC1_DCH1CON.setCHAEN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,4,1
  sw      $v1,($a0)
end;
function  TDMAC1_DCH1CON.getCHAEN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,4,1
end;
procedure TDMAC1_DCH1CON.setCHCHN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,8($a0)
end;
procedure TDMAC1_DCH1CON.clearCHCHN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,4($a0)
end;
procedure TDMAC1_DCH1CON.setCHCHN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,5,1
  sw      $v1,($a0)
end;
function  TDMAC1_DCH1CON.getCHCHN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,5,1
end;
procedure TDMAC1_DCH1CON.setCHAED; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,8($a0)
end;
procedure TDMAC1_DCH1CON.clearCHAED; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,4($a0)
end;
procedure TDMAC1_DCH1CON.setCHAED(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,6,1
  sw      $v1,($a0)
end;
function  TDMAC1_DCH1CON.getCHAED : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,6,1
end;
procedure TDMAC1_DCH1CON.setCHEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,8($a0)
end;
procedure TDMAC1_DCH1CON.clearCHEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,4($a0)
end;
procedure TDMAC1_DCH1CON.setCHEN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,7,1
  sw      $v1,($a0)
end;
function  TDMAC1_DCH1CON.getCHEN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,7,1
end;
procedure TDMAC1_DCH1CON.setCHCHNS; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,8($a0)
end;
procedure TDMAC1_DCH1CON.clearCHCHNS; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,4($a0)
end;
procedure TDMAC1_DCH1CON.setCHCHNS(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,8,1
  sw      $v1,($a0)
end;
function  TDMAC1_DCH1CON.getCHCHNS : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,8,1
end;
procedure TDMAC1_DCH1CON.setCHBUSY; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,8($a0)
end;
procedure TDMAC1_DCH1CON.clearCHBUSY; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,4($a0)
end;
procedure TDMAC1_DCH1CON.setCHBUSY(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,15,1
  sw      $v1,($a0)
end;
function  TDMAC1_DCH1CON.getCHBUSY : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,15,1
end;
procedure TDMAC1_DCH1CON.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TDMAC1_DCH1CON.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TDMAC1_DCH1ECON.setAIRQEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,8($a0)
end;
procedure TDMAC1_DCH1ECON.clearAIRQEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,4($a0)
end;
procedure TDMAC1_DCH1ECON.setAIRQEN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,3,1
  sw      $v1,($a0)
end;
function  TDMAC1_DCH1ECON.getAIRQEN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,3,1
end;
procedure TDMAC1_DCH1ECON.setSIRQEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,8($a0)
end;
procedure TDMAC1_DCH1ECON.clearSIRQEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,4($a0)
end;
procedure TDMAC1_DCH1ECON.setSIRQEN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,4,1
  sw      $v1,($a0)
end;
function  TDMAC1_DCH1ECON.getSIRQEN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,4,1
end;
procedure TDMAC1_DCH1ECON.setPATEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,8($a0)
end;
procedure TDMAC1_DCH1ECON.clearPATEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,4($a0)
end;
procedure TDMAC1_DCH1ECON.setPATEN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,5,1
  sw      $v1,($a0)
end;
function  TDMAC1_DCH1ECON.getPATEN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,5,1
end;
procedure TDMAC1_DCH1ECON.setCABORT; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,8($a0)
end;
procedure TDMAC1_DCH1ECON.clearCABORT; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,4($a0)
end;
procedure TDMAC1_DCH1ECON.setCABORT(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,6,1
  sw      $v1,($a0)
end;
function  TDMAC1_DCH1ECON.getCABORT : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,6,1
end;
procedure TDMAC1_DCH1ECON.setCFORCE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,8($a0)
end;
procedure TDMAC1_DCH1ECON.clearCFORCE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,4($a0)
end;
procedure TDMAC1_DCH1ECON.setCFORCE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,7,1
  sw      $v1,($a0)
end;
function  TDMAC1_DCH1ECON.getCFORCE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,7,1
end;
procedure TDMAC1_DCH1ECON.setCHSIRQ(thebits : TBits_8); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  sll     $a1,$a1,8
  lui    $v0,65535
  ori    $v0,$v0,255
  and   $v1,$v1,$v0
  or    $a1,$a1,$v0
  sw    $a1,($a0)
end;
function  TDMAC1_DCH1ECON.getCHSIRQ : TBits_8;
asm
  lw      $v1,($a0)
  srl     $a1,$a1,8
  ori    $v0,$zero,65280
  and    $a1,$a1,$v0
end;
procedure TDMAC1_DCH1ECON.setCHAIRQ(thebits : TBits_8); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  sll     $a1,$a1,16
  lui    $v0,65280
  ori    $v0,$v0,65535
  and   $v1,$v1,$v0
  or    $a1,$a1,$v0
  sw    $a1,($a0)
end;
function  TDMAC1_DCH1ECON.getCHAIRQ : TBits_8;
asm
  lw      $v1,($a0)
  srl     $a1,$a1,16
  lui    $v0,255
  and    $a1,$a1,$v0
end;
procedure TDMAC1_DCH1ECON.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TDMAC1_DCH1ECON.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TDMAC1_DCH1INT.setCHERIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,8($a0)
end;
procedure TDMAC1_DCH1INT.clearCHERIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,4($a0)
end;
procedure TDMAC1_DCH1INT.setCHERIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,1
  sw      $v1,($a0)
end;
function  TDMAC1_DCH1INT.getCHERIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,1
end;
procedure TDMAC1_DCH1INT.setCHTAIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,8($a0)
end;
procedure TDMAC1_DCH1INT.clearCHTAIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,4($a0)
end;
procedure TDMAC1_DCH1INT.setCHTAIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,1,1
  sw      $v1,($a0)
end;
function  TDMAC1_DCH1INT.getCHTAIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,1,1
end;
procedure TDMAC1_DCH1INT.setCHCCIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,8($a0)
end;
procedure TDMAC1_DCH1INT.clearCHCCIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,4($a0)
end;
procedure TDMAC1_DCH1INT.setCHCCIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,2,1
  sw      $v1,($a0)
end;
function  TDMAC1_DCH1INT.getCHCCIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,2,1
end;
procedure TDMAC1_DCH1INT.setCHBCIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,8($a0)
end;
procedure TDMAC1_DCH1INT.clearCHBCIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,4($a0)
end;
procedure TDMAC1_DCH1INT.setCHBCIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,3,1
  sw      $v1,($a0)
end;
function  TDMAC1_DCH1INT.getCHBCIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,3,1
end;
procedure TDMAC1_DCH1INT.setCHDHIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,8($a0)
end;
procedure TDMAC1_DCH1INT.clearCHDHIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,4($a0)
end;
procedure TDMAC1_DCH1INT.setCHDHIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,4,1
  sw      $v1,($a0)
end;
function  TDMAC1_DCH1INT.getCHDHIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,4,1
end;
procedure TDMAC1_DCH1INT.setCHDDIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,8($a0)
end;
procedure TDMAC1_DCH1INT.clearCHDDIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,4($a0)
end;
procedure TDMAC1_DCH1INT.setCHDDIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,5,1
  sw      $v1,($a0)
end;
function  TDMAC1_DCH1INT.getCHDDIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,5,1
end;
procedure TDMAC1_DCH1INT.setCHSHIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,8($a0)
end;
procedure TDMAC1_DCH1INT.clearCHSHIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,4($a0)
end;
procedure TDMAC1_DCH1INT.setCHSHIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,6,1
  sw      $v1,($a0)
end;
function  TDMAC1_DCH1INT.getCHSHIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,6,1
end;
procedure TDMAC1_DCH1INT.setCHSDIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,8($a0)
end;
procedure TDMAC1_DCH1INT.clearCHSDIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,4($a0)
end;
procedure TDMAC1_DCH1INT.setCHSDIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,7,1
  sw      $v1,($a0)
end;
function  TDMAC1_DCH1INT.getCHSDIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,7,1
end;
procedure TDMAC1_DCH1INT.setCHERIE; assembler; nostackframe; inline;
asm
  lui     $a1,1
  sw $a1,8($a0)
end;
procedure TDMAC1_DCH1INT.clearCHERIE; assembler; nostackframe; inline;
asm
  lui     $a1,1
  sw $a1,4($a0)
end;
procedure TDMAC1_DCH1INT.setCHERIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,16,1
  sw      $v1,($a0)
end;
function  TDMAC1_DCH1INT.getCHERIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,16,1
end;
procedure TDMAC1_DCH1INT.setCHTAIE; assembler; nostackframe; inline;
asm
  lui     $a1,2
  sw $a1,8($a0)
end;
procedure TDMAC1_DCH1INT.clearCHTAIE; assembler; nostackframe; inline;
asm
  lui     $a1,2
  sw $a1,4($a0)
end;
procedure TDMAC1_DCH1INT.setCHTAIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,17,1
  sw      $v1,($a0)
end;
function  TDMAC1_DCH1INT.getCHTAIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,17,1
end;
procedure TDMAC1_DCH1INT.setCHCCIE; assembler; nostackframe; inline;
asm
  lui     $a1,4
  sw $a1,8($a0)
end;
procedure TDMAC1_DCH1INT.clearCHCCIE; assembler; nostackframe; inline;
asm
  lui     $a1,4
  sw $a1,4($a0)
end;
procedure TDMAC1_DCH1INT.setCHCCIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,18,1
  sw      $v1,($a0)
end;
function  TDMAC1_DCH1INT.getCHCCIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,18,1
end;
procedure TDMAC1_DCH1INT.setCHBCIE; assembler; nostackframe; inline;
asm
  lui     $a1,8
  sw $a1,8($a0)
end;
procedure TDMAC1_DCH1INT.clearCHBCIE; assembler; nostackframe; inline;
asm
  lui     $a1,8
  sw $a1,4($a0)
end;
procedure TDMAC1_DCH1INT.setCHBCIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,19,1
  sw      $v1,($a0)
end;
function  TDMAC1_DCH1INT.getCHBCIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,19,1
end;
procedure TDMAC1_DCH1INT.setCHDHIE; assembler; nostackframe; inline;
asm
  lui     $a1,16
  sw $a1,8($a0)
end;
procedure TDMAC1_DCH1INT.clearCHDHIE; assembler; nostackframe; inline;
asm
  lui     $a1,16
  sw $a1,4($a0)
end;
procedure TDMAC1_DCH1INT.setCHDHIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,20,1
  sw      $v1,($a0)
end;
function  TDMAC1_DCH1INT.getCHDHIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,20,1
end;
procedure TDMAC1_DCH1INT.setCHDDIE; assembler; nostackframe; inline;
asm
  lui     $a1,32
  sw $a1,8($a0)
end;
procedure TDMAC1_DCH1INT.clearCHDDIE; assembler; nostackframe; inline;
asm
  lui     $a1,32
  sw $a1,4($a0)
end;
procedure TDMAC1_DCH1INT.setCHDDIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,21,1
  sw      $v1,($a0)
end;
function  TDMAC1_DCH1INT.getCHDDIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,21,1
end;
procedure TDMAC1_DCH1INT.setCHSHIE; assembler; nostackframe; inline;
asm
  lui     $a1,64
  sw $a1,8($a0)
end;
procedure TDMAC1_DCH1INT.clearCHSHIE; assembler; nostackframe; inline;
asm
  lui     $a1,64
  sw $a1,4($a0)
end;
procedure TDMAC1_DCH1INT.setCHSHIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,22,1
  sw      $v1,($a0)
end;
function  TDMAC1_DCH1INT.getCHSHIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,22,1
end;
procedure TDMAC1_DCH1INT.setCHSDIE; assembler; nostackframe; inline;
asm
  lui     $a1,128
  sw $a1,8($a0)
end;
procedure TDMAC1_DCH1INT.clearCHSDIE; assembler; nostackframe; inline;
asm
  lui     $a1,128
  sw $a1,4($a0)
end;
procedure TDMAC1_DCH1INT.setCHSDIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,23,1
  sw      $v1,($a0)
end;
function  TDMAC1_DCH1INT.getCHSDIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,23,1
end;
procedure TDMAC1_DCH1INT.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TDMAC1_DCH1INT.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TDMAC2_DCH2CON.setCHPRI(thebits : TBits_2); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,2
  sw      $v1,($a0)
end;
function  TDMAC2_DCH2CON.getCHPRI : TBits_2;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,2
end;
procedure TDMAC2_DCH2CON.setCHEDET; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,8($a0)
end;
procedure TDMAC2_DCH2CON.clearCHEDET; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,4($a0)
end;
procedure TDMAC2_DCH2CON.setCHEDET(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,2,1
  sw      $v1,($a0)
end;
function  TDMAC2_DCH2CON.getCHEDET : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,2,1
end;
procedure TDMAC2_DCH2CON.setCHAEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,8($a0)
end;
procedure TDMAC2_DCH2CON.clearCHAEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,4($a0)
end;
procedure TDMAC2_DCH2CON.setCHAEN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,4,1
  sw      $v1,($a0)
end;
function  TDMAC2_DCH2CON.getCHAEN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,4,1
end;
procedure TDMAC2_DCH2CON.setCHCHN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,8($a0)
end;
procedure TDMAC2_DCH2CON.clearCHCHN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,4($a0)
end;
procedure TDMAC2_DCH2CON.setCHCHN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,5,1
  sw      $v1,($a0)
end;
function  TDMAC2_DCH2CON.getCHCHN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,5,1
end;
procedure TDMAC2_DCH2CON.setCHAED; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,8($a0)
end;
procedure TDMAC2_DCH2CON.clearCHAED; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,4($a0)
end;
procedure TDMAC2_DCH2CON.setCHAED(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,6,1
  sw      $v1,($a0)
end;
function  TDMAC2_DCH2CON.getCHAED : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,6,1
end;
procedure TDMAC2_DCH2CON.setCHEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,8($a0)
end;
procedure TDMAC2_DCH2CON.clearCHEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,4($a0)
end;
procedure TDMAC2_DCH2CON.setCHEN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,7,1
  sw      $v1,($a0)
end;
function  TDMAC2_DCH2CON.getCHEN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,7,1
end;
procedure TDMAC2_DCH2CON.setCHCHNS; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,8($a0)
end;
procedure TDMAC2_DCH2CON.clearCHCHNS; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,4($a0)
end;
procedure TDMAC2_DCH2CON.setCHCHNS(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,8,1
  sw      $v1,($a0)
end;
function  TDMAC2_DCH2CON.getCHCHNS : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,8,1
end;
procedure TDMAC2_DCH2CON.setCHBUSY; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,8($a0)
end;
procedure TDMAC2_DCH2CON.clearCHBUSY; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,4($a0)
end;
procedure TDMAC2_DCH2CON.setCHBUSY(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,15,1
  sw      $v1,($a0)
end;
function  TDMAC2_DCH2CON.getCHBUSY : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,15,1
end;
procedure TDMAC2_DCH2CON.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TDMAC2_DCH2CON.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TDMAC2_DCH2ECON.setAIRQEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,8($a0)
end;
procedure TDMAC2_DCH2ECON.clearAIRQEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,4($a0)
end;
procedure TDMAC2_DCH2ECON.setAIRQEN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,3,1
  sw      $v1,($a0)
end;
function  TDMAC2_DCH2ECON.getAIRQEN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,3,1
end;
procedure TDMAC2_DCH2ECON.setSIRQEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,8($a0)
end;
procedure TDMAC2_DCH2ECON.clearSIRQEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,4($a0)
end;
procedure TDMAC2_DCH2ECON.setSIRQEN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,4,1
  sw      $v1,($a0)
end;
function  TDMAC2_DCH2ECON.getSIRQEN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,4,1
end;
procedure TDMAC2_DCH2ECON.setPATEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,8($a0)
end;
procedure TDMAC2_DCH2ECON.clearPATEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,4($a0)
end;
procedure TDMAC2_DCH2ECON.setPATEN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,5,1
  sw      $v1,($a0)
end;
function  TDMAC2_DCH2ECON.getPATEN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,5,1
end;
procedure TDMAC2_DCH2ECON.setCABORT; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,8($a0)
end;
procedure TDMAC2_DCH2ECON.clearCABORT; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,4($a0)
end;
procedure TDMAC2_DCH2ECON.setCABORT(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,6,1
  sw      $v1,($a0)
end;
function  TDMAC2_DCH2ECON.getCABORT : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,6,1
end;
procedure TDMAC2_DCH2ECON.setCFORCE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,8($a0)
end;
procedure TDMAC2_DCH2ECON.clearCFORCE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,4($a0)
end;
procedure TDMAC2_DCH2ECON.setCFORCE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,7,1
  sw      $v1,($a0)
end;
function  TDMAC2_DCH2ECON.getCFORCE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,7,1
end;
procedure TDMAC2_DCH2ECON.setCHSIRQ(thebits : TBits_8); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  sll     $a1,$a1,8
  lui    $v0,65535
  ori    $v0,$v0,255
  and   $v1,$v1,$v0
  or    $a1,$a1,$v0
  sw    $a1,($a0)
end;
function  TDMAC2_DCH2ECON.getCHSIRQ : TBits_8;
asm
  lw      $v1,($a0)
  srl     $a1,$a1,8
  ori    $v0,$zero,65280
  and    $a1,$a1,$v0
end;
procedure TDMAC2_DCH2ECON.setCHAIRQ(thebits : TBits_8); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  sll     $a1,$a1,16
  lui    $v0,65280
  ori    $v0,$v0,65535
  and   $v1,$v1,$v0
  or    $a1,$a1,$v0
  sw    $a1,($a0)
end;
function  TDMAC2_DCH2ECON.getCHAIRQ : TBits_8;
asm
  lw      $v1,($a0)
  srl     $a1,$a1,16
  lui    $v0,255
  and    $a1,$a1,$v0
end;
procedure TDMAC2_DCH2ECON.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TDMAC2_DCH2ECON.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TDMAC2_DCH2INT.setCHERIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,8($a0)
end;
procedure TDMAC2_DCH2INT.clearCHERIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,4($a0)
end;
procedure TDMAC2_DCH2INT.setCHERIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,1
  sw      $v1,($a0)
end;
function  TDMAC2_DCH2INT.getCHERIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,1
end;
procedure TDMAC2_DCH2INT.setCHTAIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,8($a0)
end;
procedure TDMAC2_DCH2INT.clearCHTAIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,4($a0)
end;
procedure TDMAC2_DCH2INT.setCHTAIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,1,1
  sw      $v1,($a0)
end;
function  TDMAC2_DCH2INT.getCHTAIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,1,1
end;
procedure TDMAC2_DCH2INT.setCHCCIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,8($a0)
end;
procedure TDMAC2_DCH2INT.clearCHCCIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,4($a0)
end;
procedure TDMAC2_DCH2INT.setCHCCIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,2,1
  sw      $v1,($a0)
end;
function  TDMAC2_DCH2INT.getCHCCIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,2,1
end;
procedure TDMAC2_DCH2INT.setCHBCIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,8($a0)
end;
procedure TDMAC2_DCH2INT.clearCHBCIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,4($a0)
end;
procedure TDMAC2_DCH2INT.setCHBCIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,3,1
  sw      $v1,($a0)
end;
function  TDMAC2_DCH2INT.getCHBCIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,3,1
end;
procedure TDMAC2_DCH2INT.setCHDHIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,8($a0)
end;
procedure TDMAC2_DCH2INT.clearCHDHIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,4($a0)
end;
procedure TDMAC2_DCH2INT.setCHDHIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,4,1
  sw      $v1,($a0)
end;
function  TDMAC2_DCH2INT.getCHDHIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,4,1
end;
procedure TDMAC2_DCH2INT.setCHDDIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,8($a0)
end;
procedure TDMAC2_DCH2INT.clearCHDDIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,4($a0)
end;
procedure TDMAC2_DCH2INT.setCHDDIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,5,1
  sw      $v1,($a0)
end;
function  TDMAC2_DCH2INT.getCHDDIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,5,1
end;
procedure TDMAC2_DCH2INT.setCHSHIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,8($a0)
end;
procedure TDMAC2_DCH2INT.clearCHSHIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,4($a0)
end;
procedure TDMAC2_DCH2INT.setCHSHIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,6,1
  sw      $v1,($a0)
end;
function  TDMAC2_DCH2INT.getCHSHIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,6,1
end;
procedure TDMAC2_DCH2INT.setCHSDIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,8($a0)
end;
procedure TDMAC2_DCH2INT.clearCHSDIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,4($a0)
end;
procedure TDMAC2_DCH2INT.setCHSDIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,7,1
  sw      $v1,($a0)
end;
function  TDMAC2_DCH2INT.getCHSDIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,7,1
end;
procedure TDMAC2_DCH2INT.setCHERIE; assembler; nostackframe; inline;
asm
  lui     $a1,1
  sw $a1,8($a0)
end;
procedure TDMAC2_DCH2INT.clearCHERIE; assembler; nostackframe; inline;
asm
  lui     $a1,1
  sw $a1,4($a0)
end;
procedure TDMAC2_DCH2INT.setCHERIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,16,1
  sw      $v1,($a0)
end;
function  TDMAC2_DCH2INT.getCHERIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,16,1
end;
procedure TDMAC2_DCH2INT.setCHTAIE; assembler; nostackframe; inline;
asm
  lui     $a1,2
  sw $a1,8($a0)
end;
procedure TDMAC2_DCH2INT.clearCHTAIE; assembler; nostackframe; inline;
asm
  lui     $a1,2
  sw $a1,4($a0)
end;
procedure TDMAC2_DCH2INT.setCHTAIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,17,1
  sw      $v1,($a0)
end;
function  TDMAC2_DCH2INT.getCHTAIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,17,1
end;
procedure TDMAC2_DCH2INT.setCHCCIE; assembler; nostackframe; inline;
asm
  lui     $a1,4
  sw $a1,8($a0)
end;
procedure TDMAC2_DCH2INT.clearCHCCIE; assembler; nostackframe; inline;
asm
  lui     $a1,4
  sw $a1,4($a0)
end;
procedure TDMAC2_DCH2INT.setCHCCIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,18,1
  sw      $v1,($a0)
end;
function  TDMAC2_DCH2INT.getCHCCIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,18,1
end;
procedure TDMAC2_DCH2INT.setCHBCIE; assembler; nostackframe; inline;
asm
  lui     $a1,8
  sw $a1,8($a0)
end;
procedure TDMAC2_DCH2INT.clearCHBCIE; assembler; nostackframe; inline;
asm
  lui     $a1,8
  sw $a1,4($a0)
end;
procedure TDMAC2_DCH2INT.setCHBCIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,19,1
  sw      $v1,($a0)
end;
function  TDMAC2_DCH2INT.getCHBCIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,19,1
end;
procedure TDMAC2_DCH2INT.setCHDHIE; assembler; nostackframe; inline;
asm
  lui     $a1,16
  sw $a1,8($a0)
end;
procedure TDMAC2_DCH2INT.clearCHDHIE; assembler; nostackframe; inline;
asm
  lui     $a1,16
  sw $a1,4($a0)
end;
procedure TDMAC2_DCH2INT.setCHDHIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,20,1
  sw      $v1,($a0)
end;
function  TDMAC2_DCH2INT.getCHDHIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,20,1
end;
procedure TDMAC2_DCH2INT.setCHDDIE; assembler; nostackframe; inline;
asm
  lui     $a1,32
  sw $a1,8($a0)
end;
procedure TDMAC2_DCH2INT.clearCHDDIE; assembler; nostackframe; inline;
asm
  lui     $a1,32
  sw $a1,4($a0)
end;
procedure TDMAC2_DCH2INT.setCHDDIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,21,1
  sw      $v1,($a0)
end;
function  TDMAC2_DCH2INT.getCHDDIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,21,1
end;
procedure TDMAC2_DCH2INT.setCHSHIE; assembler; nostackframe; inline;
asm
  lui     $a1,64
  sw $a1,8($a0)
end;
procedure TDMAC2_DCH2INT.clearCHSHIE; assembler; nostackframe; inline;
asm
  lui     $a1,64
  sw $a1,4($a0)
end;
procedure TDMAC2_DCH2INT.setCHSHIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,22,1
  sw      $v1,($a0)
end;
function  TDMAC2_DCH2INT.getCHSHIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,22,1
end;
procedure TDMAC2_DCH2INT.setCHSDIE; assembler; nostackframe; inline;
asm
  lui     $a1,128
  sw $a1,8($a0)
end;
procedure TDMAC2_DCH2INT.clearCHSDIE; assembler; nostackframe; inline;
asm
  lui     $a1,128
  sw $a1,4($a0)
end;
procedure TDMAC2_DCH2INT.setCHSDIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,23,1
  sw      $v1,($a0)
end;
function  TDMAC2_DCH2INT.getCHSDIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,23,1
end;
procedure TDMAC2_DCH2INT.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TDMAC2_DCH2INT.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TDMAC3_DCH3CON.setCHPRI(thebits : TBits_2); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,2
  sw      $v1,($a0)
end;
function  TDMAC3_DCH3CON.getCHPRI : TBits_2;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,2
end;
procedure TDMAC3_DCH3CON.setCHEDET; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,8($a0)
end;
procedure TDMAC3_DCH3CON.clearCHEDET; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,4($a0)
end;
procedure TDMAC3_DCH3CON.setCHEDET(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,2,1
  sw      $v1,($a0)
end;
function  TDMAC3_DCH3CON.getCHEDET : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,2,1
end;
procedure TDMAC3_DCH3CON.setCHAEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,8($a0)
end;
procedure TDMAC3_DCH3CON.clearCHAEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,4($a0)
end;
procedure TDMAC3_DCH3CON.setCHAEN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,4,1
  sw      $v1,($a0)
end;
function  TDMAC3_DCH3CON.getCHAEN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,4,1
end;
procedure TDMAC3_DCH3CON.setCHCHN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,8($a0)
end;
procedure TDMAC3_DCH3CON.clearCHCHN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,4($a0)
end;
procedure TDMAC3_DCH3CON.setCHCHN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,5,1
  sw      $v1,($a0)
end;
function  TDMAC3_DCH3CON.getCHCHN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,5,1
end;
procedure TDMAC3_DCH3CON.setCHAED; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,8($a0)
end;
procedure TDMAC3_DCH3CON.clearCHAED; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,4($a0)
end;
procedure TDMAC3_DCH3CON.setCHAED(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,6,1
  sw      $v1,($a0)
end;
function  TDMAC3_DCH3CON.getCHAED : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,6,1
end;
procedure TDMAC3_DCH3CON.setCHEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,8($a0)
end;
procedure TDMAC3_DCH3CON.clearCHEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,4($a0)
end;
procedure TDMAC3_DCH3CON.setCHEN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,7,1
  sw      $v1,($a0)
end;
function  TDMAC3_DCH3CON.getCHEN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,7,1
end;
procedure TDMAC3_DCH3CON.setCHCHNS; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,8($a0)
end;
procedure TDMAC3_DCH3CON.clearCHCHNS; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,4($a0)
end;
procedure TDMAC3_DCH3CON.setCHCHNS(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,8,1
  sw      $v1,($a0)
end;
function  TDMAC3_DCH3CON.getCHCHNS : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,8,1
end;
procedure TDMAC3_DCH3CON.setCHBUSY; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,8($a0)
end;
procedure TDMAC3_DCH3CON.clearCHBUSY; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,4($a0)
end;
procedure TDMAC3_DCH3CON.setCHBUSY(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,15,1
  sw      $v1,($a0)
end;
function  TDMAC3_DCH3CON.getCHBUSY : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,15,1
end;
procedure TDMAC3_DCH3CON.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TDMAC3_DCH3CON.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TDMAC3_DCH3ECON.setAIRQEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,8($a0)
end;
procedure TDMAC3_DCH3ECON.clearAIRQEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,4($a0)
end;
procedure TDMAC3_DCH3ECON.setAIRQEN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,3,1
  sw      $v1,($a0)
end;
function  TDMAC3_DCH3ECON.getAIRQEN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,3,1
end;
procedure TDMAC3_DCH3ECON.setSIRQEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,8($a0)
end;
procedure TDMAC3_DCH3ECON.clearSIRQEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,4($a0)
end;
procedure TDMAC3_DCH3ECON.setSIRQEN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,4,1
  sw      $v1,($a0)
end;
function  TDMAC3_DCH3ECON.getSIRQEN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,4,1
end;
procedure TDMAC3_DCH3ECON.setPATEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,8($a0)
end;
procedure TDMAC3_DCH3ECON.clearPATEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,4($a0)
end;
procedure TDMAC3_DCH3ECON.setPATEN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,5,1
  sw      $v1,($a0)
end;
function  TDMAC3_DCH3ECON.getPATEN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,5,1
end;
procedure TDMAC3_DCH3ECON.setCABORT; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,8($a0)
end;
procedure TDMAC3_DCH3ECON.clearCABORT; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,4($a0)
end;
procedure TDMAC3_DCH3ECON.setCABORT(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,6,1
  sw      $v1,($a0)
end;
function  TDMAC3_DCH3ECON.getCABORT : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,6,1
end;
procedure TDMAC3_DCH3ECON.setCFORCE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,8($a0)
end;
procedure TDMAC3_DCH3ECON.clearCFORCE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,4($a0)
end;
procedure TDMAC3_DCH3ECON.setCFORCE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,7,1
  sw      $v1,($a0)
end;
function  TDMAC3_DCH3ECON.getCFORCE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,7,1
end;
procedure TDMAC3_DCH3ECON.setCHSIRQ(thebits : TBits_8); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  sll     $a1,$a1,8
  lui    $v0,65535
  ori    $v0,$v0,255
  and   $v1,$v1,$v0
  or    $a1,$a1,$v0
  sw    $a1,($a0)
end;
function  TDMAC3_DCH3ECON.getCHSIRQ : TBits_8;
asm
  lw      $v1,($a0)
  srl     $a1,$a1,8
  ori    $v0,$zero,65280
  and    $a1,$a1,$v0
end;
procedure TDMAC3_DCH3ECON.setCHAIRQ(thebits : TBits_8); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  sll     $a1,$a1,16
  lui    $v0,65280
  ori    $v0,$v0,65535
  and   $v1,$v1,$v0
  or    $a1,$a1,$v0
  sw    $a1,($a0)
end;
function  TDMAC3_DCH3ECON.getCHAIRQ : TBits_8;
asm
  lw      $v1,($a0)
  srl     $a1,$a1,16
  lui    $v0,255
  and    $a1,$a1,$v0
end;
procedure TDMAC3_DCH3ECON.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TDMAC3_DCH3ECON.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TDMAC3_DCH3INT.setCHERIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,8($a0)
end;
procedure TDMAC3_DCH3INT.clearCHERIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,4($a0)
end;
procedure TDMAC3_DCH3INT.setCHERIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,1
  sw      $v1,($a0)
end;
function  TDMAC3_DCH3INT.getCHERIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,1
end;
procedure TDMAC3_DCH3INT.setCHTAIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,8($a0)
end;
procedure TDMAC3_DCH3INT.clearCHTAIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,4($a0)
end;
procedure TDMAC3_DCH3INT.setCHTAIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,1,1
  sw      $v1,($a0)
end;
function  TDMAC3_DCH3INT.getCHTAIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,1,1
end;
procedure TDMAC3_DCH3INT.setCHCCIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,8($a0)
end;
procedure TDMAC3_DCH3INT.clearCHCCIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,4($a0)
end;
procedure TDMAC3_DCH3INT.setCHCCIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,2,1
  sw      $v1,($a0)
end;
function  TDMAC3_DCH3INT.getCHCCIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,2,1
end;
procedure TDMAC3_DCH3INT.setCHBCIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,8($a0)
end;
procedure TDMAC3_DCH3INT.clearCHBCIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,4($a0)
end;
procedure TDMAC3_DCH3INT.setCHBCIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,3,1
  sw      $v1,($a0)
end;
function  TDMAC3_DCH3INT.getCHBCIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,3,1
end;
procedure TDMAC3_DCH3INT.setCHDHIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,8($a0)
end;
procedure TDMAC3_DCH3INT.clearCHDHIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,4($a0)
end;
procedure TDMAC3_DCH3INT.setCHDHIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,4,1
  sw      $v1,($a0)
end;
function  TDMAC3_DCH3INT.getCHDHIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,4,1
end;
procedure TDMAC3_DCH3INT.setCHDDIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,8($a0)
end;
procedure TDMAC3_DCH3INT.clearCHDDIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,4($a0)
end;
procedure TDMAC3_DCH3INT.setCHDDIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,5,1
  sw      $v1,($a0)
end;
function  TDMAC3_DCH3INT.getCHDDIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,5,1
end;
procedure TDMAC3_DCH3INT.setCHSHIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,8($a0)
end;
procedure TDMAC3_DCH3INT.clearCHSHIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,4($a0)
end;
procedure TDMAC3_DCH3INT.setCHSHIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,6,1
  sw      $v1,($a0)
end;
function  TDMAC3_DCH3INT.getCHSHIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,6,1
end;
procedure TDMAC3_DCH3INT.setCHSDIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,8($a0)
end;
procedure TDMAC3_DCH3INT.clearCHSDIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,4($a0)
end;
procedure TDMAC3_DCH3INT.setCHSDIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,7,1
  sw      $v1,($a0)
end;
function  TDMAC3_DCH3INT.getCHSDIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,7,1
end;
procedure TDMAC3_DCH3INT.setCHERIE; assembler; nostackframe; inline;
asm
  lui     $a1,1
  sw $a1,8($a0)
end;
procedure TDMAC3_DCH3INT.clearCHERIE; assembler; nostackframe; inline;
asm
  lui     $a1,1
  sw $a1,4($a0)
end;
procedure TDMAC3_DCH3INT.setCHERIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,16,1
  sw      $v1,($a0)
end;
function  TDMAC3_DCH3INT.getCHERIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,16,1
end;
procedure TDMAC3_DCH3INT.setCHTAIE; assembler; nostackframe; inline;
asm
  lui     $a1,2
  sw $a1,8($a0)
end;
procedure TDMAC3_DCH3INT.clearCHTAIE; assembler; nostackframe; inline;
asm
  lui     $a1,2
  sw $a1,4($a0)
end;
procedure TDMAC3_DCH3INT.setCHTAIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,17,1
  sw      $v1,($a0)
end;
function  TDMAC3_DCH3INT.getCHTAIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,17,1
end;
procedure TDMAC3_DCH3INT.setCHCCIE; assembler; nostackframe; inline;
asm
  lui     $a1,4
  sw $a1,8($a0)
end;
procedure TDMAC3_DCH3INT.clearCHCCIE; assembler; nostackframe; inline;
asm
  lui     $a1,4
  sw $a1,4($a0)
end;
procedure TDMAC3_DCH3INT.setCHCCIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,18,1
  sw      $v1,($a0)
end;
function  TDMAC3_DCH3INT.getCHCCIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,18,1
end;
procedure TDMAC3_DCH3INT.setCHBCIE; assembler; nostackframe; inline;
asm
  lui     $a1,8
  sw $a1,8($a0)
end;
procedure TDMAC3_DCH3INT.clearCHBCIE; assembler; nostackframe; inline;
asm
  lui     $a1,8
  sw $a1,4($a0)
end;
procedure TDMAC3_DCH3INT.setCHBCIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,19,1
  sw      $v1,($a0)
end;
function  TDMAC3_DCH3INT.getCHBCIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,19,1
end;
procedure TDMAC3_DCH3INT.setCHDHIE; assembler; nostackframe; inline;
asm
  lui     $a1,16
  sw $a1,8($a0)
end;
procedure TDMAC3_DCH3INT.clearCHDHIE; assembler; nostackframe; inline;
asm
  lui     $a1,16
  sw $a1,4($a0)
end;
procedure TDMAC3_DCH3INT.setCHDHIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,20,1
  sw      $v1,($a0)
end;
function  TDMAC3_DCH3INT.getCHDHIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,20,1
end;
procedure TDMAC3_DCH3INT.setCHDDIE; assembler; nostackframe; inline;
asm
  lui     $a1,32
  sw $a1,8($a0)
end;
procedure TDMAC3_DCH3INT.clearCHDDIE; assembler; nostackframe; inline;
asm
  lui     $a1,32
  sw $a1,4($a0)
end;
procedure TDMAC3_DCH3INT.setCHDDIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,21,1
  sw      $v1,($a0)
end;
function  TDMAC3_DCH3INT.getCHDDIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,21,1
end;
procedure TDMAC3_DCH3INT.setCHSHIE; assembler; nostackframe; inline;
asm
  lui     $a1,64
  sw $a1,8($a0)
end;
procedure TDMAC3_DCH3INT.clearCHSHIE; assembler; nostackframe; inline;
asm
  lui     $a1,64
  sw $a1,4($a0)
end;
procedure TDMAC3_DCH3INT.setCHSHIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,22,1
  sw      $v1,($a0)
end;
function  TDMAC3_DCH3INT.getCHSHIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,22,1
end;
procedure TDMAC3_DCH3INT.setCHSDIE; assembler; nostackframe; inline;
asm
  lui     $a1,128
  sw $a1,8($a0)
end;
procedure TDMAC3_DCH3INT.clearCHSDIE; assembler; nostackframe; inline;
asm
  lui     $a1,128
  sw $a1,4($a0)
end;
procedure TDMAC3_DCH3INT.setCHSDIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,23,1
  sw      $v1,($a0)
end;
function  TDMAC3_DCH3INT.getCHSDIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,23,1
end;
procedure TDMAC3_DCH3INT.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TDMAC3_DCH3INT.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TDMAC4_DCH4CON.setCHPRI(thebits : TBits_2); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,2
  sw      $v1,($a0)
end;
function  TDMAC4_DCH4CON.getCHPRI : TBits_2;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,2
end;
procedure TDMAC4_DCH4CON.setCHEDET; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,8($a0)
end;
procedure TDMAC4_DCH4CON.clearCHEDET; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,4($a0)
end;
procedure TDMAC4_DCH4CON.setCHEDET(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,2,1
  sw      $v1,($a0)
end;
function  TDMAC4_DCH4CON.getCHEDET : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,2,1
end;
procedure TDMAC4_DCH4CON.setCHAEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,8($a0)
end;
procedure TDMAC4_DCH4CON.clearCHAEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,4($a0)
end;
procedure TDMAC4_DCH4CON.setCHAEN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,4,1
  sw      $v1,($a0)
end;
function  TDMAC4_DCH4CON.getCHAEN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,4,1
end;
procedure TDMAC4_DCH4CON.setCHCHN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,8($a0)
end;
procedure TDMAC4_DCH4CON.clearCHCHN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,4($a0)
end;
procedure TDMAC4_DCH4CON.setCHCHN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,5,1
  sw      $v1,($a0)
end;
function  TDMAC4_DCH4CON.getCHCHN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,5,1
end;
procedure TDMAC4_DCH4CON.setCHAED; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,8($a0)
end;
procedure TDMAC4_DCH4CON.clearCHAED; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,4($a0)
end;
procedure TDMAC4_DCH4CON.setCHAED(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,6,1
  sw      $v1,($a0)
end;
function  TDMAC4_DCH4CON.getCHAED : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,6,1
end;
procedure TDMAC4_DCH4CON.setCHEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,8($a0)
end;
procedure TDMAC4_DCH4CON.clearCHEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,4($a0)
end;
procedure TDMAC4_DCH4CON.setCHEN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,7,1
  sw      $v1,($a0)
end;
function  TDMAC4_DCH4CON.getCHEN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,7,1
end;
procedure TDMAC4_DCH4CON.setCHCHNS; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,8($a0)
end;
procedure TDMAC4_DCH4CON.clearCHCHNS; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,4($a0)
end;
procedure TDMAC4_DCH4CON.setCHCHNS(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,8,1
  sw      $v1,($a0)
end;
function  TDMAC4_DCH4CON.getCHCHNS : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,8,1
end;
procedure TDMAC4_DCH4CON.setCHBUSY; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,8($a0)
end;
procedure TDMAC4_DCH4CON.clearCHBUSY; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,4($a0)
end;
procedure TDMAC4_DCH4CON.setCHBUSY(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,15,1
  sw      $v1,($a0)
end;
function  TDMAC4_DCH4CON.getCHBUSY : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,15,1
end;
procedure TDMAC4_DCH4CON.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TDMAC4_DCH4CON.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TDMAC4_DCH4ECON.setAIRQEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,8($a0)
end;
procedure TDMAC4_DCH4ECON.clearAIRQEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,4($a0)
end;
procedure TDMAC4_DCH4ECON.setAIRQEN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,3,1
  sw      $v1,($a0)
end;
function  TDMAC4_DCH4ECON.getAIRQEN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,3,1
end;
procedure TDMAC4_DCH4ECON.setSIRQEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,8($a0)
end;
procedure TDMAC4_DCH4ECON.clearSIRQEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,4($a0)
end;
procedure TDMAC4_DCH4ECON.setSIRQEN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,4,1
  sw      $v1,($a0)
end;
function  TDMAC4_DCH4ECON.getSIRQEN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,4,1
end;
procedure TDMAC4_DCH4ECON.setPATEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,8($a0)
end;
procedure TDMAC4_DCH4ECON.clearPATEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,4($a0)
end;
procedure TDMAC4_DCH4ECON.setPATEN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,5,1
  sw      $v1,($a0)
end;
function  TDMAC4_DCH4ECON.getPATEN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,5,1
end;
procedure TDMAC4_DCH4ECON.setCABORT; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,8($a0)
end;
procedure TDMAC4_DCH4ECON.clearCABORT; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,4($a0)
end;
procedure TDMAC4_DCH4ECON.setCABORT(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,6,1
  sw      $v1,($a0)
end;
function  TDMAC4_DCH4ECON.getCABORT : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,6,1
end;
procedure TDMAC4_DCH4ECON.setCFORCE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,8($a0)
end;
procedure TDMAC4_DCH4ECON.clearCFORCE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,4($a0)
end;
procedure TDMAC4_DCH4ECON.setCFORCE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,7,1
  sw      $v1,($a0)
end;
function  TDMAC4_DCH4ECON.getCFORCE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,7,1
end;
procedure TDMAC4_DCH4ECON.setCHSIRQ(thebits : TBits_8); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  sll     $a1,$a1,8
  lui    $v0,65535
  ori    $v0,$v0,255
  and   $v1,$v1,$v0
  or    $a1,$a1,$v0
  sw    $a1,($a0)
end;
function  TDMAC4_DCH4ECON.getCHSIRQ : TBits_8;
asm
  lw      $v1,($a0)
  srl     $a1,$a1,8
  ori    $v0,$zero,65280
  and    $a1,$a1,$v0
end;
procedure TDMAC4_DCH4ECON.setCHAIRQ(thebits : TBits_8); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  sll     $a1,$a1,16
  lui    $v0,65280
  ori    $v0,$v0,65535
  and   $v1,$v1,$v0
  or    $a1,$a1,$v0
  sw    $a1,($a0)
end;
function  TDMAC4_DCH4ECON.getCHAIRQ : TBits_8;
asm
  lw      $v1,($a0)
  srl     $a1,$a1,16
  lui    $v0,255
  and    $a1,$a1,$v0
end;
procedure TDMAC4_DCH4ECON.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TDMAC4_DCH4ECON.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TDMAC4_DCH4INT.setCHERIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,8($a0)
end;
procedure TDMAC4_DCH4INT.clearCHERIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,4($a0)
end;
procedure TDMAC4_DCH4INT.setCHERIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,1
  sw      $v1,($a0)
end;
function  TDMAC4_DCH4INT.getCHERIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,1
end;
procedure TDMAC4_DCH4INT.setCHTAIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,8($a0)
end;
procedure TDMAC4_DCH4INT.clearCHTAIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,4($a0)
end;
procedure TDMAC4_DCH4INT.setCHTAIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,1,1
  sw      $v1,($a0)
end;
function  TDMAC4_DCH4INT.getCHTAIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,1,1
end;
procedure TDMAC4_DCH4INT.setCHCCIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,8($a0)
end;
procedure TDMAC4_DCH4INT.clearCHCCIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,4($a0)
end;
procedure TDMAC4_DCH4INT.setCHCCIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,2,1
  sw      $v1,($a0)
end;
function  TDMAC4_DCH4INT.getCHCCIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,2,1
end;
procedure TDMAC4_DCH4INT.setCHBCIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,8($a0)
end;
procedure TDMAC4_DCH4INT.clearCHBCIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,4($a0)
end;
procedure TDMAC4_DCH4INT.setCHBCIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,3,1
  sw      $v1,($a0)
end;
function  TDMAC4_DCH4INT.getCHBCIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,3,1
end;
procedure TDMAC4_DCH4INT.setCHDHIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,8($a0)
end;
procedure TDMAC4_DCH4INT.clearCHDHIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,4($a0)
end;
procedure TDMAC4_DCH4INT.setCHDHIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,4,1
  sw      $v1,($a0)
end;
function  TDMAC4_DCH4INT.getCHDHIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,4,1
end;
procedure TDMAC4_DCH4INT.setCHDDIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,8($a0)
end;
procedure TDMAC4_DCH4INT.clearCHDDIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,4($a0)
end;
procedure TDMAC4_DCH4INT.setCHDDIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,5,1
  sw      $v1,($a0)
end;
function  TDMAC4_DCH4INT.getCHDDIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,5,1
end;
procedure TDMAC4_DCH4INT.setCHSHIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,8($a0)
end;
procedure TDMAC4_DCH4INT.clearCHSHIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,4($a0)
end;
procedure TDMAC4_DCH4INT.setCHSHIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,6,1
  sw      $v1,($a0)
end;
function  TDMAC4_DCH4INT.getCHSHIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,6,1
end;
procedure TDMAC4_DCH4INT.setCHSDIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,8($a0)
end;
procedure TDMAC4_DCH4INT.clearCHSDIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,4($a0)
end;
procedure TDMAC4_DCH4INT.setCHSDIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,7,1
  sw      $v1,($a0)
end;
function  TDMAC4_DCH4INT.getCHSDIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,7,1
end;
procedure TDMAC4_DCH4INT.setCHERIE; assembler; nostackframe; inline;
asm
  lui     $a1,1
  sw $a1,8($a0)
end;
procedure TDMAC4_DCH4INT.clearCHERIE; assembler; nostackframe; inline;
asm
  lui     $a1,1
  sw $a1,4($a0)
end;
procedure TDMAC4_DCH4INT.setCHERIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,16,1
  sw      $v1,($a0)
end;
function  TDMAC4_DCH4INT.getCHERIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,16,1
end;
procedure TDMAC4_DCH4INT.setCHTAIE; assembler; nostackframe; inline;
asm
  lui     $a1,2
  sw $a1,8($a0)
end;
procedure TDMAC4_DCH4INT.clearCHTAIE; assembler; nostackframe; inline;
asm
  lui     $a1,2
  sw $a1,4($a0)
end;
procedure TDMAC4_DCH4INT.setCHTAIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,17,1
  sw      $v1,($a0)
end;
function  TDMAC4_DCH4INT.getCHTAIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,17,1
end;
procedure TDMAC4_DCH4INT.setCHCCIE; assembler; nostackframe; inline;
asm
  lui     $a1,4
  sw $a1,8($a0)
end;
procedure TDMAC4_DCH4INT.clearCHCCIE; assembler; nostackframe; inline;
asm
  lui     $a1,4
  sw $a1,4($a0)
end;
procedure TDMAC4_DCH4INT.setCHCCIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,18,1
  sw      $v1,($a0)
end;
function  TDMAC4_DCH4INT.getCHCCIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,18,1
end;
procedure TDMAC4_DCH4INT.setCHBCIE; assembler; nostackframe; inline;
asm
  lui     $a1,8
  sw $a1,8($a0)
end;
procedure TDMAC4_DCH4INT.clearCHBCIE; assembler; nostackframe; inline;
asm
  lui     $a1,8
  sw $a1,4($a0)
end;
procedure TDMAC4_DCH4INT.setCHBCIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,19,1
  sw      $v1,($a0)
end;
function  TDMAC4_DCH4INT.getCHBCIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,19,1
end;
procedure TDMAC4_DCH4INT.setCHDHIE; assembler; nostackframe; inline;
asm
  lui     $a1,16
  sw $a1,8($a0)
end;
procedure TDMAC4_DCH4INT.clearCHDHIE; assembler; nostackframe; inline;
asm
  lui     $a1,16
  sw $a1,4($a0)
end;
procedure TDMAC4_DCH4INT.setCHDHIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,20,1
  sw      $v1,($a0)
end;
function  TDMAC4_DCH4INT.getCHDHIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,20,1
end;
procedure TDMAC4_DCH4INT.setCHDDIE; assembler; nostackframe; inline;
asm
  lui     $a1,32
  sw $a1,8($a0)
end;
procedure TDMAC4_DCH4INT.clearCHDDIE; assembler; nostackframe; inline;
asm
  lui     $a1,32
  sw $a1,4($a0)
end;
procedure TDMAC4_DCH4INT.setCHDDIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,21,1
  sw      $v1,($a0)
end;
function  TDMAC4_DCH4INT.getCHDDIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,21,1
end;
procedure TDMAC4_DCH4INT.setCHSHIE; assembler; nostackframe; inline;
asm
  lui     $a1,64
  sw $a1,8($a0)
end;
procedure TDMAC4_DCH4INT.clearCHSHIE; assembler; nostackframe; inline;
asm
  lui     $a1,64
  sw $a1,4($a0)
end;
procedure TDMAC4_DCH4INT.setCHSHIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,22,1
  sw      $v1,($a0)
end;
function  TDMAC4_DCH4INT.getCHSHIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,22,1
end;
procedure TDMAC4_DCH4INT.setCHSDIE; assembler; nostackframe; inline;
asm
  lui     $a1,128
  sw $a1,8($a0)
end;
procedure TDMAC4_DCH4INT.clearCHSDIE; assembler; nostackframe; inline;
asm
  lui     $a1,128
  sw $a1,4($a0)
end;
procedure TDMAC4_DCH4INT.setCHSDIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,23,1
  sw      $v1,($a0)
end;
function  TDMAC4_DCH4INT.getCHSDIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,23,1
end;
procedure TDMAC4_DCH4INT.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TDMAC4_DCH4INT.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TDMAC5_DCH5CON.setCHPRI(thebits : TBits_2); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,2
  sw      $v1,($a0)
end;
function  TDMAC5_DCH5CON.getCHPRI : TBits_2;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,2
end;
procedure TDMAC5_DCH5CON.setCHEDET; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,8($a0)
end;
procedure TDMAC5_DCH5CON.clearCHEDET; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,4($a0)
end;
procedure TDMAC5_DCH5CON.setCHEDET(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,2,1
  sw      $v1,($a0)
end;
function  TDMAC5_DCH5CON.getCHEDET : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,2,1
end;
procedure TDMAC5_DCH5CON.setCHAEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,8($a0)
end;
procedure TDMAC5_DCH5CON.clearCHAEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,4($a0)
end;
procedure TDMAC5_DCH5CON.setCHAEN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,4,1
  sw      $v1,($a0)
end;
function  TDMAC5_DCH5CON.getCHAEN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,4,1
end;
procedure TDMAC5_DCH5CON.setCHCHN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,8($a0)
end;
procedure TDMAC5_DCH5CON.clearCHCHN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,4($a0)
end;
procedure TDMAC5_DCH5CON.setCHCHN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,5,1
  sw      $v1,($a0)
end;
function  TDMAC5_DCH5CON.getCHCHN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,5,1
end;
procedure TDMAC5_DCH5CON.setCHAED; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,8($a0)
end;
procedure TDMAC5_DCH5CON.clearCHAED; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,4($a0)
end;
procedure TDMAC5_DCH5CON.setCHAED(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,6,1
  sw      $v1,($a0)
end;
function  TDMAC5_DCH5CON.getCHAED : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,6,1
end;
procedure TDMAC5_DCH5CON.setCHEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,8($a0)
end;
procedure TDMAC5_DCH5CON.clearCHEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,4($a0)
end;
procedure TDMAC5_DCH5CON.setCHEN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,7,1
  sw      $v1,($a0)
end;
function  TDMAC5_DCH5CON.getCHEN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,7,1
end;
procedure TDMAC5_DCH5CON.setCHCHNS; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,8($a0)
end;
procedure TDMAC5_DCH5CON.clearCHCHNS; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,4($a0)
end;
procedure TDMAC5_DCH5CON.setCHCHNS(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,8,1
  sw      $v1,($a0)
end;
function  TDMAC5_DCH5CON.getCHCHNS : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,8,1
end;
procedure TDMAC5_DCH5CON.setCHBUSY; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,8($a0)
end;
procedure TDMAC5_DCH5CON.clearCHBUSY; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,4($a0)
end;
procedure TDMAC5_DCH5CON.setCHBUSY(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,15,1
  sw      $v1,($a0)
end;
function  TDMAC5_DCH5CON.getCHBUSY : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,15,1
end;
procedure TDMAC5_DCH5CON.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TDMAC5_DCH5CON.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TDMAC5_DCH5ECON.setAIRQEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,8($a0)
end;
procedure TDMAC5_DCH5ECON.clearAIRQEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,4($a0)
end;
procedure TDMAC5_DCH5ECON.setAIRQEN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,3,1
  sw      $v1,($a0)
end;
function  TDMAC5_DCH5ECON.getAIRQEN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,3,1
end;
procedure TDMAC5_DCH5ECON.setSIRQEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,8($a0)
end;
procedure TDMAC5_DCH5ECON.clearSIRQEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,4($a0)
end;
procedure TDMAC5_DCH5ECON.setSIRQEN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,4,1
  sw      $v1,($a0)
end;
function  TDMAC5_DCH5ECON.getSIRQEN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,4,1
end;
procedure TDMAC5_DCH5ECON.setPATEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,8($a0)
end;
procedure TDMAC5_DCH5ECON.clearPATEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,4($a0)
end;
procedure TDMAC5_DCH5ECON.setPATEN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,5,1
  sw      $v1,($a0)
end;
function  TDMAC5_DCH5ECON.getPATEN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,5,1
end;
procedure TDMAC5_DCH5ECON.setCABORT; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,8($a0)
end;
procedure TDMAC5_DCH5ECON.clearCABORT; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,4($a0)
end;
procedure TDMAC5_DCH5ECON.setCABORT(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,6,1
  sw      $v1,($a0)
end;
function  TDMAC5_DCH5ECON.getCABORT : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,6,1
end;
procedure TDMAC5_DCH5ECON.setCFORCE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,8($a0)
end;
procedure TDMAC5_DCH5ECON.clearCFORCE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,4($a0)
end;
procedure TDMAC5_DCH5ECON.setCFORCE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,7,1
  sw      $v1,($a0)
end;
function  TDMAC5_DCH5ECON.getCFORCE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,7,1
end;
procedure TDMAC5_DCH5ECON.setCHSIRQ(thebits : TBits_8); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  sll     $a1,$a1,8
  lui    $v0,65535
  ori    $v0,$v0,255
  and   $v1,$v1,$v0
  or    $a1,$a1,$v0
  sw    $a1,($a0)
end;
function  TDMAC5_DCH5ECON.getCHSIRQ : TBits_8;
asm
  lw      $v1,($a0)
  srl     $a1,$a1,8
  ori    $v0,$zero,65280
  and    $a1,$a1,$v0
end;
procedure TDMAC5_DCH5ECON.setCHAIRQ(thebits : TBits_8); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  sll     $a1,$a1,16
  lui    $v0,65280
  ori    $v0,$v0,65535
  and   $v1,$v1,$v0
  or    $a1,$a1,$v0
  sw    $a1,($a0)
end;
function  TDMAC5_DCH5ECON.getCHAIRQ : TBits_8;
asm
  lw      $v1,($a0)
  srl     $a1,$a1,16
  lui    $v0,255
  and    $a1,$a1,$v0
end;
procedure TDMAC5_DCH5ECON.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TDMAC5_DCH5ECON.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TDMAC5_DCH5INT.setCHERIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,8($a0)
end;
procedure TDMAC5_DCH5INT.clearCHERIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,4($a0)
end;
procedure TDMAC5_DCH5INT.setCHERIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,1
  sw      $v1,($a0)
end;
function  TDMAC5_DCH5INT.getCHERIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,1
end;
procedure TDMAC5_DCH5INT.setCHTAIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,8($a0)
end;
procedure TDMAC5_DCH5INT.clearCHTAIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,4($a0)
end;
procedure TDMAC5_DCH5INT.setCHTAIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,1,1
  sw      $v1,($a0)
end;
function  TDMAC5_DCH5INT.getCHTAIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,1,1
end;
procedure TDMAC5_DCH5INT.setCHCCIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,8($a0)
end;
procedure TDMAC5_DCH5INT.clearCHCCIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,4($a0)
end;
procedure TDMAC5_DCH5INT.setCHCCIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,2,1
  sw      $v1,($a0)
end;
function  TDMAC5_DCH5INT.getCHCCIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,2,1
end;
procedure TDMAC5_DCH5INT.setCHBCIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,8($a0)
end;
procedure TDMAC5_DCH5INT.clearCHBCIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,4($a0)
end;
procedure TDMAC5_DCH5INT.setCHBCIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,3,1
  sw      $v1,($a0)
end;
function  TDMAC5_DCH5INT.getCHBCIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,3,1
end;
procedure TDMAC5_DCH5INT.setCHDHIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,8($a0)
end;
procedure TDMAC5_DCH5INT.clearCHDHIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,4($a0)
end;
procedure TDMAC5_DCH5INT.setCHDHIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,4,1
  sw      $v1,($a0)
end;
function  TDMAC5_DCH5INT.getCHDHIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,4,1
end;
procedure TDMAC5_DCH5INT.setCHDDIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,8($a0)
end;
procedure TDMAC5_DCH5INT.clearCHDDIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,4($a0)
end;
procedure TDMAC5_DCH5INT.setCHDDIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,5,1
  sw      $v1,($a0)
end;
function  TDMAC5_DCH5INT.getCHDDIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,5,1
end;
procedure TDMAC5_DCH5INT.setCHSHIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,8($a0)
end;
procedure TDMAC5_DCH5INT.clearCHSHIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,4($a0)
end;
procedure TDMAC5_DCH5INT.setCHSHIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,6,1
  sw      $v1,($a0)
end;
function  TDMAC5_DCH5INT.getCHSHIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,6,1
end;
procedure TDMAC5_DCH5INT.setCHSDIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,8($a0)
end;
procedure TDMAC5_DCH5INT.clearCHSDIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,4($a0)
end;
procedure TDMAC5_DCH5INT.setCHSDIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,7,1
  sw      $v1,($a0)
end;
function  TDMAC5_DCH5INT.getCHSDIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,7,1
end;
procedure TDMAC5_DCH5INT.setCHERIE; assembler; nostackframe; inline;
asm
  lui     $a1,1
  sw $a1,8($a0)
end;
procedure TDMAC5_DCH5INT.clearCHERIE; assembler; nostackframe; inline;
asm
  lui     $a1,1
  sw $a1,4($a0)
end;
procedure TDMAC5_DCH5INT.setCHERIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,16,1
  sw      $v1,($a0)
end;
function  TDMAC5_DCH5INT.getCHERIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,16,1
end;
procedure TDMAC5_DCH5INT.setCHTAIE; assembler; nostackframe; inline;
asm
  lui     $a1,2
  sw $a1,8($a0)
end;
procedure TDMAC5_DCH5INT.clearCHTAIE; assembler; nostackframe; inline;
asm
  lui     $a1,2
  sw $a1,4($a0)
end;
procedure TDMAC5_DCH5INT.setCHTAIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,17,1
  sw      $v1,($a0)
end;
function  TDMAC5_DCH5INT.getCHTAIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,17,1
end;
procedure TDMAC5_DCH5INT.setCHCCIE; assembler; nostackframe; inline;
asm
  lui     $a1,4
  sw $a1,8($a0)
end;
procedure TDMAC5_DCH5INT.clearCHCCIE; assembler; nostackframe; inline;
asm
  lui     $a1,4
  sw $a1,4($a0)
end;
procedure TDMAC5_DCH5INT.setCHCCIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,18,1
  sw      $v1,($a0)
end;
function  TDMAC5_DCH5INT.getCHCCIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,18,1
end;
procedure TDMAC5_DCH5INT.setCHBCIE; assembler; nostackframe; inline;
asm
  lui     $a1,8
  sw $a1,8($a0)
end;
procedure TDMAC5_DCH5INT.clearCHBCIE; assembler; nostackframe; inline;
asm
  lui     $a1,8
  sw $a1,4($a0)
end;
procedure TDMAC5_DCH5INT.setCHBCIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,19,1
  sw      $v1,($a0)
end;
function  TDMAC5_DCH5INT.getCHBCIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,19,1
end;
procedure TDMAC5_DCH5INT.setCHDHIE; assembler; nostackframe; inline;
asm
  lui     $a1,16
  sw $a1,8($a0)
end;
procedure TDMAC5_DCH5INT.clearCHDHIE; assembler; nostackframe; inline;
asm
  lui     $a1,16
  sw $a1,4($a0)
end;
procedure TDMAC5_DCH5INT.setCHDHIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,20,1
  sw      $v1,($a0)
end;
function  TDMAC5_DCH5INT.getCHDHIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,20,1
end;
procedure TDMAC5_DCH5INT.setCHDDIE; assembler; nostackframe; inline;
asm
  lui     $a1,32
  sw $a1,8($a0)
end;
procedure TDMAC5_DCH5INT.clearCHDDIE; assembler; nostackframe; inline;
asm
  lui     $a1,32
  sw $a1,4($a0)
end;
procedure TDMAC5_DCH5INT.setCHDDIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,21,1
  sw      $v1,($a0)
end;
function  TDMAC5_DCH5INT.getCHDDIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,21,1
end;
procedure TDMAC5_DCH5INT.setCHSHIE; assembler; nostackframe; inline;
asm
  lui     $a1,64
  sw $a1,8($a0)
end;
procedure TDMAC5_DCH5INT.clearCHSHIE; assembler; nostackframe; inline;
asm
  lui     $a1,64
  sw $a1,4($a0)
end;
procedure TDMAC5_DCH5INT.setCHSHIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,22,1
  sw      $v1,($a0)
end;
function  TDMAC5_DCH5INT.getCHSHIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,22,1
end;
procedure TDMAC5_DCH5INT.setCHSDIE; assembler; nostackframe; inline;
asm
  lui     $a1,128
  sw $a1,8($a0)
end;
procedure TDMAC5_DCH5INT.clearCHSDIE; assembler; nostackframe; inline;
asm
  lui     $a1,128
  sw $a1,4($a0)
end;
procedure TDMAC5_DCH5INT.setCHSDIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,23,1
  sw      $v1,($a0)
end;
function  TDMAC5_DCH5INT.getCHSDIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,23,1
end;
procedure TDMAC5_DCH5INT.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TDMAC5_DCH5INT.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TDMAC6_DCH6CON.setCHPRI(thebits : TBits_2); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,2
  sw      $v1,($a0)
end;
function  TDMAC6_DCH6CON.getCHPRI : TBits_2;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,2
end;
procedure TDMAC6_DCH6CON.setCHEDET; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,8($a0)
end;
procedure TDMAC6_DCH6CON.clearCHEDET; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,4($a0)
end;
procedure TDMAC6_DCH6CON.setCHEDET(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,2,1
  sw      $v1,($a0)
end;
function  TDMAC6_DCH6CON.getCHEDET : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,2,1
end;
procedure TDMAC6_DCH6CON.setCHAEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,8($a0)
end;
procedure TDMAC6_DCH6CON.clearCHAEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,4($a0)
end;
procedure TDMAC6_DCH6CON.setCHAEN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,4,1
  sw      $v1,($a0)
end;
function  TDMAC6_DCH6CON.getCHAEN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,4,1
end;
procedure TDMAC6_DCH6CON.setCHCHN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,8($a0)
end;
procedure TDMAC6_DCH6CON.clearCHCHN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,4($a0)
end;
procedure TDMAC6_DCH6CON.setCHCHN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,5,1
  sw      $v1,($a0)
end;
function  TDMAC6_DCH6CON.getCHCHN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,5,1
end;
procedure TDMAC6_DCH6CON.setCHAED; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,8($a0)
end;
procedure TDMAC6_DCH6CON.clearCHAED; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,4($a0)
end;
procedure TDMAC6_DCH6CON.setCHAED(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,6,1
  sw      $v1,($a0)
end;
function  TDMAC6_DCH6CON.getCHAED : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,6,1
end;
procedure TDMAC6_DCH6CON.setCHEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,8($a0)
end;
procedure TDMAC6_DCH6CON.clearCHEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,4($a0)
end;
procedure TDMAC6_DCH6CON.setCHEN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,7,1
  sw      $v1,($a0)
end;
function  TDMAC6_DCH6CON.getCHEN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,7,1
end;
procedure TDMAC6_DCH6CON.setCHCHNS; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,8($a0)
end;
procedure TDMAC6_DCH6CON.clearCHCHNS; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,4($a0)
end;
procedure TDMAC6_DCH6CON.setCHCHNS(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,8,1
  sw      $v1,($a0)
end;
function  TDMAC6_DCH6CON.getCHCHNS : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,8,1
end;
procedure TDMAC6_DCH6CON.setCHBUSY; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,8($a0)
end;
procedure TDMAC6_DCH6CON.clearCHBUSY; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,4($a0)
end;
procedure TDMAC6_DCH6CON.setCHBUSY(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,15,1
  sw      $v1,($a0)
end;
function  TDMAC6_DCH6CON.getCHBUSY : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,15,1
end;
procedure TDMAC6_DCH6CON.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TDMAC6_DCH6CON.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TDMAC6_DCH6ECON.setAIRQEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,8($a0)
end;
procedure TDMAC6_DCH6ECON.clearAIRQEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,4($a0)
end;
procedure TDMAC6_DCH6ECON.setAIRQEN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,3,1
  sw      $v1,($a0)
end;
function  TDMAC6_DCH6ECON.getAIRQEN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,3,1
end;
procedure TDMAC6_DCH6ECON.setSIRQEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,8($a0)
end;
procedure TDMAC6_DCH6ECON.clearSIRQEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,4($a0)
end;
procedure TDMAC6_DCH6ECON.setSIRQEN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,4,1
  sw      $v1,($a0)
end;
function  TDMAC6_DCH6ECON.getSIRQEN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,4,1
end;
procedure TDMAC6_DCH6ECON.setPATEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,8($a0)
end;
procedure TDMAC6_DCH6ECON.clearPATEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,4($a0)
end;
procedure TDMAC6_DCH6ECON.setPATEN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,5,1
  sw      $v1,($a0)
end;
function  TDMAC6_DCH6ECON.getPATEN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,5,1
end;
procedure TDMAC6_DCH6ECON.setCABORT; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,8($a0)
end;
procedure TDMAC6_DCH6ECON.clearCABORT; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,4($a0)
end;
procedure TDMAC6_DCH6ECON.setCABORT(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,6,1
  sw      $v1,($a0)
end;
function  TDMAC6_DCH6ECON.getCABORT : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,6,1
end;
procedure TDMAC6_DCH6ECON.setCFORCE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,8($a0)
end;
procedure TDMAC6_DCH6ECON.clearCFORCE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,4($a0)
end;
procedure TDMAC6_DCH6ECON.setCFORCE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,7,1
  sw      $v1,($a0)
end;
function  TDMAC6_DCH6ECON.getCFORCE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,7,1
end;
procedure TDMAC6_DCH6ECON.setCHSIRQ(thebits : TBits_8); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  sll     $a1,$a1,8
  lui    $v0,65535
  ori    $v0,$v0,255
  and   $v1,$v1,$v0
  or    $a1,$a1,$v0
  sw    $a1,($a0)
end;
function  TDMAC6_DCH6ECON.getCHSIRQ : TBits_8;
asm
  lw      $v1,($a0)
  srl     $a1,$a1,8
  ori    $v0,$zero,65280
  and    $a1,$a1,$v0
end;
procedure TDMAC6_DCH6ECON.setCHAIRQ(thebits : TBits_8); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  sll     $a1,$a1,16
  lui    $v0,65280
  ori    $v0,$v0,65535
  and   $v1,$v1,$v0
  or    $a1,$a1,$v0
  sw    $a1,($a0)
end;
function  TDMAC6_DCH6ECON.getCHAIRQ : TBits_8;
asm
  lw      $v1,($a0)
  srl     $a1,$a1,16
  lui    $v0,255
  and    $a1,$a1,$v0
end;
procedure TDMAC6_DCH6ECON.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TDMAC6_DCH6ECON.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TDMAC6_DCH6INT.setCHERIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,8($a0)
end;
procedure TDMAC6_DCH6INT.clearCHERIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,4($a0)
end;
procedure TDMAC6_DCH6INT.setCHERIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,1
  sw      $v1,($a0)
end;
function  TDMAC6_DCH6INT.getCHERIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,1
end;
procedure TDMAC6_DCH6INT.setCHTAIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,8($a0)
end;
procedure TDMAC6_DCH6INT.clearCHTAIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,4($a0)
end;
procedure TDMAC6_DCH6INT.setCHTAIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,1,1
  sw      $v1,($a0)
end;
function  TDMAC6_DCH6INT.getCHTAIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,1,1
end;
procedure TDMAC6_DCH6INT.setCHCCIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,8($a0)
end;
procedure TDMAC6_DCH6INT.clearCHCCIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,4($a0)
end;
procedure TDMAC6_DCH6INT.setCHCCIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,2,1
  sw      $v1,($a0)
end;
function  TDMAC6_DCH6INT.getCHCCIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,2,1
end;
procedure TDMAC6_DCH6INT.setCHBCIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,8($a0)
end;
procedure TDMAC6_DCH6INT.clearCHBCIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,4($a0)
end;
procedure TDMAC6_DCH6INT.setCHBCIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,3,1
  sw      $v1,($a0)
end;
function  TDMAC6_DCH6INT.getCHBCIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,3,1
end;
procedure TDMAC6_DCH6INT.setCHDHIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,8($a0)
end;
procedure TDMAC6_DCH6INT.clearCHDHIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,4($a0)
end;
procedure TDMAC6_DCH6INT.setCHDHIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,4,1
  sw      $v1,($a0)
end;
function  TDMAC6_DCH6INT.getCHDHIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,4,1
end;
procedure TDMAC6_DCH6INT.setCHDDIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,8($a0)
end;
procedure TDMAC6_DCH6INT.clearCHDDIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,4($a0)
end;
procedure TDMAC6_DCH6INT.setCHDDIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,5,1
  sw      $v1,($a0)
end;
function  TDMAC6_DCH6INT.getCHDDIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,5,1
end;
procedure TDMAC6_DCH6INT.setCHSHIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,8($a0)
end;
procedure TDMAC6_DCH6INT.clearCHSHIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,4($a0)
end;
procedure TDMAC6_DCH6INT.setCHSHIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,6,1
  sw      $v1,($a0)
end;
function  TDMAC6_DCH6INT.getCHSHIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,6,1
end;
procedure TDMAC6_DCH6INT.setCHSDIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,8($a0)
end;
procedure TDMAC6_DCH6INT.clearCHSDIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,4($a0)
end;
procedure TDMAC6_DCH6INT.setCHSDIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,7,1
  sw      $v1,($a0)
end;
function  TDMAC6_DCH6INT.getCHSDIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,7,1
end;
procedure TDMAC6_DCH6INT.setCHERIE; assembler; nostackframe; inline;
asm
  lui     $a1,1
  sw $a1,8($a0)
end;
procedure TDMAC6_DCH6INT.clearCHERIE; assembler; nostackframe; inline;
asm
  lui     $a1,1
  sw $a1,4($a0)
end;
procedure TDMAC6_DCH6INT.setCHERIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,16,1
  sw      $v1,($a0)
end;
function  TDMAC6_DCH6INT.getCHERIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,16,1
end;
procedure TDMAC6_DCH6INT.setCHTAIE; assembler; nostackframe; inline;
asm
  lui     $a1,2
  sw $a1,8($a0)
end;
procedure TDMAC6_DCH6INT.clearCHTAIE; assembler; nostackframe; inline;
asm
  lui     $a1,2
  sw $a1,4($a0)
end;
procedure TDMAC6_DCH6INT.setCHTAIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,17,1
  sw      $v1,($a0)
end;
function  TDMAC6_DCH6INT.getCHTAIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,17,1
end;
procedure TDMAC6_DCH6INT.setCHCCIE; assembler; nostackframe; inline;
asm
  lui     $a1,4
  sw $a1,8($a0)
end;
procedure TDMAC6_DCH6INT.clearCHCCIE; assembler; nostackframe; inline;
asm
  lui     $a1,4
  sw $a1,4($a0)
end;
procedure TDMAC6_DCH6INT.setCHCCIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,18,1
  sw      $v1,($a0)
end;
function  TDMAC6_DCH6INT.getCHCCIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,18,1
end;
procedure TDMAC6_DCH6INT.setCHBCIE; assembler; nostackframe; inline;
asm
  lui     $a1,8
  sw $a1,8($a0)
end;
procedure TDMAC6_DCH6INT.clearCHBCIE; assembler; nostackframe; inline;
asm
  lui     $a1,8
  sw $a1,4($a0)
end;
procedure TDMAC6_DCH6INT.setCHBCIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,19,1
  sw      $v1,($a0)
end;
function  TDMAC6_DCH6INT.getCHBCIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,19,1
end;
procedure TDMAC6_DCH6INT.setCHDHIE; assembler; nostackframe; inline;
asm
  lui     $a1,16
  sw $a1,8($a0)
end;
procedure TDMAC6_DCH6INT.clearCHDHIE; assembler; nostackframe; inline;
asm
  lui     $a1,16
  sw $a1,4($a0)
end;
procedure TDMAC6_DCH6INT.setCHDHIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,20,1
  sw      $v1,($a0)
end;
function  TDMAC6_DCH6INT.getCHDHIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,20,1
end;
procedure TDMAC6_DCH6INT.setCHDDIE; assembler; nostackframe; inline;
asm
  lui     $a1,32
  sw $a1,8($a0)
end;
procedure TDMAC6_DCH6INT.clearCHDDIE; assembler; nostackframe; inline;
asm
  lui     $a1,32
  sw $a1,4($a0)
end;
procedure TDMAC6_DCH6INT.setCHDDIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,21,1
  sw      $v1,($a0)
end;
function  TDMAC6_DCH6INT.getCHDDIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,21,1
end;
procedure TDMAC6_DCH6INT.setCHSHIE; assembler; nostackframe; inline;
asm
  lui     $a1,64
  sw $a1,8($a0)
end;
procedure TDMAC6_DCH6INT.clearCHSHIE; assembler; nostackframe; inline;
asm
  lui     $a1,64
  sw $a1,4($a0)
end;
procedure TDMAC6_DCH6INT.setCHSHIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,22,1
  sw      $v1,($a0)
end;
function  TDMAC6_DCH6INT.getCHSHIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,22,1
end;
procedure TDMAC6_DCH6INT.setCHSDIE; assembler; nostackframe; inline;
asm
  lui     $a1,128
  sw $a1,8($a0)
end;
procedure TDMAC6_DCH6INT.clearCHSDIE; assembler; nostackframe; inline;
asm
  lui     $a1,128
  sw $a1,4($a0)
end;
procedure TDMAC6_DCH6INT.setCHSDIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,23,1
  sw      $v1,($a0)
end;
function  TDMAC6_DCH6INT.getCHSDIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,23,1
end;
procedure TDMAC6_DCH6INT.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TDMAC6_DCH6INT.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TDMAC7_DCH7CON.setCHPRI(thebits : TBits_2); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,2
  sw      $v1,($a0)
end;
function  TDMAC7_DCH7CON.getCHPRI : TBits_2;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,2
end;
procedure TDMAC7_DCH7CON.setCHEDET; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,8($a0)
end;
procedure TDMAC7_DCH7CON.clearCHEDET; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,4($a0)
end;
procedure TDMAC7_DCH7CON.setCHEDET(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,2,1
  sw      $v1,($a0)
end;
function  TDMAC7_DCH7CON.getCHEDET : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,2,1
end;
procedure TDMAC7_DCH7CON.setCHAEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,8($a0)
end;
procedure TDMAC7_DCH7CON.clearCHAEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,4($a0)
end;
procedure TDMAC7_DCH7CON.setCHAEN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,4,1
  sw      $v1,($a0)
end;
function  TDMAC7_DCH7CON.getCHAEN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,4,1
end;
procedure TDMAC7_DCH7CON.setCHCHN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,8($a0)
end;
procedure TDMAC7_DCH7CON.clearCHCHN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,4($a0)
end;
procedure TDMAC7_DCH7CON.setCHCHN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,5,1
  sw      $v1,($a0)
end;
function  TDMAC7_DCH7CON.getCHCHN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,5,1
end;
procedure TDMAC7_DCH7CON.setCHAED; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,8($a0)
end;
procedure TDMAC7_DCH7CON.clearCHAED; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,4($a0)
end;
procedure TDMAC7_DCH7CON.setCHAED(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,6,1
  sw      $v1,($a0)
end;
function  TDMAC7_DCH7CON.getCHAED : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,6,1
end;
procedure TDMAC7_DCH7CON.setCHEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,8($a0)
end;
procedure TDMAC7_DCH7CON.clearCHEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,4($a0)
end;
procedure TDMAC7_DCH7CON.setCHEN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,7,1
  sw      $v1,($a0)
end;
function  TDMAC7_DCH7CON.getCHEN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,7,1
end;
procedure TDMAC7_DCH7CON.setCHCHNS; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,8($a0)
end;
procedure TDMAC7_DCH7CON.clearCHCHNS; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,4($a0)
end;
procedure TDMAC7_DCH7CON.setCHCHNS(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,8,1
  sw      $v1,($a0)
end;
function  TDMAC7_DCH7CON.getCHCHNS : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,8,1
end;
procedure TDMAC7_DCH7CON.setCHBUSY; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,8($a0)
end;
procedure TDMAC7_DCH7CON.clearCHBUSY; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,4($a0)
end;
procedure TDMAC7_DCH7CON.setCHBUSY(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,15,1
  sw      $v1,($a0)
end;
function  TDMAC7_DCH7CON.getCHBUSY : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,15,1
end;
procedure TDMAC7_DCH7CON.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TDMAC7_DCH7CON.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TDMAC7_DCH7ECON.setAIRQEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,8($a0)
end;
procedure TDMAC7_DCH7ECON.clearAIRQEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,4($a0)
end;
procedure TDMAC7_DCH7ECON.setAIRQEN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,3,1
  sw      $v1,($a0)
end;
function  TDMAC7_DCH7ECON.getAIRQEN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,3,1
end;
procedure TDMAC7_DCH7ECON.setSIRQEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,8($a0)
end;
procedure TDMAC7_DCH7ECON.clearSIRQEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,4($a0)
end;
procedure TDMAC7_DCH7ECON.setSIRQEN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,4,1
  sw      $v1,($a0)
end;
function  TDMAC7_DCH7ECON.getSIRQEN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,4,1
end;
procedure TDMAC7_DCH7ECON.setPATEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,8($a0)
end;
procedure TDMAC7_DCH7ECON.clearPATEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,4($a0)
end;
procedure TDMAC7_DCH7ECON.setPATEN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,5,1
  sw      $v1,($a0)
end;
function  TDMAC7_DCH7ECON.getPATEN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,5,1
end;
procedure TDMAC7_DCH7ECON.setCABORT; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,8($a0)
end;
procedure TDMAC7_DCH7ECON.clearCABORT; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,4($a0)
end;
procedure TDMAC7_DCH7ECON.setCABORT(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,6,1
  sw      $v1,($a0)
end;
function  TDMAC7_DCH7ECON.getCABORT : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,6,1
end;
procedure TDMAC7_DCH7ECON.setCFORCE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,8($a0)
end;
procedure TDMAC7_DCH7ECON.clearCFORCE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,4($a0)
end;
procedure TDMAC7_DCH7ECON.setCFORCE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,7,1
  sw      $v1,($a0)
end;
function  TDMAC7_DCH7ECON.getCFORCE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,7,1
end;
procedure TDMAC7_DCH7ECON.setCHSIRQ(thebits : TBits_8); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  sll     $a1,$a1,8
  lui    $v0,65535
  ori    $v0,$v0,255
  and   $v1,$v1,$v0
  or    $a1,$a1,$v0
  sw    $a1,($a0)
end;
function  TDMAC7_DCH7ECON.getCHSIRQ : TBits_8;
asm
  lw      $v1,($a0)
  srl     $a1,$a1,8
  ori    $v0,$zero,65280
  and    $a1,$a1,$v0
end;
procedure TDMAC7_DCH7ECON.setCHAIRQ(thebits : TBits_8); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  sll     $a1,$a1,16
  lui    $v0,65280
  ori    $v0,$v0,65535
  and   $v1,$v1,$v0
  or    $a1,$a1,$v0
  sw    $a1,($a0)
end;
function  TDMAC7_DCH7ECON.getCHAIRQ : TBits_8;
asm
  lw      $v1,($a0)
  srl     $a1,$a1,16
  lui    $v0,255
  and    $a1,$a1,$v0
end;
procedure TDMAC7_DCH7ECON.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TDMAC7_DCH7ECON.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TDMAC7_DCH7INT.setCHERIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,8($a0)
end;
procedure TDMAC7_DCH7INT.clearCHERIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,4($a0)
end;
procedure TDMAC7_DCH7INT.setCHERIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,1
  sw      $v1,($a0)
end;
function  TDMAC7_DCH7INT.getCHERIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,1
end;
procedure TDMAC7_DCH7INT.setCHTAIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,8($a0)
end;
procedure TDMAC7_DCH7INT.clearCHTAIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,4($a0)
end;
procedure TDMAC7_DCH7INT.setCHTAIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,1,1
  sw      $v1,($a0)
end;
function  TDMAC7_DCH7INT.getCHTAIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,1,1
end;
procedure TDMAC7_DCH7INT.setCHCCIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,8($a0)
end;
procedure TDMAC7_DCH7INT.clearCHCCIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,4($a0)
end;
procedure TDMAC7_DCH7INT.setCHCCIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,2,1
  sw      $v1,($a0)
end;
function  TDMAC7_DCH7INT.getCHCCIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,2,1
end;
procedure TDMAC7_DCH7INT.setCHBCIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,8($a0)
end;
procedure TDMAC7_DCH7INT.clearCHBCIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,4($a0)
end;
procedure TDMAC7_DCH7INT.setCHBCIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,3,1
  sw      $v1,($a0)
end;
function  TDMAC7_DCH7INT.getCHBCIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,3,1
end;
procedure TDMAC7_DCH7INT.setCHDHIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,8($a0)
end;
procedure TDMAC7_DCH7INT.clearCHDHIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,4($a0)
end;
procedure TDMAC7_DCH7INT.setCHDHIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,4,1
  sw      $v1,($a0)
end;
function  TDMAC7_DCH7INT.getCHDHIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,4,1
end;
procedure TDMAC7_DCH7INT.setCHDDIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,8($a0)
end;
procedure TDMAC7_DCH7INT.clearCHDDIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,4($a0)
end;
procedure TDMAC7_DCH7INT.setCHDDIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,5,1
  sw      $v1,($a0)
end;
function  TDMAC7_DCH7INT.getCHDDIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,5,1
end;
procedure TDMAC7_DCH7INT.setCHSHIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,8($a0)
end;
procedure TDMAC7_DCH7INT.clearCHSHIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,4($a0)
end;
procedure TDMAC7_DCH7INT.setCHSHIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,6,1
  sw      $v1,($a0)
end;
function  TDMAC7_DCH7INT.getCHSHIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,6,1
end;
procedure TDMAC7_DCH7INT.setCHSDIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,8($a0)
end;
procedure TDMAC7_DCH7INT.clearCHSDIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,4($a0)
end;
procedure TDMAC7_DCH7INT.setCHSDIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,7,1
  sw      $v1,($a0)
end;
function  TDMAC7_DCH7INT.getCHSDIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,7,1
end;
procedure TDMAC7_DCH7INT.setCHERIE; assembler; nostackframe; inline;
asm
  lui     $a1,1
  sw $a1,8($a0)
end;
procedure TDMAC7_DCH7INT.clearCHERIE; assembler; nostackframe; inline;
asm
  lui     $a1,1
  sw $a1,4($a0)
end;
procedure TDMAC7_DCH7INT.setCHERIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,16,1
  sw      $v1,($a0)
end;
function  TDMAC7_DCH7INT.getCHERIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,16,1
end;
procedure TDMAC7_DCH7INT.setCHTAIE; assembler; nostackframe; inline;
asm
  lui     $a1,2
  sw $a1,8($a0)
end;
procedure TDMAC7_DCH7INT.clearCHTAIE; assembler; nostackframe; inline;
asm
  lui     $a1,2
  sw $a1,4($a0)
end;
procedure TDMAC7_DCH7INT.setCHTAIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,17,1
  sw      $v1,($a0)
end;
function  TDMAC7_DCH7INT.getCHTAIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,17,1
end;
procedure TDMAC7_DCH7INT.setCHCCIE; assembler; nostackframe; inline;
asm
  lui     $a1,4
  sw $a1,8($a0)
end;
procedure TDMAC7_DCH7INT.clearCHCCIE; assembler; nostackframe; inline;
asm
  lui     $a1,4
  sw $a1,4($a0)
end;
procedure TDMAC7_DCH7INT.setCHCCIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,18,1
  sw      $v1,($a0)
end;
function  TDMAC7_DCH7INT.getCHCCIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,18,1
end;
procedure TDMAC7_DCH7INT.setCHBCIE; assembler; nostackframe; inline;
asm
  lui     $a1,8
  sw $a1,8($a0)
end;
procedure TDMAC7_DCH7INT.clearCHBCIE; assembler; nostackframe; inline;
asm
  lui     $a1,8
  sw $a1,4($a0)
end;
procedure TDMAC7_DCH7INT.setCHBCIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,19,1
  sw      $v1,($a0)
end;
function  TDMAC7_DCH7INT.getCHBCIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,19,1
end;
procedure TDMAC7_DCH7INT.setCHDHIE; assembler; nostackframe; inline;
asm
  lui     $a1,16
  sw $a1,8($a0)
end;
procedure TDMAC7_DCH7INT.clearCHDHIE; assembler; nostackframe; inline;
asm
  lui     $a1,16
  sw $a1,4($a0)
end;
procedure TDMAC7_DCH7INT.setCHDHIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,20,1
  sw      $v1,($a0)
end;
function  TDMAC7_DCH7INT.getCHDHIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,20,1
end;
procedure TDMAC7_DCH7INT.setCHDDIE; assembler; nostackframe; inline;
asm
  lui     $a1,32
  sw $a1,8($a0)
end;
procedure TDMAC7_DCH7INT.clearCHDDIE; assembler; nostackframe; inline;
asm
  lui     $a1,32
  sw $a1,4($a0)
end;
procedure TDMAC7_DCH7INT.setCHDDIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,21,1
  sw      $v1,($a0)
end;
function  TDMAC7_DCH7INT.getCHDDIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,21,1
end;
procedure TDMAC7_DCH7INT.setCHSHIE; assembler; nostackframe; inline;
asm
  lui     $a1,64
  sw $a1,8($a0)
end;
procedure TDMAC7_DCH7INT.clearCHSHIE; assembler; nostackframe; inline;
asm
  lui     $a1,64
  sw $a1,4($a0)
end;
procedure TDMAC7_DCH7INT.setCHSHIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,22,1
  sw      $v1,($a0)
end;
function  TDMAC7_DCH7INT.getCHSHIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,22,1
end;
procedure TDMAC7_DCH7INT.setCHSDIE; assembler; nostackframe; inline;
asm
  lui     $a1,128
  sw $a1,8($a0)
end;
procedure TDMAC7_DCH7INT.clearCHSDIE; assembler; nostackframe; inline;
asm
  lui     $a1,128
  sw $a1,4($a0)
end;
procedure TDMAC7_DCH7INT.setCHSDIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,23,1
  sw      $v1,($a0)
end;
function  TDMAC7_DCH7INT.getCHSDIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,23,1
end;
procedure TDMAC7_DCH7INT.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TDMAC7_DCH7INT.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TPCACHE_CHECON.setPFMWS(thebits : TBits_3); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,3
  sw      $v1,($a0)
end;
function  TPCACHE_CHECON.getPFMWS : TBits_3;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,3
end;
procedure TPCACHE_CHECON.setPREFEN(thebits : TBits_2); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,4,2
  sw      $v1,($a0)
end;
function  TPCACHE_CHECON.getPREFEN : TBits_2;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,4,2
end;
procedure TPCACHE_CHECON.setDCSZ(thebits : TBits_2); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,8,2
  sw      $v1,($a0)
end;
function  TPCACHE_CHECON.getDCSZ : TBits_2;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,8,2
end;
procedure TPCACHE_CHECON.setCHECOH; assembler; nostackframe; inline;
asm
  lui     $a1,1
  sw $a1,8($a0)
end;
procedure TPCACHE_CHECON.clearCHECOH; assembler; nostackframe; inline;
asm
  lui     $a1,1
  sw $a1,4($a0)
end;
procedure TPCACHE_CHECON.setCHECOH(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,16,1
  sw      $v1,($a0)
end;
function  TPCACHE_CHECON.getCHECOH : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,16,1
end;
procedure TPCACHE_CHECON.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TPCACHE_CHECON.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TPCACHE_CHETAG.setLTYPE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,8($a0)
end;
procedure TPCACHE_CHETAG.clearLTYPE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,4($a0)
end;
procedure TPCACHE_CHETAG.setLTYPE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,1,1
  sw      $v1,($a0)
end;
function  TPCACHE_CHETAG.getLTYPE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,1,1
end;
procedure TPCACHE_CHETAG.setLLOCK; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,8($a0)
end;
procedure TPCACHE_CHETAG.clearLLOCK; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,4($a0)
end;
procedure TPCACHE_CHETAG.setLLOCK(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,2,1
  sw      $v1,($a0)
end;
function  TPCACHE_CHETAG.getLLOCK : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,2,1
end;
procedure TPCACHE_CHETAG.setLVALID; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,8($a0)
end;
procedure TPCACHE_CHETAG.clearLVALID; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,4($a0)
end;
procedure TPCACHE_CHETAG.setLVALID(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,3,1
  sw      $v1,($a0)
end;
function  TPCACHE_CHETAG.getLVALID : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,3,1
end;
procedure TPCACHE_CHETAG.setLTAG(thebits : TBits_20); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  sll     $a1,$a1,4
  lui    $v0,65280
  ori    $v0,$v0,15
  and   $v1,$v1,$v0
  or    $a1,$a1,$v0
  sw    $a1,($a0)
end;
function  TPCACHE_CHETAG.getLTAG : TBits_20;
asm
  lw      $v1,($a0)
  srl     $a1,$a1,4
  lui    $v0,255
  ori    $v0,$v0,65520
  and    $a1,$a1,$v0
end;
procedure TPCACHE_CHETAG.setLTAGBOOT; assembler; nostackframe; inline;
asm
  lui     $a1,32768
  sw $a1,8($a0)
end;
procedure TPCACHE_CHETAG.clearLTAGBOOT; assembler; nostackframe; inline;
asm
  lui     $a1,32768
  sw $a1,4($a0)
end;
procedure TPCACHE_CHETAG.setLTAGBOOT(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,31,1
  sw      $v1,($a0)
end;
function  TPCACHE_CHETAG.getLTAGBOOT : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,31,1
end;
procedure TPCACHE_CHETAG.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TPCACHE_CHETAG.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TUSB_U1IR.setURSTIF_DETACHIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,8($a0)
end;
procedure TUSB_U1IR.clearURSTIF_DETACHIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,4($a0)
end;
procedure TUSB_U1IR.setURSTIF_DETACHIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,1
  sw      $v1,($a0)
end;
function  TUSB_U1IR.getURSTIF_DETACHIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,1
end;
procedure TUSB_U1IR.setUERRIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,8($a0)
end;
procedure TUSB_U1IR.clearUERRIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,4($a0)
end;
procedure TUSB_U1IR.setUERRIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,1,1
  sw      $v1,($a0)
end;
function  TUSB_U1IR.getUERRIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,1,1
end;
procedure TUSB_U1IR.setSOFIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,8($a0)
end;
procedure TUSB_U1IR.clearSOFIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,4($a0)
end;
procedure TUSB_U1IR.setSOFIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,2,1
  sw      $v1,($a0)
end;
function  TUSB_U1IR.getSOFIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,2,1
end;
procedure TUSB_U1IR.setTRNIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,8($a0)
end;
procedure TUSB_U1IR.clearTRNIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,4($a0)
end;
procedure TUSB_U1IR.setTRNIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,3,1
  sw      $v1,($a0)
end;
function  TUSB_U1IR.getTRNIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,3,1
end;
procedure TUSB_U1IR.setIDLEIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,8($a0)
end;
procedure TUSB_U1IR.clearIDLEIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,4($a0)
end;
procedure TUSB_U1IR.setIDLEIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,4,1
  sw      $v1,($a0)
end;
function  TUSB_U1IR.getIDLEIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,4,1
end;
procedure TUSB_U1IR.setRESUMEIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,8($a0)
end;
procedure TUSB_U1IR.clearRESUMEIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,4($a0)
end;
procedure TUSB_U1IR.setRESUMEIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,5,1
  sw      $v1,($a0)
end;
function  TUSB_U1IR.getRESUMEIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,5,1
end;
procedure TUSB_U1IR.setATTACHIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,8($a0)
end;
procedure TUSB_U1IR.clearATTACHIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,4($a0)
end;
procedure TUSB_U1IR.setATTACHIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,6,1
  sw      $v1,($a0)
end;
function  TUSB_U1IR.getATTACHIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,6,1
end;
procedure TUSB_U1IR.setSTALLIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,8($a0)
end;
procedure TUSB_U1IR.clearSTALLIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,4($a0)
end;
procedure TUSB_U1IR.setSTALLIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,7,1
  sw      $v1,($a0)
end;
function  TUSB_U1IR.getSTALLIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,7,1
end;
procedure TUSB_U1IR.setDETACHIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,8($a0)
end;
procedure TUSB_U1IR.clearDETACHIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,4($a0)
end;
procedure TUSB_U1IR.setDETACHIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,1
  sw      $v1,($a0)
end;
function  TUSB_U1IR.getDETACHIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,1
end;
procedure TUSB_U1IR.setURSTIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,8($a0)
end;
procedure TUSB_U1IR.clearURSTIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,4($a0)
end;
procedure TUSB_U1IR.setURSTIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,1
  sw      $v1,($a0)
end;
function  TUSB_U1IR.getURSTIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,1
end;
procedure TUSB_U1IE.setURSTIE_DETACHIE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,8($a0)
end;
procedure TUSB_U1IE.clearURSTIE_DETACHIE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,4($a0)
end;
procedure TUSB_U1IE.setURSTIE_DETACHIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,1
  sw      $v1,($a0)
end;
function  TUSB_U1IE.getURSTIE_DETACHIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,1
end;
procedure TUSB_U1IE.setUERRIE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,8($a0)
end;
procedure TUSB_U1IE.clearUERRIE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,4($a0)
end;
procedure TUSB_U1IE.setUERRIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,1,1
  sw      $v1,($a0)
end;
function  TUSB_U1IE.getUERRIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,1,1
end;
procedure TUSB_U1IE.setSOFIE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,8($a0)
end;
procedure TUSB_U1IE.clearSOFIE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,4($a0)
end;
procedure TUSB_U1IE.setSOFIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,2,1
  sw      $v1,($a0)
end;
function  TUSB_U1IE.getSOFIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,2,1
end;
procedure TUSB_U1IE.setTRNIE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,8($a0)
end;
procedure TUSB_U1IE.clearTRNIE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,4($a0)
end;
procedure TUSB_U1IE.setTRNIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,3,1
  sw      $v1,($a0)
end;
function  TUSB_U1IE.getTRNIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,3,1
end;
procedure TUSB_U1IE.setIDLEIE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,8($a0)
end;
procedure TUSB_U1IE.clearIDLEIE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,4($a0)
end;
procedure TUSB_U1IE.setIDLEIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,4,1
  sw      $v1,($a0)
end;
function  TUSB_U1IE.getIDLEIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,4,1
end;
procedure TUSB_U1IE.setRESUMEIE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,8($a0)
end;
procedure TUSB_U1IE.clearRESUMEIE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,4($a0)
end;
procedure TUSB_U1IE.setRESUMEIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,5,1
  sw      $v1,($a0)
end;
function  TUSB_U1IE.getRESUMEIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,5,1
end;
procedure TUSB_U1IE.setATTACHIE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,8($a0)
end;
procedure TUSB_U1IE.clearATTACHIE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,4($a0)
end;
procedure TUSB_U1IE.setATTACHIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,6,1
  sw      $v1,($a0)
end;
function  TUSB_U1IE.getATTACHIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,6,1
end;
procedure TUSB_U1IE.setSTALLIE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,8($a0)
end;
procedure TUSB_U1IE.clearSTALLIE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,4($a0)
end;
procedure TUSB_U1IE.setSTALLIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,7,1
  sw      $v1,($a0)
end;
function  TUSB_U1IE.getSTALLIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,7,1
end;
procedure TUSB_U1IE.setDETACHIE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,8($a0)
end;
procedure TUSB_U1IE.clearDETACHIE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,4($a0)
end;
procedure TUSB_U1IE.setDETACHIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,1
  sw      $v1,($a0)
end;
function  TUSB_U1IE.getDETACHIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,1
end;
procedure TUSB_U1IE.setURSTIE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,8($a0)
end;
procedure TUSB_U1IE.clearURSTIE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,4($a0)
end;
procedure TUSB_U1IE.setURSTIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,1
  sw      $v1,($a0)
end;
function  TUSB_U1IE.getURSTIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,1
end;
procedure TUSB_U1EIR.setPIDEF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,8($a0)
end;
procedure TUSB_U1EIR.clearPIDEF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,4($a0)
end;
procedure TUSB_U1EIR.setPIDEF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,1
  sw      $v1,($a0)
end;
function  TUSB_U1EIR.getPIDEF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,1
end;
procedure TUSB_U1EIR.setCRC5EF_EOFEF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,8($a0)
end;
procedure TUSB_U1EIR.clearCRC5EF_EOFEF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,4($a0)
end;
procedure TUSB_U1EIR.setCRC5EF_EOFEF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,1,1
  sw      $v1,($a0)
end;
function  TUSB_U1EIR.getCRC5EF_EOFEF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,1,1
end;
procedure TUSB_U1EIR.setCRC16EF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,8($a0)
end;
procedure TUSB_U1EIR.clearCRC16EF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,4($a0)
end;
procedure TUSB_U1EIR.setCRC16EF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,2,1
  sw      $v1,($a0)
end;
function  TUSB_U1EIR.getCRC16EF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,2,1
end;
procedure TUSB_U1EIR.setDFN8EF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,8($a0)
end;
procedure TUSB_U1EIR.clearDFN8EF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,4($a0)
end;
procedure TUSB_U1EIR.setDFN8EF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,3,1
  sw      $v1,($a0)
end;
function  TUSB_U1EIR.getDFN8EF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,3,1
end;
procedure TUSB_U1EIR.setBTOEF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,8($a0)
end;
procedure TUSB_U1EIR.clearBTOEF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,4($a0)
end;
procedure TUSB_U1EIR.setBTOEF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,4,1
  sw      $v1,($a0)
end;
function  TUSB_U1EIR.getBTOEF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,4,1
end;
procedure TUSB_U1EIR.setDMAEF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,8($a0)
end;
procedure TUSB_U1EIR.clearDMAEF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,4($a0)
end;
procedure TUSB_U1EIR.setDMAEF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,5,1
  sw      $v1,($a0)
end;
function  TUSB_U1EIR.getDMAEF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,5,1
end;
procedure TUSB_U1EIR.setBMXEF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,8($a0)
end;
procedure TUSB_U1EIR.clearBMXEF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,4($a0)
end;
procedure TUSB_U1EIR.setBMXEF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,6,1
  sw      $v1,($a0)
end;
function  TUSB_U1EIR.getBMXEF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,6,1
end;
procedure TUSB_U1EIR.setBTSEF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,8($a0)
end;
procedure TUSB_U1EIR.clearBTSEF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,4($a0)
end;
procedure TUSB_U1EIR.setBTSEF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,7,1
  sw      $v1,($a0)
end;
function  TUSB_U1EIR.getBTSEF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,7,1
end;
procedure TUSB_U1EIR.setCRC5EF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,8($a0)
end;
procedure TUSB_U1EIR.clearCRC5EF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,4($a0)
end;
procedure TUSB_U1EIR.setCRC5EF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,1,1
  sw      $v1,($a0)
end;
function  TUSB_U1EIR.getCRC5EF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,1,1
end;
procedure TUSB_U1EIR.setEOFEF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,8($a0)
end;
procedure TUSB_U1EIR.clearEOFEF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,4($a0)
end;
procedure TUSB_U1EIR.setEOFEF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,1,1
  sw      $v1,($a0)
end;
function  TUSB_U1EIR.getEOFEF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,1,1
end;
procedure TUSB_U1EIE.setPIDEE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,8($a0)
end;
procedure TUSB_U1EIE.clearPIDEE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,4($a0)
end;
procedure TUSB_U1EIE.setPIDEE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,1
  sw      $v1,($a0)
end;
function  TUSB_U1EIE.getPIDEE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,1
end;
procedure TUSB_U1EIE.setCRC5EE_EOFEE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,8($a0)
end;
procedure TUSB_U1EIE.clearCRC5EE_EOFEE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,4($a0)
end;
procedure TUSB_U1EIE.setCRC5EE_EOFEE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,1,1
  sw      $v1,($a0)
end;
function  TUSB_U1EIE.getCRC5EE_EOFEE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,1,1
end;
procedure TUSB_U1EIE.setCRC16EE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,8($a0)
end;
procedure TUSB_U1EIE.clearCRC16EE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,4($a0)
end;
procedure TUSB_U1EIE.setCRC16EE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,2,1
  sw      $v1,($a0)
end;
function  TUSB_U1EIE.getCRC16EE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,2,1
end;
procedure TUSB_U1EIE.setDFN8EE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,8($a0)
end;
procedure TUSB_U1EIE.clearDFN8EE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,4($a0)
end;
procedure TUSB_U1EIE.setDFN8EE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,3,1
  sw      $v1,($a0)
end;
function  TUSB_U1EIE.getDFN8EE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,3,1
end;
procedure TUSB_U1EIE.setBTOEE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,8($a0)
end;
procedure TUSB_U1EIE.clearBTOEE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,4($a0)
end;
procedure TUSB_U1EIE.setBTOEE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,4,1
  sw      $v1,($a0)
end;
function  TUSB_U1EIE.getBTOEE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,4,1
end;
procedure TUSB_U1EIE.setDMAEE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,8($a0)
end;
procedure TUSB_U1EIE.clearDMAEE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,4($a0)
end;
procedure TUSB_U1EIE.setDMAEE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,5,1
  sw      $v1,($a0)
end;
function  TUSB_U1EIE.getDMAEE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,5,1
end;
procedure TUSB_U1EIE.setBMXEE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,8($a0)
end;
procedure TUSB_U1EIE.clearBMXEE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,4($a0)
end;
procedure TUSB_U1EIE.setBMXEE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,6,1
  sw      $v1,($a0)
end;
function  TUSB_U1EIE.getBMXEE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,6,1
end;
procedure TUSB_U1EIE.setBTSEE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,8($a0)
end;
procedure TUSB_U1EIE.clearBTSEE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,4($a0)
end;
procedure TUSB_U1EIE.setBTSEE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,7,1
  sw      $v1,($a0)
end;
function  TUSB_U1EIE.getBTSEE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,7,1
end;
procedure TUSB_U1EIE.setCRC5EE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,8($a0)
end;
procedure TUSB_U1EIE.clearCRC5EE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,4($a0)
end;
procedure TUSB_U1EIE.setCRC5EE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,1,1
  sw      $v1,($a0)
end;
function  TUSB_U1EIE.getCRC5EE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,1,1
end;
procedure TUSB_U1EIE.setEOFEE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,8($a0)
end;
procedure TUSB_U1EIE.clearEOFEE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,4($a0)
end;
procedure TUSB_U1EIE.setEOFEE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,1,1
  sw      $v1,($a0)
end;
function  TUSB_U1EIE.getEOFEE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,1,1
end;
procedure TUSB_U1STAT.setPPBI; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,8($a0)
end;
procedure TUSB_U1STAT.clearPPBI; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,4($a0)
end;
procedure TUSB_U1STAT.setPPBI(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,2,1
  sw      $v1,($a0)
end;
function  TUSB_U1STAT.getPPBI : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,2,1
end;
procedure TUSB_U1STAT.setDIR; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,8($a0)
end;
procedure TUSB_U1STAT.clearDIR; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,4($a0)
end;
procedure TUSB_U1STAT.setDIR(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,3,1
  sw      $v1,($a0)
end;
function  TUSB_U1STAT.getDIR : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,3,1
end;
procedure TUSB_U1STAT.setENDPT(thebits : TBits_4); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,4,4
  sw      $v1,($a0)
end;
function  TUSB_U1STAT.getENDPT : TBits_4;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,4,4
end;
procedure TUSB_U1STAT.setENDPT0; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,8($a0)
end;
procedure TUSB_U1STAT.clearENDPT0; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,4($a0)
end;
procedure TUSB_U1STAT.setENDPT0(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,4,1
  sw      $v1,($a0)
end;
function  TUSB_U1STAT.getENDPT0 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,4,1
end;
procedure TUSB_U1STAT.setENDPT1; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,8($a0)
end;
procedure TUSB_U1STAT.clearENDPT1; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,4($a0)
end;
procedure TUSB_U1STAT.setENDPT1(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,5,1
  sw      $v1,($a0)
end;
function  TUSB_U1STAT.getENDPT1 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,5,1
end;
procedure TUSB_U1STAT.setENDPT2; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,8($a0)
end;
procedure TUSB_U1STAT.clearENDPT2; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,4($a0)
end;
procedure TUSB_U1STAT.setENDPT2(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,6,1
  sw      $v1,($a0)
end;
function  TUSB_U1STAT.getENDPT2 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,6,1
end;
procedure TUSB_U1STAT.setENDPT3; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,8($a0)
end;
procedure TUSB_U1STAT.clearENDPT3; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,4($a0)
end;
procedure TUSB_U1STAT.setENDPT3(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,7,1
  sw      $v1,($a0)
end;
function  TUSB_U1STAT.getENDPT3 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,7,1
end;
procedure TUSB_U1CON.setUSBEN_SOFEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,8($a0)
end;
procedure TUSB_U1CON.clearUSBEN_SOFEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,4($a0)
end;
procedure TUSB_U1CON.setUSBEN_SOFEN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,1
  sw      $v1,($a0)
end;
function  TUSB_U1CON.getUSBEN_SOFEN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,1
end;
procedure TUSB_U1CON.setPPBRST; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,8($a0)
end;
procedure TUSB_U1CON.clearPPBRST; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,4($a0)
end;
procedure TUSB_U1CON.setPPBRST(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,1,1
  sw      $v1,($a0)
end;
function  TUSB_U1CON.getPPBRST : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,1,1
end;
procedure TUSB_U1CON.setRESUME; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,8($a0)
end;
procedure TUSB_U1CON.clearRESUME; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,4($a0)
end;
procedure TUSB_U1CON.setRESUME(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,2,1
  sw      $v1,($a0)
end;
function  TUSB_U1CON.getRESUME : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,2,1
end;
procedure TUSB_U1CON.setHOSTEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,8($a0)
end;
procedure TUSB_U1CON.clearHOSTEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,4($a0)
end;
procedure TUSB_U1CON.setHOSTEN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,3,1
  sw      $v1,($a0)
end;
function  TUSB_U1CON.getHOSTEN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,3,1
end;
procedure TUSB_U1CON.setUSBRST; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,8($a0)
end;
procedure TUSB_U1CON.clearUSBRST; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,4($a0)
end;
procedure TUSB_U1CON.setUSBRST(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,4,1
  sw      $v1,($a0)
end;
function  TUSB_U1CON.getUSBRST : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,4,1
end;
procedure TUSB_U1CON.setPKTDIS_TOKBUSY; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,8($a0)
end;
procedure TUSB_U1CON.clearPKTDIS_TOKBUSY; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,4($a0)
end;
procedure TUSB_U1CON.setPKTDIS_TOKBUSY(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,5,1
  sw      $v1,($a0)
end;
function  TUSB_U1CON.getPKTDIS_TOKBUSY : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,5,1
end;
procedure TUSB_U1CON.setSE0; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,8($a0)
end;
procedure TUSB_U1CON.clearSE0; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,4($a0)
end;
procedure TUSB_U1CON.setSE0(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,6,1
  sw      $v1,($a0)
end;
function  TUSB_U1CON.getSE0 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,6,1
end;
procedure TUSB_U1CON.setJSTATE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,8($a0)
end;
procedure TUSB_U1CON.clearJSTATE; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,4($a0)
end;
procedure TUSB_U1CON.setJSTATE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,7,1
  sw      $v1,($a0)
end;
function  TUSB_U1CON.getJSTATE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,7,1
end;
procedure TUSB_U1CON.setUSBEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,8($a0)
end;
procedure TUSB_U1CON.clearUSBEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,4($a0)
end;
procedure TUSB_U1CON.setUSBEN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,1
  sw      $v1,($a0)
end;
function  TUSB_U1CON.getUSBEN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,1
end;
procedure TUSB_U1CON.setSOFEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,8($a0)
end;
procedure TUSB_U1CON.clearSOFEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,4($a0)
end;
procedure TUSB_U1CON.setSOFEN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,1
  sw      $v1,($a0)
end;
function  TUSB_U1CON.getSOFEN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,1
end;
procedure TUSB_U1CON.setPKTDIS; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,8($a0)
end;
procedure TUSB_U1CON.clearPKTDIS; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,4($a0)
end;
procedure TUSB_U1CON.setPKTDIS(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,5,1
  sw      $v1,($a0)
end;
function  TUSB_U1CON.getPKTDIS : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,5,1
end;
procedure TUSB_U1CON.setTOKBUSY; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,8($a0)
end;
procedure TUSB_U1CON.clearTOKBUSY; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,4($a0)
end;
procedure TUSB_U1CON.setTOKBUSY(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,5,1
  sw      $v1,($a0)
end;
function  TUSB_U1CON.getTOKBUSY : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,5,1
end;
procedure TUSB_U1ADDR.setDEVADDR(thebits : TBits_7); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  sll     $a1,$a1,0
  lui    $v0,65535
  ori    $v0,$v0,65408
  and   $v1,$v1,$v0
  or    $a1,$a1,$v0
  sw    $a1,($a0)
end;
function  TUSB_U1ADDR.getDEVADDR : TBits_7;
asm
  lw      $v1,($a0)
  srl     $a1,$a1,0
  ori    $v0,$zero,127
  and    $a1,$a1,$v0
end;
procedure TUSB_U1ADDR.setLSPDEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,8($a0)
end;
procedure TUSB_U1ADDR.clearLSPDEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,4($a0)
end;
procedure TUSB_U1ADDR.setLSPDEN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,7,1
  sw      $v1,($a0)
end;
function  TUSB_U1ADDR.getLSPDEN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,7,1
end;
procedure TUSB_U1ADDR.setDEVADDR0; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,8($a0)
end;
procedure TUSB_U1ADDR.clearDEVADDR0; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,4($a0)
end;
procedure TUSB_U1ADDR.setDEVADDR0(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,1
  sw      $v1,($a0)
end;
function  TUSB_U1ADDR.getDEVADDR0 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,1
end;
procedure TUSB_U1ADDR.setDEVADDR1; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,8($a0)
end;
procedure TUSB_U1ADDR.clearDEVADDR1; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,4($a0)
end;
procedure TUSB_U1ADDR.setDEVADDR1(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,1,1
  sw      $v1,($a0)
end;
function  TUSB_U1ADDR.getDEVADDR1 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,1,1
end;
procedure TUSB_U1ADDR.setDEVADDR2; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,8($a0)
end;
procedure TUSB_U1ADDR.clearDEVADDR2; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,4($a0)
end;
procedure TUSB_U1ADDR.setDEVADDR2(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,2,1
  sw      $v1,($a0)
end;
function  TUSB_U1ADDR.getDEVADDR2 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,2,1
end;
procedure TUSB_U1ADDR.setDEVADDR3; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,8($a0)
end;
procedure TUSB_U1ADDR.clearDEVADDR3; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,4($a0)
end;
procedure TUSB_U1ADDR.setDEVADDR3(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,3,1
  sw      $v1,($a0)
end;
function  TUSB_U1ADDR.getDEVADDR3 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,3,1
end;
procedure TUSB_U1ADDR.setDEVADDR4; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,8($a0)
end;
procedure TUSB_U1ADDR.clearDEVADDR4; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,4($a0)
end;
procedure TUSB_U1ADDR.setDEVADDR4(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,4,1
  sw      $v1,($a0)
end;
function  TUSB_U1ADDR.getDEVADDR4 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,4,1
end;
procedure TUSB_U1ADDR.setDEVADDR5; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,8($a0)
end;
procedure TUSB_U1ADDR.clearDEVADDR5; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,4($a0)
end;
procedure TUSB_U1ADDR.setDEVADDR5(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,5,1
  sw      $v1,($a0)
end;
function  TUSB_U1ADDR.getDEVADDR5 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,5,1
end;
procedure TUSB_U1ADDR.setDEVADDR6; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,8($a0)
end;
procedure TUSB_U1ADDR.clearDEVADDR6; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,4($a0)
end;
procedure TUSB_U1ADDR.setDEVADDR6(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,6,1
  sw      $v1,($a0)
end;
function  TUSB_U1ADDR.getDEVADDR6 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,6,1
end;
procedure TUSB_U1FRML.setFRML(thebits : TBits_8); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  sll     $a1,$a1,0
  lui    $v0,65535
  ori    $v0,$v0,65280
  and   $v1,$v1,$v0
  or    $a1,$a1,$v0
  sw    $a1,($a0)
end;
function  TUSB_U1FRML.getFRML : TBits_8;
asm
  lw      $v1,($a0)
  srl     $a1,$a1,0
  ori    $v0,$zero,255
  and    $a1,$a1,$v0
end;
procedure TUSB_U1FRML.setFRM0; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,8($a0)
end;
procedure TUSB_U1FRML.clearFRM0; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,4($a0)
end;
procedure TUSB_U1FRML.setFRM0(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,1
  sw      $v1,($a0)
end;
function  TUSB_U1FRML.getFRM0 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,1
end;
procedure TUSB_U1FRML.setFRM1; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,8($a0)
end;
procedure TUSB_U1FRML.clearFRM1; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,4($a0)
end;
procedure TUSB_U1FRML.setFRM1(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,1,1
  sw      $v1,($a0)
end;
function  TUSB_U1FRML.getFRM1 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,1,1
end;
procedure TUSB_U1FRML.setFRM2; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,8($a0)
end;
procedure TUSB_U1FRML.clearFRM2; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,4($a0)
end;
procedure TUSB_U1FRML.setFRM2(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,2,1
  sw      $v1,($a0)
end;
function  TUSB_U1FRML.getFRM2 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,2,1
end;
procedure TUSB_U1FRML.setFRM3; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,8($a0)
end;
procedure TUSB_U1FRML.clearFRM3; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,4($a0)
end;
procedure TUSB_U1FRML.setFRM3(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,3,1
  sw      $v1,($a0)
end;
function  TUSB_U1FRML.getFRM3 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,3,1
end;
procedure TUSB_U1FRML.setFRM4; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,8($a0)
end;
procedure TUSB_U1FRML.clearFRM4; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,4($a0)
end;
procedure TUSB_U1FRML.setFRM4(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,4,1
  sw      $v1,($a0)
end;
function  TUSB_U1FRML.getFRM4 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,4,1
end;
procedure TUSB_U1FRML.setFRM5; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,8($a0)
end;
procedure TUSB_U1FRML.clearFRM5; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,4($a0)
end;
procedure TUSB_U1FRML.setFRM5(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,5,1
  sw      $v1,($a0)
end;
function  TUSB_U1FRML.getFRM5 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,5,1
end;
procedure TUSB_U1FRML.setFRM6; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,8($a0)
end;
procedure TUSB_U1FRML.clearFRM6; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,4($a0)
end;
procedure TUSB_U1FRML.setFRM6(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,6,1
  sw      $v1,($a0)
end;
function  TUSB_U1FRML.getFRM6 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,6,1
end;
procedure TUSB_U1FRML.setFRM7; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,8($a0)
end;
procedure TUSB_U1FRML.clearFRM7; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,4($a0)
end;
procedure TUSB_U1FRML.setFRM7(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,7,1
  sw      $v1,($a0)
end;
function  TUSB_U1FRML.getFRM7 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,7,1
end;
procedure TUSB_U1FRMH.setFRMH(thebits : TBits_3); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,3
  sw      $v1,($a0)
end;
function  TUSB_U1FRMH.getFRMH : TBits_3;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,3
end;
procedure TUSB_U1FRMH.setFRM8; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,8($a0)
end;
procedure TUSB_U1FRMH.clearFRM8; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,4($a0)
end;
procedure TUSB_U1FRMH.setFRM8(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,1
  sw      $v1,($a0)
end;
function  TUSB_U1FRMH.getFRM8 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,1
end;
procedure TUSB_U1FRMH.setFRM9; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,8($a0)
end;
procedure TUSB_U1FRMH.clearFRM9; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,4($a0)
end;
procedure TUSB_U1FRMH.setFRM9(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,1,1
  sw      $v1,($a0)
end;
function  TUSB_U1FRMH.getFRM9 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,1,1
end;
procedure TUSB_U1FRMH.setFRM10; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,8($a0)
end;
procedure TUSB_U1FRMH.clearFRM10; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,4($a0)
end;
procedure TUSB_U1FRMH.setFRM10(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,2,1
  sw      $v1,($a0)
end;
function  TUSB_U1FRMH.getFRM10 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,2,1
end;
procedure TUSB_U1TOK.setEP(thebits : TBits_4); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,4
  sw      $v1,($a0)
end;
function  TUSB_U1TOK.getEP : TBits_4;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,4
end;
procedure TUSB_U1TOK.setPID(thebits : TBits_4); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,4,4
  sw      $v1,($a0)
end;
function  TUSB_U1TOK.getPID : TBits_4;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,4,4
end;
procedure TUSB_U1TOK.setEP0; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,8($a0)
end;
procedure TUSB_U1TOK.clearEP0; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,4($a0)
end;
procedure TUSB_U1TOK.setEP0(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,1
  sw      $v1,($a0)
end;
function  TUSB_U1TOK.getEP0 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,1
end;
procedure TUSB_U1TOK.setEP1; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,8($a0)
end;
procedure TUSB_U1TOK.clearEP1; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,4($a0)
end;
procedure TUSB_U1TOK.setEP1(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,1,1
  sw      $v1,($a0)
end;
function  TUSB_U1TOK.getEP1 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,1,1
end;
procedure TUSB_U1TOK.setEP2; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,8($a0)
end;
procedure TUSB_U1TOK.clearEP2; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,4($a0)
end;
procedure TUSB_U1TOK.setEP2(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,2,1
  sw      $v1,($a0)
end;
function  TUSB_U1TOK.getEP2 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,2,1
end;
procedure TUSB_U1TOK.setEP3; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,8($a0)
end;
procedure TUSB_U1TOK.clearEP3; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,4($a0)
end;
procedure TUSB_U1TOK.setEP3(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,3,1
  sw      $v1,($a0)
end;
function  TUSB_U1TOK.getEP3 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,3,1
end;
procedure TUSB_U1TOK.setPID0; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,8($a0)
end;
procedure TUSB_U1TOK.clearPID0; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,4($a0)
end;
procedure TUSB_U1TOK.setPID0(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,4,1
  sw      $v1,($a0)
end;
function  TUSB_U1TOK.getPID0 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,4,1
end;
procedure TUSB_U1TOK.setPID1; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,8($a0)
end;
procedure TUSB_U1TOK.clearPID1; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,4($a0)
end;
procedure TUSB_U1TOK.setPID1(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,5,1
  sw      $v1,($a0)
end;
function  TUSB_U1TOK.getPID1 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,5,1
end;
procedure TUSB_U1TOK.setPID2; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,8($a0)
end;
procedure TUSB_U1TOK.clearPID2; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,4($a0)
end;
procedure TUSB_U1TOK.setPID2(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,6,1
  sw      $v1,($a0)
end;
function  TUSB_U1TOK.getPID2 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,6,1
end;
procedure TUSB_U1TOK.setPID3; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,8($a0)
end;
procedure TUSB_U1TOK.clearPID3; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,4($a0)
end;
procedure TUSB_U1TOK.setPID3(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,7,1
  sw      $v1,($a0)
end;
function  TUSB_U1TOK.getPID3 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,7,1
end;
procedure TPORTA_TRISA.setTRISA0; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,8($a0)
end;
procedure TPORTA_TRISA.clearTRISA0; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,4($a0)
end;
procedure TPORTA_TRISA.setTRISA0(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,1
  sw      $v1,($a0)
end;
function  TPORTA_TRISA.getTRISA0 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,1
end;
procedure TPORTA_TRISA.setTRISA1; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,8($a0)
end;
procedure TPORTA_TRISA.clearTRISA1; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,4($a0)
end;
procedure TPORTA_TRISA.setTRISA1(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,1,1
  sw      $v1,($a0)
end;
function  TPORTA_TRISA.getTRISA1 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,1,1
end;
procedure TPORTA_TRISA.setTRISA2; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,8($a0)
end;
procedure TPORTA_TRISA.clearTRISA2; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,4($a0)
end;
procedure TPORTA_TRISA.setTRISA2(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,2,1
  sw      $v1,($a0)
end;
function  TPORTA_TRISA.getTRISA2 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,2,1
end;
procedure TPORTA_TRISA.setTRISA3; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,8($a0)
end;
procedure TPORTA_TRISA.clearTRISA3; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,4($a0)
end;
procedure TPORTA_TRISA.setTRISA3(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,3,1
  sw      $v1,($a0)
end;
function  TPORTA_TRISA.getTRISA3 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,3,1
end;
procedure TPORTA_TRISA.setTRISA4; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,8($a0)
end;
procedure TPORTA_TRISA.clearTRISA4; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,4($a0)
end;
procedure TPORTA_TRISA.setTRISA4(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,4,1
  sw      $v1,($a0)
end;
function  TPORTA_TRISA.getTRISA4 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,4,1
end;
procedure TPORTA_TRISA.setTRISA5; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,8($a0)
end;
procedure TPORTA_TRISA.clearTRISA5; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,4($a0)
end;
procedure TPORTA_TRISA.setTRISA5(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,5,1
  sw      $v1,($a0)
end;
function  TPORTA_TRISA.getTRISA5 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,5,1
end;
procedure TPORTA_TRISA.setTRISA6; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,8($a0)
end;
procedure TPORTA_TRISA.clearTRISA6; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,4($a0)
end;
procedure TPORTA_TRISA.setTRISA6(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,6,1
  sw      $v1,($a0)
end;
function  TPORTA_TRISA.getTRISA6 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,6,1
end;
procedure TPORTA_TRISA.setTRISA7; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,8($a0)
end;
procedure TPORTA_TRISA.clearTRISA7; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,4($a0)
end;
procedure TPORTA_TRISA.setTRISA7(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,7,1
  sw      $v1,($a0)
end;
function  TPORTA_TRISA.getTRISA7 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,7,1
end;
procedure TPORTA_TRISA.setTRISA9; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,512
  sw $a1,8($a0)
end;
procedure TPORTA_TRISA.clearTRISA9; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,512
  sw $a1,4($a0)
end;
procedure TPORTA_TRISA.setTRISA9(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,9,1
  sw      $v1,($a0)
end;
function  TPORTA_TRISA.getTRISA9 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,9,1
end;
procedure TPORTA_TRISA.setTRISA10; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1024
  sw $a1,8($a0)
end;
procedure TPORTA_TRISA.clearTRISA10; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1024
  sw $a1,4($a0)
end;
procedure TPORTA_TRISA.setTRISA10(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,10,1
  sw      $v1,($a0)
end;
function  TPORTA_TRISA.getTRISA10 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,10,1
end;
procedure TPORTA_TRISA.setTRISA14; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16384
  sw $a1,8($a0)
end;
procedure TPORTA_TRISA.clearTRISA14; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16384
  sw $a1,4($a0)
end;
procedure TPORTA_TRISA.setTRISA14(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,14,1
  sw      $v1,($a0)
end;
function  TPORTA_TRISA.getTRISA14 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,14,1
end;
procedure TPORTA_TRISA.setTRISA15; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,8($a0)
end;
procedure TPORTA_TRISA.clearTRISA15; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,4($a0)
end;
procedure TPORTA_TRISA.setTRISA15(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,15,1
  sw      $v1,($a0)
end;
function  TPORTA_TRISA.getTRISA15 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,15,1
end;
procedure TPORTA_TRISA.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TPORTA_TRISA.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TPORTA_PORTA.setRA0; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,8($a0)
end;
procedure TPORTA_PORTA.clearRA0; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,4($a0)
end;
procedure TPORTA_PORTA.setRA0(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,1
  sw      $v1,($a0)
end;
function  TPORTA_PORTA.getRA0 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,1
end;
procedure TPORTA_PORTA.setRA1; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,8($a0)
end;
procedure TPORTA_PORTA.clearRA1; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,4($a0)
end;
procedure TPORTA_PORTA.setRA1(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,1,1
  sw      $v1,($a0)
end;
function  TPORTA_PORTA.getRA1 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,1,1
end;
procedure TPORTA_PORTA.setRA2; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,8($a0)
end;
procedure TPORTA_PORTA.clearRA2; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,4($a0)
end;
procedure TPORTA_PORTA.setRA2(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,2,1
  sw      $v1,($a0)
end;
function  TPORTA_PORTA.getRA2 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,2,1
end;
procedure TPORTA_PORTA.setRA3; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,8($a0)
end;
procedure TPORTA_PORTA.clearRA3; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,4($a0)
end;
procedure TPORTA_PORTA.setRA3(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,3,1
  sw      $v1,($a0)
end;
function  TPORTA_PORTA.getRA3 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,3,1
end;
procedure TPORTA_PORTA.setRA4; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,8($a0)
end;
procedure TPORTA_PORTA.clearRA4; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,4($a0)
end;
procedure TPORTA_PORTA.setRA4(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,4,1
  sw      $v1,($a0)
end;
function  TPORTA_PORTA.getRA4 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,4,1
end;
procedure TPORTA_PORTA.setRA5; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,8($a0)
end;
procedure TPORTA_PORTA.clearRA5; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,4($a0)
end;
procedure TPORTA_PORTA.setRA5(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,5,1
  sw      $v1,($a0)
end;
function  TPORTA_PORTA.getRA5 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,5,1
end;
procedure TPORTA_PORTA.setRA6; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,8($a0)
end;
procedure TPORTA_PORTA.clearRA6; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,4($a0)
end;
procedure TPORTA_PORTA.setRA6(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,6,1
  sw      $v1,($a0)
end;
function  TPORTA_PORTA.getRA6 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,6,1
end;
procedure TPORTA_PORTA.setRA7; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,8($a0)
end;
procedure TPORTA_PORTA.clearRA7; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,4($a0)
end;
procedure TPORTA_PORTA.setRA7(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,7,1
  sw      $v1,($a0)
end;
function  TPORTA_PORTA.getRA7 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,7,1
end;
procedure TPORTA_PORTA.setRA9; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,512
  sw $a1,8($a0)
end;
procedure TPORTA_PORTA.clearRA9; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,512
  sw $a1,4($a0)
end;
procedure TPORTA_PORTA.setRA9(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,9,1
  sw      $v1,($a0)
end;
function  TPORTA_PORTA.getRA9 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,9,1
end;
procedure TPORTA_PORTA.setRA10; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1024
  sw $a1,8($a0)
end;
procedure TPORTA_PORTA.clearRA10; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1024
  sw $a1,4($a0)
end;
procedure TPORTA_PORTA.setRA10(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,10,1
  sw      $v1,($a0)
end;
function  TPORTA_PORTA.getRA10 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,10,1
end;
procedure TPORTA_PORTA.setRA14; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16384
  sw $a1,8($a0)
end;
procedure TPORTA_PORTA.clearRA14; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16384
  sw $a1,4($a0)
end;
procedure TPORTA_PORTA.setRA14(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,14,1
  sw      $v1,($a0)
end;
function  TPORTA_PORTA.getRA14 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,14,1
end;
procedure TPORTA_PORTA.setRA15; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,8($a0)
end;
procedure TPORTA_PORTA.clearRA15; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,4($a0)
end;
procedure TPORTA_PORTA.setRA15(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,15,1
  sw      $v1,($a0)
end;
function  TPORTA_PORTA.getRA15 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,15,1
end;
procedure TPORTA_PORTA.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TPORTA_PORTA.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TPORTA_LATA.setLATA0; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,8($a0)
end;
procedure TPORTA_LATA.clearLATA0; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,4($a0)
end;
procedure TPORTA_LATA.setLATA0(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,1
  sw      $v1,($a0)
end;
function  TPORTA_LATA.getLATA0 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,1
end;
procedure TPORTA_LATA.setLATA1; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,8($a0)
end;
procedure TPORTA_LATA.clearLATA1; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,4($a0)
end;
procedure TPORTA_LATA.setLATA1(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,1,1
  sw      $v1,($a0)
end;
function  TPORTA_LATA.getLATA1 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,1,1
end;
procedure TPORTA_LATA.setLATA2; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,8($a0)
end;
procedure TPORTA_LATA.clearLATA2; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,4($a0)
end;
procedure TPORTA_LATA.setLATA2(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,2,1
  sw      $v1,($a0)
end;
function  TPORTA_LATA.getLATA2 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,2,1
end;
procedure TPORTA_LATA.setLATA3; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,8($a0)
end;
procedure TPORTA_LATA.clearLATA3; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,4($a0)
end;
procedure TPORTA_LATA.setLATA3(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,3,1
  sw      $v1,($a0)
end;
function  TPORTA_LATA.getLATA3 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,3,1
end;
procedure TPORTA_LATA.setLATA4; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,8($a0)
end;
procedure TPORTA_LATA.clearLATA4; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,4($a0)
end;
procedure TPORTA_LATA.setLATA4(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,4,1
  sw      $v1,($a0)
end;
function  TPORTA_LATA.getLATA4 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,4,1
end;
procedure TPORTA_LATA.setLATA5; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,8($a0)
end;
procedure TPORTA_LATA.clearLATA5; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,4($a0)
end;
procedure TPORTA_LATA.setLATA5(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,5,1
  sw      $v1,($a0)
end;
function  TPORTA_LATA.getLATA5 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,5,1
end;
procedure TPORTA_LATA.setLATA6; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,8($a0)
end;
procedure TPORTA_LATA.clearLATA6; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,4($a0)
end;
procedure TPORTA_LATA.setLATA6(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,6,1
  sw      $v1,($a0)
end;
function  TPORTA_LATA.getLATA6 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,6,1
end;
procedure TPORTA_LATA.setLATA7; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,8($a0)
end;
procedure TPORTA_LATA.clearLATA7; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,4($a0)
end;
procedure TPORTA_LATA.setLATA7(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,7,1
  sw      $v1,($a0)
end;
function  TPORTA_LATA.getLATA7 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,7,1
end;
procedure TPORTA_LATA.setLATA9; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,512
  sw $a1,8($a0)
end;
procedure TPORTA_LATA.clearLATA9; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,512
  sw $a1,4($a0)
end;
procedure TPORTA_LATA.setLATA9(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,9,1
  sw      $v1,($a0)
end;
function  TPORTA_LATA.getLATA9 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,9,1
end;
procedure TPORTA_LATA.setLATA10; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1024
  sw $a1,8($a0)
end;
procedure TPORTA_LATA.clearLATA10; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1024
  sw $a1,4($a0)
end;
procedure TPORTA_LATA.setLATA10(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,10,1
  sw      $v1,($a0)
end;
function  TPORTA_LATA.getLATA10 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,10,1
end;
procedure TPORTA_LATA.setLATA14; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16384
  sw $a1,8($a0)
end;
procedure TPORTA_LATA.clearLATA14; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16384
  sw $a1,4($a0)
end;
procedure TPORTA_LATA.setLATA14(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,14,1
  sw      $v1,($a0)
end;
function  TPORTA_LATA.getLATA14 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,14,1
end;
procedure TPORTA_LATA.setLATA15; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,8($a0)
end;
procedure TPORTA_LATA.clearLATA15; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,4($a0)
end;
procedure TPORTA_LATA.setLATA15(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,15,1
  sw      $v1,($a0)
end;
function  TPORTA_LATA.getLATA15 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,15,1
end;
procedure TPORTA_LATA.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TPORTA_LATA.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TPORTA_ODCA.setODCA0; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,8($a0)
end;
procedure TPORTA_ODCA.clearODCA0; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,4($a0)
end;
procedure TPORTA_ODCA.setODCA0(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,1
  sw      $v1,($a0)
end;
function  TPORTA_ODCA.getODCA0 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,1
end;
procedure TPORTA_ODCA.setODCA1; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,8($a0)
end;
procedure TPORTA_ODCA.clearODCA1; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,4($a0)
end;
procedure TPORTA_ODCA.setODCA1(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,1,1
  sw      $v1,($a0)
end;
function  TPORTA_ODCA.getODCA1 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,1,1
end;
procedure TPORTA_ODCA.setODCA2; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,8($a0)
end;
procedure TPORTA_ODCA.clearODCA2; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,4($a0)
end;
procedure TPORTA_ODCA.setODCA2(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,2,1
  sw      $v1,($a0)
end;
function  TPORTA_ODCA.getODCA2 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,2,1
end;
procedure TPORTA_ODCA.setODCA3; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,8($a0)
end;
procedure TPORTA_ODCA.clearODCA3; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,4($a0)
end;
procedure TPORTA_ODCA.setODCA3(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,3,1
  sw      $v1,($a0)
end;
function  TPORTA_ODCA.getODCA3 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,3,1
end;
procedure TPORTA_ODCA.setODCA4; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,8($a0)
end;
procedure TPORTA_ODCA.clearODCA4; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,4($a0)
end;
procedure TPORTA_ODCA.setODCA4(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,4,1
  sw      $v1,($a0)
end;
function  TPORTA_ODCA.getODCA4 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,4,1
end;
procedure TPORTA_ODCA.setODCA5; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,8($a0)
end;
procedure TPORTA_ODCA.clearODCA5; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,4($a0)
end;
procedure TPORTA_ODCA.setODCA5(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,5,1
  sw      $v1,($a0)
end;
function  TPORTA_ODCA.getODCA5 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,5,1
end;
procedure TPORTA_ODCA.setODCA6; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,8($a0)
end;
procedure TPORTA_ODCA.clearODCA6; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,4($a0)
end;
procedure TPORTA_ODCA.setODCA6(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,6,1
  sw      $v1,($a0)
end;
function  TPORTA_ODCA.getODCA6 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,6,1
end;
procedure TPORTA_ODCA.setODCA7; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,8($a0)
end;
procedure TPORTA_ODCA.clearODCA7; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,4($a0)
end;
procedure TPORTA_ODCA.setODCA7(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,7,1
  sw      $v1,($a0)
end;
function  TPORTA_ODCA.getODCA7 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,7,1
end;
procedure TPORTA_ODCA.setODCA9; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,512
  sw $a1,8($a0)
end;
procedure TPORTA_ODCA.clearODCA9; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,512
  sw $a1,4($a0)
end;
procedure TPORTA_ODCA.setODCA9(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,9,1
  sw      $v1,($a0)
end;
function  TPORTA_ODCA.getODCA9 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,9,1
end;
procedure TPORTA_ODCA.setODCA10; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1024
  sw $a1,8($a0)
end;
procedure TPORTA_ODCA.clearODCA10; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1024
  sw $a1,4($a0)
end;
procedure TPORTA_ODCA.setODCA10(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,10,1
  sw      $v1,($a0)
end;
function  TPORTA_ODCA.getODCA10 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,10,1
end;
procedure TPORTA_ODCA.setODCA14; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16384
  sw $a1,8($a0)
end;
procedure TPORTA_ODCA.clearODCA14; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16384
  sw $a1,4($a0)
end;
procedure TPORTA_ODCA.setODCA14(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,14,1
  sw      $v1,($a0)
end;
function  TPORTA_ODCA.getODCA14 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,14,1
end;
procedure TPORTA_ODCA.setODCA15; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,8($a0)
end;
procedure TPORTA_ODCA.clearODCA15; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,4($a0)
end;
procedure TPORTA_ODCA.setODCA15(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,15,1
  sw      $v1,($a0)
end;
function  TPORTA_ODCA.getODCA15 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,15,1
end;
procedure TPORTA_ODCA.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TPORTA_ODCA.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TPORTB_TRISB.setTRISB0; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,8($a0)
end;
procedure TPORTB_TRISB.clearTRISB0; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,4($a0)
end;
procedure TPORTB_TRISB.setTRISB0(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,1
  sw      $v1,($a0)
end;
function  TPORTB_TRISB.getTRISB0 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,1
end;
procedure TPORTB_TRISB.setTRISB1; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,8($a0)
end;
procedure TPORTB_TRISB.clearTRISB1; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,4($a0)
end;
procedure TPORTB_TRISB.setTRISB1(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,1,1
  sw      $v1,($a0)
end;
function  TPORTB_TRISB.getTRISB1 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,1,1
end;
procedure TPORTB_TRISB.setTRISB2; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,8($a0)
end;
procedure TPORTB_TRISB.clearTRISB2; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,4($a0)
end;
procedure TPORTB_TRISB.setTRISB2(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,2,1
  sw      $v1,($a0)
end;
function  TPORTB_TRISB.getTRISB2 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,2,1
end;
procedure TPORTB_TRISB.setTRISB3; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,8($a0)
end;
procedure TPORTB_TRISB.clearTRISB3; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,4($a0)
end;
procedure TPORTB_TRISB.setTRISB3(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,3,1
  sw      $v1,($a0)
end;
function  TPORTB_TRISB.getTRISB3 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,3,1
end;
procedure TPORTB_TRISB.setTRISB4; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,8($a0)
end;
procedure TPORTB_TRISB.clearTRISB4; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,4($a0)
end;
procedure TPORTB_TRISB.setTRISB4(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,4,1
  sw      $v1,($a0)
end;
function  TPORTB_TRISB.getTRISB4 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,4,1
end;
procedure TPORTB_TRISB.setTRISB5; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,8($a0)
end;
procedure TPORTB_TRISB.clearTRISB5; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,4($a0)
end;
procedure TPORTB_TRISB.setTRISB5(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,5,1
  sw      $v1,($a0)
end;
function  TPORTB_TRISB.getTRISB5 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,5,1
end;
procedure TPORTB_TRISB.setTRISB6; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,8($a0)
end;
procedure TPORTB_TRISB.clearTRISB6; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,4($a0)
end;
procedure TPORTB_TRISB.setTRISB6(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,6,1
  sw      $v1,($a0)
end;
function  TPORTB_TRISB.getTRISB6 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,6,1
end;
procedure TPORTB_TRISB.setTRISB7; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,8($a0)
end;
procedure TPORTB_TRISB.clearTRISB7; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,4($a0)
end;
procedure TPORTB_TRISB.setTRISB7(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,7,1
  sw      $v1,($a0)
end;
function  TPORTB_TRISB.getTRISB7 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,7,1
end;
procedure TPORTB_TRISB.setTRISB8; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,8($a0)
end;
procedure TPORTB_TRISB.clearTRISB8; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,4($a0)
end;
procedure TPORTB_TRISB.setTRISB8(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,8,1
  sw      $v1,($a0)
end;
function  TPORTB_TRISB.getTRISB8 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,8,1
end;
procedure TPORTB_TRISB.setTRISB9; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,512
  sw $a1,8($a0)
end;
procedure TPORTB_TRISB.clearTRISB9; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,512
  sw $a1,4($a0)
end;
procedure TPORTB_TRISB.setTRISB9(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,9,1
  sw      $v1,($a0)
end;
function  TPORTB_TRISB.getTRISB9 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,9,1
end;
procedure TPORTB_TRISB.setTRISB10; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1024
  sw $a1,8($a0)
end;
procedure TPORTB_TRISB.clearTRISB10; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1024
  sw $a1,4($a0)
end;
procedure TPORTB_TRISB.setTRISB10(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,10,1
  sw      $v1,($a0)
end;
function  TPORTB_TRISB.getTRISB10 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,10,1
end;
procedure TPORTB_TRISB.setTRISB11; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2048
  sw $a1,8($a0)
end;
procedure TPORTB_TRISB.clearTRISB11; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2048
  sw $a1,4($a0)
end;
procedure TPORTB_TRISB.setTRISB11(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,11,1
  sw      $v1,($a0)
end;
function  TPORTB_TRISB.getTRISB11 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,11,1
end;
procedure TPORTB_TRISB.setTRISB12; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4096
  sw $a1,8($a0)
end;
procedure TPORTB_TRISB.clearTRISB12; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4096
  sw $a1,4($a0)
end;
procedure TPORTB_TRISB.setTRISB12(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,12,1
  sw      $v1,($a0)
end;
function  TPORTB_TRISB.getTRISB12 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,12,1
end;
procedure TPORTB_TRISB.setTRISB13; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,8($a0)
end;
procedure TPORTB_TRISB.clearTRISB13; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,4($a0)
end;
procedure TPORTB_TRISB.setTRISB13(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,13,1
  sw      $v1,($a0)
end;
function  TPORTB_TRISB.getTRISB13 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,13,1
end;
procedure TPORTB_TRISB.setTRISB14; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16384
  sw $a1,8($a0)
end;
procedure TPORTB_TRISB.clearTRISB14; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16384
  sw $a1,4($a0)
end;
procedure TPORTB_TRISB.setTRISB14(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,14,1
  sw      $v1,($a0)
end;
function  TPORTB_TRISB.getTRISB14 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,14,1
end;
procedure TPORTB_TRISB.setTRISB15; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,8($a0)
end;
procedure TPORTB_TRISB.clearTRISB15; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,4($a0)
end;
procedure TPORTB_TRISB.setTRISB15(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,15,1
  sw      $v1,($a0)
end;
function  TPORTB_TRISB.getTRISB15 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,15,1
end;
procedure TPORTB_TRISB.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TPORTB_TRISB.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TPORTB_PORTB.setRB0; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,8($a0)
end;
procedure TPORTB_PORTB.clearRB0; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,4($a0)
end;
procedure TPORTB_PORTB.setRB0(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,1
  sw      $v1,($a0)
end;
function  TPORTB_PORTB.getRB0 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,1
end;
procedure TPORTB_PORTB.setRB1; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,8($a0)
end;
procedure TPORTB_PORTB.clearRB1; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,4($a0)
end;
procedure TPORTB_PORTB.setRB1(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,1,1
  sw      $v1,($a0)
end;
function  TPORTB_PORTB.getRB1 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,1,1
end;
procedure TPORTB_PORTB.setRB2; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,8($a0)
end;
procedure TPORTB_PORTB.clearRB2; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,4($a0)
end;
procedure TPORTB_PORTB.setRB2(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,2,1
  sw      $v1,($a0)
end;
function  TPORTB_PORTB.getRB2 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,2,1
end;
procedure TPORTB_PORTB.setRB3; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,8($a0)
end;
procedure TPORTB_PORTB.clearRB3; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,4($a0)
end;
procedure TPORTB_PORTB.setRB3(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,3,1
  sw      $v1,($a0)
end;
function  TPORTB_PORTB.getRB3 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,3,1
end;
procedure TPORTB_PORTB.setRB4; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,8($a0)
end;
procedure TPORTB_PORTB.clearRB4; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,4($a0)
end;
procedure TPORTB_PORTB.setRB4(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,4,1
  sw      $v1,($a0)
end;
function  TPORTB_PORTB.getRB4 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,4,1
end;
procedure TPORTB_PORTB.setRB5; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,8($a0)
end;
procedure TPORTB_PORTB.clearRB5; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,4($a0)
end;
procedure TPORTB_PORTB.setRB5(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,5,1
  sw      $v1,($a0)
end;
function  TPORTB_PORTB.getRB5 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,5,1
end;
procedure TPORTB_PORTB.setRB6; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,8($a0)
end;
procedure TPORTB_PORTB.clearRB6; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,4($a0)
end;
procedure TPORTB_PORTB.setRB6(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,6,1
  sw      $v1,($a0)
end;
function  TPORTB_PORTB.getRB6 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,6,1
end;
procedure TPORTB_PORTB.setRB7; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,8($a0)
end;
procedure TPORTB_PORTB.clearRB7; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,4($a0)
end;
procedure TPORTB_PORTB.setRB7(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,7,1
  sw      $v1,($a0)
end;
function  TPORTB_PORTB.getRB7 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,7,1
end;
procedure TPORTB_PORTB.setRB8; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,8($a0)
end;
procedure TPORTB_PORTB.clearRB8; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,4($a0)
end;
procedure TPORTB_PORTB.setRB8(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,8,1
  sw      $v1,($a0)
end;
function  TPORTB_PORTB.getRB8 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,8,1
end;
procedure TPORTB_PORTB.setRB9; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,512
  sw $a1,8($a0)
end;
procedure TPORTB_PORTB.clearRB9; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,512
  sw $a1,4($a0)
end;
procedure TPORTB_PORTB.setRB9(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,9,1
  sw      $v1,($a0)
end;
function  TPORTB_PORTB.getRB9 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,9,1
end;
procedure TPORTB_PORTB.setRB10; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1024
  sw $a1,8($a0)
end;
procedure TPORTB_PORTB.clearRB10; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1024
  sw $a1,4($a0)
end;
procedure TPORTB_PORTB.setRB10(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,10,1
  sw      $v1,($a0)
end;
function  TPORTB_PORTB.getRB10 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,10,1
end;
procedure TPORTB_PORTB.setRB11; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2048
  sw $a1,8($a0)
end;
procedure TPORTB_PORTB.clearRB11; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2048
  sw $a1,4($a0)
end;
procedure TPORTB_PORTB.setRB11(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,11,1
  sw      $v1,($a0)
end;
function  TPORTB_PORTB.getRB11 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,11,1
end;
procedure TPORTB_PORTB.setRB12; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4096
  sw $a1,8($a0)
end;
procedure TPORTB_PORTB.clearRB12; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4096
  sw $a1,4($a0)
end;
procedure TPORTB_PORTB.setRB12(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,12,1
  sw      $v1,($a0)
end;
function  TPORTB_PORTB.getRB12 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,12,1
end;
procedure TPORTB_PORTB.setRB13; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,8($a0)
end;
procedure TPORTB_PORTB.clearRB13; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,4($a0)
end;
procedure TPORTB_PORTB.setRB13(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,13,1
  sw      $v1,($a0)
end;
function  TPORTB_PORTB.getRB13 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,13,1
end;
procedure TPORTB_PORTB.setRB14; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16384
  sw $a1,8($a0)
end;
procedure TPORTB_PORTB.clearRB14; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16384
  sw $a1,4($a0)
end;
procedure TPORTB_PORTB.setRB14(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,14,1
  sw      $v1,($a0)
end;
function  TPORTB_PORTB.getRB14 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,14,1
end;
procedure TPORTB_PORTB.setRB15; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,8($a0)
end;
procedure TPORTB_PORTB.clearRB15; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,4($a0)
end;
procedure TPORTB_PORTB.setRB15(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,15,1
  sw      $v1,($a0)
end;
function  TPORTB_PORTB.getRB15 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,15,1
end;
procedure TPORTB_PORTB.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TPORTB_PORTB.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TPORTB_LATB.setLATB0; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,8($a0)
end;
procedure TPORTB_LATB.clearLATB0; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,4($a0)
end;
procedure TPORTB_LATB.setLATB0(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,1
  sw      $v1,($a0)
end;
function  TPORTB_LATB.getLATB0 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,1
end;
procedure TPORTB_LATB.setLATB1; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,8($a0)
end;
procedure TPORTB_LATB.clearLATB1; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,4($a0)
end;
procedure TPORTB_LATB.setLATB1(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,1,1
  sw      $v1,($a0)
end;
function  TPORTB_LATB.getLATB1 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,1,1
end;
procedure TPORTB_LATB.setLATB2; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,8($a0)
end;
procedure TPORTB_LATB.clearLATB2; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,4($a0)
end;
procedure TPORTB_LATB.setLATB2(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,2,1
  sw      $v1,($a0)
end;
function  TPORTB_LATB.getLATB2 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,2,1
end;
procedure TPORTB_LATB.setLATB3; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,8($a0)
end;
procedure TPORTB_LATB.clearLATB3; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,4($a0)
end;
procedure TPORTB_LATB.setLATB3(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,3,1
  sw      $v1,($a0)
end;
function  TPORTB_LATB.getLATB3 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,3,1
end;
procedure TPORTB_LATB.setLATB4; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,8($a0)
end;
procedure TPORTB_LATB.clearLATB4; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,4($a0)
end;
procedure TPORTB_LATB.setLATB4(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,4,1
  sw      $v1,($a0)
end;
function  TPORTB_LATB.getLATB4 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,4,1
end;
procedure TPORTB_LATB.setLATB5; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,8($a0)
end;
procedure TPORTB_LATB.clearLATB5; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,4($a0)
end;
procedure TPORTB_LATB.setLATB5(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,5,1
  sw      $v1,($a0)
end;
function  TPORTB_LATB.getLATB5 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,5,1
end;
procedure TPORTB_LATB.setLATB6; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,8($a0)
end;
procedure TPORTB_LATB.clearLATB6; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,4($a0)
end;
procedure TPORTB_LATB.setLATB6(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,6,1
  sw      $v1,($a0)
end;
function  TPORTB_LATB.getLATB6 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,6,1
end;
procedure TPORTB_LATB.setLATB7; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,8($a0)
end;
procedure TPORTB_LATB.clearLATB7; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,4($a0)
end;
procedure TPORTB_LATB.setLATB7(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,7,1
  sw      $v1,($a0)
end;
function  TPORTB_LATB.getLATB7 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,7,1
end;
procedure TPORTB_LATB.setLATB8; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,8($a0)
end;
procedure TPORTB_LATB.clearLATB8; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,4($a0)
end;
procedure TPORTB_LATB.setLATB8(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,8,1
  sw      $v1,($a0)
end;
function  TPORTB_LATB.getLATB8 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,8,1
end;
procedure TPORTB_LATB.setLATB9; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,512
  sw $a1,8($a0)
end;
procedure TPORTB_LATB.clearLATB9; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,512
  sw $a1,4($a0)
end;
procedure TPORTB_LATB.setLATB9(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,9,1
  sw      $v1,($a0)
end;
function  TPORTB_LATB.getLATB9 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,9,1
end;
procedure TPORTB_LATB.setLATB10; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1024
  sw $a1,8($a0)
end;
procedure TPORTB_LATB.clearLATB10; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1024
  sw $a1,4($a0)
end;
procedure TPORTB_LATB.setLATB10(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,10,1
  sw      $v1,($a0)
end;
function  TPORTB_LATB.getLATB10 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,10,1
end;
procedure TPORTB_LATB.setLATB11; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2048
  sw $a1,8($a0)
end;
procedure TPORTB_LATB.clearLATB11; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2048
  sw $a1,4($a0)
end;
procedure TPORTB_LATB.setLATB11(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,11,1
  sw      $v1,($a0)
end;
function  TPORTB_LATB.getLATB11 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,11,1
end;
procedure TPORTB_LATB.setLATB12; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4096
  sw $a1,8($a0)
end;
procedure TPORTB_LATB.clearLATB12; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4096
  sw $a1,4($a0)
end;
procedure TPORTB_LATB.setLATB12(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,12,1
  sw      $v1,($a0)
end;
function  TPORTB_LATB.getLATB12 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,12,1
end;
procedure TPORTB_LATB.setLATB13; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,8($a0)
end;
procedure TPORTB_LATB.clearLATB13; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,4($a0)
end;
procedure TPORTB_LATB.setLATB13(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,13,1
  sw      $v1,($a0)
end;
function  TPORTB_LATB.getLATB13 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,13,1
end;
procedure TPORTB_LATB.setLATB14; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16384
  sw $a1,8($a0)
end;
procedure TPORTB_LATB.clearLATB14; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16384
  sw $a1,4($a0)
end;
procedure TPORTB_LATB.setLATB14(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,14,1
  sw      $v1,($a0)
end;
function  TPORTB_LATB.getLATB14 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,14,1
end;
procedure TPORTB_LATB.setLATB15; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,8($a0)
end;
procedure TPORTB_LATB.clearLATB15; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,4($a0)
end;
procedure TPORTB_LATB.setLATB15(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,15,1
  sw      $v1,($a0)
end;
function  TPORTB_LATB.getLATB15 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,15,1
end;
procedure TPORTB_LATB.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TPORTB_LATB.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TPORTB_ODCB.setODCB0; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,8($a0)
end;
procedure TPORTB_ODCB.clearODCB0; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,4($a0)
end;
procedure TPORTB_ODCB.setODCB0(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,1
  sw      $v1,($a0)
end;
function  TPORTB_ODCB.getODCB0 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,1
end;
procedure TPORTB_ODCB.setODCB1; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,8($a0)
end;
procedure TPORTB_ODCB.clearODCB1; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,4($a0)
end;
procedure TPORTB_ODCB.setODCB1(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,1,1
  sw      $v1,($a0)
end;
function  TPORTB_ODCB.getODCB1 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,1,1
end;
procedure TPORTB_ODCB.setODCB2; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,8($a0)
end;
procedure TPORTB_ODCB.clearODCB2; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,4($a0)
end;
procedure TPORTB_ODCB.setODCB2(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,2,1
  sw      $v1,($a0)
end;
function  TPORTB_ODCB.getODCB2 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,2,1
end;
procedure TPORTB_ODCB.setODCB3; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,8($a0)
end;
procedure TPORTB_ODCB.clearODCB3; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,4($a0)
end;
procedure TPORTB_ODCB.setODCB3(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,3,1
  sw      $v1,($a0)
end;
function  TPORTB_ODCB.getODCB3 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,3,1
end;
procedure TPORTB_ODCB.setODCB4; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,8($a0)
end;
procedure TPORTB_ODCB.clearODCB4; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,4($a0)
end;
procedure TPORTB_ODCB.setODCB4(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,4,1
  sw      $v1,($a0)
end;
function  TPORTB_ODCB.getODCB4 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,4,1
end;
procedure TPORTB_ODCB.setODCB5; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,8($a0)
end;
procedure TPORTB_ODCB.clearODCB5; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,4($a0)
end;
procedure TPORTB_ODCB.setODCB5(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,5,1
  sw      $v1,($a0)
end;
function  TPORTB_ODCB.getODCB5 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,5,1
end;
procedure TPORTB_ODCB.setODCB6; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,8($a0)
end;
procedure TPORTB_ODCB.clearODCB6; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,4($a0)
end;
procedure TPORTB_ODCB.setODCB6(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,6,1
  sw      $v1,($a0)
end;
function  TPORTB_ODCB.getODCB6 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,6,1
end;
procedure TPORTB_ODCB.setODCB7; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,8($a0)
end;
procedure TPORTB_ODCB.clearODCB7; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,4($a0)
end;
procedure TPORTB_ODCB.setODCB7(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,7,1
  sw      $v1,($a0)
end;
function  TPORTB_ODCB.getODCB7 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,7,1
end;
procedure TPORTB_ODCB.setODCB8; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,8($a0)
end;
procedure TPORTB_ODCB.clearODCB8; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,4($a0)
end;
procedure TPORTB_ODCB.setODCB8(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,8,1
  sw      $v1,($a0)
end;
function  TPORTB_ODCB.getODCB8 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,8,1
end;
procedure TPORTB_ODCB.setODCB9; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,512
  sw $a1,8($a0)
end;
procedure TPORTB_ODCB.clearODCB9; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,512
  sw $a1,4($a0)
end;
procedure TPORTB_ODCB.setODCB9(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,9,1
  sw      $v1,($a0)
end;
function  TPORTB_ODCB.getODCB9 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,9,1
end;
procedure TPORTB_ODCB.setODCB10; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1024
  sw $a1,8($a0)
end;
procedure TPORTB_ODCB.clearODCB10; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1024
  sw $a1,4($a0)
end;
procedure TPORTB_ODCB.setODCB10(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,10,1
  sw      $v1,($a0)
end;
function  TPORTB_ODCB.getODCB10 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,10,1
end;
procedure TPORTB_ODCB.setODCB11; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2048
  sw $a1,8($a0)
end;
procedure TPORTB_ODCB.clearODCB11; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2048
  sw $a1,4($a0)
end;
procedure TPORTB_ODCB.setODCB11(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,11,1
  sw      $v1,($a0)
end;
function  TPORTB_ODCB.getODCB11 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,11,1
end;
procedure TPORTB_ODCB.setODCB12; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4096
  sw $a1,8($a0)
end;
procedure TPORTB_ODCB.clearODCB12; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4096
  sw $a1,4($a0)
end;
procedure TPORTB_ODCB.setODCB12(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,12,1
  sw      $v1,($a0)
end;
function  TPORTB_ODCB.getODCB12 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,12,1
end;
procedure TPORTB_ODCB.setODCB13; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,8($a0)
end;
procedure TPORTB_ODCB.clearODCB13; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,4($a0)
end;
procedure TPORTB_ODCB.setODCB13(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,13,1
  sw      $v1,($a0)
end;
function  TPORTB_ODCB.getODCB13 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,13,1
end;
procedure TPORTB_ODCB.setODCB14; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16384
  sw $a1,8($a0)
end;
procedure TPORTB_ODCB.clearODCB14; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16384
  sw $a1,4($a0)
end;
procedure TPORTB_ODCB.setODCB14(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,14,1
  sw      $v1,($a0)
end;
function  TPORTB_ODCB.getODCB14 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,14,1
end;
procedure TPORTB_ODCB.setODCB15; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,8($a0)
end;
procedure TPORTB_ODCB.clearODCB15; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,4($a0)
end;
procedure TPORTB_ODCB.setODCB15(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,15,1
  sw      $v1,($a0)
end;
function  TPORTB_ODCB.getODCB15 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,15,1
end;
procedure TPORTB_ODCB.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TPORTB_ODCB.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TPORTC_TRISC.setTRISC1; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,8($a0)
end;
procedure TPORTC_TRISC.clearTRISC1; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,4($a0)
end;
procedure TPORTC_TRISC.setTRISC1(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,1,1
  sw      $v1,($a0)
end;
function  TPORTC_TRISC.getTRISC1 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,1,1
end;
procedure TPORTC_TRISC.setTRISC2; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,8($a0)
end;
procedure TPORTC_TRISC.clearTRISC2; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,4($a0)
end;
procedure TPORTC_TRISC.setTRISC2(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,2,1
  sw      $v1,($a0)
end;
function  TPORTC_TRISC.getTRISC2 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,2,1
end;
procedure TPORTC_TRISC.setTRISC3; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,8($a0)
end;
procedure TPORTC_TRISC.clearTRISC3; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,4($a0)
end;
procedure TPORTC_TRISC.setTRISC3(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,3,1
  sw      $v1,($a0)
end;
function  TPORTC_TRISC.getTRISC3 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,3,1
end;
procedure TPORTC_TRISC.setTRISC4; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,8($a0)
end;
procedure TPORTC_TRISC.clearTRISC4; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,4($a0)
end;
procedure TPORTC_TRISC.setTRISC4(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,4,1
  sw      $v1,($a0)
end;
function  TPORTC_TRISC.getTRISC4 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,4,1
end;
procedure TPORTC_TRISC.setTRISC12; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4096
  sw $a1,8($a0)
end;
procedure TPORTC_TRISC.clearTRISC12; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4096
  sw $a1,4($a0)
end;
procedure TPORTC_TRISC.setTRISC12(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,12,1
  sw      $v1,($a0)
end;
function  TPORTC_TRISC.getTRISC12 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,12,1
end;
procedure TPORTC_TRISC.setTRISC13; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,8($a0)
end;
procedure TPORTC_TRISC.clearTRISC13; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,4($a0)
end;
procedure TPORTC_TRISC.setTRISC13(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,13,1
  sw      $v1,($a0)
end;
function  TPORTC_TRISC.getTRISC13 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,13,1
end;
procedure TPORTC_TRISC.setTRISC14; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16384
  sw $a1,8($a0)
end;
procedure TPORTC_TRISC.clearTRISC14; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16384
  sw $a1,4($a0)
end;
procedure TPORTC_TRISC.setTRISC14(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,14,1
  sw      $v1,($a0)
end;
function  TPORTC_TRISC.getTRISC14 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,14,1
end;
procedure TPORTC_TRISC.setTRISC15; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,8($a0)
end;
procedure TPORTC_TRISC.clearTRISC15; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,4($a0)
end;
procedure TPORTC_TRISC.setTRISC15(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,15,1
  sw      $v1,($a0)
end;
function  TPORTC_TRISC.getTRISC15 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,15,1
end;
procedure TPORTC_TRISC.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TPORTC_TRISC.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TPORTC_PORTC.setRC1; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,8($a0)
end;
procedure TPORTC_PORTC.clearRC1; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,4($a0)
end;
procedure TPORTC_PORTC.setRC1(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,1,1
  sw      $v1,($a0)
end;
function  TPORTC_PORTC.getRC1 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,1,1
end;
procedure TPORTC_PORTC.setRC2; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,8($a0)
end;
procedure TPORTC_PORTC.clearRC2; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,4($a0)
end;
procedure TPORTC_PORTC.setRC2(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,2,1
  sw      $v1,($a0)
end;
function  TPORTC_PORTC.getRC2 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,2,1
end;
procedure TPORTC_PORTC.setRC3; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,8($a0)
end;
procedure TPORTC_PORTC.clearRC3; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,4($a0)
end;
procedure TPORTC_PORTC.setRC3(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,3,1
  sw      $v1,($a0)
end;
function  TPORTC_PORTC.getRC3 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,3,1
end;
procedure TPORTC_PORTC.setRC4; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,8($a0)
end;
procedure TPORTC_PORTC.clearRC4; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,4($a0)
end;
procedure TPORTC_PORTC.setRC4(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,4,1
  sw      $v1,($a0)
end;
function  TPORTC_PORTC.getRC4 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,4,1
end;
procedure TPORTC_PORTC.setRC12; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4096
  sw $a1,8($a0)
end;
procedure TPORTC_PORTC.clearRC12; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4096
  sw $a1,4($a0)
end;
procedure TPORTC_PORTC.setRC12(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,12,1
  sw      $v1,($a0)
end;
function  TPORTC_PORTC.getRC12 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,12,1
end;
procedure TPORTC_PORTC.setRC13; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,8($a0)
end;
procedure TPORTC_PORTC.clearRC13; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,4($a0)
end;
procedure TPORTC_PORTC.setRC13(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,13,1
  sw      $v1,($a0)
end;
function  TPORTC_PORTC.getRC13 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,13,1
end;
procedure TPORTC_PORTC.setRC14; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16384
  sw $a1,8($a0)
end;
procedure TPORTC_PORTC.clearRC14; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16384
  sw $a1,4($a0)
end;
procedure TPORTC_PORTC.setRC14(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,14,1
  sw      $v1,($a0)
end;
function  TPORTC_PORTC.getRC14 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,14,1
end;
procedure TPORTC_PORTC.setRC15; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,8($a0)
end;
procedure TPORTC_PORTC.clearRC15; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,4($a0)
end;
procedure TPORTC_PORTC.setRC15(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,15,1
  sw      $v1,($a0)
end;
function  TPORTC_PORTC.getRC15 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,15,1
end;
procedure TPORTC_PORTC.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TPORTC_PORTC.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TPORTC_LATC.setLATC1; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,8($a0)
end;
procedure TPORTC_LATC.clearLATC1; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,4($a0)
end;
procedure TPORTC_LATC.setLATC1(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,1,1
  sw      $v1,($a0)
end;
function  TPORTC_LATC.getLATC1 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,1,1
end;
procedure TPORTC_LATC.setLATC2; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,8($a0)
end;
procedure TPORTC_LATC.clearLATC2; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,4($a0)
end;
procedure TPORTC_LATC.setLATC2(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,2,1
  sw      $v1,($a0)
end;
function  TPORTC_LATC.getLATC2 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,2,1
end;
procedure TPORTC_LATC.setLATC3; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,8($a0)
end;
procedure TPORTC_LATC.clearLATC3; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,4($a0)
end;
procedure TPORTC_LATC.setLATC3(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,3,1
  sw      $v1,($a0)
end;
function  TPORTC_LATC.getLATC3 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,3,1
end;
procedure TPORTC_LATC.setLATC4; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,8($a0)
end;
procedure TPORTC_LATC.clearLATC4; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,4($a0)
end;
procedure TPORTC_LATC.setLATC4(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,4,1
  sw      $v1,($a0)
end;
function  TPORTC_LATC.getLATC4 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,4,1
end;
procedure TPORTC_LATC.setLATC12; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4096
  sw $a1,8($a0)
end;
procedure TPORTC_LATC.clearLATC12; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4096
  sw $a1,4($a0)
end;
procedure TPORTC_LATC.setLATC12(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,12,1
  sw      $v1,($a0)
end;
function  TPORTC_LATC.getLATC12 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,12,1
end;
procedure TPORTC_LATC.setLATC13; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,8($a0)
end;
procedure TPORTC_LATC.clearLATC13; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,4($a0)
end;
procedure TPORTC_LATC.setLATC13(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,13,1
  sw      $v1,($a0)
end;
function  TPORTC_LATC.getLATC13 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,13,1
end;
procedure TPORTC_LATC.setLATC14; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16384
  sw $a1,8($a0)
end;
procedure TPORTC_LATC.clearLATC14; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16384
  sw $a1,4($a0)
end;
procedure TPORTC_LATC.setLATC14(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,14,1
  sw      $v1,($a0)
end;
function  TPORTC_LATC.getLATC14 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,14,1
end;
procedure TPORTC_LATC.setLATC15; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,8($a0)
end;
procedure TPORTC_LATC.clearLATC15; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,4($a0)
end;
procedure TPORTC_LATC.setLATC15(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,15,1
  sw      $v1,($a0)
end;
function  TPORTC_LATC.getLATC15 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,15,1
end;
procedure TPORTC_LATC.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TPORTC_LATC.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TPORTC_ODCC.setODCC1; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,8($a0)
end;
procedure TPORTC_ODCC.clearODCC1; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,4($a0)
end;
procedure TPORTC_ODCC.setODCC1(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,1,1
  sw      $v1,($a0)
end;
function  TPORTC_ODCC.getODCC1 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,1,1
end;
procedure TPORTC_ODCC.setODCC2; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,8($a0)
end;
procedure TPORTC_ODCC.clearODCC2; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,4($a0)
end;
procedure TPORTC_ODCC.setODCC2(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,2,1
  sw      $v1,($a0)
end;
function  TPORTC_ODCC.getODCC2 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,2,1
end;
procedure TPORTC_ODCC.setODCC3; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,8($a0)
end;
procedure TPORTC_ODCC.clearODCC3; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,4($a0)
end;
procedure TPORTC_ODCC.setODCC3(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,3,1
  sw      $v1,($a0)
end;
function  TPORTC_ODCC.getODCC3 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,3,1
end;
procedure TPORTC_ODCC.setODCC4; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,8($a0)
end;
procedure TPORTC_ODCC.clearODCC4; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,4($a0)
end;
procedure TPORTC_ODCC.setODCC4(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,4,1
  sw      $v1,($a0)
end;
function  TPORTC_ODCC.getODCC4 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,4,1
end;
procedure TPORTC_ODCC.setODCC12; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4096
  sw $a1,8($a0)
end;
procedure TPORTC_ODCC.clearODCC12; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4096
  sw $a1,4($a0)
end;
procedure TPORTC_ODCC.setODCC12(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,12,1
  sw      $v1,($a0)
end;
function  TPORTC_ODCC.getODCC12 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,12,1
end;
procedure TPORTC_ODCC.setODCC13; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,8($a0)
end;
procedure TPORTC_ODCC.clearODCC13; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,4($a0)
end;
procedure TPORTC_ODCC.setODCC13(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,13,1
  sw      $v1,($a0)
end;
function  TPORTC_ODCC.getODCC13 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,13,1
end;
procedure TPORTC_ODCC.setODCC14; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16384
  sw $a1,8($a0)
end;
procedure TPORTC_ODCC.clearODCC14; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16384
  sw $a1,4($a0)
end;
procedure TPORTC_ODCC.setODCC14(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,14,1
  sw      $v1,($a0)
end;
function  TPORTC_ODCC.getODCC14 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,14,1
end;
procedure TPORTC_ODCC.setODCC15; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,8($a0)
end;
procedure TPORTC_ODCC.clearODCC15; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,4($a0)
end;
procedure TPORTC_ODCC.setODCC15(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,15,1
  sw      $v1,($a0)
end;
function  TPORTC_ODCC.getODCC15 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,15,1
end;
procedure TPORTC_ODCC.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TPORTC_ODCC.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TPORTD_TRISD.setTRISD0; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,8($a0)
end;
procedure TPORTD_TRISD.clearTRISD0; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,4($a0)
end;
procedure TPORTD_TRISD.setTRISD0(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,1
  sw      $v1,($a0)
end;
function  TPORTD_TRISD.getTRISD0 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,1
end;
procedure TPORTD_TRISD.setTRISD1; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,8($a0)
end;
procedure TPORTD_TRISD.clearTRISD1; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,4($a0)
end;
procedure TPORTD_TRISD.setTRISD1(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,1,1
  sw      $v1,($a0)
end;
function  TPORTD_TRISD.getTRISD1 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,1,1
end;
procedure TPORTD_TRISD.setTRISD2; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,8($a0)
end;
procedure TPORTD_TRISD.clearTRISD2; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,4($a0)
end;
procedure TPORTD_TRISD.setTRISD2(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,2,1
  sw      $v1,($a0)
end;
function  TPORTD_TRISD.getTRISD2 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,2,1
end;
procedure TPORTD_TRISD.setTRISD3; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,8($a0)
end;
procedure TPORTD_TRISD.clearTRISD3; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,4($a0)
end;
procedure TPORTD_TRISD.setTRISD3(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,3,1
  sw      $v1,($a0)
end;
function  TPORTD_TRISD.getTRISD3 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,3,1
end;
procedure TPORTD_TRISD.setTRISD4; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,8($a0)
end;
procedure TPORTD_TRISD.clearTRISD4; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,4($a0)
end;
procedure TPORTD_TRISD.setTRISD4(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,4,1
  sw      $v1,($a0)
end;
function  TPORTD_TRISD.getTRISD4 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,4,1
end;
procedure TPORTD_TRISD.setTRISD5; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,8($a0)
end;
procedure TPORTD_TRISD.clearTRISD5; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,4($a0)
end;
procedure TPORTD_TRISD.setTRISD5(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,5,1
  sw      $v1,($a0)
end;
function  TPORTD_TRISD.getTRISD5 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,5,1
end;
procedure TPORTD_TRISD.setTRISD6; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,8($a0)
end;
procedure TPORTD_TRISD.clearTRISD6; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,4($a0)
end;
procedure TPORTD_TRISD.setTRISD6(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,6,1
  sw      $v1,($a0)
end;
function  TPORTD_TRISD.getTRISD6 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,6,1
end;
procedure TPORTD_TRISD.setTRISD7; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,8($a0)
end;
procedure TPORTD_TRISD.clearTRISD7; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,4($a0)
end;
procedure TPORTD_TRISD.setTRISD7(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,7,1
  sw      $v1,($a0)
end;
function  TPORTD_TRISD.getTRISD7 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,7,1
end;
procedure TPORTD_TRISD.setTRISD8; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,8($a0)
end;
procedure TPORTD_TRISD.clearTRISD8; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,4($a0)
end;
procedure TPORTD_TRISD.setTRISD8(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,8,1
  sw      $v1,($a0)
end;
function  TPORTD_TRISD.getTRISD8 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,8,1
end;
procedure TPORTD_TRISD.setTRISD9; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,512
  sw $a1,8($a0)
end;
procedure TPORTD_TRISD.clearTRISD9; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,512
  sw $a1,4($a0)
end;
procedure TPORTD_TRISD.setTRISD9(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,9,1
  sw      $v1,($a0)
end;
function  TPORTD_TRISD.getTRISD9 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,9,1
end;
procedure TPORTD_TRISD.setTRISD10; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1024
  sw $a1,8($a0)
end;
procedure TPORTD_TRISD.clearTRISD10; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1024
  sw $a1,4($a0)
end;
procedure TPORTD_TRISD.setTRISD10(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,10,1
  sw      $v1,($a0)
end;
function  TPORTD_TRISD.getTRISD10 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,10,1
end;
procedure TPORTD_TRISD.setTRISD11; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2048
  sw $a1,8($a0)
end;
procedure TPORTD_TRISD.clearTRISD11; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2048
  sw $a1,4($a0)
end;
procedure TPORTD_TRISD.setTRISD11(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,11,1
  sw      $v1,($a0)
end;
function  TPORTD_TRISD.getTRISD11 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,11,1
end;
procedure TPORTD_TRISD.setTRISD12; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4096
  sw $a1,8($a0)
end;
procedure TPORTD_TRISD.clearTRISD12; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4096
  sw $a1,4($a0)
end;
procedure TPORTD_TRISD.setTRISD12(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,12,1
  sw      $v1,($a0)
end;
function  TPORTD_TRISD.getTRISD12 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,12,1
end;
procedure TPORTD_TRISD.setTRISD13; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,8($a0)
end;
procedure TPORTD_TRISD.clearTRISD13; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,4($a0)
end;
procedure TPORTD_TRISD.setTRISD13(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,13,1
  sw      $v1,($a0)
end;
function  TPORTD_TRISD.getTRISD13 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,13,1
end;
procedure TPORTD_TRISD.setTRISD14; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16384
  sw $a1,8($a0)
end;
procedure TPORTD_TRISD.clearTRISD14; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16384
  sw $a1,4($a0)
end;
procedure TPORTD_TRISD.setTRISD14(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,14,1
  sw      $v1,($a0)
end;
function  TPORTD_TRISD.getTRISD14 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,14,1
end;
procedure TPORTD_TRISD.setTRISD15; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,8($a0)
end;
procedure TPORTD_TRISD.clearTRISD15; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,4($a0)
end;
procedure TPORTD_TRISD.setTRISD15(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,15,1
  sw      $v1,($a0)
end;
function  TPORTD_TRISD.getTRISD15 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,15,1
end;
procedure TPORTD_TRISD.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TPORTD_TRISD.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TPORTD_PORTD.setRD0; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,8($a0)
end;
procedure TPORTD_PORTD.clearRD0; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,4($a0)
end;
procedure TPORTD_PORTD.setRD0(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,1
  sw      $v1,($a0)
end;
function  TPORTD_PORTD.getRD0 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,1
end;
procedure TPORTD_PORTD.setRD1; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,8($a0)
end;
procedure TPORTD_PORTD.clearRD1; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,4($a0)
end;
procedure TPORTD_PORTD.setRD1(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,1,1
  sw      $v1,($a0)
end;
function  TPORTD_PORTD.getRD1 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,1,1
end;
procedure TPORTD_PORTD.setRD2; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,8($a0)
end;
procedure TPORTD_PORTD.clearRD2; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,4($a0)
end;
procedure TPORTD_PORTD.setRD2(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,2,1
  sw      $v1,($a0)
end;
function  TPORTD_PORTD.getRD2 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,2,1
end;
procedure TPORTD_PORTD.setRD3; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,8($a0)
end;
procedure TPORTD_PORTD.clearRD3; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,4($a0)
end;
procedure TPORTD_PORTD.setRD3(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,3,1
  sw      $v1,($a0)
end;
function  TPORTD_PORTD.getRD3 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,3,1
end;
procedure TPORTD_PORTD.setRD4; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,8($a0)
end;
procedure TPORTD_PORTD.clearRD4; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,4($a0)
end;
procedure TPORTD_PORTD.setRD4(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,4,1
  sw      $v1,($a0)
end;
function  TPORTD_PORTD.getRD4 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,4,1
end;
procedure TPORTD_PORTD.setRD5; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,8($a0)
end;
procedure TPORTD_PORTD.clearRD5; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,4($a0)
end;
procedure TPORTD_PORTD.setRD5(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,5,1
  sw      $v1,($a0)
end;
function  TPORTD_PORTD.getRD5 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,5,1
end;
procedure TPORTD_PORTD.setRD6; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,8($a0)
end;
procedure TPORTD_PORTD.clearRD6; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,4($a0)
end;
procedure TPORTD_PORTD.setRD6(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,6,1
  sw      $v1,($a0)
end;
function  TPORTD_PORTD.getRD6 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,6,1
end;
procedure TPORTD_PORTD.setRD7; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,8($a0)
end;
procedure TPORTD_PORTD.clearRD7; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,4($a0)
end;
procedure TPORTD_PORTD.setRD7(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,7,1
  sw      $v1,($a0)
end;
function  TPORTD_PORTD.getRD7 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,7,1
end;
procedure TPORTD_PORTD.setRD8; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,8($a0)
end;
procedure TPORTD_PORTD.clearRD8; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,4($a0)
end;
procedure TPORTD_PORTD.setRD8(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,8,1
  sw      $v1,($a0)
end;
function  TPORTD_PORTD.getRD8 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,8,1
end;
procedure TPORTD_PORTD.setRD9; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,512
  sw $a1,8($a0)
end;
procedure TPORTD_PORTD.clearRD9; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,512
  sw $a1,4($a0)
end;
procedure TPORTD_PORTD.setRD9(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,9,1
  sw      $v1,($a0)
end;
function  TPORTD_PORTD.getRD9 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,9,1
end;
procedure TPORTD_PORTD.setRD10; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1024
  sw $a1,8($a0)
end;
procedure TPORTD_PORTD.clearRD10; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1024
  sw $a1,4($a0)
end;
procedure TPORTD_PORTD.setRD10(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,10,1
  sw      $v1,($a0)
end;
function  TPORTD_PORTD.getRD10 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,10,1
end;
procedure TPORTD_PORTD.setRD11; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2048
  sw $a1,8($a0)
end;
procedure TPORTD_PORTD.clearRD11; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2048
  sw $a1,4($a0)
end;
procedure TPORTD_PORTD.setRD11(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,11,1
  sw      $v1,($a0)
end;
function  TPORTD_PORTD.getRD11 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,11,1
end;
procedure TPORTD_PORTD.setRD12; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4096
  sw $a1,8($a0)
end;
procedure TPORTD_PORTD.clearRD12; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4096
  sw $a1,4($a0)
end;
procedure TPORTD_PORTD.setRD12(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,12,1
  sw      $v1,($a0)
end;
function  TPORTD_PORTD.getRD12 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,12,1
end;
procedure TPORTD_PORTD.setRD13; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,8($a0)
end;
procedure TPORTD_PORTD.clearRD13; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,4($a0)
end;
procedure TPORTD_PORTD.setRD13(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,13,1
  sw      $v1,($a0)
end;
function  TPORTD_PORTD.getRD13 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,13,1
end;
procedure TPORTD_PORTD.setRD14; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16384
  sw $a1,8($a0)
end;
procedure TPORTD_PORTD.clearRD14; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16384
  sw $a1,4($a0)
end;
procedure TPORTD_PORTD.setRD14(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,14,1
  sw      $v1,($a0)
end;
function  TPORTD_PORTD.getRD14 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,14,1
end;
procedure TPORTD_PORTD.setRD15; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,8($a0)
end;
procedure TPORTD_PORTD.clearRD15; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,4($a0)
end;
procedure TPORTD_PORTD.setRD15(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,15,1
  sw      $v1,($a0)
end;
function  TPORTD_PORTD.getRD15 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,15,1
end;
procedure TPORTD_PORTD.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TPORTD_PORTD.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TPORTD_LATD.setLATD0; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,8($a0)
end;
procedure TPORTD_LATD.clearLATD0; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,4($a0)
end;
procedure TPORTD_LATD.setLATD0(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,1
  sw      $v1,($a0)
end;
function  TPORTD_LATD.getLATD0 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,1
end;
procedure TPORTD_LATD.setLATD1; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,8($a0)
end;
procedure TPORTD_LATD.clearLATD1; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,4($a0)
end;
procedure TPORTD_LATD.setLATD1(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,1,1
  sw      $v1,($a0)
end;
function  TPORTD_LATD.getLATD1 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,1,1
end;
procedure TPORTD_LATD.setLATD2; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,8($a0)
end;
procedure TPORTD_LATD.clearLATD2; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,4($a0)
end;
procedure TPORTD_LATD.setLATD2(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,2,1
  sw      $v1,($a0)
end;
function  TPORTD_LATD.getLATD2 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,2,1
end;
procedure TPORTD_LATD.setLATD3; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,8($a0)
end;
procedure TPORTD_LATD.clearLATD3; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,4($a0)
end;
procedure TPORTD_LATD.setLATD3(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,3,1
  sw      $v1,($a0)
end;
function  TPORTD_LATD.getLATD3 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,3,1
end;
procedure TPORTD_LATD.setLATD4; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,8($a0)
end;
procedure TPORTD_LATD.clearLATD4; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,4($a0)
end;
procedure TPORTD_LATD.setLATD4(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,4,1
  sw      $v1,($a0)
end;
function  TPORTD_LATD.getLATD4 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,4,1
end;
procedure TPORTD_LATD.setLATD5; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,8($a0)
end;
procedure TPORTD_LATD.clearLATD5; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,4($a0)
end;
procedure TPORTD_LATD.setLATD5(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,5,1
  sw      $v1,($a0)
end;
function  TPORTD_LATD.getLATD5 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,5,1
end;
procedure TPORTD_LATD.setLATD6; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,8($a0)
end;
procedure TPORTD_LATD.clearLATD6; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,4($a0)
end;
procedure TPORTD_LATD.setLATD6(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,6,1
  sw      $v1,($a0)
end;
function  TPORTD_LATD.getLATD6 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,6,1
end;
procedure TPORTD_LATD.setLATD7; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,8($a0)
end;
procedure TPORTD_LATD.clearLATD7; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,4($a0)
end;
procedure TPORTD_LATD.setLATD7(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,7,1
  sw      $v1,($a0)
end;
function  TPORTD_LATD.getLATD7 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,7,1
end;
procedure TPORTD_LATD.setLATD8; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,8($a0)
end;
procedure TPORTD_LATD.clearLATD8; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,4($a0)
end;
procedure TPORTD_LATD.setLATD8(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,8,1
  sw      $v1,($a0)
end;
function  TPORTD_LATD.getLATD8 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,8,1
end;
procedure TPORTD_LATD.setLATD9; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,512
  sw $a1,8($a0)
end;
procedure TPORTD_LATD.clearLATD9; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,512
  sw $a1,4($a0)
end;
procedure TPORTD_LATD.setLATD9(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,9,1
  sw      $v1,($a0)
end;
function  TPORTD_LATD.getLATD9 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,9,1
end;
procedure TPORTD_LATD.setLATD10; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1024
  sw $a1,8($a0)
end;
procedure TPORTD_LATD.clearLATD10; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1024
  sw $a1,4($a0)
end;
procedure TPORTD_LATD.setLATD10(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,10,1
  sw      $v1,($a0)
end;
function  TPORTD_LATD.getLATD10 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,10,1
end;
procedure TPORTD_LATD.setLATD11; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2048
  sw $a1,8($a0)
end;
procedure TPORTD_LATD.clearLATD11; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2048
  sw $a1,4($a0)
end;
procedure TPORTD_LATD.setLATD11(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,11,1
  sw      $v1,($a0)
end;
function  TPORTD_LATD.getLATD11 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,11,1
end;
procedure TPORTD_LATD.setLATD12; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4096
  sw $a1,8($a0)
end;
procedure TPORTD_LATD.clearLATD12; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4096
  sw $a1,4($a0)
end;
procedure TPORTD_LATD.setLATD12(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,12,1
  sw      $v1,($a0)
end;
function  TPORTD_LATD.getLATD12 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,12,1
end;
procedure TPORTD_LATD.setLATD13; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,8($a0)
end;
procedure TPORTD_LATD.clearLATD13; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,4($a0)
end;
procedure TPORTD_LATD.setLATD13(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,13,1
  sw      $v1,($a0)
end;
function  TPORTD_LATD.getLATD13 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,13,1
end;
procedure TPORTD_LATD.setLATD14; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16384
  sw $a1,8($a0)
end;
procedure TPORTD_LATD.clearLATD14; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16384
  sw $a1,4($a0)
end;
procedure TPORTD_LATD.setLATD14(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,14,1
  sw      $v1,($a0)
end;
function  TPORTD_LATD.getLATD14 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,14,1
end;
procedure TPORTD_LATD.setLATD15; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,8($a0)
end;
procedure TPORTD_LATD.clearLATD15; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,4($a0)
end;
procedure TPORTD_LATD.setLATD15(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,15,1
  sw      $v1,($a0)
end;
function  TPORTD_LATD.getLATD15 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,15,1
end;
procedure TPORTD_LATD.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TPORTD_LATD.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TPORTD_ODCD.setODCD0; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,8($a0)
end;
procedure TPORTD_ODCD.clearODCD0; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,4($a0)
end;
procedure TPORTD_ODCD.setODCD0(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,1
  sw      $v1,($a0)
end;
function  TPORTD_ODCD.getODCD0 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,1
end;
procedure TPORTD_ODCD.setODCD1; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,8($a0)
end;
procedure TPORTD_ODCD.clearODCD1; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,4($a0)
end;
procedure TPORTD_ODCD.setODCD1(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,1,1
  sw      $v1,($a0)
end;
function  TPORTD_ODCD.getODCD1 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,1,1
end;
procedure TPORTD_ODCD.setODCD2; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,8($a0)
end;
procedure TPORTD_ODCD.clearODCD2; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,4($a0)
end;
procedure TPORTD_ODCD.setODCD2(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,2,1
  sw      $v1,($a0)
end;
function  TPORTD_ODCD.getODCD2 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,2,1
end;
procedure TPORTD_ODCD.setODCD3; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,8($a0)
end;
procedure TPORTD_ODCD.clearODCD3; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,4($a0)
end;
procedure TPORTD_ODCD.setODCD3(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,3,1
  sw      $v1,($a0)
end;
function  TPORTD_ODCD.getODCD3 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,3,1
end;
procedure TPORTD_ODCD.setODCD4; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,8($a0)
end;
procedure TPORTD_ODCD.clearODCD4; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,4($a0)
end;
procedure TPORTD_ODCD.setODCD4(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,4,1
  sw      $v1,($a0)
end;
function  TPORTD_ODCD.getODCD4 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,4,1
end;
procedure TPORTD_ODCD.setODCD5; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,8($a0)
end;
procedure TPORTD_ODCD.clearODCD5; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,4($a0)
end;
procedure TPORTD_ODCD.setODCD5(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,5,1
  sw      $v1,($a0)
end;
function  TPORTD_ODCD.getODCD5 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,5,1
end;
procedure TPORTD_ODCD.setODCD6; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,8($a0)
end;
procedure TPORTD_ODCD.clearODCD6; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,4($a0)
end;
procedure TPORTD_ODCD.setODCD6(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,6,1
  sw      $v1,($a0)
end;
function  TPORTD_ODCD.getODCD6 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,6,1
end;
procedure TPORTD_ODCD.setODCD7; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,8($a0)
end;
procedure TPORTD_ODCD.clearODCD7; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,4($a0)
end;
procedure TPORTD_ODCD.setODCD7(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,7,1
  sw      $v1,($a0)
end;
function  TPORTD_ODCD.getODCD7 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,7,1
end;
procedure TPORTD_ODCD.setODCD8; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,8($a0)
end;
procedure TPORTD_ODCD.clearODCD8; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,4($a0)
end;
procedure TPORTD_ODCD.setODCD8(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,8,1
  sw      $v1,($a0)
end;
function  TPORTD_ODCD.getODCD8 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,8,1
end;
procedure TPORTD_ODCD.setODCD9; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,512
  sw $a1,8($a0)
end;
procedure TPORTD_ODCD.clearODCD9; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,512
  sw $a1,4($a0)
end;
procedure TPORTD_ODCD.setODCD9(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,9,1
  sw      $v1,($a0)
end;
function  TPORTD_ODCD.getODCD9 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,9,1
end;
procedure TPORTD_ODCD.setODCD10; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1024
  sw $a1,8($a0)
end;
procedure TPORTD_ODCD.clearODCD10; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1024
  sw $a1,4($a0)
end;
procedure TPORTD_ODCD.setODCD10(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,10,1
  sw      $v1,($a0)
end;
function  TPORTD_ODCD.getODCD10 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,10,1
end;
procedure TPORTD_ODCD.setODCD11; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2048
  sw $a1,8($a0)
end;
procedure TPORTD_ODCD.clearODCD11; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2048
  sw $a1,4($a0)
end;
procedure TPORTD_ODCD.setODCD11(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,11,1
  sw      $v1,($a0)
end;
function  TPORTD_ODCD.getODCD11 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,11,1
end;
procedure TPORTD_ODCD.setODCD12; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4096
  sw $a1,8($a0)
end;
procedure TPORTD_ODCD.clearODCD12; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4096
  sw $a1,4($a0)
end;
procedure TPORTD_ODCD.setODCD12(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,12,1
  sw      $v1,($a0)
end;
function  TPORTD_ODCD.getODCD12 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,12,1
end;
procedure TPORTD_ODCD.setODCD13; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,8($a0)
end;
procedure TPORTD_ODCD.clearODCD13; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,4($a0)
end;
procedure TPORTD_ODCD.setODCD13(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,13,1
  sw      $v1,($a0)
end;
function  TPORTD_ODCD.getODCD13 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,13,1
end;
procedure TPORTD_ODCD.setODCD14; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16384
  sw $a1,8($a0)
end;
procedure TPORTD_ODCD.clearODCD14; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16384
  sw $a1,4($a0)
end;
procedure TPORTD_ODCD.setODCD14(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,14,1
  sw      $v1,($a0)
end;
function  TPORTD_ODCD.getODCD14 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,14,1
end;
procedure TPORTD_ODCD.setODCD15; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,8($a0)
end;
procedure TPORTD_ODCD.clearODCD15; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,4($a0)
end;
procedure TPORTD_ODCD.setODCD15(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,15,1
  sw      $v1,($a0)
end;
function  TPORTD_ODCD.getODCD15 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,15,1
end;
procedure TPORTD_ODCD.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TPORTD_ODCD.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TPORTE_TRISE.setTRISE0; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,8($a0)
end;
procedure TPORTE_TRISE.clearTRISE0; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,4($a0)
end;
procedure TPORTE_TRISE.setTRISE0(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,1
  sw      $v1,($a0)
end;
function  TPORTE_TRISE.getTRISE0 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,1
end;
procedure TPORTE_TRISE.setTRISE1; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,8($a0)
end;
procedure TPORTE_TRISE.clearTRISE1; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,4($a0)
end;
procedure TPORTE_TRISE.setTRISE1(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,1,1
  sw      $v1,($a0)
end;
function  TPORTE_TRISE.getTRISE1 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,1,1
end;
procedure TPORTE_TRISE.setTRISE2; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,8($a0)
end;
procedure TPORTE_TRISE.clearTRISE2; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,4($a0)
end;
procedure TPORTE_TRISE.setTRISE2(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,2,1
  sw      $v1,($a0)
end;
function  TPORTE_TRISE.getTRISE2 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,2,1
end;
procedure TPORTE_TRISE.setTRISE3; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,8($a0)
end;
procedure TPORTE_TRISE.clearTRISE3; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,4($a0)
end;
procedure TPORTE_TRISE.setTRISE3(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,3,1
  sw      $v1,($a0)
end;
function  TPORTE_TRISE.getTRISE3 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,3,1
end;
procedure TPORTE_TRISE.setTRISE4; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,8($a0)
end;
procedure TPORTE_TRISE.clearTRISE4; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,4($a0)
end;
procedure TPORTE_TRISE.setTRISE4(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,4,1
  sw      $v1,($a0)
end;
function  TPORTE_TRISE.getTRISE4 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,4,1
end;
procedure TPORTE_TRISE.setTRISE5; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,8($a0)
end;
procedure TPORTE_TRISE.clearTRISE5; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,4($a0)
end;
procedure TPORTE_TRISE.setTRISE5(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,5,1
  sw      $v1,($a0)
end;
function  TPORTE_TRISE.getTRISE5 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,5,1
end;
procedure TPORTE_TRISE.setTRISE6; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,8($a0)
end;
procedure TPORTE_TRISE.clearTRISE6; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,4($a0)
end;
procedure TPORTE_TRISE.setTRISE6(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,6,1
  sw      $v1,($a0)
end;
function  TPORTE_TRISE.getTRISE6 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,6,1
end;
procedure TPORTE_TRISE.setTRISE7; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,8($a0)
end;
procedure TPORTE_TRISE.clearTRISE7; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,4($a0)
end;
procedure TPORTE_TRISE.setTRISE7(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,7,1
  sw      $v1,($a0)
end;
function  TPORTE_TRISE.getTRISE7 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,7,1
end;
procedure TPORTE_TRISE.setTRISE8; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,8($a0)
end;
procedure TPORTE_TRISE.clearTRISE8; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,4($a0)
end;
procedure TPORTE_TRISE.setTRISE8(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,8,1
  sw      $v1,($a0)
end;
function  TPORTE_TRISE.getTRISE8 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,8,1
end;
procedure TPORTE_TRISE.setTRISE9; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,512
  sw $a1,8($a0)
end;
procedure TPORTE_TRISE.clearTRISE9; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,512
  sw $a1,4($a0)
end;
procedure TPORTE_TRISE.setTRISE9(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,9,1
  sw      $v1,($a0)
end;
function  TPORTE_TRISE.getTRISE9 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,9,1
end;
procedure TPORTE_TRISE.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TPORTE_TRISE.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TPORTE_PORTE.setRE0; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,8($a0)
end;
procedure TPORTE_PORTE.clearRE0; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,4($a0)
end;
procedure TPORTE_PORTE.setRE0(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,1
  sw      $v1,($a0)
end;
function  TPORTE_PORTE.getRE0 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,1
end;
procedure TPORTE_PORTE.setRE1; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,8($a0)
end;
procedure TPORTE_PORTE.clearRE1; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,4($a0)
end;
procedure TPORTE_PORTE.setRE1(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,1,1
  sw      $v1,($a0)
end;
function  TPORTE_PORTE.getRE1 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,1,1
end;
procedure TPORTE_PORTE.setRE2; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,8($a0)
end;
procedure TPORTE_PORTE.clearRE2; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,4($a0)
end;
procedure TPORTE_PORTE.setRE2(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,2,1
  sw      $v1,($a0)
end;
function  TPORTE_PORTE.getRE2 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,2,1
end;
procedure TPORTE_PORTE.setRE3; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,8($a0)
end;
procedure TPORTE_PORTE.clearRE3; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,4($a0)
end;
procedure TPORTE_PORTE.setRE3(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,3,1
  sw      $v1,($a0)
end;
function  TPORTE_PORTE.getRE3 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,3,1
end;
procedure TPORTE_PORTE.setRE4; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,8($a0)
end;
procedure TPORTE_PORTE.clearRE4; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,4($a0)
end;
procedure TPORTE_PORTE.setRE4(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,4,1
  sw      $v1,($a0)
end;
function  TPORTE_PORTE.getRE4 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,4,1
end;
procedure TPORTE_PORTE.setRE5; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,8($a0)
end;
procedure TPORTE_PORTE.clearRE5; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,4($a0)
end;
procedure TPORTE_PORTE.setRE5(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,5,1
  sw      $v1,($a0)
end;
function  TPORTE_PORTE.getRE5 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,5,1
end;
procedure TPORTE_PORTE.setRE6; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,8($a0)
end;
procedure TPORTE_PORTE.clearRE6; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,4($a0)
end;
procedure TPORTE_PORTE.setRE6(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,6,1
  sw      $v1,($a0)
end;
function  TPORTE_PORTE.getRE6 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,6,1
end;
procedure TPORTE_PORTE.setRE7; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,8($a0)
end;
procedure TPORTE_PORTE.clearRE7; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,4($a0)
end;
procedure TPORTE_PORTE.setRE7(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,7,1
  sw      $v1,($a0)
end;
function  TPORTE_PORTE.getRE7 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,7,1
end;
procedure TPORTE_PORTE.setRE8; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,8($a0)
end;
procedure TPORTE_PORTE.clearRE8; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,4($a0)
end;
procedure TPORTE_PORTE.setRE8(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,8,1
  sw      $v1,($a0)
end;
function  TPORTE_PORTE.getRE8 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,8,1
end;
procedure TPORTE_PORTE.setRE9; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,512
  sw $a1,8($a0)
end;
procedure TPORTE_PORTE.clearRE9; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,512
  sw $a1,4($a0)
end;
procedure TPORTE_PORTE.setRE9(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,9,1
  sw      $v1,($a0)
end;
function  TPORTE_PORTE.getRE9 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,9,1
end;
procedure TPORTE_PORTE.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TPORTE_PORTE.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TPORTE_LATE.setLATE0; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,8($a0)
end;
procedure TPORTE_LATE.clearLATE0; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,4($a0)
end;
procedure TPORTE_LATE.setLATE0(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,1
  sw      $v1,($a0)
end;
function  TPORTE_LATE.getLATE0 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,1
end;
procedure TPORTE_LATE.setLATE1; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,8($a0)
end;
procedure TPORTE_LATE.clearLATE1; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,4($a0)
end;
procedure TPORTE_LATE.setLATE1(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,1,1
  sw      $v1,($a0)
end;
function  TPORTE_LATE.getLATE1 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,1,1
end;
procedure TPORTE_LATE.setLATE2; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,8($a0)
end;
procedure TPORTE_LATE.clearLATE2; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,4($a0)
end;
procedure TPORTE_LATE.setLATE2(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,2,1
  sw      $v1,($a0)
end;
function  TPORTE_LATE.getLATE2 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,2,1
end;
procedure TPORTE_LATE.setLATE3; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,8($a0)
end;
procedure TPORTE_LATE.clearLATE3; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,4($a0)
end;
procedure TPORTE_LATE.setLATE3(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,3,1
  sw      $v1,($a0)
end;
function  TPORTE_LATE.getLATE3 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,3,1
end;
procedure TPORTE_LATE.setLATE4; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,8($a0)
end;
procedure TPORTE_LATE.clearLATE4; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,4($a0)
end;
procedure TPORTE_LATE.setLATE4(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,4,1
  sw      $v1,($a0)
end;
function  TPORTE_LATE.getLATE4 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,4,1
end;
procedure TPORTE_LATE.setLATE5; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,8($a0)
end;
procedure TPORTE_LATE.clearLATE5; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,4($a0)
end;
procedure TPORTE_LATE.setLATE5(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,5,1
  sw      $v1,($a0)
end;
function  TPORTE_LATE.getLATE5 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,5,1
end;
procedure TPORTE_LATE.setLATE6; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,8($a0)
end;
procedure TPORTE_LATE.clearLATE6; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,4($a0)
end;
procedure TPORTE_LATE.setLATE6(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,6,1
  sw      $v1,($a0)
end;
function  TPORTE_LATE.getLATE6 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,6,1
end;
procedure TPORTE_LATE.setLATE7; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,8($a0)
end;
procedure TPORTE_LATE.clearLATE7; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,4($a0)
end;
procedure TPORTE_LATE.setLATE7(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,7,1
  sw      $v1,($a0)
end;
function  TPORTE_LATE.getLATE7 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,7,1
end;
procedure TPORTE_LATE.setLATE8; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,8($a0)
end;
procedure TPORTE_LATE.clearLATE8; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,4($a0)
end;
procedure TPORTE_LATE.setLATE8(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,8,1
  sw      $v1,($a0)
end;
function  TPORTE_LATE.getLATE8 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,8,1
end;
procedure TPORTE_LATE.setLATE9; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,512
  sw $a1,8($a0)
end;
procedure TPORTE_LATE.clearLATE9; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,512
  sw $a1,4($a0)
end;
procedure TPORTE_LATE.setLATE9(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,9,1
  sw      $v1,($a0)
end;
function  TPORTE_LATE.getLATE9 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,9,1
end;
procedure TPORTE_LATE.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TPORTE_LATE.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TPORTE_ODCE.setODCE0; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,8($a0)
end;
procedure TPORTE_ODCE.clearODCE0; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,4($a0)
end;
procedure TPORTE_ODCE.setODCE0(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,1
  sw      $v1,($a0)
end;
function  TPORTE_ODCE.getODCE0 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,1
end;
procedure TPORTE_ODCE.setODCE1; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,8($a0)
end;
procedure TPORTE_ODCE.clearODCE1; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,4($a0)
end;
procedure TPORTE_ODCE.setODCE1(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,1,1
  sw      $v1,($a0)
end;
function  TPORTE_ODCE.getODCE1 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,1,1
end;
procedure TPORTE_ODCE.setODCE2; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,8($a0)
end;
procedure TPORTE_ODCE.clearODCE2; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,4($a0)
end;
procedure TPORTE_ODCE.setODCE2(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,2,1
  sw      $v1,($a0)
end;
function  TPORTE_ODCE.getODCE2 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,2,1
end;
procedure TPORTE_ODCE.setODCE3; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,8($a0)
end;
procedure TPORTE_ODCE.clearODCE3; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,4($a0)
end;
procedure TPORTE_ODCE.setODCE3(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,3,1
  sw      $v1,($a0)
end;
function  TPORTE_ODCE.getODCE3 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,3,1
end;
procedure TPORTE_ODCE.setODCE4; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,8($a0)
end;
procedure TPORTE_ODCE.clearODCE4; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,4($a0)
end;
procedure TPORTE_ODCE.setODCE4(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,4,1
  sw      $v1,($a0)
end;
function  TPORTE_ODCE.getODCE4 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,4,1
end;
procedure TPORTE_ODCE.setODCE5; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,8($a0)
end;
procedure TPORTE_ODCE.clearODCE5; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,4($a0)
end;
procedure TPORTE_ODCE.setODCE5(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,5,1
  sw      $v1,($a0)
end;
function  TPORTE_ODCE.getODCE5 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,5,1
end;
procedure TPORTE_ODCE.setODCE6; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,8($a0)
end;
procedure TPORTE_ODCE.clearODCE6; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,4($a0)
end;
procedure TPORTE_ODCE.setODCE6(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,6,1
  sw      $v1,($a0)
end;
function  TPORTE_ODCE.getODCE6 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,6,1
end;
procedure TPORTE_ODCE.setODCE7; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,8($a0)
end;
procedure TPORTE_ODCE.clearODCE7; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,4($a0)
end;
procedure TPORTE_ODCE.setODCE7(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,7,1
  sw      $v1,($a0)
end;
function  TPORTE_ODCE.getODCE7 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,7,1
end;
procedure TPORTE_ODCE.setODCE8; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,8($a0)
end;
procedure TPORTE_ODCE.clearODCE8; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,4($a0)
end;
procedure TPORTE_ODCE.setODCE8(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,8,1
  sw      $v1,($a0)
end;
function  TPORTE_ODCE.getODCE8 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,8,1
end;
procedure TPORTE_ODCE.setODCE9; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,512
  sw $a1,8($a0)
end;
procedure TPORTE_ODCE.clearODCE9; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,512
  sw $a1,4($a0)
end;
procedure TPORTE_ODCE.setODCE9(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,9,1
  sw      $v1,($a0)
end;
function  TPORTE_ODCE.getODCE9 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,9,1
end;
procedure TPORTE_ODCE.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TPORTE_ODCE.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TPORTF_TRISF.setTRISF0; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,8($a0)
end;
procedure TPORTF_TRISF.clearTRISF0; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,4($a0)
end;
procedure TPORTF_TRISF.setTRISF0(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,1
  sw      $v1,($a0)
end;
function  TPORTF_TRISF.getTRISF0 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,1
end;
procedure TPORTF_TRISF.setTRISF1; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,8($a0)
end;
procedure TPORTF_TRISF.clearTRISF1; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,4($a0)
end;
procedure TPORTF_TRISF.setTRISF1(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,1,1
  sw      $v1,($a0)
end;
function  TPORTF_TRISF.getTRISF1 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,1,1
end;
procedure TPORTF_TRISF.setTRISF2; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,8($a0)
end;
procedure TPORTF_TRISF.clearTRISF2; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,4($a0)
end;
procedure TPORTF_TRISF.setTRISF2(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,2,1
  sw      $v1,($a0)
end;
function  TPORTF_TRISF.getTRISF2 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,2,1
end;
procedure TPORTF_TRISF.setTRISF3; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,8($a0)
end;
procedure TPORTF_TRISF.clearTRISF3; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,4($a0)
end;
procedure TPORTF_TRISF.setTRISF3(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,3,1
  sw      $v1,($a0)
end;
function  TPORTF_TRISF.getTRISF3 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,3,1
end;
procedure TPORTF_TRISF.setTRISF4; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,8($a0)
end;
procedure TPORTF_TRISF.clearTRISF4; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,4($a0)
end;
procedure TPORTF_TRISF.setTRISF4(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,4,1
  sw      $v1,($a0)
end;
function  TPORTF_TRISF.getTRISF4 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,4,1
end;
procedure TPORTF_TRISF.setTRISF5; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,8($a0)
end;
procedure TPORTF_TRISF.clearTRISF5; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,4($a0)
end;
procedure TPORTF_TRISF.setTRISF5(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,5,1
  sw      $v1,($a0)
end;
function  TPORTF_TRISF.getTRISF5 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,5,1
end;
procedure TPORTF_TRISF.setTRISF8; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,8($a0)
end;
procedure TPORTF_TRISF.clearTRISF8; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,4($a0)
end;
procedure TPORTF_TRISF.setTRISF8(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,8,1
  sw      $v1,($a0)
end;
function  TPORTF_TRISF.getTRISF8 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,8,1
end;
procedure TPORTF_TRISF.setTRISF12; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4096
  sw $a1,8($a0)
end;
procedure TPORTF_TRISF.clearTRISF12; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4096
  sw $a1,4($a0)
end;
procedure TPORTF_TRISF.setTRISF12(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,12,1
  sw      $v1,($a0)
end;
function  TPORTF_TRISF.getTRISF12 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,12,1
end;
procedure TPORTF_TRISF.setTRISF13; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,8($a0)
end;
procedure TPORTF_TRISF.clearTRISF13; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,4($a0)
end;
procedure TPORTF_TRISF.setTRISF13(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,13,1
  sw      $v1,($a0)
end;
function  TPORTF_TRISF.getTRISF13 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,13,1
end;
procedure TPORTF_TRISF.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TPORTF_TRISF.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TPORTF_PORTF.setRF0; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,8($a0)
end;
procedure TPORTF_PORTF.clearRF0; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,4($a0)
end;
procedure TPORTF_PORTF.setRF0(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,1
  sw      $v1,($a0)
end;
function  TPORTF_PORTF.getRF0 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,1
end;
procedure TPORTF_PORTF.setRF1; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,8($a0)
end;
procedure TPORTF_PORTF.clearRF1; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,4($a0)
end;
procedure TPORTF_PORTF.setRF1(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,1,1
  sw      $v1,($a0)
end;
function  TPORTF_PORTF.getRF1 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,1,1
end;
procedure TPORTF_PORTF.setRF2; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,8($a0)
end;
procedure TPORTF_PORTF.clearRF2; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,4($a0)
end;
procedure TPORTF_PORTF.setRF2(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,2,1
  sw      $v1,($a0)
end;
function  TPORTF_PORTF.getRF2 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,2,1
end;
procedure TPORTF_PORTF.setRF3; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,8($a0)
end;
procedure TPORTF_PORTF.clearRF3; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,4($a0)
end;
procedure TPORTF_PORTF.setRF3(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,3,1
  sw      $v1,($a0)
end;
function  TPORTF_PORTF.getRF3 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,3,1
end;
procedure TPORTF_PORTF.setRF4; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,8($a0)
end;
procedure TPORTF_PORTF.clearRF4; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,4($a0)
end;
procedure TPORTF_PORTF.setRF4(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,4,1
  sw      $v1,($a0)
end;
function  TPORTF_PORTF.getRF4 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,4,1
end;
procedure TPORTF_PORTF.setRF5; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,8($a0)
end;
procedure TPORTF_PORTF.clearRF5; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,4($a0)
end;
procedure TPORTF_PORTF.setRF5(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,5,1
  sw      $v1,($a0)
end;
function  TPORTF_PORTF.getRF5 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,5,1
end;
procedure TPORTF_PORTF.setRF8; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,8($a0)
end;
procedure TPORTF_PORTF.clearRF8; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,4($a0)
end;
procedure TPORTF_PORTF.setRF8(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,8,1
  sw      $v1,($a0)
end;
function  TPORTF_PORTF.getRF8 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,8,1
end;
procedure TPORTF_PORTF.setRF12; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4096
  sw $a1,8($a0)
end;
procedure TPORTF_PORTF.clearRF12; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4096
  sw $a1,4($a0)
end;
procedure TPORTF_PORTF.setRF12(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,12,1
  sw      $v1,($a0)
end;
function  TPORTF_PORTF.getRF12 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,12,1
end;
procedure TPORTF_PORTF.setRF13; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,8($a0)
end;
procedure TPORTF_PORTF.clearRF13; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,4($a0)
end;
procedure TPORTF_PORTF.setRF13(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,13,1
  sw      $v1,($a0)
end;
function  TPORTF_PORTF.getRF13 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,13,1
end;
procedure TPORTF_PORTF.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TPORTF_PORTF.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TPORTF_LATF.setLATF0; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,8($a0)
end;
procedure TPORTF_LATF.clearLATF0; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,4($a0)
end;
procedure TPORTF_LATF.setLATF0(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,1
  sw      $v1,($a0)
end;
function  TPORTF_LATF.getLATF0 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,1
end;
procedure TPORTF_LATF.setLATF1; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,8($a0)
end;
procedure TPORTF_LATF.clearLATF1; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,4($a0)
end;
procedure TPORTF_LATF.setLATF1(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,1,1
  sw      $v1,($a0)
end;
function  TPORTF_LATF.getLATF1 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,1,1
end;
procedure TPORTF_LATF.setLATF2; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,8($a0)
end;
procedure TPORTF_LATF.clearLATF2; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,4($a0)
end;
procedure TPORTF_LATF.setLATF2(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,2,1
  sw      $v1,($a0)
end;
function  TPORTF_LATF.getLATF2 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,2,1
end;
procedure TPORTF_LATF.setLATF3; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,8($a0)
end;
procedure TPORTF_LATF.clearLATF3; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,4($a0)
end;
procedure TPORTF_LATF.setLATF3(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,3,1
  sw      $v1,($a0)
end;
function  TPORTF_LATF.getLATF3 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,3,1
end;
procedure TPORTF_LATF.setLATF4; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,8($a0)
end;
procedure TPORTF_LATF.clearLATF4; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,4($a0)
end;
procedure TPORTF_LATF.setLATF4(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,4,1
  sw      $v1,($a0)
end;
function  TPORTF_LATF.getLATF4 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,4,1
end;
procedure TPORTF_LATF.setLATF5; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,8($a0)
end;
procedure TPORTF_LATF.clearLATF5; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,4($a0)
end;
procedure TPORTF_LATF.setLATF5(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,5,1
  sw      $v1,($a0)
end;
function  TPORTF_LATF.getLATF5 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,5,1
end;
procedure TPORTF_LATF.setLATF8; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,8($a0)
end;
procedure TPORTF_LATF.clearLATF8; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,4($a0)
end;
procedure TPORTF_LATF.setLATF8(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,8,1
  sw      $v1,($a0)
end;
function  TPORTF_LATF.getLATF8 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,8,1
end;
procedure TPORTF_LATF.setLATF12; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4096
  sw $a1,8($a0)
end;
procedure TPORTF_LATF.clearLATF12; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4096
  sw $a1,4($a0)
end;
procedure TPORTF_LATF.setLATF12(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,12,1
  sw      $v1,($a0)
end;
function  TPORTF_LATF.getLATF12 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,12,1
end;
procedure TPORTF_LATF.setLATF13; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,8($a0)
end;
procedure TPORTF_LATF.clearLATF13; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,4($a0)
end;
procedure TPORTF_LATF.setLATF13(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,13,1
  sw      $v1,($a0)
end;
function  TPORTF_LATF.getLATF13 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,13,1
end;
procedure TPORTF_LATF.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TPORTF_LATF.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TPORTF_ODCF.setODCF0; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,8($a0)
end;
procedure TPORTF_ODCF.clearODCF0; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,4($a0)
end;
procedure TPORTF_ODCF.setODCF0(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,1
  sw      $v1,($a0)
end;
function  TPORTF_ODCF.getODCF0 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,1
end;
procedure TPORTF_ODCF.setODCF1; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,8($a0)
end;
procedure TPORTF_ODCF.clearODCF1; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,4($a0)
end;
procedure TPORTF_ODCF.setODCF1(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,1,1
  sw      $v1,($a0)
end;
function  TPORTF_ODCF.getODCF1 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,1,1
end;
procedure TPORTF_ODCF.setODCF2; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,8($a0)
end;
procedure TPORTF_ODCF.clearODCF2; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,4($a0)
end;
procedure TPORTF_ODCF.setODCF2(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,2,1
  sw      $v1,($a0)
end;
function  TPORTF_ODCF.getODCF2 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,2,1
end;
procedure TPORTF_ODCF.setODCF3; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,8($a0)
end;
procedure TPORTF_ODCF.clearODCF3; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,4($a0)
end;
procedure TPORTF_ODCF.setODCF3(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,3,1
  sw      $v1,($a0)
end;
function  TPORTF_ODCF.getODCF3 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,3,1
end;
procedure TPORTF_ODCF.setODCF4; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,8($a0)
end;
procedure TPORTF_ODCF.clearODCF4; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,4($a0)
end;
procedure TPORTF_ODCF.setODCF4(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,4,1
  sw      $v1,($a0)
end;
function  TPORTF_ODCF.getODCF4 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,4,1
end;
procedure TPORTF_ODCF.setODCF5; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,8($a0)
end;
procedure TPORTF_ODCF.clearODCF5; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,4($a0)
end;
procedure TPORTF_ODCF.setODCF5(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,5,1
  sw      $v1,($a0)
end;
function  TPORTF_ODCF.getODCF5 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,5,1
end;
procedure TPORTF_ODCF.setODCF8; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,8($a0)
end;
procedure TPORTF_ODCF.clearODCF8; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,4($a0)
end;
procedure TPORTF_ODCF.setODCF8(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,8,1
  sw      $v1,($a0)
end;
function  TPORTF_ODCF.getODCF8 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,8,1
end;
procedure TPORTF_ODCF.setODCF12; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4096
  sw $a1,8($a0)
end;
procedure TPORTF_ODCF.clearODCF12; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4096
  sw $a1,4($a0)
end;
procedure TPORTF_ODCF.setODCF12(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,12,1
  sw      $v1,($a0)
end;
function  TPORTF_ODCF.getODCF12 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,12,1
end;
procedure TPORTF_ODCF.setODCF13; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,8($a0)
end;
procedure TPORTF_ODCF.clearODCF13; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,4($a0)
end;
procedure TPORTF_ODCF.setODCF13(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,13,1
  sw      $v1,($a0)
end;
function  TPORTF_ODCF.getODCF13 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,13,1
end;
procedure TPORTF_ODCF.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TPORTF_ODCF.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TPORTG_TRISG.setTRISG0; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,8($a0)
end;
procedure TPORTG_TRISG.clearTRISG0; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,4($a0)
end;
procedure TPORTG_TRISG.setTRISG0(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,1
  sw      $v1,($a0)
end;
function  TPORTG_TRISG.getTRISG0 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,1
end;
procedure TPORTG_TRISG.setTRISG1; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,8($a0)
end;
procedure TPORTG_TRISG.clearTRISG1; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,4($a0)
end;
procedure TPORTG_TRISG.setTRISG1(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,1,1
  sw      $v1,($a0)
end;
function  TPORTG_TRISG.getTRISG1 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,1,1
end;
procedure TPORTG_TRISG.setTRISG2; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,8($a0)
end;
procedure TPORTG_TRISG.clearTRISG2; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,4($a0)
end;
procedure TPORTG_TRISG.setTRISG2(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,2,1
  sw      $v1,($a0)
end;
function  TPORTG_TRISG.getTRISG2 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,2,1
end;
procedure TPORTG_TRISG.setTRISG3; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,8($a0)
end;
procedure TPORTG_TRISG.clearTRISG3; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,4($a0)
end;
procedure TPORTG_TRISG.setTRISG3(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,3,1
  sw      $v1,($a0)
end;
function  TPORTG_TRISG.getTRISG3 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,3,1
end;
procedure TPORTG_TRISG.setTRISG6; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,8($a0)
end;
procedure TPORTG_TRISG.clearTRISG6; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,4($a0)
end;
procedure TPORTG_TRISG.setTRISG6(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,6,1
  sw      $v1,($a0)
end;
function  TPORTG_TRISG.getTRISG6 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,6,1
end;
procedure TPORTG_TRISG.setTRISG7; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,8($a0)
end;
procedure TPORTG_TRISG.clearTRISG7; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,4($a0)
end;
procedure TPORTG_TRISG.setTRISG7(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,7,1
  sw      $v1,($a0)
end;
function  TPORTG_TRISG.getTRISG7 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,7,1
end;
procedure TPORTG_TRISG.setTRISG8; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,8($a0)
end;
procedure TPORTG_TRISG.clearTRISG8; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,4($a0)
end;
procedure TPORTG_TRISG.setTRISG8(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,8,1
  sw      $v1,($a0)
end;
function  TPORTG_TRISG.getTRISG8 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,8,1
end;
procedure TPORTG_TRISG.setTRISG9; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,512
  sw $a1,8($a0)
end;
procedure TPORTG_TRISG.clearTRISG9; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,512
  sw $a1,4($a0)
end;
procedure TPORTG_TRISG.setTRISG9(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,9,1
  sw      $v1,($a0)
end;
function  TPORTG_TRISG.getTRISG9 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,9,1
end;
procedure TPORTG_TRISG.setTRISG12; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4096
  sw $a1,8($a0)
end;
procedure TPORTG_TRISG.clearTRISG12; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4096
  sw $a1,4($a0)
end;
procedure TPORTG_TRISG.setTRISG12(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,12,1
  sw      $v1,($a0)
end;
function  TPORTG_TRISG.getTRISG12 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,12,1
end;
procedure TPORTG_TRISG.setTRISG13; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,8($a0)
end;
procedure TPORTG_TRISG.clearTRISG13; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,4($a0)
end;
procedure TPORTG_TRISG.setTRISG13(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,13,1
  sw      $v1,($a0)
end;
function  TPORTG_TRISG.getTRISG13 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,13,1
end;
procedure TPORTG_TRISG.setTRISG14; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16384
  sw $a1,8($a0)
end;
procedure TPORTG_TRISG.clearTRISG14; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16384
  sw $a1,4($a0)
end;
procedure TPORTG_TRISG.setTRISG14(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,14,1
  sw      $v1,($a0)
end;
function  TPORTG_TRISG.getTRISG14 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,14,1
end;
procedure TPORTG_TRISG.setTRISG15; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,8($a0)
end;
procedure TPORTG_TRISG.clearTRISG15; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,4($a0)
end;
procedure TPORTG_TRISG.setTRISG15(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,15,1
  sw      $v1,($a0)
end;
function  TPORTG_TRISG.getTRISG15 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,15,1
end;
procedure TPORTG_TRISG.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TPORTG_TRISG.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TPORTG_PORTG.setRG0; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,8($a0)
end;
procedure TPORTG_PORTG.clearRG0; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,4($a0)
end;
procedure TPORTG_PORTG.setRG0(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,1
  sw      $v1,($a0)
end;
function  TPORTG_PORTG.getRG0 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,1
end;
procedure TPORTG_PORTG.setRG1; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,8($a0)
end;
procedure TPORTG_PORTG.clearRG1; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,4($a0)
end;
procedure TPORTG_PORTG.setRG1(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,1,1
  sw      $v1,($a0)
end;
function  TPORTG_PORTG.getRG1 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,1,1
end;
procedure TPORTG_PORTG.setRG2; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,8($a0)
end;
procedure TPORTG_PORTG.clearRG2; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,4($a0)
end;
procedure TPORTG_PORTG.setRG2(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,2,1
  sw      $v1,($a0)
end;
function  TPORTG_PORTG.getRG2 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,2,1
end;
procedure TPORTG_PORTG.setRG3; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,8($a0)
end;
procedure TPORTG_PORTG.clearRG3; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,4($a0)
end;
procedure TPORTG_PORTG.setRG3(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,3,1
  sw      $v1,($a0)
end;
function  TPORTG_PORTG.getRG3 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,3,1
end;
procedure TPORTG_PORTG.setRG6; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,8($a0)
end;
procedure TPORTG_PORTG.clearRG6; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,4($a0)
end;
procedure TPORTG_PORTG.setRG6(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,6,1
  sw      $v1,($a0)
end;
function  TPORTG_PORTG.getRG6 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,6,1
end;
procedure TPORTG_PORTG.setRG7; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,8($a0)
end;
procedure TPORTG_PORTG.clearRG7; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,4($a0)
end;
procedure TPORTG_PORTG.setRG7(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,7,1
  sw      $v1,($a0)
end;
function  TPORTG_PORTG.getRG7 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,7,1
end;
procedure TPORTG_PORTG.setRG8; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,8($a0)
end;
procedure TPORTG_PORTG.clearRG8; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,4($a0)
end;
procedure TPORTG_PORTG.setRG8(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,8,1
  sw      $v1,($a0)
end;
function  TPORTG_PORTG.getRG8 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,8,1
end;
procedure TPORTG_PORTG.setRG9; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,512
  sw $a1,8($a0)
end;
procedure TPORTG_PORTG.clearRG9; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,512
  sw $a1,4($a0)
end;
procedure TPORTG_PORTG.setRG9(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,9,1
  sw      $v1,($a0)
end;
function  TPORTG_PORTG.getRG9 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,9,1
end;
procedure TPORTG_PORTG.setRG12; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4096
  sw $a1,8($a0)
end;
procedure TPORTG_PORTG.clearRG12; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4096
  sw $a1,4($a0)
end;
procedure TPORTG_PORTG.setRG12(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,12,1
  sw      $v1,($a0)
end;
function  TPORTG_PORTG.getRG12 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,12,1
end;
procedure TPORTG_PORTG.setRG13; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,8($a0)
end;
procedure TPORTG_PORTG.clearRG13; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,4($a0)
end;
procedure TPORTG_PORTG.setRG13(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,13,1
  sw      $v1,($a0)
end;
function  TPORTG_PORTG.getRG13 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,13,1
end;
procedure TPORTG_PORTG.setRG14; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16384
  sw $a1,8($a0)
end;
procedure TPORTG_PORTG.clearRG14; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16384
  sw $a1,4($a0)
end;
procedure TPORTG_PORTG.setRG14(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,14,1
  sw      $v1,($a0)
end;
function  TPORTG_PORTG.getRG14 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,14,1
end;
procedure TPORTG_PORTG.setRG15; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,8($a0)
end;
procedure TPORTG_PORTG.clearRG15; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,4($a0)
end;
procedure TPORTG_PORTG.setRG15(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,15,1
  sw      $v1,($a0)
end;
function  TPORTG_PORTG.getRG15 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,15,1
end;
procedure TPORTG_PORTG.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TPORTG_PORTG.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TPORTG_LATG.setLATG0; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,8($a0)
end;
procedure TPORTG_LATG.clearLATG0; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,4($a0)
end;
procedure TPORTG_LATG.setLATG0(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,1
  sw      $v1,($a0)
end;
function  TPORTG_LATG.getLATG0 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,1
end;
procedure TPORTG_LATG.setLATG1; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,8($a0)
end;
procedure TPORTG_LATG.clearLATG1; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,4($a0)
end;
procedure TPORTG_LATG.setLATG1(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,1,1
  sw      $v1,($a0)
end;
function  TPORTG_LATG.getLATG1 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,1,1
end;
procedure TPORTG_LATG.setLATG2; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,8($a0)
end;
procedure TPORTG_LATG.clearLATG2; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,4($a0)
end;
procedure TPORTG_LATG.setLATG2(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,2,1
  sw      $v1,($a0)
end;
function  TPORTG_LATG.getLATG2 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,2,1
end;
procedure TPORTG_LATG.setLATG3; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,8($a0)
end;
procedure TPORTG_LATG.clearLATG3; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,4($a0)
end;
procedure TPORTG_LATG.setLATG3(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,3,1
  sw      $v1,($a0)
end;
function  TPORTG_LATG.getLATG3 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,3,1
end;
procedure TPORTG_LATG.setLATG6; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,8($a0)
end;
procedure TPORTG_LATG.clearLATG6; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,4($a0)
end;
procedure TPORTG_LATG.setLATG6(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,6,1
  sw      $v1,($a0)
end;
function  TPORTG_LATG.getLATG6 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,6,1
end;
procedure TPORTG_LATG.setLATG7; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,8($a0)
end;
procedure TPORTG_LATG.clearLATG7; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,4($a0)
end;
procedure TPORTG_LATG.setLATG7(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,7,1
  sw      $v1,($a0)
end;
function  TPORTG_LATG.getLATG7 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,7,1
end;
procedure TPORTG_LATG.setLATG8; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,8($a0)
end;
procedure TPORTG_LATG.clearLATG8; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,4($a0)
end;
procedure TPORTG_LATG.setLATG8(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,8,1
  sw      $v1,($a0)
end;
function  TPORTG_LATG.getLATG8 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,8,1
end;
procedure TPORTG_LATG.setLATG9; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,512
  sw $a1,8($a0)
end;
procedure TPORTG_LATG.clearLATG9; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,512
  sw $a1,4($a0)
end;
procedure TPORTG_LATG.setLATG9(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,9,1
  sw      $v1,($a0)
end;
function  TPORTG_LATG.getLATG9 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,9,1
end;
procedure TPORTG_LATG.setLATG12; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4096
  sw $a1,8($a0)
end;
procedure TPORTG_LATG.clearLATG12; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4096
  sw $a1,4($a0)
end;
procedure TPORTG_LATG.setLATG12(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,12,1
  sw      $v1,($a0)
end;
function  TPORTG_LATG.getLATG12 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,12,1
end;
procedure TPORTG_LATG.setLATG13; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,8($a0)
end;
procedure TPORTG_LATG.clearLATG13; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,4($a0)
end;
procedure TPORTG_LATG.setLATG13(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,13,1
  sw      $v1,($a0)
end;
function  TPORTG_LATG.getLATG13 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,13,1
end;
procedure TPORTG_LATG.setLATG14; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16384
  sw $a1,8($a0)
end;
procedure TPORTG_LATG.clearLATG14; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16384
  sw $a1,4($a0)
end;
procedure TPORTG_LATG.setLATG14(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,14,1
  sw      $v1,($a0)
end;
function  TPORTG_LATG.getLATG14 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,14,1
end;
procedure TPORTG_LATG.setLATG15; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,8($a0)
end;
procedure TPORTG_LATG.clearLATG15; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,4($a0)
end;
procedure TPORTG_LATG.setLATG15(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,15,1
  sw      $v1,($a0)
end;
function  TPORTG_LATG.getLATG15 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,15,1
end;
procedure TPORTG_LATG.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TPORTG_LATG.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TPORTG_ODCG.setODCG0; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,8($a0)
end;
procedure TPORTG_ODCG.clearODCG0; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,4($a0)
end;
procedure TPORTG_ODCG.setODCG0(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,1
  sw      $v1,($a0)
end;
function  TPORTG_ODCG.getODCG0 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,1
end;
procedure TPORTG_ODCG.setODCG1; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,8($a0)
end;
procedure TPORTG_ODCG.clearODCG1; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,4($a0)
end;
procedure TPORTG_ODCG.setODCG1(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,1,1
  sw      $v1,($a0)
end;
function  TPORTG_ODCG.getODCG1 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,1,1
end;
procedure TPORTG_ODCG.setODCG2; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,8($a0)
end;
procedure TPORTG_ODCG.clearODCG2; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,4($a0)
end;
procedure TPORTG_ODCG.setODCG2(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,2,1
  sw      $v1,($a0)
end;
function  TPORTG_ODCG.getODCG2 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,2,1
end;
procedure TPORTG_ODCG.setODCG3; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,8($a0)
end;
procedure TPORTG_ODCG.clearODCG3; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,4($a0)
end;
procedure TPORTG_ODCG.setODCG3(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,3,1
  sw      $v1,($a0)
end;
function  TPORTG_ODCG.getODCG3 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,3,1
end;
procedure TPORTG_ODCG.setODCG6; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,8($a0)
end;
procedure TPORTG_ODCG.clearODCG6; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,4($a0)
end;
procedure TPORTG_ODCG.setODCG6(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,6,1
  sw      $v1,($a0)
end;
function  TPORTG_ODCG.getODCG6 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,6,1
end;
procedure TPORTG_ODCG.setODCG7; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,8($a0)
end;
procedure TPORTG_ODCG.clearODCG7; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,4($a0)
end;
procedure TPORTG_ODCG.setODCG7(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,7,1
  sw      $v1,($a0)
end;
function  TPORTG_ODCG.getODCG7 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,7,1
end;
procedure TPORTG_ODCG.setODCG8; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,8($a0)
end;
procedure TPORTG_ODCG.clearODCG8; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,4($a0)
end;
procedure TPORTG_ODCG.setODCG8(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,8,1
  sw      $v1,($a0)
end;
function  TPORTG_ODCG.getODCG8 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,8,1
end;
procedure TPORTG_ODCG.setODCG9; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,512
  sw $a1,8($a0)
end;
procedure TPORTG_ODCG.clearODCG9; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,512
  sw $a1,4($a0)
end;
procedure TPORTG_ODCG.setODCG9(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,9,1
  sw      $v1,($a0)
end;
function  TPORTG_ODCG.getODCG9 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,9,1
end;
procedure TPORTG_ODCG.setODCG12; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4096
  sw $a1,8($a0)
end;
procedure TPORTG_ODCG.clearODCG12; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4096
  sw $a1,4($a0)
end;
procedure TPORTG_ODCG.setODCG12(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,12,1
  sw      $v1,($a0)
end;
function  TPORTG_ODCG.getODCG12 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,12,1
end;
procedure TPORTG_ODCG.setODCG13; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,8($a0)
end;
procedure TPORTG_ODCG.clearODCG13; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,4($a0)
end;
procedure TPORTG_ODCG.setODCG13(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,13,1
  sw      $v1,($a0)
end;
function  TPORTG_ODCG.getODCG13 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,13,1
end;
procedure TPORTG_ODCG.setODCG14; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16384
  sw $a1,8($a0)
end;
procedure TPORTG_ODCG.clearODCG14; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16384
  sw $a1,4($a0)
end;
procedure TPORTG_ODCG.setODCG14(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,14,1
  sw      $v1,($a0)
end;
function  TPORTG_ODCG.getODCG14 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,14,1
end;
procedure TPORTG_ODCG.setODCG15; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,8($a0)
end;
procedure TPORTG_ODCG.clearODCG15; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,4($a0)
end;
procedure TPORTG_ODCG.setODCG15(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,15,1
  sw      $v1,($a0)
end;
function  TPORTG_ODCG.getODCG15 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,15,1
end;
procedure TPORTG_ODCG.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TPORTG_ODCG.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TPORTG_CNCON.setSIDL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,8($a0)
end;
procedure TPORTG_CNCON.clearSIDL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,4($a0)
end;
procedure TPORTG_CNCON.setSIDL(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,13,1
  sw      $v1,($a0)
end;
function  TPORTG_CNCON.getSIDL : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,13,1
end;
procedure TPORTG_CNCON.setON; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,8($a0)
end;
procedure TPORTG_CNCON.clearON; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,4($a0)
end;
procedure TPORTG_CNCON.setON(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,15,1
  sw      $v1,($a0)
end;
function  TPORTG_CNCON.getON : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,15,1
end;
procedure TPORTG_CNCON.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TPORTG_CNCON.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TPORTG_CNEN.setCNEN0; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,8($a0)
end;
procedure TPORTG_CNEN.clearCNEN0; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,4($a0)
end;
procedure TPORTG_CNEN.setCNEN0(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,1
  sw      $v1,($a0)
end;
function  TPORTG_CNEN.getCNEN0 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,1
end;
procedure TPORTG_CNEN.setCNEN1; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,8($a0)
end;
procedure TPORTG_CNEN.clearCNEN1; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,4($a0)
end;
procedure TPORTG_CNEN.setCNEN1(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,1,1
  sw      $v1,($a0)
end;
function  TPORTG_CNEN.getCNEN1 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,1,1
end;
procedure TPORTG_CNEN.setCNEN2; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,8($a0)
end;
procedure TPORTG_CNEN.clearCNEN2; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,4($a0)
end;
procedure TPORTG_CNEN.setCNEN2(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,2,1
  sw      $v1,($a0)
end;
function  TPORTG_CNEN.getCNEN2 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,2,1
end;
procedure TPORTG_CNEN.setCNEN3; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,8($a0)
end;
procedure TPORTG_CNEN.clearCNEN3; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,4($a0)
end;
procedure TPORTG_CNEN.setCNEN3(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,3,1
  sw      $v1,($a0)
end;
function  TPORTG_CNEN.getCNEN3 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,3,1
end;
procedure TPORTG_CNEN.setCNEN4; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,8($a0)
end;
procedure TPORTG_CNEN.clearCNEN4; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,4($a0)
end;
procedure TPORTG_CNEN.setCNEN4(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,4,1
  sw      $v1,($a0)
end;
function  TPORTG_CNEN.getCNEN4 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,4,1
end;
procedure TPORTG_CNEN.setCNEN5; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,8($a0)
end;
procedure TPORTG_CNEN.clearCNEN5; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,4($a0)
end;
procedure TPORTG_CNEN.setCNEN5(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,5,1
  sw      $v1,($a0)
end;
function  TPORTG_CNEN.getCNEN5 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,5,1
end;
procedure TPORTG_CNEN.setCNEN6; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,8($a0)
end;
procedure TPORTG_CNEN.clearCNEN6; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,4($a0)
end;
procedure TPORTG_CNEN.setCNEN6(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,6,1
  sw      $v1,($a0)
end;
function  TPORTG_CNEN.getCNEN6 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,6,1
end;
procedure TPORTG_CNEN.setCNEN7; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,8($a0)
end;
procedure TPORTG_CNEN.clearCNEN7; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,4($a0)
end;
procedure TPORTG_CNEN.setCNEN7(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,7,1
  sw      $v1,($a0)
end;
function  TPORTG_CNEN.getCNEN7 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,7,1
end;
procedure TPORTG_CNEN.setCNEN8; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,8($a0)
end;
procedure TPORTG_CNEN.clearCNEN8; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,4($a0)
end;
procedure TPORTG_CNEN.setCNEN8(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,8,1
  sw      $v1,($a0)
end;
function  TPORTG_CNEN.getCNEN8 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,8,1
end;
procedure TPORTG_CNEN.setCNEN9; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,512
  sw $a1,8($a0)
end;
procedure TPORTG_CNEN.clearCNEN9; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,512
  sw $a1,4($a0)
end;
procedure TPORTG_CNEN.setCNEN9(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,9,1
  sw      $v1,($a0)
end;
function  TPORTG_CNEN.getCNEN9 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,9,1
end;
procedure TPORTG_CNEN.setCNEN10; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1024
  sw $a1,8($a0)
end;
procedure TPORTG_CNEN.clearCNEN10; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1024
  sw $a1,4($a0)
end;
procedure TPORTG_CNEN.setCNEN10(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,10,1
  sw      $v1,($a0)
end;
function  TPORTG_CNEN.getCNEN10 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,10,1
end;
procedure TPORTG_CNEN.setCNEN11; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2048
  sw $a1,8($a0)
end;
procedure TPORTG_CNEN.clearCNEN11; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2048
  sw $a1,4($a0)
end;
procedure TPORTG_CNEN.setCNEN11(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,11,1
  sw      $v1,($a0)
end;
function  TPORTG_CNEN.getCNEN11 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,11,1
end;
procedure TPORTG_CNEN.setCNEN12; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4096
  sw $a1,8($a0)
end;
procedure TPORTG_CNEN.clearCNEN12; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4096
  sw $a1,4($a0)
end;
procedure TPORTG_CNEN.setCNEN12(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,12,1
  sw      $v1,($a0)
end;
function  TPORTG_CNEN.getCNEN12 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,12,1
end;
procedure TPORTG_CNEN.setCNEN13; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,8($a0)
end;
procedure TPORTG_CNEN.clearCNEN13; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,4($a0)
end;
procedure TPORTG_CNEN.setCNEN13(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,13,1
  sw      $v1,($a0)
end;
function  TPORTG_CNEN.getCNEN13 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,13,1
end;
procedure TPORTG_CNEN.setCNEN14; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16384
  sw $a1,8($a0)
end;
procedure TPORTG_CNEN.clearCNEN14; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16384
  sw $a1,4($a0)
end;
procedure TPORTG_CNEN.setCNEN14(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,14,1
  sw      $v1,($a0)
end;
function  TPORTG_CNEN.getCNEN14 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,14,1
end;
procedure TPORTG_CNEN.setCNEN15; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,8($a0)
end;
procedure TPORTG_CNEN.clearCNEN15; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,4($a0)
end;
procedure TPORTG_CNEN.setCNEN15(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,15,1
  sw      $v1,($a0)
end;
function  TPORTG_CNEN.getCNEN15 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,15,1
end;
procedure TPORTG_CNEN.setCNEN16; assembler; nostackframe; inline;
asm
  lui     $a1,1
  sw $a1,8($a0)
end;
procedure TPORTG_CNEN.clearCNEN16; assembler; nostackframe; inline;
asm
  lui     $a1,1
  sw $a1,4($a0)
end;
procedure TPORTG_CNEN.setCNEN16(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,16,1
  sw      $v1,($a0)
end;
function  TPORTG_CNEN.getCNEN16 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,16,1
end;
procedure TPORTG_CNEN.setCNEN17; assembler; nostackframe; inline;
asm
  lui     $a1,2
  sw $a1,8($a0)
end;
procedure TPORTG_CNEN.clearCNEN17; assembler; nostackframe; inline;
asm
  lui     $a1,2
  sw $a1,4($a0)
end;
procedure TPORTG_CNEN.setCNEN17(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,17,1
  sw      $v1,($a0)
end;
function  TPORTG_CNEN.getCNEN17 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,17,1
end;
procedure TPORTG_CNEN.setCNEN18; assembler; nostackframe; inline;
asm
  lui     $a1,4
  sw $a1,8($a0)
end;
procedure TPORTG_CNEN.clearCNEN18; assembler; nostackframe; inline;
asm
  lui     $a1,4
  sw $a1,4($a0)
end;
procedure TPORTG_CNEN.setCNEN18(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,18,1
  sw      $v1,($a0)
end;
function  TPORTG_CNEN.getCNEN18 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,18,1
end;
procedure TPORTG_CNEN.setCNEN19; assembler; nostackframe; inline;
asm
  lui     $a1,8
  sw $a1,8($a0)
end;
procedure TPORTG_CNEN.clearCNEN19; assembler; nostackframe; inline;
asm
  lui     $a1,8
  sw $a1,4($a0)
end;
procedure TPORTG_CNEN.setCNEN19(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,19,1
  sw      $v1,($a0)
end;
function  TPORTG_CNEN.getCNEN19 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,19,1
end;
procedure TPORTG_CNEN.setCNEN20; assembler; nostackframe; inline;
asm
  lui     $a1,16
  sw $a1,8($a0)
end;
procedure TPORTG_CNEN.clearCNEN20; assembler; nostackframe; inline;
asm
  lui     $a1,16
  sw $a1,4($a0)
end;
procedure TPORTG_CNEN.setCNEN20(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,20,1
  sw      $v1,($a0)
end;
function  TPORTG_CNEN.getCNEN20 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,20,1
end;
procedure TPORTG_CNEN.setCNEN21; assembler; nostackframe; inline;
asm
  lui     $a1,32
  sw $a1,8($a0)
end;
procedure TPORTG_CNEN.clearCNEN21; assembler; nostackframe; inline;
asm
  lui     $a1,32
  sw $a1,4($a0)
end;
procedure TPORTG_CNEN.setCNEN21(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,21,1
  sw      $v1,($a0)
end;
function  TPORTG_CNEN.getCNEN21 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,21,1
end;
procedure TPORTG_CNEN.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TPORTG_CNEN.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TPORTG_CNPUE.setCNPUE0; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,8($a0)
end;
procedure TPORTG_CNPUE.clearCNPUE0; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,4($a0)
end;
procedure TPORTG_CNPUE.setCNPUE0(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,1
  sw      $v1,($a0)
end;
function  TPORTG_CNPUE.getCNPUE0 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,1
end;
procedure TPORTG_CNPUE.setCNPUE1; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,8($a0)
end;
procedure TPORTG_CNPUE.clearCNPUE1; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,4($a0)
end;
procedure TPORTG_CNPUE.setCNPUE1(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,1,1
  sw      $v1,($a0)
end;
function  TPORTG_CNPUE.getCNPUE1 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,1,1
end;
procedure TPORTG_CNPUE.setCNPUE2; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,8($a0)
end;
procedure TPORTG_CNPUE.clearCNPUE2; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,4($a0)
end;
procedure TPORTG_CNPUE.setCNPUE2(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,2,1
  sw      $v1,($a0)
end;
function  TPORTG_CNPUE.getCNPUE2 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,2,1
end;
procedure TPORTG_CNPUE.setCNPUE3; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,8($a0)
end;
procedure TPORTG_CNPUE.clearCNPUE3; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,4($a0)
end;
procedure TPORTG_CNPUE.setCNPUE3(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,3,1
  sw      $v1,($a0)
end;
function  TPORTG_CNPUE.getCNPUE3 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,3,1
end;
procedure TPORTG_CNPUE.setCNPUE4; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,8($a0)
end;
procedure TPORTG_CNPUE.clearCNPUE4; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,4($a0)
end;
procedure TPORTG_CNPUE.setCNPUE4(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,4,1
  sw      $v1,($a0)
end;
function  TPORTG_CNPUE.getCNPUE4 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,4,1
end;
procedure TPORTG_CNPUE.setCNPUE5; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,8($a0)
end;
procedure TPORTG_CNPUE.clearCNPUE5; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,4($a0)
end;
procedure TPORTG_CNPUE.setCNPUE5(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,5,1
  sw      $v1,($a0)
end;
function  TPORTG_CNPUE.getCNPUE5 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,5,1
end;
procedure TPORTG_CNPUE.setCNPUE6; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,8($a0)
end;
procedure TPORTG_CNPUE.clearCNPUE6; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,4($a0)
end;
procedure TPORTG_CNPUE.setCNPUE6(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,6,1
  sw      $v1,($a0)
end;
function  TPORTG_CNPUE.getCNPUE6 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,6,1
end;
procedure TPORTG_CNPUE.setCNPUE7; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,8($a0)
end;
procedure TPORTG_CNPUE.clearCNPUE7; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,4($a0)
end;
procedure TPORTG_CNPUE.setCNPUE7(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,7,1
  sw      $v1,($a0)
end;
function  TPORTG_CNPUE.getCNPUE7 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,7,1
end;
procedure TPORTG_CNPUE.setCNPUE8; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,8($a0)
end;
procedure TPORTG_CNPUE.clearCNPUE8; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,4($a0)
end;
procedure TPORTG_CNPUE.setCNPUE8(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,8,1
  sw      $v1,($a0)
end;
function  TPORTG_CNPUE.getCNPUE8 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,8,1
end;
procedure TPORTG_CNPUE.setCNPUE9; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,512
  sw $a1,8($a0)
end;
procedure TPORTG_CNPUE.clearCNPUE9; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,512
  sw $a1,4($a0)
end;
procedure TPORTG_CNPUE.setCNPUE9(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,9,1
  sw      $v1,($a0)
end;
function  TPORTG_CNPUE.getCNPUE9 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,9,1
end;
procedure TPORTG_CNPUE.setCNPUE10; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1024
  sw $a1,8($a0)
end;
procedure TPORTG_CNPUE.clearCNPUE10; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1024
  sw $a1,4($a0)
end;
procedure TPORTG_CNPUE.setCNPUE10(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,10,1
  sw      $v1,($a0)
end;
function  TPORTG_CNPUE.getCNPUE10 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,10,1
end;
procedure TPORTG_CNPUE.setCNPUE11; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2048
  sw $a1,8($a0)
end;
procedure TPORTG_CNPUE.clearCNPUE11; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2048
  sw $a1,4($a0)
end;
procedure TPORTG_CNPUE.setCNPUE11(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,11,1
  sw      $v1,($a0)
end;
function  TPORTG_CNPUE.getCNPUE11 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,11,1
end;
procedure TPORTG_CNPUE.setCNPUE12; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4096
  sw $a1,8($a0)
end;
procedure TPORTG_CNPUE.clearCNPUE12; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4096
  sw $a1,4($a0)
end;
procedure TPORTG_CNPUE.setCNPUE12(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,12,1
  sw      $v1,($a0)
end;
function  TPORTG_CNPUE.getCNPUE12 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,12,1
end;
procedure TPORTG_CNPUE.setCNPUE13; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,8($a0)
end;
procedure TPORTG_CNPUE.clearCNPUE13; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,4($a0)
end;
procedure TPORTG_CNPUE.setCNPUE13(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,13,1
  sw      $v1,($a0)
end;
function  TPORTG_CNPUE.getCNPUE13 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,13,1
end;
procedure TPORTG_CNPUE.setCNPUE14; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16384
  sw $a1,8($a0)
end;
procedure TPORTG_CNPUE.clearCNPUE14; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16384
  sw $a1,4($a0)
end;
procedure TPORTG_CNPUE.setCNPUE14(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,14,1
  sw      $v1,($a0)
end;
function  TPORTG_CNPUE.getCNPUE14 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,14,1
end;
procedure TPORTG_CNPUE.setCNPUE15; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,8($a0)
end;
procedure TPORTG_CNPUE.clearCNPUE15; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,4($a0)
end;
procedure TPORTG_CNPUE.setCNPUE15(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,15,1
  sw      $v1,($a0)
end;
function  TPORTG_CNPUE.getCNPUE15 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,15,1
end;
procedure TPORTG_CNPUE.setCNPUE16; assembler; nostackframe; inline;
asm
  lui     $a1,1
  sw $a1,8($a0)
end;
procedure TPORTG_CNPUE.clearCNPUE16; assembler; nostackframe; inline;
asm
  lui     $a1,1
  sw $a1,4($a0)
end;
procedure TPORTG_CNPUE.setCNPUE16(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,16,1
  sw      $v1,($a0)
end;
function  TPORTG_CNPUE.getCNPUE16 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,16,1
end;
procedure TPORTG_CNPUE.setCNPUE17; assembler; nostackframe; inline;
asm
  lui     $a1,2
  sw $a1,8($a0)
end;
procedure TPORTG_CNPUE.clearCNPUE17; assembler; nostackframe; inline;
asm
  lui     $a1,2
  sw $a1,4($a0)
end;
procedure TPORTG_CNPUE.setCNPUE17(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,17,1
  sw      $v1,($a0)
end;
function  TPORTG_CNPUE.getCNPUE17 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,17,1
end;
procedure TPORTG_CNPUE.setCNPUE18; assembler; nostackframe; inline;
asm
  lui     $a1,4
  sw $a1,8($a0)
end;
procedure TPORTG_CNPUE.clearCNPUE18; assembler; nostackframe; inline;
asm
  lui     $a1,4
  sw $a1,4($a0)
end;
procedure TPORTG_CNPUE.setCNPUE18(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,18,1
  sw      $v1,($a0)
end;
function  TPORTG_CNPUE.getCNPUE18 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,18,1
end;
procedure TPORTG_CNPUE.setCNPUE19; assembler; nostackframe; inline;
asm
  lui     $a1,8
  sw $a1,8($a0)
end;
procedure TPORTG_CNPUE.clearCNPUE19; assembler; nostackframe; inline;
asm
  lui     $a1,8
  sw $a1,4($a0)
end;
procedure TPORTG_CNPUE.setCNPUE19(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,19,1
  sw      $v1,($a0)
end;
function  TPORTG_CNPUE.getCNPUE19 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,19,1
end;
procedure TPORTG_CNPUE.setCNPUE20; assembler; nostackframe; inline;
asm
  lui     $a1,16
  sw $a1,8($a0)
end;
procedure TPORTG_CNPUE.clearCNPUE20; assembler; nostackframe; inline;
asm
  lui     $a1,16
  sw $a1,4($a0)
end;
procedure TPORTG_CNPUE.setCNPUE20(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,20,1
  sw      $v1,($a0)
end;
function  TPORTG_CNPUE.getCNPUE20 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,20,1
end;
procedure TPORTG_CNPUE.setCNPUE21; assembler; nostackframe; inline;
asm
  lui     $a1,32
  sw $a1,8($a0)
end;
procedure TPORTG_CNPUE.clearCNPUE21; assembler; nostackframe; inline;
asm
  lui     $a1,32
  sw $a1,4($a0)
end;
procedure TPORTG_CNPUE.setCNPUE21(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,21,1
  sw      $v1,($a0)
end;
function  TPORTG_CNPUE.getCNPUE21 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,21,1
end;
procedure TPORTG_CNPUE.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TPORTG_CNPUE.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TCAN1_C1CON.setDNCNT(thebits : TBits_5); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,5
  sw      $v1,($a0)
end;
function  TCAN1_C1CON.getDNCNT : TBits_5;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,5
end;
procedure TCAN1_C1CON.setCANBUSY; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2048
  sw $a1,8($a0)
end;
procedure TCAN1_C1CON.clearCANBUSY; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2048
  sw $a1,4($a0)
end;
procedure TCAN1_C1CON.setCANBUSY(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,11,1
  sw      $v1,($a0)
end;
function  TCAN1_C1CON.getCANBUSY : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,11,1
end;
procedure TCAN1_C1CON.setSIDL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,8($a0)
end;
procedure TCAN1_C1CON.clearSIDL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,4($a0)
end;
procedure TCAN1_C1CON.setSIDL(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,13,1
  sw      $v1,($a0)
end;
function  TCAN1_C1CON.getSIDL : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,13,1
end;
procedure TCAN1_C1CON.setON; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,8($a0)
end;
procedure TCAN1_C1CON.clearON; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,4($a0)
end;
procedure TCAN1_C1CON.setON(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,15,1
  sw      $v1,($a0)
end;
function  TCAN1_C1CON.getON : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,15,1
end;
procedure TCAN1_C1CON.setCANCAP; assembler; nostackframe; inline;
asm
  lui     $a1,16
  sw $a1,8($a0)
end;
procedure TCAN1_C1CON.clearCANCAP; assembler; nostackframe; inline;
asm
  lui     $a1,16
  sw $a1,4($a0)
end;
procedure TCAN1_C1CON.setCANCAP(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,20,1
  sw      $v1,($a0)
end;
function  TCAN1_C1CON.getCANCAP : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,20,1
end;
procedure TCAN1_C1CON.setOPMOD(thebits : TBits_3); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,21,3
  sw      $v1,($a0)
end;
function  TCAN1_C1CON.getOPMOD : TBits_3;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,21,3
end;
procedure TCAN1_C1CON.setREQOP(thebits : TBits_3); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,24,3
  sw      $v1,($a0)
end;
function  TCAN1_C1CON.getREQOP : TBits_3;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,24,3
end;
procedure TCAN1_C1CON.setABAT; assembler; nostackframe; inline;
asm
  lui     $a1,2048
  sw $a1,8($a0)
end;
procedure TCAN1_C1CON.clearABAT; assembler; nostackframe; inline;
asm
  lui     $a1,2048
  sw $a1,4($a0)
end;
procedure TCAN1_C1CON.setABAT(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,27,1
  sw      $v1,($a0)
end;
function  TCAN1_C1CON.getABAT : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,27,1
end;
procedure TCAN1_C1CON.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TCAN1_C1CON.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TCAN1_C1CFG.setBRP(thebits : TBits_6); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  sll     $a1,$a1,0
  lui    $v0,65535
  ori    $v0,$v0,65472
  and   $v1,$v1,$v0
  or    $a1,$a1,$v0
  sw    $a1,($a0)
end;
function  TCAN1_C1CFG.getBRP : TBits_6;
asm
  lw      $v1,($a0)
  srl     $a1,$a1,0
  ori    $v0,$zero,63
  and    $a1,$a1,$v0
end;
procedure TCAN1_C1CFG.setSJW(thebits : TBits_2); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,6,2
  sw      $v1,($a0)
end;
function  TCAN1_C1CFG.getSJW : TBits_2;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,6,2
end;
procedure TCAN1_C1CFG.setPRSEG(thebits : TBits_3); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,8,3
  sw      $v1,($a0)
end;
function  TCAN1_C1CFG.getPRSEG : TBits_3;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,8,3
end;
procedure TCAN1_C1CFG.setSEG1PH(thebits : TBits_3); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,11,3
  sw      $v1,($a0)
end;
function  TCAN1_C1CFG.getSEG1PH : TBits_3;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,11,3
end;
procedure TCAN1_C1CFG.setSAM; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16384
  sw $a1,8($a0)
end;
procedure TCAN1_C1CFG.clearSAM; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16384
  sw $a1,4($a0)
end;
procedure TCAN1_C1CFG.setSAM(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,14,1
  sw      $v1,($a0)
end;
function  TCAN1_C1CFG.getSAM : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,14,1
end;
procedure TCAN1_C1CFG.setSEG2PHTS; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,8($a0)
end;
procedure TCAN1_C1CFG.clearSEG2PHTS; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,4($a0)
end;
procedure TCAN1_C1CFG.setSEG2PHTS(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,15,1
  sw      $v1,($a0)
end;
function  TCAN1_C1CFG.getSEG2PHTS : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,15,1
end;
procedure TCAN1_C1CFG.setSEG2PH(thebits : TBits_3); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,16,3
  sw      $v1,($a0)
end;
function  TCAN1_C1CFG.getSEG2PH : TBits_3;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,16,3
end;
procedure TCAN1_C1CFG.setWAKFIL; assembler; nostackframe; inline;
asm
  lui     $a1,64
  sw $a1,8($a0)
end;
procedure TCAN1_C1CFG.clearWAKFIL; assembler; nostackframe; inline;
asm
  lui     $a1,64
  sw $a1,4($a0)
end;
procedure TCAN1_C1CFG.setWAKFIL(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,22,1
  sw      $v1,($a0)
end;
function  TCAN1_C1CFG.getWAKFIL : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,22,1
end;
procedure TCAN1_C1CFG.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TCAN1_C1CFG.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TCAN1_C1INT.setTBIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,8($a0)
end;
procedure TCAN1_C1INT.clearTBIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,4($a0)
end;
procedure TCAN1_C1INT.setTBIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,1
  sw      $v1,($a0)
end;
function  TCAN1_C1INT.getTBIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,1
end;
procedure TCAN1_C1INT.setRBIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,8($a0)
end;
procedure TCAN1_C1INT.clearRBIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,4($a0)
end;
procedure TCAN1_C1INT.setRBIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,1,1
  sw      $v1,($a0)
end;
function  TCAN1_C1INT.getRBIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,1,1
end;
procedure TCAN1_C1INT.setCTMRIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,8($a0)
end;
procedure TCAN1_C1INT.clearCTMRIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,4($a0)
end;
procedure TCAN1_C1INT.setCTMRIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,2,1
  sw      $v1,($a0)
end;
function  TCAN1_C1INT.getCTMRIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,2,1
end;
procedure TCAN1_C1INT.setMODIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,8($a0)
end;
procedure TCAN1_C1INT.clearMODIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,4($a0)
end;
procedure TCAN1_C1INT.setMODIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,3,1
  sw      $v1,($a0)
end;
function  TCAN1_C1INT.getMODIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,3,1
end;
procedure TCAN1_C1INT.setRBOVIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2048
  sw $a1,8($a0)
end;
procedure TCAN1_C1INT.clearRBOVIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2048
  sw $a1,4($a0)
end;
procedure TCAN1_C1INT.setRBOVIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,11,1
  sw      $v1,($a0)
end;
function  TCAN1_C1INT.getRBOVIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,11,1
end;
procedure TCAN1_C1INT.setSERRIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4096
  sw $a1,8($a0)
end;
procedure TCAN1_C1INT.clearSERRIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4096
  sw $a1,4($a0)
end;
procedure TCAN1_C1INT.setSERRIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,12,1
  sw      $v1,($a0)
end;
function  TCAN1_C1INT.getSERRIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,12,1
end;
procedure TCAN1_C1INT.setCERRIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,8($a0)
end;
procedure TCAN1_C1INT.clearCERRIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,4($a0)
end;
procedure TCAN1_C1INT.setCERRIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,13,1
  sw      $v1,($a0)
end;
function  TCAN1_C1INT.getCERRIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,13,1
end;
procedure TCAN1_C1INT.setWAKIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16384
  sw $a1,8($a0)
end;
procedure TCAN1_C1INT.clearWAKIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16384
  sw $a1,4($a0)
end;
procedure TCAN1_C1INT.setWAKIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,14,1
  sw      $v1,($a0)
end;
function  TCAN1_C1INT.getWAKIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,14,1
end;
procedure TCAN1_C1INT.setIVRIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,8($a0)
end;
procedure TCAN1_C1INT.clearIVRIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,4($a0)
end;
procedure TCAN1_C1INT.setIVRIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,15,1
  sw      $v1,($a0)
end;
function  TCAN1_C1INT.getIVRIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,15,1
end;
procedure TCAN1_C1INT.setTBIE; assembler; nostackframe; inline;
asm
  lui     $a1,1
  sw $a1,8($a0)
end;
procedure TCAN1_C1INT.clearTBIE; assembler; nostackframe; inline;
asm
  lui     $a1,1
  sw $a1,4($a0)
end;
procedure TCAN1_C1INT.setTBIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,16,1
  sw      $v1,($a0)
end;
function  TCAN1_C1INT.getTBIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,16,1
end;
procedure TCAN1_C1INT.setRBIE; assembler; nostackframe; inline;
asm
  lui     $a1,2
  sw $a1,8($a0)
end;
procedure TCAN1_C1INT.clearRBIE; assembler; nostackframe; inline;
asm
  lui     $a1,2
  sw $a1,4($a0)
end;
procedure TCAN1_C1INT.setRBIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,17,1
  sw      $v1,($a0)
end;
function  TCAN1_C1INT.getRBIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,17,1
end;
procedure TCAN1_C1INT.setCTMRIE; assembler; nostackframe; inline;
asm
  lui     $a1,4
  sw $a1,8($a0)
end;
procedure TCAN1_C1INT.clearCTMRIE; assembler; nostackframe; inline;
asm
  lui     $a1,4
  sw $a1,4($a0)
end;
procedure TCAN1_C1INT.setCTMRIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,18,1
  sw      $v1,($a0)
end;
function  TCAN1_C1INT.getCTMRIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,18,1
end;
procedure TCAN1_C1INT.setMODIE; assembler; nostackframe; inline;
asm
  lui     $a1,8
  sw $a1,8($a0)
end;
procedure TCAN1_C1INT.clearMODIE; assembler; nostackframe; inline;
asm
  lui     $a1,8
  sw $a1,4($a0)
end;
procedure TCAN1_C1INT.setMODIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,19,1
  sw      $v1,($a0)
end;
function  TCAN1_C1INT.getMODIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,19,1
end;
procedure TCAN1_C1INT.setRBOVIE; assembler; nostackframe; inline;
asm
  lui     $a1,2048
  sw $a1,8($a0)
end;
procedure TCAN1_C1INT.clearRBOVIE; assembler; nostackframe; inline;
asm
  lui     $a1,2048
  sw $a1,4($a0)
end;
procedure TCAN1_C1INT.setRBOVIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,27,1
  sw      $v1,($a0)
end;
function  TCAN1_C1INT.getRBOVIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,27,1
end;
procedure TCAN1_C1INT.setSERRIE; assembler; nostackframe; inline;
asm
  lui     $a1,4096
  sw $a1,8($a0)
end;
procedure TCAN1_C1INT.clearSERRIE; assembler; nostackframe; inline;
asm
  lui     $a1,4096
  sw $a1,4($a0)
end;
procedure TCAN1_C1INT.setSERRIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,28,1
  sw      $v1,($a0)
end;
function  TCAN1_C1INT.getSERRIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,28,1
end;
procedure TCAN1_C1INT.setCERRIE; assembler; nostackframe; inline;
asm
  lui     $a1,8192
  sw $a1,8($a0)
end;
procedure TCAN1_C1INT.clearCERRIE; assembler; nostackframe; inline;
asm
  lui     $a1,8192
  sw $a1,4($a0)
end;
procedure TCAN1_C1INT.setCERRIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,29,1
  sw      $v1,($a0)
end;
function  TCAN1_C1INT.getCERRIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,29,1
end;
procedure TCAN1_C1INT.setWAKIE; assembler; nostackframe; inline;
asm
  lui     $a1,16384
  sw $a1,8($a0)
end;
procedure TCAN1_C1INT.clearWAKIE; assembler; nostackframe; inline;
asm
  lui     $a1,16384
  sw $a1,4($a0)
end;
procedure TCAN1_C1INT.setWAKIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,30,1
  sw      $v1,($a0)
end;
function  TCAN1_C1INT.getWAKIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,30,1
end;
procedure TCAN1_C1INT.setIVRIE; assembler; nostackframe; inline;
asm
  lui     $a1,32768
  sw $a1,8($a0)
end;
procedure TCAN1_C1INT.clearIVRIE; assembler; nostackframe; inline;
asm
  lui     $a1,32768
  sw $a1,4($a0)
end;
procedure TCAN1_C1INT.setIVRIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,31,1
  sw      $v1,($a0)
end;
function  TCAN1_C1INT.getIVRIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,31,1
end;
procedure TCAN1_C1INT.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TCAN1_C1INT.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TCAN1_C1VEC.setICODE(thebits : TBits_7); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  sll     $a1,$a1,0
  lui    $v0,65535
  ori    $v0,$v0,65408
  and   $v1,$v1,$v0
  or    $a1,$a1,$v0
  sw    $a1,($a0)
end;
function  TCAN1_C1VEC.getICODE : TBits_7;
asm
  lw      $v1,($a0)
  srl     $a1,$a1,0
  ori    $v0,$zero,127
  and    $a1,$a1,$v0
end;
procedure TCAN1_C1VEC.setFILHIT(thebits : TBits_5); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,8,5
  sw      $v1,($a0)
end;
function  TCAN1_C1VEC.getFILHIT : TBits_5;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,8,5
end;
procedure TCAN1_C1VEC.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TCAN1_C1VEC.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TCAN1_C1TREC.setRERRCNT(thebits : TBits_8); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  sll     $a1,$a1,0
  lui    $v0,65535
  ori    $v0,$v0,65280
  and   $v1,$v1,$v0
  or    $a1,$a1,$v0
  sw    $a1,($a0)
end;
function  TCAN1_C1TREC.getRERRCNT : TBits_8;
asm
  lw      $v1,($a0)
  srl     $a1,$a1,0
  ori    $v0,$zero,255
  and    $a1,$a1,$v0
end;
procedure TCAN1_C1TREC.setTERRCNT(thebits : TBits_8); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  sll     $a1,$a1,8
  lui    $v0,65535
  ori    $v0,$v0,255
  and   $v1,$v1,$v0
  or    $a1,$a1,$v0
  sw    $a1,($a0)
end;
function  TCAN1_C1TREC.getTERRCNT : TBits_8;
asm
  lw      $v1,($a0)
  srl     $a1,$a1,8
  ori    $v0,$zero,65280
  and    $a1,$a1,$v0
end;
procedure TCAN1_C1TREC.setEWARN; assembler; nostackframe; inline;
asm
  lui     $a1,1
  sw $a1,8($a0)
end;
procedure TCAN1_C1TREC.clearEWARN; assembler; nostackframe; inline;
asm
  lui     $a1,1
  sw $a1,4($a0)
end;
procedure TCAN1_C1TREC.setEWARN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,16,1
  sw      $v1,($a0)
end;
function  TCAN1_C1TREC.getEWARN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,16,1
end;
procedure TCAN1_C1TREC.setRXWARN; assembler; nostackframe; inline;
asm
  lui     $a1,2
  sw $a1,8($a0)
end;
procedure TCAN1_C1TREC.clearRXWARN; assembler; nostackframe; inline;
asm
  lui     $a1,2
  sw $a1,4($a0)
end;
procedure TCAN1_C1TREC.setRXWARN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,17,1
  sw      $v1,($a0)
end;
function  TCAN1_C1TREC.getRXWARN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,17,1
end;
procedure TCAN1_C1TREC.setTXWARN; assembler; nostackframe; inline;
asm
  lui     $a1,4
  sw $a1,8($a0)
end;
procedure TCAN1_C1TREC.clearTXWARN; assembler; nostackframe; inline;
asm
  lui     $a1,4
  sw $a1,4($a0)
end;
procedure TCAN1_C1TREC.setTXWARN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,18,1
  sw      $v1,($a0)
end;
function  TCAN1_C1TREC.getTXWARN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,18,1
end;
procedure TCAN1_C1TREC.setRXBP; assembler; nostackframe; inline;
asm
  lui     $a1,8
  sw $a1,8($a0)
end;
procedure TCAN1_C1TREC.clearRXBP; assembler; nostackframe; inline;
asm
  lui     $a1,8
  sw $a1,4($a0)
end;
procedure TCAN1_C1TREC.setRXBP(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,19,1
  sw      $v1,($a0)
end;
function  TCAN1_C1TREC.getRXBP : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,19,1
end;
procedure TCAN1_C1TREC.setTXBP; assembler; nostackframe; inline;
asm
  lui     $a1,16
  sw $a1,8($a0)
end;
procedure TCAN1_C1TREC.clearTXBP; assembler; nostackframe; inline;
asm
  lui     $a1,16
  sw $a1,4($a0)
end;
procedure TCAN1_C1TREC.setTXBP(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,20,1
  sw      $v1,($a0)
end;
function  TCAN1_C1TREC.getTXBP : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,20,1
end;
procedure TCAN1_C1TREC.setTXBO; assembler; nostackframe; inline;
asm
  lui     $a1,32
  sw $a1,8($a0)
end;
procedure TCAN1_C1TREC.clearTXBO; assembler; nostackframe; inline;
asm
  lui     $a1,32
  sw $a1,4($a0)
end;
procedure TCAN1_C1TREC.setTXBO(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,21,1
  sw      $v1,($a0)
end;
function  TCAN1_C1TREC.getTXBO : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,21,1
end;
procedure TCAN1_C1TREC.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TCAN1_C1TREC.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TCAN1_C1FSTAT.setFIFOIP(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TCAN1_C1FSTAT.getFIFOIP : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TCAN1_C1FSTAT.setFIFOIP0; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,8($a0)
end;
procedure TCAN1_C1FSTAT.clearFIFOIP0; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,4($a0)
end;
procedure TCAN1_C1FSTAT.setFIFOIP0(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FSTAT.getFIFOIP0 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,1
end;
procedure TCAN1_C1FSTAT.setFIFOIP1; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,8($a0)
end;
procedure TCAN1_C1FSTAT.clearFIFOIP1; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,4($a0)
end;
procedure TCAN1_C1FSTAT.setFIFOIP1(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,1,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FSTAT.getFIFOIP1 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,1,1
end;
procedure TCAN1_C1FSTAT.setFIFOIP2; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,8($a0)
end;
procedure TCAN1_C1FSTAT.clearFIFOIP2; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,4($a0)
end;
procedure TCAN1_C1FSTAT.setFIFOIP2(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,2,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FSTAT.getFIFOIP2 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,2,1
end;
procedure TCAN1_C1FSTAT.setFIFOIP3; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,8($a0)
end;
procedure TCAN1_C1FSTAT.clearFIFOIP3; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,4($a0)
end;
procedure TCAN1_C1FSTAT.setFIFOIP3(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,3,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FSTAT.getFIFOIP3 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,3,1
end;
procedure TCAN1_C1FSTAT.setFIFOIP4; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,8($a0)
end;
procedure TCAN1_C1FSTAT.clearFIFOIP4; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,4($a0)
end;
procedure TCAN1_C1FSTAT.setFIFOIP4(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,4,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FSTAT.getFIFOIP4 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,4,1
end;
procedure TCAN1_C1FSTAT.setFIFOIP5; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,8($a0)
end;
procedure TCAN1_C1FSTAT.clearFIFOIP5; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,4($a0)
end;
procedure TCAN1_C1FSTAT.setFIFOIP5(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,5,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FSTAT.getFIFOIP5 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,5,1
end;
procedure TCAN1_C1FSTAT.setFIFOIP6; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,8($a0)
end;
procedure TCAN1_C1FSTAT.clearFIFOIP6; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,4($a0)
end;
procedure TCAN1_C1FSTAT.setFIFOIP6(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,6,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FSTAT.getFIFOIP6 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,6,1
end;
procedure TCAN1_C1FSTAT.setFIFOIP7; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,8($a0)
end;
procedure TCAN1_C1FSTAT.clearFIFOIP7; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,4($a0)
end;
procedure TCAN1_C1FSTAT.setFIFOIP7(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,7,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FSTAT.getFIFOIP7 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,7,1
end;
procedure TCAN1_C1FSTAT.setFIFOIP8; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,8($a0)
end;
procedure TCAN1_C1FSTAT.clearFIFOIP8; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,4($a0)
end;
procedure TCAN1_C1FSTAT.setFIFOIP8(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,8,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FSTAT.getFIFOIP8 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,8,1
end;
procedure TCAN1_C1FSTAT.setFIFOIP9; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,512
  sw $a1,8($a0)
end;
procedure TCAN1_C1FSTAT.clearFIFOIP9; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,512
  sw $a1,4($a0)
end;
procedure TCAN1_C1FSTAT.setFIFOIP9(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,9,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FSTAT.getFIFOIP9 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,9,1
end;
procedure TCAN1_C1FSTAT.setFIFOIP10; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1024
  sw $a1,8($a0)
end;
procedure TCAN1_C1FSTAT.clearFIFOIP10; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1024
  sw $a1,4($a0)
end;
procedure TCAN1_C1FSTAT.setFIFOIP10(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,10,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FSTAT.getFIFOIP10 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,10,1
end;
procedure TCAN1_C1FSTAT.setFIFOIP11; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2048
  sw $a1,8($a0)
end;
procedure TCAN1_C1FSTAT.clearFIFOIP11; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2048
  sw $a1,4($a0)
end;
procedure TCAN1_C1FSTAT.setFIFOIP11(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,11,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FSTAT.getFIFOIP11 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,11,1
end;
procedure TCAN1_C1FSTAT.setFIFOIP12; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4096
  sw $a1,8($a0)
end;
procedure TCAN1_C1FSTAT.clearFIFOIP12; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4096
  sw $a1,4($a0)
end;
procedure TCAN1_C1FSTAT.setFIFOIP12(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,12,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FSTAT.getFIFOIP12 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,12,1
end;
procedure TCAN1_C1FSTAT.setFIFOIP13; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,8($a0)
end;
procedure TCAN1_C1FSTAT.clearFIFOIP13; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,4($a0)
end;
procedure TCAN1_C1FSTAT.setFIFOIP13(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,13,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FSTAT.getFIFOIP13 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,13,1
end;
procedure TCAN1_C1FSTAT.setFIFOIP14; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16384
  sw $a1,8($a0)
end;
procedure TCAN1_C1FSTAT.clearFIFOIP14; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16384
  sw $a1,4($a0)
end;
procedure TCAN1_C1FSTAT.setFIFOIP14(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,14,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FSTAT.getFIFOIP14 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,14,1
end;
procedure TCAN1_C1FSTAT.setFIFOIP15; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,8($a0)
end;
procedure TCAN1_C1FSTAT.clearFIFOIP15; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,4($a0)
end;
procedure TCAN1_C1FSTAT.setFIFOIP15(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,15,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FSTAT.getFIFOIP15 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,15,1
end;
procedure TCAN1_C1FSTAT.setFIFOIP16; assembler; nostackframe; inline;
asm
  lui     $a1,1
  sw $a1,8($a0)
end;
procedure TCAN1_C1FSTAT.clearFIFOIP16; assembler; nostackframe; inline;
asm
  lui     $a1,1
  sw $a1,4($a0)
end;
procedure TCAN1_C1FSTAT.setFIFOIP16(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,16,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FSTAT.getFIFOIP16 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,16,1
end;
procedure TCAN1_C1FSTAT.setFIFOIP17; assembler; nostackframe; inline;
asm
  lui     $a1,2
  sw $a1,8($a0)
end;
procedure TCAN1_C1FSTAT.clearFIFOIP17; assembler; nostackframe; inline;
asm
  lui     $a1,2
  sw $a1,4($a0)
end;
procedure TCAN1_C1FSTAT.setFIFOIP17(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,17,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FSTAT.getFIFOIP17 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,17,1
end;
procedure TCAN1_C1FSTAT.setFIFOIP18; assembler; nostackframe; inline;
asm
  lui     $a1,4
  sw $a1,8($a0)
end;
procedure TCAN1_C1FSTAT.clearFIFOIP18; assembler; nostackframe; inline;
asm
  lui     $a1,4
  sw $a1,4($a0)
end;
procedure TCAN1_C1FSTAT.setFIFOIP18(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,18,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FSTAT.getFIFOIP18 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,18,1
end;
procedure TCAN1_C1FSTAT.setFIFOIP19; assembler; nostackframe; inline;
asm
  lui     $a1,8
  sw $a1,8($a0)
end;
procedure TCAN1_C1FSTAT.clearFIFOIP19; assembler; nostackframe; inline;
asm
  lui     $a1,8
  sw $a1,4($a0)
end;
procedure TCAN1_C1FSTAT.setFIFOIP19(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,19,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FSTAT.getFIFOIP19 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,19,1
end;
procedure TCAN1_C1FSTAT.setFIFOIP20; assembler; nostackframe; inline;
asm
  lui     $a1,16
  sw $a1,8($a0)
end;
procedure TCAN1_C1FSTAT.clearFIFOIP20; assembler; nostackframe; inline;
asm
  lui     $a1,16
  sw $a1,4($a0)
end;
procedure TCAN1_C1FSTAT.setFIFOIP20(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,20,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FSTAT.getFIFOIP20 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,20,1
end;
procedure TCAN1_C1FSTAT.setFIFOIP21; assembler; nostackframe; inline;
asm
  lui     $a1,32
  sw $a1,8($a0)
end;
procedure TCAN1_C1FSTAT.clearFIFOIP21; assembler; nostackframe; inline;
asm
  lui     $a1,32
  sw $a1,4($a0)
end;
procedure TCAN1_C1FSTAT.setFIFOIP21(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,21,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FSTAT.getFIFOIP21 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,21,1
end;
procedure TCAN1_C1FSTAT.setFIFOIP22; assembler; nostackframe; inline;
asm
  lui     $a1,64
  sw $a1,8($a0)
end;
procedure TCAN1_C1FSTAT.clearFIFOIP22; assembler; nostackframe; inline;
asm
  lui     $a1,64
  sw $a1,4($a0)
end;
procedure TCAN1_C1FSTAT.setFIFOIP22(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,22,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FSTAT.getFIFOIP22 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,22,1
end;
procedure TCAN1_C1FSTAT.setFIFOIP23; assembler; nostackframe; inline;
asm
  lui     $a1,128
  sw $a1,8($a0)
end;
procedure TCAN1_C1FSTAT.clearFIFOIP23; assembler; nostackframe; inline;
asm
  lui     $a1,128
  sw $a1,4($a0)
end;
procedure TCAN1_C1FSTAT.setFIFOIP23(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,23,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FSTAT.getFIFOIP23 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,23,1
end;
procedure TCAN1_C1FSTAT.setFIFOIP24; assembler; nostackframe; inline;
asm
  lui     $a1,256
  sw $a1,8($a0)
end;
procedure TCAN1_C1FSTAT.clearFIFOIP24; assembler; nostackframe; inline;
asm
  lui     $a1,256
  sw $a1,4($a0)
end;
procedure TCAN1_C1FSTAT.setFIFOIP24(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,24,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FSTAT.getFIFOIP24 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,24,1
end;
procedure TCAN1_C1FSTAT.setFIFOIP25; assembler; nostackframe; inline;
asm
  lui     $a1,512
  sw $a1,8($a0)
end;
procedure TCAN1_C1FSTAT.clearFIFOIP25; assembler; nostackframe; inline;
asm
  lui     $a1,512
  sw $a1,4($a0)
end;
procedure TCAN1_C1FSTAT.setFIFOIP25(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,25,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FSTAT.getFIFOIP25 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,25,1
end;
procedure TCAN1_C1FSTAT.setFIFOIP26; assembler; nostackframe; inline;
asm
  lui     $a1,1024
  sw $a1,8($a0)
end;
procedure TCAN1_C1FSTAT.clearFIFOIP26; assembler; nostackframe; inline;
asm
  lui     $a1,1024
  sw $a1,4($a0)
end;
procedure TCAN1_C1FSTAT.setFIFOIP26(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,26,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FSTAT.getFIFOIP26 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,26,1
end;
procedure TCAN1_C1FSTAT.setFIFOIP27; assembler; nostackframe; inline;
asm
  lui     $a1,2048
  sw $a1,8($a0)
end;
procedure TCAN1_C1FSTAT.clearFIFOIP27; assembler; nostackframe; inline;
asm
  lui     $a1,2048
  sw $a1,4($a0)
end;
procedure TCAN1_C1FSTAT.setFIFOIP27(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,27,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FSTAT.getFIFOIP27 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,27,1
end;
procedure TCAN1_C1FSTAT.setFIFOIP28; assembler; nostackframe; inline;
asm
  lui     $a1,4096
  sw $a1,8($a0)
end;
procedure TCAN1_C1FSTAT.clearFIFOIP28; assembler; nostackframe; inline;
asm
  lui     $a1,4096
  sw $a1,4($a0)
end;
procedure TCAN1_C1FSTAT.setFIFOIP28(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,28,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FSTAT.getFIFOIP28 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,28,1
end;
procedure TCAN1_C1FSTAT.setFIFOIP29; assembler; nostackframe; inline;
asm
  lui     $a1,8192
  sw $a1,8($a0)
end;
procedure TCAN1_C1FSTAT.clearFIFOIP29; assembler; nostackframe; inline;
asm
  lui     $a1,8192
  sw $a1,4($a0)
end;
procedure TCAN1_C1FSTAT.setFIFOIP29(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,29,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FSTAT.getFIFOIP29 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,29,1
end;
procedure TCAN1_C1FSTAT.setFIFOIP30; assembler; nostackframe; inline;
asm
  lui     $a1,16384
  sw $a1,8($a0)
end;
procedure TCAN1_C1FSTAT.clearFIFOIP30; assembler; nostackframe; inline;
asm
  lui     $a1,16384
  sw $a1,4($a0)
end;
procedure TCAN1_C1FSTAT.setFIFOIP30(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,30,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FSTAT.getFIFOIP30 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,30,1
end;
procedure TCAN1_C1FSTAT.setFIFOIP31; assembler; nostackframe; inline;
asm
  lui     $a1,32768
  sw $a1,8($a0)
end;
procedure TCAN1_C1FSTAT.clearFIFOIP31; assembler; nostackframe; inline;
asm
  lui     $a1,32768
  sw $a1,4($a0)
end;
procedure TCAN1_C1FSTAT.setFIFOIP31(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,31,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FSTAT.getFIFOIP31 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,31,1
end;
procedure TCAN1_C1FSTAT.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TCAN1_C1FSTAT.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TCAN1_C1RXOVF.setRXOVF(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TCAN1_C1RXOVF.getRXOVF : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TCAN1_C1RXOVF.setRXOVF0; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,8($a0)
end;
procedure TCAN1_C1RXOVF.clearRXOVF0; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,4($a0)
end;
procedure TCAN1_C1RXOVF.setRXOVF0(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,1
  sw      $v1,($a0)
end;
function  TCAN1_C1RXOVF.getRXOVF0 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,1
end;
procedure TCAN1_C1RXOVF.setRXOVF1; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,8($a0)
end;
procedure TCAN1_C1RXOVF.clearRXOVF1; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,4($a0)
end;
procedure TCAN1_C1RXOVF.setRXOVF1(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,1,1
  sw      $v1,($a0)
end;
function  TCAN1_C1RXOVF.getRXOVF1 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,1,1
end;
procedure TCAN1_C1RXOVF.setRXOVF2; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,8($a0)
end;
procedure TCAN1_C1RXOVF.clearRXOVF2; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,4($a0)
end;
procedure TCAN1_C1RXOVF.setRXOVF2(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,2,1
  sw      $v1,($a0)
end;
function  TCAN1_C1RXOVF.getRXOVF2 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,2,1
end;
procedure TCAN1_C1RXOVF.setRXOVF3; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,8($a0)
end;
procedure TCAN1_C1RXOVF.clearRXOVF3; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,4($a0)
end;
procedure TCAN1_C1RXOVF.setRXOVF3(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,3,1
  sw      $v1,($a0)
end;
function  TCAN1_C1RXOVF.getRXOVF3 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,3,1
end;
procedure TCAN1_C1RXOVF.setRXOVF4; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,8($a0)
end;
procedure TCAN1_C1RXOVF.clearRXOVF4; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,4($a0)
end;
procedure TCAN1_C1RXOVF.setRXOVF4(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,4,1
  sw      $v1,($a0)
end;
function  TCAN1_C1RXOVF.getRXOVF4 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,4,1
end;
procedure TCAN1_C1RXOVF.setRXOVF5; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,8($a0)
end;
procedure TCAN1_C1RXOVF.clearRXOVF5; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,4($a0)
end;
procedure TCAN1_C1RXOVF.setRXOVF5(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,5,1
  sw      $v1,($a0)
end;
function  TCAN1_C1RXOVF.getRXOVF5 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,5,1
end;
procedure TCAN1_C1RXOVF.setRXOVF6; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,8($a0)
end;
procedure TCAN1_C1RXOVF.clearRXOVF6; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,4($a0)
end;
procedure TCAN1_C1RXOVF.setRXOVF6(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,6,1
  sw      $v1,($a0)
end;
function  TCAN1_C1RXOVF.getRXOVF6 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,6,1
end;
procedure TCAN1_C1RXOVF.setRXOVF7; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,8($a0)
end;
procedure TCAN1_C1RXOVF.clearRXOVF7; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,4($a0)
end;
procedure TCAN1_C1RXOVF.setRXOVF7(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,7,1
  sw      $v1,($a0)
end;
function  TCAN1_C1RXOVF.getRXOVF7 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,7,1
end;
procedure TCAN1_C1RXOVF.setRXOVF8; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,8($a0)
end;
procedure TCAN1_C1RXOVF.clearRXOVF8; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,4($a0)
end;
procedure TCAN1_C1RXOVF.setRXOVF8(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,8,1
  sw      $v1,($a0)
end;
function  TCAN1_C1RXOVF.getRXOVF8 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,8,1
end;
procedure TCAN1_C1RXOVF.setRXOVF9; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,512
  sw $a1,8($a0)
end;
procedure TCAN1_C1RXOVF.clearRXOVF9; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,512
  sw $a1,4($a0)
end;
procedure TCAN1_C1RXOVF.setRXOVF9(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,9,1
  sw      $v1,($a0)
end;
function  TCAN1_C1RXOVF.getRXOVF9 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,9,1
end;
procedure TCAN1_C1RXOVF.setRXOVF10; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1024
  sw $a1,8($a0)
end;
procedure TCAN1_C1RXOVF.clearRXOVF10; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1024
  sw $a1,4($a0)
end;
procedure TCAN1_C1RXOVF.setRXOVF10(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,10,1
  sw      $v1,($a0)
end;
function  TCAN1_C1RXOVF.getRXOVF10 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,10,1
end;
procedure TCAN1_C1RXOVF.setRXOVF11; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2048
  sw $a1,8($a0)
end;
procedure TCAN1_C1RXOVF.clearRXOVF11; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2048
  sw $a1,4($a0)
end;
procedure TCAN1_C1RXOVF.setRXOVF11(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,11,1
  sw      $v1,($a0)
end;
function  TCAN1_C1RXOVF.getRXOVF11 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,11,1
end;
procedure TCAN1_C1RXOVF.setRXOVF12; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4096
  sw $a1,8($a0)
end;
procedure TCAN1_C1RXOVF.clearRXOVF12; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4096
  sw $a1,4($a0)
end;
procedure TCAN1_C1RXOVF.setRXOVF12(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,12,1
  sw      $v1,($a0)
end;
function  TCAN1_C1RXOVF.getRXOVF12 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,12,1
end;
procedure TCAN1_C1RXOVF.setRXOVF13; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,8($a0)
end;
procedure TCAN1_C1RXOVF.clearRXOVF13; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,4($a0)
end;
procedure TCAN1_C1RXOVF.setRXOVF13(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,13,1
  sw      $v1,($a0)
end;
function  TCAN1_C1RXOVF.getRXOVF13 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,13,1
end;
procedure TCAN1_C1RXOVF.setRXOVF14; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16384
  sw $a1,8($a0)
end;
procedure TCAN1_C1RXOVF.clearRXOVF14; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16384
  sw $a1,4($a0)
end;
procedure TCAN1_C1RXOVF.setRXOVF14(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,14,1
  sw      $v1,($a0)
end;
function  TCAN1_C1RXOVF.getRXOVF14 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,14,1
end;
procedure TCAN1_C1RXOVF.setRXOVF15; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,8($a0)
end;
procedure TCAN1_C1RXOVF.clearRXOVF15; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,4($a0)
end;
procedure TCAN1_C1RXOVF.setRXOVF15(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,15,1
  sw      $v1,($a0)
end;
function  TCAN1_C1RXOVF.getRXOVF15 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,15,1
end;
procedure TCAN1_C1RXOVF.setRXOVF16; assembler; nostackframe; inline;
asm
  lui     $a1,1
  sw $a1,8($a0)
end;
procedure TCAN1_C1RXOVF.clearRXOVF16; assembler; nostackframe; inline;
asm
  lui     $a1,1
  sw $a1,4($a0)
end;
procedure TCAN1_C1RXOVF.setRXOVF16(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,16,1
  sw      $v1,($a0)
end;
function  TCAN1_C1RXOVF.getRXOVF16 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,16,1
end;
procedure TCAN1_C1RXOVF.setRXOVF17; assembler; nostackframe; inline;
asm
  lui     $a1,2
  sw $a1,8($a0)
end;
procedure TCAN1_C1RXOVF.clearRXOVF17; assembler; nostackframe; inline;
asm
  lui     $a1,2
  sw $a1,4($a0)
end;
procedure TCAN1_C1RXOVF.setRXOVF17(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,17,1
  sw      $v1,($a0)
end;
function  TCAN1_C1RXOVF.getRXOVF17 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,17,1
end;
procedure TCAN1_C1RXOVF.setRXOVF18; assembler; nostackframe; inline;
asm
  lui     $a1,4
  sw $a1,8($a0)
end;
procedure TCAN1_C1RXOVF.clearRXOVF18; assembler; nostackframe; inline;
asm
  lui     $a1,4
  sw $a1,4($a0)
end;
procedure TCAN1_C1RXOVF.setRXOVF18(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,18,1
  sw      $v1,($a0)
end;
function  TCAN1_C1RXOVF.getRXOVF18 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,18,1
end;
procedure TCAN1_C1RXOVF.setRXOVF19; assembler; nostackframe; inline;
asm
  lui     $a1,8
  sw $a1,8($a0)
end;
procedure TCAN1_C1RXOVF.clearRXOVF19; assembler; nostackframe; inline;
asm
  lui     $a1,8
  sw $a1,4($a0)
end;
procedure TCAN1_C1RXOVF.setRXOVF19(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,19,1
  sw      $v1,($a0)
end;
function  TCAN1_C1RXOVF.getRXOVF19 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,19,1
end;
procedure TCAN1_C1RXOVF.setRXOVF20; assembler; nostackframe; inline;
asm
  lui     $a1,16
  sw $a1,8($a0)
end;
procedure TCAN1_C1RXOVF.clearRXOVF20; assembler; nostackframe; inline;
asm
  lui     $a1,16
  sw $a1,4($a0)
end;
procedure TCAN1_C1RXOVF.setRXOVF20(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,20,1
  sw      $v1,($a0)
end;
function  TCAN1_C1RXOVF.getRXOVF20 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,20,1
end;
procedure TCAN1_C1RXOVF.setRXOVF21; assembler; nostackframe; inline;
asm
  lui     $a1,32
  sw $a1,8($a0)
end;
procedure TCAN1_C1RXOVF.clearRXOVF21; assembler; nostackframe; inline;
asm
  lui     $a1,32
  sw $a1,4($a0)
end;
procedure TCAN1_C1RXOVF.setRXOVF21(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,21,1
  sw      $v1,($a0)
end;
function  TCAN1_C1RXOVF.getRXOVF21 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,21,1
end;
procedure TCAN1_C1RXOVF.setRXOVF22; assembler; nostackframe; inline;
asm
  lui     $a1,64
  sw $a1,8($a0)
end;
procedure TCAN1_C1RXOVF.clearRXOVF22; assembler; nostackframe; inline;
asm
  lui     $a1,64
  sw $a1,4($a0)
end;
procedure TCAN1_C1RXOVF.setRXOVF22(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,22,1
  sw      $v1,($a0)
end;
function  TCAN1_C1RXOVF.getRXOVF22 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,22,1
end;
procedure TCAN1_C1RXOVF.setRXOVF23; assembler; nostackframe; inline;
asm
  lui     $a1,128
  sw $a1,8($a0)
end;
procedure TCAN1_C1RXOVF.clearRXOVF23; assembler; nostackframe; inline;
asm
  lui     $a1,128
  sw $a1,4($a0)
end;
procedure TCAN1_C1RXOVF.setRXOVF23(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,23,1
  sw      $v1,($a0)
end;
function  TCAN1_C1RXOVF.getRXOVF23 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,23,1
end;
procedure TCAN1_C1RXOVF.setRXOVF24; assembler; nostackframe; inline;
asm
  lui     $a1,256
  sw $a1,8($a0)
end;
procedure TCAN1_C1RXOVF.clearRXOVF24; assembler; nostackframe; inline;
asm
  lui     $a1,256
  sw $a1,4($a0)
end;
procedure TCAN1_C1RXOVF.setRXOVF24(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,24,1
  sw      $v1,($a0)
end;
function  TCAN1_C1RXOVF.getRXOVF24 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,24,1
end;
procedure TCAN1_C1RXOVF.setRXOVF25; assembler; nostackframe; inline;
asm
  lui     $a1,512
  sw $a1,8($a0)
end;
procedure TCAN1_C1RXOVF.clearRXOVF25; assembler; nostackframe; inline;
asm
  lui     $a1,512
  sw $a1,4($a0)
end;
procedure TCAN1_C1RXOVF.setRXOVF25(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,25,1
  sw      $v1,($a0)
end;
function  TCAN1_C1RXOVF.getRXOVF25 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,25,1
end;
procedure TCAN1_C1RXOVF.setRXOVF26; assembler; nostackframe; inline;
asm
  lui     $a1,1024
  sw $a1,8($a0)
end;
procedure TCAN1_C1RXOVF.clearRXOVF26; assembler; nostackframe; inline;
asm
  lui     $a1,1024
  sw $a1,4($a0)
end;
procedure TCAN1_C1RXOVF.setRXOVF26(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,26,1
  sw      $v1,($a0)
end;
function  TCAN1_C1RXOVF.getRXOVF26 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,26,1
end;
procedure TCAN1_C1RXOVF.setRXOVF27; assembler; nostackframe; inline;
asm
  lui     $a1,2048
  sw $a1,8($a0)
end;
procedure TCAN1_C1RXOVF.clearRXOVF27; assembler; nostackframe; inline;
asm
  lui     $a1,2048
  sw $a1,4($a0)
end;
procedure TCAN1_C1RXOVF.setRXOVF27(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,27,1
  sw      $v1,($a0)
end;
function  TCAN1_C1RXOVF.getRXOVF27 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,27,1
end;
procedure TCAN1_C1RXOVF.setRXOVF28; assembler; nostackframe; inline;
asm
  lui     $a1,4096
  sw $a1,8($a0)
end;
procedure TCAN1_C1RXOVF.clearRXOVF28; assembler; nostackframe; inline;
asm
  lui     $a1,4096
  sw $a1,4($a0)
end;
procedure TCAN1_C1RXOVF.setRXOVF28(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,28,1
  sw      $v1,($a0)
end;
function  TCAN1_C1RXOVF.getRXOVF28 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,28,1
end;
procedure TCAN1_C1RXOVF.setRXOVF29; assembler; nostackframe; inline;
asm
  lui     $a1,8192
  sw $a1,8($a0)
end;
procedure TCAN1_C1RXOVF.clearRXOVF29; assembler; nostackframe; inline;
asm
  lui     $a1,8192
  sw $a1,4($a0)
end;
procedure TCAN1_C1RXOVF.setRXOVF29(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,29,1
  sw      $v1,($a0)
end;
function  TCAN1_C1RXOVF.getRXOVF29 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,29,1
end;
procedure TCAN1_C1RXOVF.setRXOVF30; assembler; nostackframe; inline;
asm
  lui     $a1,16384
  sw $a1,8($a0)
end;
procedure TCAN1_C1RXOVF.clearRXOVF30; assembler; nostackframe; inline;
asm
  lui     $a1,16384
  sw $a1,4($a0)
end;
procedure TCAN1_C1RXOVF.setRXOVF30(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,30,1
  sw      $v1,($a0)
end;
function  TCAN1_C1RXOVF.getRXOVF30 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,30,1
end;
procedure TCAN1_C1RXOVF.setRXOVF31; assembler; nostackframe; inline;
asm
  lui     $a1,32768
  sw $a1,8($a0)
end;
procedure TCAN1_C1RXOVF.clearRXOVF31; assembler; nostackframe; inline;
asm
  lui     $a1,32768
  sw $a1,4($a0)
end;
procedure TCAN1_C1RXOVF.setRXOVF31(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,31,1
  sw      $v1,($a0)
end;
function  TCAN1_C1RXOVF.getRXOVF31 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,31,1
end;
procedure TCAN1_C1RXOVF.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TCAN1_C1RXOVF.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TCAN1_C1TMR.setCANTSPRE(thebits : TBits_16); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  sll     $a1,$a1,0
  lui    $v0,65535
  and   $v1,$v1,$v0
  or    $a1,$a1,$v0
  sw    $a1,($a0)
end;
function  TCAN1_C1TMR.getCANTSPRE : TBits_16;
asm
  lw      $v1,($a0)
  srl     $a1,$a1,0
  ori    $v0,$zero,65535
  and    $a1,$a1,$v0
end;
procedure TCAN1_C1TMR.setCANTS(thebits : TBits_16); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  sll     $a1,$a1,16
  ori    $v0,$zero,65535
  and   $v1,$v1,$v0
  or    $a1,$a1,$v0
  sw    $a1,($a0)
end;
function  TCAN1_C1TMR.getCANTS : TBits_16;
asm
  lw      $v1,($a0)
  srl     $a1,$a1,16
  lui    $v0,65535
  and    $a1,$a1,$v0
end;
procedure TCAN1_C1TMR.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TCAN1_C1TMR.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TCAN1_C1RXM0.setEID(thebits : TBits_18); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  sll     $a1,$a1,0
  lui    $v0,65532
  and   $v1,$v1,$v0
  or    $a1,$a1,$v0
  sw    $a1,($a0)
end;
function  TCAN1_C1RXM0.getEID : TBits_18;
asm
  lw      $v1,($a0)
  srl     $a1,$a1,0
  lui    $v0,3
  ori    $v0,$v0,65535
  and    $a1,$a1,$v0
end;
procedure TCAN1_C1RXM0.setMIDE; assembler; nostackframe; inline;
asm
  lui     $a1,8
  sw $a1,8($a0)
end;
procedure TCAN1_C1RXM0.clearMIDE; assembler; nostackframe; inline;
asm
  lui     $a1,8
  sw $a1,4($a0)
end;
procedure TCAN1_C1RXM0.setMIDE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,19,1
  sw      $v1,($a0)
end;
function  TCAN1_C1RXM0.getMIDE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,19,1
end;
procedure TCAN1_C1RXM0.setSID(thebits : TBits_11); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  sll     $a1,$a1,21
  lui    $v0,31
  ori    $v0,$v0,65535
  and   $v1,$v1,$v0
  or    $a1,$a1,$v0
  sw    $a1,($a0)
end;
function  TCAN1_C1RXM0.getSID : TBits_11;
asm
  lw      $v1,($a0)
  srl     $a1,$a1,21
  lui    $v0,65504
  and    $a1,$a1,$v0
end;
procedure TCAN1_C1RXM0.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TCAN1_C1RXM0.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TCAN1_C1RXM1.setEID(thebits : TBits_18); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  sll     $a1,$a1,0
  lui    $v0,65532
  and   $v1,$v1,$v0
  or    $a1,$a1,$v0
  sw    $a1,($a0)
end;
function  TCAN1_C1RXM1.getEID : TBits_18;
asm
  lw      $v1,($a0)
  srl     $a1,$a1,0
  lui    $v0,3
  ori    $v0,$v0,65535
  and    $a1,$a1,$v0
end;
procedure TCAN1_C1RXM1.setMIDE; assembler; nostackframe; inline;
asm
  lui     $a1,8
  sw $a1,8($a0)
end;
procedure TCAN1_C1RXM1.clearMIDE; assembler; nostackframe; inline;
asm
  lui     $a1,8
  sw $a1,4($a0)
end;
procedure TCAN1_C1RXM1.setMIDE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,19,1
  sw      $v1,($a0)
end;
function  TCAN1_C1RXM1.getMIDE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,19,1
end;
procedure TCAN1_C1RXM1.setSID(thebits : TBits_11); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  sll     $a1,$a1,21
  lui    $v0,31
  ori    $v0,$v0,65535
  and   $v1,$v1,$v0
  or    $a1,$a1,$v0
  sw    $a1,($a0)
end;
function  TCAN1_C1RXM1.getSID : TBits_11;
asm
  lw      $v1,($a0)
  srl     $a1,$a1,21
  lui    $v0,65504
  and    $a1,$a1,$v0
end;
procedure TCAN1_C1RXM1.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TCAN1_C1RXM1.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TCAN1_C1RXM2.setEID(thebits : TBits_18); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  sll     $a1,$a1,0
  lui    $v0,65532
  and   $v1,$v1,$v0
  or    $a1,$a1,$v0
  sw    $a1,($a0)
end;
function  TCAN1_C1RXM2.getEID : TBits_18;
asm
  lw      $v1,($a0)
  srl     $a1,$a1,0
  lui    $v0,3
  ori    $v0,$v0,65535
  and    $a1,$a1,$v0
end;
procedure TCAN1_C1RXM2.setMIDE; assembler; nostackframe; inline;
asm
  lui     $a1,8
  sw $a1,8($a0)
end;
procedure TCAN1_C1RXM2.clearMIDE; assembler; nostackframe; inline;
asm
  lui     $a1,8
  sw $a1,4($a0)
end;
procedure TCAN1_C1RXM2.setMIDE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,19,1
  sw      $v1,($a0)
end;
function  TCAN1_C1RXM2.getMIDE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,19,1
end;
procedure TCAN1_C1RXM2.setSID(thebits : TBits_11); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  sll     $a1,$a1,21
  lui    $v0,31
  ori    $v0,$v0,65535
  and   $v1,$v1,$v0
  or    $a1,$a1,$v0
  sw    $a1,($a0)
end;
function  TCAN1_C1RXM2.getSID : TBits_11;
asm
  lw      $v1,($a0)
  srl     $a1,$a1,21
  lui    $v0,65504
  and    $a1,$a1,$v0
end;
procedure TCAN1_C1RXM2.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TCAN1_C1RXM2.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TCAN1_C1RXM3.setEID(thebits : TBits_18); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  sll     $a1,$a1,0
  lui    $v0,65532
  and   $v1,$v1,$v0
  or    $a1,$a1,$v0
  sw    $a1,($a0)
end;
function  TCAN1_C1RXM3.getEID : TBits_18;
asm
  lw      $v1,($a0)
  srl     $a1,$a1,0
  lui    $v0,3
  ori    $v0,$v0,65535
  and    $a1,$a1,$v0
end;
procedure TCAN1_C1RXM3.setMIDE; assembler; nostackframe; inline;
asm
  lui     $a1,8
  sw $a1,8($a0)
end;
procedure TCAN1_C1RXM3.clearMIDE; assembler; nostackframe; inline;
asm
  lui     $a1,8
  sw $a1,4($a0)
end;
procedure TCAN1_C1RXM3.setMIDE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,19,1
  sw      $v1,($a0)
end;
function  TCAN1_C1RXM3.getMIDE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,19,1
end;
procedure TCAN1_C1RXM3.setSID(thebits : TBits_11); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  sll     $a1,$a1,21
  lui    $v0,31
  ori    $v0,$v0,65535
  and   $v1,$v1,$v0
  or    $a1,$a1,$v0
  sw    $a1,($a0)
end;
function  TCAN1_C1RXM3.getSID : TBits_11;
asm
  lw      $v1,($a0)
  srl     $a1,$a1,21
  lui    $v0,65504
  and    $a1,$a1,$v0
end;
procedure TCAN1_C1RXM3.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TCAN1_C1RXM3.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TCAN1_C1FLTCON0.setFSEL0(thebits : TBits_5); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,5
  sw      $v1,($a0)
end;
function  TCAN1_C1FLTCON0.getFSEL0 : TBits_5;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,5
end;
procedure TCAN1_C1FLTCON0.setMSEL0(thebits : TBits_2); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,5,2
  sw      $v1,($a0)
end;
function  TCAN1_C1FLTCON0.getMSEL0 : TBits_2;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,5,2
end;
procedure TCAN1_C1FLTCON0.setFLTEN0; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,8($a0)
end;
procedure TCAN1_C1FLTCON0.clearFLTEN0; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,4($a0)
end;
procedure TCAN1_C1FLTCON0.setFLTEN0(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,7,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FLTCON0.getFLTEN0 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,7,1
end;
procedure TCAN1_C1FLTCON0.setFSEL1(thebits : TBits_5); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,8,5
  sw      $v1,($a0)
end;
function  TCAN1_C1FLTCON0.getFSEL1 : TBits_5;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,8,5
end;
procedure TCAN1_C1FLTCON0.setMSEL1(thebits : TBits_2); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,13,2
  sw      $v1,($a0)
end;
function  TCAN1_C1FLTCON0.getMSEL1 : TBits_2;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,13,2
end;
procedure TCAN1_C1FLTCON0.setFLTEN1; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,8($a0)
end;
procedure TCAN1_C1FLTCON0.clearFLTEN1; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,4($a0)
end;
procedure TCAN1_C1FLTCON0.setFLTEN1(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,15,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FLTCON0.getFLTEN1 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,15,1
end;
procedure TCAN1_C1FLTCON0.setFSEL2(thebits : TBits_5); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,16,5
  sw      $v1,($a0)
end;
function  TCAN1_C1FLTCON0.getFSEL2 : TBits_5;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,16,5
end;
procedure TCAN1_C1FLTCON0.setMSEL2(thebits : TBits_2); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,21,2
  sw      $v1,($a0)
end;
function  TCAN1_C1FLTCON0.getMSEL2 : TBits_2;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,21,2
end;
procedure TCAN1_C1FLTCON0.setFLTEN2; assembler; nostackframe; inline;
asm
  lui     $a1,128
  sw $a1,8($a0)
end;
procedure TCAN1_C1FLTCON0.clearFLTEN2; assembler; nostackframe; inline;
asm
  lui     $a1,128
  sw $a1,4($a0)
end;
procedure TCAN1_C1FLTCON0.setFLTEN2(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,23,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FLTCON0.getFLTEN2 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,23,1
end;
procedure TCAN1_C1FLTCON0.setFSEL3(thebits : TBits_5); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,24,5
  sw      $v1,($a0)
end;
function  TCAN1_C1FLTCON0.getFSEL3 : TBits_5;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,24,5
end;
procedure TCAN1_C1FLTCON0.setMSEL3(thebits : TBits_2); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,29,2
  sw      $v1,($a0)
end;
function  TCAN1_C1FLTCON0.getMSEL3 : TBits_2;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,29,2
end;
procedure TCAN1_C1FLTCON0.setFLTEN3; assembler; nostackframe; inline;
asm
  lui     $a1,32768
  sw $a1,8($a0)
end;
procedure TCAN1_C1FLTCON0.clearFLTEN3; assembler; nostackframe; inline;
asm
  lui     $a1,32768
  sw $a1,4($a0)
end;
procedure TCAN1_C1FLTCON0.setFLTEN3(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,31,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FLTCON0.getFLTEN3 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,31,1
end;
procedure TCAN1_C1FLTCON0.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TCAN1_C1FLTCON0.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TCAN1_C1FLTCON1.setFSEL4(thebits : TBits_5); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,5
  sw      $v1,($a0)
end;
function  TCAN1_C1FLTCON1.getFSEL4 : TBits_5;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,5
end;
procedure TCAN1_C1FLTCON1.setMSEL4(thebits : TBits_2); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,5,2
  sw      $v1,($a0)
end;
function  TCAN1_C1FLTCON1.getMSEL4 : TBits_2;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,5,2
end;
procedure TCAN1_C1FLTCON1.setFLTEN4; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,8($a0)
end;
procedure TCAN1_C1FLTCON1.clearFLTEN4; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,4($a0)
end;
procedure TCAN1_C1FLTCON1.setFLTEN4(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,7,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FLTCON1.getFLTEN4 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,7,1
end;
procedure TCAN1_C1FLTCON1.setFSEL5(thebits : TBits_5); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,8,5
  sw      $v1,($a0)
end;
function  TCAN1_C1FLTCON1.getFSEL5 : TBits_5;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,8,5
end;
procedure TCAN1_C1FLTCON1.setMSEL5(thebits : TBits_2); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,13,2
  sw      $v1,($a0)
end;
function  TCAN1_C1FLTCON1.getMSEL5 : TBits_2;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,13,2
end;
procedure TCAN1_C1FLTCON1.setFLTEN5; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,8($a0)
end;
procedure TCAN1_C1FLTCON1.clearFLTEN5; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,4($a0)
end;
procedure TCAN1_C1FLTCON1.setFLTEN5(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,15,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FLTCON1.getFLTEN5 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,15,1
end;
procedure TCAN1_C1FLTCON1.setFSEL6(thebits : TBits_5); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,16,5
  sw      $v1,($a0)
end;
function  TCAN1_C1FLTCON1.getFSEL6 : TBits_5;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,16,5
end;
procedure TCAN1_C1FLTCON1.setMSEL6(thebits : TBits_2); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,21,2
  sw      $v1,($a0)
end;
function  TCAN1_C1FLTCON1.getMSEL6 : TBits_2;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,21,2
end;
procedure TCAN1_C1FLTCON1.setFLTEN6; assembler; nostackframe; inline;
asm
  lui     $a1,128
  sw $a1,8($a0)
end;
procedure TCAN1_C1FLTCON1.clearFLTEN6; assembler; nostackframe; inline;
asm
  lui     $a1,128
  sw $a1,4($a0)
end;
procedure TCAN1_C1FLTCON1.setFLTEN6(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,23,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FLTCON1.getFLTEN6 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,23,1
end;
procedure TCAN1_C1FLTCON1.setFSEL7(thebits : TBits_5); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,24,5
  sw      $v1,($a0)
end;
function  TCAN1_C1FLTCON1.getFSEL7 : TBits_5;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,24,5
end;
procedure TCAN1_C1FLTCON1.setMSEL7(thebits : TBits_2); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,29,2
  sw      $v1,($a0)
end;
function  TCAN1_C1FLTCON1.getMSEL7 : TBits_2;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,29,2
end;
procedure TCAN1_C1FLTCON1.setFLTEN7; assembler; nostackframe; inline;
asm
  lui     $a1,32768
  sw $a1,8($a0)
end;
procedure TCAN1_C1FLTCON1.clearFLTEN7; assembler; nostackframe; inline;
asm
  lui     $a1,32768
  sw $a1,4($a0)
end;
procedure TCAN1_C1FLTCON1.setFLTEN7(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,31,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FLTCON1.getFLTEN7 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,31,1
end;
procedure TCAN1_C1FLTCON1.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TCAN1_C1FLTCON1.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TCAN1_C1FLTCON2.setFSEL8(thebits : TBits_5); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,5
  sw      $v1,($a0)
end;
function  TCAN1_C1FLTCON2.getFSEL8 : TBits_5;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,5
end;
procedure TCAN1_C1FLTCON2.setMSEL8(thebits : TBits_2); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,5,2
  sw      $v1,($a0)
end;
function  TCAN1_C1FLTCON2.getMSEL8 : TBits_2;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,5,2
end;
procedure TCAN1_C1FLTCON2.setFLTEN8; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,8($a0)
end;
procedure TCAN1_C1FLTCON2.clearFLTEN8; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,4($a0)
end;
procedure TCAN1_C1FLTCON2.setFLTEN8(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,7,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FLTCON2.getFLTEN8 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,7,1
end;
procedure TCAN1_C1FLTCON2.setFSEL9(thebits : TBits_5); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,8,5
  sw      $v1,($a0)
end;
function  TCAN1_C1FLTCON2.getFSEL9 : TBits_5;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,8,5
end;
procedure TCAN1_C1FLTCON2.setMSEL9(thebits : TBits_2); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,13,2
  sw      $v1,($a0)
end;
function  TCAN1_C1FLTCON2.getMSEL9 : TBits_2;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,13,2
end;
procedure TCAN1_C1FLTCON2.setFLTEN9; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,8($a0)
end;
procedure TCAN1_C1FLTCON2.clearFLTEN9; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,4($a0)
end;
procedure TCAN1_C1FLTCON2.setFLTEN9(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,15,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FLTCON2.getFLTEN9 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,15,1
end;
procedure TCAN1_C1FLTCON2.setFSEL10(thebits : TBits_5); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,16,5
  sw      $v1,($a0)
end;
function  TCAN1_C1FLTCON2.getFSEL10 : TBits_5;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,16,5
end;
procedure TCAN1_C1FLTCON2.setMSEL10(thebits : TBits_2); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,21,2
  sw      $v1,($a0)
end;
function  TCAN1_C1FLTCON2.getMSEL10 : TBits_2;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,21,2
end;
procedure TCAN1_C1FLTCON2.setFLTEN10; assembler; nostackframe; inline;
asm
  lui     $a1,128
  sw $a1,8($a0)
end;
procedure TCAN1_C1FLTCON2.clearFLTEN10; assembler; nostackframe; inline;
asm
  lui     $a1,128
  sw $a1,4($a0)
end;
procedure TCAN1_C1FLTCON2.setFLTEN10(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,23,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FLTCON2.getFLTEN10 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,23,1
end;
procedure TCAN1_C1FLTCON2.setFSEL11(thebits : TBits_5); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,24,5
  sw      $v1,($a0)
end;
function  TCAN1_C1FLTCON2.getFSEL11 : TBits_5;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,24,5
end;
procedure TCAN1_C1FLTCON2.setMSEL11(thebits : TBits_2); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,29,2
  sw      $v1,($a0)
end;
function  TCAN1_C1FLTCON2.getMSEL11 : TBits_2;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,29,2
end;
procedure TCAN1_C1FLTCON2.setFLTEN11; assembler; nostackframe; inline;
asm
  lui     $a1,32768
  sw $a1,8($a0)
end;
procedure TCAN1_C1FLTCON2.clearFLTEN11; assembler; nostackframe; inline;
asm
  lui     $a1,32768
  sw $a1,4($a0)
end;
procedure TCAN1_C1FLTCON2.setFLTEN11(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,31,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FLTCON2.getFLTEN11 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,31,1
end;
procedure TCAN1_C1FLTCON2.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TCAN1_C1FLTCON2.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TCAN1_C1FLTCON3.setFSEL12(thebits : TBits_5); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,5
  sw      $v1,($a0)
end;
function  TCAN1_C1FLTCON3.getFSEL12 : TBits_5;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,5
end;
procedure TCAN1_C1FLTCON3.setMSEL12(thebits : TBits_2); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,5,2
  sw      $v1,($a0)
end;
function  TCAN1_C1FLTCON3.getMSEL12 : TBits_2;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,5,2
end;
procedure TCAN1_C1FLTCON3.setFLTEN12; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,8($a0)
end;
procedure TCAN1_C1FLTCON3.clearFLTEN12; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,4($a0)
end;
procedure TCAN1_C1FLTCON3.setFLTEN12(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,7,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FLTCON3.getFLTEN12 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,7,1
end;
procedure TCAN1_C1FLTCON3.setFSEL13(thebits : TBits_5); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,8,5
  sw      $v1,($a0)
end;
function  TCAN1_C1FLTCON3.getFSEL13 : TBits_5;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,8,5
end;
procedure TCAN1_C1FLTCON3.setMSEL13(thebits : TBits_2); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,13,2
  sw      $v1,($a0)
end;
function  TCAN1_C1FLTCON3.getMSEL13 : TBits_2;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,13,2
end;
procedure TCAN1_C1FLTCON3.setFLTEN13; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,8($a0)
end;
procedure TCAN1_C1FLTCON3.clearFLTEN13; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,4($a0)
end;
procedure TCAN1_C1FLTCON3.setFLTEN13(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,15,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FLTCON3.getFLTEN13 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,15,1
end;
procedure TCAN1_C1FLTCON3.setFSEL14(thebits : TBits_5); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,16,5
  sw      $v1,($a0)
end;
function  TCAN1_C1FLTCON3.getFSEL14 : TBits_5;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,16,5
end;
procedure TCAN1_C1FLTCON3.setMSEL14(thebits : TBits_2); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,21,2
  sw      $v1,($a0)
end;
function  TCAN1_C1FLTCON3.getMSEL14 : TBits_2;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,21,2
end;
procedure TCAN1_C1FLTCON3.setFLTEN14; assembler; nostackframe; inline;
asm
  lui     $a1,128
  sw $a1,8($a0)
end;
procedure TCAN1_C1FLTCON3.clearFLTEN14; assembler; nostackframe; inline;
asm
  lui     $a1,128
  sw $a1,4($a0)
end;
procedure TCAN1_C1FLTCON3.setFLTEN14(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,23,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FLTCON3.getFLTEN14 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,23,1
end;
procedure TCAN1_C1FLTCON3.setFSEL15(thebits : TBits_5); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,24,5
  sw      $v1,($a0)
end;
function  TCAN1_C1FLTCON3.getFSEL15 : TBits_5;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,24,5
end;
procedure TCAN1_C1FLTCON3.setMSEL15(thebits : TBits_2); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,29,2
  sw      $v1,($a0)
end;
function  TCAN1_C1FLTCON3.getMSEL15 : TBits_2;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,29,2
end;
procedure TCAN1_C1FLTCON3.setFLTEN15; assembler; nostackframe; inline;
asm
  lui     $a1,32768
  sw $a1,8($a0)
end;
procedure TCAN1_C1FLTCON3.clearFLTEN15; assembler; nostackframe; inline;
asm
  lui     $a1,32768
  sw $a1,4($a0)
end;
procedure TCAN1_C1FLTCON3.setFLTEN15(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,31,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FLTCON3.getFLTEN15 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,31,1
end;
procedure TCAN1_C1FLTCON3.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TCAN1_C1FLTCON3.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TCAN1_C1FLTCON4.setFSEL16(thebits : TBits_5); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,5
  sw      $v1,($a0)
end;
function  TCAN1_C1FLTCON4.getFSEL16 : TBits_5;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,5
end;
procedure TCAN1_C1FLTCON4.setMSEL16(thebits : TBits_2); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,5,2
  sw      $v1,($a0)
end;
function  TCAN1_C1FLTCON4.getMSEL16 : TBits_2;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,5,2
end;
procedure TCAN1_C1FLTCON4.setFLTEN16; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,8($a0)
end;
procedure TCAN1_C1FLTCON4.clearFLTEN16; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,4($a0)
end;
procedure TCAN1_C1FLTCON4.setFLTEN16(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,7,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FLTCON4.getFLTEN16 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,7,1
end;
procedure TCAN1_C1FLTCON4.setFSEL17(thebits : TBits_5); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,8,5
  sw      $v1,($a0)
end;
function  TCAN1_C1FLTCON4.getFSEL17 : TBits_5;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,8,5
end;
procedure TCAN1_C1FLTCON4.setMSEL17(thebits : TBits_2); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,13,2
  sw      $v1,($a0)
end;
function  TCAN1_C1FLTCON4.getMSEL17 : TBits_2;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,13,2
end;
procedure TCAN1_C1FLTCON4.setFLTEN17; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,8($a0)
end;
procedure TCAN1_C1FLTCON4.clearFLTEN17; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,4($a0)
end;
procedure TCAN1_C1FLTCON4.setFLTEN17(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,15,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FLTCON4.getFLTEN17 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,15,1
end;
procedure TCAN1_C1FLTCON4.setFSEL18(thebits : TBits_5); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,16,5
  sw      $v1,($a0)
end;
function  TCAN1_C1FLTCON4.getFSEL18 : TBits_5;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,16,5
end;
procedure TCAN1_C1FLTCON4.setMSEL18(thebits : TBits_2); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,21,2
  sw      $v1,($a0)
end;
function  TCAN1_C1FLTCON4.getMSEL18 : TBits_2;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,21,2
end;
procedure TCAN1_C1FLTCON4.setFLTEN18; assembler; nostackframe; inline;
asm
  lui     $a1,128
  sw $a1,8($a0)
end;
procedure TCAN1_C1FLTCON4.clearFLTEN18; assembler; nostackframe; inline;
asm
  lui     $a1,128
  sw $a1,4($a0)
end;
procedure TCAN1_C1FLTCON4.setFLTEN18(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,23,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FLTCON4.getFLTEN18 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,23,1
end;
procedure TCAN1_C1FLTCON4.setFSEL19(thebits : TBits_5); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,24,5
  sw      $v1,($a0)
end;
function  TCAN1_C1FLTCON4.getFSEL19 : TBits_5;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,24,5
end;
procedure TCAN1_C1FLTCON4.setMSEL19(thebits : TBits_2); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,29,2
  sw      $v1,($a0)
end;
function  TCAN1_C1FLTCON4.getMSEL19 : TBits_2;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,29,2
end;
procedure TCAN1_C1FLTCON4.setFLTEN19; assembler; nostackframe; inline;
asm
  lui     $a1,32768
  sw $a1,8($a0)
end;
procedure TCAN1_C1FLTCON4.clearFLTEN19; assembler; nostackframe; inline;
asm
  lui     $a1,32768
  sw $a1,4($a0)
end;
procedure TCAN1_C1FLTCON4.setFLTEN19(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,31,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FLTCON4.getFLTEN19 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,31,1
end;
procedure TCAN1_C1FLTCON4.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TCAN1_C1FLTCON4.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TCAN1_C1FLTCON5.setFSEL20(thebits : TBits_5); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,5
  sw      $v1,($a0)
end;
function  TCAN1_C1FLTCON5.getFSEL20 : TBits_5;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,5
end;
procedure TCAN1_C1FLTCON5.setMSEL20(thebits : TBits_2); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,5,2
  sw      $v1,($a0)
end;
function  TCAN1_C1FLTCON5.getMSEL20 : TBits_2;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,5,2
end;
procedure TCAN1_C1FLTCON5.setFLTEN20; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,8($a0)
end;
procedure TCAN1_C1FLTCON5.clearFLTEN20; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,4($a0)
end;
procedure TCAN1_C1FLTCON5.setFLTEN20(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,7,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FLTCON5.getFLTEN20 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,7,1
end;
procedure TCAN1_C1FLTCON5.setFSEL21(thebits : TBits_5); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,8,5
  sw      $v1,($a0)
end;
function  TCAN1_C1FLTCON5.getFSEL21 : TBits_5;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,8,5
end;
procedure TCAN1_C1FLTCON5.setMSEL21(thebits : TBits_2); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,13,2
  sw      $v1,($a0)
end;
function  TCAN1_C1FLTCON5.getMSEL21 : TBits_2;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,13,2
end;
procedure TCAN1_C1FLTCON5.setFLTEN21; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,8($a0)
end;
procedure TCAN1_C1FLTCON5.clearFLTEN21; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,4($a0)
end;
procedure TCAN1_C1FLTCON5.setFLTEN21(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,15,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FLTCON5.getFLTEN21 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,15,1
end;
procedure TCAN1_C1FLTCON5.setFSEL22(thebits : TBits_5); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,16,5
  sw      $v1,($a0)
end;
function  TCAN1_C1FLTCON5.getFSEL22 : TBits_5;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,16,5
end;
procedure TCAN1_C1FLTCON5.setMSEL22(thebits : TBits_2); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,21,2
  sw      $v1,($a0)
end;
function  TCAN1_C1FLTCON5.getMSEL22 : TBits_2;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,21,2
end;
procedure TCAN1_C1FLTCON5.setFLTEN22; assembler; nostackframe; inline;
asm
  lui     $a1,128
  sw $a1,8($a0)
end;
procedure TCAN1_C1FLTCON5.clearFLTEN22; assembler; nostackframe; inline;
asm
  lui     $a1,128
  sw $a1,4($a0)
end;
procedure TCAN1_C1FLTCON5.setFLTEN22(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,23,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FLTCON5.getFLTEN22 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,23,1
end;
procedure TCAN1_C1FLTCON5.setFSEL23(thebits : TBits_5); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,24,5
  sw      $v1,($a0)
end;
function  TCAN1_C1FLTCON5.getFSEL23 : TBits_5;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,24,5
end;
procedure TCAN1_C1FLTCON5.setMSEL23(thebits : TBits_2); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,29,2
  sw      $v1,($a0)
end;
function  TCAN1_C1FLTCON5.getMSEL23 : TBits_2;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,29,2
end;
procedure TCAN1_C1FLTCON5.setFLTEN23; assembler; nostackframe; inline;
asm
  lui     $a1,32768
  sw $a1,8($a0)
end;
procedure TCAN1_C1FLTCON5.clearFLTEN23; assembler; nostackframe; inline;
asm
  lui     $a1,32768
  sw $a1,4($a0)
end;
procedure TCAN1_C1FLTCON5.setFLTEN23(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,31,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FLTCON5.getFLTEN23 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,31,1
end;
procedure TCAN1_C1FLTCON5.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TCAN1_C1FLTCON5.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TCAN1_C1FLTCON6.setFSEL24(thebits : TBits_5); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,5
  sw      $v1,($a0)
end;
function  TCAN1_C1FLTCON6.getFSEL24 : TBits_5;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,5
end;
procedure TCAN1_C1FLTCON6.setMSEL24(thebits : TBits_2); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,5,2
  sw      $v1,($a0)
end;
function  TCAN1_C1FLTCON6.getMSEL24 : TBits_2;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,5,2
end;
procedure TCAN1_C1FLTCON6.setFLTEN24; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,8($a0)
end;
procedure TCAN1_C1FLTCON6.clearFLTEN24; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,4($a0)
end;
procedure TCAN1_C1FLTCON6.setFLTEN24(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,7,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FLTCON6.getFLTEN24 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,7,1
end;
procedure TCAN1_C1FLTCON6.setFSEL25(thebits : TBits_5); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,8,5
  sw      $v1,($a0)
end;
function  TCAN1_C1FLTCON6.getFSEL25 : TBits_5;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,8,5
end;
procedure TCAN1_C1FLTCON6.setMSEL25(thebits : TBits_2); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,13,2
  sw      $v1,($a0)
end;
function  TCAN1_C1FLTCON6.getMSEL25 : TBits_2;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,13,2
end;
procedure TCAN1_C1FLTCON6.setFLTEN25; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,8($a0)
end;
procedure TCAN1_C1FLTCON6.clearFLTEN25; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,4($a0)
end;
procedure TCAN1_C1FLTCON6.setFLTEN25(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,15,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FLTCON6.getFLTEN25 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,15,1
end;
procedure TCAN1_C1FLTCON6.setFSEL26(thebits : TBits_5); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,16,5
  sw      $v1,($a0)
end;
function  TCAN1_C1FLTCON6.getFSEL26 : TBits_5;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,16,5
end;
procedure TCAN1_C1FLTCON6.setMSEL26(thebits : TBits_2); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,21,2
  sw      $v1,($a0)
end;
function  TCAN1_C1FLTCON6.getMSEL26 : TBits_2;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,21,2
end;
procedure TCAN1_C1FLTCON6.setFLTEN26; assembler; nostackframe; inline;
asm
  lui     $a1,128
  sw $a1,8($a0)
end;
procedure TCAN1_C1FLTCON6.clearFLTEN26; assembler; nostackframe; inline;
asm
  lui     $a1,128
  sw $a1,4($a0)
end;
procedure TCAN1_C1FLTCON6.setFLTEN26(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,23,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FLTCON6.getFLTEN26 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,23,1
end;
procedure TCAN1_C1FLTCON6.setFSEL27(thebits : TBits_5); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,24,5
  sw      $v1,($a0)
end;
function  TCAN1_C1FLTCON6.getFSEL27 : TBits_5;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,24,5
end;
procedure TCAN1_C1FLTCON6.setMSEL27(thebits : TBits_2); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,29,2
  sw      $v1,($a0)
end;
function  TCAN1_C1FLTCON6.getMSEL27 : TBits_2;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,29,2
end;
procedure TCAN1_C1FLTCON6.setFLTEN27; assembler; nostackframe; inline;
asm
  lui     $a1,32768
  sw $a1,8($a0)
end;
procedure TCAN1_C1FLTCON6.clearFLTEN27; assembler; nostackframe; inline;
asm
  lui     $a1,32768
  sw $a1,4($a0)
end;
procedure TCAN1_C1FLTCON6.setFLTEN27(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,31,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FLTCON6.getFLTEN27 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,31,1
end;
procedure TCAN1_C1FLTCON6.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TCAN1_C1FLTCON6.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TCAN1_C1FLTCON7.setFSEL28(thebits : TBits_5); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,5
  sw      $v1,($a0)
end;
function  TCAN1_C1FLTCON7.getFSEL28 : TBits_5;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,5
end;
procedure TCAN1_C1FLTCON7.setMSEL28(thebits : TBits_2); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,5,2
  sw      $v1,($a0)
end;
function  TCAN1_C1FLTCON7.getMSEL28 : TBits_2;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,5,2
end;
procedure TCAN1_C1FLTCON7.setFLTEN28; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,8($a0)
end;
procedure TCAN1_C1FLTCON7.clearFLTEN28; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,4($a0)
end;
procedure TCAN1_C1FLTCON7.setFLTEN28(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,7,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FLTCON7.getFLTEN28 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,7,1
end;
procedure TCAN1_C1FLTCON7.setFSEL29(thebits : TBits_5); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,8,5
  sw      $v1,($a0)
end;
function  TCAN1_C1FLTCON7.getFSEL29 : TBits_5;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,8,5
end;
procedure TCAN1_C1FLTCON7.setMSEL29(thebits : TBits_2); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,13,2
  sw      $v1,($a0)
end;
function  TCAN1_C1FLTCON7.getMSEL29 : TBits_2;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,13,2
end;
procedure TCAN1_C1FLTCON7.setFLTEN29; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,8($a0)
end;
procedure TCAN1_C1FLTCON7.clearFLTEN29; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,4($a0)
end;
procedure TCAN1_C1FLTCON7.setFLTEN29(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,15,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FLTCON7.getFLTEN29 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,15,1
end;
procedure TCAN1_C1FLTCON7.setFSEL30(thebits : TBits_5); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,16,5
  sw      $v1,($a0)
end;
function  TCAN1_C1FLTCON7.getFSEL30 : TBits_5;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,16,5
end;
procedure TCAN1_C1FLTCON7.setMSEL30(thebits : TBits_2); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,21,2
  sw      $v1,($a0)
end;
function  TCAN1_C1FLTCON7.getMSEL30 : TBits_2;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,21,2
end;
procedure TCAN1_C1FLTCON7.setFLTEN30; assembler; nostackframe; inline;
asm
  lui     $a1,128
  sw $a1,8($a0)
end;
procedure TCAN1_C1FLTCON7.clearFLTEN30; assembler; nostackframe; inline;
asm
  lui     $a1,128
  sw $a1,4($a0)
end;
procedure TCAN1_C1FLTCON7.setFLTEN30(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,23,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FLTCON7.getFLTEN30 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,23,1
end;
procedure TCAN1_C1FLTCON7.setFSEL31(thebits : TBits_5); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,24,5
  sw      $v1,($a0)
end;
function  TCAN1_C1FLTCON7.getFSEL31 : TBits_5;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,24,5
end;
procedure TCAN1_C1FLTCON7.setMSEL31(thebits : TBits_2); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,29,2
  sw      $v1,($a0)
end;
function  TCAN1_C1FLTCON7.getMSEL31 : TBits_2;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,29,2
end;
procedure TCAN1_C1FLTCON7.setFLTEN31; assembler; nostackframe; inline;
asm
  lui     $a1,32768
  sw $a1,8($a0)
end;
procedure TCAN1_C1FLTCON7.clearFLTEN31; assembler; nostackframe; inline;
asm
  lui     $a1,32768
  sw $a1,4($a0)
end;
procedure TCAN1_C1FLTCON7.setFLTEN31(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,31,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FLTCON7.getFLTEN31 : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,31,1
end;
procedure TCAN1_C1FLTCON7.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TCAN1_C1FLTCON7.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TCAN1_C1RXF0.setEID(thebits : TBits_18); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  sll     $a1,$a1,0
  lui    $v0,65532
  and   $v1,$v1,$v0
  or    $a1,$a1,$v0
  sw    $a1,($a0)
end;
function  TCAN1_C1RXF0.getEID : TBits_18;
asm
  lw      $v1,($a0)
  srl     $a1,$a1,0
  lui    $v0,3
  ori    $v0,$v0,65535
  and    $a1,$a1,$v0
end;
procedure TCAN1_C1RXF0.setEXID; assembler; nostackframe; inline;
asm
  lui     $a1,8
  sw $a1,8($a0)
end;
procedure TCAN1_C1RXF0.clearEXID; assembler; nostackframe; inline;
asm
  lui     $a1,8
  sw $a1,4($a0)
end;
procedure TCAN1_C1RXF0.setEXID(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,19,1
  sw      $v1,($a0)
end;
function  TCAN1_C1RXF0.getEXID : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,19,1
end;
procedure TCAN1_C1RXF0.setSID(thebits : TBits_11); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  sll     $a1,$a1,21
  lui    $v0,31
  ori    $v0,$v0,65535
  and   $v1,$v1,$v0
  or    $a1,$a1,$v0
  sw    $a1,($a0)
end;
function  TCAN1_C1RXF0.getSID : TBits_11;
asm
  lw      $v1,($a0)
  srl     $a1,$a1,21
  lui    $v0,65504
  and    $a1,$a1,$v0
end;
procedure TCAN1_C1RXF0.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TCAN1_C1RXF0.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TCAN1_C1RXF1.setEID(thebits : TBits_18); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  sll     $a1,$a1,0
  lui    $v0,65532
  and   $v1,$v1,$v0
  or    $a1,$a1,$v0
  sw    $a1,($a0)
end;
function  TCAN1_C1RXF1.getEID : TBits_18;
asm
  lw      $v1,($a0)
  srl     $a1,$a1,0
  lui    $v0,3
  ori    $v0,$v0,65535
  and    $a1,$a1,$v0
end;
procedure TCAN1_C1RXF1.setEXID; assembler; nostackframe; inline;
asm
  lui     $a1,8
  sw $a1,8($a0)
end;
procedure TCAN1_C1RXF1.clearEXID; assembler; nostackframe; inline;
asm
  lui     $a1,8
  sw $a1,4($a0)
end;
procedure TCAN1_C1RXF1.setEXID(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,19,1
  sw      $v1,($a0)
end;
function  TCAN1_C1RXF1.getEXID : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,19,1
end;
procedure TCAN1_C1RXF1.setSID(thebits : TBits_11); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  sll     $a1,$a1,21
  lui    $v0,31
  ori    $v0,$v0,65535
  and   $v1,$v1,$v0
  or    $a1,$a1,$v0
  sw    $a1,($a0)
end;
function  TCAN1_C1RXF1.getSID : TBits_11;
asm
  lw      $v1,($a0)
  srl     $a1,$a1,21
  lui    $v0,65504
  and    $a1,$a1,$v0
end;
procedure TCAN1_C1RXF1.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TCAN1_C1RXF1.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TCAN1_C1RXF2.setEID(thebits : TBits_18); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  sll     $a1,$a1,0
  lui    $v0,65532
  and   $v1,$v1,$v0
  or    $a1,$a1,$v0
  sw    $a1,($a0)
end;
function  TCAN1_C1RXF2.getEID : TBits_18;
asm
  lw      $v1,($a0)
  srl     $a1,$a1,0
  lui    $v0,3
  ori    $v0,$v0,65535
  and    $a1,$a1,$v0
end;
procedure TCAN1_C1RXF2.setEXID; assembler; nostackframe; inline;
asm
  lui     $a1,8
  sw $a1,8($a0)
end;
procedure TCAN1_C1RXF2.clearEXID; assembler; nostackframe; inline;
asm
  lui     $a1,8
  sw $a1,4($a0)
end;
procedure TCAN1_C1RXF2.setEXID(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,19,1
  sw      $v1,($a0)
end;
function  TCAN1_C1RXF2.getEXID : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,19,1
end;
procedure TCAN1_C1RXF2.setSID(thebits : TBits_11); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  sll     $a1,$a1,21
  lui    $v0,31
  ori    $v0,$v0,65535
  and   $v1,$v1,$v0
  or    $a1,$a1,$v0
  sw    $a1,($a0)
end;
function  TCAN1_C1RXF2.getSID : TBits_11;
asm
  lw      $v1,($a0)
  srl     $a1,$a1,21
  lui    $v0,65504
  and    $a1,$a1,$v0
end;
procedure TCAN1_C1RXF2.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TCAN1_C1RXF2.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TCAN1_C1RXF3.setEID(thebits : TBits_18); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  sll     $a1,$a1,0
  lui    $v0,65532
  and   $v1,$v1,$v0
  or    $a1,$a1,$v0
  sw    $a1,($a0)
end;
function  TCAN1_C1RXF3.getEID : TBits_18;
asm
  lw      $v1,($a0)
  srl     $a1,$a1,0
  lui    $v0,3
  ori    $v0,$v0,65535
  and    $a1,$a1,$v0
end;
procedure TCAN1_C1RXF3.setEXID; assembler; nostackframe; inline;
asm
  lui     $a1,8
  sw $a1,8($a0)
end;
procedure TCAN1_C1RXF3.clearEXID; assembler; nostackframe; inline;
asm
  lui     $a1,8
  sw $a1,4($a0)
end;
procedure TCAN1_C1RXF3.setEXID(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,19,1
  sw      $v1,($a0)
end;
function  TCAN1_C1RXF3.getEXID : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,19,1
end;
procedure TCAN1_C1RXF3.setSID(thebits : TBits_11); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  sll     $a1,$a1,21
  lui    $v0,31
  ori    $v0,$v0,65535
  and   $v1,$v1,$v0
  or    $a1,$a1,$v0
  sw    $a1,($a0)
end;
function  TCAN1_C1RXF3.getSID : TBits_11;
asm
  lw      $v1,($a0)
  srl     $a1,$a1,21
  lui    $v0,65504
  and    $a1,$a1,$v0
end;
procedure TCAN1_C1RXF3.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TCAN1_C1RXF3.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TCAN1_C1RXF4.setEID(thebits : TBits_18); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  sll     $a1,$a1,0
  lui    $v0,65532
  and   $v1,$v1,$v0
  or    $a1,$a1,$v0
  sw    $a1,($a0)
end;
function  TCAN1_C1RXF4.getEID : TBits_18;
asm
  lw      $v1,($a0)
  srl     $a1,$a1,0
  lui    $v0,3
  ori    $v0,$v0,65535
  and    $a1,$a1,$v0
end;
procedure TCAN1_C1RXF4.setEXID; assembler; nostackframe; inline;
asm
  lui     $a1,8
  sw $a1,8($a0)
end;
procedure TCAN1_C1RXF4.clearEXID; assembler; nostackframe; inline;
asm
  lui     $a1,8
  sw $a1,4($a0)
end;
procedure TCAN1_C1RXF4.setEXID(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,19,1
  sw      $v1,($a0)
end;
function  TCAN1_C1RXF4.getEXID : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,19,1
end;
procedure TCAN1_C1RXF4.setSID(thebits : TBits_11); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  sll     $a1,$a1,21
  lui    $v0,31
  ori    $v0,$v0,65535
  and   $v1,$v1,$v0
  or    $a1,$a1,$v0
  sw    $a1,($a0)
end;
function  TCAN1_C1RXF4.getSID : TBits_11;
asm
  lw      $v1,($a0)
  srl     $a1,$a1,21
  lui    $v0,65504
  and    $a1,$a1,$v0
end;
procedure TCAN1_C1RXF4.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TCAN1_C1RXF4.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TCAN1_C1RXF5.setEID(thebits : TBits_18); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  sll     $a1,$a1,0
  lui    $v0,65532
  and   $v1,$v1,$v0
  or    $a1,$a1,$v0
  sw    $a1,($a0)
end;
function  TCAN1_C1RXF5.getEID : TBits_18;
asm
  lw      $v1,($a0)
  srl     $a1,$a1,0
  lui    $v0,3
  ori    $v0,$v0,65535
  and    $a1,$a1,$v0
end;
procedure TCAN1_C1RXF5.setEXID; assembler; nostackframe; inline;
asm
  lui     $a1,8
  sw $a1,8($a0)
end;
procedure TCAN1_C1RXF5.clearEXID; assembler; nostackframe; inline;
asm
  lui     $a1,8
  sw $a1,4($a0)
end;
procedure TCAN1_C1RXF5.setEXID(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,19,1
  sw      $v1,($a0)
end;
function  TCAN1_C1RXF5.getEXID : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,19,1
end;
procedure TCAN1_C1RXF5.setSID(thebits : TBits_11); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  sll     $a1,$a1,21
  lui    $v0,31
  ori    $v0,$v0,65535
  and   $v1,$v1,$v0
  or    $a1,$a1,$v0
  sw    $a1,($a0)
end;
function  TCAN1_C1RXF5.getSID : TBits_11;
asm
  lw      $v1,($a0)
  srl     $a1,$a1,21
  lui    $v0,65504
  and    $a1,$a1,$v0
end;
procedure TCAN1_C1RXF5.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TCAN1_C1RXF5.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TCAN1_C1RXF6.setEID(thebits : TBits_18); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  sll     $a1,$a1,0
  lui    $v0,65532
  and   $v1,$v1,$v0
  or    $a1,$a1,$v0
  sw    $a1,($a0)
end;
function  TCAN1_C1RXF6.getEID : TBits_18;
asm
  lw      $v1,($a0)
  srl     $a1,$a1,0
  lui    $v0,3
  ori    $v0,$v0,65535
  and    $a1,$a1,$v0
end;
procedure TCAN1_C1RXF6.setEXID; assembler; nostackframe; inline;
asm
  lui     $a1,8
  sw $a1,8($a0)
end;
procedure TCAN1_C1RXF6.clearEXID; assembler; nostackframe; inline;
asm
  lui     $a1,8
  sw $a1,4($a0)
end;
procedure TCAN1_C1RXF6.setEXID(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,19,1
  sw      $v1,($a0)
end;
function  TCAN1_C1RXF6.getEXID : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,19,1
end;
procedure TCAN1_C1RXF6.setSID(thebits : TBits_11); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  sll     $a1,$a1,21
  lui    $v0,31
  ori    $v0,$v0,65535
  and   $v1,$v1,$v0
  or    $a1,$a1,$v0
  sw    $a1,($a0)
end;
function  TCAN1_C1RXF6.getSID : TBits_11;
asm
  lw      $v1,($a0)
  srl     $a1,$a1,21
  lui    $v0,65504
  and    $a1,$a1,$v0
end;
procedure TCAN1_C1RXF6.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TCAN1_C1RXF6.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TCAN1_C1RXF7.setEID(thebits : TBits_18); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  sll     $a1,$a1,0
  lui    $v0,65532
  and   $v1,$v1,$v0
  or    $a1,$a1,$v0
  sw    $a1,($a0)
end;
function  TCAN1_C1RXF7.getEID : TBits_18;
asm
  lw      $v1,($a0)
  srl     $a1,$a1,0
  lui    $v0,3
  ori    $v0,$v0,65535
  and    $a1,$a1,$v0
end;
procedure TCAN1_C1RXF7.setEXID; assembler; nostackframe; inline;
asm
  lui     $a1,8
  sw $a1,8($a0)
end;
procedure TCAN1_C1RXF7.clearEXID; assembler; nostackframe; inline;
asm
  lui     $a1,8
  sw $a1,4($a0)
end;
procedure TCAN1_C1RXF7.setEXID(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,19,1
  sw      $v1,($a0)
end;
function  TCAN1_C1RXF7.getEXID : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,19,1
end;
procedure TCAN1_C1RXF7.setSID(thebits : TBits_11); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  sll     $a1,$a1,21
  lui    $v0,31
  ori    $v0,$v0,65535
  and   $v1,$v1,$v0
  or    $a1,$a1,$v0
  sw    $a1,($a0)
end;
function  TCAN1_C1RXF7.getSID : TBits_11;
asm
  lw      $v1,($a0)
  srl     $a1,$a1,21
  lui    $v0,65504
  and    $a1,$a1,$v0
end;
procedure TCAN1_C1RXF7.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TCAN1_C1RXF7.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TCAN1_C1RXF8.setEID(thebits : TBits_18); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  sll     $a1,$a1,0
  lui    $v0,65532
  and   $v1,$v1,$v0
  or    $a1,$a1,$v0
  sw    $a1,($a0)
end;
function  TCAN1_C1RXF8.getEID : TBits_18;
asm
  lw      $v1,($a0)
  srl     $a1,$a1,0
  lui    $v0,3
  ori    $v0,$v0,65535
  and    $a1,$a1,$v0
end;
procedure TCAN1_C1RXF8.setEXID; assembler; nostackframe; inline;
asm
  lui     $a1,8
  sw $a1,8($a0)
end;
procedure TCAN1_C1RXF8.clearEXID; assembler; nostackframe; inline;
asm
  lui     $a1,8
  sw $a1,4($a0)
end;
procedure TCAN1_C1RXF8.setEXID(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,19,1
  sw      $v1,($a0)
end;
function  TCAN1_C1RXF8.getEXID : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,19,1
end;
procedure TCAN1_C1RXF8.setSID(thebits : TBits_11); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  sll     $a1,$a1,21
  lui    $v0,31
  ori    $v0,$v0,65535
  and   $v1,$v1,$v0
  or    $a1,$a1,$v0
  sw    $a1,($a0)
end;
function  TCAN1_C1RXF8.getSID : TBits_11;
asm
  lw      $v1,($a0)
  srl     $a1,$a1,21
  lui    $v0,65504
  and    $a1,$a1,$v0
end;
procedure TCAN1_C1RXF8.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TCAN1_C1RXF8.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TCAN1_C1RXF9.setEID(thebits : TBits_18); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  sll     $a1,$a1,0
  lui    $v0,65532
  and   $v1,$v1,$v0
  or    $a1,$a1,$v0
  sw    $a1,($a0)
end;
function  TCAN1_C1RXF9.getEID : TBits_18;
asm
  lw      $v1,($a0)
  srl     $a1,$a1,0
  lui    $v0,3
  ori    $v0,$v0,65535
  and    $a1,$a1,$v0
end;
procedure TCAN1_C1RXF9.setEXID; assembler; nostackframe; inline;
asm
  lui     $a1,8
  sw $a1,8($a0)
end;
procedure TCAN1_C1RXF9.clearEXID; assembler; nostackframe; inline;
asm
  lui     $a1,8
  sw $a1,4($a0)
end;
procedure TCAN1_C1RXF9.setEXID(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,19,1
  sw      $v1,($a0)
end;
function  TCAN1_C1RXF9.getEXID : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,19,1
end;
procedure TCAN1_C1RXF9.setSID(thebits : TBits_11); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  sll     $a1,$a1,21
  lui    $v0,31
  ori    $v0,$v0,65535
  and   $v1,$v1,$v0
  or    $a1,$a1,$v0
  sw    $a1,($a0)
end;
function  TCAN1_C1RXF9.getSID : TBits_11;
asm
  lw      $v1,($a0)
  srl     $a1,$a1,21
  lui    $v0,65504
  and    $a1,$a1,$v0
end;
procedure TCAN1_C1RXF9.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TCAN1_C1RXF9.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TCAN1_C1RXF10.setEID(thebits : TBits_18); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  sll     $a1,$a1,0
  lui    $v0,65532
  and   $v1,$v1,$v0
  or    $a1,$a1,$v0
  sw    $a1,($a0)
end;
function  TCAN1_C1RXF10.getEID : TBits_18;
asm
  lw      $v1,($a0)
  srl     $a1,$a1,0
  lui    $v0,3
  ori    $v0,$v0,65535
  and    $a1,$a1,$v0
end;
procedure TCAN1_C1RXF10.setEXID; assembler; nostackframe; inline;
asm
  lui     $a1,8
  sw $a1,8($a0)
end;
procedure TCAN1_C1RXF10.clearEXID; assembler; nostackframe; inline;
asm
  lui     $a1,8
  sw $a1,4($a0)
end;
procedure TCAN1_C1RXF10.setEXID(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,19,1
  sw      $v1,($a0)
end;
function  TCAN1_C1RXF10.getEXID : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,19,1
end;
procedure TCAN1_C1RXF10.setSID(thebits : TBits_11); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  sll     $a1,$a1,21
  lui    $v0,31
  ori    $v0,$v0,65535
  and   $v1,$v1,$v0
  or    $a1,$a1,$v0
  sw    $a1,($a0)
end;
function  TCAN1_C1RXF10.getSID : TBits_11;
asm
  lw      $v1,($a0)
  srl     $a1,$a1,21
  lui    $v0,65504
  and    $a1,$a1,$v0
end;
procedure TCAN1_C1RXF10.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TCAN1_C1RXF10.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TCAN1_C1RXF11.setEID(thebits : TBits_18); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  sll     $a1,$a1,0
  lui    $v0,65532
  and   $v1,$v1,$v0
  or    $a1,$a1,$v0
  sw    $a1,($a0)
end;
function  TCAN1_C1RXF11.getEID : TBits_18;
asm
  lw      $v1,($a0)
  srl     $a1,$a1,0
  lui    $v0,3
  ori    $v0,$v0,65535
  and    $a1,$a1,$v0
end;
procedure TCAN1_C1RXF11.setEXID; assembler; nostackframe; inline;
asm
  lui     $a1,8
  sw $a1,8($a0)
end;
procedure TCAN1_C1RXF11.clearEXID; assembler; nostackframe; inline;
asm
  lui     $a1,8
  sw $a1,4($a0)
end;
procedure TCAN1_C1RXF11.setEXID(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,19,1
  sw      $v1,($a0)
end;
function  TCAN1_C1RXF11.getEXID : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,19,1
end;
procedure TCAN1_C1RXF11.setSID(thebits : TBits_11); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  sll     $a1,$a1,21
  lui    $v0,31
  ori    $v0,$v0,65535
  and   $v1,$v1,$v0
  or    $a1,$a1,$v0
  sw    $a1,($a0)
end;
function  TCAN1_C1RXF11.getSID : TBits_11;
asm
  lw      $v1,($a0)
  srl     $a1,$a1,21
  lui    $v0,65504
  and    $a1,$a1,$v0
end;
procedure TCAN1_C1RXF11.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TCAN1_C1RXF11.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TCAN1_C1RXF12.setEID(thebits : TBits_18); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  sll     $a1,$a1,0
  lui    $v0,65532
  and   $v1,$v1,$v0
  or    $a1,$a1,$v0
  sw    $a1,($a0)
end;
function  TCAN1_C1RXF12.getEID : TBits_18;
asm
  lw      $v1,($a0)
  srl     $a1,$a1,0
  lui    $v0,3
  ori    $v0,$v0,65535
  and    $a1,$a1,$v0
end;
procedure TCAN1_C1RXF12.setEXID; assembler; nostackframe; inline;
asm
  lui     $a1,8
  sw $a1,8($a0)
end;
procedure TCAN1_C1RXF12.clearEXID; assembler; nostackframe; inline;
asm
  lui     $a1,8
  sw $a1,4($a0)
end;
procedure TCAN1_C1RXF12.setEXID(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,19,1
  sw      $v1,($a0)
end;
function  TCAN1_C1RXF12.getEXID : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,19,1
end;
procedure TCAN1_C1RXF12.setSID(thebits : TBits_11); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  sll     $a1,$a1,21
  lui    $v0,31
  ori    $v0,$v0,65535
  and   $v1,$v1,$v0
  or    $a1,$a1,$v0
  sw    $a1,($a0)
end;
function  TCAN1_C1RXF12.getSID : TBits_11;
asm
  lw      $v1,($a0)
  srl     $a1,$a1,21
  lui    $v0,65504
  and    $a1,$a1,$v0
end;
procedure TCAN1_C1RXF12.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TCAN1_C1RXF12.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TCAN1_C1RXF13.setEID(thebits : TBits_18); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  sll     $a1,$a1,0
  lui    $v0,65532
  and   $v1,$v1,$v0
  or    $a1,$a1,$v0
  sw    $a1,($a0)
end;
function  TCAN1_C1RXF13.getEID : TBits_18;
asm
  lw      $v1,($a0)
  srl     $a1,$a1,0
  lui    $v0,3
  ori    $v0,$v0,65535
  and    $a1,$a1,$v0
end;
procedure TCAN1_C1RXF13.setEXID; assembler; nostackframe; inline;
asm
  lui     $a1,8
  sw $a1,8($a0)
end;
procedure TCAN1_C1RXF13.clearEXID; assembler; nostackframe; inline;
asm
  lui     $a1,8
  sw $a1,4($a0)
end;
procedure TCAN1_C1RXF13.setEXID(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,19,1
  sw      $v1,($a0)
end;
function  TCAN1_C1RXF13.getEXID : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,19,1
end;
procedure TCAN1_C1RXF13.setSID(thebits : TBits_11); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  sll     $a1,$a1,21
  lui    $v0,31
  ori    $v0,$v0,65535
  and   $v1,$v1,$v0
  or    $a1,$a1,$v0
  sw    $a1,($a0)
end;
function  TCAN1_C1RXF13.getSID : TBits_11;
asm
  lw      $v1,($a0)
  srl     $a1,$a1,21
  lui    $v0,65504
  and    $a1,$a1,$v0
end;
procedure TCAN1_C1RXF13.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TCAN1_C1RXF13.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TCAN1_C1RXF14.setEID(thebits : TBits_18); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  sll     $a1,$a1,0
  lui    $v0,65532
  and   $v1,$v1,$v0
  or    $a1,$a1,$v0
  sw    $a1,($a0)
end;
function  TCAN1_C1RXF14.getEID : TBits_18;
asm
  lw      $v1,($a0)
  srl     $a1,$a1,0
  lui    $v0,3
  ori    $v0,$v0,65535
  and    $a1,$a1,$v0
end;
procedure TCAN1_C1RXF14.setEXID; assembler; nostackframe; inline;
asm
  lui     $a1,8
  sw $a1,8($a0)
end;
procedure TCAN1_C1RXF14.clearEXID; assembler; nostackframe; inline;
asm
  lui     $a1,8
  sw $a1,4($a0)
end;
procedure TCAN1_C1RXF14.setEXID(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,19,1
  sw      $v1,($a0)
end;
function  TCAN1_C1RXF14.getEXID : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,19,1
end;
procedure TCAN1_C1RXF14.setSID(thebits : TBits_11); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  sll     $a1,$a1,21
  lui    $v0,31
  ori    $v0,$v0,65535
  and   $v1,$v1,$v0
  or    $a1,$a1,$v0
  sw    $a1,($a0)
end;
function  TCAN1_C1RXF14.getSID : TBits_11;
asm
  lw      $v1,($a0)
  srl     $a1,$a1,21
  lui    $v0,65504
  and    $a1,$a1,$v0
end;
procedure TCAN1_C1RXF14.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TCAN1_C1RXF14.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TCAN1_C1RXF15.setEID(thebits : TBits_18); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  sll     $a1,$a1,0
  lui    $v0,65532
  and   $v1,$v1,$v0
  or    $a1,$a1,$v0
  sw    $a1,($a0)
end;
function  TCAN1_C1RXF15.getEID : TBits_18;
asm
  lw      $v1,($a0)
  srl     $a1,$a1,0
  lui    $v0,3
  ori    $v0,$v0,65535
  and    $a1,$a1,$v0
end;
procedure TCAN1_C1RXF15.setEXID; assembler; nostackframe; inline;
asm
  lui     $a1,8
  sw $a1,8($a0)
end;
procedure TCAN1_C1RXF15.clearEXID; assembler; nostackframe; inline;
asm
  lui     $a1,8
  sw $a1,4($a0)
end;
procedure TCAN1_C1RXF15.setEXID(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,19,1
  sw      $v1,($a0)
end;
function  TCAN1_C1RXF15.getEXID : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,19,1
end;
procedure TCAN1_C1RXF15.setSID(thebits : TBits_11); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  sll     $a1,$a1,21
  lui    $v0,31
  ori    $v0,$v0,65535
  and   $v1,$v1,$v0
  or    $a1,$a1,$v0
  sw    $a1,($a0)
end;
function  TCAN1_C1RXF15.getSID : TBits_11;
asm
  lw      $v1,($a0)
  srl     $a1,$a1,21
  lui    $v0,65504
  and    $a1,$a1,$v0
end;
procedure TCAN1_C1RXF15.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TCAN1_C1RXF15.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TCAN1_C1RXF16.setEID(thebits : TBits_18); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  sll     $a1,$a1,0
  lui    $v0,65532
  and   $v1,$v1,$v0
  or    $a1,$a1,$v0
  sw    $a1,($a0)
end;
function  TCAN1_C1RXF16.getEID : TBits_18;
asm
  lw      $v1,($a0)
  srl     $a1,$a1,0
  lui    $v0,3
  ori    $v0,$v0,65535
  and    $a1,$a1,$v0
end;
procedure TCAN1_C1RXF16.setEXID; assembler; nostackframe; inline;
asm
  lui     $a1,8
  sw $a1,8($a0)
end;
procedure TCAN1_C1RXF16.clearEXID; assembler; nostackframe; inline;
asm
  lui     $a1,8
  sw $a1,4($a0)
end;
procedure TCAN1_C1RXF16.setEXID(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,19,1
  sw      $v1,($a0)
end;
function  TCAN1_C1RXF16.getEXID : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,19,1
end;
procedure TCAN1_C1RXF16.setSID(thebits : TBits_11); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  sll     $a1,$a1,21
  lui    $v0,31
  ori    $v0,$v0,65535
  and   $v1,$v1,$v0
  or    $a1,$a1,$v0
  sw    $a1,($a0)
end;
function  TCAN1_C1RXF16.getSID : TBits_11;
asm
  lw      $v1,($a0)
  srl     $a1,$a1,21
  lui    $v0,65504
  and    $a1,$a1,$v0
end;
procedure TCAN1_C1RXF16.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TCAN1_C1RXF16.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TCAN1_C1RXF17.setEID(thebits : TBits_18); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  sll     $a1,$a1,0
  lui    $v0,65532
  and   $v1,$v1,$v0
  or    $a1,$a1,$v0
  sw    $a1,($a0)
end;
function  TCAN1_C1RXF17.getEID : TBits_18;
asm
  lw      $v1,($a0)
  srl     $a1,$a1,0
  lui    $v0,3
  ori    $v0,$v0,65535
  and    $a1,$a1,$v0
end;
procedure TCAN1_C1RXF17.setEXID; assembler; nostackframe; inline;
asm
  lui     $a1,8
  sw $a1,8($a0)
end;
procedure TCAN1_C1RXF17.clearEXID; assembler; nostackframe; inline;
asm
  lui     $a1,8
  sw $a1,4($a0)
end;
procedure TCAN1_C1RXF17.setEXID(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,19,1
  sw      $v1,($a0)
end;
function  TCAN1_C1RXF17.getEXID : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,19,1
end;
procedure TCAN1_C1RXF17.setSID(thebits : TBits_11); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  sll     $a1,$a1,21
  lui    $v0,31
  ori    $v0,$v0,65535
  and   $v1,$v1,$v0
  or    $a1,$a1,$v0
  sw    $a1,($a0)
end;
function  TCAN1_C1RXF17.getSID : TBits_11;
asm
  lw      $v1,($a0)
  srl     $a1,$a1,21
  lui    $v0,65504
  and    $a1,$a1,$v0
end;
procedure TCAN1_C1RXF17.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TCAN1_C1RXF17.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TCAN1_C1RXF18.setEID(thebits : TBits_18); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  sll     $a1,$a1,0
  lui    $v0,65532
  and   $v1,$v1,$v0
  or    $a1,$a1,$v0
  sw    $a1,($a0)
end;
function  TCAN1_C1RXF18.getEID : TBits_18;
asm
  lw      $v1,($a0)
  srl     $a1,$a1,0
  lui    $v0,3
  ori    $v0,$v0,65535
  and    $a1,$a1,$v0
end;
procedure TCAN1_C1RXF18.setEXID; assembler; nostackframe; inline;
asm
  lui     $a1,8
  sw $a1,8($a0)
end;
procedure TCAN1_C1RXF18.clearEXID; assembler; nostackframe; inline;
asm
  lui     $a1,8
  sw $a1,4($a0)
end;
procedure TCAN1_C1RXF18.setEXID(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,19,1
  sw      $v1,($a0)
end;
function  TCAN1_C1RXF18.getEXID : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,19,1
end;
procedure TCAN1_C1RXF18.setSID(thebits : TBits_11); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  sll     $a1,$a1,21
  lui    $v0,31
  ori    $v0,$v0,65535
  and   $v1,$v1,$v0
  or    $a1,$a1,$v0
  sw    $a1,($a0)
end;
function  TCAN1_C1RXF18.getSID : TBits_11;
asm
  lw      $v1,($a0)
  srl     $a1,$a1,21
  lui    $v0,65504
  and    $a1,$a1,$v0
end;
procedure TCAN1_C1RXF18.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TCAN1_C1RXF18.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TCAN1_C1RXF19.setEID(thebits : TBits_18); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  sll     $a1,$a1,0
  lui    $v0,65532
  and   $v1,$v1,$v0
  or    $a1,$a1,$v0
  sw    $a1,($a0)
end;
function  TCAN1_C1RXF19.getEID : TBits_18;
asm
  lw      $v1,($a0)
  srl     $a1,$a1,0
  lui    $v0,3
  ori    $v0,$v0,65535
  and    $a1,$a1,$v0
end;
procedure TCAN1_C1RXF19.setEXID; assembler; nostackframe; inline;
asm
  lui     $a1,8
  sw $a1,8($a0)
end;
procedure TCAN1_C1RXF19.clearEXID; assembler; nostackframe; inline;
asm
  lui     $a1,8
  sw $a1,4($a0)
end;
procedure TCAN1_C1RXF19.setEXID(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,19,1
  sw      $v1,($a0)
end;
function  TCAN1_C1RXF19.getEXID : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,19,1
end;
procedure TCAN1_C1RXF19.setSID(thebits : TBits_11); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  sll     $a1,$a1,21
  lui    $v0,31
  ori    $v0,$v0,65535
  and   $v1,$v1,$v0
  or    $a1,$a1,$v0
  sw    $a1,($a0)
end;
function  TCAN1_C1RXF19.getSID : TBits_11;
asm
  lw      $v1,($a0)
  srl     $a1,$a1,21
  lui    $v0,65504
  and    $a1,$a1,$v0
end;
procedure TCAN1_C1RXF19.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TCAN1_C1RXF19.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TCAN1_C1RXF20.setEID(thebits : TBits_18); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  sll     $a1,$a1,0
  lui    $v0,65532
  and   $v1,$v1,$v0
  or    $a1,$a1,$v0
  sw    $a1,($a0)
end;
function  TCAN1_C1RXF20.getEID : TBits_18;
asm
  lw      $v1,($a0)
  srl     $a1,$a1,0
  lui    $v0,3
  ori    $v0,$v0,65535
  and    $a1,$a1,$v0
end;
procedure TCAN1_C1RXF20.setEXID; assembler; nostackframe; inline;
asm
  lui     $a1,8
  sw $a1,8($a0)
end;
procedure TCAN1_C1RXF20.clearEXID; assembler; nostackframe; inline;
asm
  lui     $a1,8
  sw $a1,4($a0)
end;
procedure TCAN1_C1RXF20.setEXID(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,19,1
  sw      $v1,($a0)
end;
function  TCAN1_C1RXF20.getEXID : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,19,1
end;
procedure TCAN1_C1RXF20.setSID(thebits : TBits_11); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  sll     $a1,$a1,21
  lui    $v0,31
  ori    $v0,$v0,65535
  and   $v1,$v1,$v0
  or    $a1,$a1,$v0
  sw    $a1,($a0)
end;
function  TCAN1_C1RXF20.getSID : TBits_11;
asm
  lw      $v1,($a0)
  srl     $a1,$a1,21
  lui    $v0,65504
  and    $a1,$a1,$v0
end;
procedure TCAN1_C1RXF20.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TCAN1_C1RXF20.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TCAN1_C1RXF21.setEID(thebits : TBits_18); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  sll     $a1,$a1,0
  lui    $v0,65532
  and   $v1,$v1,$v0
  or    $a1,$a1,$v0
  sw    $a1,($a0)
end;
function  TCAN1_C1RXF21.getEID : TBits_18;
asm
  lw      $v1,($a0)
  srl     $a1,$a1,0
  lui    $v0,3
  ori    $v0,$v0,65535
  and    $a1,$a1,$v0
end;
procedure TCAN1_C1RXF21.setEXID; assembler; nostackframe; inline;
asm
  lui     $a1,8
  sw $a1,8($a0)
end;
procedure TCAN1_C1RXF21.clearEXID; assembler; nostackframe; inline;
asm
  lui     $a1,8
  sw $a1,4($a0)
end;
procedure TCAN1_C1RXF21.setEXID(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,19,1
  sw      $v1,($a0)
end;
function  TCAN1_C1RXF21.getEXID : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,19,1
end;
procedure TCAN1_C1RXF21.setSID(thebits : TBits_11); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  sll     $a1,$a1,21
  lui    $v0,31
  ori    $v0,$v0,65535
  and   $v1,$v1,$v0
  or    $a1,$a1,$v0
  sw    $a1,($a0)
end;
function  TCAN1_C1RXF21.getSID : TBits_11;
asm
  lw      $v1,($a0)
  srl     $a1,$a1,21
  lui    $v0,65504
  and    $a1,$a1,$v0
end;
procedure TCAN1_C1RXF21.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TCAN1_C1RXF21.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TCAN1_C1RXF22.setEID(thebits : TBits_18); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  sll     $a1,$a1,0
  lui    $v0,65532
  and   $v1,$v1,$v0
  or    $a1,$a1,$v0
  sw    $a1,($a0)
end;
function  TCAN1_C1RXF22.getEID : TBits_18;
asm
  lw      $v1,($a0)
  srl     $a1,$a1,0
  lui    $v0,3
  ori    $v0,$v0,65535
  and    $a1,$a1,$v0
end;
procedure TCAN1_C1RXF22.setEXID; assembler; nostackframe; inline;
asm
  lui     $a1,8
  sw $a1,8($a0)
end;
procedure TCAN1_C1RXF22.clearEXID; assembler; nostackframe; inline;
asm
  lui     $a1,8
  sw $a1,4($a0)
end;
procedure TCAN1_C1RXF22.setEXID(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,19,1
  sw      $v1,($a0)
end;
function  TCAN1_C1RXF22.getEXID : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,19,1
end;
procedure TCAN1_C1RXF22.setSID(thebits : TBits_11); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  sll     $a1,$a1,21
  lui    $v0,31
  ori    $v0,$v0,65535
  and   $v1,$v1,$v0
  or    $a1,$a1,$v0
  sw    $a1,($a0)
end;
function  TCAN1_C1RXF22.getSID : TBits_11;
asm
  lw      $v1,($a0)
  srl     $a1,$a1,21
  lui    $v0,65504
  and    $a1,$a1,$v0
end;
procedure TCAN1_C1RXF22.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TCAN1_C1RXF22.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TCAN1_C1RXF23.setEID(thebits : TBits_18); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  sll     $a1,$a1,0
  lui    $v0,65532
  and   $v1,$v1,$v0
  or    $a1,$a1,$v0
  sw    $a1,($a0)
end;
function  TCAN1_C1RXF23.getEID : TBits_18;
asm
  lw      $v1,($a0)
  srl     $a1,$a1,0
  lui    $v0,3
  ori    $v0,$v0,65535
  and    $a1,$a1,$v0
end;
procedure TCAN1_C1RXF23.setEXID; assembler; nostackframe; inline;
asm
  lui     $a1,8
  sw $a1,8($a0)
end;
procedure TCAN1_C1RXF23.clearEXID; assembler; nostackframe; inline;
asm
  lui     $a1,8
  sw $a1,4($a0)
end;
procedure TCAN1_C1RXF23.setEXID(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,19,1
  sw      $v1,($a0)
end;
function  TCAN1_C1RXF23.getEXID : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,19,1
end;
procedure TCAN1_C1RXF23.setSID(thebits : TBits_11); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  sll     $a1,$a1,21
  lui    $v0,31
  ori    $v0,$v0,65535
  and   $v1,$v1,$v0
  or    $a1,$a1,$v0
  sw    $a1,($a0)
end;
function  TCAN1_C1RXF23.getSID : TBits_11;
asm
  lw      $v1,($a0)
  srl     $a1,$a1,21
  lui    $v0,65504
  and    $a1,$a1,$v0
end;
procedure TCAN1_C1RXF23.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TCAN1_C1RXF23.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TCAN1_C1RXF24.setEID(thebits : TBits_18); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  sll     $a1,$a1,0
  lui    $v0,65532
  and   $v1,$v1,$v0
  or    $a1,$a1,$v0
  sw    $a1,($a0)
end;
function  TCAN1_C1RXF24.getEID : TBits_18;
asm
  lw      $v1,($a0)
  srl     $a1,$a1,0
  lui    $v0,3
  ori    $v0,$v0,65535
  and    $a1,$a1,$v0
end;
procedure TCAN1_C1RXF24.setEXID; assembler; nostackframe; inline;
asm
  lui     $a1,8
  sw $a1,8($a0)
end;
procedure TCAN1_C1RXF24.clearEXID; assembler; nostackframe; inline;
asm
  lui     $a1,8
  sw $a1,4($a0)
end;
procedure TCAN1_C1RXF24.setEXID(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,19,1
  sw      $v1,($a0)
end;
function  TCAN1_C1RXF24.getEXID : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,19,1
end;
procedure TCAN1_C1RXF24.setSID(thebits : TBits_11); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  sll     $a1,$a1,21
  lui    $v0,31
  ori    $v0,$v0,65535
  and   $v1,$v1,$v0
  or    $a1,$a1,$v0
  sw    $a1,($a0)
end;
function  TCAN1_C1RXF24.getSID : TBits_11;
asm
  lw      $v1,($a0)
  srl     $a1,$a1,21
  lui    $v0,65504
  and    $a1,$a1,$v0
end;
procedure TCAN1_C1RXF24.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TCAN1_C1RXF24.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TCAN1_C1RXF25.setEID(thebits : TBits_18); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  sll     $a1,$a1,0
  lui    $v0,65532
  and   $v1,$v1,$v0
  or    $a1,$a1,$v0
  sw    $a1,($a0)
end;
function  TCAN1_C1RXF25.getEID : TBits_18;
asm
  lw      $v1,($a0)
  srl     $a1,$a1,0
  lui    $v0,3
  ori    $v0,$v0,65535
  and    $a1,$a1,$v0
end;
procedure TCAN1_C1RXF25.setEXID; assembler; nostackframe; inline;
asm
  lui     $a1,8
  sw $a1,8($a0)
end;
procedure TCAN1_C1RXF25.clearEXID; assembler; nostackframe; inline;
asm
  lui     $a1,8
  sw $a1,4($a0)
end;
procedure TCAN1_C1RXF25.setEXID(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,19,1
  sw      $v1,($a0)
end;
function  TCAN1_C1RXF25.getEXID : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,19,1
end;
procedure TCAN1_C1RXF25.setSID(thebits : TBits_11); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  sll     $a1,$a1,21
  lui    $v0,31
  ori    $v0,$v0,65535
  and   $v1,$v1,$v0
  or    $a1,$a1,$v0
  sw    $a1,($a0)
end;
function  TCAN1_C1RXF25.getSID : TBits_11;
asm
  lw      $v1,($a0)
  srl     $a1,$a1,21
  lui    $v0,65504
  and    $a1,$a1,$v0
end;
procedure TCAN1_C1RXF25.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TCAN1_C1RXF25.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TCAN1_C1RXF26.setEID(thebits : TBits_18); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  sll     $a1,$a1,0
  lui    $v0,65532
  and   $v1,$v1,$v0
  or    $a1,$a1,$v0
  sw    $a1,($a0)
end;
function  TCAN1_C1RXF26.getEID : TBits_18;
asm
  lw      $v1,($a0)
  srl     $a1,$a1,0
  lui    $v0,3
  ori    $v0,$v0,65535
  and    $a1,$a1,$v0
end;
procedure TCAN1_C1RXF26.setEXID; assembler; nostackframe; inline;
asm
  lui     $a1,8
  sw $a1,8($a0)
end;
procedure TCAN1_C1RXF26.clearEXID; assembler; nostackframe; inline;
asm
  lui     $a1,8
  sw $a1,4($a0)
end;
procedure TCAN1_C1RXF26.setEXID(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,19,1
  sw      $v1,($a0)
end;
function  TCAN1_C1RXF26.getEXID : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,19,1
end;
procedure TCAN1_C1RXF26.setSID(thebits : TBits_11); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  sll     $a1,$a1,21
  lui    $v0,31
  ori    $v0,$v0,65535
  and   $v1,$v1,$v0
  or    $a1,$a1,$v0
  sw    $a1,($a0)
end;
function  TCAN1_C1RXF26.getSID : TBits_11;
asm
  lw      $v1,($a0)
  srl     $a1,$a1,21
  lui    $v0,65504
  and    $a1,$a1,$v0
end;
procedure TCAN1_C1RXF26.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TCAN1_C1RXF26.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TCAN1_C1RXF27.setEID(thebits : TBits_18); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  sll     $a1,$a1,0
  lui    $v0,65532
  and   $v1,$v1,$v0
  or    $a1,$a1,$v0
  sw    $a1,($a0)
end;
function  TCAN1_C1RXF27.getEID : TBits_18;
asm
  lw      $v1,($a0)
  srl     $a1,$a1,0
  lui    $v0,3
  ori    $v0,$v0,65535
  and    $a1,$a1,$v0
end;
procedure TCAN1_C1RXF27.setEXID; assembler; nostackframe; inline;
asm
  lui     $a1,8
  sw $a1,8($a0)
end;
procedure TCAN1_C1RXF27.clearEXID; assembler; nostackframe; inline;
asm
  lui     $a1,8
  sw $a1,4($a0)
end;
procedure TCAN1_C1RXF27.setEXID(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,19,1
  sw      $v1,($a0)
end;
function  TCAN1_C1RXF27.getEXID : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,19,1
end;
procedure TCAN1_C1RXF27.setSID(thebits : TBits_11); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  sll     $a1,$a1,21
  lui    $v0,31
  ori    $v0,$v0,65535
  and   $v1,$v1,$v0
  or    $a1,$a1,$v0
  sw    $a1,($a0)
end;
function  TCAN1_C1RXF27.getSID : TBits_11;
asm
  lw      $v1,($a0)
  srl     $a1,$a1,21
  lui    $v0,65504
  and    $a1,$a1,$v0
end;
procedure TCAN1_C1RXF27.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TCAN1_C1RXF27.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TCAN1_C1RXF28.setEID(thebits : TBits_18); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  sll     $a1,$a1,0
  lui    $v0,65532
  and   $v1,$v1,$v0
  or    $a1,$a1,$v0
  sw    $a1,($a0)
end;
function  TCAN1_C1RXF28.getEID : TBits_18;
asm
  lw      $v1,($a0)
  srl     $a1,$a1,0
  lui    $v0,3
  ori    $v0,$v0,65535
  and    $a1,$a1,$v0
end;
procedure TCAN1_C1RXF28.setEXID; assembler; nostackframe; inline;
asm
  lui     $a1,8
  sw $a1,8($a0)
end;
procedure TCAN1_C1RXF28.clearEXID; assembler; nostackframe; inline;
asm
  lui     $a1,8
  sw $a1,4($a0)
end;
procedure TCAN1_C1RXF28.setEXID(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,19,1
  sw      $v1,($a0)
end;
function  TCAN1_C1RXF28.getEXID : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,19,1
end;
procedure TCAN1_C1RXF28.setSID(thebits : TBits_11); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  sll     $a1,$a1,21
  lui    $v0,31
  ori    $v0,$v0,65535
  and   $v1,$v1,$v0
  or    $a1,$a1,$v0
  sw    $a1,($a0)
end;
function  TCAN1_C1RXF28.getSID : TBits_11;
asm
  lw      $v1,($a0)
  srl     $a1,$a1,21
  lui    $v0,65504
  and    $a1,$a1,$v0
end;
procedure TCAN1_C1RXF28.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TCAN1_C1RXF28.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TCAN1_C1RXF29.setEID(thebits : TBits_18); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  sll     $a1,$a1,0
  lui    $v0,65532
  and   $v1,$v1,$v0
  or    $a1,$a1,$v0
  sw    $a1,($a0)
end;
function  TCAN1_C1RXF29.getEID : TBits_18;
asm
  lw      $v1,($a0)
  srl     $a1,$a1,0
  lui    $v0,3
  ori    $v0,$v0,65535
  and    $a1,$a1,$v0
end;
procedure TCAN1_C1RXF29.setEXID; assembler; nostackframe; inline;
asm
  lui     $a1,8
  sw $a1,8($a0)
end;
procedure TCAN1_C1RXF29.clearEXID; assembler; nostackframe; inline;
asm
  lui     $a1,8
  sw $a1,4($a0)
end;
procedure TCAN1_C1RXF29.setEXID(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,19,1
  sw      $v1,($a0)
end;
function  TCAN1_C1RXF29.getEXID : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,19,1
end;
procedure TCAN1_C1RXF29.setSID(thebits : TBits_11); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  sll     $a1,$a1,21
  lui    $v0,31
  ori    $v0,$v0,65535
  and   $v1,$v1,$v0
  or    $a1,$a1,$v0
  sw    $a1,($a0)
end;
function  TCAN1_C1RXF29.getSID : TBits_11;
asm
  lw      $v1,($a0)
  srl     $a1,$a1,21
  lui    $v0,65504
  and    $a1,$a1,$v0
end;
procedure TCAN1_C1RXF29.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TCAN1_C1RXF29.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TCAN1_C1RXF30.setEID(thebits : TBits_18); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  sll     $a1,$a1,0
  lui    $v0,65532
  and   $v1,$v1,$v0
  or    $a1,$a1,$v0
  sw    $a1,($a0)
end;
function  TCAN1_C1RXF30.getEID : TBits_18;
asm
  lw      $v1,($a0)
  srl     $a1,$a1,0
  lui    $v0,3
  ori    $v0,$v0,65535
  and    $a1,$a1,$v0
end;
procedure TCAN1_C1RXF30.setEXID; assembler; nostackframe; inline;
asm
  lui     $a1,8
  sw $a1,8($a0)
end;
procedure TCAN1_C1RXF30.clearEXID; assembler; nostackframe; inline;
asm
  lui     $a1,8
  sw $a1,4($a0)
end;
procedure TCAN1_C1RXF30.setEXID(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,19,1
  sw      $v1,($a0)
end;
function  TCAN1_C1RXF30.getEXID : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,19,1
end;
procedure TCAN1_C1RXF30.setSID(thebits : TBits_11); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  sll     $a1,$a1,21
  lui    $v0,31
  ori    $v0,$v0,65535
  and   $v1,$v1,$v0
  or    $a1,$a1,$v0
  sw    $a1,($a0)
end;
function  TCAN1_C1RXF30.getSID : TBits_11;
asm
  lw      $v1,($a0)
  srl     $a1,$a1,21
  lui    $v0,65504
  and    $a1,$a1,$v0
end;
procedure TCAN1_C1RXF30.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TCAN1_C1RXF30.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TCAN1_C1RXF31.setEID(thebits : TBits_18); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  sll     $a1,$a1,0
  lui    $v0,65532
  and   $v1,$v1,$v0
  or    $a1,$a1,$v0
  sw    $a1,($a0)
end;
function  TCAN1_C1RXF31.getEID : TBits_18;
asm
  lw      $v1,($a0)
  srl     $a1,$a1,0
  lui    $v0,3
  ori    $v0,$v0,65535
  and    $a1,$a1,$v0
end;
procedure TCAN1_C1RXF31.setEXID; assembler; nostackframe; inline;
asm
  lui     $a1,8
  sw $a1,8($a0)
end;
procedure TCAN1_C1RXF31.clearEXID; assembler; nostackframe; inline;
asm
  lui     $a1,8
  sw $a1,4($a0)
end;
procedure TCAN1_C1RXF31.setEXID(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,19,1
  sw      $v1,($a0)
end;
function  TCAN1_C1RXF31.getEXID : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,19,1
end;
procedure TCAN1_C1RXF31.setSID(thebits : TBits_11); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  sll     $a1,$a1,21
  lui    $v0,31
  ori    $v0,$v0,65535
  and   $v1,$v1,$v0
  or    $a1,$a1,$v0
  sw    $a1,($a0)
end;
function  TCAN1_C1RXF31.getSID : TBits_11;
asm
  lw      $v1,($a0)
  srl     $a1,$a1,21
  lui    $v0,65504
  and    $a1,$a1,$v0
end;
procedure TCAN1_C1RXF31.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TCAN1_C1RXF31.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TCAN1_C1FIFOCON0.setTXPRI(thebits : TBits_2); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,2
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON0.getTXPRI : TBits_2;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,2
end;
procedure TCAN1_C1FIFOCON0.setRTREN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON0.clearRTREN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON0.setRTREN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,2,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON0.getRTREN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,2,1
end;
procedure TCAN1_C1FIFOCON0.setTXREQ; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON0.clearTXREQ; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON0.setTXREQ(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,3,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON0.getTXREQ : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,3,1
end;
procedure TCAN1_C1FIFOCON0.setTXERR; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON0.clearTXERR; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON0.setTXERR(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,4,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON0.getTXERR : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,4,1
end;
procedure TCAN1_C1FIFOCON0.setTXLARB; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON0.clearTXLARB; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON0.setTXLARB(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,5,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON0.getTXLARB : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,5,1
end;
procedure TCAN1_C1FIFOCON0.setTXABAT; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON0.clearTXABAT; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON0.setTXABAT(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,6,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON0.getTXABAT : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,6,1
end;
procedure TCAN1_C1FIFOCON0.setTXEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON0.clearTXEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON0.setTXEN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,7,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON0.getTXEN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,7,1
end;
procedure TCAN1_C1FIFOCON0.setDONLY; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4096
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON0.clearDONLY; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4096
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON0.setDONLY(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,12,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON0.getDONLY : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,12,1
end;
procedure TCAN1_C1FIFOCON0.setUINC; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON0.clearUINC; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON0.setUINC(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,13,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON0.getUINC : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,13,1
end;
procedure TCAN1_C1FIFOCON0.setFRESET; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16384
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON0.clearFRESET; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16384
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON0.setFRESET(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,14,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON0.getFRESET : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,14,1
end;
procedure TCAN1_C1FIFOCON0.setFSIZE(thebits : TBits_5); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,16,5
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON0.getFSIZE : TBits_5;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,16,5
end;
procedure TCAN1_C1FIFOCON0.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TCAN1_C1FIFOCON0.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TCAN1_C1FIFOINT0.setRXNEMPTYIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT0.clearRXNEMPTYIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT0.setRXNEMPTYIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT0.getRXNEMPTYIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,1
end;
procedure TCAN1_C1FIFOINT0.setRXHALFIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT0.clearRXHALFIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT0.setRXHALFIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,1,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT0.getRXHALFIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,1,1
end;
procedure TCAN1_C1FIFOINT0.setRXFULLIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT0.clearRXFULLIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT0.setRXFULLIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,2,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT0.getRXFULLIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,2,1
end;
procedure TCAN1_C1FIFOINT0.setRXOVFLIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT0.clearRXOVFLIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT0.setRXOVFLIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,3,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT0.getRXOVFLIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,3,1
end;
procedure TCAN1_C1FIFOINT0.setTXEMPTYIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT0.clearTXEMPTYIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT0.setTXEMPTYIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,8,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT0.getTXEMPTYIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,8,1
end;
procedure TCAN1_C1FIFOINT0.setTXHALFIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,512
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT0.clearTXHALFIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,512
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT0.setTXHALFIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,9,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT0.getTXHALFIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,9,1
end;
procedure TCAN1_C1FIFOINT0.setTXNFULLIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1024
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT0.clearTXNFULLIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1024
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT0.setTXNFULLIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,10,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT0.getTXNFULLIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,10,1
end;
procedure TCAN1_C1FIFOINT0.setRXNEMPTYIE; assembler; nostackframe; inline;
asm
  lui     $a1,1
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT0.clearRXNEMPTYIE; assembler; nostackframe; inline;
asm
  lui     $a1,1
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT0.setRXNEMPTYIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,16,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT0.getRXNEMPTYIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,16,1
end;
procedure TCAN1_C1FIFOINT0.setRXHALFIE; assembler; nostackframe; inline;
asm
  lui     $a1,2
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT0.clearRXHALFIE; assembler; nostackframe; inline;
asm
  lui     $a1,2
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT0.setRXHALFIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,17,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT0.getRXHALFIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,17,1
end;
procedure TCAN1_C1FIFOINT0.setRXFULLIE; assembler; nostackframe; inline;
asm
  lui     $a1,4
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT0.clearRXFULLIE; assembler; nostackframe; inline;
asm
  lui     $a1,4
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT0.setRXFULLIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,18,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT0.getRXFULLIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,18,1
end;
procedure TCAN1_C1FIFOINT0.setRXOVFLIE; assembler; nostackframe; inline;
asm
  lui     $a1,8
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT0.clearRXOVFLIE; assembler; nostackframe; inline;
asm
  lui     $a1,8
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT0.setRXOVFLIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,19,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT0.getRXOVFLIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,19,1
end;
procedure TCAN1_C1FIFOINT0.setTXEMPTYIE; assembler; nostackframe; inline;
asm
  lui     $a1,256
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT0.clearTXEMPTYIE; assembler; nostackframe; inline;
asm
  lui     $a1,256
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT0.setTXEMPTYIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,24,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT0.getTXEMPTYIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,24,1
end;
procedure TCAN1_C1FIFOINT0.setTXHALFIE; assembler; nostackframe; inline;
asm
  lui     $a1,512
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT0.clearTXHALFIE; assembler; nostackframe; inline;
asm
  lui     $a1,512
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT0.setTXHALFIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,25,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT0.getTXHALFIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,25,1
end;
procedure TCAN1_C1FIFOINT0.setTXNFULLIE; assembler; nostackframe; inline;
asm
  lui     $a1,1024
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT0.clearTXNFULLIE; assembler; nostackframe; inline;
asm
  lui     $a1,1024
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT0.setTXNFULLIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,26,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT0.getTXNFULLIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,26,1
end;
procedure TCAN1_C1FIFOINT0.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TCAN1_C1FIFOINT0.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TCAN1_C1FIFOCI0.setCFIFOCI(thebits : TBits_5); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,5
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCI0.getCFIFOCI : TBits_5;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,5
end;
procedure TCAN1_C1FIFOCI0.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TCAN1_C1FIFOCI0.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TCAN1_C1FIFOCON1.setTXPRI(thebits : TBits_2); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,2
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON1.getTXPRI : TBits_2;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,2
end;
procedure TCAN1_C1FIFOCON1.setRTREN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON1.clearRTREN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON1.setRTREN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,2,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON1.getRTREN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,2,1
end;
procedure TCAN1_C1FIFOCON1.setTXREQ; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON1.clearTXREQ; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON1.setTXREQ(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,3,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON1.getTXREQ : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,3,1
end;
procedure TCAN1_C1FIFOCON1.setTXERR; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON1.clearTXERR; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON1.setTXERR(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,4,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON1.getTXERR : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,4,1
end;
procedure TCAN1_C1FIFOCON1.setTXLARB; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON1.clearTXLARB; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON1.setTXLARB(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,5,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON1.getTXLARB : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,5,1
end;
procedure TCAN1_C1FIFOCON1.setTXABAT; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON1.clearTXABAT; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON1.setTXABAT(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,6,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON1.getTXABAT : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,6,1
end;
procedure TCAN1_C1FIFOCON1.setTXEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON1.clearTXEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON1.setTXEN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,7,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON1.getTXEN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,7,1
end;
procedure TCAN1_C1FIFOCON1.setDONLY; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4096
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON1.clearDONLY; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4096
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON1.setDONLY(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,12,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON1.getDONLY : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,12,1
end;
procedure TCAN1_C1FIFOCON1.setUINC; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON1.clearUINC; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON1.setUINC(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,13,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON1.getUINC : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,13,1
end;
procedure TCAN1_C1FIFOCON1.setFRESET; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16384
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON1.clearFRESET; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16384
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON1.setFRESET(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,14,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON1.getFRESET : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,14,1
end;
procedure TCAN1_C1FIFOCON1.setFSIZE(thebits : TBits_5); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,16,5
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON1.getFSIZE : TBits_5;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,16,5
end;
procedure TCAN1_C1FIFOCON1.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TCAN1_C1FIFOCON1.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TCAN1_C1FIFOINT1.setRXNEMPTYIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT1.clearRXNEMPTYIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT1.setRXNEMPTYIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT1.getRXNEMPTYIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,1
end;
procedure TCAN1_C1FIFOINT1.setRXHALFIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT1.clearRXHALFIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT1.setRXHALFIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,1,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT1.getRXHALFIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,1,1
end;
procedure TCAN1_C1FIFOINT1.setRXFULLIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT1.clearRXFULLIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT1.setRXFULLIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,2,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT1.getRXFULLIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,2,1
end;
procedure TCAN1_C1FIFOINT1.setRXOVFLIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT1.clearRXOVFLIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT1.setRXOVFLIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,3,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT1.getRXOVFLIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,3,1
end;
procedure TCAN1_C1FIFOINT1.setTXEMPTYIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT1.clearTXEMPTYIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT1.setTXEMPTYIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,8,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT1.getTXEMPTYIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,8,1
end;
procedure TCAN1_C1FIFOINT1.setTXHALFIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,512
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT1.clearTXHALFIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,512
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT1.setTXHALFIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,9,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT1.getTXHALFIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,9,1
end;
procedure TCAN1_C1FIFOINT1.setTXNFULLIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1024
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT1.clearTXNFULLIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1024
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT1.setTXNFULLIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,10,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT1.getTXNFULLIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,10,1
end;
procedure TCAN1_C1FIFOINT1.setRXNEMPTYIE; assembler; nostackframe; inline;
asm
  lui     $a1,1
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT1.clearRXNEMPTYIE; assembler; nostackframe; inline;
asm
  lui     $a1,1
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT1.setRXNEMPTYIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,16,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT1.getRXNEMPTYIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,16,1
end;
procedure TCAN1_C1FIFOINT1.setRXHALFIE; assembler; nostackframe; inline;
asm
  lui     $a1,2
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT1.clearRXHALFIE; assembler; nostackframe; inline;
asm
  lui     $a1,2
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT1.setRXHALFIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,17,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT1.getRXHALFIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,17,1
end;
procedure TCAN1_C1FIFOINT1.setRXFULLIE; assembler; nostackframe; inline;
asm
  lui     $a1,4
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT1.clearRXFULLIE; assembler; nostackframe; inline;
asm
  lui     $a1,4
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT1.setRXFULLIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,18,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT1.getRXFULLIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,18,1
end;
procedure TCAN1_C1FIFOINT1.setRXOVFLIE; assembler; nostackframe; inline;
asm
  lui     $a1,8
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT1.clearRXOVFLIE; assembler; nostackframe; inline;
asm
  lui     $a1,8
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT1.setRXOVFLIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,19,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT1.getRXOVFLIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,19,1
end;
procedure TCAN1_C1FIFOINT1.setTXEMPTYIE; assembler; nostackframe; inline;
asm
  lui     $a1,256
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT1.clearTXEMPTYIE; assembler; nostackframe; inline;
asm
  lui     $a1,256
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT1.setTXEMPTYIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,24,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT1.getTXEMPTYIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,24,1
end;
procedure TCAN1_C1FIFOINT1.setTXHALFIE; assembler; nostackframe; inline;
asm
  lui     $a1,512
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT1.clearTXHALFIE; assembler; nostackframe; inline;
asm
  lui     $a1,512
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT1.setTXHALFIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,25,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT1.getTXHALFIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,25,1
end;
procedure TCAN1_C1FIFOINT1.setTXNFULLIE; assembler; nostackframe; inline;
asm
  lui     $a1,1024
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT1.clearTXNFULLIE; assembler; nostackframe; inline;
asm
  lui     $a1,1024
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT1.setTXNFULLIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,26,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT1.getTXNFULLIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,26,1
end;
procedure TCAN1_C1FIFOINT1.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TCAN1_C1FIFOINT1.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TCAN1_C1FIFOCI1.setCFIFOCI(thebits : TBits_5); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,5
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCI1.getCFIFOCI : TBits_5;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,5
end;
procedure TCAN1_C1FIFOCI1.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TCAN1_C1FIFOCI1.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TCAN1_C1FIFOCON2.setTXPRI(thebits : TBits_2); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,2
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON2.getTXPRI : TBits_2;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,2
end;
procedure TCAN1_C1FIFOCON2.setRTREN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON2.clearRTREN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON2.setRTREN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,2,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON2.getRTREN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,2,1
end;
procedure TCAN1_C1FIFOCON2.setTXREQ; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON2.clearTXREQ; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON2.setTXREQ(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,3,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON2.getTXREQ : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,3,1
end;
procedure TCAN1_C1FIFOCON2.setTXERR; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON2.clearTXERR; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON2.setTXERR(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,4,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON2.getTXERR : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,4,1
end;
procedure TCAN1_C1FIFOCON2.setTXLARB; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON2.clearTXLARB; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON2.setTXLARB(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,5,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON2.getTXLARB : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,5,1
end;
procedure TCAN1_C1FIFOCON2.setTXABAT; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON2.clearTXABAT; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON2.setTXABAT(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,6,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON2.getTXABAT : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,6,1
end;
procedure TCAN1_C1FIFOCON2.setTXEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON2.clearTXEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON2.setTXEN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,7,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON2.getTXEN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,7,1
end;
procedure TCAN1_C1FIFOCON2.setDONLY; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4096
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON2.clearDONLY; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4096
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON2.setDONLY(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,12,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON2.getDONLY : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,12,1
end;
procedure TCAN1_C1FIFOCON2.setUINC; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON2.clearUINC; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON2.setUINC(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,13,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON2.getUINC : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,13,1
end;
procedure TCAN1_C1FIFOCON2.setFRESET; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16384
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON2.clearFRESET; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16384
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON2.setFRESET(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,14,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON2.getFRESET : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,14,1
end;
procedure TCAN1_C1FIFOCON2.setFSIZE(thebits : TBits_5); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,16,5
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON2.getFSIZE : TBits_5;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,16,5
end;
procedure TCAN1_C1FIFOCON2.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TCAN1_C1FIFOCON2.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TCAN1_C1FIFOINT2.setRXNEMPTYIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT2.clearRXNEMPTYIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT2.setRXNEMPTYIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT2.getRXNEMPTYIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,1
end;
procedure TCAN1_C1FIFOINT2.setRXHALFIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT2.clearRXHALFIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT2.setRXHALFIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,1,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT2.getRXHALFIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,1,1
end;
procedure TCAN1_C1FIFOINT2.setRXFULLIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT2.clearRXFULLIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT2.setRXFULLIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,2,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT2.getRXFULLIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,2,1
end;
procedure TCAN1_C1FIFOINT2.setRXOVFLIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT2.clearRXOVFLIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT2.setRXOVFLIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,3,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT2.getRXOVFLIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,3,1
end;
procedure TCAN1_C1FIFOINT2.setTXEMPTYIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT2.clearTXEMPTYIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT2.setTXEMPTYIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,8,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT2.getTXEMPTYIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,8,1
end;
procedure TCAN1_C1FIFOINT2.setTXHALFIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,512
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT2.clearTXHALFIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,512
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT2.setTXHALFIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,9,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT2.getTXHALFIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,9,1
end;
procedure TCAN1_C1FIFOINT2.setTXNFULLIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1024
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT2.clearTXNFULLIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1024
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT2.setTXNFULLIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,10,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT2.getTXNFULLIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,10,1
end;
procedure TCAN1_C1FIFOINT2.setRXNEMPTYIE; assembler; nostackframe; inline;
asm
  lui     $a1,1
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT2.clearRXNEMPTYIE; assembler; nostackframe; inline;
asm
  lui     $a1,1
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT2.setRXNEMPTYIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,16,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT2.getRXNEMPTYIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,16,1
end;
procedure TCAN1_C1FIFOINT2.setRXHALFIE; assembler; nostackframe; inline;
asm
  lui     $a1,2
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT2.clearRXHALFIE; assembler; nostackframe; inline;
asm
  lui     $a1,2
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT2.setRXHALFIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,17,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT2.getRXHALFIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,17,1
end;
procedure TCAN1_C1FIFOINT2.setRXFULLIE; assembler; nostackframe; inline;
asm
  lui     $a1,4
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT2.clearRXFULLIE; assembler; nostackframe; inline;
asm
  lui     $a1,4
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT2.setRXFULLIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,18,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT2.getRXFULLIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,18,1
end;
procedure TCAN1_C1FIFOINT2.setRXOVFLIE; assembler; nostackframe; inline;
asm
  lui     $a1,8
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT2.clearRXOVFLIE; assembler; nostackframe; inline;
asm
  lui     $a1,8
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT2.setRXOVFLIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,19,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT2.getRXOVFLIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,19,1
end;
procedure TCAN1_C1FIFOINT2.setTXEMPTYIE; assembler; nostackframe; inline;
asm
  lui     $a1,256
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT2.clearTXEMPTYIE; assembler; nostackframe; inline;
asm
  lui     $a1,256
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT2.setTXEMPTYIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,24,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT2.getTXEMPTYIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,24,1
end;
procedure TCAN1_C1FIFOINT2.setTXHALFIE; assembler; nostackframe; inline;
asm
  lui     $a1,512
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT2.clearTXHALFIE; assembler; nostackframe; inline;
asm
  lui     $a1,512
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT2.setTXHALFIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,25,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT2.getTXHALFIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,25,1
end;
procedure TCAN1_C1FIFOINT2.setTXNFULLIE; assembler; nostackframe; inline;
asm
  lui     $a1,1024
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT2.clearTXNFULLIE; assembler; nostackframe; inline;
asm
  lui     $a1,1024
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT2.setTXNFULLIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,26,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT2.getTXNFULLIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,26,1
end;
procedure TCAN1_C1FIFOINT2.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TCAN1_C1FIFOINT2.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TCAN1_C1FIFOCI2.setCFIFOCI(thebits : TBits_5); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,5
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCI2.getCFIFOCI : TBits_5;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,5
end;
procedure TCAN1_C1FIFOCI2.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TCAN1_C1FIFOCI2.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TCAN1_C1FIFOCON3.setTXPRI(thebits : TBits_2); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,2
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON3.getTXPRI : TBits_2;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,2
end;
procedure TCAN1_C1FIFOCON3.setRTREN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON3.clearRTREN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON3.setRTREN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,2,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON3.getRTREN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,2,1
end;
procedure TCAN1_C1FIFOCON3.setTXREQ; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON3.clearTXREQ; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON3.setTXREQ(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,3,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON3.getTXREQ : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,3,1
end;
procedure TCAN1_C1FIFOCON3.setTXERR; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON3.clearTXERR; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON3.setTXERR(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,4,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON3.getTXERR : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,4,1
end;
procedure TCAN1_C1FIFOCON3.setTXLARB; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON3.clearTXLARB; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON3.setTXLARB(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,5,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON3.getTXLARB : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,5,1
end;
procedure TCAN1_C1FIFOCON3.setTXABAT; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON3.clearTXABAT; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON3.setTXABAT(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,6,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON3.getTXABAT : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,6,1
end;
procedure TCAN1_C1FIFOCON3.setTXEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON3.clearTXEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON3.setTXEN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,7,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON3.getTXEN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,7,1
end;
procedure TCAN1_C1FIFOCON3.setDONLY; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4096
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON3.clearDONLY; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4096
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON3.setDONLY(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,12,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON3.getDONLY : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,12,1
end;
procedure TCAN1_C1FIFOCON3.setUINC; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON3.clearUINC; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON3.setUINC(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,13,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON3.getUINC : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,13,1
end;
procedure TCAN1_C1FIFOCON3.setFRESET; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16384
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON3.clearFRESET; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16384
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON3.setFRESET(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,14,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON3.getFRESET : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,14,1
end;
procedure TCAN1_C1FIFOCON3.setFSIZE(thebits : TBits_5); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,16,5
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON3.getFSIZE : TBits_5;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,16,5
end;
procedure TCAN1_C1FIFOCON3.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TCAN1_C1FIFOCON3.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TCAN1_C1FIFOINT3.setRXNEMPTYIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT3.clearRXNEMPTYIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT3.setRXNEMPTYIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT3.getRXNEMPTYIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,1
end;
procedure TCAN1_C1FIFOINT3.setRXHALFIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT3.clearRXHALFIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT3.setRXHALFIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,1,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT3.getRXHALFIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,1,1
end;
procedure TCAN1_C1FIFOINT3.setRXFULLIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT3.clearRXFULLIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT3.setRXFULLIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,2,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT3.getRXFULLIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,2,1
end;
procedure TCAN1_C1FIFOINT3.setRXOVFLIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT3.clearRXOVFLIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT3.setRXOVFLIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,3,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT3.getRXOVFLIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,3,1
end;
procedure TCAN1_C1FIFOINT3.setTXEMPTYIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT3.clearTXEMPTYIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT3.setTXEMPTYIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,8,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT3.getTXEMPTYIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,8,1
end;
procedure TCAN1_C1FIFOINT3.setTXHALFIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,512
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT3.clearTXHALFIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,512
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT3.setTXHALFIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,9,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT3.getTXHALFIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,9,1
end;
procedure TCAN1_C1FIFOINT3.setTXNFULLIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1024
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT3.clearTXNFULLIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1024
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT3.setTXNFULLIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,10,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT3.getTXNFULLIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,10,1
end;
procedure TCAN1_C1FIFOINT3.setRXNEMPTYIE; assembler; nostackframe; inline;
asm
  lui     $a1,1
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT3.clearRXNEMPTYIE; assembler; nostackframe; inline;
asm
  lui     $a1,1
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT3.setRXNEMPTYIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,16,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT3.getRXNEMPTYIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,16,1
end;
procedure TCAN1_C1FIFOINT3.setRXHALFIE; assembler; nostackframe; inline;
asm
  lui     $a1,2
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT3.clearRXHALFIE; assembler; nostackframe; inline;
asm
  lui     $a1,2
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT3.setRXHALFIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,17,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT3.getRXHALFIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,17,1
end;
procedure TCAN1_C1FIFOINT3.setRXFULLIE; assembler; nostackframe; inline;
asm
  lui     $a1,4
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT3.clearRXFULLIE; assembler; nostackframe; inline;
asm
  lui     $a1,4
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT3.setRXFULLIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,18,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT3.getRXFULLIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,18,1
end;
procedure TCAN1_C1FIFOINT3.setRXOVFLIE; assembler; nostackframe; inline;
asm
  lui     $a1,8
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT3.clearRXOVFLIE; assembler; nostackframe; inline;
asm
  lui     $a1,8
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT3.setRXOVFLIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,19,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT3.getRXOVFLIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,19,1
end;
procedure TCAN1_C1FIFOINT3.setTXEMPTYIE; assembler; nostackframe; inline;
asm
  lui     $a1,256
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT3.clearTXEMPTYIE; assembler; nostackframe; inline;
asm
  lui     $a1,256
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT3.setTXEMPTYIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,24,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT3.getTXEMPTYIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,24,1
end;
procedure TCAN1_C1FIFOINT3.setTXHALFIE; assembler; nostackframe; inline;
asm
  lui     $a1,512
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT3.clearTXHALFIE; assembler; nostackframe; inline;
asm
  lui     $a1,512
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT3.setTXHALFIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,25,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT3.getTXHALFIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,25,1
end;
procedure TCAN1_C1FIFOINT3.setTXNFULLIE; assembler; nostackframe; inline;
asm
  lui     $a1,1024
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT3.clearTXNFULLIE; assembler; nostackframe; inline;
asm
  lui     $a1,1024
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT3.setTXNFULLIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,26,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT3.getTXNFULLIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,26,1
end;
procedure TCAN1_C1FIFOINT3.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TCAN1_C1FIFOINT3.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TCAN1_C1FIFOCI3.setCFIFOCI(thebits : TBits_5); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,5
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCI3.getCFIFOCI : TBits_5;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,5
end;
procedure TCAN1_C1FIFOCI3.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TCAN1_C1FIFOCI3.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TCAN1_C1FIFOCON4.setTXPRI(thebits : TBits_2); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,2
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON4.getTXPRI : TBits_2;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,2
end;
procedure TCAN1_C1FIFOCON4.setRTREN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON4.clearRTREN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON4.setRTREN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,2,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON4.getRTREN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,2,1
end;
procedure TCAN1_C1FIFOCON4.setTXREQ; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON4.clearTXREQ; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON4.setTXREQ(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,3,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON4.getTXREQ : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,3,1
end;
procedure TCAN1_C1FIFOCON4.setTXERR; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON4.clearTXERR; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON4.setTXERR(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,4,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON4.getTXERR : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,4,1
end;
procedure TCAN1_C1FIFOCON4.setTXLARB; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON4.clearTXLARB; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON4.setTXLARB(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,5,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON4.getTXLARB : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,5,1
end;
procedure TCAN1_C1FIFOCON4.setTXABAT; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON4.clearTXABAT; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON4.setTXABAT(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,6,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON4.getTXABAT : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,6,1
end;
procedure TCAN1_C1FIFOCON4.setTXEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON4.clearTXEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON4.setTXEN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,7,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON4.getTXEN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,7,1
end;
procedure TCAN1_C1FIFOCON4.setDONLY; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4096
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON4.clearDONLY; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4096
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON4.setDONLY(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,12,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON4.getDONLY : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,12,1
end;
procedure TCAN1_C1FIFOCON4.setUINC; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON4.clearUINC; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON4.setUINC(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,13,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON4.getUINC : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,13,1
end;
procedure TCAN1_C1FIFOCON4.setFRESET; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16384
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON4.clearFRESET; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16384
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON4.setFRESET(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,14,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON4.getFRESET : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,14,1
end;
procedure TCAN1_C1FIFOCON4.setFSIZE(thebits : TBits_5); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,16,5
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON4.getFSIZE : TBits_5;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,16,5
end;
procedure TCAN1_C1FIFOCON4.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TCAN1_C1FIFOCON4.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TCAN1_C1FIFOINT4.setRXNEMPTYIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT4.clearRXNEMPTYIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT4.setRXNEMPTYIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT4.getRXNEMPTYIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,1
end;
procedure TCAN1_C1FIFOINT4.setRXHALFIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT4.clearRXHALFIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT4.setRXHALFIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,1,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT4.getRXHALFIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,1,1
end;
procedure TCAN1_C1FIFOINT4.setRXFULLIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT4.clearRXFULLIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT4.setRXFULLIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,2,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT4.getRXFULLIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,2,1
end;
procedure TCAN1_C1FIFOINT4.setRXOVFLIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT4.clearRXOVFLIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT4.setRXOVFLIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,3,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT4.getRXOVFLIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,3,1
end;
procedure TCAN1_C1FIFOINT4.setTXEMPTYIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT4.clearTXEMPTYIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT4.setTXEMPTYIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,8,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT4.getTXEMPTYIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,8,1
end;
procedure TCAN1_C1FIFOINT4.setTXHALFIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,512
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT4.clearTXHALFIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,512
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT4.setTXHALFIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,9,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT4.getTXHALFIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,9,1
end;
procedure TCAN1_C1FIFOINT4.setTXNFULLIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1024
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT4.clearTXNFULLIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1024
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT4.setTXNFULLIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,10,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT4.getTXNFULLIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,10,1
end;
procedure TCAN1_C1FIFOINT4.setRXNEMPTYIE; assembler; nostackframe; inline;
asm
  lui     $a1,1
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT4.clearRXNEMPTYIE; assembler; nostackframe; inline;
asm
  lui     $a1,1
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT4.setRXNEMPTYIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,16,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT4.getRXNEMPTYIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,16,1
end;
procedure TCAN1_C1FIFOINT4.setRXHALFIE; assembler; nostackframe; inline;
asm
  lui     $a1,2
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT4.clearRXHALFIE; assembler; nostackframe; inline;
asm
  lui     $a1,2
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT4.setRXHALFIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,17,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT4.getRXHALFIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,17,1
end;
procedure TCAN1_C1FIFOINT4.setRXFULLIE; assembler; nostackframe; inline;
asm
  lui     $a1,4
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT4.clearRXFULLIE; assembler; nostackframe; inline;
asm
  lui     $a1,4
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT4.setRXFULLIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,18,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT4.getRXFULLIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,18,1
end;
procedure TCAN1_C1FIFOINT4.setRXOVFLIE; assembler; nostackframe; inline;
asm
  lui     $a1,8
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT4.clearRXOVFLIE; assembler; nostackframe; inline;
asm
  lui     $a1,8
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT4.setRXOVFLIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,19,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT4.getRXOVFLIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,19,1
end;
procedure TCAN1_C1FIFOINT4.setTXEMPTYIE; assembler; nostackframe; inline;
asm
  lui     $a1,256
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT4.clearTXEMPTYIE; assembler; nostackframe; inline;
asm
  lui     $a1,256
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT4.setTXEMPTYIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,24,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT4.getTXEMPTYIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,24,1
end;
procedure TCAN1_C1FIFOINT4.setTXHALFIE; assembler; nostackframe; inline;
asm
  lui     $a1,512
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT4.clearTXHALFIE; assembler; nostackframe; inline;
asm
  lui     $a1,512
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT4.setTXHALFIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,25,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT4.getTXHALFIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,25,1
end;
procedure TCAN1_C1FIFOINT4.setTXNFULLIE; assembler; nostackframe; inline;
asm
  lui     $a1,1024
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT4.clearTXNFULLIE; assembler; nostackframe; inline;
asm
  lui     $a1,1024
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT4.setTXNFULLIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,26,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT4.getTXNFULLIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,26,1
end;
procedure TCAN1_C1FIFOINT4.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TCAN1_C1FIFOINT4.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TCAN1_C1FIFOCI4.setCFIFOCI(thebits : TBits_5); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,5
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCI4.getCFIFOCI : TBits_5;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,5
end;
procedure TCAN1_C1FIFOCI4.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TCAN1_C1FIFOCI4.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TCAN1_C1FIFOCON5.setTXPRI(thebits : TBits_2); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,2
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON5.getTXPRI : TBits_2;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,2
end;
procedure TCAN1_C1FIFOCON5.setRTREN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON5.clearRTREN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON5.setRTREN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,2,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON5.getRTREN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,2,1
end;
procedure TCAN1_C1FIFOCON5.setTXREQ; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON5.clearTXREQ; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON5.setTXREQ(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,3,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON5.getTXREQ : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,3,1
end;
procedure TCAN1_C1FIFOCON5.setTXERR; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON5.clearTXERR; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON5.setTXERR(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,4,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON5.getTXERR : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,4,1
end;
procedure TCAN1_C1FIFOCON5.setTXLARB; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON5.clearTXLARB; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON5.setTXLARB(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,5,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON5.getTXLARB : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,5,1
end;
procedure TCAN1_C1FIFOCON5.setTXABAT; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON5.clearTXABAT; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON5.setTXABAT(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,6,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON5.getTXABAT : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,6,1
end;
procedure TCAN1_C1FIFOCON5.setTXEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON5.clearTXEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON5.setTXEN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,7,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON5.getTXEN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,7,1
end;
procedure TCAN1_C1FIFOCON5.setDONLY; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4096
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON5.clearDONLY; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4096
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON5.setDONLY(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,12,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON5.getDONLY : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,12,1
end;
procedure TCAN1_C1FIFOCON5.setUINC; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON5.clearUINC; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON5.setUINC(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,13,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON5.getUINC : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,13,1
end;
procedure TCAN1_C1FIFOCON5.setFRESET; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16384
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON5.clearFRESET; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16384
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON5.setFRESET(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,14,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON5.getFRESET : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,14,1
end;
procedure TCAN1_C1FIFOCON5.setFSIZE(thebits : TBits_5); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,16,5
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON5.getFSIZE : TBits_5;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,16,5
end;
procedure TCAN1_C1FIFOCON5.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TCAN1_C1FIFOCON5.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TCAN1_C1FIFOINT5.setRXNEMPTYIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT5.clearRXNEMPTYIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT5.setRXNEMPTYIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT5.getRXNEMPTYIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,1
end;
procedure TCAN1_C1FIFOINT5.setRXHALFIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT5.clearRXHALFIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT5.setRXHALFIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,1,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT5.getRXHALFIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,1,1
end;
procedure TCAN1_C1FIFOINT5.setRXFULLIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT5.clearRXFULLIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT5.setRXFULLIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,2,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT5.getRXFULLIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,2,1
end;
procedure TCAN1_C1FIFOINT5.setRXOVFLIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT5.clearRXOVFLIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT5.setRXOVFLIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,3,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT5.getRXOVFLIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,3,1
end;
procedure TCAN1_C1FIFOINT5.setTXEMPTYIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT5.clearTXEMPTYIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT5.setTXEMPTYIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,8,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT5.getTXEMPTYIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,8,1
end;
procedure TCAN1_C1FIFOINT5.setTXHALFIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,512
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT5.clearTXHALFIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,512
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT5.setTXHALFIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,9,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT5.getTXHALFIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,9,1
end;
procedure TCAN1_C1FIFOINT5.setTXNFULLIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1024
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT5.clearTXNFULLIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1024
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT5.setTXNFULLIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,10,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT5.getTXNFULLIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,10,1
end;
procedure TCAN1_C1FIFOINT5.setRXNEMPTYIE; assembler; nostackframe; inline;
asm
  lui     $a1,1
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT5.clearRXNEMPTYIE; assembler; nostackframe; inline;
asm
  lui     $a1,1
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT5.setRXNEMPTYIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,16,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT5.getRXNEMPTYIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,16,1
end;
procedure TCAN1_C1FIFOINT5.setRXHALFIE; assembler; nostackframe; inline;
asm
  lui     $a1,2
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT5.clearRXHALFIE; assembler; nostackframe; inline;
asm
  lui     $a1,2
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT5.setRXHALFIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,17,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT5.getRXHALFIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,17,1
end;
procedure TCAN1_C1FIFOINT5.setRXFULLIE; assembler; nostackframe; inline;
asm
  lui     $a1,4
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT5.clearRXFULLIE; assembler; nostackframe; inline;
asm
  lui     $a1,4
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT5.setRXFULLIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,18,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT5.getRXFULLIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,18,1
end;
procedure TCAN1_C1FIFOINT5.setRXOVFLIE; assembler; nostackframe; inline;
asm
  lui     $a1,8
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT5.clearRXOVFLIE; assembler; nostackframe; inline;
asm
  lui     $a1,8
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT5.setRXOVFLIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,19,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT5.getRXOVFLIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,19,1
end;
procedure TCAN1_C1FIFOINT5.setTXEMPTYIE; assembler; nostackframe; inline;
asm
  lui     $a1,256
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT5.clearTXEMPTYIE; assembler; nostackframe; inline;
asm
  lui     $a1,256
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT5.setTXEMPTYIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,24,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT5.getTXEMPTYIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,24,1
end;
procedure TCAN1_C1FIFOINT5.setTXHALFIE; assembler; nostackframe; inline;
asm
  lui     $a1,512
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT5.clearTXHALFIE; assembler; nostackframe; inline;
asm
  lui     $a1,512
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT5.setTXHALFIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,25,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT5.getTXHALFIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,25,1
end;
procedure TCAN1_C1FIFOINT5.setTXNFULLIE; assembler; nostackframe; inline;
asm
  lui     $a1,1024
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT5.clearTXNFULLIE; assembler; nostackframe; inline;
asm
  lui     $a1,1024
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT5.setTXNFULLIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,26,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT5.getTXNFULLIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,26,1
end;
procedure TCAN1_C1FIFOINT5.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TCAN1_C1FIFOINT5.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TCAN1_C1FIFOCI5.setCFIFOCI(thebits : TBits_5); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,5
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCI5.getCFIFOCI : TBits_5;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,5
end;
procedure TCAN1_C1FIFOCI5.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TCAN1_C1FIFOCI5.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TCAN1_C1FIFOCON6.setTXPRI(thebits : TBits_2); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,2
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON6.getTXPRI : TBits_2;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,2
end;
procedure TCAN1_C1FIFOCON6.setRTREN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON6.clearRTREN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON6.setRTREN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,2,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON6.getRTREN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,2,1
end;
procedure TCAN1_C1FIFOCON6.setTXREQ; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON6.clearTXREQ; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON6.setTXREQ(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,3,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON6.getTXREQ : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,3,1
end;
procedure TCAN1_C1FIFOCON6.setTXERR; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON6.clearTXERR; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON6.setTXERR(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,4,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON6.getTXERR : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,4,1
end;
procedure TCAN1_C1FIFOCON6.setTXLARB; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON6.clearTXLARB; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON6.setTXLARB(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,5,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON6.getTXLARB : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,5,1
end;
procedure TCAN1_C1FIFOCON6.setTXABAT; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON6.clearTXABAT; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON6.setTXABAT(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,6,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON6.getTXABAT : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,6,1
end;
procedure TCAN1_C1FIFOCON6.setTXEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON6.clearTXEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON6.setTXEN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,7,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON6.getTXEN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,7,1
end;
procedure TCAN1_C1FIFOCON6.setDONLY; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4096
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON6.clearDONLY; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4096
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON6.setDONLY(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,12,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON6.getDONLY : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,12,1
end;
procedure TCAN1_C1FIFOCON6.setUINC; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON6.clearUINC; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON6.setUINC(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,13,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON6.getUINC : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,13,1
end;
procedure TCAN1_C1FIFOCON6.setFRESET; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16384
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON6.clearFRESET; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16384
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON6.setFRESET(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,14,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON6.getFRESET : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,14,1
end;
procedure TCAN1_C1FIFOCON6.setFSIZE(thebits : TBits_5); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,16,5
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON6.getFSIZE : TBits_5;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,16,5
end;
procedure TCAN1_C1FIFOCON6.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TCAN1_C1FIFOCON6.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TCAN1_C1FIFOINT6.setRXNEMPTYIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT6.clearRXNEMPTYIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT6.setRXNEMPTYIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT6.getRXNEMPTYIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,1
end;
procedure TCAN1_C1FIFOINT6.setRXHALFIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT6.clearRXHALFIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT6.setRXHALFIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,1,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT6.getRXHALFIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,1,1
end;
procedure TCAN1_C1FIFOINT6.setRXFULLIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT6.clearRXFULLIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT6.setRXFULLIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,2,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT6.getRXFULLIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,2,1
end;
procedure TCAN1_C1FIFOINT6.setRXOVFLIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT6.clearRXOVFLIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT6.setRXOVFLIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,3,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT6.getRXOVFLIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,3,1
end;
procedure TCAN1_C1FIFOINT6.setTXEMPTYIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT6.clearTXEMPTYIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT6.setTXEMPTYIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,8,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT6.getTXEMPTYIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,8,1
end;
procedure TCAN1_C1FIFOINT6.setTXHALFIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,512
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT6.clearTXHALFIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,512
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT6.setTXHALFIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,9,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT6.getTXHALFIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,9,1
end;
procedure TCAN1_C1FIFOINT6.setTXNFULLIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1024
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT6.clearTXNFULLIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1024
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT6.setTXNFULLIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,10,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT6.getTXNFULLIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,10,1
end;
procedure TCAN1_C1FIFOINT6.setRXNEMPTYIE; assembler; nostackframe; inline;
asm
  lui     $a1,1
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT6.clearRXNEMPTYIE; assembler; nostackframe; inline;
asm
  lui     $a1,1
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT6.setRXNEMPTYIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,16,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT6.getRXNEMPTYIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,16,1
end;
procedure TCAN1_C1FIFOINT6.setRXHALFIE; assembler; nostackframe; inline;
asm
  lui     $a1,2
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT6.clearRXHALFIE; assembler; nostackframe; inline;
asm
  lui     $a1,2
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT6.setRXHALFIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,17,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT6.getRXHALFIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,17,1
end;
procedure TCAN1_C1FIFOINT6.setRXFULLIE; assembler; nostackframe; inline;
asm
  lui     $a1,4
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT6.clearRXFULLIE; assembler; nostackframe; inline;
asm
  lui     $a1,4
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT6.setRXFULLIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,18,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT6.getRXFULLIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,18,1
end;
procedure TCAN1_C1FIFOINT6.setRXOVFLIE; assembler; nostackframe; inline;
asm
  lui     $a1,8
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT6.clearRXOVFLIE; assembler; nostackframe; inline;
asm
  lui     $a1,8
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT6.setRXOVFLIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,19,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT6.getRXOVFLIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,19,1
end;
procedure TCAN1_C1FIFOINT6.setTXEMPTYIE; assembler; nostackframe; inline;
asm
  lui     $a1,256
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT6.clearTXEMPTYIE; assembler; nostackframe; inline;
asm
  lui     $a1,256
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT6.setTXEMPTYIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,24,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT6.getTXEMPTYIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,24,1
end;
procedure TCAN1_C1FIFOINT6.setTXHALFIE; assembler; nostackframe; inline;
asm
  lui     $a1,512
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT6.clearTXHALFIE; assembler; nostackframe; inline;
asm
  lui     $a1,512
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT6.setTXHALFIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,25,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT6.getTXHALFIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,25,1
end;
procedure TCAN1_C1FIFOINT6.setTXNFULLIE; assembler; nostackframe; inline;
asm
  lui     $a1,1024
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT6.clearTXNFULLIE; assembler; nostackframe; inline;
asm
  lui     $a1,1024
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT6.setTXNFULLIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,26,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT6.getTXNFULLIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,26,1
end;
procedure TCAN1_C1FIFOINT6.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TCAN1_C1FIFOINT6.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TCAN1_C1FIFOCI6.setCFIFOCI(thebits : TBits_5); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,5
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCI6.getCFIFOCI : TBits_5;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,5
end;
procedure TCAN1_C1FIFOCI6.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TCAN1_C1FIFOCI6.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TCAN1_C1FIFOCON7.setTXPRI(thebits : TBits_2); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,2
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON7.getTXPRI : TBits_2;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,2
end;
procedure TCAN1_C1FIFOCON7.setRTREN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON7.clearRTREN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON7.setRTREN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,2,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON7.getRTREN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,2,1
end;
procedure TCAN1_C1FIFOCON7.setTXREQ; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON7.clearTXREQ; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON7.setTXREQ(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,3,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON7.getTXREQ : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,3,1
end;
procedure TCAN1_C1FIFOCON7.setTXERR; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON7.clearTXERR; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON7.setTXERR(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,4,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON7.getTXERR : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,4,1
end;
procedure TCAN1_C1FIFOCON7.setTXLARB; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON7.clearTXLARB; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON7.setTXLARB(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,5,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON7.getTXLARB : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,5,1
end;
procedure TCAN1_C1FIFOCON7.setTXABAT; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON7.clearTXABAT; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON7.setTXABAT(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,6,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON7.getTXABAT : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,6,1
end;
procedure TCAN1_C1FIFOCON7.setTXEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON7.clearTXEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON7.setTXEN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,7,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON7.getTXEN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,7,1
end;
procedure TCAN1_C1FIFOCON7.setDONLY; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4096
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON7.clearDONLY; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4096
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON7.setDONLY(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,12,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON7.getDONLY : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,12,1
end;
procedure TCAN1_C1FIFOCON7.setUINC; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON7.clearUINC; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON7.setUINC(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,13,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON7.getUINC : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,13,1
end;
procedure TCAN1_C1FIFOCON7.setFRESET; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16384
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON7.clearFRESET; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16384
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON7.setFRESET(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,14,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON7.getFRESET : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,14,1
end;
procedure TCAN1_C1FIFOCON7.setFSIZE(thebits : TBits_5); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,16,5
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON7.getFSIZE : TBits_5;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,16,5
end;
procedure TCAN1_C1FIFOCON7.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TCAN1_C1FIFOCON7.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TCAN1_C1FIFOINT7.setRXNEMPTYIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT7.clearRXNEMPTYIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT7.setRXNEMPTYIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT7.getRXNEMPTYIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,1
end;
procedure TCAN1_C1FIFOINT7.setRXHALFIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT7.clearRXHALFIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT7.setRXHALFIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,1,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT7.getRXHALFIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,1,1
end;
procedure TCAN1_C1FIFOINT7.setRXFULLIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT7.clearRXFULLIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT7.setRXFULLIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,2,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT7.getRXFULLIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,2,1
end;
procedure TCAN1_C1FIFOINT7.setRXOVFLIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT7.clearRXOVFLIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT7.setRXOVFLIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,3,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT7.getRXOVFLIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,3,1
end;
procedure TCAN1_C1FIFOINT7.setTXEMPTYIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT7.clearTXEMPTYIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT7.setTXEMPTYIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,8,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT7.getTXEMPTYIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,8,1
end;
procedure TCAN1_C1FIFOINT7.setTXHALFIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,512
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT7.clearTXHALFIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,512
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT7.setTXHALFIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,9,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT7.getTXHALFIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,9,1
end;
procedure TCAN1_C1FIFOINT7.setTXNFULLIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1024
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT7.clearTXNFULLIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1024
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT7.setTXNFULLIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,10,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT7.getTXNFULLIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,10,1
end;
procedure TCAN1_C1FIFOINT7.setRXNEMPTYIE; assembler; nostackframe; inline;
asm
  lui     $a1,1
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT7.clearRXNEMPTYIE; assembler; nostackframe; inline;
asm
  lui     $a1,1
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT7.setRXNEMPTYIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,16,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT7.getRXNEMPTYIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,16,1
end;
procedure TCAN1_C1FIFOINT7.setRXHALFIE; assembler; nostackframe; inline;
asm
  lui     $a1,2
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT7.clearRXHALFIE; assembler; nostackframe; inline;
asm
  lui     $a1,2
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT7.setRXHALFIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,17,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT7.getRXHALFIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,17,1
end;
procedure TCAN1_C1FIFOINT7.setRXFULLIE; assembler; nostackframe; inline;
asm
  lui     $a1,4
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT7.clearRXFULLIE; assembler; nostackframe; inline;
asm
  lui     $a1,4
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT7.setRXFULLIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,18,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT7.getRXFULLIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,18,1
end;
procedure TCAN1_C1FIFOINT7.setRXOVFLIE; assembler; nostackframe; inline;
asm
  lui     $a1,8
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT7.clearRXOVFLIE; assembler; nostackframe; inline;
asm
  lui     $a1,8
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT7.setRXOVFLIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,19,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT7.getRXOVFLIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,19,1
end;
procedure TCAN1_C1FIFOINT7.setTXEMPTYIE; assembler; nostackframe; inline;
asm
  lui     $a1,256
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT7.clearTXEMPTYIE; assembler; nostackframe; inline;
asm
  lui     $a1,256
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT7.setTXEMPTYIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,24,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT7.getTXEMPTYIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,24,1
end;
procedure TCAN1_C1FIFOINT7.setTXHALFIE; assembler; nostackframe; inline;
asm
  lui     $a1,512
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT7.clearTXHALFIE; assembler; nostackframe; inline;
asm
  lui     $a1,512
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT7.setTXHALFIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,25,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT7.getTXHALFIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,25,1
end;
procedure TCAN1_C1FIFOINT7.setTXNFULLIE; assembler; nostackframe; inline;
asm
  lui     $a1,1024
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT7.clearTXNFULLIE; assembler; nostackframe; inline;
asm
  lui     $a1,1024
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT7.setTXNFULLIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,26,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT7.getTXNFULLIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,26,1
end;
procedure TCAN1_C1FIFOINT7.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TCAN1_C1FIFOINT7.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TCAN1_C1FIFOCI7.setCFIFOCI(thebits : TBits_5); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,5
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCI7.getCFIFOCI : TBits_5;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,5
end;
procedure TCAN1_C1FIFOCI7.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TCAN1_C1FIFOCI7.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TCAN1_C1FIFOCON8.setTXPRI(thebits : TBits_2); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,2
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON8.getTXPRI : TBits_2;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,2
end;
procedure TCAN1_C1FIFOCON8.setRTREN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON8.clearRTREN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON8.setRTREN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,2,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON8.getRTREN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,2,1
end;
procedure TCAN1_C1FIFOCON8.setTXREQ; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON8.clearTXREQ; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON8.setTXREQ(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,3,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON8.getTXREQ : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,3,1
end;
procedure TCAN1_C1FIFOCON8.setTXERR; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON8.clearTXERR; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON8.setTXERR(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,4,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON8.getTXERR : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,4,1
end;
procedure TCAN1_C1FIFOCON8.setTXLARB; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON8.clearTXLARB; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON8.setTXLARB(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,5,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON8.getTXLARB : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,5,1
end;
procedure TCAN1_C1FIFOCON8.setTXABAT; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON8.clearTXABAT; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON8.setTXABAT(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,6,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON8.getTXABAT : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,6,1
end;
procedure TCAN1_C1FIFOCON8.setTXEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON8.clearTXEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON8.setTXEN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,7,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON8.getTXEN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,7,1
end;
procedure TCAN1_C1FIFOCON8.setDONLY; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4096
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON8.clearDONLY; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4096
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON8.setDONLY(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,12,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON8.getDONLY : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,12,1
end;
procedure TCAN1_C1FIFOCON8.setUINC; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON8.clearUINC; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON8.setUINC(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,13,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON8.getUINC : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,13,1
end;
procedure TCAN1_C1FIFOCON8.setFRESET; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16384
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON8.clearFRESET; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16384
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON8.setFRESET(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,14,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON8.getFRESET : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,14,1
end;
procedure TCAN1_C1FIFOCON8.setFSIZE(thebits : TBits_5); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,16,5
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON8.getFSIZE : TBits_5;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,16,5
end;
procedure TCAN1_C1FIFOCON8.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TCAN1_C1FIFOCON8.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TCAN1_C1FIFOINT8.setRXNEMPTYIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT8.clearRXNEMPTYIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT8.setRXNEMPTYIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT8.getRXNEMPTYIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,1
end;
procedure TCAN1_C1FIFOINT8.setRXHALFIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT8.clearRXHALFIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT8.setRXHALFIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,1,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT8.getRXHALFIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,1,1
end;
procedure TCAN1_C1FIFOINT8.setRXFULLIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT8.clearRXFULLIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT8.setRXFULLIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,2,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT8.getRXFULLIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,2,1
end;
procedure TCAN1_C1FIFOINT8.setRXOVFLIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT8.clearRXOVFLIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT8.setRXOVFLIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,3,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT8.getRXOVFLIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,3,1
end;
procedure TCAN1_C1FIFOINT8.setTXEMPTYIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT8.clearTXEMPTYIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT8.setTXEMPTYIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,8,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT8.getTXEMPTYIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,8,1
end;
procedure TCAN1_C1FIFOINT8.setTXHALFIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,512
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT8.clearTXHALFIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,512
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT8.setTXHALFIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,9,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT8.getTXHALFIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,9,1
end;
procedure TCAN1_C1FIFOINT8.setTXNFULLIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1024
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT8.clearTXNFULLIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1024
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT8.setTXNFULLIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,10,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT8.getTXNFULLIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,10,1
end;
procedure TCAN1_C1FIFOINT8.setRXNEMPTYIE; assembler; nostackframe; inline;
asm
  lui     $a1,1
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT8.clearRXNEMPTYIE; assembler; nostackframe; inline;
asm
  lui     $a1,1
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT8.setRXNEMPTYIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,16,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT8.getRXNEMPTYIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,16,1
end;
procedure TCAN1_C1FIFOINT8.setRXHALFIE; assembler; nostackframe; inline;
asm
  lui     $a1,2
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT8.clearRXHALFIE; assembler; nostackframe; inline;
asm
  lui     $a1,2
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT8.setRXHALFIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,17,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT8.getRXHALFIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,17,1
end;
procedure TCAN1_C1FIFOINT8.setRXFULLIE; assembler; nostackframe; inline;
asm
  lui     $a1,4
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT8.clearRXFULLIE; assembler; nostackframe; inline;
asm
  lui     $a1,4
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT8.setRXFULLIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,18,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT8.getRXFULLIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,18,1
end;
procedure TCAN1_C1FIFOINT8.setRXOVFLIE; assembler; nostackframe; inline;
asm
  lui     $a1,8
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT8.clearRXOVFLIE; assembler; nostackframe; inline;
asm
  lui     $a1,8
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT8.setRXOVFLIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,19,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT8.getRXOVFLIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,19,1
end;
procedure TCAN1_C1FIFOINT8.setTXEMPTYIE; assembler; nostackframe; inline;
asm
  lui     $a1,256
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT8.clearTXEMPTYIE; assembler; nostackframe; inline;
asm
  lui     $a1,256
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT8.setTXEMPTYIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,24,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT8.getTXEMPTYIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,24,1
end;
procedure TCAN1_C1FIFOINT8.setTXHALFIE; assembler; nostackframe; inline;
asm
  lui     $a1,512
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT8.clearTXHALFIE; assembler; nostackframe; inline;
asm
  lui     $a1,512
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT8.setTXHALFIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,25,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT8.getTXHALFIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,25,1
end;
procedure TCAN1_C1FIFOINT8.setTXNFULLIE; assembler; nostackframe; inline;
asm
  lui     $a1,1024
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT8.clearTXNFULLIE; assembler; nostackframe; inline;
asm
  lui     $a1,1024
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT8.setTXNFULLIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,26,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT8.getTXNFULLIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,26,1
end;
procedure TCAN1_C1FIFOINT8.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TCAN1_C1FIFOINT8.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TCAN1_C1FIFOCI8.setCFIFOCI(thebits : TBits_5); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,5
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCI8.getCFIFOCI : TBits_5;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,5
end;
procedure TCAN1_C1FIFOCI8.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TCAN1_C1FIFOCI8.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TCAN1_C1FIFOCON9.setTXPRI(thebits : TBits_2); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,2
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON9.getTXPRI : TBits_2;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,2
end;
procedure TCAN1_C1FIFOCON9.setRTREN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON9.clearRTREN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON9.setRTREN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,2,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON9.getRTREN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,2,1
end;
procedure TCAN1_C1FIFOCON9.setTXREQ; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON9.clearTXREQ; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON9.setTXREQ(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,3,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON9.getTXREQ : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,3,1
end;
procedure TCAN1_C1FIFOCON9.setTXERR; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON9.clearTXERR; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON9.setTXERR(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,4,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON9.getTXERR : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,4,1
end;
procedure TCAN1_C1FIFOCON9.setTXLARB; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON9.clearTXLARB; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON9.setTXLARB(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,5,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON9.getTXLARB : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,5,1
end;
procedure TCAN1_C1FIFOCON9.setTXABAT; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON9.clearTXABAT; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON9.setTXABAT(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,6,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON9.getTXABAT : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,6,1
end;
procedure TCAN1_C1FIFOCON9.setTXEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON9.clearTXEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON9.setTXEN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,7,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON9.getTXEN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,7,1
end;
procedure TCAN1_C1FIFOCON9.setDONLY; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4096
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON9.clearDONLY; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4096
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON9.setDONLY(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,12,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON9.getDONLY : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,12,1
end;
procedure TCAN1_C1FIFOCON9.setUINC; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON9.clearUINC; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON9.setUINC(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,13,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON9.getUINC : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,13,1
end;
procedure TCAN1_C1FIFOCON9.setFRESET; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16384
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON9.clearFRESET; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16384
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON9.setFRESET(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,14,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON9.getFRESET : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,14,1
end;
procedure TCAN1_C1FIFOCON9.setFSIZE(thebits : TBits_5); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,16,5
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON9.getFSIZE : TBits_5;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,16,5
end;
procedure TCAN1_C1FIFOCON9.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TCAN1_C1FIFOCON9.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TCAN1_C1FIFOINT9.setRXNEMPTYIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT9.clearRXNEMPTYIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT9.setRXNEMPTYIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT9.getRXNEMPTYIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,1
end;
procedure TCAN1_C1FIFOINT9.setRXHALFIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT9.clearRXHALFIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT9.setRXHALFIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,1,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT9.getRXHALFIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,1,1
end;
procedure TCAN1_C1FIFOINT9.setRXFULLIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT9.clearRXFULLIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT9.setRXFULLIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,2,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT9.getRXFULLIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,2,1
end;
procedure TCAN1_C1FIFOINT9.setRXOVFLIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT9.clearRXOVFLIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT9.setRXOVFLIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,3,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT9.getRXOVFLIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,3,1
end;
procedure TCAN1_C1FIFOINT9.setTXEMPTYIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT9.clearTXEMPTYIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT9.setTXEMPTYIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,8,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT9.getTXEMPTYIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,8,1
end;
procedure TCAN1_C1FIFOINT9.setTXHALFIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,512
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT9.clearTXHALFIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,512
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT9.setTXHALFIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,9,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT9.getTXHALFIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,9,1
end;
procedure TCAN1_C1FIFOINT9.setTXNFULLIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1024
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT9.clearTXNFULLIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1024
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT9.setTXNFULLIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,10,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT9.getTXNFULLIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,10,1
end;
procedure TCAN1_C1FIFOINT9.setRXNEMPTYIE; assembler; nostackframe; inline;
asm
  lui     $a1,1
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT9.clearRXNEMPTYIE; assembler; nostackframe; inline;
asm
  lui     $a1,1
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT9.setRXNEMPTYIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,16,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT9.getRXNEMPTYIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,16,1
end;
procedure TCAN1_C1FIFOINT9.setRXHALFIE; assembler; nostackframe; inline;
asm
  lui     $a1,2
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT9.clearRXHALFIE; assembler; nostackframe; inline;
asm
  lui     $a1,2
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT9.setRXHALFIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,17,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT9.getRXHALFIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,17,1
end;
procedure TCAN1_C1FIFOINT9.setRXFULLIE; assembler; nostackframe; inline;
asm
  lui     $a1,4
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT9.clearRXFULLIE; assembler; nostackframe; inline;
asm
  lui     $a1,4
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT9.setRXFULLIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,18,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT9.getRXFULLIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,18,1
end;
procedure TCAN1_C1FIFOINT9.setRXOVFLIE; assembler; nostackframe; inline;
asm
  lui     $a1,8
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT9.clearRXOVFLIE; assembler; nostackframe; inline;
asm
  lui     $a1,8
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT9.setRXOVFLIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,19,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT9.getRXOVFLIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,19,1
end;
procedure TCAN1_C1FIFOINT9.setTXEMPTYIE; assembler; nostackframe; inline;
asm
  lui     $a1,256
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT9.clearTXEMPTYIE; assembler; nostackframe; inline;
asm
  lui     $a1,256
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT9.setTXEMPTYIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,24,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT9.getTXEMPTYIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,24,1
end;
procedure TCAN1_C1FIFOINT9.setTXHALFIE; assembler; nostackframe; inline;
asm
  lui     $a1,512
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT9.clearTXHALFIE; assembler; nostackframe; inline;
asm
  lui     $a1,512
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT9.setTXHALFIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,25,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT9.getTXHALFIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,25,1
end;
procedure TCAN1_C1FIFOINT9.setTXNFULLIE; assembler; nostackframe; inline;
asm
  lui     $a1,1024
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT9.clearTXNFULLIE; assembler; nostackframe; inline;
asm
  lui     $a1,1024
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT9.setTXNFULLIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,26,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT9.getTXNFULLIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,26,1
end;
procedure TCAN1_C1FIFOINT9.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TCAN1_C1FIFOINT9.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TCAN1_C1FIFOCI9.setCFIFOCI(thebits : TBits_5); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,5
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCI9.getCFIFOCI : TBits_5;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,5
end;
procedure TCAN1_C1FIFOCI9.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TCAN1_C1FIFOCI9.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TCAN1_C1FIFOCON10.setTXPRI(thebits : TBits_2); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,2
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON10.getTXPRI : TBits_2;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,2
end;
procedure TCAN1_C1FIFOCON10.setRTREN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON10.clearRTREN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON10.setRTREN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,2,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON10.getRTREN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,2,1
end;
procedure TCAN1_C1FIFOCON10.setTXREQ; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON10.clearTXREQ; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON10.setTXREQ(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,3,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON10.getTXREQ : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,3,1
end;
procedure TCAN1_C1FIFOCON10.setTXERR; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON10.clearTXERR; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON10.setTXERR(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,4,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON10.getTXERR : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,4,1
end;
procedure TCAN1_C1FIFOCON10.setTXLARB; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON10.clearTXLARB; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON10.setTXLARB(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,5,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON10.getTXLARB : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,5,1
end;
procedure TCAN1_C1FIFOCON10.setTXABAT; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON10.clearTXABAT; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON10.setTXABAT(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,6,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON10.getTXABAT : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,6,1
end;
procedure TCAN1_C1FIFOCON10.setTXEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON10.clearTXEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON10.setTXEN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,7,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON10.getTXEN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,7,1
end;
procedure TCAN1_C1FIFOCON10.setDONLY; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4096
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON10.clearDONLY; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4096
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON10.setDONLY(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,12,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON10.getDONLY : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,12,1
end;
procedure TCAN1_C1FIFOCON10.setUINC; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON10.clearUINC; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON10.setUINC(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,13,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON10.getUINC : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,13,1
end;
procedure TCAN1_C1FIFOCON10.setFRESET; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16384
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON10.clearFRESET; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16384
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON10.setFRESET(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,14,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON10.getFRESET : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,14,1
end;
procedure TCAN1_C1FIFOCON10.setFSIZE(thebits : TBits_5); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,16,5
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON10.getFSIZE : TBits_5;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,16,5
end;
procedure TCAN1_C1FIFOCON10.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TCAN1_C1FIFOCON10.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TCAN1_C1FIFOINT10.setRXNEMPTYIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT10.clearRXNEMPTYIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT10.setRXNEMPTYIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT10.getRXNEMPTYIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,1
end;
procedure TCAN1_C1FIFOINT10.setRXHALFIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT10.clearRXHALFIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT10.setRXHALFIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,1,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT10.getRXHALFIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,1,1
end;
procedure TCAN1_C1FIFOINT10.setRXFULLIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT10.clearRXFULLIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT10.setRXFULLIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,2,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT10.getRXFULLIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,2,1
end;
procedure TCAN1_C1FIFOINT10.setRXOVFLIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT10.clearRXOVFLIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT10.setRXOVFLIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,3,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT10.getRXOVFLIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,3,1
end;
procedure TCAN1_C1FIFOINT10.setTXEMPTYIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT10.clearTXEMPTYIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT10.setTXEMPTYIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,8,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT10.getTXEMPTYIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,8,1
end;
procedure TCAN1_C1FIFOINT10.setTXHALFIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,512
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT10.clearTXHALFIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,512
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT10.setTXHALFIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,9,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT10.getTXHALFIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,9,1
end;
procedure TCAN1_C1FIFOINT10.setTXNFULLIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1024
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT10.clearTXNFULLIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1024
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT10.setTXNFULLIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,10,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT10.getTXNFULLIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,10,1
end;
procedure TCAN1_C1FIFOINT10.setRXNEMPTYIE; assembler; nostackframe; inline;
asm
  lui     $a1,1
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT10.clearRXNEMPTYIE; assembler; nostackframe; inline;
asm
  lui     $a1,1
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT10.setRXNEMPTYIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,16,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT10.getRXNEMPTYIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,16,1
end;
procedure TCAN1_C1FIFOINT10.setRXHALFIE; assembler; nostackframe; inline;
asm
  lui     $a1,2
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT10.clearRXHALFIE; assembler; nostackframe; inline;
asm
  lui     $a1,2
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT10.setRXHALFIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,17,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT10.getRXHALFIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,17,1
end;
procedure TCAN1_C1FIFOINT10.setRXFULLIE; assembler; nostackframe; inline;
asm
  lui     $a1,4
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT10.clearRXFULLIE; assembler; nostackframe; inline;
asm
  lui     $a1,4
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT10.setRXFULLIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,18,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT10.getRXFULLIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,18,1
end;
procedure TCAN1_C1FIFOINT10.setRXOVFLIE; assembler; nostackframe; inline;
asm
  lui     $a1,8
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT10.clearRXOVFLIE; assembler; nostackframe; inline;
asm
  lui     $a1,8
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT10.setRXOVFLIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,19,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT10.getRXOVFLIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,19,1
end;
procedure TCAN1_C1FIFOINT10.setTXEMPTYIE; assembler; nostackframe; inline;
asm
  lui     $a1,256
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT10.clearTXEMPTYIE; assembler; nostackframe; inline;
asm
  lui     $a1,256
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT10.setTXEMPTYIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,24,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT10.getTXEMPTYIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,24,1
end;
procedure TCAN1_C1FIFOINT10.setTXHALFIE; assembler; nostackframe; inline;
asm
  lui     $a1,512
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT10.clearTXHALFIE; assembler; nostackframe; inline;
asm
  lui     $a1,512
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT10.setTXHALFIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,25,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT10.getTXHALFIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,25,1
end;
procedure TCAN1_C1FIFOINT10.setTXNFULLIE; assembler; nostackframe; inline;
asm
  lui     $a1,1024
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT10.clearTXNFULLIE; assembler; nostackframe; inline;
asm
  lui     $a1,1024
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT10.setTXNFULLIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,26,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT10.getTXNFULLIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,26,1
end;
procedure TCAN1_C1FIFOINT10.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TCAN1_C1FIFOINT10.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TCAN1_C1FIFOCI10.setCFIFOCI(thebits : TBits_5); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,5
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCI10.getCFIFOCI : TBits_5;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,5
end;
procedure TCAN1_C1FIFOCI10.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TCAN1_C1FIFOCI10.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TCAN1_C1FIFOCON11.setTXPRI(thebits : TBits_2); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,2
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON11.getTXPRI : TBits_2;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,2
end;
procedure TCAN1_C1FIFOCON11.setRTREN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON11.clearRTREN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON11.setRTREN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,2,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON11.getRTREN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,2,1
end;
procedure TCAN1_C1FIFOCON11.setTXREQ; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON11.clearTXREQ; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON11.setTXREQ(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,3,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON11.getTXREQ : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,3,1
end;
procedure TCAN1_C1FIFOCON11.setTXERR; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON11.clearTXERR; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON11.setTXERR(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,4,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON11.getTXERR : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,4,1
end;
procedure TCAN1_C1FIFOCON11.setTXLARB; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON11.clearTXLARB; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON11.setTXLARB(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,5,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON11.getTXLARB : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,5,1
end;
procedure TCAN1_C1FIFOCON11.setTXABAT; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON11.clearTXABAT; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON11.setTXABAT(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,6,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON11.getTXABAT : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,6,1
end;
procedure TCAN1_C1FIFOCON11.setTXEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON11.clearTXEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON11.setTXEN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,7,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON11.getTXEN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,7,1
end;
procedure TCAN1_C1FIFOCON11.setDONLY; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4096
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON11.clearDONLY; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4096
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON11.setDONLY(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,12,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON11.getDONLY : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,12,1
end;
procedure TCAN1_C1FIFOCON11.setUINC; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON11.clearUINC; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON11.setUINC(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,13,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON11.getUINC : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,13,1
end;
procedure TCAN1_C1FIFOCON11.setFRESET; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16384
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON11.clearFRESET; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16384
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON11.setFRESET(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,14,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON11.getFRESET : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,14,1
end;
procedure TCAN1_C1FIFOCON11.setFSIZE(thebits : TBits_5); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,16,5
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON11.getFSIZE : TBits_5;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,16,5
end;
procedure TCAN1_C1FIFOCON11.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TCAN1_C1FIFOCON11.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TCAN1_C1FIFOINT11.setRXNEMPTYIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT11.clearRXNEMPTYIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT11.setRXNEMPTYIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT11.getRXNEMPTYIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,1
end;
procedure TCAN1_C1FIFOINT11.setRXHALFIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT11.clearRXHALFIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT11.setRXHALFIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,1,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT11.getRXHALFIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,1,1
end;
procedure TCAN1_C1FIFOINT11.setRXFULLIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT11.clearRXFULLIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT11.setRXFULLIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,2,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT11.getRXFULLIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,2,1
end;
procedure TCAN1_C1FIFOINT11.setRXOVFLIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT11.clearRXOVFLIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT11.setRXOVFLIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,3,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT11.getRXOVFLIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,3,1
end;
procedure TCAN1_C1FIFOINT11.setTXEMPTYIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT11.clearTXEMPTYIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT11.setTXEMPTYIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,8,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT11.getTXEMPTYIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,8,1
end;
procedure TCAN1_C1FIFOINT11.setTXHALFIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,512
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT11.clearTXHALFIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,512
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT11.setTXHALFIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,9,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT11.getTXHALFIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,9,1
end;
procedure TCAN1_C1FIFOINT11.setTXNFULLIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1024
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT11.clearTXNFULLIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1024
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT11.setTXNFULLIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,10,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT11.getTXNFULLIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,10,1
end;
procedure TCAN1_C1FIFOINT11.setRXNEMPTYIE; assembler; nostackframe; inline;
asm
  lui     $a1,1
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT11.clearRXNEMPTYIE; assembler; nostackframe; inline;
asm
  lui     $a1,1
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT11.setRXNEMPTYIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,16,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT11.getRXNEMPTYIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,16,1
end;
procedure TCAN1_C1FIFOINT11.setRXHALFIE; assembler; nostackframe; inline;
asm
  lui     $a1,2
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT11.clearRXHALFIE; assembler; nostackframe; inline;
asm
  lui     $a1,2
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT11.setRXHALFIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,17,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT11.getRXHALFIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,17,1
end;
procedure TCAN1_C1FIFOINT11.setRXFULLIE; assembler; nostackframe; inline;
asm
  lui     $a1,4
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT11.clearRXFULLIE; assembler; nostackframe; inline;
asm
  lui     $a1,4
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT11.setRXFULLIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,18,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT11.getRXFULLIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,18,1
end;
procedure TCAN1_C1FIFOINT11.setRXOVFLIE; assembler; nostackframe; inline;
asm
  lui     $a1,8
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT11.clearRXOVFLIE; assembler; nostackframe; inline;
asm
  lui     $a1,8
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT11.setRXOVFLIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,19,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT11.getRXOVFLIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,19,1
end;
procedure TCAN1_C1FIFOINT11.setTXEMPTYIE; assembler; nostackframe; inline;
asm
  lui     $a1,256
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT11.clearTXEMPTYIE; assembler; nostackframe; inline;
asm
  lui     $a1,256
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT11.setTXEMPTYIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,24,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT11.getTXEMPTYIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,24,1
end;
procedure TCAN1_C1FIFOINT11.setTXHALFIE; assembler; nostackframe; inline;
asm
  lui     $a1,512
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT11.clearTXHALFIE; assembler; nostackframe; inline;
asm
  lui     $a1,512
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT11.setTXHALFIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,25,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT11.getTXHALFIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,25,1
end;
procedure TCAN1_C1FIFOINT11.setTXNFULLIE; assembler; nostackframe; inline;
asm
  lui     $a1,1024
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT11.clearTXNFULLIE; assembler; nostackframe; inline;
asm
  lui     $a1,1024
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT11.setTXNFULLIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,26,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT11.getTXNFULLIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,26,1
end;
procedure TCAN1_C1FIFOINT11.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TCAN1_C1FIFOINT11.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TCAN1_C1FIFOCI11.setCFIFOCI(thebits : TBits_5); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,5
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCI11.getCFIFOCI : TBits_5;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,5
end;
procedure TCAN1_C1FIFOCI11.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TCAN1_C1FIFOCI11.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TCAN1_C1FIFOCON12.setTXPRI(thebits : TBits_2); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,2
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON12.getTXPRI : TBits_2;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,2
end;
procedure TCAN1_C1FIFOCON12.setRTREN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON12.clearRTREN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON12.setRTREN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,2,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON12.getRTREN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,2,1
end;
procedure TCAN1_C1FIFOCON12.setTXREQ; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON12.clearTXREQ; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON12.setTXREQ(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,3,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON12.getTXREQ : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,3,1
end;
procedure TCAN1_C1FIFOCON12.setTXERR; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON12.clearTXERR; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON12.setTXERR(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,4,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON12.getTXERR : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,4,1
end;
procedure TCAN1_C1FIFOCON12.setTXLARB; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON12.clearTXLARB; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON12.setTXLARB(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,5,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON12.getTXLARB : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,5,1
end;
procedure TCAN1_C1FIFOCON12.setTXABAT; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON12.clearTXABAT; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON12.setTXABAT(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,6,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON12.getTXABAT : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,6,1
end;
procedure TCAN1_C1FIFOCON12.setTXEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON12.clearTXEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON12.setTXEN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,7,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON12.getTXEN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,7,1
end;
procedure TCAN1_C1FIFOCON12.setDONLY; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4096
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON12.clearDONLY; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4096
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON12.setDONLY(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,12,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON12.getDONLY : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,12,1
end;
procedure TCAN1_C1FIFOCON12.setUINC; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON12.clearUINC; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON12.setUINC(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,13,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON12.getUINC : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,13,1
end;
procedure TCAN1_C1FIFOCON12.setFRESET; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16384
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON12.clearFRESET; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16384
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON12.setFRESET(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,14,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON12.getFRESET : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,14,1
end;
procedure TCAN1_C1FIFOCON12.setFSIZE(thebits : TBits_5); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,16,5
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON12.getFSIZE : TBits_5;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,16,5
end;
procedure TCAN1_C1FIFOCON12.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TCAN1_C1FIFOCON12.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TCAN1_C1FIFOINT12.setRXNEMPTYIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT12.clearRXNEMPTYIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT12.setRXNEMPTYIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT12.getRXNEMPTYIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,1
end;
procedure TCAN1_C1FIFOINT12.setRXHALFIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT12.clearRXHALFIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT12.setRXHALFIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,1,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT12.getRXHALFIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,1,1
end;
procedure TCAN1_C1FIFOINT12.setRXFULLIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT12.clearRXFULLIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT12.setRXFULLIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,2,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT12.getRXFULLIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,2,1
end;
procedure TCAN1_C1FIFOINT12.setRXOVFLIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT12.clearRXOVFLIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT12.setRXOVFLIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,3,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT12.getRXOVFLIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,3,1
end;
procedure TCAN1_C1FIFOINT12.setTXEMPTYIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT12.clearTXEMPTYIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT12.setTXEMPTYIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,8,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT12.getTXEMPTYIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,8,1
end;
procedure TCAN1_C1FIFOINT12.setTXHALFIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,512
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT12.clearTXHALFIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,512
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT12.setTXHALFIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,9,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT12.getTXHALFIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,9,1
end;
procedure TCAN1_C1FIFOINT12.setTXNFULLIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1024
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT12.clearTXNFULLIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1024
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT12.setTXNFULLIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,10,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT12.getTXNFULLIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,10,1
end;
procedure TCAN1_C1FIFOINT12.setRXNEMPTYIE; assembler; nostackframe; inline;
asm
  lui     $a1,1
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT12.clearRXNEMPTYIE; assembler; nostackframe; inline;
asm
  lui     $a1,1
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT12.setRXNEMPTYIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,16,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT12.getRXNEMPTYIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,16,1
end;
procedure TCAN1_C1FIFOINT12.setRXHALFIE; assembler; nostackframe; inline;
asm
  lui     $a1,2
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT12.clearRXHALFIE; assembler; nostackframe; inline;
asm
  lui     $a1,2
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT12.setRXHALFIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,17,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT12.getRXHALFIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,17,1
end;
procedure TCAN1_C1FIFOINT12.setRXFULLIE; assembler; nostackframe; inline;
asm
  lui     $a1,4
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT12.clearRXFULLIE; assembler; nostackframe; inline;
asm
  lui     $a1,4
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT12.setRXFULLIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,18,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT12.getRXFULLIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,18,1
end;
procedure TCAN1_C1FIFOINT12.setRXOVFLIE; assembler; nostackframe; inline;
asm
  lui     $a1,8
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT12.clearRXOVFLIE; assembler; nostackframe; inline;
asm
  lui     $a1,8
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT12.setRXOVFLIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,19,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT12.getRXOVFLIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,19,1
end;
procedure TCAN1_C1FIFOINT12.setTXEMPTYIE; assembler; nostackframe; inline;
asm
  lui     $a1,256
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT12.clearTXEMPTYIE; assembler; nostackframe; inline;
asm
  lui     $a1,256
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT12.setTXEMPTYIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,24,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT12.getTXEMPTYIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,24,1
end;
procedure TCAN1_C1FIFOINT12.setTXHALFIE; assembler; nostackframe; inline;
asm
  lui     $a1,512
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT12.clearTXHALFIE; assembler; nostackframe; inline;
asm
  lui     $a1,512
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT12.setTXHALFIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,25,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT12.getTXHALFIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,25,1
end;
procedure TCAN1_C1FIFOINT12.setTXNFULLIE; assembler; nostackframe; inline;
asm
  lui     $a1,1024
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT12.clearTXNFULLIE; assembler; nostackframe; inline;
asm
  lui     $a1,1024
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT12.setTXNFULLIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,26,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT12.getTXNFULLIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,26,1
end;
procedure TCAN1_C1FIFOINT12.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TCAN1_C1FIFOINT12.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TCAN1_C1FIFOCI12.setCFIFOCI(thebits : TBits_5); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,5
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCI12.getCFIFOCI : TBits_5;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,5
end;
procedure TCAN1_C1FIFOCI12.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TCAN1_C1FIFOCI12.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TCAN1_C1FIFOCON13.setTXPRI(thebits : TBits_2); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,2
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON13.getTXPRI : TBits_2;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,2
end;
procedure TCAN1_C1FIFOCON13.setRTREN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON13.clearRTREN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON13.setRTREN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,2,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON13.getRTREN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,2,1
end;
procedure TCAN1_C1FIFOCON13.setTXREQ; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON13.clearTXREQ; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON13.setTXREQ(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,3,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON13.getTXREQ : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,3,1
end;
procedure TCAN1_C1FIFOCON13.setTXERR; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON13.clearTXERR; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON13.setTXERR(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,4,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON13.getTXERR : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,4,1
end;
procedure TCAN1_C1FIFOCON13.setTXLARB; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON13.clearTXLARB; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON13.setTXLARB(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,5,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON13.getTXLARB : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,5,1
end;
procedure TCAN1_C1FIFOCON13.setTXABAT; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON13.clearTXABAT; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON13.setTXABAT(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,6,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON13.getTXABAT : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,6,1
end;
procedure TCAN1_C1FIFOCON13.setTXEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON13.clearTXEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON13.setTXEN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,7,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON13.getTXEN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,7,1
end;
procedure TCAN1_C1FIFOCON13.setDONLY; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4096
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON13.clearDONLY; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4096
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON13.setDONLY(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,12,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON13.getDONLY : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,12,1
end;
procedure TCAN1_C1FIFOCON13.setUINC; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON13.clearUINC; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON13.setUINC(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,13,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON13.getUINC : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,13,1
end;
procedure TCAN1_C1FIFOCON13.setFRESET; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16384
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON13.clearFRESET; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16384
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON13.setFRESET(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,14,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON13.getFRESET : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,14,1
end;
procedure TCAN1_C1FIFOCON13.setFSIZE(thebits : TBits_5); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,16,5
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON13.getFSIZE : TBits_5;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,16,5
end;
procedure TCAN1_C1FIFOCON13.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TCAN1_C1FIFOCON13.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TCAN1_C1FIFOINT13.setRXNEMPTYIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT13.clearRXNEMPTYIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT13.setRXNEMPTYIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT13.getRXNEMPTYIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,1
end;
procedure TCAN1_C1FIFOINT13.setRXHALFIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT13.clearRXHALFIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT13.setRXHALFIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,1,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT13.getRXHALFIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,1,1
end;
procedure TCAN1_C1FIFOINT13.setRXFULLIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT13.clearRXFULLIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT13.setRXFULLIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,2,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT13.getRXFULLIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,2,1
end;
procedure TCAN1_C1FIFOINT13.setRXOVFLIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT13.clearRXOVFLIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT13.setRXOVFLIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,3,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT13.getRXOVFLIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,3,1
end;
procedure TCAN1_C1FIFOINT13.setTXEMPTYIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT13.clearTXEMPTYIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT13.setTXEMPTYIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,8,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT13.getTXEMPTYIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,8,1
end;
procedure TCAN1_C1FIFOINT13.setTXHALFIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,512
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT13.clearTXHALFIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,512
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT13.setTXHALFIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,9,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT13.getTXHALFIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,9,1
end;
procedure TCAN1_C1FIFOINT13.setTXNFULLIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1024
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT13.clearTXNFULLIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1024
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT13.setTXNFULLIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,10,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT13.getTXNFULLIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,10,1
end;
procedure TCAN1_C1FIFOINT13.setRXNEMPTYIE; assembler; nostackframe; inline;
asm
  lui     $a1,1
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT13.clearRXNEMPTYIE; assembler; nostackframe; inline;
asm
  lui     $a1,1
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT13.setRXNEMPTYIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,16,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT13.getRXNEMPTYIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,16,1
end;
procedure TCAN1_C1FIFOINT13.setRXHALFIE; assembler; nostackframe; inline;
asm
  lui     $a1,2
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT13.clearRXHALFIE; assembler; nostackframe; inline;
asm
  lui     $a1,2
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT13.setRXHALFIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,17,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT13.getRXHALFIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,17,1
end;
procedure TCAN1_C1FIFOINT13.setRXFULLIE; assembler; nostackframe; inline;
asm
  lui     $a1,4
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT13.clearRXFULLIE; assembler; nostackframe; inline;
asm
  lui     $a1,4
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT13.setRXFULLIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,18,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT13.getRXFULLIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,18,1
end;
procedure TCAN1_C1FIFOINT13.setRXOVFLIE; assembler; nostackframe; inline;
asm
  lui     $a1,8
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT13.clearRXOVFLIE; assembler; nostackframe; inline;
asm
  lui     $a1,8
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT13.setRXOVFLIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,19,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT13.getRXOVFLIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,19,1
end;
procedure TCAN1_C1FIFOINT13.setTXEMPTYIE; assembler; nostackframe; inline;
asm
  lui     $a1,256
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT13.clearTXEMPTYIE; assembler; nostackframe; inline;
asm
  lui     $a1,256
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT13.setTXEMPTYIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,24,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT13.getTXEMPTYIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,24,1
end;
procedure TCAN1_C1FIFOINT13.setTXHALFIE; assembler; nostackframe; inline;
asm
  lui     $a1,512
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT13.clearTXHALFIE; assembler; nostackframe; inline;
asm
  lui     $a1,512
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT13.setTXHALFIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,25,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT13.getTXHALFIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,25,1
end;
procedure TCAN1_C1FIFOINT13.setTXNFULLIE; assembler; nostackframe; inline;
asm
  lui     $a1,1024
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT13.clearTXNFULLIE; assembler; nostackframe; inline;
asm
  lui     $a1,1024
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT13.setTXNFULLIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,26,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT13.getTXNFULLIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,26,1
end;
procedure TCAN1_C1FIFOINT13.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TCAN1_C1FIFOINT13.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TCAN1_C1FIFOCI13.setCFIFOCI(thebits : TBits_5); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,5
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCI13.getCFIFOCI : TBits_5;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,5
end;
procedure TCAN1_C1FIFOCI13.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TCAN1_C1FIFOCI13.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TCAN1_C1FIFOCON14.setTXPRI(thebits : TBits_2); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,2
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON14.getTXPRI : TBits_2;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,2
end;
procedure TCAN1_C1FIFOCON14.setRTREN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON14.clearRTREN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON14.setRTREN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,2,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON14.getRTREN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,2,1
end;
procedure TCAN1_C1FIFOCON14.setTXREQ; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON14.clearTXREQ; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON14.setTXREQ(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,3,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON14.getTXREQ : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,3,1
end;
procedure TCAN1_C1FIFOCON14.setTXERR; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON14.clearTXERR; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON14.setTXERR(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,4,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON14.getTXERR : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,4,1
end;
procedure TCAN1_C1FIFOCON14.setTXLARB; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON14.clearTXLARB; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON14.setTXLARB(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,5,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON14.getTXLARB : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,5,1
end;
procedure TCAN1_C1FIFOCON14.setTXABAT; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON14.clearTXABAT; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON14.setTXABAT(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,6,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON14.getTXABAT : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,6,1
end;
procedure TCAN1_C1FIFOCON14.setTXEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON14.clearTXEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON14.setTXEN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,7,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON14.getTXEN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,7,1
end;
procedure TCAN1_C1FIFOCON14.setDONLY; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4096
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON14.clearDONLY; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4096
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON14.setDONLY(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,12,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON14.getDONLY : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,12,1
end;
procedure TCAN1_C1FIFOCON14.setUINC; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON14.clearUINC; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON14.setUINC(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,13,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON14.getUINC : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,13,1
end;
procedure TCAN1_C1FIFOCON14.setFRESET; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16384
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON14.clearFRESET; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16384
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON14.setFRESET(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,14,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON14.getFRESET : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,14,1
end;
procedure TCAN1_C1FIFOCON14.setFSIZE(thebits : TBits_5); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,16,5
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON14.getFSIZE : TBits_5;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,16,5
end;
procedure TCAN1_C1FIFOCON14.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TCAN1_C1FIFOCON14.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TCAN1_C1FIFOINT14.setRXNEMPTYIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT14.clearRXNEMPTYIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT14.setRXNEMPTYIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT14.getRXNEMPTYIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,1
end;
procedure TCAN1_C1FIFOINT14.setRXHALFIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT14.clearRXHALFIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT14.setRXHALFIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,1,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT14.getRXHALFIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,1,1
end;
procedure TCAN1_C1FIFOINT14.setRXFULLIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT14.clearRXFULLIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT14.setRXFULLIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,2,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT14.getRXFULLIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,2,1
end;
procedure TCAN1_C1FIFOINT14.setRXOVFLIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT14.clearRXOVFLIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT14.setRXOVFLIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,3,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT14.getRXOVFLIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,3,1
end;
procedure TCAN1_C1FIFOINT14.setTXEMPTYIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT14.clearTXEMPTYIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT14.setTXEMPTYIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,8,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT14.getTXEMPTYIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,8,1
end;
procedure TCAN1_C1FIFOINT14.setTXHALFIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,512
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT14.clearTXHALFIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,512
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT14.setTXHALFIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,9,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT14.getTXHALFIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,9,1
end;
procedure TCAN1_C1FIFOINT14.setTXNFULLIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1024
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT14.clearTXNFULLIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1024
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT14.setTXNFULLIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,10,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT14.getTXNFULLIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,10,1
end;
procedure TCAN1_C1FIFOINT14.setRXNEMPTYIE; assembler; nostackframe; inline;
asm
  lui     $a1,1
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT14.clearRXNEMPTYIE; assembler; nostackframe; inline;
asm
  lui     $a1,1
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT14.setRXNEMPTYIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,16,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT14.getRXNEMPTYIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,16,1
end;
procedure TCAN1_C1FIFOINT14.setRXHALFIE; assembler; nostackframe; inline;
asm
  lui     $a1,2
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT14.clearRXHALFIE; assembler; nostackframe; inline;
asm
  lui     $a1,2
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT14.setRXHALFIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,17,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT14.getRXHALFIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,17,1
end;
procedure TCAN1_C1FIFOINT14.setRXFULLIE; assembler; nostackframe; inline;
asm
  lui     $a1,4
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT14.clearRXFULLIE; assembler; nostackframe; inline;
asm
  lui     $a1,4
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT14.setRXFULLIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,18,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT14.getRXFULLIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,18,1
end;
procedure TCAN1_C1FIFOINT14.setRXOVFLIE; assembler; nostackframe; inline;
asm
  lui     $a1,8
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT14.clearRXOVFLIE; assembler; nostackframe; inline;
asm
  lui     $a1,8
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT14.setRXOVFLIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,19,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT14.getRXOVFLIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,19,1
end;
procedure TCAN1_C1FIFOINT14.setTXEMPTYIE; assembler; nostackframe; inline;
asm
  lui     $a1,256
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT14.clearTXEMPTYIE; assembler; nostackframe; inline;
asm
  lui     $a1,256
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT14.setTXEMPTYIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,24,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT14.getTXEMPTYIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,24,1
end;
procedure TCAN1_C1FIFOINT14.setTXHALFIE; assembler; nostackframe; inline;
asm
  lui     $a1,512
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT14.clearTXHALFIE; assembler; nostackframe; inline;
asm
  lui     $a1,512
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT14.setTXHALFIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,25,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT14.getTXHALFIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,25,1
end;
procedure TCAN1_C1FIFOINT14.setTXNFULLIE; assembler; nostackframe; inline;
asm
  lui     $a1,1024
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT14.clearTXNFULLIE; assembler; nostackframe; inline;
asm
  lui     $a1,1024
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT14.setTXNFULLIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,26,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT14.getTXNFULLIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,26,1
end;
procedure TCAN1_C1FIFOINT14.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TCAN1_C1FIFOINT14.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TCAN1_C1FIFOCI14.setCFIFOCI(thebits : TBits_5); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,5
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCI14.getCFIFOCI : TBits_5;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,5
end;
procedure TCAN1_C1FIFOCI14.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TCAN1_C1FIFOCI14.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TCAN1_C1FIFOCON15.setTXPRI(thebits : TBits_2); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,2
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON15.getTXPRI : TBits_2;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,2
end;
procedure TCAN1_C1FIFOCON15.setRTREN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON15.clearRTREN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON15.setRTREN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,2,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON15.getRTREN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,2,1
end;
procedure TCAN1_C1FIFOCON15.setTXREQ; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON15.clearTXREQ; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON15.setTXREQ(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,3,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON15.getTXREQ : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,3,1
end;
procedure TCAN1_C1FIFOCON15.setTXERR; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON15.clearTXERR; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON15.setTXERR(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,4,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON15.getTXERR : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,4,1
end;
procedure TCAN1_C1FIFOCON15.setTXLARB; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON15.clearTXLARB; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON15.setTXLARB(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,5,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON15.getTXLARB : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,5,1
end;
procedure TCAN1_C1FIFOCON15.setTXABAT; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON15.clearTXABAT; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON15.setTXABAT(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,6,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON15.getTXABAT : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,6,1
end;
procedure TCAN1_C1FIFOCON15.setTXEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON15.clearTXEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON15.setTXEN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,7,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON15.getTXEN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,7,1
end;
procedure TCAN1_C1FIFOCON15.setDONLY; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4096
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON15.clearDONLY; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4096
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON15.setDONLY(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,12,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON15.getDONLY : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,12,1
end;
procedure TCAN1_C1FIFOCON15.setUINC; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON15.clearUINC; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON15.setUINC(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,13,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON15.getUINC : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,13,1
end;
procedure TCAN1_C1FIFOCON15.setFRESET; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16384
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON15.clearFRESET; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16384
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON15.setFRESET(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,14,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON15.getFRESET : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,14,1
end;
procedure TCAN1_C1FIFOCON15.setFSIZE(thebits : TBits_5); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,16,5
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON15.getFSIZE : TBits_5;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,16,5
end;
procedure TCAN1_C1FIFOCON15.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TCAN1_C1FIFOCON15.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TCAN1_C1FIFOINT15.setRXNEMPTYIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT15.clearRXNEMPTYIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT15.setRXNEMPTYIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT15.getRXNEMPTYIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,1
end;
procedure TCAN1_C1FIFOINT15.setRXHALFIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT15.clearRXHALFIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT15.setRXHALFIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,1,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT15.getRXHALFIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,1,1
end;
procedure TCAN1_C1FIFOINT15.setRXFULLIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT15.clearRXFULLIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT15.setRXFULLIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,2,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT15.getRXFULLIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,2,1
end;
procedure TCAN1_C1FIFOINT15.setRXOVFLIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT15.clearRXOVFLIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT15.setRXOVFLIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,3,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT15.getRXOVFLIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,3,1
end;
procedure TCAN1_C1FIFOINT15.setTXEMPTYIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT15.clearTXEMPTYIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT15.setTXEMPTYIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,8,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT15.getTXEMPTYIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,8,1
end;
procedure TCAN1_C1FIFOINT15.setTXHALFIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,512
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT15.clearTXHALFIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,512
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT15.setTXHALFIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,9,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT15.getTXHALFIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,9,1
end;
procedure TCAN1_C1FIFOINT15.setTXNFULLIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1024
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT15.clearTXNFULLIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1024
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT15.setTXNFULLIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,10,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT15.getTXNFULLIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,10,1
end;
procedure TCAN1_C1FIFOINT15.setRXNEMPTYIE; assembler; nostackframe; inline;
asm
  lui     $a1,1
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT15.clearRXNEMPTYIE; assembler; nostackframe; inline;
asm
  lui     $a1,1
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT15.setRXNEMPTYIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,16,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT15.getRXNEMPTYIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,16,1
end;
procedure TCAN1_C1FIFOINT15.setRXHALFIE; assembler; nostackframe; inline;
asm
  lui     $a1,2
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT15.clearRXHALFIE; assembler; nostackframe; inline;
asm
  lui     $a1,2
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT15.setRXHALFIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,17,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT15.getRXHALFIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,17,1
end;
procedure TCAN1_C1FIFOINT15.setRXFULLIE; assembler; nostackframe; inline;
asm
  lui     $a1,4
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT15.clearRXFULLIE; assembler; nostackframe; inline;
asm
  lui     $a1,4
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT15.setRXFULLIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,18,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT15.getRXFULLIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,18,1
end;
procedure TCAN1_C1FIFOINT15.setRXOVFLIE; assembler; nostackframe; inline;
asm
  lui     $a1,8
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT15.clearRXOVFLIE; assembler; nostackframe; inline;
asm
  lui     $a1,8
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT15.setRXOVFLIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,19,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT15.getRXOVFLIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,19,1
end;
procedure TCAN1_C1FIFOINT15.setTXEMPTYIE; assembler; nostackframe; inline;
asm
  lui     $a1,256
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT15.clearTXEMPTYIE; assembler; nostackframe; inline;
asm
  lui     $a1,256
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT15.setTXEMPTYIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,24,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT15.getTXEMPTYIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,24,1
end;
procedure TCAN1_C1FIFOINT15.setTXHALFIE; assembler; nostackframe; inline;
asm
  lui     $a1,512
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT15.clearTXHALFIE; assembler; nostackframe; inline;
asm
  lui     $a1,512
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT15.setTXHALFIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,25,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT15.getTXHALFIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,25,1
end;
procedure TCAN1_C1FIFOINT15.setTXNFULLIE; assembler; nostackframe; inline;
asm
  lui     $a1,1024
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT15.clearTXNFULLIE; assembler; nostackframe; inline;
asm
  lui     $a1,1024
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT15.setTXNFULLIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,26,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT15.getTXNFULLIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,26,1
end;
procedure TCAN1_C1FIFOINT15.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TCAN1_C1FIFOINT15.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TCAN1_C1FIFOCI15.setCFIFOCI(thebits : TBits_5); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,5
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCI15.getCFIFOCI : TBits_5;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,5
end;
procedure TCAN1_C1FIFOCI15.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TCAN1_C1FIFOCI15.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TCAN1_C1FIFOCON16.setTXPRI(thebits : TBits_2); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,2
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON16.getTXPRI : TBits_2;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,2
end;
procedure TCAN1_C1FIFOCON16.setRTREN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON16.clearRTREN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON16.setRTREN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,2,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON16.getRTREN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,2,1
end;
procedure TCAN1_C1FIFOCON16.setTXREQ; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON16.clearTXREQ; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON16.setTXREQ(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,3,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON16.getTXREQ : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,3,1
end;
procedure TCAN1_C1FIFOCON16.setTXERR; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON16.clearTXERR; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON16.setTXERR(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,4,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON16.getTXERR : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,4,1
end;
procedure TCAN1_C1FIFOCON16.setTXLARB; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON16.clearTXLARB; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON16.setTXLARB(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,5,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON16.getTXLARB : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,5,1
end;
procedure TCAN1_C1FIFOCON16.setTXABAT; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON16.clearTXABAT; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON16.setTXABAT(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,6,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON16.getTXABAT : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,6,1
end;
procedure TCAN1_C1FIFOCON16.setTXEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON16.clearTXEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON16.setTXEN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,7,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON16.getTXEN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,7,1
end;
procedure TCAN1_C1FIFOCON16.setDONLY; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4096
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON16.clearDONLY; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4096
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON16.setDONLY(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,12,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON16.getDONLY : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,12,1
end;
procedure TCAN1_C1FIFOCON16.setUINC; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON16.clearUINC; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON16.setUINC(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,13,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON16.getUINC : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,13,1
end;
procedure TCAN1_C1FIFOCON16.setFRESET; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16384
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON16.clearFRESET; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16384
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON16.setFRESET(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,14,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON16.getFRESET : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,14,1
end;
procedure TCAN1_C1FIFOCON16.setFSIZE(thebits : TBits_5); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,16,5
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON16.getFSIZE : TBits_5;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,16,5
end;
procedure TCAN1_C1FIFOCON16.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TCAN1_C1FIFOCON16.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TCAN1_C1FIFOINT16.setRXNEMPTYIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT16.clearRXNEMPTYIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT16.setRXNEMPTYIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT16.getRXNEMPTYIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,1
end;
procedure TCAN1_C1FIFOINT16.setRXHALFIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT16.clearRXHALFIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT16.setRXHALFIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,1,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT16.getRXHALFIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,1,1
end;
procedure TCAN1_C1FIFOINT16.setRXFULLIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT16.clearRXFULLIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT16.setRXFULLIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,2,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT16.getRXFULLIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,2,1
end;
procedure TCAN1_C1FIFOINT16.setRXOVFLIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT16.clearRXOVFLIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT16.setRXOVFLIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,3,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT16.getRXOVFLIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,3,1
end;
procedure TCAN1_C1FIFOINT16.setTXEMPTYIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT16.clearTXEMPTYIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT16.setTXEMPTYIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,8,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT16.getTXEMPTYIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,8,1
end;
procedure TCAN1_C1FIFOINT16.setTXHALFIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,512
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT16.clearTXHALFIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,512
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT16.setTXHALFIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,9,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT16.getTXHALFIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,9,1
end;
procedure TCAN1_C1FIFOINT16.setTXNFULLIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1024
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT16.clearTXNFULLIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1024
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT16.setTXNFULLIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,10,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT16.getTXNFULLIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,10,1
end;
procedure TCAN1_C1FIFOINT16.setRXNEMPTYIE; assembler; nostackframe; inline;
asm
  lui     $a1,1
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT16.clearRXNEMPTYIE; assembler; nostackframe; inline;
asm
  lui     $a1,1
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT16.setRXNEMPTYIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,16,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT16.getRXNEMPTYIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,16,1
end;
procedure TCAN1_C1FIFOINT16.setRXHALFIE; assembler; nostackframe; inline;
asm
  lui     $a1,2
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT16.clearRXHALFIE; assembler; nostackframe; inline;
asm
  lui     $a1,2
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT16.setRXHALFIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,17,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT16.getRXHALFIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,17,1
end;
procedure TCAN1_C1FIFOINT16.setRXFULLIE; assembler; nostackframe; inline;
asm
  lui     $a1,4
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT16.clearRXFULLIE; assembler; nostackframe; inline;
asm
  lui     $a1,4
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT16.setRXFULLIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,18,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT16.getRXFULLIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,18,1
end;
procedure TCAN1_C1FIFOINT16.setRXOVFLIE; assembler; nostackframe; inline;
asm
  lui     $a1,8
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT16.clearRXOVFLIE; assembler; nostackframe; inline;
asm
  lui     $a1,8
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT16.setRXOVFLIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,19,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT16.getRXOVFLIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,19,1
end;
procedure TCAN1_C1FIFOINT16.setTXEMPTYIE; assembler; nostackframe; inline;
asm
  lui     $a1,256
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT16.clearTXEMPTYIE; assembler; nostackframe; inline;
asm
  lui     $a1,256
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT16.setTXEMPTYIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,24,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT16.getTXEMPTYIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,24,1
end;
procedure TCAN1_C1FIFOINT16.setTXHALFIE; assembler; nostackframe; inline;
asm
  lui     $a1,512
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT16.clearTXHALFIE; assembler; nostackframe; inline;
asm
  lui     $a1,512
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT16.setTXHALFIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,25,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT16.getTXHALFIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,25,1
end;
procedure TCAN1_C1FIFOINT16.setTXNFULLIE; assembler; nostackframe; inline;
asm
  lui     $a1,1024
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT16.clearTXNFULLIE; assembler; nostackframe; inline;
asm
  lui     $a1,1024
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT16.setTXNFULLIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,26,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT16.getTXNFULLIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,26,1
end;
procedure TCAN1_C1FIFOINT16.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TCAN1_C1FIFOINT16.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TCAN1_C1FIFOCI16.setCFIFOCI(thebits : TBits_5); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,5
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCI16.getCFIFOCI : TBits_5;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,5
end;
procedure TCAN1_C1FIFOCI16.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TCAN1_C1FIFOCI16.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TCAN1_C1FIFOCON17.setTXPRI(thebits : TBits_2); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,2
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON17.getTXPRI : TBits_2;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,2
end;
procedure TCAN1_C1FIFOCON17.setRTREN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON17.clearRTREN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON17.setRTREN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,2,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON17.getRTREN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,2,1
end;
procedure TCAN1_C1FIFOCON17.setTXREQ; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON17.clearTXREQ; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON17.setTXREQ(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,3,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON17.getTXREQ : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,3,1
end;
procedure TCAN1_C1FIFOCON17.setTXERR; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON17.clearTXERR; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON17.setTXERR(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,4,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON17.getTXERR : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,4,1
end;
procedure TCAN1_C1FIFOCON17.setTXLARB; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON17.clearTXLARB; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON17.setTXLARB(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,5,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON17.getTXLARB : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,5,1
end;
procedure TCAN1_C1FIFOCON17.setTXABAT; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON17.clearTXABAT; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON17.setTXABAT(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,6,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON17.getTXABAT : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,6,1
end;
procedure TCAN1_C1FIFOCON17.setTXEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON17.clearTXEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON17.setTXEN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,7,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON17.getTXEN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,7,1
end;
procedure TCAN1_C1FIFOCON17.setDONLY; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4096
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON17.clearDONLY; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4096
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON17.setDONLY(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,12,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON17.getDONLY : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,12,1
end;
procedure TCAN1_C1FIFOCON17.setUINC; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON17.clearUINC; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON17.setUINC(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,13,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON17.getUINC : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,13,1
end;
procedure TCAN1_C1FIFOCON17.setFRESET; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16384
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON17.clearFRESET; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16384
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON17.setFRESET(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,14,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON17.getFRESET : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,14,1
end;
procedure TCAN1_C1FIFOCON17.setFSIZE(thebits : TBits_5); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,16,5
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON17.getFSIZE : TBits_5;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,16,5
end;
procedure TCAN1_C1FIFOCON17.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TCAN1_C1FIFOCON17.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TCAN1_C1FIFOINT17.setRXNEMPTYIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT17.clearRXNEMPTYIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT17.setRXNEMPTYIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT17.getRXNEMPTYIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,1
end;
procedure TCAN1_C1FIFOINT17.setRXHALFIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT17.clearRXHALFIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT17.setRXHALFIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,1,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT17.getRXHALFIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,1,1
end;
procedure TCAN1_C1FIFOINT17.setRXFULLIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT17.clearRXFULLIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT17.setRXFULLIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,2,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT17.getRXFULLIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,2,1
end;
procedure TCAN1_C1FIFOINT17.setRXOVFLIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT17.clearRXOVFLIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT17.setRXOVFLIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,3,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT17.getRXOVFLIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,3,1
end;
procedure TCAN1_C1FIFOINT17.setTXEMPTYIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT17.clearTXEMPTYIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT17.setTXEMPTYIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,8,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT17.getTXEMPTYIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,8,1
end;
procedure TCAN1_C1FIFOINT17.setTXHALFIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,512
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT17.clearTXHALFIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,512
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT17.setTXHALFIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,9,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT17.getTXHALFIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,9,1
end;
procedure TCAN1_C1FIFOINT17.setTXNFULLIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1024
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT17.clearTXNFULLIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1024
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT17.setTXNFULLIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,10,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT17.getTXNFULLIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,10,1
end;
procedure TCAN1_C1FIFOINT17.setRXNEMPTYIE; assembler; nostackframe; inline;
asm
  lui     $a1,1
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT17.clearRXNEMPTYIE; assembler; nostackframe; inline;
asm
  lui     $a1,1
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT17.setRXNEMPTYIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,16,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT17.getRXNEMPTYIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,16,1
end;
procedure TCAN1_C1FIFOINT17.setRXHALFIE; assembler; nostackframe; inline;
asm
  lui     $a1,2
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT17.clearRXHALFIE; assembler; nostackframe; inline;
asm
  lui     $a1,2
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT17.setRXHALFIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,17,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT17.getRXHALFIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,17,1
end;
procedure TCAN1_C1FIFOINT17.setRXFULLIE; assembler; nostackframe; inline;
asm
  lui     $a1,4
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT17.clearRXFULLIE; assembler; nostackframe; inline;
asm
  lui     $a1,4
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT17.setRXFULLIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,18,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT17.getRXFULLIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,18,1
end;
procedure TCAN1_C1FIFOINT17.setRXOVFLIE; assembler; nostackframe; inline;
asm
  lui     $a1,8
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT17.clearRXOVFLIE; assembler; nostackframe; inline;
asm
  lui     $a1,8
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT17.setRXOVFLIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,19,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT17.getRXOVFLIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,19,1
end;
procedure TCAN1_C1FIFOINT17.setTXEMPTYIE; assembler; nostackframe; inline;
asm
  lui     $a1,256
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT17.clearTXEMPTYIE; assembler; nostackframe; inline;
asm
  lui     $a1,256
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT17.setTXEMPTYIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,24,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT17.getTXEMPTYIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,24,1
end;
procedure TCAN1_C1FIFOINT17.setTXHALFIE; assembler; nostackframe; inline;
asm
  lui     $a1,512
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT17.clearTXHALFIE; assembler; nostackframe; inline;
asm
  lui     $a1,512
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT17.setTXHALFIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,25,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT17.getTXHALFIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,25,1
end;
procedure TCAN1_C1FIFOINT17.setTXNFULLIE; assembler; nostackframe; inline;
asm
  lui     $a1,1024
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT17.clearTXNFULLIE; assembler; nostackframe; inline;
asm
  lui     $a1,1024
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT17.setTXNFULLIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,26,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT17.getTXNFULLIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,26,1
end;
procedure TCAN1_C1FIFOINT17.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TCAN1_C1FIFOINT17.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TCAN1_C1FIFOCI17.setCFIFOCI(thebits : TBits_5); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,5
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCI17.getCFIFOCI : TBits_5;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,5
end;
procedure TCAN1_C1FIFOCI17.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TCAN1_C1FIFOCI17.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TCAN1_C1FIFOCON18.setTXPRI(thebits : TBits_2); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,2
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON18.getTXPRI : TBits_2;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,2
end;
procedure TCAN1_C1FIFOCON18.setRTREN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON18.clearRTREN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON18.setRTREN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,2,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON18.getRTREN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,2,1
end;
procedure TCAN1_C1FIFOCON18.setTXREQ; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON18.clearTXREQ; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON18.setTXREQ(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,3,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON18.getTXREQ : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,3,1
end;
procedure TCAN1_C1FIFOCON18.setTXERR; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON18.clearTXERR; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON18.setTXERR(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,4,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON18.getTXERR : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,4,1
end;
procedure TCAN1_C1FIFOCON18.setTXLARB; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON18.clearTXLARB; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON18.setTXLARB(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,5,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON18.getTXLARB : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,5,1
end;
procedure TCAN1_C1FIFOCON18.setTXABAT; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON18.clearTXABAT; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON18.setTXABAT(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,6,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON18.getTXABAT : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,6,1
end;
procedure TCAN1_C1FIFOCON18.setTXEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON18.clearTXEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON18.setTXEN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,7,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON18.getTXEN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,7,1
end;
procedure TCAN1_C1FIFOCON18.setDONLY; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4096
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON18.clearDONLY; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4096
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON18.setDONLY(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,12,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON18.getDONLY : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,12,1
end;
procedure TCAN1_C1FIFOCON18.setUINC; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON18.clearUINC; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON18.setUINC(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,13,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON18.getUINC : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,13,1
end;
procedure TCAN1_C1FIFOCON18.setFRESET; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16384
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON18.clearFRESET; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16384
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON18.setFRESET(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,14,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON18.getFRESET : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,14,1
end;
procedure TCAN1_C1FIFOCON18.setFSIZE(thebits : TBits_5); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,16,5
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON18.getFSIZE : TBits_5;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,16,5
end;
procedure TCAN1_C1FIFOCON18.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TCAN1_C1FIFOCON18.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TCAN1_C1FIFOINT18.setRXNEMPTYIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT18.clearRXNEMPTYIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT18.setRXNEMPTYIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT18.getRXNEMPTYIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,1
end;
procedure TCAN1_C1FIFOINT18.setRXHALFIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT18.clearRXHALFIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT18.setRXHALFIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,1,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT18.getRXHALFIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,1,1
end;
procedure TCAN1_C1FIFOINT18.setRXFULLIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT18.clearRXFULLIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT18.setRXFULLIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,2,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT18.getRXFULLIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,2,1
end;
procedure TCAN1_C1FIFOINT18.setRXOVFLIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT18.clearRXOVFLIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT18.setRXOVFLIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,3,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT18.getRXOVFLIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,3,1
end;
procedure TCAN1_C1FIFOINT18.setTXEMPTYIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT18.clearTXEMPTYIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT18.setTXEMPTYIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,8,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT18.getTXEMPTYIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,8,1
end;
procedure TCAN1_C1FIFOINT18.setTXHALFIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,512
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT18.clearTXHALFIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,512
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT18.setTXHALFIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,9,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT18.getTXHALFIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,9,1
end;
procedure TCAN1_C1FIFOINT18.setTXNFULLIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1024
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT18.clearTXNFULLIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1024
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT18.setTXNFULLIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,10,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT18.getTXNFULLIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,10,1
end;
procedure TCAN1_C1FIFOINT18.setRXNEMPTYIE; assembler; nostackframe; inline;
asm
  lui     $a1,1
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT18.clearRXNEMPTYIE; assembler; nostackframe; inline;
asm
  lui     $a1,1
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT18.setRXNEMPTYIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,16,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT18.getRXNEMPTYIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,16,1
end;
procedure TCAN1_C1FIFOINT18.setRXHALFIE; assembler; nostackframe; inline;
asm
  lui     $a1,2
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT18.clearRXHALFIE; assembler; nostackframe; inline;
asm
  lui     $a1,2
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT18.setRXHALFIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,17,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT18.getRXHALFIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,17,1
end;
procedure TCAN1_C1FIFOINT18.setRXFULLIE; assembler; nostackframe; inline;
asm
  lui     $a1,4
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT18.clearRXFULLIE; assembler; nostackframe; inline;
asm
  lui     $a1,4
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT18.setRXFULLIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,18,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT18.getRXFULLIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,18,1
end;
procedure TCAN1_C1FIFOINT18.setRXOVFLIE; assembler; nostackframe; inline;
asm
  lui     $a1,8
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT18.clearRXOVFLIE; assembler; nostackframe; inline;
asm
  lui     $a1,8
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT18.setRXOVFLIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,19,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT18.getRXOVFLIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,19,1
end;
procedure TCAN1_C1FIFOINT18.setTXEMPTYIE; assembler; nostackframe; inline;
asm
  lui     $a1,256
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT18.clearTXEMPTYIE; assembler; nostackframe; inline;
asm
  lui     $a1,256
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT18.setTXEMPTYIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,24,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT18.getTXEMPTYIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,24,1
end;
procedure TCAN1_C1FIFOINT18.setTXHALFIE; assembler; nostackframe; inline;
asm
  lui     $a1,512
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT18.clearTXHALFIE; assembler; nostackframe; inline;
asm
  lui     $a1,512
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT18.setTXHALFIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,25,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT18.getTXHALFIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,25,1
end;
procedure TCAN1_C1FIFOINT18.setTXNFULLIE; assembler; nostackframe; inline;
asm
  lui     $a1,1024
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT18.clearTXNFULLIE; assembler; nostackframe; inline;
asm
  lui     $a1,1024
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT18.setTXNFULLIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,26,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT18.getTXNFULLIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,26,1
end;
procedure TCAN1_C1FIFOINT18.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TCAN1_C1FIFOINT18.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TCAN1_C1FIFOCI18.setCFIFOCI(thebits : TBits_5); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,5
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCI18.getCFIFOCI : TBits_5;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,5
end;
procedure TCAN1_C1FIFOCI18.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TCAN1_C1FIFOCI18.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TCAN1_C1FIFOCON19.setTXPRI(thebits : TBits_2); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,2
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON19.getTXPRI : TBits_2;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,2
end;
procedure TCAN1_C1FIFOCON19.setRTREN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON19.clearRTREN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON19.setRTREN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,2,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON19.getRTREN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,2,1
end;
procedure TCAN1_C1FIFOCON19.setTXREQ; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON19.clearTXREQ; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON19.setTXREQ(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,3,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON19.getTXREQ : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,3,1
end;
procedure TCAN1_C1FIFOCON19.setTXERR; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON19.clearTXERR; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON19.setTXERR(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,4,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON19.getTXERR : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,4,1
end;
procedure TCAN1_C1FIFOCON19.setTXLARB; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON19.clearTXLARB; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON19.setTXLARB(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,5,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON19.getTXLARB : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,5,1
end;
procedure TCAN1_C1FIFOCON19.setTXABAT; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON19.clearTXABAT; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON19.setTXABAT(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,6,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON19.getTXABAT : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,6,1
end;
procedure TCAN1_C1FIFOCON19.setTXEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON19.clearTXEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON19.setTXEN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,7,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON19.getTXEN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,7,1
end;
procedure TCAN1_C1FIFOCON19.setDONLY; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4096
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON19.clearDONLY; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4096
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON19.setDONLY(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,12,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON19.getDONLY : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,12,1
end;
procedure TCAN1_C1FIFOCON19.setUINC; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON19.clearUINC; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON19.setUINC(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,13,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON19.getUINC : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,13,1
end;
procedure TCAN1_C1FIFOCON19.setFRESET; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16384
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON19.clearFRESET; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16384
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON19.setFRESET(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,14,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON19.getFRESET : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,14,1
end;
procedure TCAN1_C1FIFOCON19.setFSIZE(thebits : TBits_5); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,16,5
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON19.getFSIZE : TBits_5;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,16,5
end;
procedure TCAN1_C1FIFOCON19.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TCAN1_C1FIFOCON19.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TCAN1_C1FIFOINT19.setRXNEMPTYIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT19.clearRXNEMPTYIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT19.setRXNEMPTYIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT19.getRXNEMPTYIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,1
end;
procedure TCAN1_C1FIFOINT19.setRXHALFIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT19.clearRXHALFIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT19.setRXHALFIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,1,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT19.getRXHALFIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,1,1
end;
procedure TCAN1_C1FIFOINT19.setRXFULLIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT19.clearRXFULLIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT19.setRXFULLIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,2,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT19.getRXFULLIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,2,1
end;
procedure TCAN1_C1FIFOINT19.setRXOVFLIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT19.clearRXOVFLIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT19.setRXOVFLIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,3,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT19.getRXOVFLIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,3,1
end;
procedure TCAN1_C1FIFOINT19.setTXEMPTYIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT19.clearTXEMPTYIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT19.setTXEMPTYIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,8,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT19.getTXEMPTYIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,8,1
end;
procedure TCAN1_C1FIFOINT19.setTXHALFIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,512
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT19.clearTXHALFIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,512
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT19.setTXHALFIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,9,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT19.getTXHALFIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,9,1
end;
procedure TCAN1_C1FIFOINT19.setTXNFULLIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1024
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT19.clearTXNFULLIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1024
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT19.setTXNFULLIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,10,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT19.getTXNFULLIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,10,1
end;
procedure TCAN1_C1FIFOINT19.setRXNEMPTYIE; assembler; nostackframe; inline;
asm
  lui     $a1,1
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT19.clearRXNEMPTYIE; assembler; nostackframe; inline;
asm
  lui     $a1,1
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT19.setRXNEMPTYIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,16,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT19.getRXNEMPTYIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,16,1
end;
procedure TCAN1_C1FIFOINT19.setRXHALFIE; assembler; nostackframe; inline;
asm
  lui     $a1,2
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT19.clearRXHALFIE; assembler; nostackframe; inline;
asm
  lui     $a1,2
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT19.setRXHALFIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,17,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT19.getRXHALFIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,17,1
end;
procedure TCAN1_C1FIFOINT19.setRXFULLIE; assembler; nostackframe; inline;
asm
  lui     $a1,4
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT19.clearRXFULLIE; assembler; nostackframe; inline;
asm
  lui     $a1,4
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT19.setRXFULLIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,18,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT19.getRXFULLIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,18,1
end;
procedure TCAN1_C1FIFOINT19.setRXOVFLIE; assembler; nostackframe; inline;
asm
  lui     $a1,8
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT19.clearRXOVFLIE; assembler; nostackframe; inline;
asm
  lui     $a1,8
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT19.setRXOVFLIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,19,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT19.getRXOVFLIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,19,1
end;
procedure TCAN1_C1FIFOINT19.setTXEMPTYIE; assembler; nostackframe; inline;
asm
  lui     $a1,256
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT19.clearTXEMPTYIE; assembler; nostackframe; inline;
asm
  lui     $a1,256
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT19.setTXEMPTYIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,24,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT19.getTXEMPTYIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,24,1
end;
procedure TCAN1_C1FIFOINT19.setTXHALFIE; assembler; nostackframe; inline;
asm
  lui     $a1,512
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT19.clearTXHALFIE; assembler; nostackframe; inline;
asm
  lui     $a1,512
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT19.setTXHALFIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,25,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT19.getTXHALFIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,25,1
end;
procedure TCAN1_C1FIFOINT19.setTXNFULLIE; assembler; nostackframe; inline;
asm
  lui     $a1,1024
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT19.clearTXNFULLIE; assembler; nostackframe; inline;
asm
  lui     $a1,1024
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT19.setTXNFULLIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,26,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT19.getTXNFULLIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,26,1
end;
procedure TCAN1_C1FIFOINT19.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TCAN1_C1FIFOINT19.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TCAN1_C1FIFOCI19.setCFIFOCI(thebits : TBits_5); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,5
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCI19.getCFIFOCI : TBits_5;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,5
end;
procedure TCAN1_C1FIFOCI19.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TCAN1_C1FIFOCI19.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TCAN1_C1FIFOCON20.setTXPRI(thebits : TBits_2); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,2
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON20.getTXPRI : TBits_2;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,2
end;
procedure TCAN1_C1FIFOCON20.setRTREN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON20.clearRTREN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON20.setRTREN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,2,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON20.getRTREN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,2,1
end;
procedure TCAN1_C1FIFOCON20.setTXREQ; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON20.clearTXREQ; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON20.setTXREQ(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,3,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON20.getTXREQ : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,3,1
end;
procedure TCAN1_C1FIFOCON20.setTXERR; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON20.clearTXERR; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON20.setTXERR(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,4,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON20.getTXERR : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,4,1
end;
procedure TCAN1_C1FIFOCON20.setTXLARB; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON20.clearTXLARB; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON20.setTXLARB(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,5,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON20.getTXLARB : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,5,1
end;
procedure TCAN1_C1FIFOCON20.setTXABAT; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON20.clearTXABAT; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON20.setTXABAT(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,6,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON20.getTXABAT : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,6,1
end;
procedure TCAN1_C1FIFOCON20.setTXEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON20.clearTXEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON20.setTXEN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,7,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON20.getTXEN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,7,1
end;
procedure TCAN1_C1FIFOCON20.setDONLY; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4096
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON20.clearDONLY; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4096
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON20.setDONLY(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,12,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON20.getDONLY : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,12,1
end;
procedure TCAN1_C1FIFOCON20.setUINC; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON20.clearUINC; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON20.setUINC(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,13,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON20.getUINC : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,13,1
end;
procedure TCAN1_C1FIFOCON20.setFRESET; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16384
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON20.clearFRESET; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16384
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON20.setFRESET(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,14,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON20.getFRESET : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,14,1
end;
procedure TCAN1_C1FIFOCON20.setFSIZE(thebits : TBits_5); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,16,5
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON20.getFSIZE : TBits_5;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,16,5
end;
procedure TCAN1_C1FIFOCON20.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TCAN1_C1FIFOCON20.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TCAN1_C1FIFOINT20.setRXNEMPTYIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT20.clearRXNEMPTYIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT20.setRXNEMPTYIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT20.getRXNEMPTYIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,1
end;
procedure TCAN1_C1FIFOINT20.setRXHALFIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT20.clearRXHALFIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT20.setRXHALFIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,1,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT20.getRXHALFIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,1,1
end;
procedure TCAN1_C1FIFOINT20.setRXFULLIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT20.clearRXFULLIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT20.setRXFULLIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,2,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT20.getRXFULLIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,2,1
end;
procedure TCAN1_C1FIFOINT20.setRXOVFLIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT20.clearRXOVFLIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT20.setRXOVFLIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,3,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT20.getRXOVFLIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,3,1
end;
procedure TCAN1_C1FIFOINT20.setTXEMPTYIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT20.clearTXEMPTYIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT20.setTXEMPTYIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,8,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT20.getTXEMPTYIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,8,1
end;
procedure TCAN1_C1FIFOINT20.setTXHALFIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,512
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT20.clearTXHALFIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,512
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT20.setTXHALFIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,9,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT20.getTXHALFIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,9,1
end;
procedure TCAN1_C1FIFOINT20.setTXNFULLIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1024
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT20.clearTXNFULLIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1024
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT20.setTXNFULLIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,10,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT20.getTXNFULLIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,10,1
end;
procedure TCAN1_C1FIFOINT20.setRXNEMPTYIE; assembler; nostackframe; inline;
asm
  lui     $a1,1
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT20.clearRXNEMPTYIE; assembler; nostackframe; inline;
asm
  lui     $a1,1
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT20.setRXNEMPTYIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,16,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT20.getRXNEMPTYIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,16,1
end;
procedure TCAN1_C1FIFOINT20.setRXHALFIE; assembler; nostackframe; inline;
asm
  lui     $a1,2
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT20.clearRXHALFIE; assembler; nostackframe; inline;
asm
  lui     $a1,2
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT20.setRXHALFIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,17,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT20.getRXHALFIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,17,1
end;
procedure TCAN1_C1FIFOINT20.setRXFULLIE; assembler; nostackframe; inline;
asm
  lui     $a1,4
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT20.clearRXFULLIE; assembler; nostackframe; inline;
asm
  lui     $a1,4
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT20.setRXFULLIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,18,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT20.getRXFULLIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,18,1
end;
procedure TCAN1_C1FIFOINT20.setRXOVFLIE; assembler; nostackframe; inline;
asm
  lui     $a1,8
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT20.clearRXOVFLIE; assembler; nostackframe; inline;
asm
  lui     $a1,8
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT20.setRXOVFLIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,19,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT20.getRXOVFLIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,19,1
end;
procedure TCAN1_C1FIFOINT20.setTXEMPTYIE; assembler; nostackframe; inline;
asm
  lui     $a1,256
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT20.clearTXEMPTYIE; assembler; nostackframe; inline;
asm
  lui     $a1,256
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT20.setTXEMPTYIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,24,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT20.getTXEMPTYIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,24,1
end;
procedure TCAN1_C1FIFOINT20.setTXHALFIE; assembler; nostackframe; inline;
asm
  lui     $a1,512
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT20.clearTXHALFIE; assembler; nostackframe; inline;
asm
  lui     $a1,512
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT20.setTXHALFIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,25,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT20.getTXHALFIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,25,1
end;
procedure TCAN1_C1FIFOINT20.setTXNFULLIE; assembler; nostackframe; inline;
asm
  lui     $a1,1024
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT20.clearTXNFULLIE; assembler; nostackframe; inline;
asm
  lui     $a1,1024
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT20.setTXNFULLIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,26,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT20.getTXNFULLIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,26,1
end;
procedure TCAN1_C1FIFOINT20.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TCAN1_C1FIFOINT20.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TCAN1_C1FIFOCI20.setCFIFOCI(thebits : TBits_5); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,5
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCI20.getCFIFOCI : TBits_5;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,5
end;
procedure TCAN1_C1FIFOCI20.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TCAN1_C1FIFOCI20.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TCAN1_C1FIFOCON21.setTXPRI(thebits : TBits_2); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,2
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON21.getTXPRI : TBits_2;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,2
end;
procedure TCAN1_C1FIFOCON21.setRTREN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON21.clearRTREN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON21.setRTREN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,2,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON21.getRTREN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,2,1
end;
procedure TCAN1_C1FIFOCON21.setTXREQ; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON21.clearTXREQ; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON21.setTXREQ(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,3,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON21.getTXREQ : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,3,1
end;
procedure TCAN1_C1FIFOCON21.setTXERR; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON21.clearTXERR; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON21.setTXERR(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,4,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON21.getTXERR : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,4,1
end;
procedure TCAN1_C1FIFOCON21.setTXLARB; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON21.clearTXLARB; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON21.setTXLARB(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,5,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON21.getTXLARB : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,5,1
end;
procedure TCAN1_C1FIFOCON21.setTXABAT; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON21.clearTXABAT; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON21.setTXABAT(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,6,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON21.getTXABAT : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,6,1
end;
procedure TCAN1_C1FIFOCON21.setTXEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON21.clearTXEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON21.setTXEN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,7,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON21.getTXEN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,7,1
end;
procedure TCAN1_C1FIFOCON21.setDONLY; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4096
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON21.clearDONLY; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4096
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON21.setDONLY(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,12,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON21.getDONLY : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,12,1
end;
procedure TCAN1_C1FIFOCON21.setUINC; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON21.clearUINC; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON21.setUINC(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,13,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON21.getUINC : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,13,1
end;
procedure TCAN1_C1FIFOCON21.setFRESET; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16384
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON21.clearFRESET; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16384
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON21.setFRESET(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,14,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON21.getFRESET : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,14,1
end;
procedure TCAN1_C1FIFOCON21.setFSIZE(thebits : TBits_5); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,16,5
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON21.getFSIZE : TBits_5;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,16,5
end;
procedure TCAN1_C1FIFOCON21.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TCAN1_C1FIFOCON21.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TCAN1_C1FIFOINT21.setRXNEMPTYIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT21.clearRXNEMPTYIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT21.setRXNEMPTYIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT21.getRXNEMPTYIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,1
end;
procedure TCAN1_C1FIFOINT21.setRXHALFIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT21.clearRXHALFIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT21.setRXHALFIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,1,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT21.getRXHALFIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,1,1
end;
procedure TCAN1_C1FIFOINT21.setRXFULLIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT21.clearRXFULLIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT21.setRXFULLIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,2,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT21.getRXFULLIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,2,1
end;
procedure TCAN1_C1FIFOINT21.setRXOVFLIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT21.clearRXOVFLIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT21.setRXOVFLIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,3,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT21.getRXOVFLIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,3,1
end;
procedure TCAN1_C1FIFOINT21.setTXEMPTYIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT21.clearTXEMPTYIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT21.setTXEMPTYIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,8,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT21.getTXEMPTYIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,8,1
end;
procedure TCAN1_C1FIFOINT21.setTXHALFIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,512
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT21.clearTXHALFIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,512
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT21.setTXHALFIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,9,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT21.getTXHALFIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,9,1
end;
procedure TCAN1_C1FIFOINT21.setTXNFULLIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1024
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT21.clearTXNFULLIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1024
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT21.setTXNFULLIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,10,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT21.getTXNFULLIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,10,1
end;
procedure TCAN1_C1FIFOINT21.setRXNEMPTYIE; assembler; nostackframe; inline;
asm
  lui     $a1,1
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT21.clearRXNEMPTYIE; assembler; nostackframe; inline;
asm
  lui     $a1,1
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT21.setRXNEMPTYIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,16,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT21.getRXNEMPTYIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,16,1
end;
procedure TCAN1_C1FIFOINT21.setRXHALFIE; assembler; nostackframe; inline;
asm
  lui     $a1,2
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT21.clearRXHALFIE; assembler; nostackframe; inline;
asm
  lui     $a1,2
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT21.setRXHALFIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,17,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT21.getRXHALFIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,17,1
end;
procedure TCAN1_C1FIFOINT21.setRXFULLIE; assembler; nostackframe; inline;
asm
  lui     $a1,4
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT21.clearRXFULLIE; assembler; nostackframe; inline;
asm
  lui     $a1,4
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT21.setRXFULLIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,18,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT21.getRXFULLIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,18,1
end;
procedure TCAN1_C1FIFOINT21.setRXOVFLIE; assembler; nostackframe; inline;
asm
  lui     $a1,8
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT21.clearRXOVFLIE; assembler; nostackframe; inline;
asm
  lui     $a1,8
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT21.setRXOVFLIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,19,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT21.getRXOVFLIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,19,1
end;
procedure TCAN1_C1FIFOINT21.setTXEMPTYIE; assembler; nostackframe; inline;
asm
  lui     $a1,256
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT21.clearTXEMPTYIE; assembler; nostackframe; inline;
asm
  lui     $a1,256
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT21.setTXEMPTYIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,24,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT21.getTXEMPTYIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,24,1
end;
procedure TCAN1_C1FIFOINT21.setTXHALFIE; assembler; nostackframe; inline;
asm
  lui     $a1,512
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT21.clearTXHALFIE; assembler; nostackframe; inline;
asm
  lui     $a1,512
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT21.setTXHALFIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,25,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT21.getTXHALFIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,25,1
end;
procedure TCAN1_C1FIFOINT21.setTXNFULLIE; assembler; nostackframe; inline;
asm
  lui     $a1,1024
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT21.clearTXNFULLIE; assembler; nostackframe; inline;
asm
  lui     $a1,1024
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT21.setTXNFULLIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,26,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT21.getTXNFULLIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,26,1
end;
procedure TCAN1_C1FIFOINT21.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TCAN1_C1FIFOINT21.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TCAN1_C1FIFOCI21.setCFIFOCI(thebits : TBits_5); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,5
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCI21.getCFIFOCI : TBits_5;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,5
end;
procedure TCAN1_C1FIFOCI21.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TCAN1_C1FIFOCI21.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TCAN1_C1FIFOCON22.setTXPRI(thebits : TBits_2); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,2
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON22.getTXPRI : TBits_2;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,2
end;
procedure TCAN1_C1FIFOCON22.setRTREN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON22.clearRTREN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON22.setRTREN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,2,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON22.getRTREN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,2,1
end;
procedure TCAN1_C1FIFOCON22.setTXREQ; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON22.clearTXREQ; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON22.setTXREQ(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,3,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON22.getTXREQ : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,3,1
end;
procedure TCAN1_C1FIFOCON22.setTXERR; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON22.clearTXERR; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON22.setTXERR(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,4,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON22.getTXERR : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,4,1
end;
procedure TCAN1_C1FIFOCON22.setTXLARB; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON22.clearTXLARB; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON22.setTXLARB(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,5,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON22.getTXLARB : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,5,1
end;
procedure TCAN1_C1FIFOCON22.setTXABAT; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON22.clearTXABAT; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON22.setTXABAT(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,6,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON22.getTXABAT : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,6,1
end;
procedure TCAN1_C1FIFOCON22.setTXEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON22.clearTXEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON22.setTXEN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,7,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON22.getTXEN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,7,1
end;
procedure TCAN1_C1FIFOCON22.setDONLY; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4096
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON22.clearDONLY; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4096
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON22.setDONLY(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,12,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON22.getDONLY : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,12,1
end;
procedure TCAN1_C1FIFOCON22.setUINC; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON22.clearUINC; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON22.setUINC(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,13,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON22.getUINC : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,13,1
end;
procedure TCAN1_C1FIFOCON22.setFRESET; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16384
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON22.clearFRESET; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16384
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON22.setFRESET(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,14,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON22.getFRESET : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,14,1
end;
procedure TCAN1_C1FIFOCON22.setFSIZE(thebits : TBits_5); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,16,5
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON22.getFSIZE : TBits_5;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,16,5
end;
procedure TCAN1_C1FIFOCON22.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TCAN1_C1FIFOCON22.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TCAN1_C1FIFOINT22.setRXNEMPTYIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT22.clearRXNEMPTYIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT22.setRXNEMPTYIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT22.getRXNEMPTYIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,1
end;
procedure TCAN1_C1FIFOINT22.setRXHALFIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT22.clearRXHALFIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT22.setRXHALFIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,1,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT22.getRXHALFIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,1,1
end;
procedure TCAN1_C1FIFOINT22.setRXFULLIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT22.clearRXFULLIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT22.setRXFULLIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,2,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT22.getRXFULLIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,2,1
end;
procedure TCAN1_C1FIFOINT22.setRXOVFLIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT22.clearRXOVFLIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT22.setRXOVFLIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,3,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT22.getRXOVFLIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,3,1
end;
procedure TCAN1_C1FIFOINT22.setTXEMPTYIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT22.clearTXEMPTYIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT22.setTXEMPTYIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,8,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT22.getTXEMPTYIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,8,1
end;
procedure TCAN1_C1FIFOINT22.setTXHALFIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,512
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT22.clearTXHALFIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,512
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT22.setTXHALFIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,9,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT22.getTXHALFIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,9,1
end;
procedure TCAN1_C1FIFOINT22.setTXNFULLIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1024
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT22.clearTXNFULLIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1024
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT22.setTXNFULLIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,10,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT22.getTXNFULLIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,10,1
end;
procedure TCAN1_C1FIFOINT22.setRXNEMPTYIE; assembler; nostackframe; inline;
asm
  lui     $a1,1
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT22.clearRXNEMPTYIE; assembler; nostackframe; inline;
asm
  lui     $a1,1
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT22.setRXNEMPTYIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,16,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT22.getRXNEMPTYIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,16,1
end;
procedure TCAN1_C1FIFOINT22.setRXHALFIE; assembler; nostackframe; inline;
asm
  lui     $a1,2
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT22.clearRXHALFIE; assembler; nostackframe; inline;
asm
  lui     $a1,2
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT22.setRXHALFIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,17,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT22.getRXHALFIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,17,1
end;
procedure TCAN1_C1FIFOINT22.setRXFULLIE; assembler; nostackframe; inline;
asm
  lui     $a1,4
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT22.clearRXFULLIE; assembler; nostackframe; inline;
asm
  lui     $a1,4
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT22.setRXFULLIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,18,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT22.getRXFULLIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,18,1
end;
procedure TCAN1_C1FIFOINT22.setRXOVFLIE; assembler; nostackframe; inline;
asm
  lui     $a1,8
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT22.clearRXOVFLIE; assembler; nostackframe; inline;
asm
  lui     $a1,8
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT22.setRXOVFLIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,19,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT22.getRXOVFLIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,19,1
end;
procedure TCAN1_C1FIFOINT22.setTXEMPTYIE; assembler; nostackframe; inline;
asm
  lui     $a1,256
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT22.clearTXEMPTYIE; assembler; nostackframe; inline;
asm
  lui     $a1,256
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT22.setTXEMPTYIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,24,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT22.getTXEMPTYIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,24,1
end;
procedure TCAN1_C1FIFOINT22.setTXHALFIE; assembler; nostackframe; inline;
asm
  lui     $a1,512
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT22.clearTXHALFIE; assembler; nostackframe; inline;
asm
  lui     $a1,512
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT22.setTXHALFIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,25,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT22.getTXHALFIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,25,1
end;
procedure TCAN1_C1FIFOINT22.setTXNFULLIE; assembler; nostackframe; inline;
asm
  lui     $a1,1024
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT22.clearTXNFULLIE; assembler; nostackframe; inline;
asm
  lui     $a1,1024
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT22.setTXNFULLIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,26,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT22.getTXNFULLIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,26,1
end;
procedure TCAN1_C1FIFOINT22.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TCAN1_C1FIFOINT22.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TCAN1_C1FIFOCI22.setCFIFOCI(thebits : TBits_5); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,5
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCI22.getCFIFOCI : TBits_5;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,5
end;
procedure TCAN1_C1FIFOCI22.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TCAN1_C1FIFOCI22.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TCAN1_C1FIFOCON23.setTXPRI(thebits : TBits_2); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,2
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON23.getTXPRI : TBits_2;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,2
end;
procedure TCAN1_C1FIFOCON23.setRTREN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON23.clearRTREN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON23.setRTREN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,2,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON23.getRTREN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,2,1
end;
procedure TCAN1_C1FIFOCON23.setTXREQ; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON23.clearTXREQ; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON23.setTXREQ(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,3,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON23.getTXREQ : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,3,1
end;
procedure TCAN1_C1FIFOCON23.setTXERR; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON23.clearTXERR; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON23.setTXERR(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,4,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON23.getTXERR : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,4,1
end;
procedure TCAN1_C1FIFOCON23.setTXLARB; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON23.clearTXLARB; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON23.setTXLARB(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,5,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON23.getTXLARB : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,5,1
end;
procedure TCAN1_C1FIFOCON23.setTXABAT; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON23.clearTXABAT; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON23.setTXABAT(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,6,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON23.getTXABAT : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,6,1
end;
procedure TCAN1_C1FIFOCON23.setTXEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON23.clearTXEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON23.setTXEN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,7,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON23.getTXEN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,7,1
end;
procedure TCAN1_C1FIFOCON23.setDONLY; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4096
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON23.clearDONLY; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4096
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON23.setDONLY(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,12,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON23.getDONLY : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,12,1
end;
procedure TCAN1_C1FIFOCON23.setUINC; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON23.clearUINC; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON23.setUINC(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,13,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON23.getUINC : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,13,1
end;
procedure TCAN1_C1FIFOCON23.setFRESET; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16384
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON23.clearFRESET; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16384
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON23.setFRESET(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,14,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON23.getFRESET : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,14,1
end;
procedure TCAN1_C1FIFOCON23.setFSIZE(thebits : TBits_5); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,16,5
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON23.getFSIZE : TBits_5;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,16,5
end;
procedure TCAN1_C1FIFOCON23.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TCAN1_C1FIFOCON23.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TCAN1_C1FIFOINT23.setRXNEMPTYIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT23.clearRXNEMPTYIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT23.setRXNEMPTYIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT23.getRXNEMPTYIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,1
end;
procedure TCAN1_C1FIFOINT23.setRXHALFIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT23.clearRXHALFIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT23.setRXHALFIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,1,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT23.getRXHALFIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,1,1
end;
procedure TCAN1_C1FIFOINT23.setRXFULLIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT23.clearRXFULLIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT23.setRXFULLIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,2,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT23.getRXFULLIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,2,1
end;
procedure TCAN1_C1FIFOINT23.setRXOVFLIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT23.clearRXOVFLIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT23.setRXOVFLIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,3,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT23.getRXOVFLIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,3,1
end;
procedure TCAN1_C1FIFOINT23.setTXEMPTYIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT23.clearTXEMPTYIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT23.setTXEMPTYIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,8,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT23.getTXEMPTYIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,8,1
end;
procedure TCAN1_C1FIFOINT23.setTXHALFIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,512
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT23.clearTXHALFIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,512
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT23.setTXHALFIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,9,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT23.getTXHALFIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,9,1
end;
procedure TCAN1_C1FIFOINT23.setTXNFULLIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1024
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT23.clearTXNFULLIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1024
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT23.setTXNFULLIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,10,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT23.getTXNFULLIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,10,1
end;
procedure TCAN1_C1FIFOINT23.setRXNEMPTYIE; assembler; nostackframe; inline;
asm
  lui     $a1,1
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT23.clearRXNEMPTYIE; assembler; nostackframe; inline;
asm
  lui     $a1,1
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT23.setRXNEMPTYIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,16,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT23.getRXNEMPTYIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,16,1
end;
procedure TCAN1_C1FIFOINT23.setRXHALFIE; assembler; nostackframe; inline;
asm
  lui     $a1,2
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT23.clearRXHALFIE; assembler; nostackframe; inline;
asm
  lui     $a1,2
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT23.setRXHALFIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,17,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT23.getRXHALFIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,17,1
end;
procedure TCAN1_C1FIFOINT23.setRXFULLIE; assembler; nostackframe; inline;
asm
  lui     $a1,4
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT23.clearRXFULLIE; assembler; nostackframe; inline;
asm
  lui     $a1,4
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT23.setRXFULLIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,18,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT23.getRXFULLIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,18,1
end;
procedure TCAN1_C1FIFOINT23.setRXOVFLIE; assembler; nostackframe; inline;
asm
  lui     $a1,8
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT23.clearRXOVFLIE; assembler; nostackframe; inline;
asm
  lui     $a1,8
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT23.setRXOVFLIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,19,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT23.getRXOVFLIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,19,1
end;
procedure TCAN1_C1FIFOINT23.setTXEMPTYIE; assembler; nostackframe; inline;
asm
  lui     $a1,256
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT23.clearTXEMPTYIE; assembler; nostackframe; inline;
asm
  lui     $a1,256
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT23.setTXEMPTYIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,24,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT23.getTXEMPTYIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,24,1
end;
procedure TCAN1_C1FIFOINT23.setTXHALFIE; assembler; nostackframe; inline;
asm
  lui     $a1,512
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT23.clearTXHALFIE; assembler; nostackframe; inline;
asm
  lui     $a1,512
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT23.setTXHALFIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,25,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT23.getTXHALFIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,25,1
end;
procedure TCAN1_C1FIFOINT23.setTXNFULLIE; assembler; nostackframe; inline;
asm
  lui     $a1,1024
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT23.clearTXNFULLIE; assembler; nostackframe; inline;
asm
  lui     $a1,1024
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT23.setTXNFULLIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,26,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT23.getTXNFULLIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,26,1
end;
procedure TCAN1_C1FIFOINT23.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TCAN1_C1FIFOINT23.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TCAN1_C1FIFOCI23.setCFIFOCI(thebits : TBits_5); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,5
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCI23.getCFIFOCI : TBits_5;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,5
end;
procedure TCAN1_C1FIFOCI23.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TCAN1_C1FIFOCI23.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TCAN1_C1FIFOCON24.setTXPRI(thebits : TBits_2); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,2
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON24.getTXPRI : TBits_2;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,2
end;
procedure TCAN1_C1FIFOCON24.setRTREN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON24.clearRTREN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON24.setRTREN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,2,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON24.getRTREN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,2,1
end;
procedure TCAN1_C1FIFOCON24.setTXREQ; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON24.clearTXREQ; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON24.setTXREQ(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,3,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON24.getTXREQ : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,3,1
end;
procedure TCAN1_C1FIFOCON24.setTXERR; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON24.clearTXERR; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON24.setTXERR(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,4,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON24.getTXERR : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,4,1
end;
procedure TCAN1_C1FIFOCON24.setTXLARB; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON24.clearTXLARB; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON24.setTXLARB(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,5,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON24.getTXLARB : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,5,1
end;
procedure TCAN1_C1FIFOCON24.setTXABAT; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON24.clearTXABAT; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON24.setTXABAT(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,6,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON24.getTXABAT : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,6,1
end;
procedure TCAN1_C1FIFOCON24.setTXEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON24.clearTXEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON24.setTXEN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,7,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON24.getTXEN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,7,1
end;
procedure TCAN1_C1FIFOCON24.setDONLY; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4096
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON24.clearDONLY; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4096
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON24.setDONLY(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,12,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON24.getDONLY : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,12,1
end;
procedure TCAN1_C1FIFOCON24.setUINC; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON24.clearUINC; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON24.setUINC(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,13,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON24.getUINC : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,13,1
end;
procedure TCAN1_C1FIFOCON24.setFRESET; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16384
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON24.clearFRESET; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16384
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON24.setFRESET(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,14,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON24.getFRESET : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,14,1
end;
procedure TCAN1_C1FIFOCON24.setFSIZE(thebits : TBits_5); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,16,5
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON24.getFSIZE : TBits_5;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,16,5
end;
procedure TCAN1_C1FIFOCON24.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TCAN1_C1FIFOCON24.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TCAN1_C1FIFOINT24.setRXNEMPTYIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT24.clearRXNEMPTYIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT24.setRXNEMPTYIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT24.getRXNEMPTYIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,1
end;
procedure TCAN1_C1FIFOINT24.setRXHALFIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT24.clearRXHALFIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT24.setRXHALFIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,1,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT24.getRXHALFIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,1,1
end;
procedure TCAN1_C1FIFOINT24.setRXFULLIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT24.clearRXFULLIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT24.setRXFULLIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,2,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT24.getRXFULLIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,2,1
end;
procedure TCAN1_C1FIFOINT24.setRXOVFLIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT24.clearRXOVFLIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT24.setRXOVFLIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,3,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT24.getRXOVFLIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,3,1
end;
procedure TCAN1_C1FIFOINT24.setTXEMPTYIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT24.clearTXEMPTYIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT24.setTXEMPTYIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,8,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT24.getTXEMPTYIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,8,1
end;
procedure TCAN1_C1FIFOINT24.setTXHALFIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,512
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT24.clearTXHALFIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,512
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT24.setTXHALFIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,9,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT24.getTXHALFIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,9,1
end;
procedure TCAN1_C1FIFOINT24.setTXNFULLIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1024
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT24.clearTXNFULLIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1024
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT24.setTXNFULLIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,10,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT24.getTXNFULLIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,10,1
end;
procedure TCAN1_C1FIFOINT24.setRXNEMPTYIE; assembler; nostackframe; inline;
asm
  lui     $a1,1
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT24.clearRXNEMPTYIE; assembler; nostackframe; inline;
asm
  lui     $a1,1
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT24.setRXNEMPTYIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,16,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT24.getRXNEMPTYIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,16,1
end;
procedure TCAN1_C1FIFOINT24.setRXHALFIE; assembler; nostackframe; inline;
asm
  lui     $a1,2
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT24.clearRXHALFIE; assembler; nostackframe; inline;
asm
  lui     $a1,2
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT24.setRXHALFIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,17,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT24.getRXHALFIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,17,1
end;
procedure TCAN1_C1FIFOINT24.setRXFULLIE; assembler; nostackframe; inline;
asm
  lui     $a1,4
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT24.clearRXFULLIE; assembler; nostackframe; inline;
asm
  lui     $a1,4
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT24.setRXFULLIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,18,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT24.getRXFULLIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,18,1
end;
procedure TCAN1_C1FIFOINT24.setRXOVFLIE; assembler; nostackframe; inline;
asm
  lui     $a1,8
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT24.clearRXOVFLIE; assembler; nostackframe; inline;
asm
  lui     $a1,8
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT24.setRXOVFLIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,19,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT24.getRXOVFLIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,19,1
end;
procedure TCAN1_C1FIFOINT24.setTXEMPTYIE; assembler; nostackframe; inline;
asm
  lui     $a1,256
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT24.clearTXEMPTYIE; assembler; nostackframe; inline;
asm
  lui     $a1,256
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT24.setTXEMPTYIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,24,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT24.getTXEMPTYIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,24,1
end;
procedure TCAN1_C1FIFOINT24.setTXHALFIE; assembler; nostackframe; inline;
asm
  lui     $a1,512
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT24.clearTXHALFIE; assembler; nostackframe; inline;
asm
  lui     $a1,512
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT24.setTXHALFIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,25,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT24.getTXHALFIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,25,1
end;
procedure TCAN1_C1FIFOINT24.setTXNFULLIE; assembler; nostackframe; inline;
asm
  lui     $a1,1024
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT24.clearTXNFULLIE; assembler; nostackframe; inline;
asm
  lui     $a1,1024
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT24.setTXNFULLIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,26,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT24.getTXNFULLIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,26,1
end;
procedure TCAN1_C1FIFOINT24.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TCAN1_C1FIFOINT24.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TCAN1_C1FIFOCI24.setCFIFOCI(thebits : TBits_5); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,5
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCI24.getCFIFOCI : TBits_5;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,5
end;
procedure TCAN1_C1FIFOCI24.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TCAN1_C1FIFOCI24.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TCAN1_C1FIFOCON25.setTXPRI(thebits : TBits_2); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,2
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON25.getTXPRI : TBits_2;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,2
end;
procedure TCAN1_C1FIFOCON25.setRTREN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON25.clearRTREN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON25.setRTREN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,2,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON25.getRTREN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,2,1
end;
procedure TCAN1_C1FIFOCON25.setTXREQ; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON25.clearTXREQ; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON25.setTXREQ(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,3,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON25.getTXREQ : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,3,1
end;
procedure TCAN1_C1FIFOCON25.setTXERR; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON25.clearTXERR; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON25.setTXERR(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,4,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON25.getTXERR : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,4,1
end;
procedure TCAN1_C1FIFOCON25.setTXLARB; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON25.clearTXLARB; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON25.setTXLARB(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,5,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON25.getTXLARB : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,5,1
end;
procedure TCAN1_C1FIFOCON25.setTXABAT; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON25.clearTXABAT; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON25.setTXABAT(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,6,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON25.getTXABAT : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,6,1
end;
procedure TCAN1_C1FIFOCON25.setTXEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON25.clearTXEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON25.setTXEN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,7,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON25.getTXEN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,7,1
end;
procedure TCAN1_C1FIFOCON25.setDONLY; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4096
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON25.clearDONLY; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4096
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON25.setDONLY(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,12,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON25.getDONLY : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,12,1
end;
procedure TCAN1_C1FIFOCON25.setUINC; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON25.clearUINC; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON25.setUINC(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,13,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON25.getUINC : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,13,1
end;
procedure TCAN1_C1FIFOCON25.setFRESET; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16384
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON25.clearFRESET; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16384
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON25.setFRESET(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,14,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON25.getFRESET : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,14,1
end;
procedure TCAN1_C1FIFOCON25.setFSIZE(thebits : TBits_5); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,16,5
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON25.getFSIZE : TBits_5;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,16,5
end;
procedure TCAN1_C1FIFOCON25.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TCAN1_C1FIFOCON25.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TCAN1_C1FIFOINT25.setRXNEMPTYIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT25.clearRXNEMPTYIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT25.setRXNEMPTYIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT25.getRXNEMPTYIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,1
end;
procedure TCAN1_C1FIFOINT25.setRXHALFIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT25.clearRXHALFIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT25.setRXHALFIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,1,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT25.getRXHALFIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,1,1
end;
procedure TCAN1_C1FIFOINT25.setRXFULLIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT25.clearRXFULLIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT25.setRXFULLIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,2,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT25.getRXFULLIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,2,1
end;
procedure TCAN1_C1FIFOINT25.setRXOVFLIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT25.clearRXOVFLIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT25.setRXOVFLIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,3,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT25.getRXOVFLIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,3,1
end;
procedure TCAN1_C1FIFOINT25.setTXEMPTYIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT25.clearTXEMPTYIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT25.setTXEMPTYIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,8,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT25.getTXEMPTYIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,8,1
end;
procedure TCAN1_C1FIFOINT25.setTXHALFIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,512
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT25.clearTXHALFIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,512
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT25.setTXHALFIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,9,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT25.getTXHALFIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,9,1
end;
procedure TCAN1_C1FIFOINT25.setTXNFULLIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1024
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT25.clearTXNFULLIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1024
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT25.setTXNFULLIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,10,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT25.getTXNFULLIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,10,1
end;
procedure TCAN1_C1FIFOINT25.setRXNEMPTYIE; assembler; nostackframe; inline;
asm
  lui     $a1,1
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT25.clearRXNEMPTYIE; assembler; nostackframe; inline;
asm
  lui     $a1,1
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT25.setRXNEMPTYIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,16,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT25.getRXNEMPTYIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,16,1
end;
procedure TCAN1_C1FIFOINT25.setRXHALFIE; assembler; nostackframe; inline;
asm
  lui     $a1,2
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT25.clearRXHALFIE; assembler; nostackframe; inline;
asm
  lui     $a1,2
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT25.setRXHALFIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,17,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT25.getRXHALFIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,17,1
end;
procedure TCAN1_C1FIFOINT25.setRXFULLIE; assembler; nostackframe; inline;
asm
  lui     $a1,4
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT25.clearRXFULLIE; assembler; nostackframe; inline;
asm
  lui     $a1,4
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT25.setRXFULLIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,18,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT25.getRXFULLIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,18,1
end;
procedure TCAN1_C1FIFOINT25.setRXOVFLIE; assembler; nostackframe; inline;
asm
  lui     $a1,8
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT25.clearRXOVFLIE; assembler; nostackframe; inline;
asm
  lui     $a1,8
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT25.setRXOVFLIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,19,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT25.getRXOVFLIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,19,1
end;
procedure TCAN1_C1FIFOINT25.setTXEMPTYIE; assembler; nostackframe; inline;
asm
  lui     $a1,256
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT25.clearTXEMPTYIE; assembler; nostackframe; inline;
asm
  lui     $a1,256
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT25.setTXEMPTYIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,24,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT25.getTXEMPTYIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,24,1
end;
procedure TCAN1_C1FIFOINT25.setTXHALFIE; assembler; nostackframe; inline;
asm
  lui     $a1,512
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT25.clearTXHALFIE; assembler; nostackframe; inline;
asm
  lui     $a1,512
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT25.setTXHALFIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,25,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT25.getTXHALFIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,25,1
end;
procedure TCAN1_C1FIFOINT25.setTXNFULLIE; assembler; nostackframe; inline;
asm
  lui     $a1,1024
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT25.clearTXNFULLIE; assembler; nostackframe; inline;
asm
  lui     $a1,1024
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT25.setTXNFULLIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,26,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT25.getTXNFULLIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,26,1
end;
procedure TCAN1_C1FIFOINT25.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TCAN1_C1FIFOINT25.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TCAN1_C1FIFOCI25.setCFIFOCI(thebits : TBits_5); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,5
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCI25.getCFIFOCI : TBits_5;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,5
end;
procedure TCAN1_C1FIFOCI25.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TCAN1_C1FIFOCI25.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TCAN1_C1FIFOCON26.setTXPRI(thebits : TBits_2); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,2
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON26.getTXPRI : TBits_2;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,2
end;
procedure TCAN1_C1FIFOCON26.setRTREN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON26.clearRTREN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON26.setRTREN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,2,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON26.getRTREN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,2,1
end;
procedure TCAN1_C1FIFOCON26.setTXREQ; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON26.clearTXREQ; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON26.setTXREQ(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,3,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON26.getTXREQ : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,3,1
end;
procedure TCAN1_C1FIFOCON26.setTXERR; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON26.clearTXERR; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON26.setTXERR(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,4,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON26.getTXERR : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,4,1
end;
procedure TCAN1_C1FIFOCON26.setTXLARB; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON26.clearTXLARB; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON26.setTXLARB(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,5,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON26.getTXLARB : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,5,1
end;
procedure TCAN1_C1FIFOCON26.setTXABAT; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON26.clearTXABAT; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON26.setTXABAT(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,6,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON26.getTXABAT : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,6,1
end;
procedure TCAN1_C1FIFOCON26.setTXEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON26.clearTXEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON26.setTXEN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,7,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON26.getTXEN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,7,1
end;
procedure TCAN1_C1FIFOCON26.setDONLY; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4096
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON26.clearDONLY; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4096
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON26.setDONLY(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,12,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON26.getDONLY : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,12,1
end;
procedure TCAN1_C1FIFOCON26.setUINC; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON26.clearUINC; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON26.setUINC(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,13,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON26.getUINC : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,13,1
end;
procedure TCAN1_C1FIFOCON26.setFRESET; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16384
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON26.clearFRESET; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16384
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON26.setFRESET(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,14,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON26.getFRESET : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,14,1
end;
procedure TCAN1_C1FIFOCON26.setFSIZE(thebits : TBits_5); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,16,5
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON26.getFSIZE : TBits_5;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,16,5
end;
procedure TCAN1_C1FIFOCON26.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TCAN1_C1FIFOCON26.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TCAN1_C1FIFOINT26.setRXNEMPTYIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT26.clearRXNEMPTYIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT26.setRXNEMPTYIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT26.getRXNEMPTYIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,1
end;
procedure TCAN1_C1FIFOINT26.setRXHALFIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT26.clearRXHALFIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT26.setRXHALFIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,1,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT26.getRXHALFIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,1,1
end;
procedure TCAN1_C1FIFOINT26.setRXFULLIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT26.clearRXFULLIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT26.setRXFULLIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,2,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT26.getRXFULLIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,2,1
end;
procedure TCAN1_C1FIFOINT26.setRXOVFLIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT26.clearRXOVFLIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT26.setRXOVFLIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,3,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT26.getRXOVFLIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,3,1
end;
procedure TCAN1_C1FIFOINT26.setTXEMPTYIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT26.clearTXEMPTYIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT26.setTXEMPTYIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,8,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT26.getTXEMPTYIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,8,1
end;
procedure TCAN1_C1FIFOINT26.setTXHALFIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,512
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT26.clearTXHALFIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,512
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT26.setTXHALFIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,9,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT26.getTXHALFIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,9,1
end;
procedure TCAN1_C1FIFOINT26.setTXNFULLIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1024
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT26.clearTXNFULLIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1024
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT26.setTXNFULLIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,10,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT26.getTXNFULLIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,10,1
end;
procedure TCAN1_C1FIFOINT26.setRXNEMPTYIE; assembler; nostackframe; inline;
asm
  lui     $a1,1
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT26.clearRXNEMPTYIE; assembler; nostackframe; inline;
asm
  lui     $a1,1
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT26.setRXNEMPTYIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,16,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT26.getRXNEMPTYIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,16,1
end;
procedure TCAN1_C1FIFOINT26.setRXHALFIE; assembler; nostackframe; inline;
asm
  lui     $a1,2
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT26.clearRXHALFIE; assembler; nostackframe; inline;
asm
  lui     $a1,2
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT26.setRXHALFIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,17,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT26.getRXHALFIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,17,1
end;
procedure TCAN1_C1FIFOINT26.setRXFULLIE; assembler; nostackframe; inline;
asm
  lui     $a1,4
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT26.clearRXFULLIE; assembler; nostackframe; inline;
asm
  lui     $a1,4
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT26.setRXFULLIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,18,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT26.getRXFULLIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,18,1
end;
procedure TCAN1_C1FIFOINT26.setRXOVFLIE; assembler; nostackframe; inline;
asm
  lui     $a1,8
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT26.clearRXOVFLIE; assembler; nostackframe; inline;
asm
  lui     $a1,8
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT26.setRXOVFLIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,19,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT26.getRXOVFLIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,19,1
end;
procedure TCAN1_C1FIFOINT26.setTXEMPTYIE; assembler; nostackframe; inline;
asm
  lui     $a1,256
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT26.clearTXEMPTYIE; assembler; nostackframe; inline;
asm
  lui     $a1,256
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT26.setTXEMPTYIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,24,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT26.getTXEMPTYIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,24,1
end;
procedure TCAN1_C1FIFOINT26.setTXHALFIE; assembler; nostackframe; inline;
asm
  lui     $a1,512
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT26.clearTXHALFIE; assembler; nostackframe; inline;
asm
  lui     $a1,512
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT26.setTXHALFIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,25,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT26.getTXHALFIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,25,1
end;
procedure TCAN1_C1FIFOINT26.setTXNFULLIE; assembler; nostackframe; inline;
asm
  lui     $a1,1024
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT26.clearTXNFULLIE; assembler; nostackframe; inline;
asm
  lui     $a1,1024
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT26.setTXNFULLIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,26,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT26.getTXNFULLIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,26,1
end;
procedure TCAN1_C1FIFOINT26.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TCAN1_C1FIFOINT26.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TCAN1_C1FIFOCI26.setCFIFOCI(thebits : TBits_5); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,5
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCI26.getCFIFOCI : TBits_5;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,5
end;
procedure TCAN1_C1FIFOCI26.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TCAN1_C1FIFOCI26.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TCAN1_C1FIFOCON27.setTXPRI(thebits : TBits_2); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,2
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON27.getTXPRI : TBits_2;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,2
end;
procedure TCAN1_C1FIFOCON27.setRTREN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON27.clearRTREN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON27.setRTREN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,2,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON27.getRTREN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,2,1
end;
procedure TCAN1_C1FIFOCON27.setTXREQ; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON27.clearTXREQ; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON27.setTXREQ(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,3,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON27.getTXREQ : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,3,1
end;
procedure TCAN1_C1FIFOCON27.setTXERR; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON27.clearTXERR; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON27.setTXERR(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,4,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON27.getTXERR : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,4,1
end;
procedure TCAN1_C1FIFOCON27.setTXLARB; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON27.clearTXLARB; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON27.setTXLARB(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,5,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON27.getTXLARB : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,5,1
end;
procedure TCAN1_C1FIFOCON27.setTXABAT; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON27.clearTXABAT; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON27.setTXABAT(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,6,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON27.getTXABAT : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,6,1
end;
procedure TCAN1_C1FIFOCON27.setTXEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON27.clearTXEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON27.setTXEN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,7,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON27.getTXEN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,7,1
end;
procedure TCAN1_C1FIFOCON27.setDONLY; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4096
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON27.clearDONLY; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4096
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON27.setDONLY(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,12,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON27.getDONLY : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,12,1
end;
procedure TCAN1_C1FIFOCON27.setUINC; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON27.clearUINC; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON27.setUINC(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,13,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON27.getUINC : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,13,1
end;
procedure TCAN1_C1FIFOCON27.setFRESET; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16384
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON27.clearFRESET; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16384
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON27.setFRESET(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,14,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON27.getFRESET : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,14,1
end;
procedure TCAN1_C1FIFOCON27.setFSIZE(thebits : TBits_5); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,16,5
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON27.getFSIZE : TBits_5;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,16,5
end;
procedure TCAN1_C1FIFOCON27.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TCAN1_C1FIFOCON27.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TCAN1_C1FIFOINT27.setRXNEMPTYIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT27.clearRXNEMPTYIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT27.setRXNEMPTYIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT27.getRXNEMPTYIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,1
end;
procedure TCAN1_C1FIFOINT27.setRXHALFIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT27.clearRXHALFIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT27.setRXHALFIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,1,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT27.getRXHALFIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,1,1
end;
procedure TCAN1_C1FIFOINT27.setRXFULLIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT27.clearRXFULLIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT27.setRXFULLIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,2,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT27.getRXFULLIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,2,1
end;
procedure TCAN1_C1FIFOINT27.setRXOVFLIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT27.clearRXOVFLIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT27.setRXOVFLIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,3,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT27.getRXOVFLIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,3,1
end;
procedure TCAN1_C1FIFOINT27.setTXEMPTYIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT27.clearTXEMPTYIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT27.setTXEMPTYIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,8,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT27.getTXEMPTYIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,8,1
end;
procedure TCAN1_C1FIFOINT27.setTXHALFIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,512
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT27.clearTXHALFIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,512
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT27.setTXHALFIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,9,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT27.getTXHALFIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,9,1
end;
procedure TCAN1_C1FIFOINT27.setTXNFULLIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1024
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT27.clearTXNFULLIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1024
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT27.setTXNFULLIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,10,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT27.getTXNFULLIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,10,1
end;
procedure TCAN1_C1FIFOINT27.setRXNEMPTYIE; assembler; nostackframe; inline;
asm
  lui     $a1,1
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT27.clearRXNEMPTYIE; assembler; nostackframe; inline;
asm
  lui     $a1,1
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT27.setRXNEMPTYIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,16,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT27.getRXNEMPTYIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,16,1
end;
procedure TCAN1_C1FIFOINT27.setRXHALFIE; assembler; nostackframe; inline;
asm
  lui     $a1,2
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT27.clearRXHALFIE; assembler; nostackframe; inline;
asm
  lui     $a1,2
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT27.setRXHALFIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,17,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT27.getRXHALFIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,17,1
end;
procedure TCAN1_C1FIFOINT27.setRXFULLIE; assembler; nostackframe; inline;
asm
  lui     $a1,4
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT27.clearRXFULLIE; assembler; nostackframe; inline;
asm
  lui     $a1,4
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT27.setRXFULLIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,18,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT27.getRXFULLIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,18,1
end;
procedure TCAN1_C1FIFOINT27.setRXOVFLIE; assembler; nostackframe; inline;
asm
  lui     $a1,8
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT27.clearRXOVFLIE; assembler; nostackframe; inline;
asm
  lui     $a1,8
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT27.setRXOVFLIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,19,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT27.getRXOVFLIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,19,1
end;
procedure TCAN1_C1FIFOINT27.setTXEMPTYIE; assembler; nostackframe; inline;
asm
  lui     $a1,256
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT27.clearTXEMPTYIE; assembler; nostackframe; inline;
asm
  lui     $a1,256
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT27.setTXEMPTYIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,24,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT27.getTXEMPTYIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,24,1
end;
procedure TCAN1_C1FIFOINT27.setTXHALFIE; assembler; nostackframe; inline;
asm
  lui     $a1,512
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT27.clearTXHALFIE; assembler; nostackframe; inline;
asm
  lui     $a1,512
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT27.setTXHALFIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,25,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT27.getTXHALFIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,25,1
end;
procedure TCAN1_C1FIFOINT27.setTXNFULLIE; assembler; nostackframe; inline;
asm
  lui     $a1,1024
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT27.clearTXNFULLIE; assembler; nostackframe; inline;
asm
  lui     $a1,1024
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT27.setTXNFULLIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,26,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT27.getTXNFULLIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,26,1
end;
procedure TCAN1_C1FIFOINT27.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TCAN1_C1FIFOINT27.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TCAN1_C1FIFOCI27.setCFIFOCI(thebits : TBits_5); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,5
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCI27.getCFIFOCI : TBits_5;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,5
end;
procedure TCAN1_C1FIFOCI27.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TCAN1_C1FIFOCI27.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TCAN1_C1FIFOCON28.setTXPRI(thebits : TBits_2); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,2
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON28.getTXPRI : TBits_2;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,2
end;
procedure TCAN1_C1FIFOCON28.setRTREN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON28.clearRTREN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON28.setRTREN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,2,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON28.getRTREN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,2,1
end;
procedure TCAN1_C1FIFOCON28.setTXREQ; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON28.clearTXREQ; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON28.setTXREQ(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,3,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON28.getTXREQ : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,3,1
end;
procedure TCAN1_C1FIFOCON28.setTXERR; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON28.clearTXERR; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON28.setTXERR(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,4,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON28.getTXERR : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,4,1
end;
procedure TCAN1_C1FIFOCON28.setTXLARB; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON28.clearTXLARB; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON28.setTXLARB(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,5,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON28.getTXLARB : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,5,1
end;
procedure TCAN1_C1FIFOCON28.setTXABAT; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON28.clearTXABAT; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON28.setTXABAT(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,6,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON28.getTXABAT : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,6,1
end;
procedure TCAN1_C1FIFOCON28.setTXEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON28.clearTXEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON28.setTXEN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,7,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON28.getTXEN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,7,1
end;
procedure TCAN1_C1FIFOCON28.setDONLY; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4096
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON28.clearDONLY; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4096
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON28.setDONLY(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,12,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON28.getDONLY : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,12,1
end;
procedure TCAN1_C1FIFOCON28.setUINC; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON28.clearUINC; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON28.setUINC(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,13,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON28.getUINC : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,13,1
end;
procedure TCAN1_C1FIFOCON28.setFRESET; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16384
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON28.clearFRESET; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16384
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON28.setFRESET(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,14,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON28.getFRESET : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,14,1
end;
procedure TCAN1_C1FIFOCON28.setFSIZE(thebits : TBits_5); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,16,5
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON28.getFSIZE : TBits_5;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,16,5
end;
procedure TCAN1_C1FIFOCON28.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TCAN1_C1FIFOCON28.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TCAN1_C1FIFOINT28.setRXNEMPTYIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT28.clearRXNEMPTYIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT28.setRXNEMPTYIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT28.getRXNEMPTYIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,1
end;
procedure TCAN1_C1FIFOINT28.setRXHALFIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT28.clearRXHALFIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT28.setRXHALFIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,1,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT28.getRXHALFIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,1,1
end;
procedure TCAN1_C1FIFOINT28.setRXFULLIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT28.clearRXFULLIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT28.setRXFULLIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,2,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT28.getRXFULLIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,2,1
end;
procedure TCAN1_C1FIFOINT28.setRXOVFLIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT28.clearRXOVFLIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT28.setRXOVFLIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,3,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT28.getRXOVFLIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,3,1
end;
procedure TCAN1_C1FIFOINT28.setTXEMPTYIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT28.clearTXEMPTYIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT28.setTXEMPTYIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,8,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT28.getTXEMPTYIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,8,1
end;
procedure TCAN1_C1FIFOINT28.setTXHALFIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,512
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT28.clearTXHALFIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,512
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT28.setTXHALFIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,9,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT28.getTXHALFIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,9,1
end;
procedure TCAN1_C1FIFOINT28.setTXNFULLIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1024
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT28.clearTXNFULLIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1024
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT28.setTXNFULLIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,10,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT28.getTXNFULLIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,10,1
end;
procedure TCAN1_C1FIFOINT28.setRXNEMPTYIE; assembler; nostackframe; inline;
asm
  lui     $a1,1
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT28.clearRXNEMPTYIE; assembler; nostackframe; inline;
asm
  lui     $a1,1
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT28.setRXNEMPTYIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,16,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT28.getRXNEMPTYIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,16,1
end;
procedure TCAN1_C1FIFOINT28.setRXHALFIE; assembler; nostackframe; inline;
asm
  lui     $a1,2
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT28.clearRXHALFIE; assembler; nostackframe; inline;
asm
  lui     $a1,2
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT28.setRXHALFIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,17,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT28.getRXHALFIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,17,1
end;
procedure TCAN1_C1FIFOINT28.setRXFULLIE; assembler; nostackframe; inline;
asm
  lui     $a1,4
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT28.clearRXFULLIE; assembler; nostackframe; inline;
asm
  lui     $a1,4
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT28.setRXFULLIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,18,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT28.getRXFULLIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,18,1
end;
procedure TCAN1_C1FIFOINT28.setRXOVFLIE; assembler; nostackframe; inline;
asm
  lui     $a1,8
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT28.clearRXOVFLIE; assembler; nostackframe; inline;
asm
  lui     $a1,8
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT28.setRXOVFLIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,19,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT28.getRXOVFLIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,19,1
end;
procedure TCAN1_C1FIFOINT28.setTXEMPTYIE; assembler; nostackframe; inline;
asm
  lui     $a1,256
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT28.clearTXEMPTYIE; assembler; nostackframe; inline;
asm
  lui     $a1,256
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT28.setTXEMPTYIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,24,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT28.getTXEMPTYIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,24,1
end;
procedure TCAN1_C1FIFOINT28.setTXHALFIE; assembler; nostackframe; inline;
asm
  lui     $a1,512
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT28.clearTXHALFIE; assembler; nostackframe; inline;
asm
  lui     $a1,512
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT28.setTXHALFIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,25,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT28.getTXHALFIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,25,1
end;
procedure TCAN1_C1FIFOINT28.setTXNFULLIE; assembler; nostackframe; inline;
asm
  lui     $a1,1024
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT28.clearTXNFULLIE; assembler; nostackframe; inline;
asm
  lui     $a1,1024
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT28.setTXNFULLIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,26,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT28.getTXNFULLIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,26,1
end;
procedure TCAN1_C1FIFOINT28.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TCAN1_C1FIFOINT28.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TCAN1_C1FIFOCI28.setCFIFOCI(thebits : TBits_5); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,5
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCI28.getCFIFOCI : TBits_5;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,5
end;
procedure TCAN1_C1FIFOCI28.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TCAN1_C1FIFOCI28.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TCAN1_C1FIFOCON29.setTXPRI(thebits : TBits_2); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,2
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON29.getTXPRI : TBits_2;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,2
end;
procedure TCAN1_C1FIFOCON29.setRTREN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON29.clearRTREN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON29.setRTREN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,2,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON29.getRTREN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,2,1
end;
procedure TCAN1_C1FIFOCON29.setTXREQ; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON29.clearTXREQ; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON29.setTXREQ(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,3,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON29.getTXREQ : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,3,1
end;
procedure TCAN1_C1FIFOCON29.setTXERR; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON29.clearTXERR; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON29.setTXERR(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,4,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON29.getTXERR : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,4,1
end;
procedure TCAN1_C1FIFOCON29.setTXLARB; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON29.clearTXLARB; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON29.setTXLARB(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,5,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON29.getTXLARB : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,5,1
end;
procedure TCAN1_C1FIFOCON29.setTXABAT; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON29.clearTXABAT; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON29.setTXABAT(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,6,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON29.getTXABAT : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,6,1
end;
procedure TCAN1_C1FIFOCON29.setTXEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON29.clearTXEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON29.setTXEN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,7,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON29.getTXEN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,7,1
end;
procedure TCAN1_C1FIFOCON29.setDONLY; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4096
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON29.clearDONLY; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4096
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON29.setDONLY(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,12,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON29.getDONLY : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,12,1
end;
procedure TCAN1_C1FIFOCON29.setUINC; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON29.clearUINC; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON29.setUINC(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,13,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON29.getUINC : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,13,1
end;
procedure TCAN1_C1FIFOCON29.setFRESET; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16384
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON29.clearFRESET; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16384
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON29.setFRESET(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,14,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON29.getFRESET : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,14,1
end;
procedure TCAN1_C1FIFOCON29.setFSIZE(thebits : TBits_5); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,16,5
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON29.getFSIZE : TBits_5;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,16,5
end;
procedure TCAN1_C1FIFOCON29.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TCAN1_C1FIFOCON29.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TCAN1_C1FIFOINT29.setRXNEMPTYIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT29.clearRXNEMPTYIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT29.setRXNEMPTYIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT29.getRXNEMPTYIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,1
end;
procedure TCAN1_C1FIFOINT29.setRXHALFIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT29.clearRXHALFIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT29.setRXHALFIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,1,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT29.getRXHALFIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,1,1
end;
procedure TCAN1_C1FIFOINT29.setRXFULLIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT29.clearRXFULLIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT29.setRXFULLIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,2,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT29.getRXFULLIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,2,1
end;
procedure TCAN1_C1FIFOINT29.setRXOVFLIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT29.clearRXOVFLIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT29.setRXOVFLIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,3,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT29.getRXOVFLIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,3,1
end;
procedure TCAN1_C1FIFOINT29.setTXEMPTYIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT29.clearTXEMPTYIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT29.setTXEMPTYIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,8,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT29.getTXEMPTYIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,8,1
end;
procedure TCAN1_C1FIFOINT29.setTXHALFIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,512
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT29.clearTXHALFIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,512
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT29.setTXHALFIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,9,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT29.getTXHALFIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,9,1
end;
procedure TCAN1_C1FIFOINT29.setTXNFULLIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1024
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT29.clearTXNFULLIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1024
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT29.setTXNFULLIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,10,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT29.getTXNFULLIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,10,1
end;
procedure TCAN1_C1FIFOINT29.setRXNEMPTYIE; assembler; nostackframe; inline;
asm
  lui     $a1,1
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT29.clearRXNEMPTYIE; assembler; nostackframe; inline;
asm
  lui     $a1,1
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT29.setRXNEMPTYIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,16,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT29.getRXNEMPTYIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,16,1
end;
procedure TCAN1_C1FIFOINT29.setRXHALFIE; assembler; nostackframe; inline;
asm
  lui     $a1,2
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT29.clearRXHALFIE; assembler; nostackframe; inline;
asm
  lui     $a1,2
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT29.setRXHALFIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,17,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT29.getRXHALFIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,17,1
end;
procedure TCAN1_C1FIFOINT29.setRXFULLIE; assembler; nostackframe; inline;
asm
  lui     $a1,4
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT29.clearRXFULLIE; assembler; nostackframe; inline;
asm
  lui     $a1,4
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT29.setRXFULLIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,18,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT29.getRXFULLIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,18,1
end;
procedure TCAN1_C1FIFOINT29.setRXOVFLIE; assembler; nostackframe; inline;
asm
  lui     $a1,8
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT29.clearRXOVFLIE; assembler; nostackframe; inline;
asm
  lui     $a1,8
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT29.setRXOVFLIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,19,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT29.getRXOVFLIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,19,1
end;
procedure TCAN1_C1FIFOINT29.setTXEMPTYIE; assembler; nostackframe; inline;
asm
  lui     $a1,256
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT29.clearTXEMPTYIE; assembler; nostackframe; inline;
asm
  lui     $a1,256
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT29.setTXEMPTYIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,24,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT29.getTXEMPTYIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,24,1
end;
procedure TCAN1_C1FIFOINT29.setTXHALFIE; assembler; nostackframe; inline;
asm
  lui     $a1,512
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT29.clearTXHALFIE; assembler; nostackframe; inline;
asm
  lui     $a1,512
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT29.setTXHALFIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,25,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT29.getTXHALFIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,25,1
end;
procedure TCAN1_C1FIFOINT29.setTXNFULLIE; assembler; nostackframe; inline;
asm
  lui     $a1,1024
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT29.clearTXNFULLIE; assembler; nostackframe; inline;
asm
  lui     $a1,1024
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT29.setTXNFULLIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,26,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT29.getTXNFULLIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,26,1
end;
procedure TCAN1_C1FIFOINT29.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TCAN1_C1FIFOINT29.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TCAN1_C1FIFOCI29.setCFIFOCI(thebits : TBits_5); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,5
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCI29.getCFIFOCI : TBits_5;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,5
end;
procedure TCAN1_C1FIFOCI29.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TCAN1_C1FIFOCI29.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TCAN1_C1FIFOCON30.setTXPRI(thebits : TBits_2); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,2
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON30.getTXPRI : TBits_2;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,2
end;
procedure TCAN1_C1FIFOCON30.setRTREN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON30.clearRTREN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON30.setRTREN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,2,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON30.getRTREN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,2,1
end;
procedure TCAN1_C1FIFOCON30.setTXREQ; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON30.clearTXREQ; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON30.setTXREQ(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,3,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON30.getTXREQ : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,3,1
end;
procedure TCAN1_C1FIFOCON30.setTXERR; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON30.clearTXERR; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON30.setTXERR(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,4,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON30.getTXERR : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,4,1
end;
procedure TCAN1_C1FIFOCON30.setTXLARB; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON30.clearTXLARB; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON30.setTXLARB(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,5,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON30.getTXLARB : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,5,1
end;
procedure TCAN1_C1FIFOCON30.setTXABAT; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON30.clearTXABAT; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON30.setTXABAT(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,6,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON30.getTXABAT : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,6,1
end;
procedure TCAN1_C1FIFOCON30.setTXEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON30.clearTXEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON30.setTXEN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,7,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON30.getTXEN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,7,1
end;
procedure TCAN1_C1FIFOCON30.setDONLY; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4096
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON30.clearDONLY; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4096
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON30.setDONLY(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,12,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON30.getDONLY : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,12,1
end;
procedure TCAN1_C1FIFOCON30.setUINC; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON30.clearUINC; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON30.setUINC(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,13,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON30.getUINC : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,13,1
end;
procedure TCAN1_C1FIFOCON30.setFRESET; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16384
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON30.clearFRESET; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16384
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON30.setFRESET(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,14,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON30.getFRESET : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,14,1
end;
procedure TCAN1_C1FIFOCON30.setFSIZE(thebits : TBits_5); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,16,5
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON30.getFSIZE : TBits_5;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,16,5
end;
procedure TCAN1_C1FIFOCON30.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TCAN1_C1FIFOCON30.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TCAN1_C1FIFOINT30.setRXNEMPTYIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT30.clearRXNEMPTYIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT30.setRXNEMPTYIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT30.getRXNEMPTYIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,1
end;
procedure TCAN1_C1FIFOINT30.setRXHALFIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT30.clearRXHALFIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT30.setRXHALFIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,1,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT30.getRXHALFIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,1,1
end;
procedure TCAN1_C1FIFOINT30.setRXFULLIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT30.clearRXFULLIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT30.setRXFULLIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,2,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT30.getRXFULLIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,2,1
end;
procedure TCAN1_C1FIFOINT30.setRXOVFLIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT30.clearRXOVFLIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT30.setRXOVFLIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,3,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT30.getRXOVFLIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,3,1
end;
procedure TCAN1_C1FIFOINT30.setTXEMPTYIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT30.clearTXEMPTYIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT30.setTXEMPTYIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,8,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT30.getTXEMPTYIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,8,1
end;
procedure TCAN1_C1FIFOINT30.setTXHALFIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,512
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT30.clearTXHALFIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,512
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT30.setTXHALFIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,9,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT30.getTXHALFIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,9,1
end;
procedure TCAN1_C1FIFOINT30.setTXNFULLIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1024
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT30.clearTXNFULLIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1024
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT30.setTXNFULLIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,10,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT30.getTXNFULLIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,10,1
end;
procedure TCAN1_C1FIFOINT30.setRXNEMPTYIE; assembler; nostackframe; inline;
asm
  lui     $a1,1
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT30.clearRXNEMPTYIE; assembler; nostackframe; inline;
asm
  lui     $a1,1
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT30.setRXNEMPTYIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,16,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT30.getRXNEMPTYIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,16,1
end;
procedure TCAN1_C1FIFOINT30.setRXHALFIE; assembler; nostackframe; inline;
asm
  lui     $a1,2
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT30.clearRXHALFIE; assembler; nostackframe; inline;
asm
  lui     $a1,2
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT30.setRXHALFIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,17,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT30.getRXHALFIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,17,1
end;
procedure TCAN1_C1FIFOINT30.setRXFULLIE; assembler; nostackframe; inline;
asm
  lui     $a1,4
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT30.clearRXFULLIE; assembler; nostackframe; inline;
asm
  lui     $a1,4
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT30.setRXFULLIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,18,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT30.getRXFULLIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,18,1
end;
procedure TCAN1_C1FIFOINT30.setRXOVFLIE; assembler; nostackframe; inline;
asm
  lui     $a1,8
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT30.clearRXOVFLIE; assembler; nostackframe; inline;
asm
  lui     $a1,8
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT30.setRXOVFLIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,19,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT30.getRXOVFLIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,19,1
end;
procedure TCAN1_C1FIFOINT30.setTXEMPTYIE; assembler; nostackframe; inline;
asm
  lui     $a1,256
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT30.clearTXEMPTYIE; assembler; nostackframe; inline;
asm
  lui     $a1,256
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT30.setTXEMPTYIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,24,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT30.getTXEMPTYIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,24,1
end;
procedure TCAN1_C1FIFOINT30.setTXHALFIE; assembler; nostackframe; inline;
asm
  lui     $a1,512
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT30.clearTXHALFIE; assembler; nostackframe; inline;
asm
  lui     $a1,512
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT30.setTXHALFIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,25,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT30.getTXHALFIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,25,1
end;
procedure TCAN1_C1FIFOINT30.setTXNFULLIE; assembler; nostackframe; inline;
asm
  lui     $a1,1024
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT30.clearTXNFULLIE; assembler; nostackframe; inline;
asm
  lui     $a1,1024
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT30.setTXNFULLIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,26,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT30.getTXNFULLIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,26,1
end;
procedure TCAN1_C1FIFOINT30.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TCAN1_C1FIFOINT30.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TCAN1_C1FIFOCI30.setCFIFOCI(thebits : TBits_5); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,5
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCI30.getCFIFOCI : TBits_5;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,5
end;
procedure TCAN1_C1FIFOCI30.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TCAN1_C1FIFOCI30.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TCAN1_C1FIFOCON31.setTXPRI(thebits : TBits_2); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,2
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON31.getTXPRI : TBits_2;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,2
end;
procedure TCAN1_C1FIFOCON31.setRTREN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON31.clearRTREN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON31.setRTREN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,2,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON31.getRTREN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,2,1
end;
procedure TCAN1_C1FIFOCON31.setTXREQ; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON31.clearTXREQ; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON31.setTXREQ(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,3,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON31.getTXREQ : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,3,1
end;
procedure TCAN1_C1FIFOCON31.setTXERR; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON31.clearTXERR; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON31.setTXERR(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,4,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON31.getTXERR : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,4,1
end;
procedure TCAN1_C1FIFOCON31.setTXLARB; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON31.clearTXLARB; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON31.setTXLARB(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,5,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON31.getTXLARB : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,5,1
end;
procedure TCAN1_C1FIFOCON31.setTXABAT; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON31.clearTXABAT; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,64
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON31.setTXABAT(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,6,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON31.getTXABAT : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,6,1
end;
procedure TCAN1_C1FIFOCON31.setTXEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON31.clearTXEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON31.setTXEN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,7,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON31.getTXEN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,7,1
end;
procedure TCAN1_C1FIFOCON31.setDONLY; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4096
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON31.clearDONLY; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4096
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON31.setDONLY(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,12,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON31.getDONLY : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,12,1
end;
procedure TCAN1_C1FIFOCON31.setUINC; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON31.clearUINC; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8192
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON31.setUINC(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,13,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON31.getUINC : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,13,1
end;
procedure TCAN1_C1FIFOCON31.setFRESET; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16384
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOCON31.clearFRESET; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,16384
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOCON31.setFRESET(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,14,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON31.getFRESET : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,14,1
end;
procedure TCAN1_C1FIFOCON31.setFSIZE(thebits : TBits_5); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,16,5
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCON31.getFSIZE : TBits_5;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,16,5
end;
procedure TCAN1_C1FIFOCON31.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TCAN1_C1FIFOCON31.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TCAN1_C1FIFOINT31.setRXNEMPTYIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT31.clearRXNEMPTYIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT31.setRXNEMPTYIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT31.getRXNEMPTYIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,1
end;
procedure TCAN1_C1FIFOINT31.setRXHALFIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT31.clearRXHALFIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,2
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT31.setRXHALFIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,1,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT31.getRXHALFIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,1,1
end;
procedure TCAN1_C1FIFOINT31.setRXFULLIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT31.clearRXFULLIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,4
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT31.setRXFULLIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,2,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT31.getRXFULLIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,2,1
end;
procedure TCAN1_C1FIFOINT31.setRXOVFLIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT31.clearRXOVFLIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT31.setRXOVFLIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,3,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT31.getRXOVFLIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,3,1
end;
procedure TCAN1_C1FIFOINT31.setTXEMPTYIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT31.clearTXEMPTYIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,256
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT31.setTXEMPTYIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,8,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT31.getTXEMPTYIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,8,1
end;
procedure TCAN1_C1FIFOINT31.setTXHALFIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,512
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT31.clearTXHALFIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,512
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT31.setTXHALFIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,9,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT31.getTXHALFIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,9,1
end;
procedure TCAN1_C1FIFOINT31.setTXNFULLIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1024
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT31.clearTXNFULLIF; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1024
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT31.setTXNFULLIF(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,10,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT31.getTXNFULLIF : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,10,1
end;
procedure TCAN1_C1FIFOINT31.setRXNEMPTYIE; assembler; nostackframe; inline;
asm
  lui     $a1,1
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT31.clearRXNEMPTYIE; assembler; nostackframe; inline;
asm
  lui     $a1,1
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT31.setRXNEMPTYIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,16,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT31.getRXNEMPTYIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,16,1
end;
procedure TCAN1_C1FIFOINT31.setRXHALFIE; assembler; nostackframe; inline;
asm
  lui     $a1,2
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT31.clearRXHALFIE; assembler; nostackframe; inline;
asm
  lui     $a1,2
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT31.setRXHALFIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,17,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT31.getRXHALFIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,17,1
end;
procedure TCAN1_C1FIFOINT31.setRXFULLIE; assembler; nostackframe; inline;
asm
  lui     $a1,4
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT31.clearRXFULLIE; assembler; nostackframe; inline;
asm
  lui     $a1,4
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT31.setRXFULLIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,18,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT31.getRXFULLIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,18,1
end;
procedure TCAN1_C1FIFOINT31.setRXOVFLIE; assembler; nostackframe; inline;
asm
  lui     $a1,8
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT31.clearRXOVFLIE; assembler; nostackframe; inline;
asm
  lui     $a1,8
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT31.setRXOVFLIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,19,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT31.getRXOVFLIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,19,1
end;
procedure TCAN1_C1FIFOINT31.setTXEMPTYIE; assembler; nostackframe; inline;
asm
  lui     $a1,256
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT31.clearTXEMPTYIE; assembler; nostackframe; inline;
asm
  lui     $a1,256
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT31.setTXEMPTYIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,24,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT31.getTXEMPTYIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,24,1
end;
procedure TCAN1_C1FIFOINT31.setTXHALFIE; assembler; nostackframe; inline;
asm
  lui     $a1,512
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT31.clearTXHALFIE; assembler; nostackframe; inline;
asm
  lui     $a1,512
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT31.setTXHALFIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,25,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT31.getTXHALFIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,25,1
end;
procedure TCAN1_C1FIFOINT31.setTXNFULLIE; assembler; nostackframe; inline;
asm
  lui     $a1,1024
  sw $a1,8($a0)
end;
procedure TCAN1_C1FIFOINT31.clearTXNFULLIE; assembler; nostackframe; inline;
asm
  lui     $a1,1024
  sw $a1,4($a0)
end;
procedure TCAN1_C1FIFOINT31.setTXNFULLIE(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,26,1
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOINT31.getTXNFULLIE : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,26,1
end;
procedure TCAN1_C1FIFOINT31.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TCAN1_C1FIFOINT31.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TCAN1_C1FIFOCI31.setCFIFOCI(thebits : TBits_5); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,5
  sw      $v1,($a0)
end;
function  TCAN1_C1FIFOCI31.getCFIFOCI : TBits_5;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,5
end;
procedure TCAN1_C1FIFOCI31.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TCAN1_C1FIFOCI31.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TDEVCFG_DEVCFG3.setUSERID(thebits : TBits_16); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  sll     $a1,$a1,0
  lui    $v0,65535
  and   $v1,$v1,$v0
  or    $a1,$a1,$v0
  sw    $a1,($a0)
end;
function  TDEVCFG_DEVCFG3.getUSERID : TBits_16;
asm
  lw      $v1,($a0)
  srl     $a1,$a1,0
  ori    $v0,$zero,65535
  and    $a1,$a1,$v0
end;
procedure TDEVCFG_DEVCFG3.setFSRSSEL(thebits : TBits_3); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,16,3
  sw      $v1,($a0)
end;
function  TDEVCFG_DEVCFG3.getFSRSSEL : TBits_3;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,16,3
end;
procedure TDEVCFG_DEVCFG3.setFCANIO; assembler; nostackframe; inline;
asm
  lui     $a1,1024
  sw $a1,8($a0)
end;
procedure TDEVCFG_DEVCFG3.clearFCANIO; assembler; nostackframe; inline;
asm
  lui     $a1,1024
  sw $a1,4($a0)
end;
procedure TDEVCFG_DEVCFG3.setFCANIO(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,26,1
  sw      $v1,($a0)
end;
function  TDEVCFG_DEVCFG3.getFCANIO : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,26,1
end;
procedure TDEVCFG_DEVCFG3.setFUSBIDIO; assembler; nostackframe; inline;
asm
  lui     $a1,16384
  sw $a1,8($a0)
end;
procedure TDEVCFG_DEVCFG3.clearFUSBIDIO; assembler; nostackframe; inline;
asm
  lui     $a1,16384
  sw $a1,4($a0)
end;
procedure TDEVCFG_DEVCFG3.setFUSBIDIO(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,30,1
  sw      $v1,($a0)
end;
function  TDEVCFG_DEVCFG3.getFUSBIDIO : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,30,1
end;
procedure TDEVCFG_DEVCFG3.setFVBUSONIO; assembler; nostackframe; inline;
asm
  lui     $a1,32768
  sw $a1,8($a0)
end;
procedure TDEVCFG_DEVCFG3.clearFVBUSONIO; assembler; nostackframe; inline;
asm
  lui     $a1,32768
  sw $a1,4($a0)
end;
procedure TDEVCFG_DEVCFG3.setFVBUSONIO(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,31,1
  sw      $v1,($a0)
end;
function  TDEVCFG_DEVCFG3.getFVBUSONIO : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,31,1
end;
procedure TDEVCFG_DEVCFG3.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TDEVCFG_DEVCFG3.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TDEVCFG_DEVCFG2.setFPLLIDIV(thebits : TBits_3); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,3
  sw      $v1,($a0)
end;
function  TDEVCFG_DEVCFG2.getFPLLIDIV : TBits_3;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,3
end;
procedure TDEVCFG_DEVCFG2.setFPLLMUL(thebits : TBits_3); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,4,3
  sw      $v1,($a0)
end;
function  TDEVCFG_DEVCFG2.getFPLLMUL : TBits_3;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,4,3
end;
procedure TDEVCFG_DEVCFG2.setUPLLIDIV(thebits : TBits_3); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,8,3
  sw      $v1,($a0)
end;
function  TDEVCFG_DEVCFG2.getUPLLIDIV : TBits_3;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,8,3
end;
procedure TDEVCFG_DEVCFG2.setUPLLEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,8($a0)
end;
procedure TDEVCFG_DEVCFG2.clearUPLLEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32768
  sw $a1,4($a0)
end;
procedure TDEVCFG_DEVCFG2.setUPLLEN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,15,1
  sw      $v1,($a0)
end;
function  TDEVCFG_DEVCFG2.getUPLLEN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,15,1
end;
procedure TDEVCFG_DEVCFG2.setFPLLODIV(thebits : TBits_3); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,16,3
  sw      $v1,($a0)
end;
function  TDEVCFG_DEVCFG2.getFPLLODIV : TBits_3;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,16,3
end;
procedure TDEVCFG_DEVCFG2.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TDEVCFG_DEVCFG2.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TDEVCFG_DEVCFG1.setFNOSC(thebits : TBits_3); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,3
  sw      $v1,($a0)
end;
function  TDEVCFG_DEVCFG1.getFNOSC : TBits_3;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,3
end;
procedure TDEVCFG_DEVCFG1.setFSOSCEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,8($a0)
end;
procedure TDEVCFG_DEVCFG1.clearFSOSCEN; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,32
  sw $a1,4($a0)
end;
procedure TDEVCFG_DEVCFG1.setFSOSCEN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,5,1
  sw      $v1,($a0)
end;
function  TDEVCFG_DEVCFG1.getFSOSCEN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,5,1
end;
procedure TDEVCFG_DEVCFG1.setIESO; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,8($a0)
end;
procedure TDEVCFG_DEVCFG1.clearIESO; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,128
  sw $a1,4($a0)
end;
procedure TDEVCFG_DEVCFG1.setIESO(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,7,1
  sw      $v1,($a0)
end;
function  TDEVCFG_DEVCFG1.getIESO : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,7,1
end;
procedure TDEVCFG_DEVCFG1.setPOSCMOD(thebits : TBits_2); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,8,2
  sw      $v1,($a0)
end;
function  TDEVCFG_DEVCFG1.getPOSCMOD : TBits_2;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,8,2
end;
procedure TDEVCFG_DEVCFG1.setOSCIOFNC; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1024
  sw $a1,8($a0)
end;
procedure TDEVCFG_DEVCFG1.clearOSCIOFNC; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,1024
  sw $a1,4($a0)
end;
procedure TDEVCFG_DEVCFG1.setOSCIOFNC(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,10,1
  sw      $v1,($a0)
end;
function  TDEVCFG_DEVCFG1.getOSCIOFNC : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,10,1
end;
procedure TDEVCFG_DEVCFG1.setFPBDIV(thebits : TBits_2); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,12,2
  sw      $v1,($a0)
end;
function  TDEVCFG_DEVCFG1.getFPBDIV : TBits_2;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,12,2
end;
procedure TDEVCFG_DEVCFG1.setFCKSM(thebits : TBits_2); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,14,2
  sw      $v1,($a0)
end;
function  TDEVCFG_DEVCFG1.getFCKSM : TBits_2;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,14,2
end;
procedure TDEVCFG_DEVCFG1.setWDTPS(thebits : TBits_5); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,16,5
  sw      $v1,($a0)
end;
function  TDEVCFG_DEVCFG1.getWDTPS : TBits_5;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,16,5
end;
procedure TDEVCFG_DEVCFG1.setFWDTEN; assembler; nostackframe; inline;
asm
  lui     $a1,128
  sw $a1,8($a0)
end;
procedure TDEVCFG_DEVCFG1.clearFWDTEN; assembler; nostackframe; inline;
asm
  lui     $a1,128
  sw $a1,4($a0)
end;
procedure TDEVCFG_DEVCFG1.setFWDTEN(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,23,1
  sw      $v1,($a0)
end;
function  TDEVCFG_DEVCFG1.getFWDTEN : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,23,1
end;
procedure TDEVCFG_DEVCFG1.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TDEVCFG_DEVCFG1.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
procedure TDEVCFG_DEVCFG0.setDEBUG(thebits : TBits_2); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,2
  sw      $v1,($a0)
end;
function  TDEVCFG_DEVCFG0.getDEBUG : TBits_2;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,2
end;
procedure TDEVCFG_DEVCFG0.setICESEL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,8($a0)
end;
procedure TDEVCFG_DEVCFG0.clearICESEL; assembler; nostackframe; inline;
asm
  ori     $a1,$zero,8
  sw $a1,4($a0)
end;
procedure TDEVCFG_DEVCFG0.setICESEL(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,3,1
  sw      $v1,($a0)
end;
function  TDEVCFG_DEVCFG0.getICESEL : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,3,1
end;
procedure TDEVCFG_DEVCFG0.setPWP(thebits : TBits_8); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  sll     $a1,$a1,12
  lui    $v0,65520
  ori    $v0,$v0,4095
  and   $v1,$v1,$v0
  or    $a1,$a1,$v0
  sw    $a1,($a0)
end;
function  TDEVCFG_DEVCFG0.getPWP : TBits_8;
asm
  lw      $v1,($a0)
  srl     $a1,$a1,12
  lui    $v0,15
  ori    $v0,$v0,61440
  and    $a1,$a1,$v0
end;
procedure TDEVCFG_DEVCFG0.setBWP; assembler; nostackframe; inline;
asm
  lui     $a1,256
  sw $a1,8($a0)
end;
procedure TDEVCFG_DEVCFG0.clearBWP; assembler; nostackframe; inline;
asm
  lui     $a1,256
  sw $a1,4($a0)
end;
procedure TDEVCFG_DEVCFG0.setBWP(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,24,1
  sw      $v1,($a0)
end;
function  TDEVCFG_DEVCFG0.getBWP : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,24,1
end;
procedure TDEVCFG_DEVCFG0.setCP; assembler; nostackframe; inline;
asm
  lui     $a1,4096
  sw $a1,8($a0)
end;
procedure TDEVCFG_DEVCFG0.clearCP; assembler; nostackframe; inline;
asm
  lui     $a1,4096
  sw $a1,4($a0)
end;
procedure TDEVCFG_DEVCFG0.setCP(thebits : TBits_1); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,28,1
  sw      $v1,($a0)
end;
function  TDEVCFG_DEVCFG0.getCP : TBits_1;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,28,1
end;
procedure TDEVCFG_DEVCFG0.setFDEBUG(thebits : TBits_2); assembler; nostackframe; inline;
asm
  lw      $v1,($a0)
  ins     $v1,$a1,0,2
  sw      $v1,($a0)
end;
function  TDEVCFG_DEVCFG0.getFDEBUG : TBits_2;
asm
  lw      $v1,($a0)
  ext     $a1,$v1,0,2
end;
procedure TDEVCFG_DEVCFG0.setw(thebits : TBits_32); assembler; nostackframe; inline;
asm
  sw    $a1,($a0)
end;
function  TDEVCFG_DEVCFG0.getw : TBits_32;
asm
  lw      $v1,($a0)
end;
  procedure _CORE_TIMER_VECTOR_interrupt; external name '_CORE_TIMER_VECTOR_interrupt';
  procedure _CORE_SOFTWARE_0_VECTOR_interrupt; external name '_CORE_SOFTWARE_0_VECTOR_interrupt';
  procedure _CORE_SOFTWARE_1_VECTOR_interrupt; external name '_CORE_SOFTWARE_1_VECTOR_interrupt';
  procedure _EXTERNAL_0_VECTOR_interrupt; external name '_EXTERNAL_0_VECTOR_interrupt';
  procedure _TIMER_1_VECTOR_interrupt; external name '_TIMER_1_VECTOR_interrupt';
  procedure _INPUT_CAPTURE_1_VECTOR_interrupt; external name '_INPUT_CAPTURE_1_VECTOR_interrupt';
  procedure _OUTPUT_COMPARE_1_VECTOR_interrupt; external name '_OUTPUT_COMPARE_1_VECTOR_interrupt';
  procedure _EXTERNAL_1_VECTOR_interrupt; external name '_EXTERNAL_1_VECTOR_interrupt';
  procedure _TIMER_2_VECTOR_interrupt; external name '_TIMER_2_VECTOR_interrupt';
  procedure _INPUT_CAPTURE_2_VECTOR_interrupt; external name '_INPUT_CAPTURE_2_VECTOR_interrupt';
  procedure _OUTPUT_COMPARE_2_VECTOR_interrupt; external name '_OUTPUT_COMPARE_2_VECTOR_interrupt';
  procedure _EXTERNAL_2_VECTOR_interrupt; external name '_EXTERNAL_2_VECTOR_interrupt';
  procedure _TIMER_3_VECTOR_interrupt; external name '_TIMER_3_VECTOR_interrupt';
  procedure _INPUT_CAPTURE_3_VECTOR_interrupt; external name '_INPUT_CAPTURE_3_VECTOR_interrupt';
  procedure _OUTPUT_COMPARE_3_VECTOR_interrupt; external name '_OUTPUT_COMPARE_3_VECTOR_interrupt';
  procedure _EXTERNAL_3_VECTOR_interrupt; external name '_EXTERNAL_3_VECTOR_interrupt';
  procedure _TIMER_4_VECTOR_interrupt; external name '_TIMER_4_VECTOR_interrupt';
  procedure _INPUT_CAPTURE_4_VECTOR_interrupt; external name '_INPUT_CAPTURE_4_VECTOR_interrupt';
  procedure _OUTPUT_COMPARE_4_VECTOR_interrupt; external name '_OUTPUT_COMPARE_4_VECTOR_interrupt';
  procedure _EXTERNAL_4_VECTOR_interrupt; external name '_EXTERNAL_4_VECTOR_interrupt';
  procedure _TIMER_5_VECTOR_interrupt; external name '_TIMER_5_VECTOR_interrupt';
  procedure _INPUT_CAPTURE_5_VECTOR_interrupt; external name '_INPUT_CAPTURE_5_VECTOR_interrupt';
  procedure _OUTPUT_COMPARE_5_VECTOR_interrupt; external name '_OUTPUT_COMPARE_5_VECTOR_interrupt';
  procedure _SPI_1_VECTOR_interrupt; external name '_SPI_1_VECTOR_interrupt';
  procedure _SPI_1A_VECTOR_interrupt; external name '_SPI_1A_VECTOR_interrupt';
  procedure _UART_1_VECTOR_interrupt; external name '_UART_1_VECTOR_interrupt';
  procedure _UART_1A_VECTOR_interrupt; external name '_UART_1A_VECTOR_interrupt';
  procedure _I2C_3_VECTOR_interrupt; external name '_I2C_3_VECTOR_interrupt';
  procedure _I2C_1A_VECTOR_interrupt; external name '_I2C_1A_VECTOR_interrupt';
  procedure _SPI_3_VECTOR_interrupt; external name '_SPI_3_VECTOR_interrupt';
  procedure _I2C_1_VECTOR_interrupt; external name '_I2C_1_VECTOR_interrupt';
  procedure _CHANGE_NOTICE_VECTOR_interrupt; external name '_CHANGE_NOTICE_VECTOR_interrupt';
  procedure _ADC_VECTOR_interrupt; external name '_ADC_VECTOR_interrupt';
  procedure _PMP_VECTOR_interrupt; external name '_PMP_VECTOR_interrupt';
  procedure _COMPARATOR_1_VECTOR_interrupt; external name '_COMPARATOR_1_VECTOR_interrupt';
  procedure _COMPARATOR_2_VECTOR_interrupt; external name '_COMPARATOR_2_VECTOR_interrupt';
  procedure _SPI_2A_VECTOR_interrupt; external name '_SPI_2A_VECTOR_interrupt';
  procedure _UART_3_VECTOR_interrupt; external name '_UART_3_VECTOR_interrupt';
  procedure _UART_2A_VECTOR_interrupt; external name '_UART_2A_VECTOR_interrupt';
  procedure _I2C_4_VECTOR_interrupt; external name '_I2C_4_VECTOR_interrupt';
  procedure _I2C_2A_VECTOR_interrupt; external name '_I2C_2A_VECTOR_interrupt';
  procedure _SPI_2_VECTOR_interrupt; external name '_SPI_2_VECTOR_interrupt';
  procedure _SPI_3A_VECTOR_interrupt; external name '_SPI_3A_VECTOR_interrupt';
  procedure _UART_2_VECTOR_interrupt; external name '_UART_2_VECTOR_interrupt';
  procedure _UART_3A_VECTOR_interrupt; external name '_UART_3A_VECTOR_interrupt';
  procedure _I2C_5_VECTOR_interrupt; external name '_I2C_5_VECTOR_interrupt';
  procedure _I2C_3A_VECTOR_interrupt; external name '_I2C_3A_VECTOR_interrupt';
  procedure _SPI_4_VECTOR_interrupt; external name '_SPI_4_VECTOR_interrupt';
  procedure _I2C_2_VECTOR_interrupt; external name '_I2C_2_VECTOR_interrupt';
  procedure _FAIL_SAFE_MONITOR_VECTOR_interrupt; external name '_FAIL_SAFE_MONITOR_VECTOR_interrupt';
  procedure _RTCC_VECTOR_interrupt; external name '_RTCC_VECTOR_interrupt';
  procedure _DMA_0_VECTOR_interrupt; external name '_DMA_0_VECTOR_interrupt';
  procedure _DMA_1_VECTOR_interrupt; external name '_DMA_1_VECTOR_interrupt';
  procedure _DMA_2_VECTOR_interrupt; external name '_DMA_2_VECTOR_interrupt';
  procedure _DMA_3_VECTOR_interrupt; external name '_DMA_3_VECTOR_interrupt';
  procedure _DMA_4_VECTOR_interrupt; external name '_DMA_4_VECTOR_interrupt';
  procedure _DMA_5_VECTOR_interrupt; external name '_DMA_5_VECTOR_interrupt';
  procedure _DMA_6_VECTOR_interrupt; external name '_DMA_6_VECTOR_interrupt';
  procedure _DMA_7_VECTOR_interrupt; external name '_DMA_7_VECTOR_interrupt';
  procedure _FCE_VECTOR_interrupt; external name '_FCE_VECTOR_interrupt';
  procedure _USB_1_VECTOR_interrupt; external name '_USB_1_VECTOR_interrupt';
  procedure _CAN_1_VECTOR_interrupt; external name '_CAN_1_VECTOR_interrupt';
  procedure _UART_1B_VECTOR_interrupt; external name '_UART_1B_VECTOR_interrupt';
  procedure _UART_4_VECTOR_interrupt; external name '_UART_4_VECTOR_interrupt';
  procedure _UART_2B_VECTOR_interrupt; external name '_UART_2B_VECTOR_interrupt';
  procedure _UART_6_VECTOR_interrupt; external name '_UART_6_VECTOR_interrupt';
  procedure _UART_3B_VECTOR_interrupt; external name '_UART_3B_VECTOR_interrupt';
  procedure _UART_5_VECTOR_interrupt; external name '_UART_5_VECTOR_interrupt';

  procedure Vectors; assembler; nostackframe;
  label interrupt_vectors;
  asm
    .section ".init.interrupt_vectors,\"ax\",@progbits"
  interrupt_vectors:

    j _CORE_TIMER_VECTOR_interrupt
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    j _CORE_SOFTWARE_0_VECTOR_interrupt
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    j _CORE_SOFTWARE_1_VECTOR_interrupt
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    j _EXTERNAL_0_VECTOR_interrupt
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    j _TIMER_1_VECTOR_interrupt
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    j _INPUT_CAPTURE_1_VECTOR_interrupt
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    j _OUTPUT_COMPARE_1_VECTOR_interrupt
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    j _EXTERNAL_1_VECTOR_interrupt
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    j _TIMER_2_VECTOR_interrupt
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    j _INPUT_CAPTURE_2_VECTOR_interrupt
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    j _OUTPUT_COMPARE_2_VECTOR_interrupt
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    j _EXTERNAL_2_VECTOR_interrupt
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    j _TIMER_3_VECTOR_interrupt
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    j _INPUT_CAPTURE_3_VECTOR_interrupt
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    j _OUTPUT_COMPARE_3_VECTOR_interrupt
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    j _EXTERNAL_3_VECTOR_interrupt
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    j _TIMER_4_VECTOR_interrupt
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    j _INPUT_CAPTURE_4_VECTOR_interrupt
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    j _OUTPUT_COMPARE_4_VECTOR_interrupt
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    j _EXTERNAL_4_VECTOR_interrupt
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    j _TIMER_5_VECTOR_interrupt
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    j _INPUT_CAPTURE_5_VECTOR_interrupt
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    j _OUTPUT_COMPARE_5_VECTOR_interrupt
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    j _SPI_1_VECTOR_interrupt
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    j _SPI_1A_VECTOR_interrupt
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    j _I2C_1_VECTOR_interrupt
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    j _CHANGE_NOTICE_VECTOR_interrupt
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    j _ADC_VECTOR_interrupt
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    j _PMP_VECTOR_interrupt
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    j _COMPARATOR_1_VECTOR_interrupt
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    j _COMPARATOR_2_VECTOR_interrupt
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    j _SPI_2A_VECTOR_interrupt
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    j _SPI_3A_VECTOR_interrupt
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    j _I2C_2_VECTOR_interrupt
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    j _FAIL_SAFE_MONITOR_VECTOR_interrupt
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    j _RTCC_VECTOR_interrupt
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    j _DMA_0_VECTOR_interrupt
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    j _DMA_1_VECTOR_interrupt
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    j _DMA_2_VECTOR_interrupt
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    j _DMA_3_VECTOR_interrupt
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    j _DMA_4_VECTOR_interrupt
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    j _DMA_5_VECTOR_interrupt
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    j _DMA_6_VECTOR_interrupt
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    j _DMA_7_VECTOR_interrupt
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    j _FCE_VECTOR_interrupt
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    j _USB_1_VECTOR_interrupt
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    j _CAN_1_VECTOR_interrupt
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    j _UART_1B_VECTOR_interrupt
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    j _UART_2B_VECTOR_interrupt
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    j _UART_3B_VECTOR_interrupt
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    .weak _CORE_TIMER_VECTOR_interrupt
    .weak _CORE_SOFTWARE_0_VECTOR_interrupt
    .weak _CORE_SOFTWARE_1_VECTOR_interrupt
    .weak _EXTERNAL_0_VECTOR_interrupt
    .weak _TIMER_1_VECTOR_interrupt
    .weak _INPUT_CAPTURE_1_VECTOR_interrupt
    .weak _OUTPUT_COMPARE_1_VECTOR_interrupt
    .weak _EXTERNAL_1_VECTOR_interrupt
    .weak _TIMER_2_VECTOR_interrupt
    .weak _INPUT_CAPTURE_2_VECTOR_interrupt
    .weak _OUTPUT_COMPARE_2_VECTOR_interrupt
    .weak _EXTERNAL_2_VECTOR_interrupt
    .weak _TIMER_3_VECTOR_interrupt
    .weak _INPUT_CAPTURE_3_VECTOR_interrupt
    .weak _OUTPUT_COMPARE_3_VECTOR_interrupt
    .weak _EXTERNAL_3_VECTOR_interrupt
    .weak _TIMER_4_VECTOR_interrupt
    .weak _INPUT_CAPTURE_4_VECTOR_interrupt
    .weak _OUTPUT_COMPARE_4_VECTOR_interrupt
    .weak _EXTERNAL_4_VECTOR_interrupt
    .weak _TIMER_5_VECTOR_interrupt
    .weak _INPUT_CAPTURE_5_VECTOR_interrupt
    .weak _OUTPUT_COMPARE_5_VECTOR_interrupt
    .weak _SPI_1_VECTOR_interrupt
    .weak _SPI_1A_VECTOR_interrupt
    .weak _UART_1_VECTOR_interrupt
    .weak _UART_1A_VECTOR_interrupt
    .weak _I2C_3_VECTOR_interrupt
    .weak _I2C_1A_VECTOR_interrupt
    .weak _SPI_3_VECTOR_interrupt
    .weak _I2C_1_VECTOR_interrupt
    .weak _CHANGE_NOTICE_VECTOR_interrupt
    .weak _ADC_VECTOR_interrupt
    .weak _PMP_VECTOR_interrupt
    .weak _COMPARATOR_1_VECTOR_interrupt
    .weak _COMPARATOR_2_VECTOR_interrupt
    .weak _SPI_2A_VECTOR_interrupt
    .weak _UART_3_VECTOR_interrupt
    .weak _UART_2A_VECTOR_interrupt
    .weak _I2C_4_VECTOR_interrupt
    .weak _I2C_2A_VECTOR_interrupt
    .weak _SPI_2_VECTOR_interrupt
    .weak _SPI_3A_VECTOR_interrupt
    .weak _UART_2_VECTOR_interrupt
    .weak _UART_3A_VECTOR_interrupt
    .weak _I2C_5_VECTOR_interrupt
    .weak _I2C_3A_VECTOR_interrupt
    .weak _SPI_4_VECTOR_interrupt
    .weak _I2C_2_VECTOR_interrupt
    .weak _FAIL_SAFE_MONITOR_VECTOR_interrupt
    .weak _RTCC_VECTOR_interrupt
    .weak _DMA_0_VECTOR_interrupt
    .weak _DMA_1_VECTOR_interrupt
    .weak _DMA_2_VECTOR_interrupt
    .weak _DMA_3_VECTOR_interrupt
    .weak _DMA_4_VECTOR_interrupt
    .weak _DMA_5_VECTOR_interrupt
    .weak _DMA_6_VECTOR_interrupt
    .weak _DMA_7_VECTOR_interrupt
    .weak _FCE_VECTOR_interrupt
    .weak _USB_1_VECTOR_interrupt
    .weak _CAN_1_VECTOR_interrupt
    .weak _UART_1B_VECTOR_interrupt
    .weak _UART_4_VECTOR_interrupt
    .weak _UART_2B_VECTOR_interrupt
    .weak _UART_6_VECTOR_interrupt
    .weak _UART_3B_VECTOR_interrupt
    .weak _UART_5_VECTOR_interrupt

    .text
  end;
end.
